/*-- Last Change Revision: $Rev: 2028300 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:57 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_pat_dmgr_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 21, 2008 18:24:23
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_pat_dmgr_hist_in   IN pat_dmgr_hist.id_pat_dmgr_hist%TYPE,
        id_patient_in         IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_professional_in    IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_institution_in     IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        name_in               IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        gender_in             IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        nick_name_in          IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        age_in                IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        marital_status_in     IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        address_in            IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        district_in           IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        zip_code_in           IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in   IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in        IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in     IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in  IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_scholarship_in     IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        father_name_in        IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        id_isencao_in         IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        birth_place_in        IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        id_recm_in            IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_occupation_in      IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        occupation_desc_in    IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        mother_name_in        IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        location_in           IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        num_doc_external_in   IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        dt_change_tstz_in     IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        id_geo_state_in       IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in        IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        desc_geo_state_in     IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        flg_migrator_in       IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        id_country_address_in IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_episode_in         IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        dt_birth_in           IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pat_dmgr_hist
            (id_pat_dmgr_hist,
             id_patient,
             id_professional,
             id_institution,
             name,
             gender,
             nick_name,
             age,
             marital_status,
             address,
             district,
             zip_code,
             num_main_contact,
             num_contact,
             flg_job_status,
             id_country_nation,
             id_scholarship,
             father_name,
             id_isencao,
             birth_place,
             num_health_plan,
             id_recm,
             id_occupation,
             occupation_desc,
             mother_name,
             location,
             num_doc_external,
             dt_change_tstz,
             id_geo_state,
             num_contrib,
             desc_geo_state,
             flg_migrator,
             id_country_address,
             id_episode,
             dt_birth)
        VALUES
            (id_pat_dmgr_hist_in,
             id_patient_in,
             id_professional_in,
             id_institution_in,
             name_in,
             gender_in,
             nick_name_in,
             age_in,
             marital_status_in,
             address_in,
             district_in,
             zip_code_in,
             num_main_contact_in,
             num_contact_in,
             flg_job_status_in,
             id_country_nation_in,
             id_scholarship_in,
             father_name_in,
             id_isencao_in,
             birth_place_in,
             num_health_plan_in,
             id_recm_in,
             id_occupation_in,
             occupation_desc_in,
             mother_name_in,
             location_in,
             num_doc_external_in,
             dt_change_tstz_in,
             id_geo_state_in,
             num_contrib_in,
             desc_geo_state_in,
             flg_migrator_in,
             id_country_address_in,
             id_episode_in,
             dt_birth_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_DMGR_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    IF l_name = 'PDT_COY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COUNTRY_ADDRESS',
                                                        value_in           => id_country_address_in);
                    END IF;
                    IF l_name = 'PDT_CTR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COUNTRY_NATION',
                                                        value_in           => id_country_nation_in);
                    END IF;
                    IF l_name = 'PDT_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PDT_I_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ISENCAO',
                                                        value_in           => id_isencao_in);
                    END IF;
                    IF l_name = 'PDT_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PDT_OCC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OCCUPATION',
                                                        value_in           => id_occupation_in);
                    END IF;
                    IF l_name = 'PDT_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PDT_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'PDT_RECM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RECM',
                                                        value_in           => id_recm_in);
                    END IF;
                    IF l_name = 'PDT_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHOLARSHIP',
                                                        value_in           => id_scholarship_in);
                    END IF;
                    IF l_name = 'PTDMH_GSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_GEO_STATE',
                                                        value_in           => id_geo_state_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_pat_dmgr_hist_in   IN pat_dmgr_hist.id_pat_dmgr_hist%TYPE,
        id_patient_in         IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_professional_in    IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_institution_in     IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        name_in               IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        gender_in             IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        nick_name_in          IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        age_in                IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        marital_status_in     IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        address_in            IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        district_in           IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        zip_code_in           IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in   IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in        IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in     IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in  IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_scholarship_in     IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        father_name_in        IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        id_isencao_in         IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        birth_place_in        IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        id_recm_in            IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_occupation_in      IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        occupation_desc_in    IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        mother_name_in        IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        location_in           IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        num_doc_external_in   IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        dt_change_tstz_in     IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        id_geo_state_in       IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in        IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        desc_geo_state_in     IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        flg_migrator_in       IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        id_country_address_in IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_episode_in         IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        dt_birth_in           IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_pat_dmgr_hist_in   => id_pat_dmgr_hist_in,
            id_patient_in         => id_patient_in,
            id_professional_in    => id_professional_in,
            id_institution_in     => id_institution_in,
            name_in               => name_in,
            gender_in             => gender_in,
            nick_name_in          => nick_name_in,
            age_in                => age_in,
            marital_status_in     => marital_status_in,
            address_in            => address_in,
            district_in           => district_in,
            zip_code_in           => zip_code_in,
            num_main_contact_in   => num_main_contact_in,
            num_contact_in        => num_contact_in,
            flg_job_status_in     => flg_job_status_in,
            id_country_nation_in  => id_country_nation_in,
            id_scholarship_in     => id_scholarship_in,
            father_name_in        => father_name_in,
            id_isencao_in         => id_isencao_in,
            birth_place_in        => birth_place_in,
            num_health_plan_in    => num_health_plan_in,
            id_recm_in            => id_recm_in,
            id_occupation_in      => id_occupation_in,
            occupation_desc_in    => occupation_desc_in,
            mother_name_in        => mother_name_in,
            location_in           => location_in,
            num_doc_external_in   => num_doc_external_in,
            dt_change_tstz_in     => dt_change_tstz_in,
            id_geo_state_in       => id_geo_state_in,
            num_contrib_in        => num_contrib_in,
            desc_geo_state_in     => desc_geo_state_in,
            flg_migrator_in       => flg_migrator_in,
            id_country_address_in => id_country_address_in,
            id_episode_in         => id_episode_in,
            dt_birth_in           => dt_birth_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_dmgr_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pat_dmgr_hist%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_pat_dmgr_hist := next_key(sequence_in);
        END IF;
        ins(id_pat_dmgr_hist_in   => l_rec.id_pat_dmgr_hist,
            id_patient_in         => l_rec.id_patient,
            id_professional_in    => l_rec.id_professional,
            id_institution_in     => l_rec.id_institution,
            name_in               => l_rec.name,
            gender_in             => l_rec.gender,
            nick_name_in          => l_rec.nick_name,
            age_in                => l_rec.age,
            marital_status_in     => l_rec.marital_status,
            address_in            => l_rec.address,
            district_in           => l_rec.district,
            zip_code_in           => l_rec.zip_code,
            num_main_contact_in   => l_rec.num_main_contact,
            num_contact_in        => l_rec.num_contact,
            flg_job_status_in     => l_rec.flg_job_status,
            id_country_nation_in  => l_rec.id_country_nation,
            id_scholarship_in     => l_rec.id_scholarship,
            father_name_in        => l_rec.father_name,
            id_isencao_in         => l_rec.id_isencao,
            birth_place_in        => l_rec.birth_place,
            num_health_plan_in    => l_rec.num_health_plan,
            id_recm_in            => l_rec.id_recm,
            id_occupation_in      => l_rec.id_occupation,
            occupation_desc_in    => l_rec.occupation_desc,
            mother_name_in        => l_rec.mother_name,
            location_in           => l_rec.location,
            num_doc_external_in   => l_rec.num_doc_external,
            dt_change_tstz_in     => l_rec.dt_change_tstz,
            id_geo_state_in       => l_rec.id_geo_state,
            num_contrib_in        => l_rec.num_contrib,
            desc_geo_state_in     => l_rec.desc_geo_state,
            flg_migrator_in       => l_rec.flg_migrator,
            id_country_address_in => l_rec.id_country_address,
            id_episode_in         => l_rec.id_episode,
            dt_birth_in           => l_rec.dt_birth,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_dmgr_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN pat_dmgr_hist.id_pat_dmgr_hist%TYPE
    
     IS
        retval pat_dmgr_hist.id_pat_dmgr_hist%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_pat_dmgr_hist.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PAT_DMGR_HIST'));
    END next_key;

    PROCEDURE ins
    (
        id_patient_in         IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_professional_in    IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_institution_in     IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        name_in               IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        gender_in             IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        nick_name_in          IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        age_in                IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        marital_status_in     IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        address_in            IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        district_in           IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        zip_code_in           IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in   IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in        IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in     IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in  IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_scholarship_in     IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        father_name_in        IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        id_isencao_in         IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        birth_place_in        IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        id_recm_in            IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_occupation_in      IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        occupation_desc_in    IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        mother_name_in        IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        location_in           IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        num_doc_external_in   IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        dt_change_tstz_in     IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        id_geo_state_in       IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in        IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        desc_geo_state_in     IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        flg_migrator_in       IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        id_country_address_in IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_episode_in         IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        dt_birth_in           IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        id_pat_dmgr_hist_out  IN OUT pat_dmgr_hist.id_pat_dmgr_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky pat_dmgr_hist.id_pat_dmgr_hist%TYPE := next_key;
    BEGIN
        ins(id_pat_dmgr_hist_in   => l_pky,
            id_patient_in         => id_patient_in,
            id_professional_in    => id_professional_in,
            id_institution_in     => id_institution_in,
            name_in               => name_in,
            gender_in             => gender_in,
            nick_name_in          => nick_name_in,
            age_in                => age_in,
            marital_status_in     => marital_status_in,
            address_in            => address_in,
            district_in           => district_in,
            zip_code_in           => zip_code_in,
            num_main_contact_in   => num_main_contact_in,
            num_contact_in        => num_contact_in,
            flg_job_status_in     => flg_job_status_in,
            id_country_nation_in  => id_country_nation_in,
            id_scholarship_in     => id_scholarship_in,
            father_name_in        => father_name_in,
            id_isencao_in         => id_isencao_in,
            birth_place_in        => birth_place_in,
            num_health_plan_in    => num_health_plan_in,
            id_recm_in            => id_recm_in,
            id_occupation_in      => id_occupation_in,
            occupation_desc_in    => occupation_desc_in,
            mother_name_in        => mother_name_in,
            location_in           => location_in,
            num_doc_external_in   => num_doc_external_in,
            dt_change_tstz_in     => dt_change_tstz_in,
            id_geo_state_in       => id_geo_state_in,
            num_contrib_in        => num_contrib_in,
            desc_geo_state_in     => desc_geo_state_in,
            flg_migrator_in       => flg_migrator_in,
            id_country_address_in => id_country_address_in,
            id_episode_in         => id_episode_in,
            dt_birth_in           => dt_birth_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        id_pat_dmgr_hist_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_patient_in         IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_professional_in    IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_institution_in     IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        name_in               IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        gender_in             IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        nick_name_in          IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        age_in                IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        marital_status_in     IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        address_in            IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        district_in           IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        zip_code_in           IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in   IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in        IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in     IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in  IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_scholarship_in     IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        father_name_in        IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        id_isencao_in         IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        birth_place_in        IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        id_recm_in            IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_occupation_in      IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        occupation_desc_in    IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        mother_name_in        IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        location_in           IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        num_doc_external_in   IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        dt_change_tstz_in     IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        id_geo_state_in       IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in        IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        desc_geo_state_in     IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        flg_migrator_in       IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        id_country_address_in IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_episode_in         IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        dt_birth_in           IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        id_pat_dmgr_hist_out  IN OUT pat_dmgr_hist.id_pat_dmgr_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_patient_in         => id_patient_in,
            id_professional_in    => id_professional_in,
            id_institution_in     => id_institution_in,
            name_in               => name_in,
            gender_in             => gender_in,
            nick_name_in          => nick_name_in,
            age_in                => age_in,
            marital_status_in     => marital_status_in,
            address_in            => address_in,
            district_in           => district_in,
            zip_code_in           => zip_code_in,
            num_main_contact_in   => num_main_contact_in,
            num_contact_in        => num_contact_in,
            flg_job_status_in     => flg_job_status_in,
            id_country_nation_in  => id_country_nation_in,
            id_scholarship_in     => id_scholarship_in,
            father_name_in        => father_name_in,
            id_isencao_in         => id_isencao_in,
            birth_place_in        => birth_place_in,
            num_health_plan_in    => num_health_plan_in,
            id_recm_in            => id_recm_in,
            id_occupation_in      => id_occupation_in,
            occupation_desc_in    => occupation_desc_in,
            mother_name_in        => mother_name_in,
            location_in           => location_in,
            num_doc_external_in   => num_doc_external_in,
            dt_change_tstz_in     => dt_change_tstz_in,
            id_geo_state_in       => id_geo_state_in,
            num_contrib_in        => num_contrib_in,
            desc_geo_state_in     => desc_geo_state_in,
            flg_migrator_in       => flg_migrator_in,
            id_country_address_in => id_country_address_in,
            id_episode_in         => id_episode_in,
            dt_birth_in           => dt_birth_in,
            id_pat_dmgr_hist_out  => id_pat_dmgr_hist_out,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    FUNCTION ins
    (
        id_patient_in         IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_professional_in    IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_institution_in     IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        name_in               IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        gender_in             IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        nick_name_in          IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        age_in                IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        marital_status_in     IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        address_in            IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        district_in           IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        zip_code_in           IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in   IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in        IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in     IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in  IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_scholarship_in     IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        father_name_in        IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        id_isencao_in         IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        birth_place_in        IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        id_recm_in            IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_occupation_in      IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        occupation_desc_in    IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        mother_name_in        IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        location_in           IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        num_doc_external_in   IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        dt_change_tstz_in     IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        id_geo_state_in       IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in        IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        desc_geo_state_in     IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        flg_migrator_in       IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        id_country_address_in IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_episode_in         IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        dt_birth_in           IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) RETURN pat_dmgr_hist.id_pat_dmgr_hist%TYPE IS
        l_pky pat_dmgr_hist.id_pat_dmgr_hist%TYPE := next_key;
    BEGIN
        ins(id_pat_dmgr_hist_in   => l_pky,
            id_patient_in         => id_patient_in,
            id_professional_in    => id_professional_in,
            id_institution_in     => id_institution_in,
            name_in               => name_in,
            gender_in             => gender_in,
            nick_name_in          => nick_name_in,
            age_in                => age_in,
            marital_status_in     => marital_status_in,
            address_in            => address_in,
            district_in           => district_in,
            zip_code_in           => zip_code_in,
            num_main_contact_in   => num_main_contact_in,
            num_contact_in        => num_contact_in,
            flg_job_status_in     => flg_job_status_in,
            id_country_nation_in  => id_country_nation_in,
            id_scholarship_in     => id_scholarship_in,
            father_name_in        => father_name_in,
            id_isencao_in         => id_isencao_in,
            birth_place_in        => birth_place_in,
            num_health_plan_in    => num_health_plan_in,
            id_recm_in            => id_recm_in,
            id_occupation_in      => id_occupation_in,
            occupation_desc_in    => occupation_desc_in,
            mother_name_in        => mother_name_in,
            location_in           => location_in,
            num_doc_external_in   => num_doc_external_in,
            dt_change_tstz_in     => dt_change_tstz_in,
            id_geo_state_in       => id_geo_state_in,
            num_contrib_in        => num_contrib_in,
            desc_geo_state_in     => desc_geo_state_in,
            flg_migrator_in       => flg_migrator_in,
            id_country_address_in => id_country_address_in,
            id_episode_in         => id_episode_in,
            dt_birth_in           => dt_birth_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_patient_in         IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_professional_in    IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_institution_in     IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        name_in               IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        gender_in             IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        nick_name_in          IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        age_in                IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        marital_status_in     IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        address_in            IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        district_in           IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        zip_code_in           IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in   IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in        IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in     IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in  IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_scholarship_in     IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        father_name_in        IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        id_isencao_in         IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        birth_place_in        IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        id_recm_in            IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_occupation_in      IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        occupation_desc_in    IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        mother_name_in        IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        location_in           IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        num_doc_external_in   IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        dt_change_tstz_in     IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        id_geo_state_in       IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in        IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        desc_geo_state_in     IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        flg_migrator_in       IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        id_country_address_in IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_episode_in         IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        dt_birth_in           IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) RETURN pat_dmgr_hist.id_pat_dmgr_hist%TYPE IS
        l_pky    pat_dmgr_hist.id_pat_dmgr_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_dmgr_hist_in   => l_pky,
            id_patient_in         => id_patient_in,
            id_professional_in    => id_professional_in,
            id_institution_in     => id_institution_in,
            name_in               => name_in,
            gender_in             => gender_in,
            nick_name_in          => nick_name_in,
            age_in                => age_in,
            marital_status_in     => marital_status_in,
            address_in            => address_in,
            district_in           => district_in,
            zip_code_in           => zip_code_in,
            num_main_contact_in   => num_main_contact_in,
            num_contact_in        => num_contact_in,
            flg_job_status_in     => flg_job_status_in,
            id_country_nation_in  => id_country_nation_in,
            id_scholarship_in     => id_scholarship_in,
            father_name_in        => father_name_in,
            id_isencao_in         => id_isencao_in,
            birth_place_in        => birth_place_in,
            num_health_plan_in    => num_health_plan_in,
            id_recm_in            => id_recm_in,
            id_occupation_in      => id_occupation_in,
            occupation_desc_in    => occupation_desc_in,
            mother_name_in        => mother_name_in,
            location_in           => location_in,
            num_doc_external_in   => num_doc_external_in,
            dt_change_tstz_in     => dt_change_tstz_in,
            id_geo_state_in       => id_geo_state_in,
            num_contrib_in        => num_contrib_in,
            desc_geo_state_in     => desc_geo_state_in,
            flg_migrator_in       => flg_migrator_in,
            id_country_address_in => id_country_address_in,
            id_episode_in         => id_episode_in,
            dt_birth_in           => dt_birth_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_patient_in         IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_professional_in    IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_institution_in     IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        name_in               IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        gender_in             IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        nick_name_in          IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        age_in                IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        marital_status_in     IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        address_in            IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        district_in           IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        zip_code_in           IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in   IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in        IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in     IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in  IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_scholarship_in     IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        father_name_in        IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        id_isencao_in         IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        birth_place_in        IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        id_recm_in            IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_occupation_in      IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        occupation_desc_in    IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        mother_name_in        IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        location_in           IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        num_doc_external_in   IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        dt_change_tstz_in     IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        id_geo_state_in       IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in        IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        desc_geo_state_in     IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        flg_migrator_in       IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        id_country_address_in IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_episode_in         IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        dt_birth_in           IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky pat_dmgr_hist.id_pat_dmgr_hist%TYPE := next_key;
    BEGIN
        ins(id_pat_dmgr_hist_in   => l_pky,
            id_patient_in         => id_patient_in,
            id_professional_in    => id_professional_in,
            id_institution_in     => id_institution_in,
            name_in               => name_in,
            gender_in             => gender_in,
            nick_name_in          => nick_name_in,
            age_in                => age_in,
            marital_status_in     => marital_status_in,
            address_in            => address_in,
            district_in           => district_in,
            zip_code_in           => zip_code_in,
            num_main_contact_in   => num_main_contact_in,
            num_contact_in        => num_contact_in,
            flg_job_status_in     => flg_job_status_in,
            id_country_nation_in  => id_country_nation_in,
            id_scholarship_in     => id_scholarship_in,
            father_name_in        => father_name_in,
            id_isencao_in         => id_isencao_in,
            birth_place_in        => birth_place_in,
            num_health_plan_in    => num_health_plan_in,
            id_recm_in            => id_recm_in,
            id_occupation_in      => id_occupation_in,
            occupation_desc_in    => occupation_desc_in,
            mother_name_in        => mother_name_in,
            location_in           => location_in,
            num_doc_external_in   => num_doc_external_in,
            dt_change_tstz_in     => dt_change_tstz_in,
            id_geo_state_in       => id_geo_state_in,
            num_contrib_in        => num_contrib_in,
            desc_geo_state_in     => desc_geo_state_in,
            flg_migrator_in       => flg_migrator_in,
            id_country_address_in => id_country_address_in,
            id_episode_in         => id_episode_in,
            dt_birth_in           => dt_birth_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_patient_in         IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_professional_in    IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_institution_in     IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        name_in               IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        gender_in             IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        nick_name_in          IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        age_in                IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        marital_status_in     IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        address_in            IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        district_in           IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        zip_code_in           IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in   IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in        IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in     IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in  IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_scholarship_in     IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        father_name_in        IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        id_isencao_in         IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        birth_place_in        IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        id_recm_in            IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_occupation_in      IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        occupation_desc_in    IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        mother_name_in        IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        location_in           IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        num_doc_external_in   IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        dt_change_tstz_in     IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        id_geo_state_in       IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in        IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        desc_geo_state_in     IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        flg_migrator_in       IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        id_country_address_in IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_episode_in         IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        dt_birth_in           IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        l_pky    pat_dmgr_hist.id_pat_dmgr_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_dmgr_hist_in   => l_pky,
            id_patient_in         => id_patient_in,
            id_professional_in    => id_professional_in,
            id_institution_in     => id_institution_in,
            name_in               => name_in,
            gender_in             => gender_in,
            nick_name_in          => nick_name_in,
            age_in                => age_in,
            marital_status_in     => marital_status_in,
            address_in            => address_in,
            district_in           => district_in,
            zip_code_in           => zip_code_in,
            num_main_contact_in   => num_main_contact_in,
            num_contact_in        => num_contact_in,
            flg_job_status_in     => flg_job_status_in,
            id_country_nation_in  => id_country_nation_in,
            id_scholarship_in     => id_scholarship_in,
            father_name_in        => father_name_in,
            id_isencao_in         => id_isencao_in,
            birth_place_in        => birth_place_in,
            num_health_plan_in    => num_health_plan_in,
            id_recm_in            => id_recm_in,
            id_occupation_in      => id_occupation_in,
            occupation_desc_in    => occupation_desc_in,
            mother_name_in        => mother_name_in,
            location_in           => location_in,
            num_doc_external_in   => num_doc_external_in,
            dt_change_tstz_in     => dt_change_tstz_in,
            id_geo_state_in       => id_geo_state_in,
            num_contrib_in        => num_contrib_in,
            desc_geo_state_in     => desc_geo_state_in,
            flg_migrator_in       => flg_migrator_in,
            id_country_address_in => id_country_address_in,
            id_episode_in         => id_episode_in,
            dt_birth_in           => dt_birth_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_dmgr_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO pat_dmgr_hist
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_DMGR_HIST _' || indx,
                                                        value_in           => rows_in(indx).id_pat_dmgr_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NAME _' || indx,
                                                        value_in           => rows_in(indx).name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'GENDER _' || indx,
                                                        value_in           => rows_in(indx).gender,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NICK_NAME _' || indx,
                                                        value_in           => rows_in(indx).nick_name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'AGE _' || indx,
                                                        value_in           => rows_in(indx).age,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MARITAL_STATUS _' || indx,
                                                        value_in           => rows_in(indx).marital_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ADDRESS _' || indx,
                                                        value_in           => rows_in(indx).address,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DISTRICT _' || indx,
                                                        value_in           => rows_in(indx).district,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ZIP_CODE _' || indx,
                                                        value_in           => rows_in(indx).zip_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_MAIN_CONTACT _' || indx,
                                                        value_in           => rows_in(indx).num_main_contact,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_CONTACT _' || indx,
                                                        value_in           => rows_in(indx).num_contact,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_JOB_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_job_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COUNTRY_NATION _' || indx,
                                                        value_in           => rows_in(indx).id_country_nation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHOLARSHIP _' || indx,
                                                        value_in           => rows_in(indx).id_scholarship,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FATHER_NAME _' || indx,
                                                        value_in           => rows_in(indx).father_name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ISENCAO _' || indx,
                                                        value_in           => rows_in(indx).id_isencao,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BIRTH_PLACE _' || indx,
                                                        value_in           => rows_in(indx).birth_place,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_HEALTH_PLAN _' || indx,
                                                        value_in           => rows_in(indx).num_health_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RECM _' || indx,
                                                        value_in           => rows_in(indx).id_recm,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_OCCUPATION _' || indx,
                                                        value_in           => rows_in(indx).id_occupation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OCCUPATION_DESC _' || indx,
                                                        value_in           => rows_in(indx).occupation_desc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MOTHER_NAME _' || indx,
                                                        value_in           => rows_in(indx).mother_name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LOCATION _' || indx,
                                                        value_in           => rows_in(indx).location,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_DOC_EXTERNAL _' || indx,
                                                        value_in           => rows_in(indx).num_doc_external,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CHANGE_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_change_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_GEO_STATE _' || indx,
                                                        value_in           => rows_in(indx).id_geo_state,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_CONTRIB _' || indx,
                                                        value_in           => rows_in(indx).num_contrib,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DESC_GEO_STATE _' || indx,
                                                        value_in           => rows_in(indx).desc_geo_state,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_MIGRATOR _' || indx,
                                                        value_in           => rows_in(indx).flg_migrator,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COUNTRY_ADDRESS _' || indx,
                                                        value_in           => rows_in(indx).id_country_address,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BIRTH _' || indx,
                                                        value_in           => rows_in(indx).dt_birth,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PAT_DMGR_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_dmgr_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_pat_dmgr_hist_in    IN pat_dmgr_hist.id_pat_dmgr_hist%TYPE,
        id_patient_in          IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_professional_in     IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_professional_nin    IN BOOLEAN := TRUE,
        id_institution_in      IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        name_in                IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        name_nin               IN BOOLEAN := TRUE,
        gender_in              IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        gender_nin             IN BOOLEAN := TRUE,
        nick_name_in           IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        nick_name_nin          IN BOOLEAN := TRUE,
        age_in                 IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        age_nin                IN BOOLEAN := TRUE,
        marital_status_in      IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        marital_status_nin     IN BOOLEAN := TRUE,
        address_in             IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        address_nin            IN BOOLEAN := TRUE,
        district_in            IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        district_nin           IN BOOLEAN := TRUE,
        zip_code_in            IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        zip_code_nin           IN BOOLEAN := TRUE,
        num_main_contact_in    IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_main_contact_nin   IN BOOLEAN := TRUE,
        num_contact_in         IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        num_contact_nin        IN BOOLEAN := TRUE,
        flg_job_status_in      IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        flg_job_status_nin     IN BOOLEAN := TRUE,
        id_country_nation_in   IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_country_nation_nin  IN BOOLEAN := TRUE,
        id_scholarship_in      IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        id_scholarship_nin     IN BOOLEAN := TRUE,
        father_name_in         IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        father_name_nin        IN BOOLEAN := TRUE,
        id_isencao_in          IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        id_isencao_nin         IN BOOLEAN := TRUE,
        birth_place_in         IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        birth_place_nin        IN BOOLEAN := TRUE,
        num_health_plan_in     IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        num_health_plan_nin    IN BOOLEAN := TRUE,
        id_recm_in             IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_recm_nin            IN BOOLEAN := TRUE,
        id_occupation_in       IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        id_occupation_nin      IN BOOLEAN := TRUE,
        occupation_desc_in     IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        occupation_desc_nin    IN BOOLEAN := TRUE,
        mother_name_in         IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        mother_name_nin        IN BOOLEAN := TRUE,
        location_in            IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        location_nin           IN BOOLEAN := TRUE,
        num_doc_external_in    IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        num_doc_external_nin   IN BOOLEAN := TRUE,
        dt_change_tstz_in      IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        dt_change_tstz_nin     IN BOOLEAN := TRUE,
        id_geo_state_in        IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        id_geo_state_nin       IN BOOLEAN := TRUE,
        num_contrib_in         IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        num_contrib_nin        IN BOOLEAN := TRUE,
        desc_geo_state_in      IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        desc_geo_state_nin     IN BOOLEAN := TRUE,
        flg_migrator_in        IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        flg_migrator_nin       IN BOOLEAN := TRUE,
        id_country_address_in  IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_country_address_nin IN BOOLEAN := TRUE,
        id_episode_in          IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        dt_birth_in            IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        dt_birth_nin           IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_patient_n         NUMBER(1);
        l_id_professional_n    NUMBER(1);
        l_id_institution_n     NUMBER(1);
        l_name_n               NUMBER(1);
        l_gender_n             NUMBER(1);
        l_nick_name_n          NUMBER(1);
        l_age_n                NUMBER(1);
        l_marital_status_n     NUMBER(1);
        l_address_n            NUMBER(1);
        l_district_n           NUMBER(1);
        l_zip_code_n           NUMBER(1);
        l_num_main_contact_n   NUMBER(1);
        l_num_contact_n        NUMBER(1);
        l_flg_job_status_n     NUMBER(1);
        l_id_country_nation_n  NUMBER(1);
        l_id_scholarship_n     NUMBER(1);
        l_father_name_n        NUMBER(1);
        l_id_isencao_n         NUMBER(1);
        l_birth_place_n        NUMBER(1);
        l_num_health_plan_n    NUMBER(1);
        l_id_recm_n            NUMBER(1);
        l_id_occupation_n      NUMBER(1);
        l_occupation_desc_n    NUMBER(1);
        l_mother_name_n        NUMBER(1);
        l_location_n           NUMBER(1);
        l_num_doc_external_n   NUMBER(1);
        l_dt_change_tstz_n     NUMBER(1);
        l_id_geo_state_n       NUMBER(1);
        l_num_contrib_n        NUMBER(1);
        l_desc_geo_state_n     NUMBER(1);
        l_flg_migrator_n       NUMBER(1);
        l_id_country_address_n NUMBER(1);
        l_id_episode_n         NUMBER(1);
        l_dt_birth_n           NUMBER(1);
    BEGIN
    
        l_id_patient_n         := sys.diutil.bool_to_int(id_patient_nin);
        l_id_professional_n    := sys.diutil.bool_to_int(id_professional_nin);
        l_id_institution_n     := sys.diutil.bool_to_int(id_institution_nin);
        l_name_n               := sys.diutil.bool_to_int(name_nin);
        l_gender_n             := sys.diutil.bool_to_int(gender_nin);
        l_nick_name_n          := sys.diutil.bool_to_int(nick_name_nin);
        l_age_n                := sys.diutil.bool_to_int(age_nin);
        l_marital_status_n     := sys.diutil.bool_to_int(marital_status_nin);
        l_address_n            := sys.diutil.bool_to_int(address_nin);
        l_district_n           := sys.diutil.bool_to_int(district_nin);
        l_zip_code_n           := sys.diutil.bool_to_int(zip_code_nin);
        l_num_main_contact_n   := sys.diutil.bool_to_int(num_main_contact_nin);
        l_num_contact_n        := sys.diutil.bool_to_int(num_contact_nin);
        l_flg_job_status_n     := sys.diutil.bool_to_int(flg_job_status_nin);
        l_id_country_nation_n  := sys.diutil.bool_to_int(id_country_nation_nin);
        l_id_scholarship_n     := sys.diutil.bool_to_int(id_scholarship_nin);
        l_father_name_n        := sys.diutil.bool_to_int(father_name_nin);
        l_id_isencao_n         := sys.diutil.bool_to_int(id_isencao_nin);
        l_birth_place_n        := sys.diutil.bool_to_int(birth_place_nin);
        l_num_health_plan_n    := sys.diutil.bool_to_int(num_health_plan_nin);
        l_id_recm_n            := sys.diutil.bool_to_int(id_recm_nin);
        l_id_occupation_n      := sys.diutil.bool_to_int(id_occupation_nin);
        l_occupation_desc_n    := sys.diutil.bool_to_int(occupation_desc_nin);
        l_mother_name_n        := sys.diutil.bool_to_int(mother_name_nin);
        l_location_n           := sys.diutil.bool_to_int(location_nin);
        l_num_doc_external_n   := sys.diutil.bool_to_int(num_doc_external_nin);
        l_dt_change_tstz_n     := sys.diutil.bool_to_int(dt_change_tstz_nin);
        l_id_geo_state_n       := sys.diutil.bool_to_int(id_geo_state_nin);
        l_num_contrib_n        := sys.diutil.bool_to_int(num_contrib_nin);
        l_desc_geo_state_n     := sys.diutil.bool_to_int(desc_geo_state_nin);
        l_flg_migrator_n       := sys.diutil.bool_to_int(flg_migrator_nin);
        l_id_country_address_n := sys.diutil.bool_to_int(id_country_address_nin);
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_dt_birth_n           := sys.diutil.bool_to_int(dt_birth_nin);
    
        UPDATE pat_dmgr_hist
           SET id_patient         = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_professional    = decode(l_id_professional_n,
                                           0,
                                           id_professional_in,
                                           nvl(id_professional_in, id_professional)),
               id_institution     = decode(l_id_institution_n,
                                           0,
                                           id_institution_in,
                                           nvl(id_institution_in, id_institution)),
               name               = decode(l_name_n, 0, name_in, nvl(name_in, name)),
               gender             = decode(l_gender_n, 0, gender_in, nvl(gender_in, gender)),
               nick_name          = decode(l_nick_name_n, 0, nick_name_in, nvl(nick_name_in, nick_name)),
               age                = decode(l_age_n, 0, age_in, nvl(age_in, age)),
               marital_status     = decode(l_marital_status_n,
                                           0,
                                           marital_status_in,
                                           nvl(marital_status_in, marital_status)),
               address            = decode(l_address_n, 0, address_in, nvl(address_in, address)),
               district           = decode(l_district_n, 0, district_in, nvl(district_in, district)),
               zip_code           = decode(l_zip_code_n, 0, zip_code_in, nvl(zip_code_in, zip_code)),
               num_main_contact   = decode(l_num_main_contact_n,
                                           0,
                                           num_main_contact_in,
                                           nvl(num_main_contact_in, num_main_contact)),
               num_contact        = decode(l_num_contact_n, 0, num_contact_in, nvl(num_contact_in, num_contact)),
               flg_job_status     = decode(l_flg_job_status_n,
                                           0,
                                           flg_job_status_in,
                                           nvl(flg_job_status_in, flg_job_status)),
               id_country_nation  = decode(l_id_country_nation_n,
                                           0,
                                           id_country_nation_in,
                                           nvl(id_country_nation_in, id_country_nation)),
               id_scholarship     = decode(l_id_scholarship_n,
                                           0,
                                           id_scholarship_in,
                                           nvl(id_scholarship_in, id_scholarship)),
               father_name        = decode(l_father_name_n, 0, father_name_in, nvl(father_name_in, father_name)),
               id_isencao         = decode(l_id_isencao_n, 0, id_isencao_in, nvl(id_isencao_in, id_isencao)),
               birth_place        = decode(l_birth_place_n, 0, birth_place_in, nvl(birth_place_in, birth_place)),
               num_health_plan    = decode(l_num_health_plan_n,
                                           0,
                                           num_health_plan_in,
                                           nvl(num_health_plan_in, num_health_plan)),
               id_recm            = decode(l_id_recm_n, 0, id_recm_in, nvl(id_recm_in, id_recm)),
               id_occupation      = decode(l_id_occupation_n, 0, id_occupation_in, nvl(id_occupation_in, id_occupation)),
               occupation_desc    = decode(l_occupation_desc_n,
                                           0,
                                           occupation_desc_in,
                                           nvl(occupation_desc_in, occupation_desc)),
               mother_name        = decode(l_mother_name_n, 0, mother_name_in, nvl(mother_name_in, mother_name)),
               location           = decode(l_location_n, 0, location_in, nvl(location_in, location)),
               num_doc_external   = decode(l_num_doc_external_n,
                                           0,
                                           num_doc_external_in,
                                           nvl(num_doc_external_in, num_doc_external)),
               dt_change_tstz     = decode(l_dt_change_tstz_n,
                                           0,
                                           dt_change_tstz_in,
                                           nvl(dt_change_tstz_in, dt_change_tstz)),
               id_geo_state       = decode(l_id_geo_state_n, 0, id_geo_state_in, nvl(id_geo_state_in, id_geo_state)),
               num_contrib        = decode(l_num_contrib_n, 0, num_contrib_in, nvl(num_contrib_in, num_contrib)),
               desc_geo_state     = decode(l_desc_geo_state_n,
                                           0,
                                           desc_geo_state_in,
                                           nvl(desc_geo_state_in, desc_geo_state)),
               flg_migrator       = decode(l_flg_migrator_n, 0, flg_migrator_in, nvl(flg_migrator_in, flg_migrator)),
               id_country_address = decode(l_id_country_address_n,
                                           0,
                                           id_country_address_in,
                                           nvl(id_country_address_in, id_country_address)),
               id_episode         = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               dt_birth           = decode(l_dt_birth_n, 0, dt_birth_in, nvl(dt_birth_in, dt_birth))
         WHERE id_pat_dmgr_hist = id_pat_dmgr_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_DMGR_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    IF l_name = 'PDT_COY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COUNTRY_ADDRESS',
                                                        value_in           => id_country_address_in);
                    END IF;
                    IF l_name = 'PDT_CTR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COUNTRY_NATION',
                                                        value_in           => id_country_nation_in);
                    END IF;
                    IF l_name = 'PDT_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PDT_I_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ISENCAO',
                                                        value_in           => id_isencao_in);
                    END IF;
                    IF l_name = 'PDT_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PDT_OCC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OCCUPATION',
                                                        value_in           => id_occupation_in);
                    END IF;
                    IF l_name = 'PDT_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PDT_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'PDT_RECM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RECM',
                                                        value_in           => id_recm_in);
                    END IF;
                    IF l_name = 'PDT_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHOLARSHIP',
                                                        value_in           => id_scholarship_in);
                    END IF;
                    IF l_name = 'PTDMH_GSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_GEO_STATE',
                                                        value_in           => id_geo_state_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pat_dmgr_hist_in    IN pat_dmgr_hist.id_pat_dmgr_hist%TYPE,
        id_patient_in          IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_professional_in     IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_professional_nin    IN BOOLEAN := TRUE,
        id_institution_in      IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        name_in                IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        name_nin               IN BOOLEAN := TRUE,
        gender_in              IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        gender_nin             IN BOOLEAN := TRUE,
        nick_name_in           IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        nick_name_nin          IN BOOLEAN := TRUE,
        age_in                 IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        age_nin                IN BOOLEAN := TRUE,
        marital_status_in      IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        marital_status_nin     IN BOOLEAN := TRUE,
        address_in             IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        address_nin            IN BOOLEAN := TRUE,
        district_in            IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        district_nin           IN BOOLEAN := TRUE,
        zip_code_in            IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        zip_code_nin           IN BOOLEAN := TRUE,
        num_main_contact_in    IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_main_contact_nin   IN BOOLEAN := TRUE,
        num_contact_in         IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        num_contact_nin        IN BOOLEAN := TRUE,
        flg_job_status_in      IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        flg_job_status_nin     IN BOOLEAN := TRUE,
        id_country_nation_in   IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_country_nation_nin  IN BOOLEAN := TRUE,
        id_scholarship_in      IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        id_scholarship_nin     IN BOOLEAN := TRUE,
        father_name_in         IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        father_name_nin        IN BOOLEAN := TRUE,
        id_isencao_in          IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        id_isencao_nin         IN BOOLEAN := TRUE,
        birth_place_in         IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        birth_place_nin        IN BOOLEAN := TRUE,
        num_health_plan_in     IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        num_health_plan_nin    IN BOOLEAN := TRUE,
        id_recm_in             IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_recm_nin            IN BOOLEAN := TRUE,
        id_occupation_in       IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        id_occupation_nin      IN BOOLEAN := TRUE,
        occupation_desc_in     IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        occupation_desc_nin    IN BOOLEAN := TRUE,
        mother_name_in         IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        mother_name_nin        IN BOOLEAN := TRUE,
        location_in            IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        location_nin           IN BOOLEAN := TRUE,
        num_doc_external_in    IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        num_doc_external_nin   IN BOOLEAN := TRUE,
        dt_change_tstz_in      IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        dt_change_tstz_nin     IN BOOLEAN := TRUE,
        id_geo_state_in        IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        id_geo_state_nin       IN BOOLEAN := TRUE,
        num_contrib_in         IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        num_contrib_nin        IN BOOLEAN := TRUE,
        desc_geo_state_in      IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        desc_geo_state_nin     IN BOOLEAN := TRUE,
        flg_migrator_in        IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        flg_migrator_nin       IN BOOLEAN := TRUE,
        id_country_address_in  IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_country_address_nin IN BOOLEAN := TRUE,
        id_episode_in          IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        dt_birth_in            IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        dt_birth_nin           IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_dmgr_hist_in    => id_pat_dmgr_hist_in,
            id_patient_in          => id_patient_in,
            id_patient_nin         => id_patient_nin,
            id_professional_in     => id_professional_in,
            id_professional_nin    => id_professional_nin,
            id_institution_in      => id_institution_in,
            id_institution_nin     => id_institution_nin,
            name_in                => name_in,
            name_nin               => name_nin,
            gender_in              => gender_in,
            gender_nin             => gender_nin,
            nick_name_in           => nick_name_in,
            nick_name_nin          => nick_name_nin,
            age_in                 => age_in,
            age_nin                => age_nin,
            marital_status_in      => marital_status_in,
            marital_status_nin     => marital_status_nin,
            address_in             => address_in,
            address_nin            => address_nin,
            district_in            => district_in,
            district_nin           => district_nin,
            zip_code_in            => zip_code_in,
            zip_code_nin           => zip_code_nin,
            num_main_contact_in    => num_main_contact_in,
            num_main_contact_nin   => num_main_contact_nin,
            num_contact_in         => num_contact_in,
            num_contact_nin        => num_contact_nin,
            flg_job_status_in      => flg_job_status_in,
            flg_job_status_nin     => flg_job_status_nin,
            id_country_nation_in   => id_country_nation_in,
            id_country_nation_nin  => id_country_nation_nin,
            id_scholarship_in      => id_scholarship_in,
            id_scholarship_nin     => id_scholarship_nin,
            father_name_in         => father_name_in,
            father_name_nin        => father_name_nin,
            id_isencao_in          => id_isencao_in,
            id_isencao_nin         => id_isencao_nin,
            birth_place_in         => birth_place_in,
            birth_place_nin        => birth_place_nin,
            num_health_plan_in     => num_health_plan_in,
            num_health_plan_nin    => num_health_plan_nin,
            id_recm_in             => id_recm_in,
            id_recm_nin            => id_recm_nin,
            id_occupation_in       => id_occupation_in,
            id_occupation_nin      => id_occupation_nin,
            occupation_desc_in     => occupation_desc_in,
            occupation_desc_nin    => occupation_desc_nin,
            mother_name_in         => mother_name_in,
            mother_name_nin        => mother_name_nin,
            location_in            => location_in,
            location_nin           => location_nin,
            num_doc_external_in    => num_doc_external_in,
            num_doc_external_nin   => num_doc_external_nin,
            dt_change_tstz_in      => dt_change_tstz_in,
            dt_change_tstz_nin     => dt_change_tstz_nin,
            id_geo_state_in        => id_geo_state_in,
            id_geo_state_nin       => id_geo_state_nin,
            num_contrib_in         => num_contrib_in,
            num_contrib_nin        => num_contrib_nin,
            desc_geo_state_in      => desc_geo_state_in,
            desc_geo_state_nin     => desc_geo_state_nin,
            flg_migrator_in        => flg_migrator_in,
            flg_migrator_nin       => flg_migrator_nin,
            id_country_address_in  => id_country_address_in,
            id_country_address_nin => id_country_address_nin,
            id_episode_in          => id_episode_in,
            id_episode_nin         => id_episode_nin,
            dt_birth_in            => dt_birth_in,
            dt_birth_nin           => dt_birth_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_patient_in          IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_professional_in     IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_professional_nin    IN BOOLEAN := TRUE,
        id_institution_in      IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        name_in                IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        name_nin               IN BOOLEAN := TRUE,
        gender_in              IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        gender_nin             IN BOOLEAN := TRUE,
        nick_name_in           IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        nick_name_nin          IN BOOLEAN := TRUE,
        age_in                 IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        age_nin                IN BOOLEAN := TRUE,
        marital_status_in      IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        marital_status_nin     IN BOOLEAN := TRUE,
        address_in             IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        address_nin            IN BOOLEAN := TRUE,
        district_in            IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        district_nin           IN BOOLEAN := TRUE,
        zip_code_in            IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        zip_code_nin           IN BOOLEAN := TRUE,
        num_main_contact_in    IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_main_contact_nin   IN BOOLEAN := TRUE,
        num_contact_in         IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        num_contact_nin        IN BOOLEAN := TRUE,
        flg_job_status_in      IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        flg_job_status_nin     IN BOOLEAN := TRUE,
        id_country_nation_in   IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_country_nation_nin  IN BOOLEAN := TRUE,
        id_scholarship_in      IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        id_scholarship_nin     IN BOOLEAN := TRUE,
        father_name_in         IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        father_name_nin        IN BOOLEAN := TRUE,
        id_isencao_in          IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        id_isencao_nin         IN BOOLEAN := TRUE,
        birth_place_in         IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        birth_place_nin        IN BOOLEAN := TRUE,
        num_health_plan_in     IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        num_health_plan_nin    IN BOOLEAN := TRUE,
        id_recm_in             IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_recm_nin            IN BOOLEAN := TRUE,
        id_occupation_in       IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        id_occupation_nin      IN BOOLEAN := TRUE,
        occupation_desc_in     IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        occupation_desc_nin    IN BOOLEAN := TRUE,
        mother_name_in         IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        mother_name_nin        IN BOOLEAN := TRUE,
        location_in            IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        location_nin           IN BOOLEAN := TRUE,
        num_doc_external_in    IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        num_doc_external_nin   IN BOOLEAN := TRUE,
        dt_change_tstz_in      IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        dt_change_tstz_nin     IN BOOLEAN := TRUE,
        id_geo_state_in        IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        id_geo_state_nin       IN BOOLEAN := TRUE,
        num_contrib_in         IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        num_contrib_nin        IN BOOLEAN := TRUE,
        desc_geo_state_in      IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        desc_geo_state_nin     IN BOOLEAN := TRUE,
        flg_migrator_in        IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        flg_migrator_nin       IN BOOLEAN := TRUE,
        id_country_address_in  IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_country_address_nin IN BOOLEAN := TRUE,
        id_episode_in          IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        dt_birth_in            IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        dt_birth_nin           IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_id_patient_n         NUMBER(1);
        l_id_professional_n    NUMBER(1);
        l_id_institution_n     NUMBER(1);
        l_name_n               NUMBER(1);
        l_gender_n             NUMBER(1);
        l_nick_name_n          NUMBER(1);
        l_age_n                NUMBER(1);
        l_marital_status_n     NUMBER(1);
        l_address_n            NUMBER(1);
        l_district_n           NUMBER(1);
        l_zip_code_n           NUMBER(1);
        l_num_main_contact_n   NUMBER(1);
        l_num_contact_n        NUMBER(1);
        l_flg_job_status_n     NUMBER(1);
        l_id_country_nation_n  NUMBER(1);
        l_id_scholarship_n     NUMBER(1);
        l_father_name_n        NUMBER(1);
        l_id_isencao_n         NUMBER(1);
        l_birth_place_n        NUMBER(1);
        l_num_health_plan_n    NUMBER(1);
        l_id_recm_n            NUMBER(1);
        l_id_occupation_n      NUMBER(1);
        l_occupation_desc_n    NUMBER(1);
        l_mother_name_n        NUMBER(1);
        l_location_n           NUMBER(1);
        l_num_doc_external_n   NUMBER(1);
        l_dt_change_tstz_n     NUMBER(1);
        l_id_geo_state_n       NUMBER(1);
        l_num_contrib_n        NUMBER(1);
        l_desc_geo_state_n     NUMBER(1);
        l_flg_migrator_n       NUMBER(1);
        l_id_country_address_n NUMBER(1);
        l_id_episode_n         NUMBER(1);
        l_dt_birth_n           NUMBER(1);
        id_pat_dmgr_hist_in    pat_dmgr_hist.id_pat_dmgr_hist%TYPE;
    BEGIN
    
        l_id_patient_n         := sys.diutil.bool_to_int(id_patient_nin);
        l_id_professional_n    := sys.diutil.bool_to_int(id_professional_nin);
        l_id_institution_n     := sys.diutil.bool_to_int(id_institution_nin);
        l_name_n               := sys.diutil.bool_to_int(name_nin);
        l_gender_n             := sys.diutil.bool_to_int(gender_nin);
        l_nick_name_n          := sys.diutil.bool_to_int(nick_name_nin);
        l_age_n                := sys.diutil.bool_to_int(age_nin);
        l_marital_status_n     := sys.diutil.bool_to_int(marital_status_nin);
        l_address_n            := sys.diutil.bool_to_int(address_nin);
        l_district_n           := sys.diutil.bool_to_int(district_nin);
        l_zip_code_n           := sys.diutil.bool_to_int(zip_code_nin);
        l_num_main_contact_n   := sys.diutil.bool_to_int(num_main_contact_nin);
        l_num_contact_n        := sys.diutil.bool_to_int(num_contact_nin);
        l_flg_job_status_n     := sys.diutil.bool_to_int(flg_job_status_nin);
        l_id_country_nation_n  := sys.diutil.bool_to_int(id_country_nation_nin);
        l_id_scholarship_n     := sys.diutil.bool_to_int(id_scholarship_nin);
        l_father_name_n        := sys.diutil.bool_to_int(father_name_nin);
        l_id_isencao_n         := sys.diutil.bool_to_int(id_isencao_nin);
        l_birth_place_n        := sys.diutil.bool_to_int(birth_place_nin);
        l_num_health_plan_n    := sys.diutil.bool_to_int(num_health_plan_nin);
        l_id_recm_n            := sys.diutil.bool_to_int(id_recm_nin);
        l_id_occupation_n      := sys.diutil.bool_to_int(id_occupation_nin);
        l_occupation_desc_n    := sys.diutil.bool_to_int(occupation_desc_nin);
        l_mother_name_n        := sys.diutil.bool_to_int(mother_name_nin);
        l_location_n           := sys.diutil.bool_to_int(location_nin);
        l_num_doc_external_n   := sys.diutil.bool_to_int(num_doc_external_nin);
        l_dt_change_tstz_n     := sys.diutil.bool_to_int(dt_change_tstz_nin);
        l_id_geo_state_n       := sys.diutil.bool_to_int(id_geo_state_nin);
        l_num_contrib_n        := sys.diutil.bool_to_int(num_contrib_nin);
        l_desc_geo_state_n     := sys.diutil.bool_to_int(desc_geo_state_nin);
        l_flg_migrator_n       := sys.diutil.bool_to_int(flg_migrator_nin);
        l_id_country_address_n := sys.diutil.bool_to_int(id_country_address_nin);
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_dt_birth_n           := sys.diutil.bool_to_int(dt_birth_nin);
    
        l_sql := 'UPDATE PAT_DMGR_HIST SET ' || ' ID_PATIENT = decode (' || l_id_patient_n ||
                 ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' || ' ID_PROFESSIONAL = decode (' ||
                 l_id_professional_n || ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' || ' NAME = decode (' ||
                 l_name_n || ',0,:name_in, NVL (:name_in, NAME)) ' || ',' || ' GENDER = decode (' || l_gender_n ||
                 ',0,:gender_in, NVL (:gender_in, GENDER)) ' || ',' || ' NICK_NAME = decode (' || l_nick_name_n ||
                 ',0,:nick_name_in, NVL (:nick_name_in, NICK_NAME)) ' || ',' || ' AGE = decode (' || l_age_n ||
                 ',0,:age_in, NVL (:age_in, AGE)) ' || ',' || ' MARITAL_STATUS = decode (' || l_marital_status_n ||
                 ',0,:marital_status_in, NVL (:marital_status_in, MARITAL_STATUS)) ' || ',' || ' ADDRESS = decode (' ||
                 l_address_n || ',0,:address_in, NVL (:address_in, ADDRESS)) ' || ',' || ' DISTRICT = decode (' ||
                 l_district_n || ',0,:district_in, NVL (:district_in, DISTRICT)) ' || ',' || ' ZIP_CODE = decode (' ||
                 l_zip_code_n || ',0,:zip_code_in, NVL (:zip_code_in, ZIP_CODE)) ' || ',' ||
                 ' NUM_MAIN_CONTACT = decode (' || l_num_main_contact_n ||
                 ',0,:num_main_contact_in, NVL (:num_main_contact_in, NUM_MAIN_CONTACT)) ' || ',' ||
                 ' NUM_CONTACT = decode (' || l_num_contact_n ||
                 ',0,:num_contact_in, NVL (:num_contact_in, NUM_CONTACT)) ' || ',' || ' FLG_JOB_STATUS = decode (' ||
                 l_flg_job_status_n || ',0,:flg_job_status_in, NVL (:flg_job_status_in, FLG_JOB_STATUS)) ' || ',' ||
                 ' ID_COUNTRY_NATION = decode (' || l_id_country_nation_n ||
                 ',0,:id_country_nation_in, NVL (:id_country_nation_in, ID_COUNTRY_NATION)) ' || ',' ||
                 ' ID_SCHOLARSHIP = decode (' || l_id_scholarship_n ||
                 ',0,:id_scholarship_in, NVL (:id_scholarship_in, ID_SCHOLARSHIP)) ' || ',' ||
                 ' FATHER_NAME = decode (' || l_father_name_n ||
                 ',0,:father_name_in, NVL (:father_name_in, FATHER_NAME)) ' || ',' || ' ID_ISENCAO = decode (' ||
                 l_id_isencao_n || ',0,:id_isencao_in, NVL (:id_isencao_in, ID_ISENCAO)) ' || ',' ||
                 ' BIRTH_PLACE = decode (' || l_birth_place_n ||
                 ',0,:birth_place_in, NVL (:birth_place_in, BIRTH_PLACE)) ' || ',' || ' NUM_HEALTH_PLAN = decode (' ||
                 l_num_health_plan_n || ',0,:num_health_plan_in, NVL (:num_health_plan_in, NUM_HEALTH_PLAN)) ' || ',' ||
                 ' ID_RECM = decode (' || l_id_recm_n || ',0,:id_recm_in, NVL (:id_recm_in, ID_RECM)) ' || ',' ||
                 ' ID_OCCUPATION = decode (' || l_id_occupation_n ||
                 ',0,:id_occupation_in, NVL (:id_occupation_in, ID_OCCUPATION)) ' || ',' ||
                 ' OCCUPATION_DESC = decode (' || l_occupation_desc_n ||
                 ',0,:occupation_desc_in, NVL (:occupation_desc_in, OCCUPATION_DESC)) ' || ',' ||
                 ' MOTHER_NAME = decode (' || l_mother_name_n ||
                 ',0,:mother_name_in, NVL (:mother_name_in, MOTHER_NAME)) ' || ',' || ' LOCATION = decode (' ||
                 l_location_n || ',0,:location_in, NVL (:location_in, LOCATION)) ' || ',' ||
                 ' NUM_DOC_EXTERNAL = decode (' || l_num_doc_external_n ||
                 ',0,:num_doc_external_in, NVL (:num_doc_external_in, NUM_DOC_EXTERNAL)) ' || ',' ||
                 ' DT_CHANGE_TSTZ = decode (' || l_dt_change_tstz_n ||
                 ',0,:dt_change_tstz_in, NVL (:dt_change_tstz_in, DT_CHANGE_TSTZ)) ' || ',' ||
                 ' ID_GEO_STATE = decode (' || l_id_geo_state_n ||
                 ',0,:id_geo_state_in, NVL (:id_geo_state_in, ID_GEO_STATE)) ' || ',' || ' NUM_CONTRIB = decode (' ||
                 l_num_contrib_n || ',0,:num_contrib_in, NVL (:num_contrib_in, NUM_CONTRIB)) ' || ',' ||
                 ' DESC_GEO_STATE = decode (' || l_desc_geo_state_n ||
                 ',0,:desc_geo_state_in, NVL (:desc_geo_state_in, DESC_GEO_STATE)) ' || ',' ||
                 ' FLG_MIGRATOR = decode (' || l_flg_migrator_n ||
                 ',0,:flg_migrator_in, NVL (:flg_migrator_in, FLG_MIGRATOR)) ' || ',' ||
                 ' ID_COUNTRY_ADDRESS = decode (' || l_id_country_address_n ||
                 ',0,:id_country_address_in, NVL (:id_country_address_in, ID_COUNTRY_ADDRESS)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' DT_BIRTH = decode (' || l_dt_birth_n || ',0,:dt_birth_in, NVL (:dt_birth_in, DT_BIRTH)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_patient_in, id_professional_in, id_institution_in, name_in, gender_in, nick_name_in, age_in, marital_status_in, address_in, district_in, zip_code_in, num_main_contact_in, num_contact_in, flg_job_status_in, id_country_nation_in, id_scholarship_in, father_name_in, id_isencao_in, birth_place_in, num_health_plan_in, id_recm_in, id_occupation_in, occupation_desc_in, mother_name_in, location_in, num_doc_external_in, dt_change_tstz_in, id_geo_state_in, num_contrib_in, desc_geo_state_in, flg_migrator_in, id_country_address_in, id_episode_in, dt_birth_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_DMGR_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    IF l_name = 'PDT_COY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COUNTRY_ADDRESS',
                                                        value_in           => id_country_address_in);
                    END IF;
                    IF l_name = 'PDT_CTR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COUNTRY_NATION',
                                                        value_in           => id_country_nation_in);
                    END IF;
                    IF l_name = 'PDT_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PDT_I_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ISENCAO',
                                                        value_in           => id_isencao_in);
                    END IF;
                    IF l_name = 'PDT_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PDT_OCC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OCCUPATION',
                                                        value_in           => id_occupation_in);
                    END IF;
                    IF l_name = 'PDT_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PDT_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'PDT_RECM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RECM',
                                                        value_in           => id_recm_in);
                    END IF;
                    IF l_name = 'PDT_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHOLARSHIP',
                                                        value_in           => id_scholarship_in);
                    END IF;
                    IF l_name = 'PTDMH_GSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_GEO_STATE',
                                                        value_in           => id_geo_state_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_patient_in          IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_professional_in     IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_professional_nin    IN BOOLEAN := TRUE,
        id_institution_in      IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        name_in                IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        name_nin               IN BOOLEAN := TRUE,
        gender_in              IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        gender_nin             IN BOOLEAN := TRUE,
        nick_name_in           IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        nick_name_nin          IN BOOLEAN := TRUE,
        age_in                 IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        age_nin                IN BOOLEAN := TRUE,
        marital_status_in      IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        marital_status_nin     IN BOOLEAN := TRUE,
        address_in             IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        address_nin            IN BOOLEAN := TRUE,
        district_in            IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        district_nin           IN BOOLEAN := TRUE,
        zip_code_in            IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        zip_code_nin           IN BOOLEAN := TRUE,
        num_main_contact_in    IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_main_contact_nin   IN BOOLEAN := TRUE,
        num_contact_in         IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        num_contact_nin        IN BOOLEAN := TRUE,
        flg_job_status_in      IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        flg_job_status_nin     IN BOOLEAN := TRUE,
        id_country_nation_in   IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_country_nation_nin  IN BOOLEAN := TRUE,
        id_scholarship_in      IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        id_scholarship_nin     IN BOOLEAN := TRUE,
        father_name_in         IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        father_name_nin        IN BOOLEAN := TRUE,
        id_isencao_in          IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        id_isencao_nin         IN BOOLEAN := TRUE,
        birth_place_in         IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        birth_place_nin        IN BOOLEAN := TRUE,
        num_health_plan_in     IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        num_health_plan_nin    IN BOOLEAN := TRUE,
        id_recm_in             IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_recm_nin            IN BOOLEAN := TRUE,
        id_occupation_in       IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        id_occupation_nin      IN BOOLEAN := TRUE,
        occupation_desc_in     IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        occupation_desc_nin    IN BOOLEAN := TRUE,
        mother_name_in         IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        mother_name_nin        IN BOOLEAN := TRUE,
        location_in            IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        location_nin           IN BOOLEAN := TRUE,
        num_doc_external_in    IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        num_doc_external_nin   IN BOOLEAN := TRUE,
        dt_change_tstz_in      IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        dt_change_tstz_nin     IN BOOLEAN := TRUE,
        id_geo_state_in        IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        id_geo_state_nin       IN BOOLEAN := TRUE,
        num_contrib_in         IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        num_contrib_nin        IN BOOLEAN := TRUE,
        desc_geo_state_in      IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        desc_geo_state_nin     IN BOOLEAN := TRUE,
        flg_migrator_in        IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        flg_migrator_nin       IN BOOLEAN := TRUE,
        id_country_address_in  IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_country_address_nin IN BOOLEAN := TRUE,
        id_episode_in          IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        dt_birth_in            IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        dt_birth_nin           IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_patient_in          => id_patient_in,
            id_patient_nin         => id_patient_nin,
            id_professional_in     => id_professional_in,
            id_professional_nin    => id_professional_nin,
            id_institution_in      => id_institution_in,
            id_institution_nin     => id_institution_nin,
            name_in                => name_in,
            name_nin               => name_nin,
            gender_in              => gender_in,
            gender_nin             => gender_nin,
            nick_name_in           => nick_name_in,
            nick_name_nin          => nick_name_nin,
            age_in                 => age_in,
            age_nin                => age_nin,
            marital_status_in      => marital_status_in,
            marital_status_nin     => marital_status_nin,
            address_in             => address_in,
            address_nin            => address_nin,
            district_in            => district_in,
            district_nin           => district_nin,
            zip_code_in            => zip_code_in,
            zip_code_nin           => zip_code_nin,
            num_main_contact_in    => num_main_contact_in,
            num_main_contact_nin   => num_main_contact_nin,
            num_contact_in         => num_contact_in,
            num_contact_nin        => num_contact_nin,
            flg_job_status_in      => flg_job_status_in,
            flg_job_status_nin     => flg_job_status_nin,
            id_country_nation_in   => id_country_nation_in,
            id_country_nation_nin  => id_country_nation_nin,
            id_scholarship_in      => id_scholarship_in,
            id_scholarship_nin     => id_scholarship_nin,
            father_name_in         => father_name_in,
            father_name_nin        => father_name_nin,
            id_isencao_in          => id_isencao_in,
            id_isencao_nin         => id_isencao_nin,
            birth_place_in         => birth_place_in,
            birth_place_nin        => birth_place_nin,
            num_health_plan_in     => num_health_plan_in,
            num_health_plan_nin    => num_health_plan_nin,
            id_recm_in             => id_recm_in,
            id_recm_nin            => id_recm_nin,
            id_occupation_in       => id_occupation_in,
            id_occupation_nin      => id_occupation_nin,
            occupation_desc_in     => occupation_desc_in,
            occupation_desc_nin    => occupation_desc_nin,
            mother_name_in         => mother_name_in,
            mother_name_nin        => mother_name_nin,
            location_in            => location_in,
            location_nin           => location_nin,
            num_doc_external_in    => num_doc_external_in,
            num_doc_external_nin   => num_doc_external_nin,
            dt_change_tstz_in      => dt_change_tstz_in,
            dt_change_tstz_nin     => dt_change_tstz_nin,
            id_geo_state_in        => id_geo_state_in,
            id_geo_state_nin       => id_geo_state_nin,
            num_contrib_in         => num_contrib_in,
            num_contrib_nin        => num_contrib_nin,
            desc_geo_state_in      => desc_geo_state_in,
            desc_geo_state_nin     => desc_geo_state_nin,
            flg_migrator_in        => flg_migrator_in,
            flg_migrator_nin       => flg_migrator_nin,
            id_country_address_in  => id_country_address_in,
            id_country_address_nin => id_country_address_nin,
            id_episode_in          => id_episode_in,
            id_episode_nin         => id_episode_nin,
            dt_birth_in            => dt_birth_in,
            dt_birth_nin           => dt_birth_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_dmgr_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_dmgr_hist_in   => rec_in.id_pat_dmgr_hist,
            id_patient_in         => rec_in.id_patient,
            id_professional_in    => rec_in.id_professional,
            id_institution_in     => rec_in.id_institution,
            name_in               => rec_in.name,
            gender_in             => rec_in.gender,
            nick_name_in          => rec_in.nick_name,
            age_in                => rec_in.age,
            marital_status_in     => rec_in.marital_status,
            address_in            => rec_in.address,
            district_in           => rec_in.district,
            zip_code_in           => rec_in.zip_code,
            num_main_contact_in   => rec_in.num_main_contact,
            num_contact_in        => rec_in.num_contact,
            flg_job_status_in     => rec_in.flg_job_status,
            id_country_nation_in  => rec_in.id_country_nation,
            id_scholarship_in     => rec_in.id_scholarship,
            father_name_in        => rec_in.father_name,
            id_isencao_in         => rec_in.id_isencao,
            birth_place_in        => rec_in.birth_place,
            num_health_plan_in    => rec_in.num_health_plan,
            id_recm_in            => rec_in.id_recm,
            id_occupation_in      => rec_in.id_occupation,
            occupation_desc_in    => rec_in.occupation_desc,
            mother_name_in        => rec_in.mother_name,
            location_in           => rec_in.location,
            num_doc_external_in   => rec_in.num_doc_external,
            dt_change_tstz_in     => rec_in.dt_change_tstz,
            id_geo_state_in       => rec_in.id_geo_state,
            num_contrib_in        => rec_in.num_contrib,
            desc_geo_state_in     => rec_in.desc_geo_state,
            flg_migrator_in       => rec_in.flg_migrator,
            id_country_address_in => rec_in.id_country_address,
            id_episode_in         => rec_in.id_episode,
            dt_birth_in           => rec_in.dt_birth
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_dmgr_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_dmgr_hist_in   => rec_in.id_pat_dmgr_hist,
            id_patient_in         => rec_in.id_patient,
            id_professional_in    => rec_in.id_professional,
            id_institution_in     => rec_in.id_institution,
            name_in               => rec_in.name,
            gender_in             => rec_in.gender,
            nick_name_in          => rec_in.nick_name,
            age_in                => rec_in.age,
            marital_status_in     => rec_in.marital_status,
            address_in            => rec_in.address,
            district_in           => rec_in.district,
            zip_code_in           => rec_in.zip_code,
            num_main_contact_in   => rec_in.num_main_contact,
            num_contact_in        => rec_in.num_contact,
            flg_job_status_in     => rec_in.flg_job_status,
            id_country_nation_in  => rec_in.id_country_nation,
            id_scholarship_in     => rec_in.id_scholarship,
            father_name_in        => rec_in.father_name,
            id_isencao_in         => rec_in.id_isencao,
            birth_place_in        => rec_in.birth_place,
            num_health_plan_in    => rec_in.num_health_plan,
            id_recm_in            => rec_in.id_recm,
            id_occupation_in      => rec_in.id_occupation,
            occupation_desc_in    => rec_in.occupation_desc,
            mother_name_in        => rec_in.mother_name,
            location_in           => rec_in.location,
            num_doc_external_in   => rec_in.num_doc_external,
            dt_change_tstz_in     => rec_in.dt_change_tstz,
            id_geo_state_in       => rec_in.id_geo_state,
            num_contrib_in        => rec_in.num_contrib,
            desc_geo_state_in     => rec_in.desc_geo_state,
            flg_migrator_in       => rec_in.flg_migrator,
            id_country_address_in => rec_in.id_country_address,
            id_episode_in         => rec_in.id_episode,
            dt_birth_in           => rec_in.dt_birth
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_pat_dmgr_hist_in   IN pat_dmgr_hist.id_pat_dmgr_hist%TYPE,
        id_patient_in         IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_professional_in    IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_institution_in     IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        name_in               IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        gender_in             IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        nick_name_in          IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        age_in                IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        marital_status_in     IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        address_in            IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        district_in           IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        zip_code_in           IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in   IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in        IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in     IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in  IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_scholarship_in     IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        father_name_in        IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        id_isencao_in         IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        birth_place_in        IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        id_recm_in            IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_occupation_in      IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        occupation_desc_in    IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        mother_name_in        IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        location_in           IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        num_doc_external_in   IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        dt_change_tstz_in     IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        id_geo_state_in       IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in        IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        desc_geo_state_in     IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        flg_migrator_in       IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        id_country_address_in IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_episode_in         IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        dt_birth_in           IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_dmgr_hist_in   => id_pat_dmgr_hist_in,
            id_patient_in         => id_patient_in,
            id_professional_in    => id_professional_in,
            id_institution_in     => id_institution_in,
            name_in               => name_in,
            gender_in             => gender_in,
            nick_name_in          => nick_name_in,
            age_in                => age_in,
            marital_status_in     => marital_status_in,
            address_in            => address_in,
            district_in           => district_in,
            zip_code_in           => zip_code_in,
            num_main_contact_in   => num_main_contact_in,
            num_contact_in        => num_contact_in,
            flg_job_status_in     => flg_job_status_in,
            id_country_nation_in  => id_country_nation_in,
            id_scholarship_in     => id_scholarship_in,
            father_name_in        => father_name_in,
            id_isencao_in         => id_isencao_in,
            birth_place_in        => birth_place_in,
            num_health_plan_in    => num_health_plan_in,
            id_recm_in            => id_recm_in,
            id_occupation_in      => id_occupation_in,
            occupation_desc_in    => occupation_desc_in,
            mother_name_in        => mother_name_in,
            location_in           => location_in,
            num_doc_external_in   => num_doc_external_in,
            dt_change_tstz_in     => dt_change_tstz_in,
            id_geo_state_in       => id_geo_state_in,
            num_contrib_in        => num_contrib_in,
            desc_geo_state_in     => desc_geo_state_in,
            flg_migrator_in       => flg_migrator_in,
            id_country_address_in => id_country_address_in,
            id_episode_in         => id_episode_in,
            dt_birth_in           => dt_birth_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_pat_dmgr_hist_in   => id_pat_dmgr_hist_in,
                id_patient_in         => id_patient_in,
                id_professional_in    => id_professional_in,
                id_institution_in     => id_institution_in,
                name_in               => name_in,
                gender_in             => gender_in,
                nick_name_in          => nick_name_in,
                age_in                => age_in,
                marital_status_in     => marital_status_in,
                address_in            => address_in,
                district_in           => district_in,
                zip_code_in           => zip_code_in,
                num_main_contact_in   => num_main_contact_in,
                num_contact_in        => num_contact_in,
                flg_job_status_in     => flg_job_status_in,
                id_country_nation_in  => id_country_nation_in,
                id_scholarship_in     => id_scholarship_in,
                father_name_in        => father_name_in,
                id_isencao_in         => id_isencao_in,
                birth_place_in        => birth_place_in,
                num_health_plan_in    => num_health_plan_in,
                id_recm_in            => id_recm_in,
                id_occupation_in      => id_occupation_in,
                occupation_desc_in    => occupation_desc_in,
                mother_name_in        => mother_name_in,
                location_in           => location_in,
                num_doc_external_in   => num_doc_external_in,
                dt_change_tstz_in     => dt_change_tstz_in,
                id_geo_state_in       => id_geo_state_in,
                num_contrib_in        => num_contrib_in,
                desc_geo_state_in     => desc_geo_state_in,
                flg_migrator_in       => flg_migrator_in,
                id_country_address_in => id_country_address_in,
                id_episode_in         => id_episode_in,
                dt_birth_in           => dt_birth_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_pat_dmgr_hist_in   IN pat_dmgr_hist.id_pat_dmgr_hist%TYPE,
        id_patient_in         IN pat_dmgr_hist.id_patient%TYPE DEFAULT NULL,
        id_professional_in    IN pat_dmgr_hist.id_professional%TYPE DEFAULT NULL,
        id_institution_in     IN pat_dmgr_hist.id_institution%TYPE DEFAULT NULL,
        name_in               IN pat_dmgr_hist.name%TYPE DEFAULT NULL,
        gender_in             IN pat_dmgr_hist.gender%TYPE DEFAULT NULL,
        nick_name_in          IN pat_dmgr_hist.nick_name%TYPE DEFAULT NULL,
        age_in                IN pat_dmgr_hist.age%TYPE DEFAULT NULL,
        marital_status_in     IN pat_dmgr_hist.marital_status%TYPE DEFAULT NULL,
        address_in            IN pat_dmgr_hist.address%TYPE DEFAULT NULL,
        district_in           IN pat_dmgr_hist.district%TYPE DEFAULT NULL,
        zip_code_in           IN pat_dmgr_hist.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in   IN pat_dmgr_hist.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in        IN pat_dmgr_hist.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in     IN pat_dmgr_hist.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in  IN pat_dmgr_hist.id_country_nation%TYPE DEFAULT NULL,
        id_scholarship_in     IN pat_dmgr_hist.id_scholarship%TYPE DEFAULT NULL,
        father_name_in        IN pat_dmgr_hist.father_name%TYPE DEFAULT NULL,
        id_isencao_in         IN pat_dmgr_hist.id_isencao%TYPE DEFAULT NULL,
        birth_place_in        IN pat_dmgr_hist.birth_place%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_dmgr_hist.num_health_plan%TYPE DEFAULT NULL,
        id_recm_in            IN pat_dmgr_hist.id_recm%TYPE DEFAULT NULL,
        id_occupation_in      IN pat_dmgr_hist.id_occupation%TYPE DEFAULT NULL,
        occupation_desc_in    IN pat_dmgr_hist.occupation_desc%TYPE DEFAULT NULL,
        mother_name_in        IN pat_dmgr_hist.mother_name%TYPE DEFAULT NULL,
        location_in           IN pat_dmgr_hist.location%TYPE DEFAULT NULL,
        num_doc_external_in   IN pat_dmgr_hist.num_doc_external%TYPE DEFAULT NULL,
        dt_change_tstz_in     IN pat_dmgr_hist.dt_change_tstz%TYPE DEFAULT NULL,
        id_geo_state_in       IN pat_dmgr_hist.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in        IN pat_dmgr_hist.num_contrib%TYPE DEFAULT NULL,
        desc_geo_state_in     IN pat_dmgr_hist.desc_geo_state%TYPE DEFAULT NULL,
        flg_migrator_in       IN pat_dmgr_hist.flg_migrator%TYPE DEFAULT NULL,
        id_country_address_in IN pat_dmgr_hist.id_country_address%TYPE DEFAULT NULL,
        id_episode_in         IN pat_dmgr_hist.id_episode%TYPE DEFAULT NULL,
        dt_birth_in           IN pat_dmgr_hist.dt_birth%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_pat_dmgr_hist_in,
                id_patient_in,
                id_professional_in,
                id_institution_in,
                name_in,
                gender_in,
                nick_name_in,
                age_in,
                marital_status_in,
                address_in,
                district_in,
                zip_code_in,
                num_main_contact_in,
                num_contact_in,
                flg_job_status_in,
                id_country_nation_in,
                id_scholarship_in,
                father_name_in,
                id_isencao_in,
                birth_place_in,
                num_health_plan_in,
                id_recm_in,
                id_occupation_in,
                occupation_desc_in,
                mother_name_in,
                location_in,
                num_doc_external_in,
                dt_change_tstz_in,
                id_geo_state_in,
                num_contrib_in,
                desc_geo_state_in,
                flg_migrator_in,
                id_country_address_in,
                id_episode_in,
                dt_birth_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pat_dmgr_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_pat_dmgr_hist   id_pat_dmgr_hist_cc;
        l_id_patient         id_patient_cc;
        l_id_professional    id_professional_cc;
        l_id_institution     id_institution_cc;
        l_name               name_cc;
        l_gender             gender_cc;
        l_nick_name          nick_name_cc;
        l_age                age_cc;
        l_marital_status     marital_status_cc;
        l_address            address_cc;
        l_district           district_cc;
        l_zip_code           zip_code_cc;
        l_num_main_contact   num_main_contact_cc;
        l_num_contact        num_contact_cc;
        l_flg_job_status     flg_job_status_cc;
        l_id_country_nation  id_country_nation_cc;
        l_id_scholarship     id_scholarship_cc;
        l_father_name        father_name_cc;
        l_id_isencao         id_isencao_cc;
        l_birth_place        birth_place_cc;
        l_num_health_plan    num_health_plan_cc;
        l_id_recm            id_recm_cc;
        l_id_occupation      id_occupation_cc;
        l_occupation_desc    occupation_desc_cc;
        l_mother_name        mother_name_cc;
        l_location           location_cc;
        l_num_doc_external   num_doc_external_cc;
        l_dt_change_tstz     dt_change_tstz_cc;
        l_id_geo_state       id_geo_state_cc;
        l_num_contrib        num_contrib_cc;
        l_desc_geo_state     desc_geo_state_cc;
        l_flg_migrator       flg_migrator_cc;
        l_id_country_address id_country_address_cc;
        l_id_episode         id_episode_cc;
        l_dt_birth           dt_birth_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_pat_dmgr_hist(i) := col_in(i).id_pat_dmgr_hist;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_professional(i) := col_in(i).id_professional;
            l_id_institution(i) := col_in(i).id_institution;
            l_name(i) := col_in(i).name;
            l_gender(i) := col_in(i).gender;
            l_nick_name(i) := col_in(i).nick_name;
            l_age(i) := col_in(i).age;
            l_marital_status(i) := col_in(i).marital_status;
            l_address(i) := col_in(i).address;
            l_district(i) := col_in(i).district;
            l_zip_code(i) := col_in(i).zip_code;
            l_num_main_contact(i) := col_in(i).num_main_contact;
            l_num_contact(i) := col_in(i).num_contact;
            l_flg_job_status(i) := col_in(i).flg_job_status;
            l_id_country_nation(i) := col_in(i).id_country_nation;
            l_id_scholarship(i) := col_in(i).id_scholarship;
            l_father_name(i) := col_in(i).father_name;
            l_id_isencao(i) := col_in(i).id_isencao;
            l_birth_place(i) := col_in(i).birth_place;
            l_num_health_plan(i) := col_in(i).num_health_plan;
            l_id_recm(i) := col_in(i).id_recm;
            l_id_occupation(i) := col_in(i).id_occupation;
            l_occupation_desc(i) := col_in(i).occupation_desc;
            l_mother_name(i) := col_in(i).mother_name;
            l_location(i) := col_in(i).location;
            l_num_doc_external(i) := col_in(i).num_doc_external;
            l_dt_change_tstz(i) := col_in(i).dt_change_tstz;
            l_id_geo_state(i) := col_in(i).id_geo_state;
            l_num_contrib(i) := col_in(i).num_contrib;
            l_desc_geo_state(i) := col_in(i).desc_geo_state;
            l_flg_migrator(i) := col_in(i).flg_migrator;
            l_id_country_address(i) := col_in(i).id_country_address;
            l_id_episode(i) := col_in(i).id_episode;
            l_dt_birth(i) := col_in(i).dt_birth;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_dmgr_hist
                   SET id_patient         = nvl(l_id_patient(i), id_patient),
                       id_professional    = nvl(l_id_professional(i), id_professional),
                       id_institution     = nvl(l_id_institution(i), id_institution),
                       name               = nvl(l_name(i), name),
                       gender             = nvl(l_gender(i), gender),
                       nick_name          = nvl(l_nick_name(i), nick_name),
                       age                = nvl(l_age(i), age),
                       marital_status     = nvl(l_marital_status(i), marital_status),
                       address            = nvl(l_address(i), address),
                       district           = nvl(l_district(i), district),
                       zip_code           = nvl(l_zip_code(i), zip_code),
                       num_main_contact   = nvl(l_num_main_contact(i), num_main_contact),
                       num_contact        = nvl(l_num_contact(i), num_contact),
                       flg_job_status     = nvl(l_flg_job_status(i), flg_job_status),
                       id_country_nation  = nvl(l_id_country_nation(i), id_country_nation),
                       id_scholarship     = nvl(l_id_scholarship(i), id_scholarship),
                       father_name        = nvl(l_father_name(i), father_name),
                       id_isencao         = nvl(l_id_isencao(i), id_isencao),
                       birth_place        = nvl(l_birth_place(i), birth_place),
                       num_health_plan    = nvl(l_num_health_plan(i), num_health_plan),
                       id_recm            = nvl(l_id_recm(i), id_recm),
                       id_occupation      = nvl(l_id_occupation(i), id_occupation),
                       occupation_desc    = nvl(l_occupation_desc(i), occupation_desc),
                       mother_name        = nvl(l_mother_name(i), mother_name),
                       location           = nvl(l_location(i), location),
                       num_doc_external   = nvl(l_num_doc_external(i), num_doc_external),
                       dt_change_tstz     = nvl(l_dt_change_tstz(i), dt_change_tstz),
                       id_geo_state       = nvl(l_id_geo_state(i), id_geo_state),
                       num_contrib        = nvl(l_num_contrib(i), num_contrib),
                       desc_geo_state     = nvl(l_desc_geo_state(i), desc_geo_state),
                       flg_migrator       = nvl(l_flg_migrator(i), flg_migrator),
                       id_country_address = nvl(l_id_country_address(i), id_country_address),
                       id_episode         = nvl(l_id_episode(i), id_episode),
                       dt_birth           = nvl(l_dt_birth(i), dt_birth)
                 WHERE id_pat_dmgr_hist = l_id_pat_dmgr_hist(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_dmgr_hist
                   SET id_patient         = l_id_patient(i),
                       id_professional    = l_id_professional(i),
                       id_institution     = l_id_institution(i),
                       name               = l_name(i),
                       gender             = l_gender(i),
                       nick_name          = l_nick_name(i),
                       age                = l_age(i),
                       marital_status     = l_marital_status(i),
                       address            = l_address(i),
                       district           = l_district(i),
                       zip_code           = l_zip_code(i),
                       num_main_contact   = l_num_main_contact(i),
                       num_contact        = l_num_contact(i),
                       flg_job_status     = l_flg_job_status(i),
                       id_country_nation  = l_id_country_nation(i),
                       id_scholarship     = l_id_scholarship(i),
                       father_name        = l_father_name(i),
                       id_isencao         = l_id_isencao(i),
                       birth_place        = l_birth_place(i),
                       num_health_plan    = l_num_health_plan(i),
                       id_recm            = l_id_recm(i),
                       id_occupation      = l_id_occupation(i),
                       occupation_desc    = l_occupation_desc(i),
                       mother_name        = l_mother_name(i),
                       location           = l_location(i),
                       num_doc_external   = l_num_doc_external(i),
                       dt_change_tstz     = l_dt_change_tstz(i),
                       id_geo_state       = l_id_geo_state(i),
                       num_contrib        = l_num_contrib(i),
                       desc_geo_state     = l_desc_geo_state(i),
                       flg_migrator       = l_flg_migrator(i),
                       id_country_address = l_id_country_address(i),
                       id_episode         = l_id_episode(i),
                       dt_birth           = l_dt_birth(i)
                 WHERE id_pat_dmgr_hist = l_id_pat_dmgr_hist(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pat_dmgr_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PAT_DMGR_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PAT_DMGR_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_DMGR_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PAT_DMGR_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_pat_dmgr_hist_in IN pat_dmgr_hist.id_pat_dmgr_hist%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_dmgr_hist
         WHERE id_pat_dmgr_hist = id_pat_dmgr_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_pat_dmgr_hist_in IN pat_dmgr_hist.id_pat_dmgr_hist%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_pat_dmgr_hist_in => id_pat_dmgr_hist_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PAT_DMGR_HIST
    PROCEDURE del_id_pat_dmgr_hist
    (
        id_pat_dmgr_hist_in IN pat_dmgr_hist.id_pat_dmgr_hist%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_dmgr_hist
         WHERE id_pat_dmgr_hist = id_pat_dmgr_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_pat_dmgr_hist;

    -- Delete all rows for primary key column ID_PAT_DMGR_HIST
    PROCEDURE del_id_pat_dmgr_hist
    (
        id_pat_dmgr_hist_in IN pat_dmgr_hist.id_pat_dmgr_hist%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_pat_dmgr_hist(id_pat_dmgr_hist_in => id_pat_dmgr_hist_in,
                             handle_error_in     => handle_error_in,
                             rows_out            => rows_out);
    END del_id_pat_dmgr_hist;

    PROCEDURE del_pdt_coy_fk
    (
        id_country_address_in IN pat_dmgr_hist.id_country_address%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_dmgr_hist
         WHERE id_country_address = del_pdt_coy_fk.id_country_address_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pdt_coy_fk;

    PROCEDURE del_pdt_coy_fk
    (
        id_country_address_in IN pat_dmgr_hist.id_country_address%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pdt_coy_fk(id_country_address_in => id_country_address_in,
                       handle_error_in       => handle_error_in,
                       rows_out              => rows_out);
    END del_pdt_coy_fk;

    PROCEDURE del_pdt_ctr_fk
    (
        id_country_nation_in IN pat_dmgr_hist.id_country_nation%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_dmgr_hist
         WHERE id_country_nation = del_pdt_ctr_fk.id_country_nation_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pdt_ctr_fk;

    PROCEDURE del_pdt_ctr_fk
    (
        id_country_nation_in IN pat_dmgr_hist.id_country_nation%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pdt_ctr_fk(id_country_nation_in => id_country_nation_in,
                       handle_error_in      => handle_error_in,
                       rows_out             => rows_out);
    END del_pdt_ctr_fk;

    PROCEDURE del_pdt_epis_fk
    (
        id_episode_in   IN pat_dmgr_hist.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_dmgr_hist
         WHERE id_episode = del_pdt_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pdt_epis_fk;

    PROCEDURE del_pdt_epis_fk
    (
        id_episode_in   IN pat_dmgr_hist.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pdt_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pdt_epis_fk;

    PROCEDURE del_pdt_i_fk
    (
        id_isencao_in   IN pat_dmgr_hist.id_isencao%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_dmgr_hist
         WHERE id_isencao = del_pdt_i_fk.id_isencao_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pdt_i_fk;

    PROCEDURE del_pdt_i_fk
    (
        id_isencao_in   IN pat_dmgr_hist.id_isencao%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pdt_i_fk(id_isencao_in => id_isencao_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pdt_i_fk;

    PROCEDURE del_pdt_inst_fk
    (
        id_institution_in IN pat_dmgr_hist.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_dmgr_hist
         WHERE id_institution = del_pdt_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pdt_inst_fk;

    PROCEDURE del_pdt_inst_fk
    (
        id_institution_in IN pat_dmgr_hist.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pdt_inst_fk(id_institution_in => id_institution_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_pdt_inst_fk;

    PROCEDURE del_pdt_occ_fk
    (
        id_occupation_in IN pat_dmgr_hist.id_occupation%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_dmgr_hist
         WHERE id_occupation = del_pdt_occ_fk.id_occupation_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pdt_occ_fk;

    PROCEDURE del_pdt_occ_fk
    (
        id_occupation_in IN pat_dmgr_hist.id_occupation%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pdt_occ_fk(id_occupation_in => id_occupation_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pdt_occ_fk;

    PROCEDURE del_pdt_pat_fk
    (
        id_patient_in   IN pat_dmgr_hist.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_dmgr_hist
         WHERE id_patient = del_pdt_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pdt_pat_fk;

    PROCEDURE del_pdt_pat_fk
    (
        id_patient_in   IN pat_dmgr_hist.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pdt_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pdt_pat_fk;

    PROCEDURE del_pdt_prof_fk
    (
        id_professional_in IN pat_dmgr_hist.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_dmgr_hist
         WHERE id_professional = del_pdt_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pdt_prof_fk;

    PROCEDURE del_pdt_prof_fk
    (
        id_professional_in IN pat_dmgr_hist.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pdt_prof_fk(id_professional_in => id_professional_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_pdt_prof_fk;

    PROCEDURE del_pdt_recm_fk
    (
        id_recm_in      IN pat_dmgr_hist.id_recm%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_dmgr_hist
         WHERE id_recm = del_pdt_recm_fk.id_recm_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pdt_recm_fk;

    PROCEDURE del_pdt_recm_fk
    (
        id_recm_in      IN pat_dmgr_hist.id_recm%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pdt_recm_fk(id_recm_in => id_recm_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pdt_recm_fk;

    PROCEDURE del_pdt_sch_fk
    (
        id_scholarship_in IN pat_dmgr_hist.id_scholarship%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_dmgr_hist
         WHERE id_scholarship = del_pdt_sch_fk.id_scholarship_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pdt_sch_fk;

    PROCEDURE del_pdt_sch_fk
    (
        id_scholarship_in IN pat_dmgr_hist.id_scholarship%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pdt_sch_fk(id_scholarship_in => id_scholarship_in,
                       handle_error_in   => handle_error_in,
                       rows_out          => rows_out);
    END del_pdt_sch_fk;

    PROCEDURE del_ptdmh_gse_fk
    (
        id_geo_state_in IN pat_dmgr_hist.id_geo_state%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_dmgr_hist
         WHERE id_geo_state = del_ptdmh_gse_fk.id_geo_state_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptdmh_gse_fk;

    PROCEDURE del_ptdmh_gse_fk
    (
        id_geo_state_in IN pat_dmgr_hist.id_geo_state%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptdmh_gse_fk(id_geo_state_in => id_geo_state_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptdmh_gse_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PAT_DMGR_HIST';
        ELSE
            RETURN 'DELETE FROM PAT_DMGR_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_DMGR_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_DMGR_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pat_dmgr_hist_inout IN OUT pat_dmgr_hist%ROWTYPE) IS
    BEGIN
        pat_dmgr_hist_inout.id_pat_dmgr_hist   := NULL;
        pat_dmgr_hist_inout.id_patient         := NULL;
        pat_dmgr_hist_inout.id_professional    := NULL;
        pat_dmgr_hist_inout.id_institution     := NULL;
        pat_dmgr_hist_inout.name               := NULL;
        pat_dmgr_hist_inout.gender             := NULL;
        pat_dmgr_hist_inout.nick_name          := NULL;
        pat_dmgr_hist_inout.age                := NULL;
        pat_dmgr_hist_inout.marital_status     := NULL;
        pat_dmgr_hist_inout.address            := NULL;
        pat_dmgr_hist_inout.district           := NULL;
        pat_dmgr_hist_inout.zip_code           := NULL;
        pat_dmgr_hist_inout.num_main_contact   := NULL;
        pat_dmgr_hist_inout.num_contact        := NULL;
        pat_dmgr_hist_inout.flg_job_status     := NULL;
        pat_dmgr_hist_inout.id_country_nation  := NULL;
        pat_dmgr_hist_inout.id_scholarship     := NULL;
        pat_dmgr_hist_inout.father_name        := NULL;
        pat_dmgr_hist_inout.id_isencao         := NULL;
        pat_dmgr_hist_inout.birth_place        := NULL;
        pat_dmgr_hist_inout.num_health_plan    := NULL;
        pat_dmgr_hist_inout.id_recm            := NULL;
        pat_dmgr_hist_inout.id_occupation      := NULL;
        pat_dmgr_hist_inout.occupation_desc    := NULL;
        pat_dmgr_hist_inout.mother_name        := NULL;
        pat_dmgr_hist_inout.location           := NULL;
        pat_dmgr_hist_inout.num_doc_external   := NULL;
        pat_dmgr_hist_inout.dt_change_tstz     := NULL;
        pat_dmgr_hist_inout.id_geo_state       := NULL;
        pat_dmgr_hist_inout.num_contrib        := NULL;
        pat_dmgr_hist_inout.desc_geo_state     := NULL;
        pat_dmgr_hist_inout.flg_migrator       := NULL;
        pat_dmgr_hist_inout.id_country_address := NULL;
        pat_dmgr_hist_inout.id_episode         := NULL;
        pat_dmgr_hist_inout.dt_birth           := NULL;
    END initrec;

    FUNCTION initrec RETURN pat_dmgr_hist%ROWTYPE IS
        l_pat_dmgr_hist pat_dmgr_hist%ROWTYPE;
    BEGIN
        RETURN l_pat_dmgr_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pat_dmgr_hist_tc IS
        data pat_dmgr_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pat_dmgr_hist
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pat_dmgr_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pat_dmgr_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pat_dmgr_hist;
/
