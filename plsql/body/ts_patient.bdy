/*-- Last Change Revision: $Rev: 2028288 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:52 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_patient
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Setembro 1, 2009 14:16:16
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_patient_in              IN patient.id_patient%TYPE,
        id_person_in               IN patient.id_person%TYPE DEFAULT NULL,
        id_general_pratictioner_in IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_pat_family_in           IN patient.id_pat_family%TYPE DEFAULT NULL,
        name_in                    IN patient.name%TYPE DEFAULT NULL,
        gender_in                  IN patient.gender%TYPE DEFAULT NULL,
        dt_birth_in                IN patient.dt_birth%TYPE DEFAULT NULL,
        nick_name_in               IN patient.nick_name%TYPE DEFAULT NULL,
        flg_status_in              IN patient.flg_status%TYPE DEFAULT NULL,
        dt_deceased_in             IN patient.dt_deceased%TYPE DEFAULT NULL,
        adw_last_update_in         IN patient.adw_last_update%TYPE DEFAULT NULL,
        last_name_in               IN patient.last_name%TYPE DEFAULT NULL,
        middle_name_in             IN patient.middle_name%TYPE DEFAULT NULL,
        age_in                     IN patient.age%TYPE DEFAULT NULL,
        flg_migration_in           IN patient.flg_migration%TYPE DEFAULT 'A',
        total_fam_members_in       IN patient.total_fam_members%TYPE DEFAULT NULL,
        national_health_number_in  IN patient.national_health_number%TYPE DEFAULT NULL,
        institution_key_in         IN patient.institution_key%TYPE DEFAULT NULL,
        create_user_in             IN patient.create_user%TYPE DEFAULT NULL,
        create_time_in             IN patient.create_time%TYPE DEFAULT NULL,
        update_user_in             IN patient.update_user%TYPE DEFAULT NULL,
        update_time_in             IN patient.update_time%TYPE DEFAULT NULL,
        patient_number_in          IN patient.patient_number%TYPE DEFAULT NULL,
        deceased_motive_in         IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_place_in          IN patient.deceased_place%TYPE DEFAULT NULL,
        birth_place_in             IN patient.birth_place%TYPE DEFAULT NULL,
        first_name_in              IN patient.first_name%TYPE DEFAULT NULL,
        create_institution_in      IN patient.create_institution%TYPE DEFAULT NULL,
        update_institution_in      IN patient.update_institution%TYPE DEFAULT NULL,
        record_status_in           IN patient.record_status%TYPE DEFAULT NULL,
        import_code_in             IN patient.import_code%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO patient
            (id_patient,
             id_person,
             id_general_pratictioner,
             id_pat_family,
             name,
             gender,
             dt_birth,
             nick_name,
             flg_status,
             dt_deceased,
             adw_last_update,
             last_name,
             middle_name,
             age,
             flg_migration,
             total_fam_members,
             national_health_number,
             institution_key,
             create_user,
             create_time,
             update_user,
             update_time,
             patient_number,
             deceased_motive,
             deceased_place,
             birth_place,
             first_name,
             create_institution,
             update_institution,
             record_status,
             import_code)
        VALUES
            (id_patient_in,
             id_person_in,
             id_general_pratictioner_in,
             id_pat_family_in,
             name_in,
             gender_in,
             dt_birth_in,
             nick_name_in,
             flg_status_in,
             dt_deceased_in,
             adw_last_update_in,
             last_name_in,
             middle_name_in,
             age_in,
             flg_migration_in,
             total_fam_members_in,
             national_health_number_in,
             institution_key_in,
             create_user_in,
             create_time_in,
             update_user_in,
             update_time_in,
             patient_number_in,
             deceased_motive_in,
             deceased_place_in,
             birth_place_in,
             first_name_in,
             create_institution_in,
             update_institution_in,
             record_status_in,
             import_code_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'PAT_BUSINESSKEY_IDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "PAT_BUSINESSKEY_IDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'PATIENT',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PATIENT_NUMBER',
                                                        value_in           => patient_number_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSIF l_name = 'PAT_PRSN_IDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "PAT_PRSN_IDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'PATIENT',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PERSON',
                                                        value_in           => id_person_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PATIENT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    IF l_name = 'PAT_GNRP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_GENERAL_PRATICTIONER',
                                                        value_in           => id_general_pratictioner_in);
                    END IF;
                    IF l_name = 'PAT_PFAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_FAMILY',
                                                        value_in           => id_pat_family_in);
                    END IF;
                    IF l_name = 'PAT_PRSN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PERSON',
                                                        value_in           => id_person_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_patient_in              IN patient.id_patient%TYPE,
        id_person_in               IN patient.id_person%TYPE DEFAULT NULL,
        id_general_pratictioner_in IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_pat_family_in           IN patient.id_pat_family%TYPE DEFAULT NULL,
        name_in                    IN patient.name%TYPE DEFAULT NULL,
        gender_in                  IN patient.gender%TYPE DEFAULT NULL,
        dt_birth_in                IN patient.dt_birth%TYPE DEFAULT NULL,
        nick_name_in               IN patient.nick_name%TYPE DEFAULT NULL,
        flg_status_in              IN patient.flg_status%TYPE DEFAULT NULL,
        dt_deceased_in             IN patient.dt_deceased%TYPE DEFAULT NULL,
        adw_last_update_in         IN patient.adw_last_update%TYPE DEFAULT NULL,
        last_name_in               IN patient.last_name%TYPE DEFAULT NULL,
        middle_name_in             IN patient.middle_name%TYPE DEFAULT NULL,
        age_in                     IN patient.age%TYPE DEFAULT NULL,
        flg_migration_in           IN patient.flg_migration%TYPE DEFAULT 'A',
        total_fam_members_in       IN patient.total_fam_members%TYPE DEFAULT NULL,
        national_health_number_in  IN patient.national_health_number%TYPE DEFAULT NULL,
        institution_key_in         IN patient.institution_key%TYPE DEFAULT NULL,
        create_user_in             IN patient.create_user%TYPE DEFAULT NULL,
        create_time_in             IN patient.create_time%TYPE DEFAULT NULL,
        update_user_in             IN patient.update_user%TYPE DEFAULT NULL,
        update_time_in             IN patient.update_time%TYPE DEFAULT NULL,
        patient_number_in          IN patient.patient_number%TYPE DEFAULT NULL,
        deceased_motive_in         IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_place_in          IN patient.deceased_place%TYPE DEFAULT NULL,
        birth_place_in             IN patient.birth_place%TYPE DEFAULT NULL,
        first_name_in              IN patient.first_name%TYPE DEFAULT NULL,
        create_institution_in      IN patient.create_institution%TYPE DEFAULT NULL,
        update_institution_in      IN patient.update_institution%TYPE DEFAULT NULL,
        record_status_in           IN patient.record_status%TYPE DEFAULT NULL,
        import_code_in             IN patient.import_code%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_patient_in              => id_patient_in,
            id_person_in               => id_person_in,
            id_general_pratictioner_in => id_general_pratictioner_in,
            id_pat_family_in           => id_pat_family_in,
            name_in                    => name_in,
            gender_in                  => gender_in,
            dt_birth_in                => dt_birth_in,
            nick_name_in               => nick_name_in,
            flg_status_in              => flg_status_in,
            dt_deceased_in             => dt_deceased_in,
            adw_last_update_in         => adw_last_update_in,
            last_name_in               => last_name_in,
            middle_name_in             => middle_name_in,
            age_in                     => age_in,
            flg_migration_in           => flg_migration_in,
            total_fam_members_in       => total_fam_members_in,
            national_health_number_in  => national_health_number_in,
            institution_key_in         => institution_key_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            patient_number_in          => patient_number_in,
            deceased_motive_in         => deceased_motive_in,
            deceased_place_in          => deceased_place_in,
            birth_place_in             => birth_place_in,
            first_name_in              => first_name_in,
            create_institution_in      => create_institution_in,
            update_institution_in      => update_institution_in,
            record_status_in           => record_status_in,
            import_code_in             => import_code_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN patient%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec patient%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_patient := next_key(sequence_in);
        END IF;
        ins(id_patient_in              => l_rec.id_patient,
            id_person_in               => l_rec.id_person,
            id_general_pratictioner_in => l_rec.id_general_pratictioner,
            id_pat_family_in           => l_rec.id_pat_family,
            name_in                    => l_rec.name,
            gender_in                  => l_rec.gender,
            dt_birth_in                => l_rec.dt_birth,
            nick_name_in               => l_rec.nick_name,
            flg_status_in              => l_rec.flg_status,
            dt_deceased_in             => l_rec.dt_deceased,
            adw_last_update_in         => l_rec.adw_last_update,
            last_name_in               => l_rec.last_name,
            middle_name_in             => l_rec.middle_name,
            age_in                     => l_rec.age,
            flg_migration_in           => l_rec.flg_migration,
            total_fam_members_in       => l_rec.total_fam_members,
            national_health_number_in  => l_rec.national_health_number,
            institution_key_in         => l_rec.institution_key,
            create_user_in             => l_rec.create_user,
            create_time_in             => l_rec.create_time,
            update_user_in             => l_rec.update_user,
            update_time_in             => l_rec.update_time,
            patient_number_in          => l_rec.patient_number,
            deceased_motive_in         => l_rec.deceased_motive,
            deceased_place_in          => l_rec.deceased_place,
            birth_place_in             => l_rec.birth_place,
            first_name_in              => l_rec.first_name,
            create_institution_in      => l_rec.create_institution,
            update_institution_in      => l_rec.update_institution,
            record_status_in           => l_rec.record_status,
            import_code_in             => l_rec.import_code,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN patient%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN patient.id_patient%TYPE
    
     IS
        retval patient.id_patient%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_patient.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PATIENT'));
    END next_key;

    PROCEDURE ins
    (
        id_person_in               IN patient.id_person%TYPE DEFAULT NULL,
        id_general_pratictioner_in IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_pat_family_in           IN patient.id_pat_family%TYPE DEFAULT NULL,
        name_in                    IN patient.name%TYPE DEFAULT NULL,
        gender_in                  IN patient.gender%TYPE DEFAULT NULL,
        dt_birth_in                IN patient.dt_birth%TYPE DEFAULT NULL,
        nick_name_in               IN patient.nick_name%TYPE DEFAULT NULL,
        flg_status_in              IN patient.flg_status%TYPE DEFAULT NULL,
        dt_deceased_in             IN patient.dt_deceased%TYPE DEFAULT NULL,
        adw_last_update_in         IN patient.adw_last_update%TYPE DEFAULT NULL,
        last_name_in               IN patient.last_name%TYPE DEFAULT NULL,
        middle_name_in             IN patient.middle_name%TYPE DEFAULT NULL,
        age_in                     IN patient.age%TYPE DEFAULT NULL,
        flg_migration_in           IN patient.flg_migration%TYPE DEFAULT 'A',
        total_fam_members_in       IN patient.total_fam_members%TYPE DEFAULT NULL,
        national_health_number_in  IN patient.national_health_number%TYPE DEFAULT NULL,
        institution_key_in         IN patient.institution_key%TYPE DEFAULT NULL,
        create_user_in             IN patient.create_user%TYPE DEFAULT NULL,
        create_time_in             IN patient.create_time%TYPE DEFAULT NULL,
        update_user_in             IN patient.update_user%TYPE DEFAULT NULL,
        update_time_in             IN patient.update_time%TYPE DEFAULT NULL,
        patient_number_in          IN patient.patient_number%TYPE DEFAULT NULL,
        deceased_motive_in         IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_place_in          IN patient.deceased_place%TYPE DEFAULT NULL,
        birth_place_in             IN patient.birth_place%TYPE DEFAULT NULL,
        first_name_in              IN patient.first_name%TYPE DEFAULT NULL,
        create_institution_in      IN patient.create_institution%TYPE DEFAULT NULL,
        update_institution_in      IN patient.update_institution%TYPE DEFAULT NULL,
        record_status_in           IN patient.record_status%TYPE DEFAULT NULL,
        import_code_in             IN patient.import_code%TYPE DEFAULT NULL,
        id_patient_out             IN OUT patient.id_patient%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky patient.id_patient%TYPE := next_key;
    BEGIN
        ins(id_patient_in              => l_pky,
            id_person_in               => id_person_in,
            id_general_pratictioner_in => id_general_pratictioner_in,
            id_pat_family_in           => id_pat_family_in,
            name_in                    => name_in,
            gender_in                  => gender_in,
            dt_birth_in                => dt_birth_in,
            nick_name_in               => nick_name_in,
            flg_status_in              => flg_status_in,
            dt_deceased_in             => dt_deceased_in,
            adw_last_update_in         => adw_last_update_in,
            last_name_in               => last_name_in,
            middle_name_in             => middle_name_in,
            age_in                     => age_in,
            flg_migration_in           => flg_migration_in,
            total_fam_members_in       => total_fam_members_in,
            national_health_number_in  => national_health_number_in,
            institution_key_in         => institution_key_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            patient_number_in          => patient_number_in,
            deceased_motive_in         => deceased_motive_in,
            deceased_place_in          => deceased_place_in,
            birth_place_in             => birth_place_in,
            first_name_in              => first_name_in,
            create_institution_in      => create_institution_in,
            update_institution_in      => update_institution_in,
            record_status_in           => record_status_in,
            import_code_in             => import_code_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        id_patient_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_person_in               IN patient.id_person%TYPE DEFAULT NULL,
        id_general_pratictioner_in IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_pat_family_in           IN patient.id_pat_family%TYPE DEFAULT NULL,
        name_in                    IN patient.name%TYPE DEFAULT NULL,
        gender_in                  IN patient.gender%TYPE DEFAULT NULL,
        dt_birth_in                IN patient.dt_birth%TYPE DEFAULT NULL,
        nick_name_in               IN patient.nick_name%TYPE DEFAULT NULL,
        flg_status_in              IN patient.flg_status%TYPE DEFAULT NULL,
        dt_deceased_in             IN patient.dt_deceased%TYPE DEFAULT NULL,
        adw_last_update_in         IN patient.adw_last_update%TYPE DEFAULT NULL,
        last_name_in               IN patient.last_name%TYPE DEFAULT NULL,
        middle_name_in             IN patient.middle_name%TYPE DEFAULT NULL,
        age_in                     IN patient.age%TYPE DEFAULT NULL,
        flg_migration_in           IN patient.flg_migration%TYPE DEFAULT 'A',
        total_fam_members_in       IN patient.total_fam_members%TYPE DEFAULT NULL,
        national_health_number_in  IN patient.national_health_number%TYPE DEFAULT NULL,
        institution_key_in         IN patient.institution_key%TYPE DEFAULT NULL,
        create_user_in             IN patient.create_user%TYPE DEFAULT NULL,
        create_time_in             IN patient.create_time%TYPE DEFAULT NULL,
        update_user_in             IN patient.update_user%TYPE DEFAULT NULL,
        update_time_in             IN patient.update_time%TYPE DEFAULT NULL,
        patient_number_in          IN patient.patient_number%TYPE DEFAULT NULL,
        deceased_motive_in         IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_place_in          IN patient.deceased_place%TYPE DEFAULT NULL,
        birth_place_in             IN patient.birth_place%TYPE DEFAULT NULL,
        first_name_in              IN patient.first_name%TYPE DEFAULT NULL,
        create_institution_in      IN patient.create_institution%TYPE DEFAULT NULL,
        update_institution_in      IN patient.update_institution%TYPE DEFAULT NULL,
        record_status_in           IN patient.record_status%TYPE DEFAULT NULL,
        import_code_in             IN patient.import_code%TYPE DEFAULT NULL,
        id_patient_out             IN OUT patient.id_patient%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_person_in               => id_person_in,
            id_general_pratictioner_in => id_general_pratictioner_in,
            id_pat_family_in           => id_pat_family_in,
            name_in                    => name_in,
            gender_in                  => gender_in,
            dt_birth_in                => dt_birth_in,
            nick_name_in               => nick_name_in,
            flg_status_in              => flg_status_in,
            dt_deceased_in             => dt_deceased_in,
            adw_last_update_in         => adw_last_update_in,
            last_name_in               => last_name_in,
            middle_name_in             => middle_name_in,
            age_in                     => age_in,
            flg_migration_in           => flg_migration_in,
            total_fam_members_in       => total_fam_members_in,
            national_health_number_in  => national_health_number_in,
            institution_key_in         => institution_key_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            patient_number_in          => patient_number_in,
            deceased_motive_in         => deceased_motive_in,
            deceased_place_in          => deceased_place_in,
            birth_place_in             => birth_place_in,
            first_name_in              => first_name_in,
            create_institution_in      => create_institution_in,
            update_institution_in      => update_institution_in,
            record_status_in           => record_status_in,
            import_code_in             => import_code_in,
            id_patient_out             => id_patient_out,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    FUNCTION ins
    (
        id_person_in               IN patient.id_person%TYPE DEFAULT NULL,
        id_general_pratictioner_in IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_pat_family_in           IN patient.id_pat_family%TYPE DEFAULT NULL,
        name_in                    IN patient.name%TYPE DEFAULT NULL,
        gender_in                  IN patient.gender%TYPE DEFAULT NULL,
        dt_birth_in                IN patient.dt_birth%TYPE DEFAULT NULL,
        nick_name_in               IN patient.nick_name%TYPE DEFAULT NULL,
        flg_status_in              IN patient.flg_status%TYPE DEFAULT NULL,
        dt_deceased_in             IN patient.dt_deceased%TYPE DEFAULT NULL,
        adw_last_update_in         IN patient.adw_last_update%TYPE DEFAULT NULL,
        last_name_in               IN patient.last_name%TYPE DEFAULT NULL,
        middle_name_in             IN patient.middle_name%TYPE DEFAULT NULL,
        age_in                     IN patient.age%TYPE DEFAULT NULL,
        flg_migration_in           IN patient.flg_migration%TYPE DEFAULT 'A',
        total_fam_members_in       IN patient.total_fam_members%TYPE DEFAULT NULL,
        national_health_number_in  IN patient.national_health_number%TYPE DEFAULT NULL,
        institution_key_in         IN patient.institution_key%TYPE DEFAULT NULL,
        create_user_in             IN patient.create_user%TYPE DEFAULT NULL,
        create_time_in             IN patient.create_time%TYPE DEFAULT NULL,
        update_user_in             IN patient.update_user%TYPE DEFAULT NULL,
        update_time_in             IN patient.update_time%TYPE DEFAULT NULL,
        patient_number_in          IN patient.patient_number%TYPE DEFAULT NULL,
        deceased_motive_in         IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_place_in          IN patient.deceased_place%TYPE DEFAULT NULL,
        birth_place_in             IN patient.birth_place%TYPE DEFAULT NULL,
        first_name_in              IN patient.first_name%TYPE DEFAULT NULL,
        create_institution_in      IN patient.create_institution%TYPE DEFAULT NULL,
        update_institution_in      IN patient.update_institution%TYPE DEFAULT NULL,
        record_status_in           IN patient.record_status%TYPE DEFAULT NULL,
        import_code_in             IN patient.import_code%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) RETURN patient.id_patient%TYPE IS
        l_pky patient.id_patient%TYPE := next_key;
    BEGIN
        ins(id_patient_in              => l_pky,
            id_person_in               => id_person_in,
            id_general_pratictioner_in => id_general_pratictioner_in,
            id_pat_family_in           => id_pat_family_in,
            name_in                    => name_in,
            gender_in                  => gender_in,
            dt_birth_in                => dt_birth_in,
            nick_name_in               => nick_name_in,
            flg_status_in              => flg_status_in,
            dt_deceased_in             => dt_deceased_in,
            adw_last_update_in         => adw_last_update_in,
            last_name_in               => last_name_in,
            middle_name_in             => middle_name_in,
            age_in                     => age_in,
            flg_migration_in           => flg_migration_in,
            total_fam_members_in       => total_fam_members_in,
            national_health_number_in  => national_health_number_in,
            institution_key_in         => institution_key_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            patient_number_in          => patient_number_in,
            deceased_motive_in         => deceased_motive_in,
            deceased_place_in          => deceased_place_in,
            birth_place_in             => birth_place_in,
            first_name_in              => first_name_in,
            create_institution_in      => create_institution_in,
            update_institution_in      => update_institution_in,
            record_status_in           => record_status_in,
            import_code_in             => import_code_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_person_in               IN patient.id_person%TYPE DEFAULT NULL,
        id_general_pratictioner_in IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_pat_family_in           IN patient.id_pat_family%TYPE DEFAULT NULL,
        name_in                    IN patient.name%TYPE DEFAULT NULL,
        gender_in                  IN patient.gender%TYPE DEFAULT NULL,
        dt_birth_in                IN patient.dt_birth%TYPE DEFAULT NULL,
        nick_name_in               IN patient.nick_name%TYPE DEFAULT NULL,
        flg_status_in              IN patient.flg_status%TYPE DEFAULT NULL,
        dt_deceased_in             IN patient.dt_deceased%TYPE DEFAULT NULL,
        adw_last_update_in         IN patient.adw_last_update%TYPE DEFAULT NULL,
        last_name_in               IN patient.last_name%TYPE DEFAULT NULL,
        middle_name_in             IN patient.middle_name%TYPE DEFAULT NULL,
        age_in                     IN patient.age%TYPE DEFAULT NULL,
        flg_migration_in           IN patient.flg_migration%TYPE DEFAULT 'A',
        total_fam_members_in       IN patient.total_fam_members%TYPE DEFAULT NULL,
        national_health_number_in  IN patient.national_health_number%TYPE DEFAULT NULL,
        institution_key_in         IN patient.institution_key%TYPE DEFAULT NULL,
        create_user_in             IN patient.create_user%TYPE DEFAULT NULL,
        create_time_in             IN patient.create_time%TYPE DEFAULT NULL,
        update_user_in             IN patient.update_user%TYPE DEFAULT NULL,
        update_time_in             IN patient.update_time%TYPE DEFAULT NULL,
        patient_number_in          IN patient.patient_number%TYPE DEFAULT NULL,
        deceased_motive_in         IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_place_in          IN patient.deceased_place%TYPE DEFAULT NULL,
        birth_place_in             IN patient.birth_place%TYPE DEFAULT NULL,
        first_name_in              IN patient.first_name%TYPE DEFAULT NULL,
        create_institution_in      IN patient.create_institution%TYPE DEFAULT NULL,
        update_institution_in      IN patient.update_institution%TYPE DEFAULT NULL,
        record_status_in           IN patient.record_status%TYPE DEFAULT NULL,
        import_code_in             IN patient.import_code%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) RETURN patient.id_patient%TYPE IS
        l_pky    patient.id_patient%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_patient_in              => l_pky,
            id_person_in               => id_person_in,
            id_general_pratictioner_in => id_general_pratictioner_in,
            id_pat_family_in           => id_pat_family_in,
            name_in                    => name_in,
            gender_in                  => gender_in,
            dt_birth_in                => dt_birth_in,
            nick_name_in               => nick_name_in,
            flg_status_in              => flg_status_in,
            dt_deceased_in             => dt_deceased_in,
            adw_last_update_in         => adw_last_update_in,
            last_name_in               => last_name_in,
            middle_name_in             => middle_name_in,
            age_in                     => age_in,
            flg_migration_in           => flg_migration_in,
            total_fam_members_in       => total_fam_members_in,
            national_health_number_in  => national_health_number_in,
            institution_key_in         => institution_key_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            patient_number_in          => patient_number_in,
            deceased_motive_in         => deceased_motive_in,
            deceased_place_in          => deceased_place_in,
            birth_place_in             => birth_place_in,
            first_name_in              => first_name_in,
            create_institution_in      => create_institution_in,
            update_institution_in      => update_institution_in,
            record_status_in           => record_status_in,
            import_code_in             => import_code_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_person_in               IN patient.id_person%TYPE DEFAULT NULL,
        id_general_pratictioner_in IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_pat_family_in           IN patient.id_pat_family%TYPE DEFAULT NULL,
        name_in                    IN patient.name%TYPE DEFAULT NULL,
        gender_in                  IN patient.gender%TYPE DEFAULT NULL,
        dt_birth_in                IN patient.dt_birth%TYPE DEFAULT NULL,
        nick_name_in               IN patient.nick_name%TYPE DEFAULT NULL,
        flg_status_in              IN patient.flg_status%TYPE DEFAULT NULL,
        dt_deceased_in             IN patient.dt_deceased%TYPE DEFAULT NULL,
        adw_last_update_in         IN patient.adw_last_update%TYPE DEFAULT NULL,
        last_name_in               IN patient.last_name%TYPE DEFAULT NULL,
        middle_name_in             IN patient.middle_name%TYPE DEFAULT NULL,
        age_in                     IN patient.age%TYPE DEFAULT NULL,
        flg_migration_in           IN patient.flg_migration%TYPE DEFAULT 'A',
        total_fam_members_in       IN patient.total_fam_members%TYPE DEFAULT NULL,
        national_health_number_in  IN patient.national_health_number%TYPE DEFAULT NULL,
        institution_key_in         IN patient.institution_key%TYPE DEFAULT NULL,
        create_user_in             IN patient.create_user%TYPE DEFAULT NULL,
        create_time_in             IN patient.create_time%TYPE DEFAULT NULL,
        update_user_in             IN patient.update_user%TYPE DEFAULT NULL,
        update_time_in             IN patient.update_time%TYPE DEFAULT NULL,
        patient_number_in          IN patient.patient_number%TYPE DEFAULT NULL,
        deceased_motive_in         IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_place_in          IN patient.deceased_place%TYPE DEFAULT NULL,
        birth_place_in             IN patient.birth_place%TYPE DEFAULT NULL,
        first_name_in              IN patient.first_name%TYPE DEFAULT NULL,
        create_institution_in      IN patient.create_institution%TYPE DEFAULT NULL,
        update_institution_in      IN patient.update_institution%TYPE DEFAULT NULL,
        record_status_in           IN patient.record_status%TYPE DEFAULT NULL,
        import_code_in             IN patient.import_code%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky patient.id_patient%TYPE := next_key;
    BEGIN
        ins(id_patient_in              => l_pky,
            id_person_in               => id_person_in,
            id_general_pratictioner_in => id_general_pratictioner_in,
            id_pat_family_in           => id_pat_family_in,
            name_in                    => name_in,
            gender_in                  => gender_in,
            dt_birth_in                => dt_birth_in,
            nick_name_in               => nick_name_in,
            flg_status_in              => flg_status_in,
            dt_deceased_in             => dt_deceased_in,
            adw_last_update_in         => adw_last_update_in,
            last_name_in               => last_name_in,
            middle_name_in             => middle_name_in,
            age_in                     => age_in,
            flg_migration_in           => flg_migration_in,
            total_fam_members_in       => total_fam_members_in,
            national_health_number_in  => national_health_number_in,
            institution_key_in         => institution_key_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            patient_number_in          => patient_number_in,
            deceased_motive_in         => deceased_motive_in,
            deceased_place_in          => deceased_place_in,
            birth_place_in             => birth_place_in,
            first_name_in              => first_name_in,
            create_institution_in      => create_institution_in,
            update_institution_in      => update_institution_in,
            record_status_in           => record_status_in,
            import_code_in             => import_code_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_person_in               IN patient.id_person%TYPE DEFAULT NULL,
        id_general_pratictioner_in IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_pat_family_in           IN patient.id_pat_family%TYPE DEFAULT NULL,
        name_in                    IN patient.name%TYPE DEFAULT NULL,
        gender_in                  IN patient.gender%TYPE DEFAULT NULL,
        dt_birth_in                IN patient.dt_birth%TYPE DEFAULT NULL,
        nick_name_in               IN patient.nick_name%TYPE DEFAULT NULL,
        flg_status_in              IN patient.flg_status%TYPE DEFAULT NULL,
        dt_deceased_in             IN patient.dt_deceased%TYPE DEFAULT NULL,
        adw_last_update_in         IN patient.adw_last_update%TYPE DEFAULT NULL,
        last_name_in               IN patient.last_name%TYPE DEFAULT NULL,
        middle_name_in             IN patient.middle_name%TYPE DEFAULT NULL,
        age_in                     IN patient.age%TYPE DEFAULT NULL,
        flg_migration_in           IN patient.flg_migration%TYPE DEFAULT 'A',
        total_fam_members_in       IN patient.total_fam_members%TYPE DEFAULT NULL,
        national_health_number_in  IN patient.national_health_number%TYPE DEFAULT NULL,
        institution_key_in         IN patient.institution_key%TYPE DEFAULT NULL,
        create_user_in             IN patient.create_user%TYPE DEFAULT NULL,
        create_time_in             IN patient.create_time%TYPE DEFAULT NULL,
        update_user_in             IN patient.update_user%TYPE DEFAULT NULL,
        update_time_in             IN patient.update_time%TYPE DEFAULT NULL,
        patient_number_in          IN patient.patient_number%TYPE DEFAULT NULL,
        deceased_motive_in         IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_place_in          IN patient.deceased_place%TYPE DEFAULT NULL,
        birth_place_in             IN patient.birth_place%TYPE DEFAULT NULL,
        first_name_in              IN patient.first_name%TYPE DEFAULT NULL,
        create_institution_in      IN patient.create_institution%TYPE DEFAULT NULL,
        update_institution_in      IN patient.update_institution%TYPE DEFAULT NULL,
        record_status_in           IN patient.record_status%TYPE DEFAULT NULL,
        import_code_in             IN patient.import_code%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        l_pky    patient.id_patient%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_patient_in              => l_pky,
            id_person_in               => id_person_in,
            id_general_pratictioner_in => id_general_pratictioner_in,
            id_pat_family_in           => id_pat_family_in,
            name_in                    => name_in,
            gender_in                  => gender_in,
            dt_birth_in                => dt_birth_in,
            nick_name_in               => nick_name_in,
            flg_status_in              => flg_status_in,
            dt_deceased_in             => dt_deceased_in,
            adw_last_update_in         => adw_last_update_in,
            last_name_in               => last_name_in,
            middle_name_in             => middle_name_in,
            age_in                     => age_in,
            flg_migration_in           => flg_migration_in,
            total_fam_members_in       => total_fam_members_in,
            national_health_number_in  => national_health_number_in,
            institution_key_in         => institution_key_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            patient_number_in          => patient_number_in,
            deceased_motive_in         => deceased_motive_in,
            deceased_place_in          => deceased_place_in,
            birth_place_in             => birth_place_in,
            first_name_in              => first_name_in,
            create_institution_in      => create_institution_in,
            update_institution_in      => update_institution_in,
            record_status_in           => record_status_in,
            import_code_in             => import_code_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN patient_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO patient
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PERSON _' || indx,
                                                        value_in           => rows_in(indx).id_person,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_GENERAL_PRATICTIONER _' || indx,
                                                        value_in           => rows_in(indx).id_general_pratictioner,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_FAMILY _' || indx,
                                                        value_in           => rows_in(indx).id_pat_family,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NAME _' || indx,
                                                        value_in           => rows_in(indx).name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'GENDER _' || indx,
                                                        value_in           => rows_in(indx).gender,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BIRTH _' || indx,
                                                        value_in           => rows_in(indx).dt_birth,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NICK_NAME _' || indx,
                                                        value_in           => rows_in(indx).nick_name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_DECEASED _' || indx,
                                                        value_in           => rows_in(indx).dt_deceased,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ADW_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).adw_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAST_NAME _' || indx,
                                                        value_in           => rows_in(indx).last_name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MIDDLE_NAME _' || indx,
                                                        value_in           => rows_in(indx).middle_name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'AGE _' || indx,
                                                        value_in           => rows_in(indx).age,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_MIGRATION _' || indx,
                                                        value_in           => rows_in(indx).flg_migration,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TOTAL_FAM_MEMBERS _' || indx,
                                                        value_in           => rows_in(indx).total_fam_members,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NATIONAL_HEALTH_NUMBER _' || indx,
                                                        value_in           => rows_in(indx).national_health_number,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'INSTITUTION_KEY _' || indx,
                                                        value_in           => rows_in(indx).institution_key,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PATIENT_NUMBER _' || indx,
                                                        value_in           => rows_in(indx).patient_number,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DECEASED_MOTIVE _' || indx,
                                                        value_in           => rows_in(indx).deceased_motive,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DECEASED_PLACE _' || indx,
                                                        value_in           => rows_in(indx).deceased_place,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BIRTH_PLACE _' || indx,
                                                        value_in           => rows_in(indx).birth_place,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FIRST_NAME _' || indx,
                                                        value_in           => rows_in(indx).first_name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RECORD_STATUS _' || indx,
                                                        value_in           => rows_in(indx).record_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'IMPORT_CODE _' || indx,
                                                        value_in           => rows_in(indx).import_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PATIENT',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN patient_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_patient_in               IN patient.id_patient%TYPE,
        id_person_in                IN patient.id_person%TYPE DEFAULT NULL,
        id_person_nin               IN BOOLEAN := TRUE,
        id_general_pratictioner_in  IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_general_pratictioner_nin IN BOOLEAN := TRUE,
        id_pat_family_in            IN patient.id_pat_family%TYPE DEFAULT NULL,
        id_pat_family_nin           IN BOOLEAN := TRUE,
        name_in                     IN patient.name%TYPE DEFAULT NULL,
        name_nin                    IN BOOLEAN := TRUE,
        gender_in                   IN patient.gender%TYPE DEFAULT NULL,
        gender_nin                  IN BOOLEAN := TRUE,
        dt_birth_in                 IN patient.dt_birth%TYPE DEFAULT NULL,
        dt_birth_nin                IN BOOLEAN := TRUE,
        nick_name_in                IN patient.nick_name%TYPE DEFAULT NULL,
        nick_name_nin               IN BOOLEAN := TRUE,
        flg_status_in               IN patient.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        dt_deceased_in              IN patient.dt_deceased%TYPE DEFAULT NULL,
        dt_deceased_nin             IN BOOLEAN := TRUE,
        adw_last_update_in          IN patient.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin         IN BOOLEAN := TRUE,
        last_name_in                IN patient.last_name%TYPE DEFAULT NULL,
        last_name_nin               IN BOOLEAN := TRUE,
        middle_name_in              IN patient.middle_name%TYPE DEFAULT NULL,
        middle_name_nin             IN BOOLEAN := TRUE,
        age_in                      IN patient.age%TYPE DEFAULT NULL,
        age_nin                     IN BOOLEAN := TRUE,
        flg_migration_in            IN patient.flg_migration%TYPE DEFAULT NULL,
        flg_migration_nin           IN BOOLEAN := TRUE,
        total_fam_members_in        IN patient.total_fam_members%TYPE DEFAULT NULL,
        total_fam_members_nin       IN BOOLEAN := TRUE,
        national_health_number_in   IN patient.national_health_number%TYPE DEFAULT NULL,
        national_health_number_nin  IN BOOLEAN := TRUE,
        institution_key_in          IN patient.institution_key%TYPE DEFAULT NULL,
        institution_key_nin         IN BOOLEAN := TRUE,
        create_user_in              IN patient.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN patient.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        update_user_in              IN patient.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN patient.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        patient_number_in           IN patient.patient_number%TYPE DEFAULT NULL,
        patient_number_nin          IN BOOLEAN := TRUE,
        deceased_motive_in          IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_motive_nin         IN BOOLEAN := TRUE,
        deceased_place_in           IN patient.deceased_place%TYPE DEFAULT NULL,
        deceased_place_nin          IN BOOLEAN := TRUE,
        birth_place_in              IN patient.birth_place%TYPE DEFAULT NULL,
        birth_place_nin             IN BOOLEAN := TRUE,
        first_name_in               IN patient.first_name%TYPE DEFAULT NULL,
        first_name_nin              IN BOOLEAN := TRUE,
        create_institution_in       IN patient.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_institution_in       IN patient.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        record_status_in            IN patient.record_status%TYPE DEFAULT NULL,
        record_status_nin           IN BOOLEAN := TRUE,
        import_code_in              IN patient.import_code%TYPE DEFAULT NULL,
        import_code_nin             IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_rows_out                  table_varchar;
        l_id_person_n               NUMBER(1);
        l_id_general_pratictioner_n NUMBER(1);
        l_id_pat_family_n           NUMBER(1);
        l_name_n                    NUMBER(1);
        l_gender_n                  NUMBER(1);
        l_dt_birth_n                NUMBER(1);
        l_nick_name_n               NUMBER(1);
        l_flg_status_n              NUMBER(1);
        l_dt_deceased_n             NUMBER(1);
        l_adw_last_update_n         NUMBER(1);
        l_last_name_n               NUMBER(1);
        l_middle_name_n             NUMBER(1);
        l_age_n                     NUMBER(1);
        l_flg_migration_n           NUMBER(1);
        l_total_fam_members_n       NUMBER(1);
        l_national_health_number_n  NUMBER(1);
        l_institution_key_n         NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_patient_number_n          NUMBER(1);
        l_deceased_motive_n         NUMBER(1);
        l_deceased_place_n          NUMBER(1);
        l_birth_place_n             NUMBER(1);
        l_first_name_n              NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_institution_n      NUMBER(1);
        l_record_status_n           NUMBER(1);
        l_import_code_n             NUMBER(1);
    BEGIN
    
        l_id_person_n               := sys.diutil.bool_to_int(id_person_nin);
        l_id_general_pratictioner_n := sys.diutil.bool_to_int(id_general_pratictioner_nin);
        l_id_pat_family_n           := sys.diutil.bool_to_int(id_pat_family_nin);
        l_name_n                    := sys.diutil.bool_to_int(name_nin);
        l_gender_n                  := sys.diutil.bool_to_int(gender_nin);
        l_dt_birth_n                := sys.diutil.bool_to_int(dt_birth_nin);
        l_nick_name_n               := sys.diutil.bool_to_int(nick_name_nin);
        l_flg_status_n              := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_deceased_n             := sys.diutil.bool_to_int(dt_deceased_nin);
        l_adw_last_update_n         := sys.diutil.bool_to_int(adw_last_update_nin);
        l_last_name_n               := sys.diutil.bool_to_int(last_name_nin);
        l_middle_name_n             := sys.diutil.bool_to_int(middle_name_nin);
        l_age_n                     := sys.diutil.bool_to_int(age_nin);
        l_flg_migration_n           := sys.diutil.bool_to_int(flg_migration_nin);
        l_total_fam_members_n       := sys.diutil.bool_to_int(total_fam_members_nin);
        l_national_health_number_n  := sys.diutil.bool_to_int(national_health_number_nin);
        l_institution_key_n         := sys.diutil.bool_to_int(institution_key_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_patient_number_n          := sys.diutil.bool_to_int(patient_number_nin);
        l_deceased_motive_n         := sys.diutil.bool_to_int(deceased_motive_nin);
        l_deceased_place_n          := sys.diutil.bool_to_int(deceased_place_nin);
        l_birth_place_n             := sys.diutil.bool_to_int(birth_place_nin);
        l_first_name_n              := sys.diutil.bool_to_int(first_name_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
        l_record_status_n           := sys.diutil.bool_to_int(record_status_nin);
        l_import_code_n             := sys.diutil.bool_to_int(import_code_nin);
    
        UPDATE patient
           SET id_person               = decode(l_id_person_n, 0, id_person_in, nvl(id_person_in, id_person)),
               id_general_pratictioner = decode(l_id_general_pratictioner_n,
                                                0,
                                                id_general_pratictioner_in,
                                                nvl(id_general_pratictioner_in, id_general_pratictioner)),
               id_pat_family           = decode(l_id_pat_family_n,
                                                0,
                                                id_pat_family_in,
                                                nvl(id_pat_family_in, id_pat_family)),
               name                    = decode(l_name_n, 0, name_in, nvl(name_in, name)),
               gender                  = decode(l_gender_n, 0, gender_in, nvl(gender_in, gender)),
               dt_birth                = decode(l_dt_birth_n, 0, dt_birth_in, nvl(dt_birth_in, dt_birth)),
               nick_name               = decode(l_nick_name_n, 0, nick_name_in, nvl(nick_name_in, nick_name)),
               flg_status              = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               dt_deceased             = decode(l_dt_deceased_n, 0, dt_deceased_in, nvl(dt_deceased_in, dt_deceased)),
               adw_last_update         = decode(l_adw_last_update_n,
                                                0,
                                                adw_last_update_in,
                                                nvl(adw_last_update_in, adw_last_update)),
               last_name               = decode(l_last_name_n, 0, last_name_in, nvl(last_name_in, last_name)),
               middle_name             = decode(l_middle_name_n, 0, middle_name_in, nvl(middle_name_in, middle_name)),
               age                     = decode(l_age_n, 0, age_in, nvl(age_in, age)),
               flg_migration           = decode(l_flg_migration_n,
                                                0,
                                                flg_migration_in,
                                                nvl(flg_migration_in, flg_migration)),
               total_fam_members       = decode(l_total_fam_members_n,
                                                0,
                                                total_fam_members_in,
                                                nvl(total_fam_members_in, total_fam_members)),
               national_health_number  = decode(l_national_health_number_n,
                                                0,
                                                national_health_number_in,
                                                nvl(national_health_number_in, national_health_number)),
               institution_key         = decode(l_institution_key_n,
                                                0,
                                                institution_key_in,
                                                nvl(institution_key_in, institution_key)),
               create_user             = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time             = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               update_user             = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time             = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               patient_number          = decode(l_patient_number_n,
                                                0,
                                                patient_number_in,
                                                nvl(patient_number_in, patient_number)),
               deceased_motive         = decode(l_deceased_motive_n,
                                                0,
                                                deceased_motive_in,
                                                nvl(deceased_motive_in, deceased_motive)),
               deceased_place          = decode(l_deceased_place_n,
                                                0,
                                                deceased_place_in,
                                                nvl(deceased_place_in, deceased_place)),
               birth_place             = decode(l_birth_place_n, 0, birth_place_in, nvl(birth_place_in, birth_place)),
               first_name              = decode(l_first_name_n, 0, first_name_in, nvl(first_name_in, first_name)),
               create_institution      = decode(l_create_institution_n,
                                                0,
                                                create_institution_in,
                                                nvl(create_institution_in, create_institution)),
               update_institution      = decode(l_update_institution_n,
                                                0,
                                                update_institution_in,
                                                nvl(update_institution_in, update_institution)),
               record_status           = decode(l_record_status_n,
                                                0,
                                                record_status_in,
                                                nvl(record_status_in, record_status)),
               import_code             = decode(l_import_code_n, 0, import_code_in, nvl(import_code_in, import_code))
         WHERE id_patient = id_patient_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'PAT_BUSINESSKEY_IDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "PAT_BUSINESSKEY_IDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'PATIENT',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PATIENT_NUMBER',
                                                        value_in           => patient_number_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSIF l_name = 'PAT_PRSN_IDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "PAT_PRSN_IDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'PATIENT',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PERSON',
                                                        value_in           => id_person_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PATIENT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    IF l_name = 'PAT_GNRP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_GENERAL_PRATICTIONER',
                                                        value_in           => id_general_pratictioner_in);
                    END IF;
                    IF l_name = 'PAT_PFAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_FAMILY',
                                                        value_in           => id_pat_family_in);
                    END IF;
                    IF l_name = 'PAT_PRSN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PERSON',
                                                        value_in           => id_person_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_patient_in               IN patient.id_patient%TYPE,
        id_person_in                IN patient.id_person%TYPE DEFAULT NULL,
        id_person_nin               IN BOOLEAN := TRUE,
        id_general_pratictioner_in  IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_general_pratictioner_nin IN BOOLEAN := TRUE,
        id_pat_family_in            IN patient.id_pat_family%TYPE DEFAULT NULL,
        id_pat_family_nin           IN BOOLEAN := TRUE,
        name_in                     IN patient.name%TYPE DEFAULT NULL,
        name_nin                    IN BOOLEAN := TRUE,
        gender_in                   IN patient.gender%TYPE DEFAULT NULL,
        gender_nin                  IN BOOLEAN := TRUE,
        dt_birth_in                 IN patient.dt_birth%TYPE DEFAULT NULL,
        dt_birth_nin                IN BOOLEAN := TRUE,
        nick_name_in                IN patient.nick_name%TYPE DEFAULT NULL,
        nick_name_nin               IN BOOLEAN := TRUE,
        flg_status_in               IN patient.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        dt_deceased_in              IN patient.dt_deceased%TYPE DEFAULT NULL,
        dt_deceased_nin             IN BOOLEAN := TRUE,
        adw_last_update_in          IN patient.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin         IN BOOLEAN := TRUE,
        last_name_in                IN patient.last_name%TYPE DEFAULT NULL,
        last_name_nin               IN BOOLEAN := TRUE,
        middle_name_in              IN patient.middle_name%TYPE DEFAULT NULL,
        middle_name_nin             IN BOOLEAN := TRUE,
        age_in                      IN patient.age%TYPE DEFAULT NULL,
        age_nin                     IN BOOLEAN := TRUE,
        flg_migration_in            IN patient.flg_migration%TYPE DEFAULT NULL,
        flg_migration_nin           IN BOOLEAN := TRUE,
        total_fam_members_in        IN patient.total_fam_members%TYPE DEFAULT NULL,
        total_fam_members_nin       IN BOOLEAN := TRUE,
        national_health_number_in   IN patient.national_health_number%TYPE DEFAULT NULL,
        national_health_number_nin  IN BOOLEAN := TRUE,
        institution_key_in          IN patient.institution_key%TYPE DEFAULT NULL,
        institution_key_nin         IN BOOLEAN := TRUE,
        create_user_in              IN patient.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN patient.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        update_user_in              IN patient.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN patient.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        patient_number_in           IN patient.patient_number%TYPE DEFAULT NULL,
        patient_number_nin          IN BOOLEAN := TRUE,
        deceased_motive_in          IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_motive_nin         IN BOOLEAN := TRUE,
        deceased_place_in           IN patient.deceased_place%TYPE DEFAULT NULL,
        deceased_place_nin          IN BOOLEAN := TRUE,
        birth_place_in              IN patient.birth_place%TYPE DEFAULT NULL,
        birth_place_nin             IN BOOLEAN := TRUE,
        first_name_in               IN patient.first_name%TYPE DEFAULT NULL,
        first_name_nin              IN BOOLEAN := TRUE,
        create_institution_in       IN patient.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_institution_in       IN patient.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        record_status_in            IN patient.record_status%TYPE DEFAULT NULL,
        record_status_nin           IN BOOLEAN := TRUE,
        import_code_in              IN patient.import_code%TYPE DEFAULT NULL,
        import_code_nin             IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_patient_in               => id_patient_in,
            id_person_in                => id_person_in,
            id_person_nin               => id_person_nin,
            id_general_pratictioner_in  => id_general_pratictioner_in,
            id_general_pratictioner_nin => id_general_pratictioner_nin,
            id_pat_family_in            => id_pat_family_in,
            id_pat_family_nin           => id_pat_family_nin,
            name_in                     => name_in,
            name_nin                    => name_nin,
            gender_in                   => gender_in,
            gender_nin                  => gender_nin,
            dt_birth_in                 => dt_birth_in,
            dt_birth_nin                => dt_birth_nin,
            nick_name_in                => nick_name_in,
            nick_name_nin               => nick_name_nin,
            flg_status_in               => flg_status_in,
            flg_status_nin              => flg_status_nin,
            dt_deceased_in              => dt_deceased_in,
            dt_deceased_nin             => dt_deceased_nin,
            adw_last_update_in          => adw_last_update_in,
            adw_last_update_nin         => adw_last_update_nin,
            last_name_in                => last_name_in,
            last_name_nin               => last_name_nin,
            middle_name_in              => middle_name_in,
            middle_name_nin             => middle_name_nin,
            age_in                      => age_in,
            age_nin                     => age_nin,
            flg_migration_in            => flg_migration_in,
            flg_migration_nin           => flg_migration_nin,
            total_fam_members_in        => total_fam_members_in,
            total_fam_members_nin       => total_fam_members_nin,
            national_health_number_in   => national_health_number_in,
            national_health_number_nin  => national_health_number_nin,
            institution_key_in          => institution_key_in,
            institution_key_nin         => institution_key_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            patient_number_in           => patient_number_in,
            patient_number_nin          => patient_number_nin,
            deceased_motive_in          => deceased_motive_in,
            deceased_motive_nin         => deceased_motive_nin,
            deceased_place_in           => deceased_place_in,
            deceased_place_nin          => deceased_place_nin,
            birth_place_in              => birth_place_in,
            birth_place_nin             => birth_place_nin,
            first_name_in               => first_name_in,
            first_name_nin              => first_name_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            record_status_in            => record_status_in,
            record_status_nin           => record_status_nin,
            import_code_in              => import_code_in,
            import_code_nin             => import_code_nin,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_person_in                IN patient.id_person%TYPE DEFAULT NULL,
        id_person_nin               IN BOOLEAN := TRUE,
        id_general_pratictioner_in  IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_general_pratictioner_nin IN BOOLEAN := TRUE,
        id_pat_family_in            IN patient.id_pat_family%TYPE DEFAULT NULL,
        id_pat_family_nin           IN BOOLEAN := TRUE,
        name_in                     IN patient.name%TYPE DEFAULT NULL,
        name_nin                    IN BOOLEAN := TRUE,
        gender_in                   IN patient.gender%TYPE DEFAULT NULL,
        gender_nin                  IN BOOLEAN := TRUE,
        dt_birth_in                 IN patient.dt_birth%TYPE DEFAULT NULL,
        dt_birth_nin                IN BOOLEAN := TRUE,
        nick_name_in                IN patient.nick_name%TYPE DEFAULT NULL,
        nick_name_nin               IN BOOLEAN := TRUE,
        flg_status_in               IN patient.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        dt_deceased_in              IN patient.dt_deceased%TYPE DEFAULT NULL,
        dt_deceased_nin             IN BOOLEAN := TRUE,
        adw_last_update_in          IN patient.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin         IN BOOLEAN := TRUE,
        last_name_in                IN patient.last_name%TYPE DEFAULT NULL,
        last_name_nin               IN BOOLEAN := TRUE,
        middle_name_in              IN patient.middle_name%TYPE DEFAULT NULL,
        middle_name_nin             IN BOOLEAN := TRUE,
        age_in                      IN patient.age%TYPE DEFAULT NULL,
        age_nin                     IN BOOLEAN := TRUE,
        flg_migration_in            IN patient.flg_migration%TYPE DEFAULT NULL,
        flg_migration_nin           IN BOOLEAN := TRUE,
        total_fam_members_in        IN patient.total_fam_members%TYPE DEFAULT NULL,
        total_fam_members_nin       IN BOOLEAN := TRUE,
        national_health_number_in   IN patient.national_health_number%TYPE DEFAULT NULL,
        national_health_number_nin  IN BOOLEAN := TRUE,
        institution_key_in          IN patient.institution_key%TYPE DEFAULT NULL,
        institution_key_nin         IN BOOLEAN := TRUE,
        create_user_in              IN patient.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN patient.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        update_user_in              IN patient.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN patient.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        patient_number_in           IN patient.patient_number%TYPE DEFAULT NULL,
        patient_number_nin          IN BOOLEAN := TRUE,
        deceased_motive_in          IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_motive_nin         IN BOOLEAN := TRUE,
        deceased_place_in           IN patient.deceased_place%TYPE DEFAULT NULL,
        deceased_place_nin          IN BOOLEAN := TRUE,
        birth_place_in              IN patient.birth_place%TYPE DEFAULT NULL,
        birth_place_nin             IN BOOLEAN := TRUE,
        first_name_in               IN patient.first_name%TYPE DEFAULT NULL,
        first_name_nin              IN BOOLEAN := TRUE,
        create_institution_in       IN patient.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_institution_in       IN patient.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        record_status_in            IN patient.record_status%TYPE DEFAULT NULL,
        record_status_nin           IN BOOLEAN := TRUE,
        import_code_in              IN patient.import_code%TYPE DEFAULT NULL,
        import_code_nin             IN BOOLEAN := TRUE,
        where_in                    VARCHAR2 DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_sql                       VARCHAR2(32767);
        l_rows_out                  table_varchar;
        l_id_person_n               NUMBER(1);
        l_id_general_pratictioner_n NUMBER(1);
        l_id_pat_family_n           NUMBER(1);
        l_name_n                    NUMBER(1);
        l_gender_n                  NUMBER(1);
        l_dt_birth_n                NUMBER(1);
        l_nick_name_n               NUMBER(1);
        l_flg_status_n              NUMBER(1);
        l_dt_deceased_n             NUMBER(1);
        l_adw_last_update_n         NUMBER(1);
        l_last_name_n               NUMBER(1);
        l_middle_name_n             NUMBER(1);
        l_age_n                     NUMBER(1);
        l_flg_migration_n           NUMBER(1);
        l_total_fam_members_n       NUMBER(1);
        l_national_health_number_n  NUMBER(1);
        l_institution_key_n         NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_patient_number_n          NUMBER(1);
        l_deceased_motive_n         NUMBER(1);
        l_deceased_place_n          NUMBER(1);
        l_birth_place_n             NUMBER(1);
        l_first_name_n              NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_institution_n      NUMBER(1);
        l_record_status_n           NUMBER(1);
        l_import_code_n             NUMBER(1);
        id_patient_in               patient.id_patient%TYPE;
    BEGIN
    
        l_id_person_n               := sys.diutil.bool_to_int(id_person_nin);
        l_id_general_pratictioner_n := sys.diutil.bool_to_int(id_general_pratictioner_nin);
        l_id_pat_family_n           := sys.diutil.bool_to_int(id_pat_family_nin);
        l_name_n                    := sys.diutil.bool_to_int(name_nin);
        l_gender_n                  := sys.diutil.bool_to_int(gender_nin);
        l_dt_birth_n                := sys.diutil.bool_to_int(dt_birth_nin);
        l_nick_name_n               := sys.diutil.bool_to_int(nick_name_nin);
        l_flg_status_n              := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_deceased_n             := sys.diutil.bool_to_int(dt_deceased_nin);
        l_adw_last_update_n         := sys.diutil.bool_to_int(adw_last_update_nin);
        l_last_name_n               := sys.diutil.bool_to_int(last_name_nin);
        l_middle_name_n             := sys.diutil.bool_to_int(middle_name_nin);
        l_age_n                     := sys.diutil.bool_to_int(age_nin);
        l_flg_migration_n           := sys.diutil.bool_to_int(flg_migration_nin);
        l_total_fam_members_n       := sys.diutil.bool_to_int(total_fam_members_nin);
        l_national_health_number_n  := sys.diutil.bool_to_int(national_health_number_nin);
        l_institution_key_n         := sys.diutil.bool_to_int(institution_key_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_patient_number_n          := sys.diutil.bool_to_int(patient_number_nin);
        l_deceased_motive_n         := sys.diutil.bool_to_int(deceased_motive_nin);
        l_deceased_place_n          := sys.diutil.bool_to_int(deceased_place_nin);
        l_birth_place_n             := sys.diutil.bool_to_int(birth_place_nin);
        l_first_name_n              := sys.diutil.bool_to_int(first_name_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
        l_record_status_n           := sys.diutil.bool_to_int(record_status_nin);
        l_import_code_n             := sys.diutil.bool_to_int(import_code_nin);
    
        l_sql := 'UPDATE PATIENT SET ' || ' ID_PERSON = decode (' || l_id_person_n ||
                 ',0,:id_person_in, NVL (:id_person_in, ID_PERSON)) ' || ',' || ' ID_GENERAL_PRATICTIONER = decode (' ||
                 l_id_general_pratictioner_n ||
                 ',0,:id_general_pratictioner_in, NVL (:id_general_pratictioner_in, ID_GENERAL_PRATICTIONER)) ' || ',' ||
                 ' ID_PAT_FAMILY = decode (' || l_id_pat_family_n ||
                 ',0,:id_pat_family_in, NVL (:id_pat_family_in, ID_PAT_FAMILY)) ' || ',' || ' NAME = decode (' ||
                 l_name_n || ',0,:name_in, NVL (:name_in, NAME)) ' || ',' || ' GENDER = decode (' || l_gender_n ||
                 ',0,:gender_in, NVL (:gender_in, GENDER)) ' || ',' || ' DT_BIRTH = decode (' || l_dt_birth_n ||
                 ',0,:dt_birth_in, NVL (:dt_birth_in, DT_BIRTH)) ' || ',' || ' NICK_NAME = decode (' || l_nick_name_n ||
                 ',0,:nick_name_in, NVL (:nick_name_in, NICK_NAME)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' DT_DECEASED = decode (' || l_dt_deceased_n ||
                 ',0,:dt_deceased_in, NVL (:dt_deceased_in, DT_DECEASED)) ' || ',' || ' ADW_LAST_UPDATE = decode (' ||
                 l_adw_last_update_n || ',0,:adw_last_update_in, NVL (:adw_last_update_in, ADW_LAST_UPDATE)) ' || ',' ||
                 ' LAST_NAME = decode (' || l_last_name_n || ',0,:last_name_in, NVL (:last_name_in, LAST_NAME)) ' || ',' ||
                 ' MIDDLE_NAME = decode (' || l_middle_name_n ||
                 ',0,:middle_name_in, NVL (:middle_name_in, MIDDLE_NAME)) ' || ',' || ' AGE = decode (' || l_age_n ||
                 ',0,:age_in, NVL (:age_in, AGE)) ' || ',' || ' FLG_MIGRATION = decode (' || l_flg_migration_n ||
                 ',0,:flg_migration_in, NVL (:flg_migration_in, FLG_MIGRATION)) ' || ',' ||
                 ' TOTAL_FAM_MEMBERS = decode (' || l_total_fam_members_n ||
                 ',0,:total_fam_members_in, NVL (:total_fam_members_in, TOTAL_FAM_MEMBERS)) ' || ',' ||
                 ' NATIONAL_HEALTH_NUMBER = decode (' || l_national_health_number_n ||
                 ',0,:national_health_number_in, NVL (:national_health_number_in, NATIONAL_HEALTH_NUMBER)) ' || ',' ||
                 ' INSTITUTION_KEY = decode (' || l_institution_key_n ||
                 ',0,:institution_key_in, NVL (:institution_key_in, INSTITUTION_KEY)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' PATIENT_NUMBER = decode (' || l_patient_number_n ||
                 ',0,:patient_number_in, NVL (:patient_number_in, PATIENT_NUMBER)) ' || ',' ||
                 ' DECEASED_MOTIVE = decode (' || l_deceased_motive_n ||
                 ',0,:deceased_motive_in, NVL (:deceased_motive_in, DECEASED_MOTIVE)) ' || ',' ||
                 ' DECEASED_PLACE = decode (' || l_deceased_place_n ||
                 ',0,:deceased_place_in, NVL (:deceased_place_in, DECEASED_PLACE)) ' || ',' ||
                 ' BIRTH_PLACE = decode (' || l_birth_place_n ||
                 ',0,:birth_place_in, NVL (:birth_place_in, BIRTH_PLACE)) ' || ',' || ' FIRST_NAME = decode (' ||
                 l_first_name_n || ',0,:first_name_in, NVL (:first_name_in, FIRST_NAME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' RECORD_STATUS = decode (' || l_record_status_n ||
                 ',0,:record_status_in, NVL (:record_status_in, RECORD_STATUS)) ' || ',' || ' IMPORT_CODE = decode (' ||
                 l_import_code_n || ',0,:import_code_in, NVL (:import_code_in, IMPORT_CODE)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_person_in, id_general_pratictioner_in, id_pat_family_in, name_in, gender_in, dt_birth_in, nick_name_in, flg_status_in, dt_deceased_in, adw_last_update_in, last_name_in, middle_name_in, age_in, flg_migration_in, total_fam_members_in, national_health_number_in, institution_key_in, create_user_in, create_time_in, update_user_in, update_time_in, patient_number_in, deceased_motive_in, deceased_place_in, birth_place_in, first_name_in, create_institution_in, update_institution_in, record_status_in, import_code_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'PAT_BUSINESSKEY_IDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "PAT_BUSINESSKEY_IDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'PATIENT',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PATIENT_NUMBER',
                                                        value_in           => patient_number_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSIF l_name = 'PAT_PRSN_IDX'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "PAT_PRSN_IDX"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'PATIENT',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PERSON',
                                                        value_in           => id_person_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PATIENT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    IF l_name = 'PAT_GNRP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_GENERAL_PRATICTIONER',
                                                        value_in           => id_general_pratictioner_in);
                    END IF;
                    IF l_name = 'PAT_PFAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_FAMILY',
                                                        value_in           => id_pat_family_in);
                    END IF;
                    IF l_name = 'PAT_PRSN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PERSON',
                                                        value_in           => id_person_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_person_in                IN patient.id_person%TYPE DEFAULT NULL,
        id_person_nin               IN BOOLEAN := TRUE,
        id_general_pratictioner_in  IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_general_pratictioner_nin IN BOOLEAN := TRUE,
        id_pat_family_in            IN patient.id_pat_family%TYPE DEFAULT NULL,
        id_pat_family_nin           IN BOOLEAN := TRUE,
        name_in                     IN patient.name%TYPE DEFAULT NULL,
        name_nin                    IN BOOLEAN := TRUE,
        gender_in                   IN patient.gender%TYPE DEFAULT NULL,
        gender_nin                  IN BOOLEAN := TRUE,
        dt_birth_in                 IN patient.dt_birth%TYPE DEFAULT NULL,
        dt_birth_nin                IN BOOLEAN := TRUE,
        nick_name_in                IN patient.nick_name%TYPE DEFAULT NULL,
        nick_name_nin               IN BOOLEAN := TRUE,
        flg_status_in               IN patient.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        dt_deceased_in              IN patient.dt_deceased%TYPE DEFAULT NULL,
        dt_deceased_nin             IN BOOLEAN := TRUE,
        adw_last_update_in          IN patient.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin         IN BOOLEAN := TRUE,
        last_name_in                IN patient.last_name%TYPE DEFAULT NULL,
        last_name_nin               IN BOOLEAN := TRUE,
        middle_name_in              IN patient.middle_name%TYPE DEFAULT NULL,
        middle_name_nin             IN BOOLEAN := TRUE,
        age_in                      IN patient.age%TYPE DEFAULT NULL,
        age_nin                     IN BOOLEAN := TRUE,
        flg_migration_in            IN patient.flg_migration%TYPE DEFAULT NULL,
        flg_migration_nin           IN BOOLEAN := TRUE,
        total_fam_members_in        IN patient.total_fam_members%TYPE DEFAULT NULL,
        total_fam_members_nin       IN BOOLEAN := TRUE,
        national_health_number_in   IN patient.national_health_number%TYPE DEFAULT NULL,
        national_health_number_nin  IN BOOLEAN := TRUE,
        institution_key_in          IN patient.institution_key%TYPE DEFAULT NULL,
        institution_key_nin         IN BOOLEAN := TRUE,
        create_user_in              IN patient.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN patient.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        update_user_in              IN patient.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN patient.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        patient_number_in           IN patient.patient_number%TYPE DEFAULT NULL,
        patient_number_nin          IN BOOLEAN := TRUE,
        deceased_motive_in          IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_motive_nin         IN BOOLEAN := TRUE,
        deceased_place_in           IN patient.deceased_place%TYPE DEFAULT NULL,
        deceased_place_nin          IN BOOLEAN := TRUE,
        birth_place_in              IN patient.birth_place%TYPE DEFAULT NULL,
        birth_place_nin             IN BOOLEAN := TRUE,
        first_name_in               IN patient.first_name%TYPE DEFAULT NULL,
        first_name_nin              IN BOOLEAN := TRUE,
        create_institution_in       IN patient.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_institution_in       IN patient.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        record_status_in            IN patient.record_status%TYPE DEFAULT NULL,
        record_status_nin           IN BOOLEAN := TRUE,
        import_code_in              IN patient.import_code%TYPE DEFAULT NULL,
        import_code_nin             IN BOOLEAN := TRUE,
        where_in                    VARCHAR2 DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_person_in                => id_person_in,
            id_person_nin               => id_person_nin,
            id_general_pratictioner_in  => id_general_pratictioner_in,
            id_general_pratictioner_nin => id_general_pratictioner_nin,
            id_pat_family_in            => id_pat_family_in,
            id_pat_family_nin           => id_pat_family_nin,
            name_in                     => name_in,
            name_nin                    => name_nin,
            gender_in                   => gender_in,
            gender_nin                  => gender_nin,
            dt_birth_in                 => dt_birth_in,
            dt_birth_nin                => dt_birth_nin,
            nick_name_in                => nick_name_in,
            nick_name_nin               => nick_name_nin,
            flg_status_in               => flg_status_in,
            flg_status_nin              => flg_status_nin,
            dt_deceased_in              => dt_deceased_in,
            dt_deceased_nin             => dt_deceased_nin,
            adw_last_update_in          => adw_last_update_in,
            adw_last_update_nin         => adw_last_update_nin,
            last_name_in                => last_name_in,
            last_name_nin               => last_name_nin,
            middle_name_in              => middle_name_in,
            middle_name_nin             => middle_name_nin,
            age_in                      => age_in,
            age_nin                     => age_nin,
            flg_migration_in            => flg_migration_in,
            flg_migration_nin           => flg_migration_nin,
            total_fam_members_in        => total_fam_members_in,
            total_fam_members_nin       => total_fam_members_nin,
            national_health_number_in   => national_health_number_in,
            national_health_number_nin  => national_health_number_nin,
            institution_key_in          => institution_key_in,
            institution_key_nin         => institution_key_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            patient_number_in           => patient_number_in,
            patient_number_nin          => patient_number_nin,
            deceased_motive_in          => deceased_motive_in,
            deceased_motive_nin         => deceased_motive_nin,
            deceased_place_in           => deceased_place_in,
            deceased_place_nin          => deceased_place_nin,
            birth_place_in              => birth_place_in,
            birth_place_nin             => birth_place_nin,
            first_name_in               => first_name_in,
            first_name_nin              => first_name_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            record_status_in            => record_status_in,
            record_status_nin           => record_status_nin,
            import_code_in              => import_code_in,
            import_code_nin             => import_code_nin,
            where_in                    => where_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN patient%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_patient_in              => rec_in.id_patient,
            id_person_in               => rec_in.id_person,
            id_general_pratictioner_in => rec_in.id_general_pratictioner,
            id_pat_family_in           => rec_in.id_pat_family,
            name_in                    => rec_in.name,
            gender_in                  => rec_in.gender,
            dt_birth_in                => rec_in.dt_birth,
            nick_name_in               => rec_in.nick_name,
            flg_status_in              => rec_in.flg_status,
            dt_deceased_in             => rec_in.dt_deceased,
            adw_last_update_in         => rec_in.adw_last_update,
            last_name_in               => rec_in.last_name,
            middle_name_in             => rec_in.middle_name,
            age_in                     => rec_in.age,
            flg_migration_in           => rec_in.flg_migration,
            total_fam_members_in       => rec_in.total_fam_members,
            national_health_number_in  => rec_in.national_health_number,
            institution_key_in         => rec_in.institution_key,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            patient_number_in          => rec_in.patient_number,
            deceased_motive_in         => rec_in.deceased_motive,
            deceased_place_in          => rec_in.deceased_place,
            birth_place_in             => rec_in.birth_place,
            first_name_in              => rec_in.first_name,
            create_institution_in      => rec_in.create_institution,
            update_institution_in      => rec_in.update_institution,
            record_status_in           => rec_in.record_status,
            import_code_in             => rec_in.import_code
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN patient%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_patient_in              => rec_in.id_patient,
            id_person_in               => rec_in.id_person,
            id_general_pratictioner_in => rec_in.id_general_pratictioner,
            id_pat_family_in           => rec_in.id_pat_family,
            name_in                    => rec_in.name,
            gender_in                  => rec_in.gender,
            dt_birth_in                => rec_in.dt_birth,
            nick_name_in               => rec_in.nick_name,
            flg_status_in              => rec_in.flg_status,
            dt_deceased_in             => rec_in.dt_deceased,
            adw_last_update_in         => rec_in.adw_last_update,
            last_name_in               => rec_in.last_name,
            middle_name_in             => rec_in.middle_name,
            age_in                     => rec_in.age,
            flg_migration_in           => rec_in.flg_migration,
            total_fam_members_in       => rec_in.total_fam_members,
            national_health_number_in  => rec_in.national_health_number,
            institution_key_in         => rec_in.institution_key,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            patient_number_in          => rec_in.patient_number,
            deceased_motive_in         => rec_in.deceased_motive,
            deceased_place_in          => rec_in.deceased_place,
            birth_place_in             => rec_in.birth_place,
            first_name_in              => rec_in.first_name,
            create_institution_in      => rec_in.create_institution,
            update_institution_in      => rec_in.update_institution,
            record_status_in           => rec_in.record_status,
            import_code_in             => rec_in.import_code
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_patient_in              IN patient.id_patient%TYPE,
        id_person_in               IN patient.id_person%TYPE DEFAULT NULL,
        id_general_pratictioner_in IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_pat_family_in           IN patient.id_pat_family%TYPE DEFAULT NULL,
        name_in                    IN patient.name%TYPE DEFAULT NULL,
        gender_in                  IN patient.gender%TYPE DEFAULT NULL,
        dt_birth_in                IN patient.dt_birth%TYPE DEFAULT NULL,
        nick_name_in               IN patient.nick_name%TYPE DEFAULT NULL,
        flg_status_in              IN patient.flg_status%TYPE DEFAULT NULL,
        dt_deceased_in             IN patient.dt_deceased%TYPE DEFAULT NULL,
        adw_last_update_in         IN patient.adw_last_update%TYPE DEFAULT NULL,
        last_name_in               IN patient.last_name%TYPE DEFAULT NULL,
        middle_name_in             IN patient.middle_name%TYPE DEFAULT NULL,
        age_in                     IN patient.age%TYPE DEFAULT NULL,
        flg_migration_in           IN patient.flg_migration%TYPE DEFAULT NULL,
        total_fam_members_in       IN patient.total_fam_members%TYPE DEFAULT NULL,
        national_health_number_in  IN patient.national_health_number%TYPE DEFAULT NULL,
        institution_key_in         IN patient.institution_key%TYPE DEFAULT NULL,
        create_user_in             IN patient.create_user%TYPE DEFAULT NULL,
        create_time_in             IN patient.create_time%TYPE DEFAULT NULL,
        update_user_in             IN patient.update_user%TYPE DEFAULT NULL,
        update_time_in             IN patient.update_time%TYPE DEFAULT NULL,
        patient_number_in          IN patient.patient_number%TYPE DEFAULT NULL,
        deceased_motive_in         IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_place_in          IN patient.deceased_place%TYPE DEFAULT NULL,
        birth_place_in             IN patient.birth_place%TYPE DEFAULT NULL,
        first_name_in              IN patient.first_name%TYPE DEFAULT NULL,
        create_institution_in      IN patient.create_institution%TYPE DEFAULT NULL,
        update_institution_in      IN patient.update_institution%TYPE DEFAULT NULL,
        record_status_in           IN patient.record_status%TYPE DEFAULT NULL,
        import_code_in             IN patient.import_code%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        upd(id_patient_in              => id_patient_in,
            id_person_in               => id_person_in,
            id_general_pratictioner_in => id_general_pratictioner_in,
            id_pat_family_in           => id_pat_family_in,
            name_in                    => name_in,
            gender_in                  => gender_in,
            dt_birth_in                => dt_birth_in,
            nick_name_in               => nick_name_in,
            flg_status_in              => flg_status_in,
            dt_deceased_in             => dt_deceased_in,
            adw_last_update_in         => adw_last_update_in,
            last_name_in               => last_name_in,
            middle_name_in             => middle_name_in,
            age_in                     => age_in,
            flg_migration_in           => flg_migration_in,
            total_fam_members_in       => total_fam_members_in,
            national_health_number_in  => national_health_number_in,
            institution_key_in         => institution_key_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            patient_number_in          => patient_number_in,
            deceased_motive_in         => deceased_motive_in,
            deceased_place_in          => deceased_place_in,
            birth_place_in             => birth_place_in,
            first_name_in              => first_name_in,
            create_institution_in      => create_institution_in,
            update_institution_in      => update_institution_in,
            record_status_in           => record_status_in,
            import_code_in             => import_code_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_patient_in              => id_patient_in,
                id_person_in               => id_person_in,
                id_general_pratictioner_in => id_general_pratictioner_in,
                id_pat_family_in           => id_pat_family_in,
                name_in                    => name_in,
                gender_in                  => gender_in,
                dt_birth_in                => dt_birth_in,
                nick_name_in               => nick_name_in,
                flg_status_in              => flg_status_in,
                dt_deceased_in             => dt_deceased_in,
                adw_last_update_in         => adw_last_update_in,
                last_name_in               => last_name_in,
                middle_name_in             => middle_name_in,
                age_in                     => age_in,
                flg_migration_in           => flg_migration_in,
                total_fam_members_in       => total_fam_members_in,
                national_health_number_in  => national_health_number_in,
                institution_key_in         => institution_key_in,
                create_user_in             => create_user_in,
                create_time_in             => create_time_in,
                update_user_in             => update_user_in,
                update_time_in             => update_time_in,
                patient_number_in          => patient_number_in,
                deceased_motive_in         => deceased_motive_in,
                deceased_place_in          => deceased_place_in,
                birth_place_in             => birth_place_in,
                first_name_in              => first_name_in,
                create_institution_in      => create_institution_in,
                update_institution_in      => update_institution_in,
                record_status_in           => record_status_in,
                import_code_in             => import_code_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_patient_in              IN patient.id_patient%TYPE,
        id_person_in               IN patient.id_person%TYPE DEFAULT NULL,
        id_general_pratictioner_in IN patient.id_general_pratictioner%TYPE DEFAULT NULL,
        id_pat_family_in           IN patient.id_pat_family%TYPE DEFAULT NULL,
        name_in                    IN patient.name%TYPE DEFAULT NULL,
        gender_in                  IN patient.gender%TYPE DEFAULT NULL,
        dt_birth_in                IN patient.dt_birth%TYPE DEFAULT NULL,
        nick_name_in               IN patient.nick_name%TYPE DEFAULT NULL,
        flg_status_in              IN patient.flg_status%TYPE DEFAULT NULL,
        dt_deceased_in             IN patient.dt_deceased%TYPE DEFAULT NULL,
        adw_last_update_in         IN patient.adw_last_update%TYPE DEFAULT NULL,
        last_name_in               IN patient.last_name%TYPE DEFAULT NULL,
        middle_name_in             IN patient.middle_name%TYPE DEFAULT NULL,
        age_in                     IN patient.age%TYPE DEFAULT NULL,
        flg_migration_in           IN patient.flg_migration%TYPE DEFAULT NULL,
        total_fam_members_in       IN patient.total_fam_members%TYPE DEFAULT NULL,
        national_health_number_in  IN patient.national_health_number%TYPE DEFAULT NULL,
        institution_key_in         IN patient.institution_key%TYPE DEFAULT NULL,
        create_user_in             IN patient.create_user%TYPE DEFAULT NULL,
        create_time_in             IN patient.create_time%TYPE DEFAULT NULL,
        update_user_in             IN patient.update_user%TYPE DEFAULT NULL,
        update_time_in             IN patient.update_time%TYPE DEFAULT NULL,
        patient_number_in          IN patient.patient_number%TYPE DEFAULT NULL,
        deceased_motive_in         IN patient.deceased_motive%TYPE DEFAULT NULL,
        deceased_place_in          IN patient.deceased_place%TYPE DEFAULT NULL,
        birth_place_in             IN patient.birth_place%TYPE DEFAULT NULL,
        first_name_in              IN patient.first_name%TYPE DEFAULT NULL,
        create_institution_in      IN patient.create_institution%TYPE DEFAULT NULL,
        update_institution_in      IN patient.update_institution%TYPE DEFAULT NULL,
        record_status_in           IN patient.record_status%TYPE DEFAULT NULL,
        import_code_in             IN patient.import_code%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_patient_in,
                id_person_in,
                id_general_pratictioner_in,
                id_pat_family_in,
                name_in,
                gender_in,
                dt_birth_in,
                nick_name_in,
                flg_status_in,
                dt_deceased_in,
                adw_last_update_in,
                last_name_in,
                middle_name_in,
                age_in,
                flg_migration_in,
                total_fam_members_in,
                national_health_number_in,
                institution_key_in,
                create_user_in,
                create_time_in,
                update_user_in,
                update_time_in,
                patient_number_in,
                deceased_motive_in,
                deceased_place_in,
                birth_place_in,
                first_name_in,
                create_institution_in,
                update_institution_in,
                record_status_in,
                import_code_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN patient_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_patient              id_patient_cc;
        l_id_person               id_person_cc;
        l_id_general_pratictioner id_general_pratictioner_cc;
        l_id_pat_family           id_pat_family_cc;
        l_name                    name_cc;
        l_gender                  gender_cc;
        l_dt_birth                dt_birth_cc;
        l_nick_name               nick_name_cc;
        l_flg_status              flg_status_cc;
        l_dt_deceased             dt_deceased_cc;
        l_adw_last_update         adw_last_update_cc;
        l_last_name               last_name_cc;
        l_middle_name             middle_name_cc;
        l_age                     age_cc;
        l_flg_migration           flg_migration_cc;
        l_total_fam_members       total_fam_members_cc;
        l_national_health_number  national_health_number_cc;
        l_institution_key         institution_key_cc;
        l_create_user             create_user_cc;
        l_create_time             create_time_cc;
        l_update_user             update_user_cc;
        l_update_time             update_time_cc;
        l_patient_number          patient_number_cc;
        l_deceased_motive         deceased_motive_cc;
        l_deceased_place          deceased_place_cc;
        l_birth_place             birth_place_cc;
        l_first_name              first_name_cc;
        l_create_institution      create_institution_cc;
        l_update_institution      update_institution_cc;
        l_record_status           record_status_cc;
        l_import_code             import_code_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_patient(i) := col_in(i).id_patient;
            l_id_person(i) := col_in(i).id_person;
            l_id_general_pratictioner(i) := col_in(i).id_general_pratictioner;
            l_id_pat_family(i) := col_in(i).id_pat_family;
            l_name(i) := col_in(i).name;
            l_gender(i) := col_in(i).gender;
            l_dt_birth(i) := col_in(i).dt_birth;
            l_nick_name(i) := col_in(i).nick_name;
            l_flg_status(i) := col_in(i).flg_status;
            l_dt_deceased(i) := col_in(i).dt_deceased;
            l_adw_last_update(i) := col_in(i).adw_last_update;
            l_last_name(i) := col_in(i).last_name;
            l_middle_name(i) := col_in(i).middle_name;
            l_age(i) := col_in(i).age;
            l_flg_migration(i) := col_in(i).flg_migration;
            l_total_fam_members(i) := col_in(i).total_fam_members;
            l_national_health_number(i) := col_in(i).national_health_number;
            l_institution_key(i) := col_in(i).institution_key;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_patient_number(i) := col_in(i).patient_number;
            l_deceased_motive(i) := col_in(i).deceased_motive;
            l_deceased_place(i) := col_in(i).deceased_place;
            l_birth_place(i) := col_in(i).birth_place;
            l_first_name(i) := col_in(i).first_name;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_institution(i) := col_in(i).update_institution;
            l_record_status(i) := col_in(i).record_status;
            l_import_code(i) := col_in(i).import_code;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE patient
                   SET id_person               = nvl(l_id_person(i), id_person),
                       id_general_pratictioner = nvl(l_id_general_pratictioner(i), id_general_pratictioner),
                       id_pat_family           = nvl(l_id_pat_family(i), id_pat_family),
                       name                    = nvl(l_name(i), name),
                       gender                  = nvl(l_gender(i), gender),
                       dt_birth                = nvl(l_dt_birth(i), dt_birth),
                       nick_name               = nvl(l_nick_name(i), nick_name),
                       flg_status              = nvl(l_flg_status(i), flg_status),
                       dt_deceased             = nvl(l_dt_deceased(i), dt_deceased),
                       adw_last_update         = nvl(l_adw_last_update(i), adw_last_update),
                       last_name               = nvl(l_last_name(i), last_name),
                       middle_name             = nvl(l_middle_name(i), middle_name),
                       age                     = nvl(l_age(i), age),
                       flg_migration           = nvl(l_flg_migration(i), flg_migration),
                       total_fam_members       = nvl(l_total_fam_members(i), total_fam_members),
                       national_health_number  = nvl(l_national_health_number(i), national_health_number),
                       institution_key         = nvl(l_institution_key(i), institution_key),
                       create_user             = nvl(l_create_user(i), create_user),
                       create_time             = nvl(l_create_time(i), create_time),
                       update_user             = nvl(l_update_user(i), update_user),
                       update_time             = nvl(l_update_time(i), update_time),
                       patient_number          = nvl(l_patient_number(i), patient_number),
                       deceased_motive         = nvl(l_deceased_motive(i), deceased_motive),
                       deceased_place          = nvl(l_deceased_place(i), deceased_place),
                       birth_place             = nvl(l_birth_place(i), birth_place),
                       first_name              = nvl(l_first_name(i), first_name),
                       create_institution      = nvl(l_create_institution(i), create_institution),
                       update_institution      = nvl(l_update_institution(i), update_institution),
                       record_status           = nvl(l_record_status(i), record_status),
                       import_code             = nvl(l_import_code(i), import_code)
                 WHERE id_patient = l_id_patient(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE patient
                   SET id_person               = l_id_person(i),
                       id_general_pratictioner = l_id_general_pratictioner(i),
                       id_pat_family           = l_id_pat_family(i),
                       name                    = l_name(i),
                       gender                  = l_gender(i),
                       dt_birth                = l_dt_birth(i),
                       nick_name               = l_nick_name(i),
                       flg_status              = l_flg_status(i),
                       dt_deceased             = l_dt_deceased(i),
                       adw_last_update         = l_adw_last_update(i),
                       last_name               = l_last_name(i),
                       middle_name             = l_middle_name(i),
                       age                     = l_age(i),
                       flg_migration           = l_flg_migration(i),
                       total_fam_members       = l_total_fam_members(i),
                       national_health_number  = l_national_health_number(i),
                       institution_key         = l_institution_key(i),
                       create_user             = l_create_user(i),
                       create_time             = l_create_time(i),
                       update_user             = l_update_user(i),
                       update_time             = l_update_time(i),
                       patient_number          = l_patient_number(i),
                       deceased_motive         = l_deceased_motive(i),
                       deceased_place          = l_deceased_place(i),
                       birth_place             = l_birth_place(i),
                       first_name              = l_first_name(i),
                       create_institution      = l_create_institution(i),
                       update_institution      = l_update_institution(i),
                       record_status           = l_record_status(i),
                       import_code             = l_import_code(i)
                 WHERE id_patient = l_id_patient(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN patient_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PATIENT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PATIENT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PATIENT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PATIENT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_patient_in   IN patient.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM patient
         WHERE id_patient = id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_patient_in   IN patient.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PATIENT
    PROCEDURE del_id_patient
    (
        id_patient_in   IN patient.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM patient
         WHERE id_patient = id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_patient;

    -- Delete all rows for primary key column ID_PATIENT
    PROCEDURE del_id_patient
    (
        id_patient_in   IN patient.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_patient(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_patient;

    -- Delete for unique value of PAT_BUSINESSKEY_IDX
    PROCEDURE del_pat_businesskey_idx
    (
        patient_number_in IN patient.patient_number%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM patient
         WHERE patient_number = patient_number_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pat_businesskey_idx;
    -- Delete for unique value of PAT_PRSN_IDX
    PROCEDURE del_pat_prsn_idx
    (
        id_person_in    IN patient.id_person%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM patient
         WHERE id_person = id_person_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pat_prsn_idx;

    -- Delete for unique value of PAT_BUSINESSKEY_IDX
    PROCEDURE del_pat_businesskey_idx
    (
        patient_number_in IN patient.patient_number%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pat_businesskey_idx(patient_number_in => patient_number_in,
                                handle_error_in   => handle_error_in,
                                rows_out          => rows_out);
    END del_pat_businesskey_idx;
    -- Delete for unique value of PAT_PRSN_IDX
    PROCEDURE del_pat_prsn_idx
    (
        id_person_in    IN patient.id_person%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pat_prsn_idx(id_person_in => id_person_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pat_prsn_idx;

    PROCEDURE del_pat_gnrp_fk
    (
        id_general_pratictioner_in IN patient.id_general_pratictioner%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM patient
         WHERE id_general_pratictioner = del_pat_gnrp_fk.id_general_pratictioner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pat_gnrp_fk;

    PROCEDURE del_pat_gnrp_fk
    (
        id_general_pratictioner_in IN patient.id_general_pratictioner%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pat_gnrp_fk(id_general_pratictioner_in => id_general_pratictioner_in,
                        handle_error_in            => handle_error_in,
                        rows_out                   => rows_out);
    END del_pat_gnrp_fk;

    PROCEDURE del_pat_pfam_fk
    (
        id_pat_family_in IN patient.id_pat_family%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM patient
         WHERE id_pat_family = del_pat_pfam_fk.id_pat_family_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pat_pfam_fk;

    PROCEDURE del_pat_pfam_fk
    (
        id_pat_family_in IN patient.id_pat_family%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pat_pfam_fk(id_pat_family_in => id_pat_family_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pat_pfam_fk;

    PROCEDURE del_pat_prsn_fk
    (
        id_person_in    IN patient.id_person%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM patient
         WHERE id_person = del_pat_prsn_fk.id_person_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pat_prsn_fk;

    PROCEDURE del_pat_prsn_fk
    (
        id_person_in    IN patient.id_person%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pat_prsn_fk(id_person_in => id_person_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pat_prsn_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PATIENT';
        ELSE
            RETURN 'DELETE FROM PATIENT WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(patient_inout IN OUT patient%ROWTYPE) IS
    BEGIN
        patient_inout.id_patient              := NULL;
        patient_inout.id_person               := NULL;
        patient_inout.id_general_pratictioner := NULL;
        patient_inout.id_pat_family           := NULL;
        patient_inout.name                    := NULL;
        patient_inout.gender                  := NULL;
        patient_inout.dt_birth                := NULL;
        patient_inout.nick_name               := NULL;
        patient_inout.flg_status              := NULL;
        patient_inout.dt_deceased             := NULL;
        patient_inout.adw_last_update         := NULL;
        patient_inout.last_name               := NULL;
        patient_inout.middle_name             := NULL;
        patient_inout.age                     := NULL;
        patient_inout.flg_migration           := 'A';
        patient_inout.total_fam_members       := NULL;
        patient_inout.national_health_number  := NULL;
        patient_inout.institution_key         := NULL;
        patient_inout.create_user             := NULL;
        patient_inout.create_time             := NULL;
        patient_inout.update_user             := NULL;
        patient_inout.update_time             := NULL;
        patient_inout.patient_number          := NULL;
        patient_inout.deceased_motive         := NULL;
        patient_inout.deceased_place          := NULL;
        patient_inout.birth_place             := NULL;
        patient_inout.first_name              := NULL;
        patient_inout.create_institution      := NULL;
        patient_inout.update_institution      := NULL;
        patient_inout.record_status           := NULL;
        patient_inout.import_code             := NULL;
    END initrec;

    FUNCTION initrec RETURN patient%ROWTYPE IS
        l_patient patient%ROWTYPE;
    BEGIN
        l_patient.flg_migration := 'A';
        RETURN l_patient;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN patient_tc IS
        data patient_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM patient
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN patient_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data patient_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_patient;
/
