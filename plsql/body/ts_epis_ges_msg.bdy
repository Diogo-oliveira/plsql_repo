/*-- Last Change Revision: $Rev: 2028078 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:07 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_ges_msg
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 14, 2011 15:41:22
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_epis_ges_msg_in          IN epis_ges_msg.id_epis_ges_msg%TYPE,
        dt_epis_ges_msg_in          IN epis_ges_msg.dt_epis_ges_msg%TYPE,
        id_episode_in               IN epis_ges_msg.id_episode%TYPE DEFAULT NULL,
        id_pat_history_diagnosis_in IN epis_ges_msg.id_pat_history_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_in        IN epis_ges_msg.id_epis_diagnosis%TYPE DEFAULT NULL,
        flg_origin_in               IN epis_ges_msg.flg_origin%TYPE DEFAULT NULL,
        flg_msg_status_in           IN epis_ges_msg.flg_msg_status%TYPE DEFAULT NULL,
        flg_status_in               IN epis_ges_msg.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in           IN epis_ges_msg.id_prof_create%TYPE DEFAULT NULL,
        create_user_in              IN epis_ges_msg.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_ges_msg.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_ges_msg.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_ges_msg.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_ges_msg.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_ges_msg.update_institution%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO epis_ges_msg
            (id_epis_ges_msg,
             dt_epis_ges_msg,
             id_episode,
             id_pat_history_diagnosis,
             id_epis_diagnosis,
             flg_origin,
             flg_msg_status,
             flg_status,
             id_prof_create,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_epis_ges_msg_in,
             dt_epis_ges_msg_in,
             id_episode_in,
             id_pat_history_diagnosis_in,
             id_epis_diagnosis_in,
             flg_origin_in,
             flg_msg_status_in,
             flg_status_in,
             id_prof_create_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_GES_MSG');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    IF l_name = 'EGMSG_ED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DIAGNOSIS',
                                                        value_in           => id_epis_diagnosis_in);
                    END IF;
                    IF l_name = 'EGMSG_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EGMSG_PHD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_HISTORY_DIAGNOSIS',
                                                        value_in           => id_pat_history_diagnosis_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_epis_ges_msg_in          IN epis_ges_msg.id_epis_ges_msg%TYPE,
        dt_epis_ges_msg_in          IN epis_ges_msg.dt_epis_ges_msg%TYPE,
        id_episode_in               IN epis_ges_msg.id_episode%TYPE DEFAULT NULL,
        id_pat_history_diagnosis_in IN epis_ges_msg.id_pat_history_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_in        IN epis_ges_msg.id_epis_diagnosis%TYPE DEFAULT NULL,
        flg_origin_in               IN epis_ges_msg.flg_origin%TYPE DEFAULT NULL,
        flg_msg_status_in           IN epis_ges_msg.flg_msg_status%TYPE DEFAULT NULL,
        flg_status_in               IN epis_ges_msg.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in           IN epis_ges_msg.id_prof_create%TYPE DEFAULT NULL,
        create_user_in              IN epis_ges_msg.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_ges_msg.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_ges_msg.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_ges_msg.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_ges_msg.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_ges_msg.update_institution%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_epis_ges_msg_in          => id_epis_ges_msg_in,
            dt_epis_ges_msg_in          => dt_epis_ges_msg_in,
            id_episode_in               => id_episode_in,
            id_pat_history_diagnosis_in => id_pat_history_diagnosis_in,
            id_epis_diagnosis_in        => id_epis_diagnosis_in,
            flg_origin_in               => flg_origin_in,
            flg_msg_status_in           => flg_msg_status_in,
            flg_status_in               => flg_status_in,
            id_prof_create_in           => id_prof_create_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_ges_msg%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_ges_msg%ROWTYPE := rec_in;
    BEGIN
        ins(id_epis_ges_msg_in          => l_rec.id_epis_ges_msg,
            dt_epis_ges_msg_in          => l_rec.dt_epis_ges_msg,
            id_episode_in               => l_rec.id_episode,
            id_pat_history_diagnosis_in => l_rec.id_pat_history_diagnosis,
            id_epis_diagnosis_in        => l_rec.id_epis_diagnosis,
            flg_origin_in               => l_rec.flg_origin,
            flg_msg_status_in           => l_rec.flg_msg_status,
            flg_status_in               => l_rec.flg_status,
            id_prof_create_in           => l_rec.id_prof_create,
            create_user_in              => l_rec.create_user,
            create_time_in              => l_rec.create_time,
            create_institution_in       => l_rec.create_institution,
            update_user_in              => l_rec.update_user,
            update_time_in              => l_rec.update_time,
            update_institution_in       => l_rec.update_institution,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_ges_msg%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_ges_msg_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_ges_msg
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_GES_MSG _' || indx,
                                                        value_in           => rows_in(indx).id_epis_ges_msg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_EPIS_GES_MSG _' || indx,
                                                        value_in           => rows_in(indx).dt_epis_ges_msg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_HISTORY_DIAGNOSIS _' || indx,
                                                        value_in           => rows_in(indx).id_pat_history_diagnosis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_DIAGNOSIS _' || indx,
                                                        value_in           => rows_in(indx).id_epis_diagnosis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_ORIGIN _' || indx,
                                                        value_in           => rows_in(indx).flg_origin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_MSG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_msg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CREATE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_create,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'EPIS_GES_MSG',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_ges_msg_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_epis_ges_msg_in           IN epis_ges_msg.id_epis_ges_msg%TYPE,
        dt_epis_ges_msg_in           IN epis_ges_msg.dt_epis_ges_msg%TYPE,
        id_episode_in                IN epis_ges_msg.id_episode%TYPE DEFAULT NULL,
        id_episode_nin               IN BOOLEAN := TRUE,
        id_pat_history_diagnosis_in  IN epis_ges_msg.id_pat_history_diagnosis%TYPE DEFAULT NULL,
        id_pat_history_diagnosis_nin IN BOOLEAN := TRUE,
        id_epis_diagnosis_in         IN epis_ges_msg.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin        IN BOOLEAN := TRUE,
        flg_origin_in                IN epis_ges_msg.flg_origin%TYPE DEFAULT NULL,
        flg_origin_nin               IN BOOLEAN := TRUE,
        flg_msg_status_in            IN epis_ges_msg.flg_msg_status%TYPE DEFAULT NULL,
        flg_msg_status_nin           IN BOOLEAN := TRUE,
        flg_status_in                IN epis_ges_msg.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        id_prof_create_in            IN epis_ges_msg.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin           IN BOOLEAN := TRUE,
        create_user_in               IN epis_ges_msg.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN epis_ges_msg.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN epis_ges_msg.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN epis_ges_msg.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN epis_ges_msg.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN epis_ges_msg.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     IN OUT table_varchar
    ) IS
        l_rows_out                   table_varchar;
        l_id_episode_n               NUMBER(1);
        l_id_pat_history_diagnosis_n NUMBER(1);
        l_id_epis_diagnosis_n        NUMBER(1);
        l_flg_origin_n               NUMBER(1);
        l_flg_msg_status_n           NUMBER(1);
        l_flg_status_n               NUMBER(1);
        l_id_prof_create_n           NUMBER(1);
        l_create_user_n              NUMBER(1);
        l_create_time_n              NUMBER(1);
        l_create_institution_n       NUMBER(1);
        l_update_user_n              NUMBER(1);
        l_update_time_n              NUMBER(1);
        l_update_institution_n       NUMBER(1);
    BEGIN
    
        l_id_episode_n               := sys.diutil.bool_to_int(id_episode_nin);
        l_id_pat_history_diagnosis_n := sys.diutil.bool_to_int(id_pat_history_diagnosis_nin);
        l_id_epis_diagnosis_n        := sys.diutil.bool_to_int(id_epis_diagnosis_nin);
        l_flg_origin_n               := sys.diutil.bool_to_int(flg_origin_nin);
        l_flg_msg_status_n           := sys.diutil.bool_to_int(flg_msg_status_nin);
        l_flg_status_n               := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_create_n           := sys.diutil.bool_to_int(id_prof_create_nin);
        l_create_user_n              := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n              := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n       := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n              := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n              := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n       := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE epis_ges_msg
           SET id_episode               = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_pat_history_diagnosis = decode(l_id_pat_history_diagnosis_n,
                                                 0,
                                                 id_pat_history_diagnosis_in,
                                                 nvl(id_pat_history_diagnosis_in, id_pat_history_diagnosis)),
               id_epis_diagnosis        = decode(l_id_epis_diagnosis_n,
                                                 0,
                                                 id_epis_diagnosis_in,
                                                 nvl(id_epis_diagnosis_in, id_epis_diagnosis)),
               flg_origin               = decode(l_flg_origin_n, 0, flg_origin_in, nvl(flg_origin_in, flg_origin)),
               flg_msg_status           = decode(l_flg_msg_status_n,
                                                 0,
                                                 flg_msg_status_in,
                                                 nvl(flg_msg_status_in, flg_msg_status)),
               flg_status               = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_create           = decode(l_id_prof_create_n,
                                                 0,
                                                 id_prof_create_in,
                                                 nvl(id_prof_create_in, id_prof_create)),
               create_user              = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time              = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution       = decode(l_create_institution_n,
                                                 0,
                                                 create_institution_in,
                                                 nvl(create_institution_in, create_institution)),
               update_user              = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time              = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution       = decode(l_update_institution_n,
                                                 0,
                                                 update_institution_in,
                                                 nvl(update_institution_in, update_institution))
         WHERE id_epis_ges_msg = id_epis_ges_msg_in
           AND dt_epis_ges_msg = dt_epis_ges_msg_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_GES_MSG');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    IF l_name = 'EGMSG_ED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DIAGNOSIS',
                                                        value_in           => id_epis_diagnosis_in);
                    END IF;
                    IF l_name = 'EGMSG_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EGMSG_PHD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_HISTORY_DIAGNOSIS',
                                                        value_in           => id_pat_history_diagnosis_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_epis_ges_msg_in           IN epis_ges_msg.id_epis_ges_msg%TYPE,
        dt_epis_ges_msg_in           IN epis_ges_msg.dt_epis_ges_msg%TYPE,
        id_episode_in                IN epis_ges_msg.id_episode%TYPE DEFAULT NULL,
        id_episode_nin               IN BOOLEAN := TRUE,
        id_pat_history_diagnosis_in  IN epis_ges_msg.id_pat_history_diagnosis%TYPE DEFAULT NULL,
        id_pat_history_diagnosis_nin IN BOOLEAN := TRUE,
        id_epis_diagnosis_in         IN epis_ges_msg.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin        IN BOOLEAN := TRUE,
        flg_origin_in                IN epis_ges_msg.flg_origin%TYPE DEFAULT NULL,
        flg_origin_nin               IN BOOLEAN := TRUE,
        flg_msg_status_in            IN epis_ges_msg.flg_msg_status%TYPE DEFAULT NULL,
        flg_msg_status_nin           IN BOOLEAN := TRUE,
        flg_status_in                IN epis_ges_msg.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        id_prof_create_in            IN epis_ges_msg.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin           IN BOOLEAN := TRUE,
        create_user_in               IN epis_ges_msg.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN epis_ges_msg.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN epis_ges_msg.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN epis_ges_msg.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN epis_ges_msg.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN epis_ges_msg.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_ges_msg_in           => id_epis_ges_msg_in,
            dt_epis_ges_msg_in           => dt_epis_ges_msg_in,
            id_episode_in                => id_episode_in,
            id_episode_nin               => id_episode_nin,
            id_pat_history_diagnosis_in  => id_pat_history_diagnosis_in,
            id_pat_history_diagnosis_nin => id_pat_history_diagnosis_nin,
            id_epis_diagnosis_in         => id_epis_diagnosis_in,
            id_epis_diagnosis_nin        => id_epis_diagnosis_nin,
            flg_origin_in                => flg_origin_in,
            flg_origin_nin               => flg_origin_nin,
            flg_msg_status_in            => flg_msg_status_in,
            flg_msg_status_nin           => flg_msg_status_nin,
            flg_status_in                => flg_status_in,
            flg_status_nin               => flg_status_nin,
            id_prof_create_in            => id_prof_create_in,
            id_prof_create_nin           => id_prof_create_nin,
            create_user_in               => create_user_in,
            create_user_nin              => create_user_nin,
            create_time_in               => create_time_in,
            create_time_nin              => create_time_nin,
            create_institution_in        => create_institution_in,
            create_institution_nin       => create_institution_nin,
            update_user_in               => update_user_in,
            update_user_nin              => update_user_nin,
            update_time_in               => update_time_in,
            update_time_nin              => update_time_nin,
            update_institution_in        => update_institution_in,
            update_institution_nin       => update_institution_nin,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_episode_in                IN epis_ges_msg.id_episode%TYPE DEFAULT NULL,
        id_episode_nin               IN BOOLEAN := TRUE,
        id_pat_history_diagnosis_in  IN epis_ges_msg.id_pat_history_diagnosis%TYPE DEFAULT NULL,
        id_pat_history_diagnosis_nin IN BOOLEAN := TRUE,
        id_epis_diagnosis_in         IN epis_ges_msg.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin        IN BOOLEAN := TRUE,
        flg_origin_in                IN epis_ges_msg.flg_origin%TYPE DEFAULT NULL,
        flg_origin_nin               IN BOOLEAN := TRUE,
        flg_msg_status_in            IN epis_ges_msg.flg_msg_status%TYPE DEFAULT NULL,
        flg_msg_status_nin           IN BOOLEAN := TRUE,
        flg_status_in                IN epis_ges_msg.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        id_prof_create_in            IN epis_ges_msg.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin           IN BOOLEAN := TRUE,
        create_user_in               IN epis_ges_msg.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN epis_ges_msg.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN epis_ges_msg.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN epis_ges_msg.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN epis_ges_msg.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN epis_ges_msg.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        where_in                     VARCHAR2,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     IN OUT table_varchar
    ) IS
        l_sql                        VARCHAR2(32767);
        l_rows_out                   table_varchar;
        l_id_episode_n               NUMBER(1);
        l_id_pat_history_diagnosis_n NUMBER(1);
        l_id_epis_diagnosis_n        NUMBER(1);
        l_flg_origin_n               NUMBER(1);
        l_flg_msg_status_n           NUMBER(1);
        l_flg_status_n               NUMBER(1);
        l_id_prof_create_n           NUMBER(1);
        l_create_user_n              NUMBER(1);
        l_create_time_n              NUMBER(1);
        l_create_institution_n       NUMBER(1);
        l_update_user_n              NUMBER(1);
        l_update_time_n              NUMBER(1);
        l_update_institution_n       NUMBER(1);
        id_epis_ges_msg_in           epis_ges_msg.id_epis_ges_msg%TYPE;
        dt_epis_ges_msg_in           epis_ges_msg.dt_epis_ges_msg%TYPE;
    BEGIN
    
        l_id_episode_n               := sys.diutil.bool_to_int(id_episode_nin);
        l_id_pat_history_diagnosis_n := sys.diutil.bool_to_int(id_pat_history_diagnosis_nin);
        l_id_epis_diagnosis_n        := sys.diutil.bool_to_int(id_epis_diagnosis_nin);
        l_flg_origin_n               := sys.diutil.bool_to_int(flg_origin_nin);
        l_flg_msg_status_n           := sys.diutil.bool_to_int(flg_msg_status_nin);
        l_flg_status_n               := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_create_n           := sys.diutil.bool_to_int(id_prof_create_nin);
        l_create_user_n              := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n              := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n       := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n              := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n              := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n       := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE EPIS_GES_MSG SET ' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                 ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_PAT_HISTORY_DIAGNOSIS = decode (' || l_id_pat_history_diagnosis_n ||
                 ',0,:id_pat_history_diagnosis_in, NVL (:id_pat_history_diagnosis_in, ID_PAT_HISTORY_DIAGNOSIS)) ' || ',' ||
                 ' ID_EPIS_DIAGNOSIS = decode (' || l_id_epis_diagnosis_n ||
                 ',0,:id_epis_diagnosis_in, NVL (:id_epis_diagnosis_in, ID_EPIS_DIAGNOSIS)) ' || ',' ||
                 ' FLG_ORIGIN = decode (' || l_flg_origin_n || ',0,:flg_origin_in, NVL (:flg_origin_in, FLG_ORIGIN)) ' || ',' ||
                 ' FLG_MSG_STATUS = decode (' || l_flg_msg_status_n ||
                 ',0,:flg_msg_status_in, NVL (:flg_msg_status_in, FLG_MSG_STATUS)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_PROF_CREATE = decode (' || l_id_prof_create_n ||
                 ',0,:id_prof_create_in, NVL (:id_prof_create_in, ID_PROF_CREATE)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, id_pat_history_diagnosis_in, id_epis_diagnosis_in, flg_origin_in, flg_msg_status_in, flg_status_in, id_prof_create_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_GES_MSG');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    IF l_name = 'EGMSG_ED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DIAGNOSIS',
                                                        value_in           => id_epis_diagnosis_in);
                    END IF;
                    IF l_name = 'EGMSG_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EGMSG_PHD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_HISTORY_DIAGNOSIS',
                                                        value_in           => id_pat_history_diagnosis_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_episode_in                IN epis_ges_msg.id_episode%TYPE DEFAULT NULL,
        id_episode_nin               IN BOOLEAN := TRUE,
        id_pat_history_diagnosis_in  IN epis_ges_msg.id_pat_history_diagnosis%TYPE DEFAULT NULL,
        id_pat_history_diagnosis_nin IN BOOLEAN := TRUE,
        id_epis_diagnosis_in         IN epis_ges_msg.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin        IN BOOLEAN := TRUE,
        flg_origin_in                IN epis_ges_msg.flg_origin%TYPE DEFAULT NULL,
        flg_origin_nin               IN BOOLEAN := TRUE,
        flg_msg_status_in            IN epis_ges_msg.flg_msg_status%TYPE DEFAULT NULL,
        flg_msg_status_nin           IN BOOLEAN := TRUE,
        flg_status_in                IN epis_ges_msg.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        id_prof_create_in            IN epis_ges_msg.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin           IN BOOLEAN := TRUE,
        create_user_in               IN epis_ges_msg.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN epis_ges_msg.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN epis_ges_msg.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN epis_ges_msg.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN epis_ges_msg.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN epis_ges_msg.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        where_in                     VARCHAR2,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in                => id_episode_in,
            id_episode_nin               => id_episode_nin,
            id_pat_history_diagnosis_in  => id_pat_history_diagnosis_in,
            id_pat_history_diagnosis_nin => id_pat_history_diagnosis_nin,
            id_epis_diagnosis_in         => id_epis_diagnosis_in,
            id_epis_diagnosis_nin        => id_epis_diagnosis_nin,
            flg_origin_in                => flg_origin_in,
            flg_origin_nin               => flg_origin_nin,
            flg_msg_status_in            => flg_msg_status_in,
            flg_msg_status_nin           => flg_msg_status_nin,
            flg_status_in                => flg_status_in,
            flg_status_nin               => flg_status_nin,
            id_prof_create_in            => id_prof_create_in,
            id_prof_create_nin           => id_prof_create_nin,
            create_user_in               => create_user_in,
            create_user_nin              => create_user_nin,
            create_time_in               => create_time_in,
            create_time_nin              => create_time_nin,
            create_institution_in        => create_institution_in,
            create_institution_nin       => create_institution_nin,
            update_user_in               => update_user_in,
            update_user_nin              => update_user_nin,
            update_time_in               => update_time_in,
            update_time_nin              => update_time_nin,
            update_institution_in        => update_institution_in,
            update_institution_nin       => update_institution_nin,
            where_in                     => where_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_ges_msg%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_ges_msg_in          => rec_in.id_epis_ges_msg,
            dt_epis_ges_msg_in          => rec_in.dt_epis_ges_msg,
            id_episode_in               => rec_in.id_episode,
            id_pat_history_diagnosis_in => rec_in.id_pat_history_diagnosis,
            id_epis_diagnosis_in        => rec_in.id_epis_diagnosis,
            flg_origin_in               => rec_in.flg_origin,
            flg_msg_status_in           => rec_in.flg_msg_status,
            flg_status_in               => rec_in.flg_status,
            id_prof_create_in           => rec_in.id_prof_create,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_ges_msg%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_ges_msg_in          => rec_in.id_epis_ges_msg,
            dt_epis_ges_msg_in          => rec_in.dt_epis_ges_msg,
            id_episode_in               => rec_in.id_episode,
            id_pat_history_diagnosis_in => rec_in.id_pat_history_diagnosis,
            id_epis_diagnosis_in        => rec_in.id_epis_diagnosis,
            flg_origin_in               => rec_in.flg_origin,
            flg_msg_status_in           => rec_in.flg_msg_status,
            flg_status_in               => rec_in.flg_status,
            id_prof_create_in           => rec_in.id_prof_create,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_epis_ges_msg_in          IN epis_ges_msg.id_epis_ges_msg%TYPE,
        dt_epis_ges_msg_in          IN epis_ges_msg.dt_epis_ges_msg%TYPE,
        id_episode_in               IN epis_ges_msg.id_episode%TYPE DEFAULT NULL,
        id_pat_history_diagnosis_in IN epis_ges_msg.id_pat_history_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_in        IN epis_ges_msg.id_epis_diagnosis%TYPE DEFAULT NULL,
        flg_origin_in               IN epis_ges_msg.flg_origin%TYPE DEFAULT NULL,
        flg_msg_status_in           IN epis_ges_msg.flg_msg_status%TYPE DEFAULT NULL,
        flg_status_in               IN epis_ges_msg.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in           IN epis_ges_msg.id_prof_create%TYPE DEFAULT NULL,
        create_user_in              IN epis_ges_msg.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_ges_msg.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_ges_msg.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_ges_msg.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_ges_msg.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_ges_msg.update_institution%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_ges_msg_in          => id_epis_ges_msg_in,
            dt_epis_ges_msg_in          => dt_epis_ges_msg_in,
            id_episode_in               => id_episode_in,
            id_pat_history_diagnosis_in => id_pat_history_diagnosis_in,
            id_epis_diagnosis_in        => id_epis_diagnosis_in,
            flg_origin_in               => flg_origin_in,
            flg_msg_status_in           => flg_msg_status_in,
            flg_status_in               => flg_status_in,
            id_prof_create_in           => id_prof_create_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_ges_msg_in          => id_epis_ges_msg_in,
                dt_epis_ges_msg_in          => dt_epis_ges_msg_in,
                id_episode_in               => id_episode_in,
                id_pat_history_diagnosis_in => id_pat_history_diagnosis_in,
                id_epis_diagnosis_in        => id_epis_diagnosis_in,
                flg_origin_in               => flg_origin_in,
                flg_msg_status_in           => flg_msg_status_in,
                flg_status_in               => flg_status_in,
                id_prof_create_in           => id_prof_create_in,
                create_user_in              => create_user_in,
                create_time_in              => create_time_in,
                create_institution_in       => create_institution_in,
                update_user_in              => update_user_in,
                update_time_in              => update_time_in,
                update_institution_in       => update_institution_in,
                handle_error_in             => handle_error_in,
                rows_out                    => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_epis_ges_msg_in          IN epis_ges_msg.id_epis_ges_msg%TYPE,
        dt_epis_ges_msg_in          IN epis_ges_msg.dt_epis_ges_msg%TYPE,
        id_episode_in               IN epis_ges_msg.id_episode%TYPE DEFAULT NULL,
        id_pat_history_diagnosis_in IN epis_ges_msg.id_pat_history_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_in        IN epis_ges_msg.id_epis_diagnosis%TYPE DEFAULT NULL,
        flg_origin_in               IN epis_ges_msg.flg_origin%TYPE DEFAULT NULL,
        flg_msg_status_in           IN epis_ges_msg.flg_msg_status%TYPE DEFAULT NULL,
        flg_status_in               IN epis_ges_msg.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in           IN epis_ges_msg.id_prof_create%TYPE DEFAULT NULL,
        create_user_in              IN epis_ges_msg.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_ges_msg.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_ges_msg.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_ges_msg.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_ges_msg.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_ges_msg.update_institution%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_ges_msg_in,
                dt_epis_ges_msg_in,
                id_episode_in,
                id_pat_history_diagnosis_in,
                id_epis_diagnosis_in,
                flg_origin_in,
                flg_msg_status_in,
                flg_status_in,
                id_prof_create_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN epis_ges_msg_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_ges_msg          id_epis_ges_msg_cc;
        l_dt_epis_ges_msg          dt_epis_ges_msg_cc;
        l_id_episode               id_episode_cc;
        l_id_pat_history_diagnosis id_pat_history_diagnosis_cc;
        l_id_epis_diagnosis        id_epis_diagnosis_cc;
        l_flg_origin               flg_origin_cc;
        l_flg_msg_status           flg_msg_status_cc;
        l_flg_status               flg_status_cc;
        l_id_prof_create           id_prof_create_cc;
        l_create_user              create_user_cc;
        l_create_time              create_time_cc;
        l_create_institution       create_institution_cc;
        l_update_user              update_user_cc;
        l_update_time              update_time_cc;
        l_update_institution       update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_ges_msg(i) := col_in(i).id_epis_ges_msg;
            l_dt_epis_ges_msg(i) := col_in(i).dt_epis_ges_msg;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_pat_history_diagnosis(i) := col_in(i).id_pat_history_diagnosis;
            l_id_epis_diagnosis(i) := col_in(i).id_epis_diagnosis;
            l_flg_origin(i) := col_in(i).flg_origin;
            l_flg_msg_status(i) := col_in(i).flg_msg_status;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_create(i) := col_in(i).id_prof_create;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_ges_msg
                   SET id_episode               = nvl(l_id_episode(i), id_episode),
                       id_pat_history_diagnosis = nvl(l_id_pat_history_diagnosis(i), id_pat_history_diagnosis),
                       id_epis_diagnosis        = nvl(l_id_epis_diagnosis(i), id_epis_diagnosis),
                       flg_origin               = nvl(l_flg_origin(i), flg_origin),
                       flg_msg_status           = nvl(l_flg_msg_status(i), flg_msg_status),
                       flg_status               = nvl(l_flg_status(i), flg_status),
                       id_prof_create           = nvl(l_id_prof_create(i), id_prof_create),
                       create_user              = nvl(l_create_user(i), create_user),
                       create_time              = nvl(l_create_time(i), create_time),
                       create_institution       = nvl(l_create_institution(i), create_institution),
                       update_user              = nvl(l_update_user(i), update_user),
                       update_time              = nvl(l_update_time(i), update_time),
                       update_institution       = nvl(l_update_institution(i), update_institution)
                 WHERE id_epis_ges_msg = l_id_epis_ges_msg(i)
                   AND dt_epis_ges_msg = l_dt_epis_ges_msg(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_ges_msg
                   SET id_episode               = l_id_episode(i),
                       id_pat_history_diagnosis = l_id_pat_history_diagnosis(i),
                       id_epis_diagnosis        = l_id_epis_diagnosis(i),
                       flg_origin               = l_flg_origin(i),
                       flg_msg_status           = l_flg_msg_status(i),
                       flg_status               = l_flg_status(i),
                       id_prof_create           = l_id_prof_create(i),
                       create_user              = l_create_user(i),
                       create_time              = l_create_time(i),
                       create_institution       = l_create_institution(i),
                       update_user              = l_update_user(i),
                       update_time              = l_update_time(i),
                       update_institution       = l_update_institution(i)
                 WHERE id_epis_ges_msg = l_id_epis_ges_msg(i)
                   AND dt_epis_ges_msg = l_dt_epis_ges_msg(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN epis_ges_msg_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE EPIS_GES_MSG
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE EPIS_GES_MSG
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE EPIS_GES_MSG set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE EPIS_GES_MSG set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_epis_ges_msg_in IN epis_ges_msg.id_epis_ges_msg%TYPE,
        dt_epis_ges_msg_in IN epis_ges_msg.dt_epis_ges_msg%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_ges_msg
         WHERE id_epis_ges_msg = id_epis_ges_msg_in
           AND dt_epis_ges_msg = dt_epis_ges_msg_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_epis_ges_msg_in IN epis_ges_msg.id_epis_ges_msg%TYPE,
        dt_epis_ges_msg_in IN epis_ges_msg.dt_epis_ges_msg%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_epis_ges_msg_in => id_epis_ges_msg_in,
            dt_epis_ges_msg_in => dt_epis_ges_msg_in,
            handle_error_in    => handle_error_in,
            rows_out           => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_EPIS_GES_MSG
    PROCEDURE del_id_epis_ges_msg
    (
        id_epis_ges_msg_in IN epis_ges_msg.id_epis_ges_msg%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_ges_msg
         WHERE id_epis_ges_msg = id_epis_ges_msg_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_epis_ges_msg;

    -- Delete all rows for primary key column DT_EPIS_GES_MSG
    PROCEDURE del_dt_epis_ges_msg
    (
        dt_epis_ges_msg_in IN epis_ges_msg.dt_epis_ges_msg%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_ges_msg
         WHERE dt_epis_ges_msg = dt_epis_ges_msg_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_dt_epis_ges_msg;

    -- Delete all rows for primary key column ID_EPIS_GES_MSG
    PROCEDURE del_id_epis_ges_msg
    (
        id_epis_ges_msg_in IN epis_ges_msg.id_epis_ges_msg%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_epis_ges_msg(id_epis_ges_msg_in => id_epis_ges_msg_in,
                            handle_error_in    => handle_error_in,
                            rows_out           => rows_out);
    END del_id_epis_ges_msg;

    -- Delete all rows for primary key column DT_EPIS_GES_MSG
    PROCEDURE del_dt_epis_ges_msg
    (
        dt_epis_ges_msg_in IN epis_ges_msg.dt_epis_ges_msg%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dt_epis_ges_msg(dt_epis_ges_msg_in => dt_epis_ges_msg_in,
                            handle_error_in    => handle_error_in,
                            rows_out           => rows_out);
    END del_dt_epis_ges_msg;

    PROCEDURE del_egmsg_ed_fk
    (
        id_epis_diagnosis_in IN epis_ges_msg.id_epis_diagnosis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_ges_msg
         WHERE id_epis_diagnosis = del_egmsg_ed_fk.id_epis_diagnosis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_egmsg_ed_fk;

    PROCEDURE del_egmsg_ed_fk
    (
        id_epis_diagnosis_in IN epis_ges_msg.id_epis_diagnosis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_egmsg_ed_fk(id_epis_diagnosis_in => id_epis_diagnosis_in,
                        handle_error_in      => handle_error_in,
                        rows_out             => rows_out);
    END del_egmsg_ed_fk;

    PROCEDURE del_egmsg_epis_fk
    (
        id_episode_in   IN epis_ges_msg.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_ges_msg
         WHERE id_episode = del_egmsg_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_egmsg_epis_fk;

    PROCEDURE del_egmsg_epis_fk
    (
        id_episode_in   IN epis_ges_msg.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_egmsg_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_egmsg_epis_fk;

    PROCEDURE del_egmsg_phd_fk
    (
        id_pat_history_diagnosis_in IN epis_ges_msg.id_pat_history_diagnosis%TYPE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_ges_msg
         WHERE id_pat_history_diagnosis = del_egmsg_phd_fk.id_pat_history_diagnosis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_egmsg_phd_fk;

    PROCEDURE del_egmsg_phd_fk
    (
        id_pat_history_diagnosis_in IN epis_ges_msg.id_pat_history_diagnosis%TYPE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_egmsg_phd_fk(id_pat_history_diagnosis_in => id_pat_history_diagnosis_in,
                         handle_error_in             => handle_error_in,
                         rows_out                    => rows_out);
    END del_egmsg_phd_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM EPIS_GES_MSG';
        ELSE
            RETURN 'DELETE FROM EPIS_GES_MSG WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_GES_MSG');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_GES_MSG');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(epis_ges_msg_inout IN OUT epis_ges_msg%ROWTYPE) IS
    BEGIN
        epis_ges_msg_inout.id_epis_ges_msg          := NULL;
        epis_ges_msg_inout.dt_epis_ges_msg          := NULL;
        epis_ges_msg_inout.id_episode               := NULL;
        epis_ges_msg_inout.id_pat_history_diagnosis := NULL;
        epis_ges_msg_inout.id_epis_diagnosis        := NULL;
        epis_ges_msg_inout.flg_origin               := NULL;
        epis_ges_msg_inout.flg_msg_status           := NULL;
        epis_ges_msg_inout.flg_status               := NULL;
        epis_ges_msg_inout.id_prof_create           := NULL;
        epis_ges_msg_inout.create_user              := NULL;
        epis_ges_msg_inout.create_time              := NULL;
        epis_ges_msg_inout.create_institution       := NULL;
        epis_ges_msg_inout.update_user              := NULL;
        epis_ges_msg_inout.update_time              := NULL;
        epis_ges_msg_inout.update_institution       := NULL;
    END initrec;

    FUNCTION initrec RETURN epis_ges_msg%ROWTYPE IS
        l_epis_ges_msg epis_ges_msg%ROWTYPE;
    BEGIN
        RETURN l_epis_ges_msg;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_ges_msg_tc IS
        data epis_ges_msg_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM epis_ges_msg
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_ges_msg_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data epis_ges_msg_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_ges_msg;
/
