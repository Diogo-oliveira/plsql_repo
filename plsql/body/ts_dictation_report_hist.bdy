/*-- Last Change Revision: $Rev: 2028005 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:55 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_dictation_report_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: May 6, 2010 9:1:11
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_dictation_report_hist_in IN dictation_report_hist.id_dictation_report_hist%TYPE,
        id_external_in              IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_dictation_report_in      IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_patient_in               IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in               IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_work_type_in             IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        report_status_in            IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_information_in       IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        id_prof_dictated_in         IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_transcribed_in      IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_signoff_in          IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        dictated_date_in            IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        transcribed_date_in         IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        signoff_date_in             IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        last_update_date_in         IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        create_user_in              IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO dictation_report_hist
            (id_dictation_report_hist,
             id_external,
             id_dictation_report,
             id_patient,
             id_episode,
             id_work_type,
             report_status,
             report_information,
             id_prof_dictated,
             id_prof_transcribed,
             id_prof_signoff,
             dictated_date,
             transcribed_date,
             signoff_date,
             last_update_date,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_dictation_report_hist_in,
             id_external_in,
             id_dictation_report_in,
             id_patient_in,
             id_episode_in,
             id_work_type_in,
             report_status_in,
             report_information_in,
             id_prof_dictated_in,
             id_prof_transcribed_in,
             id_prof_signoff_in,
             dictated_date_in,
             transcribed_date_in,
             signoff_date_in,
             last_update_date_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'DICTATION_REPORT_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    IF l_name = 'DRH_DR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DICTATION_REPORT',
                                                        value_in           => id_dictation_report_in);
                    END IF;
                    IF l_name = 'DRH_EPISODE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'DRH_PATIENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'DRH_PROF_DICT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_DICTATED',
                                                        value_in           => id_prof_dictated_in);
                    END IF;
                    IF l_name = 'DRH_PROF_SIGN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_SIGNOFF',
                                                        value_in           => id_prof_signoff_in);
                    END IF;
                    IF l_name = 'DRH_PROF_TRAN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_TRANSCRIBED',
                                                        value_in           => id_prof_transcribed_in);
                    END IF;
                    IF l_name = 'DRH_WORK_TYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WORK_TYPE',
                                                        value_in           => id_work_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_dictation_report_hist_in IN dictation_report_hist.id_dictation_report_hist%TYPE,
        id_external_in              IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_dictation_report_in      IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_patient_in               IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in               IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_work_type_in             IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        report_status_in            IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_information_in       IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        id_prof_dictated_in         IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_transcribed_in      IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_signoff_in          IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        dictated_date_in            IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        transcribed_date_in         IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        signoff_date_in             IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        last_update_date_in         IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        create_user_in              IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_dictation_report_hist_in => id_dictation_report_hist_in,
            id_external_in              => id_external_in,
            id_dictation_report_in      => id_dictation_report_in,
            id_patient_in               => id_patient_in,
            id_episode_in               => id_episode_in,
            id_work_type_in             => id_work_type_in,
            report_status_in            => report_status_in,
            report_information_in       => report_information_in,
            id_prof_dictated_in         => id_prof_dictated_in,
            id_prof_transcribed_in      => id_prof_transcribed_in,
            id_prof_signoff_in          => id_prof_signoff_in,
            dictated_date_in            => dictated_date_in,
            transcribed_date_in         => transcribed_date_in,
            signoff_date_in             => signoff_date_in,
            last_update_date_in         => last_update_date_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    /*
    START Special logic for handling LOB columns....
    */

    PROCEDURE n_ins_clobs_in_chunks
    (
        id_dictation_report_hist_in IN dictation_report_hist.id_dictation_report_hist%TYPE,
        id_external_in              IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_dictation_report_in      IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_patient_in               IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in               IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_work_type_in             IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        report_status_in            IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        id_prof_dictated_in         IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_transcribed_in      IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_signoff_in          IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        dictated_date_in            IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        transcribed_date_in         IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        signoff_date_in             IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        last_update_date_in         IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        create_user_in              IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        clob_columns_in             IN varchar2_t,
        clob_pieces_in              IN varchar2_t
    ) IS
        l_report_information CLOB;
        i                    PLS_INTEGER;
        current_column       VARCHAR2(30) := '';
    BEGIN
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'report_information_in' THEN
                            IF l_report_information IS NULL
                            THEN
                                dbms_lob.createtemporary(l_report_information, TRUE, dbms_lob.CALL);
                            END IF;
                    END CASE; END IF;
            
                CASE current_column
                    WHEN 'report_information_in' THEN
                        dbms_lob.writeappend(l_report_information, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE; END IF;
        END LOOP;
    
        ins(id_dictation_report_hist_in => id_dictation_report_hist_in,
            id_external_in              => id_external_in,
            id_dictation_report_in      => id_dictation_report_in,
            id_patient_in               => id_patient_in,
            id_episode_in               => id_episode_in,
            id_work_type_in             => id_work_type_in,
            report_status_in            => report_status_in,
            report_information_in       => l_report_information,
            id_prof_dictated_in         => id_prof_dictated_in,
            id_prof_transcribed_in      => id_prof_transcribed_in,
            id_prof_signoff_in          => id_prof_signoff_in,
            dictated_date_in            => dictated_date_in,
            transcribed_date_in         => transcribed_date_in,
            signoff_date_in             => signoff_date_in,
            last_update_date_in         => last_update_date_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            handle_error_in             => handle_error_in);
    
    END n_ins_clobs_in_chunks;

    PROCEDURE n_upd_clobs_in_chunks
    (
        id_dictation_report_hist_in IN dictation_report_hist.id_dictation_report_hist%TYPE,
        id_external_in              IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_dictation_report_in      IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_patient_in               IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in               IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_work_type_in             IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        report_status_in            IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        id_prof_dictated_in         IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_transcribed_in      IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_signoff_in          IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        dictated_date_in            IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        transcribed_date_in         IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        signoff_date_in             IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        last_update_date_in         IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        create_user_in              IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        ignore_if_null_in           IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        clob_columns_in             IN varchar2_t,
        clob_pieces_in              IN varchar2_t
    ) IS
        l_report_information CLOB;
        i                    PLS_INTEGER;
        current_column       VARCHAR2(30) := '';
        l_rows               PLS_INTEGER;
    BEGIN
    
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'report_information_in' THEN
                            IF l_report_information IS NULL
                            THEN
                                dbms_lob.createtemporary(l_report_information, TRUE, dbms_lob.CALL);
                            END IF;
                    END CASE; END IF;
            
                CASE current_column
                    WHEN 'report_information_in' THEN
                        dbms_lob.writeappend(l_report_information, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE; END IF;
        END LOOP;
    
        upd(id_dictation_report_hist_in => id_dictation_report_hist_in,
            id_external_in              => id_external_in,
            id_dictation_report_in      => id_dictation_report_in,
            id_patient_in               => id_patient_in,
            id_episode_in               => id_episode_in,
            id_work_type_in             => id_work_type_in,
            report_status_in            => report_status_in,
            report_information_in       => l_report_information,
            id_prof_dictated_in         => id_prof_dictated_in,
            id_prof_transcribed_in      => id_prof_transcribed_in,
            id_prof_signoff_in          => id_prof_signoff_in,
            dictated_date_in            => dictated_date_in,
            transcribed_date_in         => transcribed_date_in,
            signoff_date_in             => signoff_date_in,
            last_update_date_in         => last_update_date_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            handle_error_in             => handle_error_in);
    END n_upd_clobs_in_chunks;

    PROCEDURE n_upd_ins_clobs_in_chunks
    (
        id_dictation_report_hist_in IN dictation_report_hist.id_dictation_report_hist%TYPE,
        id_external_in              IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_dictation_report_in      IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_patient_in               IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in               IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_work_type_in             IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        report_status_in            IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        id_prof_dictated_in         IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_transcribed_in      IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_signoff_in          IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        dictated_date_in            IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        transcribed_date_in         IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        signoff_date_in             IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        last_update_date_in         IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        create_user_in              IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        ignore_if_null_in           IN BOOLEAN DEFAULT TRUE,
        handle_error_in             IN BOOLEAN DEFAULT TRUE,
        clob_columns_in             IN varchar2_t,
        clob_pieces_in              IN varchar2_t
    ) IS
    BEGIN
        n_upd_clobs_in_chunks(id_dictation_report_hist_in => id_dictation_report_hist_in,
                              id_external_in              => id_external_in,
                              id_dictation_report_in      => id_dictation_report_in,
                              id_patient_in               => id_patient_in,
                              id_episode_in               => id_episode_in,
                              id_work_type_in             => id_work_type_in,
                              report_status_in            => report_status_in,
                              id_prof_dictated_in         => id_prof_dictated_in,
                              id_prof_transcribed_in      => id_prof_transcribed_in,
                              id_prof_signoff_in          => id_prof_signoff_in,
                              dictated_date_in            => dictated_date_in,
                              transcribed_date_in         => transcribed_date_in,
                              signoff_date_in             => signoff_date_in,
                              last_update_date_in         => last_update_date_in,
                              create_user_in              => create_user_in,
                              create_time_in              => create_time_in,
                              create_institution_in       => create_institution_in,
                              update_user_in              => update_user_in,
                              update_time_in              => update_time_in,
                              update_institution_in       => update_institution_in,
                              clob_columns_in             => clob_columns_in,
                              clob_pieces_in              => clob_pieces_in,
                              ignore_if_null_in           => ignore_if_null_in,
                              handle_error_in             => handle_error_in);
    
        IF SQL%ROWCOUNT = 0
        THEN
            n_ins_clobs_in_chunks(id_dictation_report_hist_in => id_dictation_report_hist_in,
                                  id_external_in              => id_external_in,
                                  id_dictation_report_in      => id_dictation_report_in,
                                  id_patient_in               => id_patient_in,
                                  id_episode_in               => id_episode_in,
                                  id_work_type_in             => id_work_type_in,
                                  report_status_in            => report_status_in,
                                  id_prof_dictated_in         => id_prof_dictated_in,
                                  id_prof_transcribed_in      => id_prof_transcribed_in,
                                  id_prof_signoff_in          => id_prof_signoff_in,
                                  dictated_date_in            => dictated_date_in,
                                  transcribed_date_in         => transcribed_date_in,
                                  signoff_date_in             => signoff_date_in,
                                  last_update_date_in         => last_update_date_in,
                                  create_user_in              => create_user_in,
                                  create_time_in              => create_time_in,
                                  create_institution_in       => create_institution_in,
                                  update_user_in              => update_user_in,
                                  update_time_in              => update_time_in,
                                  update_institution_in       => update_institution_in,
                                  clob_columns_in             => clob_columns_in,
                                  clob_pieces_in              => clob_pieces_in,
                                  handle_error_in             => handle_error_in);
        END IF;
    END n_upd_ins_clobs_in_chunks;

    /*
    END Special logic for handling LOB columns.
    */

    PROCEDURE ins
    (
        rec_in          IN dictation_report_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec dictation_report_hist%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_dictation_report_hist := next_key(sequence_in);
        END IF;
        ins(id_dictation_report_hist_in => l_rec.id_dictation_report_hist,
            id_external_in              => l_rec.id_external,
            id_dictation_report_in      => l_rec.id_dictation_report,
            id_patient_in               => l_rec.id_patient,
            id_episode_in               => l_rec.id_episode,
            id_work_type_in             => l_rec.id_work_type,
            report_status_in            => l_rec.report_status,
            report_information_in       => l_rec.report_information,
            id_prof_dictated_in         => l_rec.id_prof_dictated,
            id_prof_transcribed_in      => l_rec.id_prof_transcribed,
            id_prof_signoff_in          => l_rec.id_prof_signoff,
            dictated_date_in            => l_rec.dictated_date,
            transcribed_date_in         => l_rec.transcribed_date,
            signoff_date_in             => l_rec.signoff_date,
            last_update_date_in         => l_rec.last_update_date,
            create_user_in              => l_rec.create_user,
            create_time_in              => l_rec.create_time,
            create_institution_in       => l_rec.create_institution,
            update_user_in              => l_rec.update_user,
            update_time_in              => l_rec.update_time,
            update_institution_in       => l_rec.update_institution,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN dictation_report_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN dictation_report_hist.id_dictation_report_hist%TYPE
    
     IS
        retval dictation_report_hist.id_dictation_report_hist%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_dictation_report_hist.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_DICTATION_REPORT_HIST'));
    END next_key;

    PROCEDURE ins
    (
        id_external_in               IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_dictation_report_in       IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_patient_in                IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in                IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_work_type_in              IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        report_status_in             IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_information_in        IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        id_prof_dictated_in          IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_transcribed_in       IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_signoff_in           IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        dictated_date_in             IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        transcribed_date_in          IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        signoff_date_in              IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        last_update_date_in          IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        create_user_in               IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        id_dictation_report_hist_out IN OUT dictation_report_hist.id_dictation_report_hist%TYPE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
        l_pky dictation_report_hist.id_dictation_report_hist%TYPE := next_key;
    BEGIN
        ins(id_dictation_report_hist_in => l_pky,
            id_external_in              => id_external_in,
            id_dictation_report_in      => id_dictation_report_in,
            id_patient_in               => id_patient_in,
            id_episode_in               => id_episode_in,
            id_work_type_in             => id_work_type_in,
            report_status_in            => report_status_in,
            report_information_in       => report_information_in,
            id_prof_dictated_in         => id_prof_dictated_in,
            id_prof_transcribed_in      => id_prof_transcribed_in,
            id_prof_signoff_in          => id_prof_signoff_in,
            dictated_date_in            => dictated_date_in,
            transcribed_date_in         => transcribed_date_in,
            signoff_date_in             => signoff_date_in,
            last_update_date_in         => last_update_date_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        id_dictation_report_hist_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_external_in               IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_dictation_report_in       IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_patient_in                IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in                IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_work_type_in              IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        report_status_in             IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_information_in        IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        id_prof_dictated_in          IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_transcribed_in       IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_signoff_in           IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        dictated_date_in             IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        transcribed_date_in          IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        signoff_date_in              IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        last_update_date_in          IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        create_user_in               IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        id_dictation_report_hist_out IN OUT dictation_report_hist.id_dictation_report_hist%TYPE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_external_in               => id_external_in,
            id_dictation_report_in       => id_dictation_report_in,
            id_patient_in                => id_patient_in,
            id_episode_in                => id_episode_in,
            id_work_type_in              => id_work_type_in,
            report_status_in             => report_status_in,
            report_information_in        => report_information_in,
            id_prof_dictated_in          => id_prof_dictated_in,
            id_prof_transcribed_in       => id_prof_transcribed_in,
            id_prof_signoff_in           => id_prof_signoff_in,
            dictated_date_in             => dictated_date_in,
            transcribed_date_in          => transcribed_date_in,
            signoff_date_in              => signoff_date_in,
            last_update_date_in          => last_update_date_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_dictation_report_hist_out => id_dictation_report_hist_out,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    FUNCTION ins
    (
        id_external_in         IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_dictation_report_in IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_patient_in          IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_work_type_in        IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        report_status_in       IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_information_in  IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        id_prof_dictated_in    IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_transcribed_in IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        dictated_date_in       IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        transcribed_date_in    IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        signoff_date_in        IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        last_update_date_in    IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        create_user_in         IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_time_in         IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_time_in         IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) RETURN dictation_report_hist.id_dictation_report_hist%TYPE IS
        l_pky dictation_report_hist.id_dictation_report_hist%TYPE := next_key;
    BEGIN
        ins(id_dictation_report_hist_in => l_pky,
            id_external_in              => id_external_in,
            id_dictation_report_in      => id_dictation_report_in,
            id_patient_in               => id_patient_in,
            id_episode_in               => id_episode_in,
            id_work_type_in             => id_work_type_in,
            report_status_in            => report_status_in,
            report_information_in       => report_information_in,
            id_prof_dictated_in         => id_prof_dictated_in,
            id_prof_transcribed_in      => id_prof_transcribed_in,
            id_prof_signoff_in          => id_prof_signoff_in,
            dictated_date_in            => dictated_date_in,
            transcribed_date_in         => transcribed_date_in,
            signoff_date_in             => signoff_date_in,
            last_update_date_in         => last_update_date_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_external_in         IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_dictation_report_in IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_patient_in          IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_work_type_in        IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        report_status_in       IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_information_in  IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        id_prof_dictated_in    IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_transcribed_in IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        dictated_date_in       IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        transcribed_date_in    IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        signoff_date_in        IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        last_update_date_in    IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        create_user_in         IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_time_in         IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_time_in         IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) RETURN dictation_report_hist.id_dictation_report_hist%TYPE IS
        l_pky    dictation_report_hist.id_dictation_report_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_dictation_report_hist_in => l_pky,
            id_external_in              => id_external_in,
            id_dictation_report_in      => id_dictation_report_in,
            id_patient_in               => id_patient_in,
            id_episode_in               => id_episode_in,
            id_work_type_in             => id_work_type_in,
            report_status_in            => report_status_in,
            report_information_in       => report_information_in,
            id_prof_dictated_in         => id_prof_dictated_in,
            id_prof_transcribed_in      => id_prof_transcribed_in,
            id_prof_signoff_in          => id_prof_signoff_in,
            dictated_date_in            => dictated_date_in,
            transcribed_date_in         => transcribed_date_in,
            signoff_date_in             => signoff_date_in,
            last_update_date_in         => last_update_date_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_external_in         IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_dictation_report_in IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_patient_in          IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_work_type_in        IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        report_status_in       IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_information_in  IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        id_prof_dictated_in    IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_transcribed_in IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        dictated_date_in       IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        transcribed_date_in    IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        signoff_date_in        IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        last_update_date_in    IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        create_user_in         IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_time_in         IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_time_in         IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky dictation_report_hist.id_dictation_report_hist%TYPE := next_key;
    BEGIN
        ins(id_dictation_report_hist_in => l_pky,
            id_external_in              => id_external_in,
            id_dictation_report_in      => id_dictation_report_in,
            id_patient_in               => id_patient_in,
            id_episode_in               => id_episode_in,
            id_work_type_in             => id_work_type_in,
            report_status_in            => report_status_in,
            report_information_in       => report_information_in,
            id_prof_dictated_in         => id_prof_dictated_in,
            id_prof_transcribed_in      => id_prof_transcribed_in,
            id_prof_signoff_in          => id_prof_signoff_in,
            dictated_date_in            => dictated_date_in,
            transcribed_date_in         => transcribed_date_in,
            signoff_date_in             => signoff_date_in,
            last_update_date_in         => last_update_date_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_external_in         IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_dictation_report_in IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_patient_in          IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in          IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_work_type_in        IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        report_status_in       IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_information_in  IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        id_prof_dictated_in    IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_transcribed_in IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        dictated_date_in       IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        transcribed_date_in    IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        signoff_date_in        IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        last_update_date_in    IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        create_user_in         IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_time_in         IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_time_in         IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        l_pky    dictation_report_hist.id_dictation_report_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_dictation_report_hist_in => l_pky,
            id_external_in              => id_external_in,
            id_dictation_report_in      => id_dictation_report_in,
            id_patient_in               => id_patient_in,
            id_episode_in               => id_episode_in,
            id_work_type_in             => id_work_type_in,
            report_status_in            => report_status_in,
            report_information_in       => report_information_in,
            id_prof_dictated_in         => id_prof_dictated_in,
            id_prof_transcribed_in      => id_prof_transcribed_in,
            id_prof_signoff_in          => id_prof_signoff_in,
            dictated_date_in            => dictated_date_in,
            transcribed_date_in         => transcribed_date_in,
            signoff_date_in             => signoff_date_in,
            last_update_date_in         => last_update_date_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN dictation_report_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO dictation_report_hist
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DICTATION_REPORT_HIST _' || indx,
                                                        value_in           => rows_in(indx).id_dictation_report_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXTERNAL _' || indx,
                                                        value_in           => rows_in(indx).id_external,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DICTATION_REPORT _' || indx,
                                                        value_in           => rows_in(indx).id_dictation_report,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_WORK_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_work_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'REPORT_STATUS _' || indx,
                                                        value_in           => rows_in(indx).report_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_DICTATED _' || indx,
                                                        value_in           => rows_in(indx).id_prof_dictated,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_TRANSCRIBED _' || indx,
                                                        value_in           => rows_in(indx).id_prof_transcribed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_SIGNOFF _' || indx,
                                                        value_in           => rows_in(indx).id_prof_signoff,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DICTATED_DATE _' || indx,
                                                        value_in           => rows_in(indx).dictated_date,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TRANSCRIBED_DATE _' || indx,
                                                        value_in           => rows_in(indx).transcribed_date,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'SIGNOFF_DATE _' || indx,
                                                        value_in           => rows_in(indx).signoff_date,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAST_UPDATE_DATE _' || indx,
                                                        value_in           => rows_in(indx).last_update_date,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'DICTATION_REPORT_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN dictation_report_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_dictation_report_hist_in IN dictation_report_hist.id_dictation_report_hist%TYPE,
        id_external_in              IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_external_nin             IN BOOLEAN := TRUE,
        id_dictation_report_in      IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_dictation_report_nin     IN BOOLEAN := TRUE,
        id_patient_in               IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        id_episode_in               IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        id_work_type_in             IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        id_work_type_nin            IN BOOLEAN := TRUE,
        report_status_in            IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_status_nin           IN BOOLEAN := TRUE,
        report_information_in       IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        report_information_nin      IN BOOLEAN := TRUE,
        id_prof_dictated_in         IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_dictated_nin        IN BOOLEAN := TRUE,
        id_prof_transcribed_in      IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_transcribed_nin     IN BOOLEAN := TRUE,
        id_prof_signoff_in          IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_nin         IN BOOLEAN := TRUE,
        dictated_date_in            IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        dictated_date_nin           IN BOOLEAN := TRUE,
        transcribed_date_in         IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        transcribed_date_nin        IN BOOLEAN := TRUE,
        signoff_date_in             IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        signoff_date_nin            IN BOOLEAN := TRUE,
        last_update_date_in         IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        last_update_date_nin        IN BOOLEAN := TRUE,
        create_user_in              IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_external_n         NUMBER(1);
        l_id_dictation_report_n NUMBER(1);
        l_id_patient_n          NUMBER(1);
        l_id_episode_n          NUMBER(1);
        l_id_work_type_n        NUMBER(1);
        l_report_status_n       NUMBER(1);
        l_report_information_n  NUMBER(1);
        l_id_prof_dictated_n    NUMBER(1);
        l_id_prof_transcribed_n NUMBER(1);
        l_id_prof_signoff_n     NUMBER(1);
        l_dictated_date_n       NUMBER(1);
        l_transcribed_date_n    NUMBER(1);
        l_signoff_date_n        NUMBER(1);
        l_last_update_date_n    NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
    BEGIN
    
        l_id_external_n         := sys.diutil.bool_to_int(id_external_nin);
        l_id_dictation_report_n := sys.diutil.bool_to_int(id_dictation_report_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_id_work_type_n        := sys.diutil.bool_to_int(id_work_type_nin);
        l_report_status_n       := sys.diutil.bool_to_int(report_status_nin);
        l_report_information_n  := sys.diutil.bool_to_int(report_information_nin);
        l_id_prof_dictated_n    := sys.diutil.bool_to_int(id_prof_dictated_nin);
        l_id_prof_transcribed_n := sys.diutil.bool_to_int(id_prof_transcribed_nin);
        l_id_prof_signoff_n     := sys.diutil.bool_to_int(id_prof_signoff_nin);
        l_dictated_date_n       := sys.diutil.bool_to_int(dictated_date_nin);
        l_transcribed_date_n    := sys.diutil.bool_to_int(transcribed_date_nin);
        l_signoff_date_n        := sys.diutil.bool_to_int(signoff_date_nin);
        l_last_update_date_n    := sys.diutil.bool_to_int(last_update_date_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE dictation_report_hist
           SET id_external         = decode(l_id_external_n, 0, id_external_in, nvl(id_external_in, id_external)),
               id_dictation_report = decode(l_id_dictation_report_n,
                                            0,
                                            id_dictation_report_in,
                                            nvl(id_dictation_report_in, id_dictation_report)),
               id_patient          = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_episode          = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_work_type        = decode(l_id_work_type_n, 0, id_work_type_in, nvl(id_work_type_in, id_work_type)),
               report_status       = decode(l_report_status_n, 0, report_status_in, nvl(report_status_in, report_status)),
               report_information  = decode(l_report_information_n,
                                            0,
                                            report_information_in,
                                            nvl(report_information_in, report_information)),
               id_prof_dictated    = decode(l_id_prof_dictated_n,
                                            0,
                                            id_prof_dictated_in,
                                            nvl(id_prof_dictated_in, id_prof_dictated)),
               id_prof_transcribed = decode(l_id_prof_transcribed_n,
                                            0,
                                            id_prof_transcribed_in,
                                            nvl(id_prof_transcribed_in, id_prof_transcribed)),
               id_prof_signoff     = decode(l_id_prof_signoff_n,
                                            0,
                                            id_prof_signoff_in,
                                            nvl(id_prof_signoff_in, id_prof_signoff)),
               dictated_date       = decode(l_dictated_date_n, 0, dictated_date_in, nvl(dictated_date_in, dictated_date)),
               transcribed_date    = decode(l_transcribed_date_n,
                                            0,
                                            transcribed_date_in,
                                            nvl(transcribed_date_in, transcribed_date)),
               signoff_date        = decode(l_signoff_date_n, 0, signoff_date_in, nvl(signoff_date_in, signoff_date)),
               last_update_date    = decode(l_last_update_date_n,
                                            0,
                                            last_update_date_in,
                                            nvl(last_update_date_in, last_update_date)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution))
         WHERE id_dictation_report_hist = id_dictation_report_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'DICTATION_REPORT_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    IF l_name = 'DRH_DR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DICTATION_REPORT',
                                                        value_in           => id_dictation_report_in);
                    END IF;
                    IF l_name = 'DRH_EPISODE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'DRH_PATIENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'DRH_PROF_DICT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_DICTATED',
                                                        value_in           => id_prof_dictated_in);
                    END IF;
                    IF l_name = 'DRH_PROF_SIGN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_SIGNOFF',
                                                        value_in           => id_prof_signoff_in);
                    END IF;
                    IF l_name = 'DRH_PROF_TRAN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_TRANSCRIBED',
                                                        value_in           => id_prof_transcribed_in);
                    END IF;
                    IF l_name = 'DRH_WORK_TYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WORK_TYPE',
                                                        value_in           => id_work_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_dictation_report_hist_in IN dictation_report_hist.id_dictation_report_hist%TYPE,
        id_external_in              IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_external_nin             IN BOOLEAN := TRUE,
        id_dictation_report_in      IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_dictation_report_nin     IN BOOLEAN := TRUE,
        id_patient_in               IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        id_episode_in               IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        id_work_type_in             IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        id_work_type_nin            IN BOOLEAN := TRUE,
        report_status_in            IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_status_nin           IN BOOLEAN := TRUE,
        report_information_in       IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        report_information_nin      IN BOOLEAN := TRUE,
        id_prof_dictated_in         IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_dictated_nin        IN BOOLEAN := TRUE,
        id_prof_transcribed_in      IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_transcribed_nin     IN BOOLEAN := TRUE,
        id_prof_signoff_in          IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_nin         IN BOOLEAN := TRUE,
        dictated_date_in            IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        dictated_date_nin           IN BOOLEAN := TRUE,
        transcribed_date_in         IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        transcribed_date_nin        IN BOOLEAN := TRUE,
        signoff_date_in             IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        signoff_date_nin            IN BOOLEAN := TRUE,
        last_update_date_in         IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        last_update_date_nin        IN BOOLEAN := TRUE,
        create_user_in              IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_dictation_report_hist_in => id_dictation_report_hist_in,
            id_external_in              => id_external_in,
            id_external_nin             => id_external_nin,
            id_dictation_report_in      => id_dictation_report_in,
            id_dictation_report_nin     => id_dictation_report_nin,
            id_patient_in               => id_patient_in,
            id_patient_nin              => id_patient_nin,
            id_episode_in               => id_episode_in,
            id_episode_nin              => id_episode_nin,
            id_work_type_in             => id_work_type_in,
            id_work_type_nin            => id_work_type_nin,
            report_status_in            => report_status_in,
            report_status_nin           => report_status_nin,
            report_information_in       => report_information_in,
            report_information_nin      => report_information_nin,
            id_prof_dictated_in         => id_prof_dictated_in,
            id_prof_dictated_nin        => id_prof_dictated_nin,
            id_prof_transcribed_in      => id_prof_transcribed_in,
            id_prof_transcribed_nin     => id_prof_transcribed_nin,
            id_prof_signoff_in          => id_prof_signoff_in,
            id_prof_signoff_nin         => id_prof_signoff_nin,
            dictated_date_in            => dictated_date_in,
            dictated_date_nin           => dictated_date_nin,
            transcribed_date_in         => transcribed_date_in,
            transcribed_date_nin        => transcribed_date_nin,
            signoff_date_in             => signoff_date_in,
            signoff_date_nin            => signoff_date_nin,
            last_update_date_in         => last_update_date_in,
            last_update_date_nin        => last_update_date_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_external_in          IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_external_nin         IN BOOLEAN := TRUE,
        id_dictation_report_in  IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_dictation_report_nin IN BOOLEAN := TRUE,
        id_patient_in           IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_episode_in           IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_work_type_in         IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        id_work_type_nin        IN BOOLEAN := TRUE,
        report_status_in        IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_status_nin       IN BOOLEAN := TRUE,
        report_information_in   IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        report_information_nin  IN BOOLEAN := TRUE,
        id_prof_dictated_in     IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_dictated_nin    IN BOOLEAN := TRUE,
        id_prof_transcribed_in  IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_transcribed_nin IN BOOLEAN := TRUE,
        id_prof_signoff_in      IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_nin     IN BOOLEAN := TRUE,
        dictated_date_in        IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        dictated_date_nin       IN BOOLEAN := TRUE,
        transcribed_date_in     IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        transcribed_date_nin    IN BOOLEAN := TRUE,
        signoff_date_in         IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        signoff_date_nin        IN BOOLEAN := TRUE,
        last_update_date_in     IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        last_update_date_nin    IN BOOLEAN := TRUE,
        create_user_in          IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                       VARCHAR2(32767);
        l_rows_out                  table_varchar;
        l_id_external_n             NUMBER(1);
        l_id_dictation_report_n     NUMBER(1);
        l_id_patient_n              NUMBER(1);
        l_id_episode_n              NUMBER(1);
        l_id_work_type_n            NUMBER(1);
        l_report_status_n           NUMBER(1);
        l_report_information_n      NUMBER(1);
        l_id_prof_dictated_n        NUMBER(1);
        l_id_prof_transcribed_n     NUMBER(1);
        l_id_prof_signoff_n         NUMBER(1);
        l_dictated_date_n           NUMBER(1);
        l_transcribed_date_n        NUMBER(1);
        l_signoff_date_n            NUMBER(1);
        l_last_update_date_n        NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
        id_dictation_report_hist_in dictation_report_hist.id_dictation_report_hist%TYPE;
    BEGIN
    
        l_id_external_n         := sys.diutil.bool_to_int(id_external_nin);
        l_id_dictation_report_n := sys.diutil.bool_to_int(id_dictation_report_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_id_work_type_n        := sys.diutil.bool_to_int(id_work_type_nin);
        l_report_status_n       := sys.diutil.bool_to_int(report_status_nin);
        l_report_information_n  := sys.diutil.bool_to_int(report_information_nin);
        l_id_prof_dictated_n    := sys.diutil.bool_to_int(id_prof_dictated_nin);
        l_id_prof_transcribed_n := sys.diutil.bool_to_int(id_prof_transcribed_nin);
        l_id_prof_signoff_n     := sys.diutil.bool_to_int(id_prof_signoff_nin);
        l_dictated_date_n       := sys.diutil.bool_to_int(dictated_date_nin);
        l_transcribed_date_n    := sys.diutil.bool_to_int(transcribed_date_nin);
        l_signoff_date_n        := sys.diutil.bool_to_int(signoff_date_nin);
        l_last_update_date_n    := sys.diutil.bool_to_int(last_update_date_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE DICTATION_REPORT_HIST SET ' || ' ID_EXTERNAL = decode (' || l_id_external_n ||
                 ',0,:id_external_in, NVL (:id_external_in, ID_EXTERNAL)) ' || ',' || ' ID_DICTATION_REPORT = decode (' ||
                 l_id_dictation_report_n ||
                 ',0,:id_dictation_report_in, NVL (:id_dictation_report_in, ID_DICTATION_REPORT)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_WORK_TYPE = decode (' || l_id_work_type_n ||
                 ',0,:id_work_type_in, NVL (:id_work_type_in, ID_WORK_TYPE)) ' || ',' || ' REPORT_STATUS = decode (' ||
                 l_report_status_n || ',0,:report_status_in, NVL (:report_status_in, REPORT_STATUS)) ' || ',' ||
                 ' REPORT_INFORMATION = decode (' || l_report_information_n ||
                 ',0,:report_information_in, NVL (:report_information_in, REPORT_INFORMATION)) ' || ',' ||
                 ' ID_PROF_DICTATED = decode (' || l_id_prof_dictated_n ||
                 ',0,:id_prof_dictated_in, NVL (:id_prof_dictated_in, ID_PROF_DICTATED)) ' || ',' ||
                 ' ID_PROF_TRANSCRIBED = decode (' || l_id_prof_transcribed_n ||
                 ',0,:id_prof_transcribed_in, NVL (:id_prof_transcribed_in, ID_PROF_TRANSCRIBED)) ' || ',' ||
                 ' ID_PROF_SIGNOFF = decode (' || l_id_prof_signoff_n ||
                 ',0,:id_prof_signoff_in, NVL (:id_prof_signoff_in, ID_PROF_SIGNOFF)) ' || ',' ||
                 ' DICTATED_DATE = decode (' || l_dictated_date_n ||
                 ',0,:dictated_date_in, NVL (:dictated_date_in, DICTATED_DATE)) ' || ',' ||
                 ' TRANSCRIBED_DATE = decode (' || l_transcribed_date_n ||
                 ',0,:transcribed_date_in, NVL (:transcribed_date_in, TRANSCRIBED_DATE)) ' || ',' ||
                 ' SIGNOFF_DATE = decode (' || l_signoff_date_n ||
                 ',0,:signoff_date_in, NVL (:signoff_date_in, SIGNOFF_DATE)) ' || ',' || ' LAST_UPDATE_DATE = decode (' ||
                 l_last_update_date_n || ',0,:last_update_date_in, NVL (:last_update_date_in, LAST_UPDATE_DATE)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_external_in, id_dictation_report_in, id_patient_in, id_episode_in, id_work_type_in, report_status_in, report_information_in, id_prof_dictated_in, id_prof_transcribed_in, id_prof_signoff_in, dictated_date_in, transcribed_date_in, signoff_date_in, last_update_date_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'DICTATION_REPORT_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    IF l_name = 'DRH_DR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DICTATION_REPORT',
                                                        value_in           => id_dictation_report_in);
                    END IF;
                    IF l_name = 'DRH_EPISODE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'DRH_PATIENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'DRH_PROF_DICT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_DICTATED',
                                                        value_in           => id_prof_dictated_in);
                    END IF;
                    IF l_name = 'DRH_PROF_SIGN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_SIGNOFF',
                                                        value_in           => id_prof_signoff_in);
                    END IF;
                    IF l_name = 'DRH_PROF_TRAN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_TRANSCRIBED',
                                                        value_in           => id_prof_transcribed_in);
                    END IF;
                    IF l_name = 'DRH_WORK_TYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WORK_TYPE',
                                                        value_in           => id_work_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_external_in          IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_external_nin         IN BOOLEAN := TRUE,
        id_dictation_report_in  IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_dictation_report_nin IN BOOLEAN := TRUE,
        id_patient_in           IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_episode_in           IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_work_type_in         IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        id_work_type_nin        IN BOOLEAN := TRUE,
        report_status_in        IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_status_nin       IN BOOLEAN := TRUE,
        report_information_in   IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        report_information_nin  IN BOOLEAN := TRUE,
        id_prof_dictated_in     IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_dictated_nin    IN BOOLEAN := TRUE,
        id_prof_transcribed_in  IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_transcribed_nin IN BOOLEAN := TRUE,
        id_prof_signoff_in      IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_nin     IN BOOLEAN := TRUE,
        dictated_date_in        IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        dictated_date_nin       IN BOOLEAN := TRUE,
        transcribed_date_in     IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        transcribed_date_nin    IN BOOLEAN := TRUE,
        signoff_date_in         IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        signoff_date_nin        IN BOOLEAN := TRUE,
        last_update_date_in     IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        last_update_date_nin    IN BOOLEAN := TRUE,
        create_user_in          IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_external_in          => id_external_in,
            id_external_nin         => id_external_nin,
            id_dictation_report_in  => id_dictation_report_in,
            id_dictation_report_nin => id_dictation_report_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            id_work_type_in         => id_work_type_in,
            id_work_type_nin        => id_work_type_nin,
            report_status_in        => report_status_in,
            report_status_nin       => report_status_nin,
            report_information_in   => report_information_in,
            report_information_nin  => report_information_nin,
            id_prof_dictated_in     => id_prof_dictated_in,
            id_prof_dictated_nin    => id_prof_dictated_nin,
            id_prof_transcribed_in  => id_prof_transcribed_in,
            id_prof_transcribed_nin => id_prof_transcribed_nin,
            id_prof_signoff_in      => id_prof_signoff_in,
            id_prof_signoff_nin     => id_prof_signoff_nin,
            dictated_date_in        => dictated_date_in,
            dictated_date_nin       => dictated_date_nin,
            transcribed_date_in     => transcribed_date_in,
            transcribed_date_nin    => transcribed_date_nin,
            signoff_date_in         => signoff_date_in,
            signoff_date_nin        => signoff_date_nin,
            last_update_date_in     => last_update_date_in,
            last_update_date_nin    => last_update_date_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN dictation_report_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_dictation_report_hist_in => rec_in.id_dictation_report_hist,
            id_external_in              => rec_in.id_external,
            id_dictation_report_in      => rec_in.id_dictation_report,
            id_patient_in               => rec_in.id_patient,
            id_episode_in               => rec_in.id_episode,
            id_work_type_in             => rec_in.id_work_type,
            report_status_in            => rec_in.report_status,
            report_information_in       => rec_in.report_information,
            id_prof_dictated_in         => rec_in.id_prof_dictated,
            id_prof_transcribed_in      => rec_in.id_prof_transcribed,
            id_prof_signoff_in          => rec_in.id_prof_signoff,
            dictated_date_in            => rec_in.dictated_date,
            transcribed_date_in         => rec_in.transcribed_date,
            signoff_date_in             => rec_in.signoff_date,
            last_update_date_in         => rec_in.last_update_date,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN dictation_report_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_dictation_report_hist_in => rec_in.id_dictation_report_hist,
            id_external_in              => rec_in.id_external,
            id_dictation_report_in      => rec_in.id_dictation_report,
            id_patient_in               => rec_in.id_patient,
            id_episode_in               => rec_in.id_episode,
            id_work_type_in             => rec_in.id_work_type,
            report_status_in            => rec_in.report_status,
            report_information_in       => rec_in.report_information,
            id_prof_dictated_in         => rec_in.id_prof_dictated,
            id_prof_transcribed_in      => rec_in.id_prof_transcribed,
            id_prof_signoff_in          => rec_in.id_prof_signoff,
            dictated_date_in            => rec_in.dictated_date,
            transcribed_date_in         => rec_in.transcribed_date,
            signoff_date_in             => rec_in.signoff_date,
            last_update_date_in         => rec_in.last_update_date,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_dictation_report_hist_in IN dictation_report_hist.id_dictation_report_hist%TYPE,
        id_external_in              IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_dictation_report_in      IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_patient_in               IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in               IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_work_type_in             IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        report_status_in            IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_information_in       IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        id_prof_dictated_in         IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_transcribed_in      IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_signoff_in          IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        dictated_date_in            IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        transcribed_date_in         IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        signoff_date_in             IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        last_update_date_in         IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        create_user_in              IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        upd(id_dictation_report_hist_in => id_dictation_report_hist_in,
            id_external_in              => id_external_in,
            id_dictation_report_in      => id_dictation_report_in,
            id_patient_in               => id_patient_in,
            id_episode_in               => id_episode_in,
            id_work_type_in             => id_work_type_in,
            report_status_in            => report_status_in,
            report_information_in       => report_information_in,
            id_prof_dictated_in         => id_prof_dictated_in,
            id_prof_transcribed_in      => id_prof_transcribed_in,
            id_prof_signoff_in          => id_prof_signoff_in,
            dictated_date_in            => dictated_date_in,
            transcribed_date_in         => transcribed_date_in,
            signoff_date_in             => signoff_date_in,
            last_update_date_in         => last_update_date_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_dictation_report_hist_in => id_dictation_report_hist_in,
                id_external_in              => id_external_in,
                id_dictation_report_in      => id_dictation_report_in,
                id_patient_in               => id_patient_in,
                id_episode_in               => id_episode_in,
                id_work_type_in             => id_work_type_in,
                report_status_in            => report_status_in,
                report_information_in       => report_information_in,
                id_prof_dictated_in         => id_prof_dictated_in,
                id_prof_transcribed_in      => id_prof_transcribed_in,
                id_prof_signoff_in          => id_prof_signoff_in,
                dictated_date_in            => dictated_date_in,
                transcribed_date_in         => transcribed_date_in,
                signoff_date_in             => signoff_date_in,
                last_update_date_in         => last_update_date_in,
                create_user_in              => create_user_in,
                create_time_in              => create_time_in,
                create_institution_in       => create_institution_in,
                update_user_in              => update_user_in,
                update_time_in              => update_time_in,
                update_institution_in       => update_institution_in,
                handle_error_in             => handle_error_in,
                rows_out                    => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_dictation_report_hist_in IN dictation_report_hist.id_dictation_report_hist%TYPE,
        id_external_in              IN dictation_report_hist.id_external%TYPE DEFAULT NULL,
        id_dictation_report_in      IN dictation_report_hist.id_dictation_report%TYPE DEFAULT NULL,
        id_patient_in               IN dictation_report_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in               IN dictation_report_hist.id_episode%TYPE DEFAULT NULL,
        id_work_type_in             IN dictation_report_hist.id_work_type%TYPE DEFAULT NULL,
        report_status_in            IN dictation_report_hist.report_status%TYPE DEFAULT NULL,
        report_information_in       IN dictation_report_hist.report_information%TYPE DEFAULT NULL,
        id_prof_dictated_in         IN dictation_report_hist.id_prof_dictated%TYPE DEFAULT NULL,
        id_prof_transcribed_in      IN dictation_report_hist.id_prof_transcribed%TYPE DEFAULT NULL,
        id_prof_signoff_in          IN dictation_report_hist.id_prof_signoff%TYPE DEFAULT NULL,
        dictated_date_in            IN dictation_report_hist.dictated_date%TYPE DEFAULT NULL,
        transcribed_date_in         IN dictation_report_hist.transcribed_date%TYPE DEFAULT NULL,
        signoff_date_in             IN dictation_report_hist.signoff_date%TYPE DEFAULT NULL,
        last_update_date_in         IN dictation_report_hist.last_update_date%TYPE DEFAULT NULL,
        create_user_in              IN dictation_report_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN dictation_report_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN dictation_report_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN dictation_report_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN dictation_report_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN dictation_report_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_dictation_report_hist_in,
                id_external_in,
                id_dictation_report_in,
                id_patient_in,
                id_episode_in,
                id_work_type_in,
                report_status_in,
                report_information_in,
                id_prof_dictated_in,
                id_prof_transcribed_in,
                id_prof_signoff_in,
                dictated_date_in,
                transcribed_date_in,
                signoff_date_in,
                last_update_date_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN dictation_report_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_dictation_report_hist id_dictation_report_hist_cc;
        l_id_external              id_external_cc;
        l_id_dictation_report      id_dictation_report_cc;
        l_id_patient               id_patient_cc;
        l_id_episode               id_episode_cc;
        l_id_work_type             id_work_type_cc;
        l_report_status            report_status_cc;
        l_report_information       report_information_cc;
        l_id_prof_dictated         id_prof_dictated_cc;
        l_id_prof_transcribed      id_prof_transcribed_cc;
        l_id_prof_signoff          id_prof_signoff_cc;
        l_dictated_date            dictated_date_cc;
        l_transcribed_date         transcribed_date_cc;
        l_signoff_date             signoff_date_cc;
        l_last_update_date         last_update_date_cc;
        l_create_user              create_user_cc;
        l_create_time              create_time_cc;
        l_create_institution       create_institution_cc;
        l_update_user              update_user_cc;
        l_update_time              update_time_cc;
        l_update_institution       update_institution_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_dictation_report_hist(i) := col_in(i).id_dictation_report_hist;
            l_id_external(i) := col_in(i).id_external;
            l_id_dictation_report(i) := col_in(i).id_dictation_report;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_work_type(i) := col_in(i).id_work_type;
            l_report_status(i) := col_in(i).report_status;
            l_report_information(i) := col_in(i).report_information;
            l_id_prof_dictated(i) := col_in(i).id_prof_dictated;
            l_id_prof_transcribed(i) := col_in(i).id_prof_transcribed;
            l_id_prof_signoff(i) := col_in(i).id_prof_signoff;
            l_dictated_date(i) := col_in(i).dictated_date;
            l_transcribed_date(i) := col_in(i).transcribed_date;
            l_signoff_date(i) := col_in(i).signoff_date;
            l_last_update_date(i) := col_in(i).last_update_date;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE dictation_report_hist
                   SET id_external         = nvl(l_id_external(i), id_external),
                       id_dictation_report = nvl(l_id_dictation_report(i), id_dictation_report),
                       id_patient          = nvl(l_id_patient(i), id_patient),
                       id_episode          = nvl(l_id_episode(i), id_episode),
                       id_work_type        = nvl(l_id_work_type(i), id_work_type),
                       report_status       = nvl(l_report_status(i), report_status),
                       report_information  = nvl(l_report_information(i), report_information),
                       id_prof_dictated    = nvl(l_id_prof_dictated(i), id_prof_dictated),
                       id_prof_transcribed = nvl(l_id_prof_transcribed(i), id_prof_transcribed),
                       id_prof_signoff     = nvl(l_id_prof_signoff(i), id_prof_signoff),
                       dictated_date       = nvl(l_dictated_date(i), dictated_date),
                       transcribed_date    = nvl(l_transcribed_date(i), transcribed_date),
                       signoff_date        = nvl(l_signoff_date(i), signoff_date),
                       last_update_date    = nvl(l_last_update_date(i), last_update_date),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution)
                 WHERE id_dictation_report_hist = l_id_dictation_report_hist(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE dictation_report_hist
                   SET id_external         = l_id_external(i),
                       id_dictation_report = l_id_dictation_report(i),
                       id_patient          = l_id_patient(i),
                       id_episode          = l_id_episode(i),
                       id_work_type        = l_id_work_type(i),
                       report_status       = l_report_status(i),
                       report_information  = l_report_information(i),
                       id_prof_dictated    = l_id_prof_dictated(i),
                       id_prof_transcribed = l_id_prof_transcribed(i),
                       id_prof_signoff     = l_id_prof_signoff(i),
                       dictated_date       = l_dictated_date(i),
                       transcribed_date    = l_transcribed_date(i),
                       signoff_date        = l_signoff_date(i),
                       last_update_date    = l_last_update_date(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i)
                 WHERE id_dictation_report_hist = l_id_dictation_report_hist(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN dictation_report_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE DICTATION_REPORT_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE DICTATION_REPORT_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE DICTATION_REPORT_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE DICTATION_REPORT_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_dictation_report_hist_in IN dictation_report_hist.id_dictation_report_hist%TYPE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM dictation_report_hist
         WHERE id_dictation_report_hist = id_dictation_report_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_dictation_report_hist_in IN dictation_report_hist.id_dictation_report_hist%TYPE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_dictation_report_hist_in => id_dictation_report_hist_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_DICTATION_REPORT_HIST
    PROCEDURE del_id_dictation_report_hist
    (
        id_dictation_report_hist_in IN dictation_report_hist.id_dictation_report_hist%TYPE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM dictation_report_hist
         WHERE id_dictation_report_hist = id_dictation_report_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_dictation_report_hist;

    -- Delete all rows for primary key column ID_DICTATION_REPORT_HIST
    PROCEDURE del_id_dictation_report_hist
    (
        id_dictation_report_hist_in IN dictation_report_hist.id_dictation_report_hist%TYPE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_dictation_report_hist(id_dictation_report_hist_in => id_dictation_report_hist_in,
                                     handle_error_in             => handle_error_in,
                                     rows_out                    => rows_out);
    END del_id_dictation_report_hist;

    PROCEDURE del_drh_dr_fk
    (
        id_dictation_report_in IN dictation_report_hist.id_dictation_report%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM dictation_report_hist
         WHERE id_dictation_report = del_drh_dr_fk.id_dictation_report_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_drh_dr_fk;

    PROCEDURE del_drh_dr_fk
    (
        id_dictation_report_in IN dictation_report_hist.id_dictation_report%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_drh_dr_fk(id_dictation_report_in => id_dictation_report_in,
                      handle_error_in        => handle_error_in,
                      rows_out               => rows_out);
    END del_drh_dr_fk;

    PROCEDURE del_drh_episode_fk
    (
        id_episode_in   IN dictation_report_hist.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM dictation_report_hist
         WHERE id_episode = del_drh_episode_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_drh_episode_fk;

    PROCEDURE del_drh_episode_fk
    (
        id_episode_in   IN dictation_report_hist.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_drh_episode_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_drh_episode_fk;

    PROCEDURE del_drh_patient_fk
    (
        id_patient_in   IN dictation_report_hist.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM dictation_report_hist
         WHERE id_patient = del_drh_patient_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_drh_patient_fk;

    PROCEDURE del_drh_patient_fk
    (
        id_patient_in   IN dictation_report_hist.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_drh_patient_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_drh_patient_fk;

    PROCEDURE del_drh_prof_dict_fk
    (
        id_prof_dictated_in IN dictation_report_hist.id_prof_dictated%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM dictation_report_hist
         WHERE id_prof_dictated = del_drh_prof_dict_fk.id_prof_dictated_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_drh_prof_dict_fk;

    PROCEDURE del_drh_prof_dict_fk
    (
        id_prof_dictated_in IN dictation_report_hist.id_prof_dictated%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_drh_prof_dict_fk(id_prof_dictated_in => id_prof_dictated_in,
                             handle_error_in     => handle_error_in,
                             rows_out            => rows_out);
    END del_drh_prof_dict_fk;

    PROCEDURE del_drh_prof_sign_fk
    (
        id_prof_signoff_in IN dictation_report_hist.id_prof_signoff%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM dictation_report_hist
         WHERE id_prof_signoff = del_drh_prof_sign_fk.id_prof_signoff_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_drh_prof_sign_fk;

    PROCEDURE del_drh_prof_sign_fk
    (
        id_prof_signoff_in IN dictation_report_hist.id_prof_signoff%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_drh_prof_sign_fk(id_prof_signoff_in => id_prof_signoff_in,
                             handle_error_in    => handle_error_in,
                             rows_out           => rows_out);
    END del_drh_prof_sign_fk;

    PROCEDURE del_drh_prof_tran_fk
    (
        id_prof_transcribed_in IN dictation_report_hist.id_prof_transcribed%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM dictation_report_hist
         WHERE id_prof_transcribed = del_drh_prof_tran_fk.id_prof_transcribed_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_drh_prof_tran_fk;

    PROCEDURE del_drh_prof_tran_fk
    (
        id_prof_transcribed_in IN dictation_report_hist.id_prof_transcribed%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_drh_prof_tran_fk(id_prof_transcribed_in => id_prof_transcribed_in,
                             handle_error_in        => handle_error_in,
                             rows_out               => rows_out);
    END del_drh_prof_tran_fk;

    PROCEDURE del_drh_work_type_fk
    (
        id_work_type_in IN dictation_report_hist.id_work_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM dictation_report_hist
         WHERE id_work_type = del_drh_work_type_fk.id_work_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_drh_work_type_fk;

    PROCEDURE del_drh_work_type_fk
    (
        id_work_type_in IN dictation_report_hist.id_work_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_drh_work_type_fk(id_work_type_in => id_work_type_in,
                             handle_error_in => handle_error_in,
                             rows_out        => rows_out);
    END del_drh_work_type_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM DICTATION_REPORT_HIST';
        ELSE
            RETURN 'DELETE FROM DICTATION_REPORT_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'DICTATION_REPORT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'DICTATION_REPORT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(dictation_report_hist_inout IN OUT dictation_report_hist%ROWTYPE) IS
    BEGIN
        dictation_report_hist_inout.id_dictation_report_hist := NULL;
        dictation_report_hist_inout.id_external              := NULL;
        dictation_report_hist_inout.id_dictation_report      := NULL;
        dictation_report_hist_inout.id_patient               := NULL;
        dictation_report_hist_inout.id_episode               := NULL;
        dictation_report_hist_inout.id_work_type             := NULL;
        dictation_report_hist_inout.report_status            := NULL;
        dictation_report_hist_inout.report_information       := NULL;
        dictation_report_hist_inout.id_prof_dictated         := NULL;
        dictation_report_hist_inout.id_prof_transcribed      := NULL;
        dictation_report_hist_inout.id_prof_signoff          := NULL;
        dictation_report_hist_inout.dictated_date            := NULL;
        dictation_report_hist_inout.transcribed_date         := NULL;
        dictation_report_hist_inout.signoff_date             := NULL;
        dictation_report_hist_inout.last_update_date         := NULL;
        dictation_report_hist_inout.create_user              := NULL;
        dictation_report_hist_inout.create_time              := NULL;
        dictation_report_hist_inout.create_institution       := NULL;
        dictation_report_hist_inout.update_user              := NULL;
        dictation_report_hist_inout.update_time              := NULL;
        dictation_report_hist_inout.update_institution       := NULL;
    END initrec;

    FUNCTION initrec RETURN dictation_report_hist%ROWTYPE IS
        l_dictation_report_hist dictation_report_hist%ROWTYPE;
    BEGIN
        RETURN l_dictation_report_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN dictation_report_hist_tc IS
        data dictation_report_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM dictation_report_hist
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN dictation_report_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data dictation_report_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_dictation_report_hist;
/
