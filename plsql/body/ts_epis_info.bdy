/*-- Last Change Revision: $Rev: 2028103 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:11 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_epis_info
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: December 12, 2008 17:11:2
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_episode_in                 IN epis_info.id_episode%TYPE,
        id_bed_in                     IN epis_info.id_bed%TYPE DEFAULT NULL,
        id_room_in                    IN epis_info.id_room%TYPE DEFAULT NULL,
        id_professional_in            IN epis_info.id_professional%TYPE DEFAULT NULL,
        norton_in                     IN epis_info.norton%TYPE DEFAULT NULL,
        flg_hydric_in                 IN epis_info.flg_hydric%TYPE DEFAULT NULL,
        flg_wound_in                  IN epis_info.flg_wound%TYPE DEFAULT NULL,
        companion_in                  IN epis_info.companion%TYPE DEFAULT NULL,
        flg_unknown_in                IN epis_info.flg_unknown%TYPE DEFAULT NULL,
        desc_info_in                  IN epis_info.desc_info%TYPE DEFAULT NULL,
        id_schedule_in                IN epis_info.id_schedule%TYPE DEFAULT NULL,
        id_first_nurse_resp_in        IN epis_info.id_first_nurse_resp%TYPE DEFAULT NULL,
        flg_status_in                 IN epis_info.flg_status%TYPE DEFAULT NULL,
        id_dep_clin_serv_in           IN epis_info.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_first_dep_clin_serv_in     IN epis_info.id_first_dep_clin_serv%TYPE DEFAULT NULL,
        id_institution_usf_in         IN epis_info.id_institution_usf%TYPE DEFAULT NULL,
        id_prof_team_in               IN epis_info.id_prof_team%TYPE DEFAULT NULL,
        id_triage_in                  IN epis_info.id_triage%TYPE DEFAULT NULL,
        id_triage_white_reason_in     IN epis_info.id_triage_white_reason%TYPE DEFAULT NULL,
        id_first_triage_in            IN epis_info.id_first_triage%TYPE DEFAULT NULL,
        id_first_triage_wr_in         IN epis_info.id_first_triage_wr%TYPE DEFAULT NULL,
        dt_harvest_tstz_in            IN epis_info.dt_harvest_tstz%TYPE DEFAULT NULL,
        dt_last_interaction_tstz_in   IN epis_info.dt_last_interaction_tstz%TYPE DEFAULT NULL,
        dt_movement_tstz_in           IN epis_info.dt_movement_tstz%TYPE DEFAULT NULL,
        dt_next_drug_tstz_in          IN epis_info.dt_next_drug_tstz%TYPE DEFAULT NULL,
        dt_first_obs_tstz_in          IN epis_info.dt_first_obs_tstz%TYPE DEFAULT NULL,
        dt_next_intervention_tstz_in  IN epis_info.dt_next_intervention_tstz%TYPE DEFAULT NULL,
        dt_next_vital_sign_tstz_in    IN epis_info.dt_next_vital_sign_tstz%TYPE DEFAULT NULL,
        dt_next_position_tstz_in      IN epis_info.dt_next_position_tstz%TYPE DEFAULT NULL,
        dt_entrance_room_tstz_in      IN epis_info.dt_entrance_room_tstz%TYPE DEFAULT NULL,
        dt_harvest_mov_tstz_in        IN epis_info.dt_harvest_mov_tstz%TYPE DEFAULT NULL,
        dt_first_nurse_obs_tstz_in    IN epis_info.dt_first_nurse_obs_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_exe_tstz_in IN epis_info.dt_first_analysis_exe_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_req_tstz_in IN epis_info.dt_first_analysis_req_tstz%TYPE DEFAULT NULL,
        dt_first_image_exec_tstz_in   IN epis_info.dt_first_image_exec_tstz%TYPE DEFAULT NULL,
        dt_first_image_req_tstz_in    IN epis_info.dt_first_image_req_tstz%TYPE DEFAULT NULL,
        dt_first_drug_prsc_tstz_in    IN epis_info.dt_first_drug_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_drug_take_tstz_in    IN epis_info.dt_first_drug_take_tstz%TYPE DEFAULT NULL,
        dt_first_interv_prsc_tstz_in  IN epis_info.dt_first_interv_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_interv_take_tstz_in  IN epis_info.dt_first_interv_take_tstz%TYPE DEFAULT NULL,
        dt_first_inst_obs_tstz_in     IN epis_info.dt_first_inst_obs_tstz%TYPE DEFAULT NULL,
        dt_init_in                    IN epis_info.dt_init%TYPE DEFAULT NULL,
        id_prof_first_obs_in          IN epis_info.id_prof_first_obs%TYPE DEFAULT NULL,
        id_prof_first_nurse_obs_in    IN epis_info.id_prof_first_nurse_obs%TYPE DEFAULT NULL,
        dt_first_sch_in               IN epis_info.dt_first_sch%TYPE DEFAULT NULL,
        dt_first_nurse_sch_in         IN epis_info.dt_first_nurse_sch%TYPE DEFAULT NULL,
        id_prof_first_sch_in          IN epis_info.id_prof_first_sch%TYPE DEFAULT NULL,
        id_prof_first_nurse_sch_in    IN epis_info.id_prof_first_nurse_sch%TYPE DEFAULT NULL,
        id_patient_in                 IN epis_info.id_patient%TYPE DEFAULT NULL,
        flg_dsch_status_in            IN epis_info.flg_dsch_status%TYPE DEFAULT NULL,
        id_disch_reas_dest_in         IN epis_info.id_disch_reas_dest%TYPE DEFAULT NULL,
        dt_med_tstz_in                IN epis_info.dt_med_tstz%TYPE DEFAULT NULL,
        dt_pend_active_tstz_in        IN epis_info.dt_pend_active_tstz%TYPE DEFAULT NULL,
        id_dcs_requested_in           IN epis_info.id_dcs_requested%TYPE DEFAULT NULL,
        id_instit_requested_in        IN epis_info.id_instit_requested%TYPE DEFAULT NULL,
        id_prof_schedules_in          IN epis_info.id_prof_schedules%TYPE DEFAULT NULL,
        flg_sch_status_in             IN epis_info.flg_sch_status%TYPE DEFAULT NULL,
        id_complaint_in               IN epis_info.id_complaint%TYPE DEFAULT NULL,
        flg_urgency_in                IN epis_info.flg_urgency%TYPE DEFAULT NULL,
        sch_group_id_patient_in       IN epis_info.sch_group_id_patient%TYPE DEFAULT NULL,
        id_schedule_outp_in           IN epis_info.id_schedule_outp%TYPE DEFAULT NULL,
        sch_prof_outp_id_prof_in      IN epis_info.sch_prof_outp_id_prof%TYPE DEFAULT NULL,
        id_schedule_sr_in             IN epis_info.id_schedule_sr%TYPE DEFAULT NULL,
        triage_acuity_in              IN epis_info.triage_acuity%TYPE DEFAULT NULL,
        triage_color_text_in          IN epis_info.triage_color_text%TYPE DEFAULT NULL,
        triage_rank_acuity_in         IN epis_info.triage_rank_acuity%TYPE DEFAULT NULL,
        triage_flg_letter_in          IN epis_info.triage_flg_letter%TYPE DEFAULT NULL,
        fast_track_icon_in            IN epis_info.fast_track_icon%TYPE DEFAULT NULL,
        fast_track_desc_in            IN epis_info.fast_track_desc%TYPE DEFAULT NULL,
        fast_track_color_in           IN epis_info.fast_track_color%TYPE DEFAULT NULL,
        id_room_scheduled_in          IN epis_info.id_room_scheduled%TYPE DEFAULT NULL,
        room_sch_flg_status_in        IN epis_info.room_sch_flg_status%TYPE DEFAULT NULL,
        flg_pat_status_in             IN epis_info.flg_pat_status%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in         IN epis_info.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_surgery_time_det_tstz_in   IN epis_info.dt_surgery_time_det_tstz%TYPE DEFAULT NULL,
        desc_diet_in                  IN epis_info.desc_diet%TYPE DEFAULT NULL,
        dt_admin_tstz_in              IN epis_info.dt_admin_tstz%TYPE DEFAULT NULL,
        id_triage_color_in            IN epis_info.id_triage_color%TYPE DEFAULT NULL,
        id_software_in                IN epis_info.id_software%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO epis_info
            (id_bed,
             id_room,
             id_professional,
             id_episode,
             norton,
             flg_hydric,
             flg_wound,
             companion,
             flg_unknown,
             desc_info,
             id_schedule,
             id_first_nurse_resp,
             flg_status,
             id_dep_clin_serv,
             id_first_dep_clin_serv,
             id_institution_usf,
             id_prof_team,
             id_triage,
             id_triage_white_reason,
             id_first_triage,
             id_first_triage_wr,
             dt_harvest_tstz,
             dt_last_interaction_tstz,
             dt_movement_tstz,
             dt_next_drug_tstz,
             dt_first_obs_tstz,
             dt_next_intervention_tstz,
             dt_next_vital_sign_tstz,
             dt_next_position_tstz,
             dt_entrance_room_tstz,
             dt_harvest_mov_tstz,
             dt_first_nurse_obs_tstz,
             dt_first_analysis_exe_tstz,
             dt_first_analysis_req_tstz,
             dt_first_image_exec_tstz,
             dt_first_image_req_tstz,
             dt_first_drug_prsc_tstz,
             dt_first_drug_take_tstz,
             dt_first_interv_prsc_tstz,
             dt_first_interv_take_tstz,
             dt_first_inst_obs_tstz,
             dt_init,
             id_prof_first_obs,
             id_prof_first_nurse_obs,
             dt_first_sch,
             dt_first_nurse_sch,
             id_prof_first_sch,
             id_prof_first_nurse_sch,
             id_patient,
             flg_dsch_status,
             id_disch_reas_dest,
             dt_med_tstz,
             dt_pend_active_tstz,
             id_dcs_requested,
             id_instit_requested,
             id_prof_schedules,
             flg_sch_status,
             id_complaint,
             flg_urgency,
             sch_group_id_patient,
             id_schedule_outp,
             sch_prof_outp_id_prof,
             id_schedule_sr,
             triage_acuity,
             triage_color_text,
             triage_rank_acuity,
             triage_flg_letter,
             fast_track_icon,
             fast_track_desc,
             fast_track_color,
             id_room_scheduled,
             room_sch_flg_status,
             flg_pat_status,
             dt_room_entry_tstz,
             dt_surgery_time_det_tstz,
             desc_diet,
             dt_admin_tstz,
             id_triage_color,
             id_software)
        VALUES
            (id_bed_in,
             id_room_in,
             id_professional_in,
             id_episode_in,
             norton_in,
             flg_hydric_in,
             flg_wound_in,
             companion_in,
             flg_unknown_in,
             desc_info_in,
             id_schedule_in,
             id_first_nurse_resp_in,
             flg_status_in,
             id_dep_clin_serv_in,
             id_first_dep_clin_serv_in,
             id_institution_usf_in,
             id_prof_team_in,
             id_triage_in,
             id_triage_white_reason_in,
             id_first_triage_in,
             id_first_triage_wr_in,
             dt_harvest_tstz_in,
             dt_last_interaction_tstz_in,
             dt_movement_tstz_in,
             dt_next_drug_tstz_in,
             dt_first_obs_tstz_in,
             dt_next_intervention_tstz_in,
             dt_next_vital_sign_tstz_in,
             dt_next_position_tstz_in,
             dt_entrance_room_tstz_in,
             dt_harvest_mov_tstz_in,
             dt_first_nurse_obs_tstz_in,
             dt_first_analysis_exe_tstz_in,
             dt_first_analysis_req_tstz_in,
             dt_first_image_exec_tstz_in,
             dt_first_image_req_tstz_in,
             dt_first_drug_prsc_tstz_in,
             dt_first_drug_take_tstz_in,
             dt_first_interv_prsc_tstz_in,
             dt_first_interv_take_tstz_in,
             dt_first_inst_obs_tstz_in,
             dt_init_in,
             id_prof_first_obs_in,
             id_prof_first_nurse_obs_in,
             dt_first_sch_in,
             dt_first_nurse_sch_in,
             id_prof_first_sch_in,
             id_prof_first_nurse_sch_in,
             id_patient_in,
             flg_dsch_status_in,
             id_disch_reas_dest_in,
             dt_med_tstz_in,
             dt_pend_active_tstz_in,
             id_dcs_requested_in,
             id_instit_requested_in,
             id_prof_schedules_in,
             flg_sch_status_in,
             id_complaint_in,
             flg_urgency_in,
             sch_group_id_patient_in,
             id_schedule_outp_in,
             sch_prof_outp_id_prof_in,
             id_schedule_sr_in,
             triage_acuity_in,
             triage_color_text_in,
             triage_rank_acuity_in,
             triage_flg_letter_in,
             fast_track_icon_in,
             fast_track_desc_in,
             fast_track_color_in,
             id_room_scheduled_in,
             room_sch_flg_status_in,
             flg_pat_status_in,
             dt_room_entry_tstz_in,
             dt_surgery_time_det_tstz_in,
             desc_diet_in,
             dt_admin_tstz_in,
             id_triage_color_in,
             id_software_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'EIO_EPIS_FK_I'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "EIO_EPIS_FK_I"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'EPIS_INFO',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_INFO');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    IF l_name = 'EIO_BED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED',
                                                        value_in           => id_bed_in);
                    END IF;
                    IF l_name = 'EIO_COMPL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COMPLAINT',
                                                        value_in           => id_complaint_in);
                    END IF;
                    IF l_name = 'EIO_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'EIO_DCS_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIRST_DEP_CLIN_SERV',
                                                        value_in           => id_first_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'EIO_DCS_REQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DCS_REQUESTED',
                                                        value_in           => id_dcs_requested_in);
                    END IF;
                    IF l_name = 'EIO_DISCH_REAS_DEST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DISCH_REAS_DEST',
                                                        value_in           => id_disch_reas_dest_in);
                    END IF;
                    IF l_name = 'EIO_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EIO_INST_REQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTIT_REQUESTED',
                                                        value_in           => id_instit_requested_in);
                    END IF;
                    IF l_name = 'EIO_INST_USF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION_USF',
                                                        value_in           => id_institution_usf_in);
                    END IF;
                    IF l_name = 'EIO_NURSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIRST_NURSE_RESP',
                                                        value_in           => id_first_nurse_resp_in);
                    END IF;
                    IF l_name = 'EIO_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'EIO_PAT_SCH_GRP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'SCH_GROUP_ID_PATIENT',
                                                        value_in           => sch_group_id_patient_in);
                    END IF;
                    IF l_name = 'EIO_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'EIO_PROF_NURSE_OBS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_FIRST_NURSE_OBS',
                                                        value_in           => id_prof_first_nurse_obs_in);
                    END IF;
                    IF l_name = 'EIO_PROF_NURSE_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_FIRST_NURSE_SCH',
                                                        value_in           => id_prof_first_nurse_sch_in);
                    END IF;
                    IF l_name = 'EIO_PROF_OBS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_FIRST_OBS',
                                                        value_in           => id_prof_first_obs_in);
                    END IF;
                    IF l_name = 'EIO_PROF_SCHS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_SCHEDULES',
                                                        value_in           => id_prof_schedules_in);
                    END IF;
                    IF l_name = 'EIO_PROF_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_FIRST_SCH',
                                                        value_in           => id_prof_first_sch_in);
                    END IF;
                    IF l_name = 'EIO_PROF_SCH_O_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'SCH_PROF_OUTP_ID_PROF',
                                                        value_in           => sch_prof_outp_id_prof_in);
                    END IF;
                    IF l_name = 'EIO_PROF_TEAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_TEAM',
                                                        value_in           => id_prof_team_in);
                    END IF;
                    IF l_name = 'EIO_RM_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM_SCHEDULED',
                                                        value_in           => id_room_scheduled_in);
                    END IF;
                    IF l_name = 'EIO_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'EIO_SCHD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE',
                                                        value_in           => id_schedule_in);
                    END IF;
                    IF l_name = 'EIO_SCH_O_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE_OUTP',
                                                        value_in           => id_schedule_outp_in);
                    END IF;
                    IF l_name = 'EIO_SCH_SR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE_SR',
                                                        value_in           => id_schedule_sr_in);
                    END IF;
                    IF l_name = 'EIO_TC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRIAGE_COLOR',
                                                        value_in           => id_triage_color_in);
                    END IF;
                    IF l_name = 'EIO_TRIAGE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRIAGE',
                                                        value_in           => id_triage_in);
                    END IF;
                    IF l_name = 'EIO_TRIAGE_FRST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIRST_TRIAGE',
                                                        value_in           => id_first_triage_in);
                    END IF;
                    IF l_name = 'EIO_TRIAGE_FRST_WR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIRST_TRIAGE_WR',
                                                        value_in           => id_first_triage_wr_in);
                    END IF;
                    IF l_name = 'EIO_TRIAGE_WR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRIAGE_WHITE_REASON',
                                                        value_in           => id_triage_white_reason_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_episode_in                 IN epis_info.id_episode%TYPE,
        id_bed_in                     IN epis_info.id_bed%TYPE DEFAULT NULL,
        id_room_in                    IN epis_info.id_room%TYPE DEFAULT NULL,
        id_professional_in            IN epis_info.id_professional%TYPE DEFAULT NULL,
        norton_in                     IN epis_info.norton%TYPE DEFAULT NULL,
        flg_hydric_in                 IN epis_info.flg_hydric%TYPE DEFAULT NULL,
        flg_wound_in                  IN epis_info.flg_wound%TYPE DEFAULT NULL,
        companion_in                  IN epis_info.companion%TYPE DEFAULT NULL,
        flg_unknown_in                IN epis_info.flg_unknown%TYPE DEFAULT NULL,
        desc_info_in                  IN epis_info.desc_info%TYPE DEFAULT NULL,
        id_schedule_in                IN epis_info.id_schedule%TYPE DEFAULT NULL,
        id_first_nurse_resp_in        IN epis_info.id_first_nurse_resp%TYPE DEFAULT NULL,
        flg_status_in                 IN epis_info.flg_status%TYPE DEFAULT NULL,
        id_dep_clin_serv_in           IN epis_info.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_first_dep_clin_serv_in     IN epis_info.id_first_dep_clin_serv%TYPE DEFAULT NULL,
        id_institution_usf_in         IN epis_info.id_institution_usf%TYPE DEFAULT NULL,
        id_prof_team_in               IN epis_info.id_prof_team%TYPE DEFAULT NULL,
        id_triage_in                  IN epis_info.id_triage%TYPE DEFAULT NULL,
        id_triage_white_reason_in     IN epis_info.id_triage_white_reason%TYPE DEFAULT NULL,
        id_first_triage_in            IN epis_info.id_first_triage%TYPE DEFAULT NULL,
        id_first_triage_wr_in         IN epis_info.id_first_triage_wr%TYPE DEFAULT NULL,
        dt_harvest_tstz_in            IN epis_info.dt_harvest_tstz%TYPE DEFAULT NULL,
        dt_last_interaction_tstz_in   IN epis_info.dt_last_interaction_tstz%TYPE DEFAULT NULL,
        dt_movement_tstz_in           IN epis_info.dt_movement_tstz%TYPE DEFAULT NULL,
        dt_next_drug_tstz_in          IN epis_info.dt_next_drug_tstz%TYPE DEFAULT NULL,
        dt_first_obs_tstz_in          IN epis_info.dt_first_obs_tstz%TYPE DEFAULT NULL,
        dt_next_intervention_tstz_in  IN epis_info.dt_next_intervention_tstz%TYPE DEFAULT NULL,
        dt_next_vital_sign_tstz_in    IN epis_info.dt_next_vital_sign_tstz%TYPE DEFAULT NULL,
        dt_next_position_tstz_in      IN epis_info.dt_next_position_tstz%TYPE DEFAULT NULL,
        dt_entrance_room_tstz_in      IN epis_info.dt_entrance_room_tstz%TYPE DEFAULT NULL,
        dt_harvest_mov_tstz_in        IN epis_info.dt_harvest_mov_tstz%TYPE DEFAULT NULL,
        dt_first_nurse_obs_tstz_in    IN epis_info.dt_first_nurse_obs_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_exe_tstz_in IN epis_info.dt_first_analysis_exe_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_req_tstz_in IN epis_info.dt_first_analysis_req_tstz%TYPE DEFAULT NULL,
        dt_first_image_exec_tstz_in   IN epis_info.dt_first_image_exec_tstz%TYPE DEFAULT NULL,
        dt_first_image_req_tstz_in    IN epis_info.dt_first_image_req_tstz%TYPE DEFAULT NULL,
        dt_first_drug_prsc_tstz_in    IN epis_info.dt_first_drug_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_drug_take_tstz_in    IN epis_info.dt_first_drug_take_tstz%TYPE DEFAULT NULL,
        dt_first_interv_prsc_tstz_in  IN epis_info.dt_first_interv_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_interv_take_tstz_in  IN epis_info.dt_first_interv_take_tstz%TYPE DEFAULT NULL,
        dt_first_inst_obs_tstz_in     IN epis_info.dt_first_inst_obs_tstz%TYPE DEFAULT NULL,
        dt_init_in                    IN epis_info.dt_init%TYPE DEFAULT NULL,
        id_prof_first_obs_in          IN epis_info.id_prof_first_obs%TYPE DEFAULT NULL,
        id_prof_first_nurse_obs_in    IN epis_info.id_prof_first_nurse_obs%TYPE DEFAULT NULL,
        dt_first_sch_in               IN epis_info.dt_first_sch%TYPE DEFAULT NULL,
        dt_first_nurse_sch_in         IN epis_info.dt_first_nurse_sch%TYPE DEFAULT NULL,
        id_prof_first_sch_in          IN epis_info.id_prof_first_sch%TYPE DEFAULT NULL,
        id_prof_first_nurse_sch_in    IN epis_info.id_prof_first_nurse_sch%TYPE DEFAULT NULL,
        id_patient_in                 IN epis_info.id_patient%TYPE DEFAULT NULL,
        flg_dsch_status_in            IN epis_info.flg_dsch_status%TYPE DEFAULT NULL,
        id_disch_reas_dest_in         IN epis_info.id_disch_reas_dest%TYPE DEFAULT NULL,
        dt_med_tstz_in                IN epis_info.dt_med_tstz%TYPE DEFAULT NULL,
        dt_pend_active_tstz_in        IN epis_info.dt_pend_active_tstz%TYPE DEFAULT NULL,
        id_dcs_requested_in           IN epis_info.id_dcs_requested%TYPE DEFAULT NULL,
        id_instit_requested_in        IN epis_info.id_instit_requested%TYPE DEFAULT NULL,
        id_prof_schedules_in          IN epis_info.id_prof_schedules%TYPE DEFAULT NULL,
        flg_sch_status_in             IN epis_info.flg_sch_status%TYPE DEFAULT NULL,
        id_complaint_in               IN epis_info.id_complaint%TYPE DEFAULT NULL,
        flg_urgency_in                IN epis_info.flg_urgency%TYPE DEFAULT NULL,
        sch_group_id_patient_in       IN epis_info.sch_group_id_patient%TYPE DEFAULT NULL,
        id_schedule_outp_in           IN epis_info.id_schedule_outp%TYPE DEFAULT NULL,
        sch_prof_outp_id_prof_in      IN epis_info.sch_prof_outp_id_prof%TYPE DEFAULT NULL,
        id_schedule_sr_in             IN epis_info.id_schedule_sr%TYPE DEFAULT NULL,
        triage_acuity_in              IN epis_info.triage_acuity%TYPE DEFAULT NULL,
        triage_color_text_in          IN epis_info.triage_color_text%TYPE DEFAULT NULL,
        triage_rank_acuity_in         IN epis_info.triage_rank_acuity%TYPE DEFAULT NULL,
        triage_flg_letter_in          IN epis_info.triage_flg_letter%TYPE DEFAULT NULL,
        fast_track_icon_in            IN epis_info.fast_track_icon%TYPE DEFAULT NULL,
        fast_track_desc_in            IN epis_info.fast_track_desc%TYPE DEFAULT NULL,
        fast_track_color_in           IN epis_info.fast_track_color%TYPE DEFAULT NULL,
        id_room_scheduled_in          IN epis_info.id_room_scheduled%TYPE DEFAULT NULL,
        room_sch_flg_status_in        IN epis_info.room_sch_flg_status%TYPE DEFAULT NULL,
        flg_pat_status_in             IN epis_info.flg_pat_status%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in         IN epis_info.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_surgery_time_det_tstz_in   IN epis_info.dt_surgery_time_det_tstz%TYPE DEFAULT NULL,
        desc_diet_in                  IN epis_info.desc_diet%TYPE DEFAULT NULL,
        dt_admin_tstz_in              IN epis_info.dt_admin_tstz%TYPE DEFAULT NULL,
        id_triage_color_in            IN epis_info.id_triage_color%TYPE DEFAULT NULL,
        id_software_in                IN epis_info.id_software%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_episode_in                 => id_episode_in,
            id_bed_in                     => id_bed_in,
            id_room_in                    => id_room_in,
            id_professional_in            => id_professional_in,
            norton_in                     => norton_in,
            flg_hydric_in                 => flg_hydric_in,
            flg_wound_in                  => flg_wound_in,
            companion_in                  => companion_in,
            flg_unknown_in                => flg_unknown_in,
            desc_info_in                  => desc_info_in,
            id_schedule_in                => id_schedule_in,
            id_first_nurse_resp_in        => id_first_nurse_resp_in,
            flg_status_in                 => flg_status_in,
            id_dep_clin_serv_in           => id_dep_clin_serv_in,
            id_first_dep_clin_serv_in     => id_first_dep_clin_serv_in,
            id_institution_usf_in         => id_institution_usf_in,
            id_prof_team_in               => id_prof_team_in,
            id_triage_in                  => id_triage_in,
            id_triage_white_reason_in     => id_triage_white_reason_in,
            id_first_triage_in            => id_first_triage_in,
            id_first_triage_wr_in         => id_first_triage_wr_in,
            dt_harvest_tstz_in            => dt_harvest_tstz_in,
            dt_last_interaction_tstz_in   => dt_last_interaction_tstz_in,
            dt_movement_tstz_in           => dt_movement_tstz_in,
            dt_next_drug_tstz_in          => dt_next_drug_tstz_in,
            dt_first_obs_tstz_in          => dt_first_obs_tstz_in,
            dt_next_intervention_tstz_in  => dt_next_intervention_tstz_in,
            dt_next_vital_sign_tstz_in    => dt_next_vital_sign_tstz_in,
            dt_next_position_tstz_in      => dt_next_position_tstz_in,
            dt_entrance_room_tstz_in      => dt_entrance_room_tstz_in,
            dt_harvest_mov_tstz_in        => dt_harvest_mov_tstz_in,
            dt_first_nurse_obs_tstz_in    => dt_first_nurse_obs_tstz_in,
            dt_first_analysis_exe_tstz_in => dt_first_analysis_exe_tstz_in,
            dt_first_analysis_req_tstz_in => dt_first_analysis_req_tstz_in,
            dt_first_image_exec_tstz_in   => dt_first_image_exec_tstz_in,
            dt_first_image_req_tstz_in    => dt_first_image_req_tstz_in,
            dt_first_drug_prsc_tstz_in    => dt_first_drug_prsc_tstz_in,
            dt_first_drug_take_tstz_in    => dt_first_drug_take_tstz_in,
            dt_first_interv_prsc_tstz_in  => dt_first_interv_prsc_tstz_in,
            dt_first_interv_take_tstz_in  => dt_first_interv_take_tstz_in,
            dt_first_inst_obs_tstz_in     => dt_first_inst_obs_tstz_in,
            dt_init_in                    => dt_init_in,
            id_prof_first_obs_in          => id_prof_first_obs_in,
            id_prof_first_nurse_obs_in    => id_prof_first_nurse_obs_in,
            dt_first_sch_in               => dt_first_sch_in,
            dt_first_nurse_sch_in         => dt_first_nurse_sch_in,
            id_prof_first_sch_in          => id_prof_first_sch_in,
            id_prof_first_nurse_sch_in    => id_prof_first_nurse_sch_in,
            id_patient_in                 => id_patient_in,
            flg_dsch_status_in            => flg_dsch_status_in,
            id_disch_reas_dest_in         => id_disch_reas_dest_in,
            dt_med_tstz_in                => dt_med_tstz_in,
            dt_pend_active_tstz_in        => dt_pend_active_tstz_in,
            id_dcs_requested_in           => id_dcs_requested_in,
            id_instit_requested_in        => id_instit_requested_in,
            id_prof_schedules_in          => id_prof_schedules_in,
            flg_sch_status_in             => flg_sch_status_in,
            id_complaint_in               => id_complaint_in,
            flg_urgency_in                => flg_urgency_in,
            sch_group_id_patient_in       => sch_group_id_patient_in,
            id_schedule_outp_in           => id_schedule_outp_in,
            sch_prof_outp_id_prof_in      => sch_prof_outp_id_prof_in,
            id_schedule_sr_in             => id_schedule_sr_in,
            triage_acuity_in              => triage_acuity_in,
            triage_color_text_in          => triage_color_text_in,
            triage_rank_acuity_in         => triage_rank_acuity_in,
            triage_flg_letter_in          => triage_flg_letter_in,
            fast_track_icon_in            => fast_track_icon_in,
            fast_track_desc_in            => fast_track_desc_in,
            fast_track_color_in           => fast_track_color_in,
            id_room_scheduled_in          => id_room_scheduled_in,
            room_sch_flg_status_in        => room_sch_flg_status_in,
            flg_pat_status_in             => flg_pat_status_in,
            dt_room_entry_tstz_in         => dt_room_entry_tstz_in,
            dt_surgery_time_det_tstz_in   => dt_surgery_time_det_tstz_in,
            desc_diet_in                  => desc_diet_in,
            dt_admin_tstz_in              => dt_admin_tstz_in,
            id_triage_color_in            => id_triage_color_in,
            id_software_in                => id_software_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_info%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_info%ROWTYPE := rec_in;
    BEGIN
        ins(id_episode_in                 => l_rec.id_episode,
            id_bed_in                     => l_rec.id_bed,
            id_room_in                    => l_rec.id_room,
            id_professional_in            => l_rec.id_professional,
            norton_in                     => l_rec.norton,
            flg_hydric_in                 => l_rec.flg_hydric,
            flg_wound_in                  => l_rec.flg_wound,
            companion_in                  => l_rec.companion,
            flg_unknown_in                => l_rec.flg_unknown,
            desc_info_in                  => l_rec.desc_info,
            id_schedule_in                => l_rec.id_schedule,
            id_first_nurse_resp_in        => l_rec.id_first_nurse_resp,
            flg_status_in                 => l_rec.flg_status,
            id_dep_clin_serv_in           => l_rec.id_dep_clin_serv,
            id_first_dep_clin_serv_in     => l_rec.id_first_dep_clin_serv,
            id_institution_usf_in         => l_rec.id_institution_usf,
            id_prof_team_in               => l_rec.id_prof_team,
            id_triage_in                  => l_rec.id_triage,
            id_triage_white_reason_in     => l_rec.id_triage_white_reason,
            id_first_triage_in            => l_rec.id_first_triage,
            id_first_triage_wr_in         => l_rec.id_first_triage_wr,
            dt_harvest_tstz_in            => l_rec.dt_harvest_tstz,
            dt_last_interaction_tstz_in   => l_rec.dt_last_interaction_tstz,
            dt_movement_tstz_in           => l_rec.dt_movement_tstz,
            dt_next_drug_tstz_in          => l_rec.dt_next_drug_tstz,
            dt_first_obs_tstz_in          => l_rec.dt_first_obs_tstz,
            dt_next_intervention_tstz_in  => l_rec.dt_next_intervention_tstz,
            dt_next_vital_sign_tstz_in    => l_rec.dt_next_vital_sign_tstz,
            dt_next_position_tstz_in      => l_rec.dt_next_position_tstz,
            dt_entrance_room_tstz_in      => l_rec.dt_entrance_room_tstz,
            dt_harvest_mov_tstz_in        => l_rec.dt_harvest_mov_tstz,
            dt_first_nurse_obs_tstz_in    => l_rec.dt_first_nurse_obs_tstz,
            dt_first_analysis_exe_tstz_in => l_rec.dt_first_analysis_exe_tstz,
            dt_first_analysis_req_tstz_in => l_rec.dt_first_analysis_req_tstz,
            dt_first_image_exec_tstz_in   => l_rec.dt_first_image_exec_tstz,
            dt_first_image_req_tstz_in    => l_rec.dt_first_image_req_tstz,
            dt_first_drug_prsc_tstz_in    => l_rec.dt_first_drug_prsc_tstz,
            dt_first_drug_take_tstz_in    => l_rec.dt_first_drug_take_tstz,
            dt_first_interv_prsc_tstz_in  => l_rec.dt_first_interv_prsc_tstz,
            dt_first_interv_take_tstz_in  => l_rec.dt_first_interv_take_tstz,
            dt_first_inst_obs_tstz_in     => l_rec.dt_first_inst_obs_tstz,
            dt_init_in                    => l_rec.dt_init,
            id_prof_first_obs_in          => l_rec.id_prof_first_obs,
            id_prof_first_nurse_obs_in    => l_rec.id_prof_first_nurse_obs,
            dt_first_sch_in               => l_rec.dt_first_sch,
            dt_first_nurse_sch_in         => l_rec.dt_first_nurse_sch,
            id_prof_first_sch_in          => l_rec.id_prof_first_sch,
            id_prof_first_nurse_sch_in    => l_rec.id_prof_first_nurse_sch,
            id_patient_in                 => l_rec.id_patient,
            flg_dsch_status_in            => l_rec.flg_dsch_status,
            id_disch_reas_dest_in         => l_rec.id_disch_reas_dest,
            dt_med_tstz_in                => l_rec.dt_med_tstz,
            dt_pend_active_tstz_in        => l_rec.dt_pend_active_tstz,
            id_dcs_requested_in           => l_rec.id_dcs_requested,
            id_instit_requested_in        => l_rec.id_instit_requested,
            id_prof_schedules_in          => l_rec.id_prof_schedules,
            flg_sch_status_in             => l_rec.flg_sch_status,
            id_complaint_in               => l_rec.id_complaint,
            flg_urgency_in                => l_rec.flg_urgency,
            sch_group_id_patient_in       => l_rec.sch_group_id_patient,
            id_schedule_outp_in           => l_rec.id_schedule_outp,
            sch_prof_outp_id_prof_in      => l_rec.sch_prof_outp_id_prof,
            id_schedule_sr_in             => l_rec.id_schedule_sr,
            triage_acuity_in              => l_rec.triage_acuity,
            triage_color_text_in          => l_rec.triage_color_text,
            triage_rank_acuity_in         => l_rec.triage_rank_acuity,
            triage_flg_letter_in          => l_rec.triage_flg_letter,
            fast_track_icon_in            => l_rec.fast_track_icon,
            fast_track_desc_in            => l_rec.fast_track_desc,
            fast_track_color_in           => l_rec.fast_track_color,
            id_room_scheduled_in          => l_rec.id_room_scheduled,
            room_sch_flg_status_in        => l_rec.room_sch_flg_status,
            flg_pat_status_in             => l_rec.flg_pat_status,
            dt_room_entry_tstz_in         => l_rec.dt_room_entry_tstz,
            dt_surgery_time_det_tstz_in   => l_rec.dt_surgery_time_det_tstz,
            desc_diet_in                  => l_rec.desc_diet,
            dt_admin_tstz_in              => l_rec.dt_admin_tstz,
            id_triage_color_in            => l_rec.id_triage_color,
            id_software_in                => l_rec.id_software,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_info%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_info_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO epis_info
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BED _' || indx,
                                                        value_in           => rows_in(indx).id_bed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROOM _' || indx,
                                                        value_in           => rows_in(indx).id_room,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NORTON _' || indx,
                                                        value_in           => rows_in(indx).norton,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_HYDRIC _' || indx,
                                                        value_in           => rows_in(indx).flg_hydric,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_WOUND _' || indx,
                                                        value_in           => rows_in(indx).flg_wound,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'COMPANION _' || indx,
                                                        value_in           => rows_in(indx).companion,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_UNKNOWN _' || indx,
                                                        value_in           => rows_in(indx).flg_unknown,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DESC_INFO _' || indx,
                                                        value_in           => rows_in(indx).desc_info,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHEDULE _' || indx,
                                                        value_in           => rows_in(indx).id_schedule,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_FIRST_NURSE_RESP _' || indx,
                                                        value_in           => rows_in(indx).id_first_nurse_resp,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV _' || indx,
                                                        value_in           => rows_in(indx).id_dep_clin_serv,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_FIRST_DEP_CLIN_SERV _' || indx,
                                                        value_in           => rows_in(indx).id_first_dep_clin_serv,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION_USF _' || indx,
                                                        value_in           => rows_in(indx).id_institution_usf,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_TEAM _' || indx,
                                                        value_in           => rows_in(indx).id_prof_team,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TRIAGE _' || indx,
                                                        value_in           => rows_in(indx).id_triage,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TRIAGE_WHITE_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_triage_white_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_FIRST_TRIAGE _' || indx,
                                                        value_in           => rows_in(indx).id_first_triage,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_FIRST_TRIAGE_WR _' || indx,
                                                        value_in           => rows_in(indx).id_first_triage_wr,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_HARVEST_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_harvest_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_LAST_INTERACTION_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_last_interaction_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_MOVEMENT_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_movement_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_NEXT_DRUG_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_next_drug_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FIRST_OBS_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_first_obs_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_NEXT_INTERVENTION_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_next_intervention_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_NEXT_VITAL_SIGN_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_next_vital_sign_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_NEXT_POSITION_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_next_position_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ENTRANCE_ROOM_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_entrance_room_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_HARVEST_MOV_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_harvest_mov_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FIRST_NURSE_OBS_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_first_nurse_obs_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FIRST_ANALYSIS_EXE_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_first_analysis_exe_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FIRST_ANALYSIS_REQ_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_first_analysis_req_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FIRST_IMAGE_EXEC_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_first_image_exec_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FIRST_IMAGE_REQ_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_first_image_req_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FIRST_DRUG_PRSC_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_first_drug_prsc_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FIRST_DRUG_TAKE_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_first_drug_take_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FIRST_INTERV_PRSC_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_first_interv_prsc_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FIRST_INTERV_TAKE_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_first_interv_take_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FIRST_INST_OBS_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_first_inst_obs_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_INIT _' || indx,
                                                        value_in           => rows_in(indx).dt_init,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_FIRST_OBS _' || indx,
                                                        value_in           => rows_in(indx).id_prof_first_obs,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_FIRST_NURSE_OBS _' || indx,
                                                        value_in           => rows_in(indx).id_prof_first_nurse_obs,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FIRST_SCH _' || indx,
                                                        value_in           => rows_in(indx).dt_first_sch,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FIRST_NURSE_SCH _' || indx,
                                                        value_in           => rows_in(indx).dt_first_nurse_sch,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_FIRST_SCH _' || indx,
                                                        value_in           => rows_in(indx).id_prof_first_sch,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_FIRST_NURSE_SCH _' || indx,
                                                        value_in           => rows_in(indx).id_prof_first_nurse_sch,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_DSCH_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_dsch_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DISCH_REAS_DEST _' || indx,
                                                        value_in           => rows_in(indx).id_disch_reas_dest,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_MED_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_med_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PEND_ACTIVE_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_pend_active_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DCS_REQUESTED _' || indx,
                                                        value_in           => rows_in(indx).id_dcs_requested,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTIT_REQUESTED _' || indx,
                                                        value_in           => rows_in(indx).id_instit_requested,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_SCHEDULES _' || indx,
                                                        value_in           => rows_in(indx).id_prof_schedules,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_SCH_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_sch_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPLAINT _' || indx,
                                                        value_in           => rows_in(indx).id_complaint,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_URGENCY _' || indx,
                                                        value_in           => rows_in(indx).flg_urgency,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'SCH_GROUP_ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).sch_group_id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHEDULE_OUTP _' || indx,
                                                        value_in           => rows_in(indx).id_schedule_outp,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'SCH_PROF_OUTP_ID_PROF _' || indx,
                                                        value_in           => rows_in(indx).sch_prof_outp_id_prof,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHEDULE_SR _' || indx,
                                                        value_in           => rows_in(indx).id_schedule_sr,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TRIAGE_ACUITY _' || indx,
                                                        value_in           => rows_in(indx).triage_acuity,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TRIAGE_COLOR_TEXT _' || indx,
                                                        value_in           => rows_in(indx).triage_color_text,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TRIAGE_RANK_ACUITY _' || indx,
                                                        value_in           => rows_in(indx).triage_rank_acuity,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TRIAGE_FLG_LETTER _' || indx,
                                                        value_in           => rows_in(indx).triage_flg_letter,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FAST_TRACK_ICON _' || indx,
                                                        value_in           => rows_in(indx).fast_track_icon,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FAST_TRACK_DESC _' || indx,
                                                        value_in           => rows_in(indx).fast_track_desc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FAST_TRACK_COLOR _' || indx,
                                                        value_in           => rows_in(indx).fast_track_color,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROOM_SCHEDULED _' || indx,
                                                        value_in           => rows_in(indx).id_room_scheduled,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ROOM_SCH_FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).room_sch_flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_PAT_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_pat_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ROOM_ENTRY_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_room_entry_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_SURGERY_TIME_DET_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_surgery_time_det_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DESC_DIET _' || indx,
                                                        value_in           => rows_in(indx).desc_diet,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ADMIN_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_admin_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TRIAGE_COLOR _' || indx,
                                                        value_in           => rows_in(indx).id_triage_color,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE _' || indx,
                                                        value_in           => rows_in(indx).id_software,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'EPIS_INFO',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_info_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_episode_in                  IN epis_info.id_episode%TYPE,
        id_bed_in                      IN epis_info.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                     IN BOOLEAN := TRUE,
        id_room_in                     IN epis_info.id_room%TYPE DEFAULT NULL,
        id_room_nin                    IN BOOLEAN := TRUE,
        id_professional_in             IN epis_info.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        norton_in                      IN epis_info.norton%TYPE DEFAULT NULL,
        norton_nin                     IN BOOLEAN := TRUE,
        flg_hydric_in                  IN epis_info.flg_hydric%TYPE DEFAULT NULL,
        flg_hydric_nin                 IN BOOLEAN := TRUE,
        flg_wound_in                   IN epis_info.flg_wound%TYPE DEFAULT NULL,
        flg_wound_nin                  IN BOOLEAN := TRUE,
        companion_in                   IN epis_info.companion%TYPE DEFAULT NULL,
        companion_nin                  IN BOOLEAN := TRUE,
        flg_unknown_in                 IN epis_info.flg_unknown%TYPE DEFAULT NULL,
        flg_unknown_nin                IN BOOLEAN := TRUE,
        desc_info_in                   IN epis_info.desc_info%TYPE DEFAULT NULL,
        desc_info_nin                  IN BOOLEAN := TRUE,
        id_schedule_in                 IN epis_info.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin                IN BOOLEAN := TRUE,
        id_first_nurse_resp_in         IN epis_info.id_first_nurse_resp%TYPE DEFAULT NULL,
        id_first_nurse_resp_nin        IN BOOLEAN := TRUE,
        flg_status_in                  IN epis_info.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        id_dep_clin_serv_in            IN epis_info.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin           IN BOOLEAN := TRUE,
        id_first_dep_clin_serv_in      IN epis_info.id_first_dep_clin_serv%TYPE DEFAULT NULL,
        id_first_dep_clin_serv_nin     IN BOOLEAN := TRUE,
        id_institution_usf_in          IN epis_info.id_institution_usf%TYPE DEFAULT NULL,
        id_institution_usf_nin         IN BOOLEAN := TRUE,
        id_prof_team_in                IN epis_info.id_prof_team%TYPE DEFAULT NULL,
        id_prof_team_nin               IN BOOLEAN := TRUE,
        id_triage_in                   IN epis_info.id_triage%TYPE DEFAULT NULL,
        id_triage_nin                  IN BOOLEAN := TRUE,
        id_triage_white_reason_in      IN epis_info.id_triage_white_reason%TYPE DEFAULT NULL,
        id_triage_white_reason_nin     IN BOOLEAN := TRUE,
        id_first_triage_in             IN epis_info.id_first_triage%TYPE DEFAULT NULL,
        id_first_triage_nin            IN BOOLEAN := TRUE,
        id_first_triage_wr_in          IN epis_info.id_first_triage_wr%TYPE DEFAULT NULL,
        id_first_triage_wr_nin         IN BOOLEAN := TRUE,
        dt_harvest_tstz_in             IN epis_info.dt_harvest_tstz%TYPE DEFAULT NULL,
        dt_harvest_tstz_nin            IN BOOLEAN := TRUE,
        dt_last_interaction_tstz_in    IN epis_info.dt_last_interaction_tstz%TYPE DEFAULT NULL,
        dt_last_interaction_tstz_nin   IN BOOLEAN := TRUE,
        dt_movement_tstz_in            IN epis_info.dt_movement_tstz%TYPE DEFAULT NULL,
        dt_movement_tstz_nin           IN BOOLEAN := TRUE,
        dt_next_drug_tstz_in           IN epis_info.dt_next_drug_tstz%TYPE DEFAULT NULL,
        dt_next_drug_tstz_nin          IN BOOLEAN := TRUE,
        dt_first_obs_tstz_in           IN epis_info.dt_first_obs_tstz%TYPE DEFAULT NULL,
        dt_first_obs_tstz_nin          IN BOOLEAN := TRUE,
        dt_next_intervention_tstz_in   IN epis_info.dt_next_intervention_tstz%TYPE DEFAULT NULL,
        dt_next_intervention_tstz_nin  IN BOOLEAN := TRUE,
        dt_next_vital_sign_tstz_in     IN epis_info.dt_next_vital_sign_tstz%TYPE DEFAULT NULL,
        dt_next_vital_sign_tstz_nin    IN BOOLEAN := TRUE,
        dt_next_position_tstz_in       IN epis_info.dt_next_position_tstz%TYPE DEFAULT NULL,
        dt_next_position_tstz_nin      IN BOOLEAN := TRUE,
        dt_entrance_room_tstz_in       IN epis_info.dt_entrance_room_tstz%TYPE DEFAULT NULL,
        dt_entrance_room_tstz_nin      IN BOOLEAN := TRUE,
        dt_harvest_mov_tstz_in         IN epis_info.dt_harvest_mov_tstz%TYPE DEFAULT NULL,
        dt_harvest_mov_tstz_nin        IN BOOLEAN := TRUE,
        dt_first_nurse_obs_tstz_in     IN epis_info.dt_first_nurse_obs_tstz%TYPE DEFAULT NULL,
        dt_first_nurse_obs_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_analysis_exe_tstz_in  IN epis_info.dt_first_analysis_exe_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_exe_tstz_nin IN BOOLEAN := TRUE,
        dt_first_analysis_req_tstz_in  IN epis_info.dt_first_analysis_req_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_req_tstz_nin IN BOOLEAN := TRUE,
        dt_first_image_exec_tstz_in    IN epis_info.dt_first_image_exec_tstz%TYPE DEFAULT NULL,
        dt_first_image_exec_tstz_nin   IN BOOLEAN := TRUE,
        dt_first_image_req_tstz_in     IN epis_info.dt_first_image_req_tstz%TYPE DEFAULT NULL,
        dt_first_image_req_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_drug_prsc_tstz_in     IN epis_info.dt_first_drug_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_drug_prsc_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_drug_take_tstz_in     IN epis_info.dt_first_drug_take_tstz%TYPE DEFAULT NULL,
        dt_first_drug_take_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_interv_prsc_tstz_in   IN epis_info.dt_first_interv_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_interv_prsc_tstz_nin  IN BOOLEAN := TRUE,
        dt_first_interv_take_tstz_in   IN epis_info.dt_first_interv_take_tstz%TYPE DEFAULT NULL,
        dt_first_interv_take_tstz_nin  IN BOOLEAN := TRUE,
        dt_first_inst_obs_tstz_in      IN epis_info.dt_first_inst_obs_tstz%TYPE DEFAULT NULL,
        dt_first_inst_obs_tstz_nin     IN BOOLEAN := TRUE,
        dt_init_in                     IN epis_info.dt_init%TYPE DEFAULT NULL,
        dt_init_nin                    IN BOOLEAN := TRUE,
        id_prof_first_obs_in           IN epis_info.id_prof_first_obs%TYPE DEFAULT NULL,
        id_prof_first_obs_nin          IN BOOLEAN := TRUE,
        id_prof_first_nurse_obs_in     IN epis_info.id_prof_first_nurse_obs%TYPE DEFAULT NULL,
        id_prof_first_nurse_obs_nin    IN BOOLEAN := TRUE,
        dt_first_sch_in                IN epis_info.dt_first_sch%TYPE DEFAULT NULL,
        dt_first_sch_nin               IN BOOLEAN := TRUE,
        dt_first_nurse_sch_in          IN epis_info.dt_first_nurse_sch%TYPE DEFAULT NULL,
        dt_first_nurse_sch_nin         IN BOOLEAN := TRUE,
        id_prof_first_sch_in           IN epis_info.id_prof_first_sch%TYPE DEFAULT NULL,
        id_prof_first_sch_nin          IN BOOLEAN := TRUE,
        id_prof_first_nurse_sch_in     IN epis_info.id_prof_first_nurse_sch%TYPE DEFAULT NULL,
        id_prof_first_nurse_sch_nin    IN BOOLEAN := TRUE,
        id_patient_in                  IN epis_info.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        flg_dsch_status_in             IN epis_info.flg_dsch_status%TYPE DEFAULT NULL,
        flg_dsch_status_nin            IN BOOLEAN := TRUE,
        id_disch_reas_dest_in          IN epis_info.id_disch_reas_dest%TYPE DEFAULT NULL,
        id_disch_reas_dest_nin         IN BOOLEAN := TRUE,
        dt_med_tstz_in                 IN epis_info.dt_med_tstz%TYPE DEFAULT NULL,
        dt_med_tstz_nin                IN BOOLEAN := TRUE,
        dt_pend_active_tstz_in         IN epis_info.dt_pend_active_tstz%TYPE DEFAULT NULL,
        dt_pend_active_tstz_nin        IN BOOLEAN := TRUE,
        id_dcs_requested_in            IN epis_info.id_dcs_requested%TYPE DEFAULT NULL,
        id_dcs_requested_nin           IN BOOLEAN := TRUE,
        id_instit_requested_in         IN epis_info.id_instit_requested%TYPE DEFAULT NULL,
        id_instit_requested_nin        IN BOOLEAN := TRUE,
        id_prof_schedules_in           IN epis_info.id_prof_schedules%TYPE DEFAULT NULL,
        id_prof_schedules_nin          IN BOOLEAN := TRUE,
        flg_sch_status_in              IN epis_info.flg_sch_status%TYPE DEFAULT NULL,
        flg_sch_status_nin             IN BOOLEAN := TRUE,
        id_complaint_in                IN epis_info.id_complaint%TYPE DEFAULT NULL,
        id_complaint_nin               IN BOOLEAN := TRUE,
        flg_urgency_in                 IN epis_info.flg_urgency%TYPE DEFAULT NULL,
        flg_urgency_nin                IN BOOLEAN := TRUE,
        sch_group_id_patient_in        IN epis_info.sch_group_id_patient%TYPE DEFAULT NULL,
        sch_group_id_patient_nin       IN BOOLEAN := TRUE,
        id_schedule_outp_in            IN epis_info.id_schedule_outp%TYPE DEFAULT NULL,
        id_schedule_outp_nin           IN BOOLEAN := TRUE,
        sch_prof_outp_id_prof_in       IN epis_info.sch_prof_outp_id_prof%TYPE DEFAULT NULL,
        sch_prof_outp_id_prof_nin      IN BOOLEAN := TRUE,
        id_schedule_sr_in              IN epis_info.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin             IN BOOLEAN := TRUE,
        triage_acuity_in               IN epis_info.triage_acuity%TYPE DEFAULT NULL,
        triage_acuity_nin              IN BOOLEAN := TRUE,
        triage_color_text_in           IN epis_info.triage_color_text%TYPE DEFAULT NULL,
        triage_color_text_nin          IN BOOLEAN := TRUE,
        triage_rank_acuity_in          IN epis_info.triage_rank_acuity%TYPE DEFAULT NULL,
        triage_rank_acuity_nin         IN BOOLEAN := TRUE,
        triage_flg_letter_in           IN epis_info.triage_flg_letter%TYPE DEFAULT NULL,
        triage_flg_letter_nin          IN BOOLEAN := TRUE,
        fast_track_icon_in             IN epis_info.fast_track_icon%TYPE DEFAULT NULL,
        fast_track_icon_nin            IN BOOLEAN := TRUE,
        fast_track_desc_in             IN epis_info.fast_track_desc%TYPE DEFAULT NULL,
        fast_track_desc_nin            IN BOOLEAN := TRUE,
        fast_track_color_in            IN epis_info.fast_track_color%TYPE DEFAULT NULL,
        fast_track_color_nin           IN BOOLEAN := TRUE,
        id_room_scheduled_in           IN epis_info.id_room_scheduled%TYPE DEFAULT NULL,
        id_room_scheduled_nin          IN BOOLEAN := TRUE,
        room_sch_flg_status_in         IN epis_info.room_sch_flg_status%TYPE DEFAULT NULL,
        room_sch_flg_status_nin        IN BOOLEAN := TRUE,
        flg_pat_status_in              IN epis_info.flg_pat_status%TYPE DEFAULT NULL,
        flg_pat_status_nin             IN BOOLEAN := TRUE,
        dt_room_entry_tstz_in          IN epis_info.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_nin         IN BOOLEAN := TRUE,
        dt_surgery_time_det_tstz_in    IN epis_info.dt_surgery_time_det_tstz%TYPE DEFAULT NULL,
        dt_surgery_time_det_tstz_nin   IN BOOLEAN := TRUE,
        desc_diet_in                   IN epis_info.desc_diet%TYPE DEFAULT NULL,
        desc_diet_nin                  IN BOOLEAN := TRUE,
        dt_admin_tstz_in               IN epis_info.dt_admin_tstz%TYPE DEFAULT NULL,
        dt_admin_tstz_nin              IN BOOLEAN := TRUE,
        id_triage_color_in             IN epis_info.id_triage_color%TYPE DEFAULT NULL,
        id_triage_color_nin            IN BOOLEAN := TRUE,
        id_software_in                 IN epis_info.id_software%TYPE DEFAULT NULL,
        id_software_nin                IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
        l_rows_out                     table_varchar;
        l_id_bed_n                     NUMBER(1);
        l_id_room_n                    NUMBER(1);
        l_id_professional_n            NUMBER(1);
        l_norton_n                     NUMBER(1);
        l_flg_hydric_n                 NUMBER(1);
        l_flg_wound_n                  NUMBER(1);
        l_companion_n                  NUMBER(1);
        l_flg_unknown_n                NUMBER(1);
        l_desc_info_n                  NUMBER(1);
        l_id_schedule_n                NUMBER(1);
        l_id_first_nurse_resp_n        NUMBER(1);
        l_flg_status_n                 NUMBER(1);
        l_id_dep_clin_serv_n           NUMBER(1);
        l_id_first_dep_clin_serv_n     NUMBER(1);
        l_id_institution_usf_n         NUMBER(1);
        l_id_prof_team_n               NUMBER(1);
        l_id_triage_n                  NUMBER(1);
        l_id_triage_white_reason_n     NUMBER(1);
        l_id_first_triage_n            NUMBER(1);
        l_id_first_triage_wr_n         NUMBER(1);
        l_dt_harvest_tstz_n            NUMBER(1);
        l_dt_last_interaction_tstz_n   NUMBER(1);
        l_dt_movement_tstz_n           NUMBER(1);
        l_dt_next_drug_tstz_n          NUMBER(1);
        l_dt_first_obs_tstz_n          NUMBER(1);
        l_dt_next_intervention_tstz_n  NUMBER(1);
        l_dt_next_vital_sign_tstz_n    NUMBER(1);
        l_dt_next_position_tstz_n      NUMBER(1);
        l_dt_entrance_room_tstz_n      NUMBER(1);
        l_dt_harvest_mov_tstz_n        NUMBER(1);
        l_dt_first_nurse_obs_tstz_n    NUMBER(1);
        l_dt_first_analysis_exe_tstz_n NUMBER(1);
        l_dt_first_analysis_req_tstz_n NUMBER(1);
        l_dt_first_image_exec_tstz_n   NUMBER(1);
        l_dt_first_image_req_tstz_n    NUMBER(1);
        l_dt_first_drug_prsc_tstz_n    NUMBER(1);
        l_dt_first_drug_take_tstz_n    NUMBER(1);
        l_dt_first_interv_prsc_tstz_n  NUMBER(1);
        l_dt_first_interv_take_tstz_n  NUMBER(1);
        l_dt_first_inst_obs_tstz_n     NUMBER(1);
        l_dt_init_n                    NUMBER(1);
        l_id_prof_first_obs_n          NUMBER(1);
        l_id_prof_first_nurse_obs_n    NUMBER(1);
        l_dt_first_sch_n               NUMBER(1);
        l_dt_first_nurse_sch_n         NUMBER(1);
        l_id_prof_first_sch_n          NUMBER(1);
        l_id_prof_first_nurse_sch_n    NUMBER(1);
        l_id_patient_n                 NUMBER(1);
        l_flg_dsch_status_n            NUMBER(1);
        l_id_disch_reas_dest_n         NUMBER(1);
        l_dt_med_tstz_n                NUMBER(1);
        l_dt_pend_active_tstz_n        NUMBER(1);
        l_id_dcs_requested_n           NUMBER(1);
        l_id_instit_requested_n        NUMBER(1);
        l_id_prof_schedules_n          NUMBER(1);
        l_flg_sch_status_n             NUMBER(1);
        l_id_complaint_n               NUMBER(1);
        l_flg_urgency_n                NUMBER(1);
        l_sch_group_id_patient_n       NUMBER(1);
        l_id_schedule_outp_n           NUMBER(1);
        l_sch_prof_outp_id_prof_n      NUMBER(1);
        l_id_schedule_sr_n             NUMBER(1);
        l_triage_acuity_n              NUMBER(1);
        l_triage_color_text_n          NUMBER(1);
        l_triage_rank_acuity_n         NUMBER(1);
        l_triage_flg_letter_n          NUMBER(1);
        l_fast_track_icon_n            NUMBER(1);
        l_fast_track_desc_n            NUMBER(1);
        l_fast_track_color_n           NUMBER(1);
        l_id_room_scheduled_n          NUMBER(1);
        l_room_sch_flg_status_n        NUMBER(1);
        l_flg_pat_status_n             NUMBER(1);
        l_dt_room_entry_tstz_n         NUMBER(1);
        l_dt_surgery_time_det_tstz_n   NUMBER(1);
        l_desc_diet_n                  NUMBER(1);
        l_dt_admin_tstz_n              NUMBER(1);
        l_id_triage_color_n            NUMBER(1);
        l_id_software_n                NUMBER(1);
    BEGIN
    
        l_id_bed_n                     := sys.diutil.bool_to_int(id_bed_nin);
        l_id_room_n                    := sys.diutil.bool_to_int(id_room_nin);
        l_id_professional_n            := sys.diutil.bool_to_int(id_professional_nin);
        l_norton_n                     := sys.diutil.bool_to_int(norton_nin);
        l_flg_hydric_n                 := sys.diutil.bool_to_int(flg_hydric_nin);
        l_flg_wound_n                  := sys.diutil.bool_to_int(flg_wound_nin);
        l_companion_n                  := sys.diutil.bool_to_int(companion_nin);
        l_flg_unknown_n                := sys.diutil.bool_to_int(flg_unknown_nin);
        l_desc_info_n                  := sys.diutil.bool_to_int(desc_info_nin);
        l_id_schedule_n                := sys.diutil.bool_to_int(id_schedule_nin);
        l_id_first_nurse_resp_n        := sys.diutil.bool_to_int(id_first_nurse_resp_nin);
        l_flg_status_n                 := sys.diutil.bool_to_int(flg_status_nin);
        l_id_dep_clin_serv_n           := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_id_first_dep_clin_serv_n     := sys.diutil.bool_to_int(id_first_dep_clin_serv_nin);
        l_id_institution_usf_n         := sys.diutil.bool_to_int(id_institution_usf_nin);
        l_id_prof_team_n               := sys.diutil.bool_to_int(id_prof_team_nin);
        l_id_triage_n                  := sys.diutil.bool_to_int(id_triage_nin);
        l_id_triage_white_reason_n     := sys.diutil.bool_to_int(id_triage_white_reason_nin);
        l_id_first_triage_n            := sys.diutil.bool_to_int(id_first_triage_nin);
        l_id_first_triage_wr_n         := sys.diutil.bool_to_int(id_first_triage_wr_nin);
        l_dt_harvest_tstz_n            := sys.diutil.bool_to_int(dt_harvest_tstz_nin);
        l_dt_last_interaction_tstz_n   := sys.diutil.bool_to_int(dt_last_interaction_tstz_nin);
        l_dt_movement_tstz_n           := sys.diutil.bool_to_int(dt_movement_tstz_nin);
        l_dt_next_drug_tstz_n          := sys.diutil.bool_to_int(dt_next_drug_tstz_nin);
        l_dt_first_obs_tstz_n          := sys.diutil.bool_to_int(dt_first_obs_tstz_nin);
        l_dt_next_intervention_tstz_n  := sys.diutil.bool_to_int(dt_next_intervention_tstz_nin);
        l_dt_next_vital_sign_tstz_n    := sys.diutil.bool_to_int(dt_next_vital_sign_tstz_nin);
        l_dt_next_position_tstz_n      := sys.diutil.bool_to_int(dt_next_position_tstz_nin);
        l_dt_entrance_room_tstz_n      := sys.diutil.bool_to_int(dt_entrance_room_tstz_nin);
        l_dt_harvest_mov_tstz_n        := sys.diutil.bool_to_int(dt_harvest_mov_tstz_nin);
        l_dt_first_nurse_obs_tstz_n    := sys.diutil.bool_to_int(dt_first_nurse_obs_tstz_nin);
        l_dt_first_analysis_exe_tstz_n := sys.diutil.bool_to_int(dt_first_analysis_exe_tstz_nin);
        l_dt_first_analysis_req_tstz_n := sys.diutil.bool_to_int(dt_first_analysis_req_tstz_nin);
        l_dt_first_image_exec_tstz_n   := sys.diutil.bool_to_int(dt_first_image_exec_tstz_nin);
        l_dt_first_image_req_tstz_n    := sys.diutil.bool_to_int(dt_first_image_req_tstz_nin);
        l_dt_first_drug_prsc_tstz_n    := sys.diutil.bool_to_int(dt_first_drug_prsc_tstz_nin);
        l_dt_first_drug_take_tstz_n    := sys.diutil.bool_to_int(dt_first_drug_take_tstz_nin);
        l_dt_first_interv_prsc_tstz_n  := sys.diutil.bool_to_int(dt_first_interv_prsc_tstz_nin);
        l_dt_first_interv_take_tstz_n  := sys.diutil.bool_to_int(dt_first_interv_take_tstz_nin);
        l_dt_first_inst_obs_tstz_n     := sys.diutil.bool_to_int(dt_first_inst_obs_tstz_nin);
        l_dt_init_n                    := sys.diutil.bool_to_int(dt_init_nin);
        l_id_prof_first_obs_n          := sys.diutil.bool_to_int(id_prof_first_obs_nin);
        l_id_prof_first_nurse_obs_n    := sys.diutil.bool_to_int(id_prof_first_nurse_obs_nin);
        l_dt_first_sch_n               := sys.diutil.bool_to_int(dt_first_sch_nin);
        l_dt_first_nurse_sch_n         := sys.diutil.bool_to_int(dt_first_nurse_sch_nin);
        l_id_prof_first_sch_n          := sys.diutil.bool_to_int(id_prof_first_sch_nin);
        l_id_prof_first_nurse_sch_n    := sys.diutil.bool_to_int(id_prof_first_nurse_sch_nin);
        l_id_patient_n                 := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_dsch_status_n            := sys.diutil.bool_to_int(flg_dsch_status_nin);
        l_id_disch_reas_dest_n         := sys.diutil.bool_to_int(id_disch_reas_dest_nin);
        l_dt_med_tstz_n                := sys.diutil.bool_to_int(dt_med_tstz_nin);
        l_dt_pend_active_tstz_n        := sys.diutil.bool_to_int(dt_pend_active_tstz_nin);
        l_id_dcs_requested_n           := sys.diutil.bool_to_int(id_dcs_requested_nin);
        l_id_instit_requested_n        := sys.diutil.bool_to_int(id_instit_requested_nin);
        l_id_prof_schedules_n          := sys.diutil.bool_to_int(id_prof_schedules_nin);
        l_flg_sch_status_n             := sys.diutil.bool_to_int(flg_sch_status_nin);
        l_id_complaint_n               := sys.diutil.bool_to_int(id_complaint_nin);
        l_flg_urgency_n                := sys.diutil.bool_to_int(flg_urgency_nin);
        l_sch_group_id_patient_n       := sys.diutil.bool_to_int(sch_group_id_patient_nin);
        l_id_schedule_outp_n           := sys.diutil.bool_to_int(id_schedule_outp_nin);
        l_sch_prof_outp_id_prof_n      := sys.diutil.bool_to_int(sch_prof_outp_id_prof_nin);
        l_id_schedule_sr_n             := sys.diutil.bool_to_int(id_schedule_sr_nin);
        l_triage_acuity_n              := sys.diutil.bool_to_int(triage_acuity_nin);
        l_triage_color_text_n          := sys.diutil.bool_to_int(triage_color_text_nin);
        l_triage_rank_acuity_n         := sys.diutil.bool_to_int(triage_rank_acuity_nin);
        l_triage_flg_letter_n          := sys.diutil.bool_to_int(triage_flg_letter_nin);
        l_fast_track_icon_n            := sys.diutil.bool_to_int(fast_track_icon_nin);
        l_fast_track_desc_n            := sys.diutil.bool_to_int(fast_track_desc_nin);
        l_fast_track_color_n           := sys.diutil.bool_to_int(fast_track_color_nin);
        l_id_room_scheduled_n          := sys.diutil.bool_to_int(id_room_scheduled_nin);
        l_room_sch_flg_status_n        := sys.diutil.bool_to_int(room_sch_flg_status_nin);
        l_flg_pat_status_n             := sys.diutil.bool_to_int(flg_pat_status_nin);
        l_dt_room_entry_tstz_n         := sys.diutil.bool_to_int(dt_room_entry_tstz_nin);
        l_dt_surgery_time_det_tstz_n   := sys.diutil.bool_to_int(dt_surgery_time_det_tstz_nin);
        l_desc_diet_n                  := sys.diutil.bool_to_int(desc_diet_nin);
        l_dt_admin_tstz_n              := sys.diutil.bool_to_int(dt_admin_tstz_nin);
        l_id_triage_color_n            := sys.diutil.bool_to_int(id_triage_color_nin);
        l_id_software_n                := sys.diutil.bool_to_int(id_software_nin);
    
        UPDATE epis_info
           SET id_bed                     = decode(l_id_bed_n, 0, id_bed_in, nvl(id_bed_in, id_bed)),
               id_room                    = decode(l_id_room_n, 0, id_room_in, nvl(id_room_in, id_room)),
               id_professional            = decode(l_id_professional_n,
                                                   0,
                                                   id_professional_in,
                                                   nvl(id_professional_in, id_professional)),
               norton                     = decode(l_norton_n, 0, norton_in, nvl(norton_in, norton)),
               flg_hydric                 = decode(l_flg_hydric_n, 0, flg_hydric_in, nvl(flg_hydric_in, flg_hydric)),
               flg_wound                  = decode(l_flg_wound_n, 0, flg_wound_in, nvl(flg_wound_in, flg_wound)),
               companion                  = decode(l_companion_n, 0, companion_in, nvl(companion_in, companion)),
               flg_unknown                = decode(l_flg_unknown_n, 0, flg_unknown_in, nvl(flg_unknown_in, flg_unknown)),
               desc_info                  = decode(l_desc_info_n, 0, desc_info_in, nvl(desc_info_in, desc_info)),
               id_schedule                = decode(l_id_schedule_n, 0, id_schedule_in, nvl(id_schedule_in, id_schedule)),
               id_first_nurse_resp        = decode(l_id_first_nurse_resp_n,
                                                   0,
                                                   id_first_nurse_resp_in,
                                                   nvl(id_first_nurse_resp_in, id_first_nurse_resp)),
               flg_status                 = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_dep_clin_serv           = decode(l_id_dep_clin_serv_n,
                                                   0,
                                                   id_dep_clin_serv_in,
                                                   nvl(id_dep_clin_serv_in, id_dep_clin_serv)),
               id_first_dep_clin_serv     = decode(l_id_first_dep_clin_serv_n,
                                                   0,
                                                   id_first_dep_clin_serv_in,
                                                   nvl(id_first_dep_clin_serv_in, id_first_dep_clin_serv)),
               id_institution_usf         = decode(l_id_institution_usf_n,
                                                   0,
                                                   id_institution_usf_in,
                                                   nvl(id_institution_usf_in, id_institution_usf)),
               id_prof_team               = decode(l_id_prof_team_n,
                                                   0,
                                                   id_prof_team_in,
                                                   nvl(id_prof_team_in, id_prof_team)),
               id_triage                  = decode(l_id_triage_n, 0, id_triage_in, nvl(id_triage_in, id_triage)),
               id_triage_white_reason     = decode(l_id_triage_white_reason_n,
                                                   0,
                                                   id_triage_white_reason_in,
                                                   nvl(id_triage_white_reason_in, id_triage_white_reason)),
               id_first_triage            = decode(l_id_first_triage_n,
                                                   0,
                                                   id_first_triage_in,
                                                   nvl(id_first_triage_in, id_first_triage)),
               id_first_triage_wr         = decode(l_id_first_triage_wr_n,
                                                   0,
                                                   id_first_triage_wr_in,
                                                   nvl(id_first_triage_wr_in, id_first_triage_wr)),
               dt_harvest_tstz            = decode(l_dt_harvest_tstz_n,
                                                   0,
                                                   dt_harvest_tstz_in,
                                                   nvl(dt_harvest_tstz_in, dt_harvest_tstz)),
               dt_last_interaction_tstz   = decode(l_dt_last_interaction_tstz_n,
                                                   0,
                                                   dt_last_interaction_tstz_in,
                                                   nvl(dt_last_interaction_tstz_in, dt_last_interaction_tstz)),
               dt_movement_tstz           = decode(l_dt_movement_tstz_n,
                                                   0,
                                                   dt_movement_tstz_in,
                                                   nvl(dt_movement_tstz_in, dt_movement_tstz)),
               dt_next_drug_tstz          = decode(l_dt_next_drug_tstz_n,
                                                   0,
                                                   dt_next_drug_tstz_in,
                                                   nvl(dt_next_drug_tstz_in, dt_next_drug_tstz)),
               dt_first_obs_tstz          = decode(l_dt_first_obs_tstz_n,
                                                   0,
                                                   dt_first_obs_tstz_in,
                                                   nvl(dt_first_obs_tstz_in, dt_first_obs_tstz)),
               dt_next_intervention_tstz  = decode(l_dt_next_intervention_tstz_n,
                                                   0,
                                                   dt_next_intervention_tstz_in,
                                                   nvl(dt_next_intervention_tstz_in, dt_next_intervention_tstz)),
               dt_next_vital_sign_tstz    = decode(l_dt_next_vital_sign_tstz_n,
                                                   0,
                                                   dt_next_vital_sign_tstz_in,
                                                   nvl(dt_next_vital_sign_tstz_in, dt_next_vital_sign_tstz)),
               dt_next_position_tstz      = decode(l_dt_next_position_tstz_n,
                                                   0,
                                                   dt_next_position_tstz_in,
                                                   nvl(dt_next_position_tstz_in, dt_next_position_tstz)),
               dt_entrance_room_tstz      = decode(l_dt_entrance_room_tstz_n,
                                                   0,
                                                   dt_entrance_room_tstz_in,
                                                   nvl(dt_entrance_room_tstz_in, dt_entrance_room_tstz)),
               dt_harvest_mov_tstz        = decode(l_dt_harvest_mov_tstz_n,
                                                   0,
                                                   dt_harvest_mov_tstz_in,
                                                   nvl(dt_harvest_mov_tstz_in, dt_harvest_mov_tstz)),
               dt_first_nurse_obs_tstz    = decode(l_dt_first_nurse_obs_tstz_n,
                                                   0,
                                                   dt_first_nurse_obs_tstz_in,
                                                   nvl(dt_first_nurse_obs_tstz_in, dt_first_nurse_obs_tstz)),
               dt_first_analysis_exe_tstz = decode(l_dt_first_analysis_exe_tstz_n,
                                                   0,
                                                   dt_first_analysis_exe_tstz_in,
                                                   nvl(dt_first_analysis_exe_tstz_in, dt_first_analysis_exe_tstz)),
               dt_first_analysis_req_tstz = decode(l_dt_first_analysis_req_tstz_n,
                                                   0,
                                                   dt_first_analysis_req_tstz_in,
                                                   nvl(dt_first_analysis_req_tstz_in, dt_first_analysis_req_tstz)),
               dt_first_image_exec_tstz   = decode(l_dt_first_image_exec_tstz_n,
                                                   0,
                                                   dt_first_image_exec_tstz_in,
                                                   nvl(dt_first_image_exec_tstz_in, dt_first_image_exec_tstz)),
               dt_first_image_req_tstz    = decode(l_dt_first_image_req_tstz_n,
                                                   0,
                                                   dt_first_image_req_tstz_in,
                                                   nvl(dt_first_image_req_tstz_in, dt_first_image_req_tstz)),
               dt_first_drug_prsc_tstz    = decode(l_dt_first_drug_prsc_tstz_n,
                                                   0,
                                                   dt_first_drug_prsc_tstz_in,
                                                   nvl(dt_first_drug_prsc_tstz_in, dt_first_drug_prsc_tstz)),
               dt_first_drug_take_tstz    = decode(l_dt_first_drug_take_tstz_n,
                                                   0,
                                                   dt_first_drug_take_tstz_in,
                                                   nvl(dt_first_drug_take_tstz_in, dt_first_drug_take_tstz)),
               dt_first_interv_prsc_tstz  = decode(l_dt_first_interv_prsc_tstz_n,
                                                   0,
                                                   dt_first_interv_prsc_tstz_in,
                                                   nvl(dt_first_interv_prsc_tstz_in, dt_first_interv_prsc_tstz)),
               dt_first_interv_take_tstz  = decode(l_dt_first_interv_take_tstz_n,
                                                   0,
                                                   dt_first_interv_take_tstz_in,
                                                   nvl(dt_first_interv_take_tstz_in, dt_first_interv_take_tstz)),
               dt_first_inst_obs_tstz     = decode(l_dt_first_inst_obs_tstz_n,
                                                   0,
                                                   dt_first_inst_obs_tstz_in,
                                                   nvl(dt_first_inst_obs_tstz_in, dt_first_inst_obs_tstz)),
               dt_init                    = decode(l_dt_init_n, 0, dt_init_in, nvl(dt_init_in, dt_init)),
               id_prof_first_obs          = decode(l_id_prof_first_obs_n,
                                                   0,
                                                   id_prof_first_obs_in,
                                                   nvl(id_prof_first_obs_in, id_prof_first_obs)),
               id_prof_first_nurse_obs    = decode(l_id_prof_first_nurse_obs_n,
                                                   0,
                                                   id_prof_first_nurse_obs_in,
                                                   nvl(id_prof_first_nurse_obs_in, id_prof_first_nurse_obs)),
               dt_first_sch               = decode(l_dt_first_sch_n,
                                                   0,
                                                   dt_first_sch_in,
                                                   nvl(dt_first_sch_in, dt_first_sch)),
               dt_first_nurse_sch         = decode(l_dt_first_nurse_sch_n,
                                                   0,
                                                   dt_first_nurse_sch_in,
                                                   nvl(dt_first_nurse_sch_in, dt_first_nurse_sch)),
               id_prof_first_sch          = decode(l_id_prof_first_sch_n,
                                                   0,
                                                   id_prof_first_sch_in,
                                                   nvl(id_prof_first_sch_in, id_prof_first_sch)),
               id_prof_first_nurse_sch    = decode(l_id_prof_first_nurse_sch_n,
                                                   0,
                                                   id_prof_first_nurse_sch_in,
                                                   nvl(id_prof_first_nurse_sch_in, id_prof_first_nurse_sch)),
               id_patient                 = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               flg_dsch_status            = decode(l_flg_dsch_status_n,
                                                   0,
                                                   flg_dsch_status_in,
                                                   nvl(flg_dsch_status_in, flg_dsch_status)),
               id_disch_reas_dest         = decode(l_id_disch_reas_dest_n,
                                                   0,
                                                   id_disch_reas_dest_in,
                                                   nvl(id_disch_reas_dest_in, id_disch_reas_dest)),
               dt_med_tstz                = decode(l_dt_med_tstz_n, 0, dt_med_tstz_in, nvl(dt_med_tstz_in, dt_med_tstz)),
               dt_pend_active_tstz        = decode(l_dt_pend_active_tstz_n,
                                                   0,
                                                   dt_pend_active_tstz_in,
                                                   nvl(dt_pend_active_tstz_in, dt_pend_active_tstz)),
               id_dcs_requested           = decode(l_id_dcs_requested_n,
                                                   0,
                                                   id_dcs_requested_in,
                                                   nvl(id_dcs_requested_in, id_dcs_requested)),
               id_instit_requested        = decode(l_id_instit_requested_n,
                                                   0,
                                                   id_instit_requested_in,
                                                   nvl(id_instit_requested_in, id_instit_requested)),
               id_prof_schedules          = decode(l_id_prof_schedules_n,
                                                   0,
                                                   id_prof_schedules_in,
                                                   nvl(id_prof_schedules_in, id_prof_schedules)),
               flg_sch_status             = decode(l_flg_sch_status_n,
                                                   0,
                                                   flg_sch_status_in,
                                                   nvl(flg_sch_status_in, flg_sch_status)),
               id_complaint               = decode(l_id_complaint_n,
                                                   0,
                                                   id_complaint_in,
                                                   nvl(id_complaint_in, id_complaint)),
               flg_urgency                = decode(l_flg_urgency_n, 0, flg_urgency_in, nvl(flg_urgency_in, flg_urgency)),
               sch_group_id_patient       = decode(l_sch_group_id_patient_n,
                                                   0,
                                                   sch_group_id_patient_in,
                                                   nvl(sch_group_id_patient_in, sch_group_id_patient)),
               id_schedule_outp           = decode(l_id_schedule_outp_n,
                                                   0,
                                                   id_schedule_outp_in,
                                                   nvl(id_schedule_outp_in, id_schedule_outp)),
               sch_prof_outp_id_prof      = decode(l_sch_prof_outp_id_prof_n,
                                                   0,
                                                   sch_prof_outp_id_prof_in,
                                                   nvl(sch_prof_outp_id_prof_in, sch_prof_outp_id_prof)),
               id_schedule_sr             = decode(l_id_schedule_sr_n,
                                                   0,
                                                   id_schedule_sr_in,
                                                   nvl(id_schedule_sr_in, id_schedule_sr)),
               triage_acuity              = decode(l_triage_acuity_n,
                                                   0,
                                                   triage_acuity_in,
                                                   nvl(triage_acuity_in, triage_acuity)),
               triage_color_text          = decode(l_triage_color_text_n,
                                                   0,
                                                   triage_color_text_in,
                                                   nvl(triage_color_text_in, triage_color_text)),
               triage_rank_acuity         = decode(l_triage_rank_acuity_n,
                                                   0,
                                                   triage_rank_acuity_in,
                                                   nvl(triage_rank_acuity_in, triage_rank_acuity)),
               triage_flg_letter          = decode(l_triage_flg_letter_n,
                                                   0,
                                                   triage_flg_letter_in,
                                                   nvl(triage_flg_letter_in, triage_flg_letter)),
               fast_track_icon            = decode(l_fast_track_icon_n,
                                                   0,
                                                   fast_track_icon_in,
                                                   nvl(fast_track_icon_in, fast_track_icon)),
               fast_track_desc            = decode(l_fast_track_desc_n,
                                                   0,
                                                   fast_track_desc_in,
                                                   nvl(fast_track_desc_in, fast_track_desc)),
               fast_track_color           = decode(l_fast_track_color_n,
                                                   0,
                                                   fast_track_color_in,
                                                   nvl(fast_track_color_in, fast_track_color)),
               id_room_scheduled          = decode(l_id_room_scheduled_n,
                                                   0,
                                                   id_room_scheduled_in,
                                                   nvl(id_room_scheduled_in, id_room_scheduled)),
               room_sch_flg_status        = decode(l_room_sch_flg_status_n,
                                                   0,
                                                   room_sch_flg_status_in,
                                                   nvl(room_sch_flg_status_in, room_sch_flg_status)),
               flg_pat_status             = decode(l_flg_pat_status_n,
                                                   0,
                                                   flg_pat_status_in,
                                                   nvl(flg_pat_status_in, flg_pat_status)),
               dt_room_entry_tstz         = decode(l_dt_room_entry_tstz_n,
                                                   0,
                                                   dt_room_entry_tstz_in,
                                                   nvl(dt_room_entry_tstz_in, dt_room_entry_tstz)),
               dt_surgery_time_det_tstz   = decode(l_dt_surgery_time_det_tstz_n,
                                                   0,
                                                   dt_surgery_time_det_tstz_in,
                                                   nvl(dt_surgery_time_det_tstz_in, dt_surgery_time_det_tstz)),
               desc_diet                  = decode(l_desc_diet_n, 0, desc_diet_in, nvl(desc_diet_in, desc_diet)),
               dt_admin_tstz              = decode(l_dt_admin_tstz_n,
                                                   0,
                                                   dt_admin_tstz_in,
                                                   nvl(dt_admin_tstz_in, dt_admin_tstz)),
               id_triage_color            = decode(l_id_triage_color_n,
                                                   0,
                                                   id_triage_color_in,
                                                   nvl(id_triage_color_in, id_triage_color)),
               id_software                = decode(l_id_software_n, 0, id_software_in, nvl(id_software_in, id_software))
         WHERE id_episode = id_episode_in RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'EIO_EPIS_FK_I'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "EIO_EPIS_FK_I"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'EPIS_INFO',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_INFO');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    IF l_name = 'EIO_BED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED',
                                                        value_in           => id_bed_in);
                    END IF;
                    IF l_name = 'EIO_COMPL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COMPLAINT',
                                                        value_in           => id_complaint_in);
                    END IF;
                    IF l_name = 'EIO_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'EIO_DCS_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIRST_DEP_CLIN_SERV',
                                                        value_in           => id_first_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'EIO_DCS_REQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DCS_REQUESTED',
                                                        value_in           => id_dcs_requested_in);
                    END IF;
                    IF l_name = 'EIO_DISCH_REAS_DEST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DISCH_REAS_DEST',
                                                        value_in           => id_disch_reas_dest_in);
                    END IF;
                    IF l_name = 'EIO_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EIO_INST_REQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTIT_REQUESTED',
                                                        value_in           => id_instit_requested_in);
                    END IF;
                    IF l_name = 'EIO_INST_USF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION_USF',
                                                        value_in           => id_institution_usf_in);
                    END IF;
                    IF l_name = 'EIO_NURSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIRST_NURSE_RESP',
                                                        value_in           => id_first_nurse_resp_in);
                    END IF;
                    IF l_name = 'EIO_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'EIO_PAT_SCH_GRP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'SCH_GROUP_ID_PATIENT',
                                                        value_in           => sch_group_id_patient_in);
                    END IF;
                    IF l_name = 'EIO_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'EIO_PROF_NURSE_OBS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_FIRST_NURSE_OBS',
                                                        value_in           => id_prof_first_nurse_obs_in);
                    END IF;
                    IF l_name = 'EIO_PROF_NURSE_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_FIRST_NURSE_SCH',
                                                        value_in           => id_prof_first_nurse_sch_in);
                    END IF;
                    IF l_name = 'EIO_PROF_OBS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_FIRST_OBS',
                                                        value_in           => id_prof_first_obs_in);
                    END IF;
                    IF l_name = 'EIO_PROF_SCHS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_SCHEDULES',
                                                        value_in           => id_prof_schedules_in);
                    END IF;
                    IF l_name = 'EIO_PROF_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_FIRST_SCH',
                                                        value_in           => id_prof_first_sch_in);
                    END IF;
                    IF l_name = 'EIO_PROF_SCH_O_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'SCH_PROF_OUTP_ID_PROF',
                                                        value_in           => sch_prof_outp_id_prof_in);
                    END IF;
                    IF l_name = 'EIO_PROF_TEAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_TEAM',
                                                        value_in           => id_prof_team_in);
                    END IF;
                    IF l_name = 'EIO_RM_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM_SCHEDULED',
                                                        value_in           => id_room_scheduled_in);
                    END IF;
                    IF l_name = 'EIO_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'EIO_SCHD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE',
                                                        value_in           => id_schedule_in);
                    END IF;
                    IF l_name = 'EIO_SCH_O_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE_OUTP',
                                                        value_in           => id_schedule_outp_in);
                    END IF;
                    IF l_name = 'EIO_SCH_SR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE_SR',
                                                        value_in           => id_schedule_sr_in);
                    END IF;
                    IF l_name = 'EIO_TC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRIAGE_COLOR',
                                                        value_in           => id_triage_color_in);
                    END IF;
                    IF l_name = 'EIO_TRIAGE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRIAGE',
                                                        value_in           => id_triage_in);
                    END IF;
                    IF l_name = 'EIO_TRIAGE_FRST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIRST_TRIAGE',
                                                        value_in           => id_first_triage_in);
                    END IF;
                    IF l_name = 'EIO_TRIAGE_FRST_WR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIRST_TRIAGE_WR',
                                                        value_in           => id_first_triage_wr_in);
                    END IF;
                    IF l_name = 'EIO_TRIAGE_WR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRIAGE_WHITE_REASON',
                                                        value_in           => id_triage_white_reason_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_episode_in                  IN epis_info.id_episode%TYPE,
        id_bed_in                      IN epis_info.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                     IN BOOLEAN := TRUE,
        id_room_in                     IN epis_info.id_room%TYPE DEFAULT NULL,
        id_room_nin                    IN BOOLEAN := TRUE,
        id_professional_in             IN epis_info.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        norton_in                      IN epis_info.norton%TYPE DEFAULT NULL,
        norton_nin                     IN BOOLEAN := TRUE,
        flg_hydric_in                  IN epis_info.flg_hydric%TYPE DEFAULT NULL,
        flg_hydric_nin                 IN BOOLEAN := TRUE,
        flg_wound_in                   IN epis_info.flg_wound%TYPE DEFAULT NULL,
        flg_wound_nin                  IN BOOLEAN := TRUE,
        companion_in                   IN epis_info.companion%TYPE DEFAULT NULL,
        companion_nin                  IN BOOLEAN := TRUE,
        flg_unknown_in                 IN epis_info.flg_unknown%TYPE DEFAULT NULL,
        flg_unknown_nin                IN BOOLEAN := TRUE,
        desc_info_in                   IN epis_info.desc_info%TYPE DEFAULT NULL,
        desc_info_nin                  IN BOOLEAN := TRUE,
        id_schedule_in                 IN epis_info.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin                IN BOOLEAN := TRUE,
        id_first_nurse_resp_in         IN epis_info.id_first_nurse_resp%TYPE DEFAULT NULL,
        id_first_nurse_resp_nin        IN BOOLEAN := TRUE,
        flg_status_in                  IN epis_info.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        id_dep_clin_serv_in            IN epis_info.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin           IN BOOLEAN := TRUE,
        id_first_dep_clin_serv_in      IN epis_info.id_first_dep_clin_serv%TYPE DEFAULT NULL,
        id_first_dep_clin_serv_nin     IN BOOLEAN := TRUE,
        id_institution_usf_in          IN epis_info.id_institution_usf%TYPE DEFAULT NULL,
        id_institution_usf_nin         IN BOOLEAN := TRUE,
        id_prof_team_in                IN epis_info.id_prof_team%TYPE DEFAULT NULL,
        id_prof_team_nin               IN BOOLEAN := TRUE,
        id_triage_in                   IN epis_info.id_triage%TYPE DEFAULT NULL,
        id_triage_nin                  IN BOOLEAN := TRUE,
        id_triage_white_reason_in      IN epis_info.id_triage_white_reason%TYPE DEFAULT NULL,
        id_triage_white_reason_nin     IN BOOLEAN := TRUE,
        id_first_triage_in             IN epis_info.id_first_triage%TYPE DEFAULT NULL,
        id_first_triage_nin            IN BOOLEAN := TRUE,
        id_first_triage_wr_in          IN epis_info.id_first_triage_wr%TYPE DEFAULT NULL,
        id_first_triage_wr_nin         IN BOOLEAN := TRUE,
        dt_harvest_tstz_in             IN epis_info.dt_harvest_tstz%TYPE DEFAULT NULL,
        dt_harvest_tstz_nin            IN BOOLEAN := TRUE,
        dt_last_interaction_tstz_in    IN epis_info.dt_last_interaction_tstz%TYPE DEFAULT NULL,
        dt_last_interaction_tstz_nin   IN BOOLEAN := TRUE,
        dt_movement_tstz_in            IN epis_info.dt_movement_tstz%TYPE DEFAULT NULL,
        dt_movement_tstz_nin           IN BOOLEAN := TRUE,
        dt_next_drug_tstz_in           IN epis_info.dt_next_drug_tstz%TYPE DEFAULT NULL,
        dt_next_drug_tstz_nin          IN BOOLEAN := TRUE,
        dt_first_obs_tstz_in           IN epis_info.dt_first_obs_tstz%TYPE DEFAULT NULL,
        dt_first_obs_tstz_nin          IN BOOLEAN := TRUE,
        dt_next_intervention_tstz_in   IN epis_info.dt_next_intervention_tstz%TYPE DEFAULT NULL,
        dt_next_intervention_tstz_nin  IN BOOLEAN := TRUE,
        dt_next_vital_sign_tstz_in     IN epis_info.dt_next_vital_sign_tstz%TYPE DEFAULT NULL,
        dt_next_vital_sign_tstz_nin    IN BOOLEAN := TRUE,
        dt_next_position_tstz_in       IN epis_info.dt_next_position_tstz%TYPE DEFAULT NULL,
        dt_next_position_tstz_nin      IN BOOLEAN := TRUE,
        dt_entrance_room_tstz_in       IN epis_info.dt_entrance_room_tstz%TYPE DEFAULT NULL,
        dt_entrance_room_tstz_nin      IN BOOLEAN := TRUE,
        dt_harvest_mov_tstz_in         IN epis_info.dt_harvest_mov_tstz%TYPE DEFAULT NULL,
        dt_harvest_mov_tstz_nin        IN BOOLEAN := TRUE,
        dt_first_nurse_obs_tstz_in     IN epis_info.dt_first_nurse_obs_tstz%TYPE DEFAULT NULL,
        dt_first_nurse_obs_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_analysis_exe_tstz_in  IN epis_info.dt_first_analysis_exe_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_exe_tstz_nin IN BOOLEAN := TRUE,
        dt_first_analysis_req_tstz_in  IN epis_info.dt_first_analysis_req_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_req_tstz_nin IN BOOLEAN := TRUE,
        dt_first_image_exec_tstz_in    IN epis_info.dt_first_image_exec_tstz%TYPE DEFAULT NULL,
        dt_first_image_exec_tstz_nin   IN BOOLEAN := TRUE,
        dt_first_image_req_tstz_in     IN epis_info.dt_first_image_req_tstz%TYPE DEFAULT NULL,
        dt_first_image_req_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_drug_prsc_tstz_in     IN epis_info.dt_first_drug_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_drug_prsc_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_drug_take_tstz_in     IN epis_info.dt_first_drug_take_tstz%TYPE DEFAULT NULL,
        dt_first_drug_take_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_interv_prsc_tstz_in   IN epis_info.dt_first_interv_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_interv_prsc_tstz_nin  IN BOOLEAN := TRUE,
        dt_first_interv_take_tstz_in   IN epis_info.dt_first_interv_take_tstz%TYPE DEFAULT NULL,
        dt_first_interv_take_tstz_nin  IN BOOLEAN := TRUE,
        dt_first_inst_obs_tstz_in      IN epis_info.dt_first_inst_obs_tstz%TYPE DEFAULT NULL,
        dt_first_inst_obs_tstz_nin     IN BOOLEAN := TRUE,
        dt_init_in                     IN epis_info.dt_init%TYPE DEFAULT NULL,
        dt_init_nin                    IN BOOLEAN := TRUE,
        id_prof_first_obs_in           IN epis_info.id_prof_first_obs%TYPE DEFAULT NULL,
        id_prof_first_obs_nin          IN BOOLEAN := TRUE,
        id_prof_first_nurse_obs_in     IN epis_info.id_prof_first_nurse_obs%TYPE DEFAULT NULL,
        id_prof_first_nurse_obs_nin    IN BOOLEAN := TRUE,
        dt_first_sch_in                IN epis_info.dt_first_sch%TYPE DEFAULT NULL,
        dt_first_sch_nin               IN BOOLEAN := TRUE,
        dt_first_nurse_sch_in          IN epis_info.dt_first_nurse_sch%TYPE DEFAULT NULL,
        dt_first_nurse_sch_nin         IN BOOLEAN := TRUE,
        id_prof_first_sch_in           IN epis_info.id_prof_first_sch%TYPE DEFAULT NULL,
        id_prof_first_sch_nin          IN BOOLEAN := TRUE,
        id_prof_first_nurse_sch_in     IN epis_info.id_prof_first_nurse_sch%TYPE DEFAULT NULL,
        id_prof_first_nurse_sch_nin    IN BOOLEAN := TRUE,
        id_patient_in                  IN epis_info.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        flg_dsch_status_in             IN epis_info.flg_dsch_status%TYPE DEFAULT NULL,
        flg_dsch_status_nin            IN BOOLEAN := TRUE,
        id_disch_reas_dest_in          IN epis_info.id_disch_reas_dest%TYPE DEFAULT NULL,
        id_disch_reas_dest_nin         IN BOOLEAN := TRUE,
        dt_med_tstz_in                 IN epis_info.dt_med_tstz%TYPE DEFAULT NULL,
        dt_med_tstz_nin                IN BOOLEAN := TRUE,
        dt_pend_active_tstz_in         IN epis_info.dt_pend_active_tstz%TYPE DEFAULT NULL,
        dt_pend_active_tstz_nin        IN BOOLEAN := TRUE,
        id_dcs_requested_in            IN epis_info.id_dcs_requested%TYPE DEFAULT NULL,
        id_dcs_requested_nin           IN BOOLEAN := TRUE,
        id_instit_requested_in         IN epis_info.id_instit_requested%TYPE DEFAULT NULL,
        id_instit_requested_nin        IN BOOLEAN := TRUE,
        id_prof_schedules_in           IN epis_info.id_prof_schedules%TYPE DEFAULT NULL,
        id_prof_schedules_nin          IN BOOLEAN := TRUE,
        flg_sch_status_in              IN epis_info.flg_sch_status%TYPE DEFAULT NULL,
        flg_sch_status_nin             IN BOOLEAN := TRUE,
        id_complaint_in                IN epis_info.id_complaint%TYPE DEFAULT NULL,
        id_complaint_nin               IN BOOLEAN := TRUE,
        flg_urgency_in                 IN epis_info.flg_urgency%TYPE DEFAULT NULL,
        flg_urgency_nin                IN BOOLEAN := TRUE,
        sch_group_id_patient_in        IN epis_info.sch_group_id_patient%TYPE DEFAULT NULL,
        sch_group_id_patient_nin       IN BOOLEAN := TRUE,
        id_schedule_outp_in            IN epis_info.id_schedule_outp%TYPE DEFAULT NULL,
        id_schedule_outp_nin           IN BOOLEAN := TRUE,
        sch_prof_outp_id_prof_in       IN epis_info.sch_prof_outp_id_prof%TYPE DEFAULT NULL,
        sch_prof_outp_id_prof_nin      IN BOOLEAN := TRUE,
        id_schedule_sr_in              IN epis_info.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin             IN BOOLEAN := TRUE,
        triage_acuity_in               IN epis_info.triage_acuity%TYPE DEFAULT NULL,
        triage_acuity_nin              IN BOOLEAN := TRUE,
        triage_color_text_in           IN epis_info.triage_color_text%TYPE DEFAULT NULL,
        triage_color_text_nin          IN BOOLEAN := TRUE,
        triage_rank_acuity_in          IN epis_info.triage_rank_acuity%TYPE DEFAULT NULL,
        triage_rank_acuity_nin         IN BOOLEAN := TRUE,
        triage_flg_letter_in           IN epis_info.triage_flg_letter%TYPE DEFAULT NULL,
        triage_flg_letter_nin          IN BOOLEAN := TRUE,
        fast_track_icon_in             IN epis_info.fast_track_icon%TYPE DEFAULT NULL,
        fast_track_icon_nin            IN BOOLEAN := TRUE,
        fast_track_desc_in             IN epis_info.fast_track_desc%TYPE DEFAULT NULL,
        fast_track_desc_nin            IN BOOLEAN := TRUE,
        fast_track_color_in            IN epis_info.fast_track_color%TYPE DEFAULT NULL,
        fast_track_color_nin           IN BOOLEAN := TRUE,
        id_room_scheduled_in           IN epis_info.id_room_scheduled%TYPE DEFAULT NULL,
        id_room_scheduled_nin          IN BOOLEAN := TRUE,
        room_sch_flg_status_in         IN epis_info.room_sch_flg_status%TYPE DEFAULT NULL,
        room_sch_flg_status_nin        IN BOOLEAN := TRUE,
        flg_pat_status_in              IN epis_info.flg_pat_status%TYPE DEFAULT NULL,
        flg_pat_status_nin             IN BOOLEAN := TRUE,
        dt_room_entry_tstz_in          IN epis_info.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_nin         IN BOOLEAN := TRUE,
        dt_surgery_time_det_tstz_in    IN epis_info.dt_surgery_time_det_tstz%TYPE DEFAULT NULL,
        dt_surgery_time_det_tstz_nin   IN BOOLEAN := TRUE,
        desc_diet_in                   IN epis_info.desc_diet%TYPE DEFAULT NULL,
        desc_diet_nin                  IN BOOLEAN := TRUE,
        dt_admin_tstz_in               IN epis_info.dt_admin_tstz%TYPE DEFAULT NULL,
        dt_admin_tstz_nin              IN BOOLEAN := TRUE,
        id_triage_color_in             IN epis_info.id_triage_color%TYPE DEFAULT NULL,
        id_triage_color_nin            IN BOOLEAN := TRUE,
        id_software_in                 IN epis_info.id_software%TYPE DEFAULT NULL,
        id_software_nin                IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in                  => id_episode_in,
            id_bed_in                      => id_bed_in,
            id_bed_nin                     => id_bed_nin,
            id_room_in                     => id_room_in,
            id_room_nin                    => id_room_nin,
            id_professional_in             => id_professional_in,
            id_professional_nin            => id_professional_nin,
            norton_in                      => norton_in,
            norton_nin                     => norton_nin,
            flg_hydric_in                  => flg_hydric_in,
            flg_hydric_nin                 => flg_hydric_nin,
            flg_wound_in                   => flg_wound_in,
            flg_wound_nin                  => flg_wound_nin,
            companion_in                   => companion_in,
            companion_nin                  => companion_nin,
            flg_unknown_in                 => flg_unknown_in,
            flg_unknown_nin                => flg_unknown_nin,
            desc_info_in                   => desc_info_in,
            desc_info_nin                  => desc_info_nin,
            id_schedule_in                 => id_schedule_in,
            id_schedule_nin                => id_schedule_nin,
            id_first_nurse_resp_in         => id_first_nurse_resp_in,
            id_first_nurse_resp_nin        => id_first_nurse_resp_nin,
            flg_status_in                  => flg_status_in,
            flg_status_nin                 => flg_status_nin,
            id_dep_clin_serv_in            => id_dep_clin_serv_in,
            id_dep_clin_serv_nin           => id_dep_clin_serv_nin,
            id_first_dep_clin_serv_in      => id_first_dep_clin_serv_in,
            id_first_dep_clin_serv_nin     => id_first_dep_clin_serv_nin,
            id_institution_usf_in          => id_institution_usf_in,
            id_institution_usf_nin         => id_institution_usf_nin,
            id_prof_team_in                => id_prof_team_in,
            id_prof_team_nin               => id_prof_team_nin,
            id_triage_in                   => id_triage_in,
            id_triage_nin                  => id_triage_nin,
            id_triage_white_reason_in      => id_triage_white_reason_in,
            id_triage_white_reason_nin     => id_triage_white_reason_nin,
            id_first_triage_in             => id_first_triage_in,
            id_first_triage_nin            => id_first_triage_nin,
            id_first_triage_wr_in          => id_first_triage_wr_in,
            id_first_triage_wr_nin         => id_first_triage_wr_nin,
            dt_harvest_tstz_in             => dt_harvest_tstz_in,
            dt_harvest_tstz_nin            => dt_harvest_tstz_nin,
            dt_last_interaction_tstz_in    => dt_last_interaction_tstz_in,
            dt_last_interaction_tstz_nin   => dt_last_interaction_tstz_nin,
            dt_movement_tstz_in            => dt_movement_tstz_in,
            dt_movement_tstz_nin           => dt_movement_tstz_nin,
            dt_next_drug_tstz_in           => dt_next_drug_tstz_in,
            dt_next_drug_tstz_nin          => dt_next_drug_tstz_nin,
            dt_first_obs_tstz_in           => dt_first_obs_tstz_in,
            dt_first_obs_tstz_nin          => dt_first_obs_tstz_nin,
            dt_next_intervention_tstz_in   => dt_next_intervention_tstz_in,
            dt_next_intervention_tstz_nin  => dt_next_intervention_tstz_nin,
            dt_next_vital_sign_tstz_in     => dt_next_vital_sign_tstz_in,
            dt_next_vital_sign_tstz_nin    => dt_next_vital_sign_tstz_nin,
            dt_next_position_tstz_in       => dt_next_position_tstz_in,
            dt_next_position_tstz_nin      => dt_next_position_tstz_nin,
            dt_entrance_room_tstz_in       => dt_entrance_room_tstz_in,
            dt_entrance_room_tstz_nin      => dt_entrance_room_tstz_nin,
            dt_harvest_mov_tstz_in         => dt_harvest_mov_tstz_in,
            dt_harvest_mov_tstz_nin        => dt_harvest_mov_tstz_nin,
            dt_first_nurse_obs_tstz_in     => dt_first_nurse_obs_tstz_in,
            dt_first_nurse_obs_tstz_nin    => dt_first_nurse_obs_tstz_nin,
            dt_first_analysis_exe_tstz_in  => dt_first_analysis_exe_tstz_in,
            dt_first_analysis_exe_tstz_nin => dt_first_analysis_exe_tstz_nin,
            dt_first_analysis_req_tstz_in  => dt_first_analysis_req_tstz_in,
            dt_first_analysis_req_tstz_nin => dt_first_analysis_req_tstz_nin,
            dt_first_image_exec_tstz_in    => dt_first_image_exec_tstz_in,
            dt_first_image_exec_tstz_nin   => dt_first_image_exec_tstz_nin,
            dt_first_image_req_tstz_in     => dt_first_image_req_tstz_in,
            dt_first_image_req_tstz_nin    => dt_first_image_req_tstz_nin,
            dt_first_drug_prsc_tstz_in     => dt_first_drug_prsc_tstz_in,
            dt_first_drug_prsc_tstz_nin    => dt_first_drug_prsc_tstz_nin,
            dt_first_drug_take_tstz_in     => dt_first_drug_take_tstz_in,
            dt_first_drug_take_tstz_nin    => dt_first_drug_take_tstz_nin,
            dt_first_interv_prsc_tstz_in   => dt_first_interv_prsc_tstz_in,
            dt_first_interv_prsc_tstz_nin  => dt_first_interv_prsc_tstz_nin,
            dt_first_interv_take_tstz_in   => dt_first_interv_take_tstz_in,
            dt_first_interv_take_tstz_nin  => dt_first_interv_take_tstz_nin,
            dt_first_inst_obs_tstz_in      => dt_first_inst_obs_tstz_in,
            dt_first_inst_obs_tstz_nin     => dt_first_inst_obs_tstz_nin,
            dt_init_in                     => dt_init_in,
            dt_init_nin                    => dt_init_nin,
            id_prof_first_obs_in           => id_prof_first_obs_in,
            id_prof_first_obs_nin          => id_prof_first_obs_nin,
            id_prof_first_nurse_obs_in     => id_prof_first_nurse_obs_in,
            id_prof_first_nurse_obs_nin    => id_prof_first_nurse_obs_nin,
            dt_first_sch_in                => dt_first_sch_in,
            dt_first_sch_nin               => dt_first_sch_nin,
            dt_first_nurse_sch_in          => dt_first_nurse_sch_in,
            dt_first_nurse_sch_nin         => dt_first_nurse_sch_nin,
            id_prof_first_sch_in           => id_prof_first_sch_in,
            id_prof_first_sch_nin          => id_prof_first_sch_nin,
            id_prof_first_nurse_sch_in     => id_prof_first_nurse_sch_in,
            id_prof_first_nurse_sch_nin    => id_prof_first_nurse_sch_nin,
            id_patient_in                  => id_patient_in,
            id_patient_nin                 => id_patient_nin,
            flg_dsch_status_in             => flg_dsch_status_in,
            flg_dsch_status_nin            => flg_dsch_status_nin,
            id_disch_reas_dest_in          => id_disch_reas_dest_in,
            id_disch_reas_dest_nin         => id_disch_reas_dest_nin,
            dt_med_tstz_in                 => dt_med_tstz_in,
            dt_med_tstz_nin                => dt_med_tstz_nin,
            dt_pend_active_tstz_in         => dt_pend_active_tstz_in,
            dt_pend_active_tstz_nin        => dt_pend_active_tstz_nin,
            id_dcs_requested_in            => id_dcs_requested_in,
            id_dcs_requested_nin           => id_dcs_requested_nin,
            id_instit_requested_in         => id_instit_requested_in,
            id_instit_requested_nin        => id_instit_requested_nin,
            id_prof_schedules_in           => id_prof_schedules_in,
            id_prof_schedules_nin          => id_prof_schedules_nin,
            flg_sch_status_in              => flg_sch_status_in,
            flg_sch_status_nin             => flg_sch_status_nin,
            id_complaint_in                => id_complaint_in,
            id_complaint_nin               => id_complaint_nin,
            flg_urgency_in                 => flg_urgency_in,
            flg_urgency_nin                => flg_urgency_nin,
            sch_group_id_patient_in        => sch_group_id_patient_in,
            sch_group_id_patient_nin       => sch_group_id_patient_nin,
            id_schedule_outp_in            => id_schedule_outp_in,
            id_schedule_outp_nin           => id_schedule_outp_nin,
            sch_prof_outp_id_prof_in       => sch_prof_outp_id_prof_in,
            sch_prof_outp_id_prof_nin      => sch_prof_outp_id_prof_nin,
            id_schedule_sr_in              => id_schedule_sr_in,
            id_schedule_sr_nin             => id_schedule_sr_nin,
            triage_acuity_in               => triage_acuity_in,
            triage_acuity_nin              => triage_acuity_nin,
            triage_color_text_in           => triage_color_text_in,
            triage_color_text_nin          => triage_color_text_nin,
            triage_rank_acuity_in          => triage_rank_acuity_in,
            triage_rank_acuity_nin         => triage_rank_acuity_nin,
            triage_flg_letter_in           => triage_flg_letter_in,
            triage_flg_letter_nin          => triage_flg_letter_nin,
            fast_track_icon_in             => fast_track_icon_in,
            fast_track_icon_nin            => fast_track_icon_nin,
            fast_track_desc_in             => fast_track_desc_in,
            fast_track_desc_nin            => fast_track_desc_nin,
            fast_track_color_in            => fast_track_color_in,
            fast_track_color_nin           => fast_track_color_nin,
            id_room_scheduled_in           => id_room_scheduled_in,
            id_room_scheduled_nin          => id_room_scheduled_nin,
            room_sch_flg_status_in         => room_sch_flg_status_in,
            room_sch_flg_status_nin        => room_sch_flg_status_nin,
            flg_pat_status_in              => flg_pat_status_in,
            flg_pat_status_nin             => flg_pat_status_nin,
            dt_room_entry_tstz_in          => dt_room_entry_tstz_in,
            dt_room_entry_tstz_nin         => dt_room_entry_tstz_nin,
            dt_surgery_time_det_tstz_in    => dt_surgery_time_det_tstz_in,
            dt_surgery_time_det_tstz_nin   => dt_surgery_time_det_tstz_nin,
            desc_diet_in                   => desc_diet_in,
            desc_diet_nin                  => desc_diet_nin,
            dt_admin_tstz_in               => dt_admin_tstz_in,
            dt_admin_tstz_nin              => dt_admin_tstz_nin,
            id_triage_color_in             => id_triage_color_in,
            id_triage_color_nin            => id_triage_color_nin,
            id_software_in                 => id_software_in,
            id_software_nin                => id_software_nin,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_bed_in                      IN epis_info.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                     IN BOOLEAN := TRUE,
        id_room_in                     IN epis_info.id_room%TYPE DEFAULT NULL,
        id_room_nin                    IN BOOLEAN := TRUE,
        id_professional_in             IN epis_info.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        norton_in                      IN epis_info.norton%TYPE DEFAULT NULL,
        norton_nin                     IN BOOLEAN := TRUE,
        flg_hydric_in                  IN epis_info.flg_hydric%TYPE DEFAULT NULL,
        flg_hydric_nin                 IN BOOLEAN := TRUE,
        flg_wound_in                   IN epis_info.flg_wound%TYPE DEFAULT NULL,
        flg_wound_nin                  IN BOOLEAN := TRUE,
        companion_in                   IN epis_info.companion%TYPE DEFAULT NULL,
        companion_nin                  IN BOOLEAN := TRUE,
        flg_unknown_in                 IN epis_info.flg_unknown%TYPE DEFAULT NULL,
        flg_unknown_nin                IN BOOLEAN := TRUE,
        desc_info_in                   IN epis_info.desc_info%TYPE DEFAULT NULL,
        desc_info_nin                  IN BOOLEAN := TRUE,
        id_schedule_in                 IN epis_info.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin                IN BOOLEAN := TRUE,
        id_first_nurse_resp_in         IN epis_info.id_first_nurse_resp%TYPE DEFAULT NULL,
        id_first_nurse_resp_nin        IN BOOLEAN := TRUE,
        flg_status_in                  IN epis_info.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        id_dep_clin_serv_in            IN epis_info.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin           IN BOOLEAN := TRUE,
        id_first_dep_clin_serv_in      IN epis_info.id_first_dep_clin_serv%TYPE DEFAULT NULL,
        id_first_dep_clin_serv_nin     IN BOOLEAN := TRUE,
        id_institution_usf_in          IN epis_info.id_institution_usf%TYPE DEFAULT NULL,
        id_institution_usf_nin         IN BOOLEAN := TRUE,
        id_prof_team_in                IN epis_info.id_prof_team%TYPE DEFAULT NULL,
        id_prof_team_nin               IN BOOLEAN := TRUE,
        id_triage_in                   IN epis_info.id_triage%TYPE DEFAULT NULL,
        id_triage_nin                  IN BOOLEAN := TRUE,
        id_triage_white_reason_in      IN epis_info.id_triage_white_reason%TYPE DEFAULT NULL,
        id_triage_white_reason_nin     IN BOOLEAN := TRUE,
        id_first_triage_in             IN epis_info.id_first_triage%TYPE DEFAULT NULL,
        id_first_triage_nin            IN BOOLEAN := TRUE,
        id_first_triage_wr_in          IN epis_info.id_first_triage_wr%TYPE DEFAULT NULL,
        id_first_triage_wr_nin         IN BOOLEAN := TRUE,
        dt_harvest_tstz_in             IN epis_info.dt_harvest_tstz%TYPE DEFAULT NULL,
        dt_harvest_tstz_nin            IN BOOLEAN := TRUE,
        dt_last_interaction_tstz_in    IN epis_info.dt_last_interaction_tstz%TYPE DEFAULT NULL,
        dt_last_interaction_tstz_nin   IN BOOLEAN := TRUE,
        dt_movement_tstz_in            IN epis_info.dt_movement_tstz%TYPE DEFAULT NULL,
        dt_movement_tstz_nin           IN BOOLEAN := TRUE,
        dt_next_drug_tstz_in           IN epis_info.dt_next_drug_tstz%TYPE DEFAULT NULL,
        dt_next_drug_tstz_nin          IN BOOLEAN := TRUE,
        dt_first_obs_tstz_in           IN epis_info.dt_first_obs_tstz%TYPE DEFAULT NULL,
        dt_first_obs_tstz_nin          IN BOOLEAN := TRUE,
        dt_next_intervention_tstz_in   IN epis_info.dt_next_intervention_tstz%TYPE DEFAULT NULL,
        dt_next_intervention_tstz_nin  IN BOOLEAN := TRUE,
        dt_next_vital_sign_tstz_in     IN epis_info.dt_next_vital_sign_tstz%TYPE DEFAULT NULL,
        dt_next_vital_sign_tstz_nin    IN BOOLEAN := TRUE,
        dt_next_position_tstz_in       IN epis_info.dt_next_position_tstz%TYPE DEFAULT NULL,
        dt_next_position_tstz_nin      IN BOOLEAN := TRUE,
        dt_entrance_room_tstz_in       IN epis_info.dt_entrance_room_tstz%TYPE DEFAULT NULL,
        dt_entrance_room_tstz_nin      IN BOOLEAN := TRUE,
        dt_harvest_mov_tstz_in         IN epis_info.dt_harvest_mov_tstz%TYPE DEFAULT NULL,
        dt_harvest_mov_tstz_nin        IN BOOLEAN := TRUE,
        dt_first_nurse_obs_tstz_in     IN epis_info.dt_first_nurse_obs_tstz%TYPE DEFAULT NULL,
        dt_first_nurse_obs_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_analysis_exe_tstz_in  IN epis_info.dt_first_analysis_exe_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_exe_tstz_nin IN BOOLEAN := TRUE,
        dt_first_analysis_req_tstz_in  IN epis_info.dt_first_analysis_req_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_req_tstz_nin IN BOOLEAN := TRUE,
        dt_first_image_exec_tstz_in    IN epis_info.dt_first_image_exec_tstz%TYPE DEFAULT NULL,
        dt_first_image_exec_tstz_nin   IN BOOLEAN := TRUE,
        dt_first_image_req_tstz_in     IN epis_info.dt_first_image_req_tstz%TYPE DEFAULT NULL,
        dt_first_image_req_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_drug_prsc_tstz_in     IN epis_info.dt_first_drug_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_drug_prsc_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_drug_take_tstz_in     IN epis_info.dt_first_drug_take_tstz%TYPE DEFAULT NULL,
        dt_first_drug_take_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_interv_prsc_tstz_in   IN epis_info.dt_first_interv_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_interv_prsc_tstz_nin  IN BOOLEAN := TRUE,
        dt_first_interv_take_tstz_in   IN epis_info.dt_first_interv_take_tstz%TYPE DEFAULT NULL,
        dt_first_interv_take_tstz_nin  IN BOOLEAN := TRUE,
        dt_first_inst_obs_tstz_in      IN epis_info.dt_first_inst_obs_tstz%TYPE DEFAULT NULL,
        dt_first_inst_obs_tstz_nin     IN BOOLEAN := TRUE,
        dt_init_in                     IN epis_info.dt_init%TYPE DEFAULT NULL,
        dt_init_nin                    IN BOOLEAN := TRUE,
        id_prof_first_obs_in           IN epis_info.id_prof_first_obs%TYPE DEFAULT NULL,
        id_prof_first_obs_nin          IN BOOLEAN := TRUE,
        id_prof_first_nurse_obs_in     IN epis_info.id_prof_first_nurse_obs%TYPE DEFAULT NULL,
        id_prof_first_nurse_obs_nin    IN BOOLEAN := TRUE,
        dt_first_sch_in                IN epis_info.dt_first_sch%TYPE DEFAULT NULL,
        dt_first_sch_nin               IN BOOLEAN := TRUE,
        dt_first_nurse_sch_in          IN epis_info.dt_first_nurse_sch%TYPE DEFAULT NULL,
        dt_first_nurse_sch_nin         IN BOOLEAN := TRUE,
        id_prof_first_sch_in           IN epis_info.id_prof_first_sch%TYPE DEFAULT NULL,
        id_prof_first_sch_nin          IN BOOLEAN := TRUE,
        id_prof_first_nurse_sch_in     IN epis_info.id_prof_first_nurse_sch%TYPE DEFAULT NULL,
        id_prof_first_nurse_sch_nin    IN BOOLEAN := TRUE,
        id_patient_in                  IN epis_info.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        flg_dsch_status_in             IN epis_info.flg_dsch_status%TYPE DEFAULT NULL,
        flg_dsch_status_nin            IN BOOLEAN := TRUE,
        id_disch_reas_dest_in          IN epis_info.id_disch_reas_dest%TYPE DEFAULT NULL,
        id_disch_reas_dest_nin         IN BOOLEAN := TRUE,
        dt_med_tstz_in                 IN epis_info.dt_med_tstz%TYPE DEFAULT NULL,
        dt_med_tstz_nin                IN BOOLEAN := TRUE,
        dt_pend_active_tstz_in         IN epis_info.dt_pend_active_tstz%TYPE DEFAULT NULL,
        dt_pend_active_tstz_nin        IN BOOLEAN := TRUE,
        id_dcs_requested_in            IN epis_info.id_dcs_requested%TYPE DEFAULT NULL,
        id_dcs_requested_nin           IN BOOLEAN := TRUE,
        id_instit_requested_in         IN epis_info.id_instit_requested%TYPE DEFAULT NULL,
        id_instit_requested_nin        IN BOOLEAN := TRUE,
        id_prof_schedules_in           IN epis_info.id_prof_schedules%TYPE DEFAULT NULL,
        id_prof_schedules_nin          IN BOOLEAN := TRUE,
        flg_sch_status_in              IN epis_info.flg_sch_status%TYPE DEFAULT NULL,
        flg_sch_status_nin             IN BOOLEAN := TRUE,
        id_complaint_in                IN epis_info.id_complaint%TYPE DEFAULT NULL,
        id_complaint_nin               IN BOOLEAN := TRUE,
        flg_urgency_in                 IN epis_info.flg_urgency%TYPE DEFAULT NULL,
        flg_urgency_nin                IN BOOLEAN := TRUE,
        sch_group_id_patient_in        IN epis_info.sch_group_id_patient%TYPE DEFAULT NULL,
        sch_group_id_patient_nin       IN BOOLEAN := TRUE,
        id_schedule_outp_in            IN epis_info.id_schedule_outp%TYPE DEFAULT NULL,
        id_schedule_outp_nin           IN BOOLEAN := TRUE,
        sch_prof_outp_id_prof_in       IN epis_info.sch_prof_outp_id_prof%TYPE DEFAULT NULL,
        sch_prof_outp_id_prof_nin      IN BOOLEAN := TRUE,
        id_schedule_sr_in              IN epis_info.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin             IN BOOLEAN := TRUE,
        triage_acuity_in               IN epis_info.triage_acuity%TYPE DEFAULT NULL,
        triage_acuity_nin              IN BOOLEAN := TRUE,
        triage_color_text_in           IN epis_info.triage_color_text%TYPE DEFAULT NULL,
        triage_color_text_nin          IN BOOLEAN := TRUE,
        triage_rank_acuity_in          IN epis_info.triage_rank_acuity%TYPE DEFAULT NULL,
        triage_rank_acuity_nin         IN BOOLEAN := TRUE,
        triage_flg_letter_in           IN epis_info.triage_flg_letter%TYPE DEFAULT NULL,
        triage_flg_letter_nin          IN BOOLEAN := TRUE,
        fast_track_icon_in             IN epis_info.fast_track_icon%TYPE DEFAULT NULL,
        fast_track_icon_nin            IN BOOLEAN := TRUE,
        fast_track_desc_in             IN epis_info.fast_track_desc%TYPE DEFAULT NULL,
        fast_track_desc_nin            IN BOOLEAN := TRUE,
        fast_track_color_in            IN epis_info.fast_track_color%TYPE DEFAULT NULL,
        fast_track_color_nin           IN BOOLEAN := TRUE,
        id_room_scheduled_in           IN epis_info.id_room_scheduled%TYPE DEFAULT NULL,
        id_room_scheduled_nin          IN BOOLEAN := TRUE,
        room_sch_flg_status_in         IN epis_info.room_sch_flg_status%TYPE DEFAULT NULL,
        room_sch_flg_status_nin        IN BOOLEAN := TRUE,
        flg_pat_status_in              IN epis_info.flg_pat_status%TYPE DEFAULT NULL,
        flg_pat_status_nin             IN BOOLEAN := TRUE,
        dt_room_entry_tstz_in          IN epis_info.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_nin         IN BOOLEAN := TRUE,
        dt_surgery_time_det_tstz_in    IN epis_info.dt_surgery_time_det_tstz%TYPE DEFAULT NULL,
        dt_surgery_time_det_tstz_nin   IN BOOLEAN := TRUE,
        desc_diet_in                   IN epis_info.desc_diet%TYPE DEFAULT NULL,
        desc_diet_nin                  IN BOOLEAN := TRUE,
        dt_admin_tstz_in               IN epis_info.dt_admin_tstz%TYPE DEFAULT NULL,
        dt_admin_tstz_nin              IN BOOLEAN := TRUE,
        id_triage_color_in             IN epis_info.id_triage_color%TYPE DEFAULT NULL,
        id_triage_color_nin            IN BOOLEAN := TRUE,
        id_software_in                 IN epis_info.id_software%TYPE DEFAULT NULL,
        id_software_nin                IN BOOLEAN := TRUE,
        where_in                       VARCHAR2 DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
        l_sql                          VARCHAR2(32767);
        l_rows_out                     table_varchar;
        l_id_bed_n                     NUMBER(1);
        l_id_room_n                    NUMBER(1);
        l_id_professional_n            NUMBER(1);
        l_norton_n                     NUMBER(1);
        l_flg_hydric_n                 NUMBER(1);
        l_flg_wound_n                  NUMBER(1);
        l_companion_n                  NUMBER(1);
        l_flg_unknown_n                NUMBER(1);
        l_desc_info_n                  NUMBER(1);
        l_id_schedule_n                NUMBER(1);
        l_id_first_nurse_resp_n        NUMBER(1);
        l_flg_status_n                 NUMBER(1);
        l_id_dep_clin_serv_n           NUMBER(1);
        l_id_first_dep_clin_serv_n     NUMBER(1);
        l_id_institution_usf_n         NUMBER(1);
        l_id_prof_team_n               NUMBER(1);
        l_id_triage_n                  NUMBER(1);
        l_id_triage_white_reason_n     NUMBER(1);
        l_id_first_triage_n            NUMBER(1);
        l_id_first_triage_wr_n         NUMBER(1);
        l_dt_harvest_tstz_n            NUMBER(1);
        l_dt_last_interaction_tstz_n   NUMBER(1);
        l_dt_movement_tstz_n           NUMBER(1);
        l_dt_next_drug_tstz_n          NUMBER(1);
        l_dt_first_obs_tstz_n          NUMBER(1);
        l_dt_next_intervention_tstz_n  NUMBER(1);
        l_dt_next_vital_sign_tstz_n    NUMBER(1);
        l_dt_next_position_tstz_n      NUMBER(1);
        l_dt_entrance_room_tstz_n      NUMBER(1);
        l_dt_harvest_mov_tstz_n        NUMBER(1);
        l_dt_first_nurse_obs_tstz_n    NUMBER(1);
        l_dt_first_analysis_exe_tstz_n NUMBER(1);
        l_dt_first_analysis_req_tstz_n NUMBER(1);
        l_dt_first_image_exec_tstz_n   NUMBER(1);
        l_dt_first_image_req_tstz_n    NUMBER(1);
        l_dt_first_drug_prsc_tstz_n    NUMBER(1);
        l_dt_first_drug_take_tstz_n    NUMBER(1);
        l_dt_first_interv_prsc_tstz_n  NUMBER(1);
        l_dt_first_interv_take_tstz_n  NUMBER(1);
        l_dt_first_inst_obs_tstz_n     NUMBER(1);
        l_dt_init_n                    NUMBER(1);
        l_id_prof_first_obs_n          NUMBER(1);
        l_id_prof_first_nurse_obs_n    NUMBER(1);
        l_dt_first_sch_n               NUMBER(1);
        l_dt_first_nurse_sch_n         NUMBER(1);
        l_id_prof_first_sch_n          NUMBER(1);
        l_id_prof_first_nurse_sch_n    NUMBER(1);
        l_id_patient_n                 NUMBER(1);
        l_flg_dsch_status_n            NUMBER(1);
        l_id_disch_reas_dest_n         NUMBER(1);
        l_dt_med_tstz_n                NUMBER(1);
        l_dt_pend_active_tstz_n        NUMBER(1);
        l_id_dcs_requested_n           NUMBER(1);
        l_id_instit_requested_n        NUMBER(1);
        l_id_prof_schedules_n          NUMBER(1);
        l_flg_sch_status_n             NUMBER(1);
        l_id_complaint_n               NUMBER(1);
        l_flg_urgency_n                NUMBER(1);
        l_sch_group_id_patient_n       NUMBER(1);
        l_id_schedule_outp_n           NUMBER(1);
        l_sch_prof_outp_id_prof_n      NUMBER(1);
        l_id_schedule_sr_n             NUMBER(1);
        l_triage_acuity_n              NUMBER(1);
        l_triage_color_text_n          NUMBER(1);
        l_triage_rank_acuity_n         NUMBER(1);
        l_triage_flg_letter_n          NUMBER(1);
        l_fast_track_icon_n            NUMBER(1);
        l_fast_track_desc_n            NUMBER(1);
        l_fast_track_color_n           NUMBER(1);
        l_id_room_scheduled_n          NUMBER(1);
        l_room_sch_flg_status_n        NUMBER(1);
        l_flg_pat_status_n             NUMBER(1);
        l_dt_room_entry_tstz_n         NUMBER(1);
        l_dt_surgery_time_det_tstz_n   NUMBER(1);
        l_desc_diet_n                  NUMBER(1);
        l_dt_admin_tstz_n              NUMBER(1);
        l_id_triage_color_n            NUMBER(1);
        l_id_software_n                NUMBER(1);
        id_episode_in                  epis_info.id_episode%TYPE;
    BEGIN
    
        l_id_bed_n                     := sys.diutil.bool_to_int(id_bed_nin);
        l_id_room_n                    := sys.diutil.bool_to_int(id_room_nin);
        l_id_professional_n            := sys.diutil.bool_to_int(id_professional_nin);
        l_norton_n                     := sys.diutil.bool_to_int(norton_nin);
        l_flg_hydric_n                 := sys.diutil.bool_to_int(flg_hydric_nin);
        l_flg_wound_n                  := sys.diutil.bool_to_int(flg_wound_nin);
        l_companion_n                  := sys.diutil.bool_to_int(companion_nin);
        l_flg_unknown_n                := sys.diutil.bool_to_int(flg_unknown_nin);
        l_desc_info_n                  := sys.diutil.bool_to_int(desc_info_nin);
        l_id_schedule_n                := sys.diutil.bool_to_int(id_schedule_nin);
        l_id_first_nurse_resp_n        := sys.diutil.bool_to_int(id_first_nurse_resp_nin);
        l_flg_status_n                 := sys.diutil.bool_to_int(flg_status_nin);
        l_id_dep_clin_serv_n           := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_id_first_dep_clin_serv_n     := sys.diutil.bool_to_int(id_first_dep_clin_serv_nin);
        l_id_institution_usf_n         := sys.diutil.bool_to_int(id_institution_usf_nin);
        l_id_prof_team_n               := sys.diutil.bool_to_int(id_prof_team_nin);
        l_id_triage_n                  := sys.diutil.bool_to_int(id_triage_nin);
        l_id_triage_white_reason_n     := sys.diutil.bool_to_int(id_triage_white_reason_nin);
        l_id_first_triage_n            := sys.diutil.bool_to_int(id_first_triage_nin);
        l_id_first_triage_wr_n         := sys.diutil.bool_to_int(id_first_triage_wr_nin);
        l_dt_harvest_tstz_n            := sys.diutil.bool_to_int(dt_harvest_tstz_nin);
        l_dt_last_interaction_tstz_n   := sys.diutil.bool_to_int(dt_last_interaction_tstz_nin);
        l_dt_movement_tstz_n           := sys.diutil.bool_to_int(dt_movement_tstz_nin);
        l_dt_next_drug_tstz_n          := sys.diutil.bool_to_int(dt_next_drug_tstz_nin);
        l_dt_first_obs_tstz_n          := sys.diutil.bool_to_int(dt_first_obs_tstz_nin);
        l_dt_next_intervention_tstz_n  := sys.diutil.bool_to_int(dt_next_intervention_tstz_nin);
        l_dt_next_vital_sign_tstz_n    := sys.diutil.bool_to_int(dt_next_vital_sign_tstz_nin);
        l_dt_next_position_tstz_n      := sys.diutil.bool_to_int(dt_next_position_tstz_nin);
        l_dt_entrance_room_tstz_n      := sys.diutil.bool_to_int(dt_entrance_room_tstz_nin);
        l_dt_harvest_mov_tstz_n        := sys.diutil.bool_to_int(dt_harvest_mov_tstz_nin);
        l_dt_first_nurse_obs_tstz_n    := sys.diutil.bool_to_int(dt_first_nurse_obs_tstz_nin);
        l_dt_first_analysis_exe_tstz_n := sys.diutil.bool_to_int(dt_first_analysis_exe_tstz_nin);
        l_dt_first_analysis_req_tstz_n := sys.diutil.bool_to_int(dt_first_analysis_req_tstz_nin);
        l_dt_first_image_exec_tstz_n   := sys.diutil.bool_to_int(dt_first_image_exec_tstz_nin);
        l_dt_first_image_req_tstz_n    := sys.diutil.bool_to_int(dt_first_image_req_tstz_nin);
        l_dt_first_drug_prsc_tstz_n    := sys.diutil.bool_to_int(dt_first_drug_prsc_tstz_nin);
        l_dt_first_drug_take_tstz_n    := sys.diutil.bool_to_int(dt_first_drug_take_tstz_nin);
        l_dt_first_interv_prsc_tstz_n  := sys.diutil.bool_to_int(dt_first_interv_prsc_tstz_nin);
        l_dt_first_interv_take_tstz_n  := sys.diutil.bool_to_int(dt_first_interv_take_tstz_nin);
        l_dt_first_inst_obs_tstz_n     := sys.diutil.bool_to_int(dt_first_inst_obs_tstz_nin);
        l_dt_init_n                    := sys.diutil.bool_to_int(dt_init_nin);
        l_id_prof_first_obs_n          := sys.diutil.bool_to_int(id_prof_first_obs_nin);
        l_id_prof_first_nurse_obs_n    := sys.diutil.bool_to_int(id_prof_first_nurse_obs_nin);
        l_dt_first_sch_n               := sys.diutil.bool_to_int(dt_first_sch_nin);
        l_dt_first_nurse_sch_n         := sys.diutil.bool_to_int(dt_first_nurse_sch_nin);
        l_id_prof_first_sch_n          := sys.diutil.bool_to_int(id_prof_first_sch_nin);
        l_id_prof_first_nurse_sch_n    := sys.diutil.bool_to_int(id_prof_first_nurse_sch_nin);
        l_id_patient_n                 := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_dsch_status_n            := sys.diutil.bool_to_int(flg_dsch_status_nin);
        l_id_disch_reas_dest_n         := sys.diutil.bool_to_int(id_disch_reas_dest_nin);
        l_dt_med_tstz_n                := sys.diutil.bool_to_int(dt_med_tstz_nin);
        l_dt_pend_active_tstz_n        := sys.diutil.bool_to_int(dt_pend_active_tstz_nin);
        l_id_dcs_requested_n           := sys.diutil.bool_to_int(id_dcs_requested_nin);
        l_id_instit_requested_n        := sys.diutil.bool_to_int(id_instit_requested_nin);
        l_id_prof_schedules_n          := sys.diutil.bool_to_int(id_prof_schedules_nin);
        l_flg_sch_status_n             := sys.diutil.bool_to_int(flg_sch_status_nin);
        l_id_complaint_n               := sys.diutil.bool_to_int(id_complaint_nin);
        l_flg_urgency_n                := sys.diutil.bool_to_int(flg_urgency_nin);
        l_sch_group_id_patient_n       := sys.diutil.bool_to_int(sch_group_id_patient_nin);
        l_id_schedule_outp_n           := sys.diutil.bool_to_int(id_schedule_outp_nin);
        l_sch_prof_outp_id_prof_n      := sys.diutil.bool_to_int(sch_prof_outp_id_prof_nin);
        l_id_schedule_sr_n             := sys.diutil.bool_to_int(id_schedule_sr_nin);
        l_triage_acuity_n              := sys.diutil.bool_to_int(triage_acuity_nin);
        l_triage_color_text_n          := sys.diutil.bool_to_int(triage_color_text_nin);
        l_triage_rank_acuity_n         := sys.diutil.bool_to_int(triage_rank_acuity_nin);
        l_triage_flg_letter_n          := sys.diutil.bool_to_int(triage_flg_letter_nin);
        l_fast_track_icon_n            := sys.diutil.bool_to_int(fast_track_icon_nin);
        l_fast_track_desc_n            := sys.diutil.bool_to_int(fast_track_desc_nin);
        l_fast_track_color_n           := sys.diutil.bool_to_int(fast_track_color_nin);
        l_id_room_scheduled_n          := sys.diutil.bool_to_int(id_room_scheduled_nin);
        l_room_sch_flg_status_n        := sys.diutil.bool_to_int(room_sch_flg_status_nin);
        l_flg_pat_status_n             := sys.diutil.bool_to_int(flg_pat_status_nin);
        l_dt_room_entry_tstz_n         := sys.diutil.bool_to_int(dt_room_entry_tstz_nin);
        l_dt_surgery_time_det_tstz_n   := sys.diutil.bool_to_int(dt_surgery_time_det_tstz_nin);
        l_desc_diet_n                  := sys.diutil.bool_to_int(desc_diet_nin);
        l_dt_admin_tstz_n              := sys.diutil.bool_to_int(dt_admin_tstz_nin);
        l_id_triage_color_n            := sys.diutil.bool_to_int(id_triage_color_nin);
        l_id_software_n                := sys.diutil.bool_to_int(id_software_nin);
    
        l_sql := 'UPDATE EPIS_INFO SET ' || ' ID_BED = decode (' || l_id_bed_n ||
                 ',0,:id_bed_in, NVL (:id_bed_in, ID_BED)) ' || ',' || ' ID_ROOM = decode (' || l_id_room_n ||
                 ',0,:id_room_in, NVL (:id_room_in, ID_ROOM)) ' || ',' || ' ID_PROFESSIONAL = decode (' ||
                 l_id_professional_n || ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' NORTON = decode (' || l_norton_n || ',0,:norton_in, NVL (:norton_in, NORTON)) ' || ',' ||
                 ' FLG_HYDRIC = decode (' || l_flg_hydric_n || ',0,:flg_hydric_in, NVL (:flg_hydric_in, FLG_HYDRIC)) ' || ',' ||
                 ' FLG_WOUND = decode (' || l_flg_wound_n || ',0,:flg_wound_in, NVL (:flg_wound_in, FLG_WOUND)) ' || ',' ||
                 ' COMPANION = decode (' || l_companion_n || ',0,:companion_in, NVL (:companion_in, COMPANION)) ' || ',' ||
                 ' FLG_UNKNOWN = decode (' || l_flg_unknown_n ||
                 ',0,:flg_unknown_in, NVL (:flg_unknown_in, FLG_UNKNOWN)) ' || ',' || ' DESC_INFO = decode (' ||
                 l_desc_info_n || ',0,:desc_info_in, NVL (:desc_info_in, DESC_INFO)) ' || ',' ||
                 ' ID_SCHEDULE = decode (' || l_id_schedule_n ||
                 ',0,:id_schedule_in, NVL (:id_schedule_in, ID_SCHEDULE)) ' || ',' || ' ID_FIRST_NURSE_RESP = decode (' ||
                 l_id_first_nurse_resp_n ||
                 ',0,:id_first_nurse_resp_in, NVL (:id_first_nurse_resp_in, ID_FIRST_NURSE_RESP)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_DEP_CLIN_SERV = decode (' || l_id_dep_clin_serv_n ||
                 ',0,:id_dep_clin_serv_in, NVL (:id_dep_clin_serv_in, ID_DEP_CLIN_SERV)) ' || ',' ||
                 ' ID_FIRST_DEP_CLIN_SERV = decode (' || l_id_first_dep_clin_serv_n ||
                 ',0,:id_first_dep_clin_serv_in, NVL (:id_first_dep_clin_serv_in, ID_FIRST_DEP_CLIN_SERV)) ' || ',' ||
                 ' ID_INSTITUTION_USF = decode (' || l_id_institution_usf_n ||
                 ',0,:id_institution_usf_in, NVL (:id_institution_usf_in, ID_INSTITUTION_USF)) ' || ',' ||
                 ' ID_PROF_TEAM = decode (' || l_id_prof_team_n ||
                 ',0,:id_prof_team_in, NVL (:id_prof_team_in, ID_PROF_TEAM)) ' || ',' || ' ID_TRIAGE = decode (' ||
                 l_id_triage_n || ',0,:id_triage_in, NVL (:id_triage_in, ID_TRIAGE)) ' || ',' ||
                 ' ID_TRIAGE_WHITE_REASON = decode (' || l_id_triage_white_reason_n ||
                 ',0,:id_triage_white_reason_in, NVL (:id_triage_white_reason_in, ID_TRIAGE_WHITE_REASON)) ' || ',' ||
                 ' ID_FIRST_TRIAGE = decode (' || l_id_first_triage_n ||
                 ',0,:id_first_triage_in, NVL (:id_first_triage_in, ID_FIRST_TRIAGE)) ' || ',' ||
                 ' ID_FIRST_TRIAGE_WR = decode (' || l_id_first_triage_wr_n ||
                 ',0,:id_first_triage_wr_in, NVL (:id_first_triage_wr_in, ID_FIRST_TRIAGE_WR)) ' || ',' ||
                 ' DT_HARVEST_TSTZ = decode (' || l_dt_harvest_tstz_n ||
                 ',0,:dt_harvest_tstz_in, NVL (:dt_harvest_tstz_in, DT_HARVEST_TSTZ)) ' || ',' ||
                 ' DT_LAST_INTERACTION_TSTZ = decode (' || l_dt_last_interaction_tstz_n ||
                 ',0,:dt_last_interaction_tstz_in, NVL (:dt_last_interaction_tstz_in, DT_LAST_INTERACTION_TSTZ)) ' || ',' ||
                 ' DT_MOVEMENT_TSTZ = decode (' || l_dt_movement_tstz_n ||
                 ',0,:dt_movement_tstz_in, NVL (:dt_movement_tstz_in, DT_MOVEMENT_TSTZ)) ' || ',' ||
                 ' DT_NEXT_DRUG_TSTZ = decode (' || l_dt_next_drug_tstz_n ||
                 ',0,:dt_next_drug_tstz_in, NVL (:dt_next_drug_tstz_in, DT_NEXT_DRUG_TSTZ)) ' || ',' ||
                 ' DT_FIRST_OBS_TSTZ = decode (' || l_dt_first_obs_tstz_n ||
                 ',0,:dt_first_obs_tstz_in, NVL (:dt_first_obs_tstz_in, DT_FIRST_OBS_TSTZ)) ' || ',' ||
                 ' DT_NEXT_INTERVENTION_TSTZ = decode (' || l_dt_next_intervention_tstz_n ||
                 ',0,:dt_next_intervention_tstz_in, NVL (:dt_next_intervention_tstz_in, DT_NEXT_INTERVENTION_TSTZ)) ' || ',' ||
                 ' DT_NEXT_VITAL_SIGN_TSTZ = decode (' || l_dt_next_vital_sign_tstz_n ||
                 ',0,:dt_next_vital_sign_tstz_in, NVL (:dt_next_vital_sign_tstz_in, DT_NEXT_VITAL_SIGN_TSTZ)) ' || ',' ||
                 ' DT_NEXT_POSITION_TSTZ = decode (' || l_dt_next_position_tstz_n ||
                 ',0,:dt_next_position_tstz_in, NVL (:dt_next_position_tstz_in, DT_NEXT_POSITION_TSTZ)) ' || ',' ||
                 ' DT_ENTRANCE_ROOM_TSTZ = decode (' || l_dt_entrance_room_tstz_n ||
                 ',0,:dt_entrance_room_tstz_in, NVL (:dt_entrance_room_tstz_in, DT_ENTRANCE_ROOM_TSTZ)) ' || ',' ||
                 ' DT_HARVEST_MOV_TSTZ = decode (' || l_dt_harvest_mov_tstz_n ||
                 ',0,:dt_harvest_mov_tstz_in, NVL (:dt_harvest_mov_tstz_in, DT_HARVEST_MOV_TSTZ)) ' || ',' ||
                 ' DT_FIRST_NURSE_OBS_TSTZ = decode (' || l_dt_first_nurse_obs_tstz_n ||
                 ',0,:dt_first_nurse_obs_tstz_in, NVL (:dt_first_nurse_obs_tstz_in, DT_FIRST_NURSE_OBS_TSTZ)) ' || ',' ||
                 ' DT_FIRST_ANALYSIS_EXE_TSTZ = decode (' || l_dt_first_analysis_exe_tstz_n ||
                 ',0,:dt_first_analysis_exe_tstz_in, NVL (:dt_first_analysis_exe_tstz_in, DT_FIRST_ANALYSIS_EXE_TSTZ)) ' || ',' ||
                 ' DT_FIRST_ANALYSIS_REQ_TSTZ = decode (' || l_dt_first_analysis_req_tstz_n ||
                 ',0,:dt_first_analysis_req_tstz_in, NVL (:dt_first_analysis_req_tstz_in, DT_FIRST_ANALYSIS_REQ_TSTZ)) ' || ',' ||
                 ' DT_FIRST_IMAGE_EXEC_TSTZ = decode (' || l_dt_first_image_exec_tstz_n ||
                 ',0,:dt_first_image_exec_tstz_in, NVL (:dt_first_image_exec_tstz_in, DT_FIRST_IMAGE_EXEC_TSTZ)) ' || ',' ||
                 ' DT_FIRST_IMAGE_REQ_TSTZ = decode (' || l_dt_first_image_req_tstz_n ||
                 ',0,:dt_first_image_req_tstz_in, NVL (:dt_first_image_req_tstz_in, DT_FIRST_IMAGE_REQ_TSTZ)) ' || ',' ||
                 ' DT_FIRST_DRUG_PRSC_TSTZ = decode (' || l_dt_first_drug_prsc_tstz_n ||
                 ',0,:dt_first_drug_prsc_tstz_in, NVL (:dt_first_drug_prsc_tstz_in, DT_FIRST_DRUG_PRSC_TSTZ)) ' || ',' ||
                 ' DT_FIRST_DRUG_TAKE_TSTZ = decode (' || l_dt_first_drug_take_tstz_n ||
                 ',0,:dt_first_drug_take_tstz_in, NVL (:dt_first_drug_take_tstz_in, DT_FIRST_DRUG_TAKE_TSTZ)) ' || ',' ||
                 ' DT_FIRST_INTERV_PRSC_TSTZ = decode (' || l_dt_first_interv_prsc_tstz_n ||
                 ',0,:dt_first_interv_prsc_tstz_in, NVL (:dt_first_interv_prsc_tstz_in, DT_FIRST_INTERV_PRSC_TSTZ)) ' || ',' ||
                 ' DT_FIRST_INTERV_TAKE_TSTZ = decode (' || l_dt_first_interv_take_tstz_n ||
                 ',0,:dt_first_interv_take_tstz_in, NVL (:dt_first_interv_take_tstz_in, DT_FIRST_INTERV_TAKE_TSTZ)) ' || ',' ||
                 ' DT_FIRST_INST_OBS_TSTZ = decode (' || l_dt_first_inst_obs_tstz_n ||
                 ',0,:dt_first_inst_obs_tstz_in, NVL (:dt_first_inst_obs_tstz_in, DT_FIRST_INST_OBS_TSTZ)) ' || ',' ||
                 ' DT_INIT = decode (' || l_dt_init_n || ',0,:dt_init_in, NVL (:dt_init_in, DT_INIT)) ' || ',' ||
                 ' ID_PROF_FIRST_OBS = decode (' || l_id_prof_first_obs_n ||
                 ',0,:id_prof_first_obs_in, NVL (:id_prof_first_obs_in, ID_PROF_FIRST_OBS)) ' || ',' ||
                 ' ID_PROF_FIRST_NURSE_OBS = decode (' || l_id_prof_first_nurse_obs_n ||
                 ',0,:id_prof_first_nurse_obs_in, NVL (:id_prof_first_nurse_obs_in, ID_PROF_FIRST_NURSE_OBS)) ' || ',' ||
                 ' DT_FIRST_SCH = decode (' || l_dt_first_sch_n ||
                 ',0,:dt_first_sch_in, NVL (:dt_first_sch_in, DT_FIRST_SCH)) ' || ',' ||
                 ' DT_FIRST_NURSE_SCH = decode (' || l_dt_first_nurse_sch_n ||
                 ',0,:dt_first_nurse_sch_in, NVL (:dt_first_nurse_sch_in, DT_FIRST_NURSE_SCH)) ' || ',' ||
                 ' ID_PROF_FIRST_SCH = decode (' || l_id_prof_first_sch_n ||
                 ',0,:id_prof_first_sch_in, NVL (:id_prof_first_sch_in, ID_PROF_FIRST_SCH)) ' || ',' ||
                 ' ID_PROF_FIRST_NURSE_SCH = decode (' || l_id_prof_first_nurse_sch_n ||
                 ',0,:id_prof_first_nurse_sch_in, NVL (:id_prof_first_nurse_sch_in, ID_PROF_FIRST_NURSE_SCH)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' FLG_DSCH_STATUS = decode (' || l_flg_dsch_status_n ||
                 ',0,:flg_dsch_status_in, NVL (:flg_dsch_status_in, FLG_DSCH_STATUS)) ' || ',' ||
                 ' ID_DISCH_REAS_DEST = decode (' || l_id_disch_reas_dest_n ||
                 ',0,:id_disch_reas_dest_in, NVL (:id_disch_reas_dest_in, ID_DISCH_REAS_DEST)) ' || ',' ||
                 ' DT_MED_TSTZ = decode (' || l_dt_med_tstz_n ||
                 ',0,:dt_med_tstz_in, NVL (:dt_med_tstz_in, DT_MED_TSTZ)) ' || ',' || ' DT_PEND_ACTIVE_TSTZ = decode (' ||
                 l_dt_pend_active_tstz_n ||
                 ',0,:dt_pend_active_tstz_in, NVL (:dt_pend_active_tstz_in, DT_PEND_ACTIVE_TSTZ)) ' || ',' ||
                 ' ID_DCS_REQUESTED = decode (' || l_id_dcs_requested_n ||
                 ',0,:id_dcs_requested_in, NVL (:id_dcs_requested_in, ID_DCS_REQUESTED)) ' || ',' ||
                 ' ID_INSTIT_REQUESTED = decode (' || l_id_instit_requested_n ||
                 ',0,:id_instit_requested_in, NVL (:id_instit_requested_in, ID_INSTIT_REQUESTED)) ' || ',' ||
                 ' ID_PROF_SCHEDULES = decode (' || l_id_prof_schedules_n ||
                 ',0,:id_prof_schedules_in, NVL (:id_prof_schedules_in, ID_PROF_SCHEDULES)) ' || ',' ||
                 ' FLG_SCH_STATUS = decode (' || l_flg_sch_status_n ||
                 ',0,:flg_sch_status_in, NVL (:flg_sch_status_in, FLG_SCH_STATUS)) ' || ',' ||
                 ' ID_COMPLAINT = decode (' || l_id_complaint_n ||
                 ',0,:id_complaint_in, NVL (:id_complaint_in, ID_COMPLAINT)) ' || ',' || ' FLG_URGENCY = decode (' ||
                 l_flg_urgency_n || ',0,:flg_urgency_in, NVL (:flg_urgency_in, FLG_URGENCY)) ' || ',' ||
                 ' SCH_GROUP_ID_PATIENT = decode (' || l_sch_group_id_patient_n ||
                 ',0,:sch_group_id_patient_in, NVL (:sch_group_id_patient_in, SCH_GROUP_ID_PATIENT)) ' || ',' ||
                 ' ID_SCHEDULE_OUTP = decode (' || l_id_schedule_outp_n ||
                 ',0,:id_schedule_outp_in, NVL (:id_schedule_outp_in, ID_SCHEDULE_OUTP)) ' || ',' ||
                 ' SCH_PROF_OUTP_ID_PROF = decode (' || l_sch_prof_outp_id_prof_n ||
                 ',0,:sch_prof_outp_id_prof_in, NVL (:sch_prof_outp_id_prof_in, SCH_PROF_OUTP_ID_PROF)) ' || ',' ||
                 ' ID_SCHEDULE_SR = decode (' || l_id_schedule_sr_n ||
                 ',0,:id_schedule_sr_in, NVL (:id_schedule_sr_in, ID_SCHEDULE_SR)) ' || ',' ||
                 ' TRIAGE_ACUITY = decode (' || l_triage_acuity_n ||
                 ',0,:triage_acuity_in, NVL (:triage_acuity_in, TRIAGE_ACUITY)) ' || ',' ||
                 ' TRIAGE_COLOR_TEXT = decode (' || l_triage_color_text_n ||
                 ',0,:triage_color_text_in, NVL (:triage_color_text_in, TRIAGE_COLOR_TEXT)) ' || ',' ||
                 ' TRIAGE_RANK_ACUITY = decode (' || l_triage_rank_acuity_n ||
                 ',0,:triage_rank_acuity_in, NVL (:triage_rank_acuity_in, TRIAGE_RANK_ACUITY)) ' || ',' ||
                 ' TRIAGE_FLG_LETTER = decode (' || l_triage_flg_letter_n ||
                 ',0,:triage_flg_letter_in, NVL (:triage_flg_letter_in, TRIAGE_FLG_LETTER)) ' || ',' ||
                 ' FAST_TRACK_ICON = decode (' || l_fast_track_icon_n ||
                 ',0,:fast_track_icon_in, NVL (:fast_track_icon_in, FAST_TRACK_ICON)) ' || ',' ||
                 ' FAST_TRACK_DESC = decode (' || l_fast_track_desc_n ||
                 ',0,:fast_track_desc_in, NVL (:fast_track_desc_in, FAST_TRACK_DESC)) ' || ',' ||
                 ' FAST_TRACK_COLOR = decode (' || l_fast_track_color_n ||
                 ',0,:fast_track_color_in, NVL (:fast_track_color_in, FAST_TRACK_COLOR)) ' || ',' ||
                 ' ID_ROOM_SCHEDULED = decode (' || l_id_room_scheduled_n ||
                 ',0,:id_room_scheduled_in, NVL (:id_room_scheduled_in, ID_ROOM_SCHEDULED)) ' || ',' ||
                 ' ROOM_SCH_FLG_STATUS = decode (' || l_room_sch_flg_status_n ||
                 ',0,:room_sch_flg_status_in, NVL (:room_sch_flg_status_in, ROOM_SCH_FLG_STATUS)) ' || ',' ||
                 ' FLG_PAT_STATUS = decode (' || l_flg_pat_status_n ||
                 ',0,:flg_pat_status_in, NVL (:flg_pat_status_in, FLG_PAT_STATUS)) ' || ',' ||
                 ' DT_ROOM_ENTRY_TSTZ = decode (' || l_dt_room_entry_tstz_n ||
                 ',0,:dt_room_entry_tstz_in, NVL (:dt_room_entry_tstz_in, DT_ROOM_ENTRY_TSTZ)) ' || ',' ||
                 ' DT_SURGERY_TIME_DET_TSTZ = decode (' || l_dt_surgery_time_det_tstz_n ||
                 ',0,:dt_surgery_time_det_tstz_in, NVL (:dt_surgery_time_det_tstz_in, DT_SURGERY_TIME_DET_TSTZ)) ' || ',' ||
                 ' DESC_DIET = decode (' || l_desc_diet_n || ',0,:desc_diet_in, NVL (:desc_diet_in, DESC_DIET)) ' || ',' ||
                 ' DT_ADMIN_TSTZ = decode (' || l_dt_admin_tstz_n ||
                 ',0,:dt_admin_tstz_in, NVL (:dt_admin_tstz_in, DT_ADMIN_TSTZ)) ' || ',' ||
                 ' ID_TRIAGE_COLOR = decode (' || l_id_triage_color_n ||
                 ',0,:id_triage_color_in, NVL (:id_triage_color_in, ID_TRIAGE_COLOR)) ' || ',' ||
                 ' ID_SOFTWARE = decode (' || l_id_software_n ||
                 ',0,:id_software_in, NVL (:id_software_in, ID_SOFTWARE)) ' || ' where ' || nvl(where_in, '(1=1)') ||
                 ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_bed_in, id_room_in, id_professional_in, norton_in, flg_hydric_in, flg_wound_in, companion_in, flg_unknown_in, desc_info_in, id_schedule_in, id_first_nurse_resp_in, flg_status_in, id_dep_clin_serv_in, id_first_dep_clin_serv_in, id_institution_usf_in, id_prof_team_in, id_triage_in, id_triage_white_reason_in, id_first_triage_in, id_first_triage_wr_in, dt_harvest_tstz_in, dt_last_interaction_tstz_in, dt_movement_tstz_in, dt_next_drug_tstz_in, dt_first_obs_tstz_in, dt_next_intervention_tstz_in, dt_next_vital_sign_tstz_in, dt_next_position_tstz_in, dt_entrance_room_tstz_in, dt_harvest_mov_tstz_in, dt_first_nurse_obs_tstz_in, dt_first_analysis_exe_tstz_in, dt_first_analysis_req_tstz_in, dt_first_image_exec_tstz_in, dt_first_image_req_tstz_in, dt_first_drug_prsc_tstz_in, dt_first_drug_take_tstz_in, dt_first_interv_prsc_tstz_in, dt_first_interv_take_tstz_in, dt_first_inst_obs_tstz_in, dt_init_in, id_prof_first_obs_in, id_prof_first_nurse_obs_in, dt_first_sch_in, dt_first_nurse_sch_in, id_prof_first_sch_in, id_prof_first_nurse_sch_in, id_patient_in, flg_dsch_status_in, id_disch_reas_dest_in, dt_med_tstz_in, dt_pend_active_tstz_in, id_dcs_requested_in, id_instit_requested_in, id_prof_schedules_in, flg_sch_status_in, id_complaint_in, flg_urgency_in, sch_group_id_patient_in, id_schedule_outp_in, sch_prof_outp_id_prof_in, id_schedule_sr_in, triage_acuity_in, triage_color_text_in, triage_rank_acuity_in, triage_flg_letter_in, fast_track_icon_in, fast_track_desc_in, fast_track_color_in, id_room_scheduled_in, room_sch_flg_status_in, flg_pat_status_in, dt_room_entry_tstz_in, dt_surgery_time_det_tstz_in, desc_diet_in, dt_admin_tstz_in, id_triage_color_in, id_software_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'EIO_EPIS_FK_I'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "EIO_EPIS_FK_I"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'EPIS_INFO',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_INFO');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    IF l_name = 'EIO_BED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED',
                                                        value_in           => id_bed_in);
                    END IF;
                    IF l_name = 'EIO_COMPL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COMPLAINT',
                                                        value_in           => id_complaint_in);
                    END IF;
                    IF l_name = 'EIO_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'EIO_DCS_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIRST_DEP_CLIN_SERV',
                                                        value_in           => id_first_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'EIO_DCS_REQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DCS_REQUESTED',
                                                        value_in           => id_dcs_requested_in);
                    END IF;
                    IF l_name = 'EIO_DISCH_REAS_DEST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DISCH_REAS_DEST',
                                                        value_in           => id_disch_reas_dest_in);
                    END IF;
                    IF l_name = 'EIO_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EIO_INST_REQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTIT_REQUESTED',
                                                        value_in           => id_instit_requested_in);
                    END IF;
                    IF l_name = 'EIO_INST_USF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION_USF',
                                                        value_in           => id_institution_usf_in);
                    END IF;
                    IF l_name = 'EIO_NURSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIRST_NURSE_RESP',
                                                        value_in           => id_first_nurse_resp_in);
                    END IF;
                    IF l_name = 'EIO_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'EIO_PAT_SCH_GRP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'SCH_GROUP_ID_PATIENT',
                                                        value_in           => sch_group_id_patient_in);
                    END IF;
                    IF l_name = 'EIO_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'EIO_PROF_NURSE_OBS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_FIRST_NURSE_OBS',
                                                        value_in           => id_prof_first_nurse_obs_in);
                    END IF;
                    IF l_name = 'EIO_PROF_NURSE_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_FIRST_NURSE_SCH',
                                                        value_in           => id_prof_first_nurse_sch_in);
                    END IF;
                    IF l_name = 'EIO_PROF_OBS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_FIRST_OBS',
                                                        value_in           => id_prof_first_obs_in);
                    END IF;
                    IF l_name = 'EIO_PROF_SCHS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_SCHEDULES',
                                                        value_in           => id_prof_schedules_in);
                    END IF;
                    IF l_name = 'EIO_PROF_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_FIRST_SCH',
                                                        value_in           => id_prof_first_sch_in);
                    END IF;
                    IF l_name = 'EIO_PROF_SCH_O_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'SCH_PROF_OUTP_ID_PROF',
                                                        value_in           => sch_prof_outp_id_prof_in);
                    END IF;
                    IF l_name = 'EIO_PROF_TEAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_TEAM',
                                                        value_in           => id_prof_team_in);
                    END IF;
                    IF l_name = 'EIO_RM_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM_SCHEDULED',
                                                        value_in           => id_room_scheduled_in);
                    END IF;
                    IF l_name = 'EIO_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'EIO_SCHD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE',
                                                        value_in           => id_schedule_in);
                    END IF;
                    IF l_name = 'EIO_SCH_O_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE_OUTP',
                                                        value_in           => id_schedule_outp_in);
                    END IF;
                    IF l_name = 'EIO_SCH_SR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE_SR',
                                                        value_in           => id_schedule_sr_in);
                    END IF;
                    IF l_name = 'EIO_TC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRIAGE_COLOR',
                                                        value_in           => id_triage_color_in);
                    END IF;
                    IF l_name = 'EIO_TRIAGE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRIAGE',
                                                        value_in           => id_triage_in);
                    END IF;
                    IF l_name = 'EIO_TRIAGE_FRST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIRST_TRIAGE',
                                                        value_in           => id_first_triage_in);
                    END IF;
                    IF l_name = 'EIO_TRIAGE_FRST_WR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FIRST_TRIAGE_WR',
                                                        value_in           => id_first_triage_wr_in);
                    END IF;
                    IF l_name = 'EIO_TRIAGE_WR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRIAGE_WHITE_REASON',
                                                        value_in           => id_triage_white_reason_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_bed_in                      IN epis_info.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                     IN BOOLEAN := TRUE,
        id_room_in                     IN epis_info.id_room%TYPE DEFAULT NULL,
        id_room_nin                    IN BOOLEAN := TRUE,
        id_professional_in             IN epis_info.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        norton_in                      IN epis_info.norton%TYPE DEFAULT NULL,
        norton_nin                     IN BOOLEAN := TRUE,
        flg_hydric_in                  IN epis_info.flg_hydric%TYPE DEFAULT NULL,
        flg_hydric_nin                 IN BOOLEAN := TRUE,
        flg_wound_in                   IN epis_info.flg_wound%TYPE DEFAULT NULL,
        flg_wound_nin                  IN BOOLEAN := TRUE,
        companion_in                   IN epis_info.companion%TYPE DEFAULT NULL,
        companion_nin                  IN BOOLEAN := TRUE,
        flg_unknown_in                 IN epis_info.flg_unknown%TYPE DEFAULT NULL,
        flg_unknown_nin                IN BOOLEAN := TRUE,
        desc_info_in                   IN epis_info.desc_info%TYPE DEFAULT NULL,
        desc_info_nin                  IN BOOLEAN := TRUE,
        id_schedule_in                 IN epis_info.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin                IN BOOLEAN := TRUE,
        id_first_nurse_resp_in         IN epis_info.id_first_nurse_resp%TYPE DEFAULT NULL,
        id_first_nurse_resp_nin        IN BOOLEAN := TRUE,
        flg_status_in                  IN epis_info.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        id_dep_clin_serv_in            IN epis_info.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin           IN BOOLEAN := TRUE,
        id_first_dep_clin_serv_in      IN epis_info.id_first_dep_clin_serv%TYPE DEFAULT NULL,
        id_first_dep_clin_serv_nin     IN BOOLEAN := TRUE,
        id_institution_usf_in          IN epis_info.id_institution_usf%TYPE DEFAULT NULL,
        id_institution_usf_nin         IN BOOLEAN := TRUE,
        id_prof_team_in                IN epis_info.id_prof_team%TYPE DEFAULT NULL,
        id_prof_team_nin               IN BOOLEAN := TRUE,
        id_triage_in                   IN epis_info.id_triage%TYPE DEFAULT NULL,
        id_triage_nin                  IN BOOLEAN := TRUE,
        id_triage_white_reason_in      IN epis_info.id_triage_white_reason%TYPE DEFAULT NULL,
        id_triage_white_reason_nin     IN BOOLEAN := TRUE,
        id_first_triage_in             IN epis_info.id_first_triage%TYPE DEFAULT NULL,
        id_first_triage_nin            IN BOOLEAN := TRUE,
        id_first_triage_wr_in          IN epis_info.id_first_triage_wr%TYPE DEFAULT NULL,
        id_first_triage_wr_nin         IN BOOLEAN := TRUE,
        dt_harvest_tstz_in             IN epis_info.dt_harvest_tstz%TYPE DEFAULT NULL,
        dt_harvest_tstz_nin            IN BOOLEAN := TRUE,
        dt_last_interaction_tstz_in    IN epis_info.dt_last_interaction_tstz%TYPE DEFAULT NULL,
        dt_last_interaction_tstz_nin   IN BOOLEAN := TRUE,
        dt_movement_tstz_in            IN epis_info.dt_movement_tstz%TYPE DEFAULT NULL,
        dt_movement_tstz_nin           IN BOOLEAN := TRUE,
        dt_next_drug_tstz_in           IN epis_info.dt_next_drug_tstz%TYPE DEFAULT NULL,
        dt_next_drug_tstz_nin          IN BOOLEAN := TRUE,
        dt_first_obs_tstz_in           IN epis_info.dt_first_obs_tstz%TYPE DEFAULT NULL,
        dt_first_obs_tstz_nin          IN BOOLEAN := TRUE,
        dt_next_intervention_tstz_in   IN epis_info.dt_next_intervention_tstz%TYPE DEFAULT NULL,
        dt_next_intervention_tstz_nin  IN BOOLEAN := TRUE,
        dt_next_vital_sign_tstz_in     IN epis_info.dt_next_vital_sign_tstz%TYPE DEFAULT NULL,
        dt_next_vital_sign_tstz_nin    IN BOOLEAN := TRUE,
        dt_next_position_tstz_in       IN epis_info.dt_next_position_tstz%TYPE DEFAULT NULL,
        dt_next_position_tstz_nin      IN BOOLEAN := TRUE,
        dt_entrance_room_tstz_in       IN epis_info.dt_entrance_room_tstz%TYPE DEFAULT NULL,
        dt_entrance_room_tstz_nin      IN BOOLEAN := TRUE,
        dt_harvest_mov_tstz_in         IN epis_info.dt_harvest_mov_tstz%TYPE DEFAULT NULL,
        dt_harvest_mov_tstz_nin        IN BOOLEAN := TRUE,
        dt_first_nurse_obs_tstz_in     IN epis_info.dt_first_nurse_obs_tstz%TYPE DEFAULT NULL,
        dt_first_nurse_obs_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_analysis_exe_tstz_in  IN epis_info.dt_first_analysis_exe_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_exe_tstz_nin IN BOOLEAN := TRUE,
        dt_first_analysis_req_tstz_in  IN epis_info.dt_first_analysis_req_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_req_tstz_nin IN BOOLEAN := TRUE,
        dt_first_image_exec_tstz_in    IN epis_info.dt_first_image_exec_tstz%TYPE DEFAULT NULL,
        dt_first_image_exec_tstz_nin   IN BOOLEAN := TRUE,
        dt_first_image_req_tstz_in     IN epis_info.dt_first_image_req_tstz%TYPE DEFAULT NULL,
        dt_first_image_req_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_drug_prsc_tstz_in     IN epis_info.dt_first_drug_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_drug_prsc_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_drug_take_tstz_in     IN epis_info.dt_first_drug_take_tstz%TYPE DEFAULT NULL,
        dt_first_drug_take_tstz_nin    IN BOOLEAN := TRUE,
        dt_first_interv_prsc_tstz_in   IN epis_info.dt_first_interv_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_interv_prsc_tstz_nin  IN BOOLEAN := TRUE,
        dt_first_interv_take_tstz_in   IN epis_info.dt_first_interv_take_tstz%TYPE DEFAULT NULL,
        dt_first_interv_take_tstz_nin  IN BOOLEAN := TRUE,
        dt_first_inst_obs_tstz_in      IN epis_info.dt_first_inst_obs_tstz%TYPE DEFAULT NULL,
        dt_first_inst_obs_tstz_nin     IN BOOLEAN := TRUE,
        dt_init_in                     IN epis_info.dt_init%TYPE DEFAULT NULL,
        dt_init_nin                    IN BOOLEAN := TRUE,
        id_prof_first_obs_in           IN epis_info.id_prof_first_obs%TYPE DEFAULT NULL,
        id_prof_first_obs_nin          IN BOOLEAN := TRUE,
        id_prof_first_nurse_obs_in     IN epis_info.id_prof_first_nurse_obs%TYPE DEFAULT NULL,
        id_prof_first_nurse_obs_nin    IN BOOLEAN := TRUE,
        dt_first_sch_in                IN epis_info.dt_first_sch%TYPE DEFAULT NULL,
        dt_first_sch_nin               IN BOOLEAN := TRUE,
        dt_first_nurse_sch_in          IN epis_info.dt_first_nurse_sch%TYPE DEFAULT NULL,
        dt_first_nurse_sch_nin         IN BOOLEAN := TRUE,
        id_prof_first_sch_in           IN epis_info.id_prof_first_sch%TYPE DEFAULT NULL,
        id_prof_first_sch_nin          IN BOOLEAN := TRUE,
        id_prof_first_nurse_sch_in     IN epis_info.id_prof_first_nurse_sch%TYPE DEFAULT NULL,
        id_prof_first_nurse_sch_nin    IN BOOLEAN := TRUE,
        id_patient_in                  IN epis_info.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        flg_dsch_status_in             IN epis_info.flg_dsch_status%TYPE DEFAULT NULL,
        flg_dsch_status_nin            IN BOOLEAN := TRUE,
        id_disch_reas_dest_in          IN epis_info.id_disch_reas_dest%TYPE DEFAULT NULL,
        id_disch_reas_dest_nin         IN BOOLEAN := TRUE,
        dt_med_tstz_in                 IN epis_info.dt_med_tstz%TYPE DEFAULT NULL,
        dt_med_tstz_nin                IN BOOLEAN := TRUE,
        dt_pend_active_tstz_in         IN epis_info.dt_pend_active_tstz%TYPE DEFAULT NULL,
        dt_pend_active_tstz_nin        IN BOOLEAN := TRUE,
        id_dcs_requested_in            IN epis_info.id_dcs_requested%TYPE DEFAULT NULL,
        id_dcs_requested_nin           IN BOOLEAN := TRUE,
        id_instit_requested_in         IN epis_info.id_instit_requested%TYPE DEFAULT NULL,
        id_instit_requested_nin        IN BOOLEAN := TRUE,
        id_prof_schedules_in           IN epis_info.id_prof_schedules%TYPE DEFAULT NULL,
        id_prof_schedules_nin          IN BOOLEAN := TRUE,
        flg_sch_status_in              IN epis_info.flg_sch_status%TYPE DEFAULT NULL,
        flg_sch_status_nin             IN BOOLEAN := TRUE,
        id_complaint_in                IN epis_info.id_complaint%TYPE DEFAULT NULL,
        id_complaint_nin               IN BOOLEAN := TRUE,
        flg_urgency_in                 IN epis_info.flg_urgency%TYPE DEFAULT NULL,
        flg_urgency_nin                IN BOOLEAN := TRUE,
        sch_group_id_patient_in        IN epis_info.sch_group_id_patient%TYPE DEFAULT NULL,
        sch_group_id_patient_nin       IN BOOLEAN := TRUE,
        id_schedule_outp_in            IN epis_info.id_schedule_outp%TYPE DEFAULT NULL,
        id_schedule_outp_nin           IN BOOLEAN := TRUE,
        sch_prof_outp_id_prof_in       IN epis_info.sch_prof_outp_id_prof%TYPE DEFAULT NULL,
        sch_prof_outp_id_prof_nin      IN BOOLEAN := TRUE,
        id_schedule_sr_in              IN epis_info.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin             IN BOOLEAN := TRUE,
        triage_acuity_in               IN epis_info.triage_acuity%TYPE DEFAULT NULL,
        triage_acuity_nin              IN BOOLEAN := TRUE,
        triage_color_text_in           IN epis_info.triage_color_text%TYPE DEFAULT NULL,
        triage_color_text_nin          IN BOOLEAN := TRUE,
        triage_rank_acuity_in          IN epis_info.triage_rank_acuity%TYPE DEFAULT NULL,
        triage_rank_acuity_nin         IN BOOLEAN := TRUE,
        triage_flg_letter_in           IN epis_info.triage_flg_letter%TYPE DEFAULT NULL,
        triage_flg_letter_nin          IN BOOLEAN := TRUE,
        fast_track_icon_in             IN epis_info.fast_track_icon%TYPE DEFAULT NULL,
        fast_track_icon_nin            IN BOOLEAN := TRUE,
        fast_track_desc_in             IN epis_info.fast_track_desc%TYPE DEFAULT NULL,
        fast_track_desc_nin            IN BOOLEAN := TRUE,
        fast_track_color_in            IN epis_info.fast_track_color%TYPE DEFAULT NULL,
        fast_track_color_nin           IN BOOLEAN := TRUE,
        id_room_scheduled_in           IN epis_info.id_room_scheduled%TYPE DEFAULT NULL,
        id_room_scheduled_nin          IN BOOLEAN := TRUE,
        room_sch_flg_status_in         IN epis_info.room_sch_flg_status%TYPE DEFAULT NULL,
        room_sch_flg_status_nin        IN BOOLEAN := TRUE,
        flg_pat_status_in              IN epis_info.flg_pat_status%TYPE DEFAULT NULL,
        flg_pat_status_nin             IN BOOLEAN := TRUE,
        dt_room_entry_tstz_in          IN epis_info.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_nin         IN BOOLEAN := TRUE,
        dt_surgery_time_det_tstz_in    IN epis_info.dt_surgery_time_det_tstz%TYPE DEFAULT NULL,
        dt_surgery_time_det_tstz_nin   IN BOOLEAN := TRUE,
        desc_diet_in                   IN epis_info.desc_diet%TYPE DEFAULT NULL,
        desc_diet_nin                  IN BOOLEAN := TRUE,
        dt_admin_tstz_in               IN epis_info.dt_admin_tstz%TYPE DEFAULT NULL,
        dt_admin_tstz_nin              IN BOOLEAN := TRUE,
        id_triage_color_in             IN epis_info.id_triage_color%TYPE DEFAULT NULL,
        id_triage_color_nin            IN BOOLEAN := TRUE,
        id_software_in                 IN epis_info.id_software%TYPE DEFAULT NULL,
        id_software_nin                IN BOOLEAN := TRUE,
        where_in                       VARCHAR2 DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_bed_in                      => id_bed_in,
            id_bed_nin                     => id_bed_nin,
            id_room_in                     => id_room_in,
            id_room_nin                    => id_room_nin,
            id_professional_in             => id_professional_in,
            id_professional_nin            => id_professional_nin,
            norton_in                      => norton_in,
            norton_nin                     => norton_nin,
            flg_hydric_in                  => flg_hydric_in,
            flg_hydric_nin                 => flg_hydric_nin,
            flg_wound_in                   => flg_wound_in,
            flg_wound_nin                  => flg_wound_nin,
            companion_in                   => companion_in,
            companion_nin                  => companion_nin,
            flg_unknown_in                 => flg_unknown_in,
            flg_unknown_nin                => flg_unknown_nin,
            desc_info_in                   => desc_info_in,
            desc_info_nin                  => desc_info_nin,
            id_schedule_in                 => id_schedule_in,
            id_schedule_nin                => id_schedule_nin,
            id_first_nurse_resp_in         => id_first_nurse_resp_in,
            id_first_nurse_resp_nin        => id_first_nurse_resp_nin,
            flg_status_in                  => flg_status_in,
            flg_status_nin                 => flg_status_nin,
            id_dep_clin_serv_in            => id_dep_clin_serv_in,
            id_dep_clin_serv_nin           => id_dep_clin_serv_nin,
            id_first_dep_clin_serv_in      => id_first_dep_clin_serv_in,
            id_first_dep_clin_serv_nin     => id_first_dep_clin_serv_nin,
            id_institution_usf_in          => id_institution_usf_in,
            id_institution_usf_nin         => id_institution_usf_nin,
            id_prof_team_in                => id_prof_team_in,
            id_prof_team_nin               => id_prof_team_nin,
            id_triage_in                   => id_triage_in,
            id_triage_nin                  => id_triage_nin,
            id_triage_white_reason_in      => id_triage_white_reason_in,
            id_triage_white_reason_nin     => id_triage_white_reason_nin,
            id_first_triage_in             => id_first_triage_in,
            id_first_triage_nin            => id_first_triage_nin,
            id_first_triage_wr_in          => id_first_triage_wr_in,
            id_first_triage_wr_nin         => id_first_triage_wr_nin,
            dt_harvest_tstz_in             => dt_harvest_tstz_in,
            dt_harvest_tstz_nin            => dt_harvest_tstz_nin,
            dt_last_interaction_tstz_in    => dt_last_interaction_tstz_in,
            dt_last_interaction_tstz_nin   => dt_last_interaction_tstz_nin,
            dt_movement_tstz_in            => dt_movement_tstz_in,
            dt_movement_tstz_nin           => dt_movement_tstz_nin,
            dt_next_drug_tstz_in           => dt_next_drug_tstz_in,
            dt_next_drug_tstz_nin          => dt_next_drug_tstz_nin,
            dt_first_obs_tstz_in           => dt_first_obs_tstz_in,
            dt_first_obs_tstz_nin          => dt_first_obs_tstz_nin,
            dt_next_intervention_tstz_in   => dt_next_intervention_tstz_in,
            dt_next_intervention_tstz_nin  => dt_next_intervention_tstz_nin,
            dt_next_vital_sign_tstz_in     => dt_next_vital_sign_tstz_in,
            dt_next_vital_sign_tstz_nin    => dt_next_vital_sign_tstz_nin,
            dt_next_position_tstz_in       => dt_next_position_tstz_in,
            dt_next_position_tstz_nin      => dt_next_position_tstz_nin,
            dt_entrance_room_tstz_in       => dt_entrance_room_tstz_in,
            dt_entrance_room_tstz_nin      => dt_entrance_room_tstz_nin,
            dt_harvest_mov_tstz_in         => dt_harvest_mov_tstz_in,
            dt_harvest_mov_tstz_nin        => dt_harvest_mov_tstz_nin,
            dt_first_nurse_obs_tstz_in     => dt_first_nurse_obs_tstz_in,
            dt_first_nurse_obs_tstz_nin    => dt_first_nurse_obs_tstz_nin,
            dt_first_analysis_exe_tstz_in  => dt_first_analysis_exe_tstz_in,
            dt_first_analysis_exe_tstz_nin => dt_first_analysis_exe_tstz_nin,
            dt_first_analysis_req_tstz_in  => dt_first_analysis_req_tstz_in,
            dt_first_analysis_req_tstz_nin => dt_first_analysis_req_tstz_nin,
            dt_first_image_exec_tstz_in    => dt_first_image_exec_tstz_in,
            dt_first_image_exec_tstz_nin   => dt_first_image_exec_tstz_nin,
            dt_first_image_req_tstz_in     => dt_first_image_req_tstz_in,
            dt_first_image_req_tstz_nin    => dt_first_image_req_tstz_nin,
            dt_first_drug_prsc_tstz_in     => dt_first_drug_prsc_tstz_in,
            dt_first_drug_prsc_tstz_nin    => dt_first_drug_prsc_tstz_nin,
            dt_first_drug_take_tstz_in     => dt_first_drug_take_tstz_in,
            dt_first_drug_take_tstz_nin    => dt_first_drug_take_tstz_nin,
            dt_first_interv_prsc_tstz_in   => dt_first_interv_prsc_tstz_in,
            dt_first_interv_prsc_tstz_nin  => dt_first_interv_prsc_tstz_nin,
            dt_first_interv_take_tstz_in   => dt_first_interv_take_tstz_in,
            dt_first_interv_take_tstz_nin  => dt_first_interv_take_tstz_nin,
            dt_first_inst_obs_tstz_in      => dt_first_inst_obs_tstz_in,
            dt_first_inst_obs_tstz_nin     => dt_first_inst_obs_tstz_nin,
            dt_init_in                     => dt_init_in,
            dt_init_nin                    => dt_init_nin,
            id_prof_first_obs_in           => id_prof_first_obs_in,
            id_prof_first_obs_nin          => id_prof_first_obs_nin,
            id_prof_first_nurse_obs_in     => id_prof_first_nurse_obs_in,
            id_prof_first_nurse_obs_nin    => id_prof_first_nurse_obs_nin,
            dt_first_sch_in                => dt_first_sch_in,
            dt_first_sch_nin               => dt_first_sch_nin,
            dt_first_nurse_sch_in          => dt_first_nurse_sch_in,
            dt_first_nurse_sch_nin         => dt_first_nurse_sch_nin,
            id_prof_first_sch_in           => id_prof_first_sch_in,
            id_prof_first_sch_nin          => id_prof_first_sch_nin,
            id_prof_first_nurse_sch_in     => id_prof_first_nurse_sch_in,
            id_prof_first_nurse_sch_nin    => id_prof_first_nurse_sch_nin,
            id_patient_in                  => id_patient_in,
            id_patient_nin                 => id_patient_nin,
            flg_dsch_status_in             => flg_dsch_status_in,
            flg_dsch_status_nin            => flg_dsch_status_nin,
            id_disch_reas_dest_in          => id_disch_reas_dest_in,
            id_disch_reas_dest_nin         => id_disch_reas_dest_nin,
            dt_med_tstz_in                 => dt_med_tstz_in,
            dt_med_tstz_nin                => dt_med_tstz_nin,
            dt_pend_active_tstz_in         => dt_pend_active_tstz_in,
            dt_pend_active_tstz_nin        => dt_pend_active_tstz_nin,
            id_dcs_requested_in            => id_dcs_requested_in,
            id_dcs_requested_nin           => id_dcs_requested_nin,
            id_instit_requested_in         => id_instit_requested_in,
            id_instit_requested_nin        => id_instit_requested_nin,
            id_prof_schedules_in           => id_prof_schedules_in,
            id_prof_schedules_nin          => id_prof_schedules_nin,
            flg_sch_status_in              => flg_sch_status_in,
            flg_sch_status_nin             => flg_sch_status_nin,
            id_complaint_in                => id_complaint_in,
            id_complaint_nin               => id_complaint_nin,
            flg_urgency_in                 => flg_urgency_in,
            flg_urgency_nin                => flg_urgency_nin,
            sch_group_id_patient_in        => sch_group_id_patient_in,
            sch_group_id_patient_nin       => sch_group_id_patient_nin,
            id_schedule_outp_in            => id_schedule_outp_in,
            id_schedule_outp_nin           => id_schedule_outp_nin,
            sch_prof_outp_id_prof_in       => sch_prof_outp_id_prof_in,
            sch_prof_outp_id_prof_nin      => sch_prof_outp_id_prof_nin,
            id_schedule_sr_in              => id_schedule_sr_in,
            id_schedule_sr_nin             => id_schedule_sr_nin,
            triage_acuity_in               => triage_acuity_in,
            triage_acuity_nin              => triage_acuity_nin,
            triage_color_text_in           => triage_color_text_in,
            triage_color_text_nin          => triage_color_text_nin,
            triage_rank_acuity_in          => triage_rank_acuity_in,
            triage_rank_acuity_nin         => triage_rank_acuity_nin,
            triage_flg_letter_in           => triage_flg_letter_in,
            triage_flg_letter_nin          => triage_flg_letter_nin,
            fast_track_icon_in             => fast_track_icon_in,
            fast_track_icon_nin            => fast_track_icon_nin,
            fast_track_desc_in             => fast_track_desc_in,
            fast_track_desc_nin            => fast_track_desc_nin,
            fast_track_color_in            => fast_track_color_in,
            fast_track_color_nin           => fast_track_color_nin,
            id_room_scheduled_in           => id_room_scheduled_in,
            id_room_scheduled_nin          => id_room_scheduled_nin,
            room_sch_flg_status_in         => room_sch_flg_status_in,
            room_sch_flg_status_nin        => room_sch_flg_status_nin,
            flg_pat_status_in              => flg_pat_status_in,
            flg_pat_status_nin             => flg_pat_status_nin,
            dt_room_entry_tstz_in          => dt_room_entry_tstz_in,
            dt_room_entry_tstz_nin         => dt_room_entry_tstz_nin,
            dt_surgery_time_det_tstz_in    => dt_surgery_time_det_tstz_in,
            dt_surgery_time_det_tstz_nin   => dt_surgery_time_det_tstz_nin,
            desc_diet_in                   => desc_diet_in,
            desc_diet_nin                  => desc_diet_nin,
            dt_admin_tstz_in               => dt_admin_tstz_in,
            dt_admin_tstz_nin              => dt_admin_tstz_nin,
            id_triage_color_in             => id_triage_color_in,
            id_triage_color_nin            => id_triage_color_nin,
            id_software_in                 => id_software_in,
            id_software_nin                => id_software_nin,
            where_in                       => where_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_info%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_bed_in                     => rec_in.id_bed,
            id_room_in                    => rec_in.id_room,
            id_professional_in            => rec_in.id_professional,
            id_episode_in                 => rec_in.id_episode,
            norton_in                     => rec_in.norton,
            flg_hydric_in                 => rec_in.flg_hydric,
            flg_wound_in                  => rec_in.flg_wound,
            companion_in                  => rec_in.companion,
            flg_unknown_in                => rec_in.flg_unknown,
            desc_info_in                  => rec_in.desc_info,
            id_schedule_in                => rec_in.id_schedule,
            id_first_nurse_resp_in        => rec_in.id_first_nurse_resp,
            flg_status_in                 => rec_in.flg_status,
            id_dep_clin_serv_in           => rec_in.id_dep_clin_serv,
            id_first_dep_clin_serv_in     => rec_in.id_first_dep_clin_serv,
            id_institution_usf_in         => rec_in.id_institution_usf,
            id_prof_team_in               => rec_in.id_prof_team,
            id_triage_in                  => rec_in.id_triage,
            id_triage_white_reason_in     => rec_in.id_triage_white_reason,
            id_first_triage_in            => rec_in.id_first_triage,
            id_first_triage_wr_in         => rec_in.id_first_triage_wr,
            dt_harvest_tstz_in            => rec_in.dt_harvest_tstz,
            dt_last_interaction_tstz_in   => rec_in.dt_last_interaction_tstz,
            dt_movement_tstz_in           => rec_in.dt_movement_tstz,
            dt_next_drug_tstz_in          => rec_in.dt_next_drug_tstz,
            dt_first_obs_tstz_in          => rec_in.dt_first_obs_tstz,
            dt_next_intervention_tstz_in  => rec_in.dt_next_intervention_tstz,
            dt_next_vital_sign_tstz_in    => rec_in.dt_next_vital_sign_tstz,
            dt_next_position_tstz_in      => rec_in.dt_next_position_tstz,
            dt_entrance_room_tstz_in      => rec_in.dt_entrance_room_tstz,
            dt_harvest_mov_tstz_in        => rec_in.dt_harvest_mov_tstz,
            dt_first_nurse_obs_tstz_in    => rec_in.dt_first_nurse_obs_tstz,
            dt_first_analysis_exe_tstz_in => rec_in.dt_first_analysis_exe_tstz,
            dt_first_analysis_req_tstz_in => rec_in.dt_first_analysis_req_tstz,
            dt_first_image_exec_tstz_in   => rec_in.dt_first_image_exec_tstz,
            dt_first_image_req_tstz_in    => rec_in.dt_first_image_req_tstz,
            dt_first_drug_prsc_tstz_in    => rec_in.dt_first_drug_prsc_tstz,
            dt_first_drug_take_tstz_in    => rec_in.dt_first_drug_take_tstz,
            dt_first_interv_prsc_tstz_in  => rec_in.dt_first_interv_prsc_tstz,
            dt_first_interv_take_tstz_in  => rec_in.dt_first_interv_take_tstz,
            dt_first_inst_obs_tstz_in     => rec_in.dt_first_inst_obs_tstz,
            dt_init_in                    => rec_in.dt_init,
            id_prof_first_obs_in          => rec_in.id_prof_first_obs,
            id_prof_first_nurse_obs_in    => rec_in.id_prof_first_nurse_obs,
            dt_first_sch_in               => rec_in.dt_first_sch,
            dt_first_nurse_sch_in         => rec_in.dt_first_nurse_sch,
            id_prof_first_sch_in          => rec_in.id_prof_first_sch,
            id_prof_first_nurse_sch_in    => rec_in.id_prof_first_nurse_sch,
            id_patient_in                 => rec_in.id_patient,
            flg_dsch_status_in            => rec_in.flg_dsch_status,
            id_disch_reas_dest_in         => rec_in.id_disch_reas_dest,
            dt_med_tstz_in                => rec_in.dt_med_tstz,
            dt_pend_active_tstz_in        => rec_in.dt_pend_active_tstz,
            id_dcs_requested_in           => rec_in.id_dcs_requested,
            id_instit_requested_in        => rec_in.id_instit_requested,
            id_prof_schedules_in          => rec_in.id_prof_schedules,
            flg_sch_status_in             => rec_in.flg_sch_status,
            id_complaint_in               => rec_in.id_complaint,
            flg_urgency_in                => rec_in.flg_urgency,
            sch_group_id_patient_in       => rec_in.sch_group_id_patient,
            id_schedule_outp_in           => rec_in.id_schedule_outp,
            sch_prof_outp_id_prof_in      => rec_in.sch_prof_outp_id_prof,
            id_schedule_sr_in             => rec_in.id_schedule_sr,
            triage_acuity_in              => rec_in.triage_acuity,
            triage_color_text_in          => rec_in.triage_color_text,
            triage_rank_acuity_in         => rec_in.triage_rank_acuity,
            triage_flg_letter_in          => rec_in.triage_flg_letter,
            fast_track_icon_in            => rec_in.fast_track_icon,
            fast_track_desc_in            => rec_in.fast_track_desc,
            fast_track_color_in           => rec_in.fast_track_color,
            id_room_scheduled_in          => rec_in.id_room_scheduled,
            room_sch_flg_status_in        => rec_in.room_sch_flg_status,
            flg_pat_status_in             => rec_in.flg_pat_status,
            dt_room_entry_tstz_in         => rec_in.dt_room_entry_tstz,
            dt_surgery_time_det_tstz_in   => rec_in.dt_surgery_time_det_tstz,
            desc_diet_in                  => rec_in.desc_diet,
            dt_admin_tstz_in              => rec_in.dt_admin_tstz,
            id_triage_color_in            => rec_in.id_triage_color,
            id_software_in                => rec_in.id_software
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_info%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_bed_in                     => rec_in.id_bed,
            id_room_in                    => rec_in.id_room,
            id_professional_in            => rec_in.id_professional,
            id_episode_in                 => rec_in.id_episode,
            norton_in                     => rec_in.norton,
            flg_hydric_in                 => rec_in.flg_hydric,
            flg_wound_in                  => rec_in.flg_wound,
            companion_in                  => rec_in.companion,
            flg_unknown_in                => rec_in.flg_unknown,
            desc_info_in                  => rec_in.desc_info,
            id_schedule_in                => rec_in.id_schedule,
            id_first_nurse_resp_in        => rec_in.id_first_nurse_resp,
            flg_status_in                 => rec_in.flg_status,
            id_dep_clin_serv_in           => rec_in.id_dep_clin_serv,
            id_first_dep_clin_serv_in     => rec_in.id_first_dep_clin_serv,
            id_institution_usf_in         => rec_in.id_institution_usf,
            id_prof_team_in               => rec_in.id_prof_team,
            id_triage_in                  => rec_in.id_triage,
            id_triage_white_reason_in     => rec_in.id_triage_white_reason,
            id_first_triage_in            => rec_in.id_first_triage,
            id_first_triage_wr_in         => rec_in.id_first_triage_wr,
            dt_harvest_tstz_in            => rec_in.dt_harvest_tstz,
            dt_last_interaction_tstz_in   => rec_in.dt_last_interaction_tstz,
            dt_movement_tstz_in           => rec_in.dt_movement_tstz,
            dt_next_drug_tstz_in          => rec_in.dt_next_drug_tstz,
            dt_first_obs_tstz_in          => rec_in.dt_first_obs_tstz,
            dt_next_intervention_tstz_in  => rec_in.dt_next_intervention_tstz,
            dt_next_vital_sign_tstz_in    => rec_in.dt_next_vital_sign_tstz,
            dt_next_position_tstz_in      => rec_in.dt_next_position_tstz,
            dt_entrance_room_tstz_in      => rec_in.dt_entrance_room_tstz,
            dt_harvest_mov_tstz_in        => rec_in.dt_harvest_mov_tstz,
            dt_first_nurse_obs_tstz_in    => rec_in.dt_first_nurse_obs_tstz,
            dt_first_analysis_exe_tstz_in => rec_in.dt_first_analysis_exe_tstz,
            dt_first_analysis_req_tstz_in => rec_in.dt_first_analysis_req_tstz,
            dt_first_image_exec_tstz_in   => rec_in.dt_first_image_exec_tstz,
            dt_first_image_req_tstz_in    => rec_in.dt_first_image_req_tstz,
            dt_first_drug_prsc_tstz_in    => rec_in.dt_first_drug_prsc_tstz,
            dt_first_drug_take_tstz_in    => rec_in.dt_first_drug_take_tstz,
            dt_first_interv_prsc_tstz_in  => rec_in.dt_first_interv_prsc_tstz,
            dt_first_interv_take_tstz_in  => rec_in.dt_first_interv_take_tstz,
            dt_first_inst_obs_tstz_in     => rec_in.dt_first_inst_obs_tstz,
            dt_init_in                    => rec_in.dt_init,
            id_prof_first_obs_in          => rec_in.id_prof_first_obs,
            id_prof_first_nurse_obs_in    => rec_in.id_prof_first_nurse_obs,
            dt_first_sch_in               => rec_in.dt_first_sch,
            dt_first_nurse_sch_in         => rec_in.dt_first_nurse_sch,
            id_prof_first_sch_in          => rec_in.id_prof_first_sch,
            id_prof_first_nurse_sch_in    => rec_in.id_prof_first_nurse_sch,
            id_patient_in                 => rec_in.id_patient,
            flg_dsch_status_in            => rec_in.flg_dsch_status,
            id_disch_reas_dest_in         => rec_in.id_disch_reas_dest,
            dt_med_tstz_in                => rec_in.dt_med_tstz,
            dt_pend_active_tstz_in        => rec_in.dt_pend_active_tstz,
            id_dcs_requested_in           => rec_in.id_dcs_requested,
            id_instit_requested_in        => rec_in.id_instit_requested,
            id_prof_schedules_in          => rec_in.id_prof_schedules,
            flg_sch_status_in             => rec_in.flg_sch_status,
            id_complaint_in               => rec_in.id_complaint,
            flg_urgency_in                => rec_in.flg_urgency,
            sch_group_id_patient_in       => rec_in.sch_group_id_patient,
            id_schedule_outp_in           => rec_in.id_schedule_outp,
            sch_prof_outp_id_prof_in      => rec_in.sch_prof_outp_id_prof,
            id_schedule_sr_in             => rec_in.id_schedule_sr,
            triage_acuity_in              => rec_in.triage_acuity,
            triage_color_text_in          => rec_in.triage_color_text,
            triage_rank_acuity_in         => rec_in.triage_rank_acuity,
            triage_flg_letter_in          => rec_in.triage_flg_letter,
            fast_track_icon_in            => rec_in.fast_track_icon,
            fast_track_desc_in            => rec_in.fast_track_desc,
            fast_track_color_in           => rec_in.fast_track_color,
            id_room_scheduled_in          => rec_in.id_room_scheduled,
            room_sch_flg_status_in        => rec_in.room_sch_flg_status,
            flg_pat_status_in             => rec_in.flg_pat_status,
            dt_room_entry_tstz_in         => rec_in.dt_room_entry_tstz,
            dt_surgery_time_det_tstz_in   => rec_in.dt_surgery_time_det_tstz,
            desc_diet_in                  => rec_in.desc_diet,
            dt_admin_tstz_in              => rec_in.dt_admin_tstz,
            id_triage_color_in            => rec_in.id_triage_color,
            id_software_in                => rec_in.id_software
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_episode_in                 IN epis_info.id_episode%TYPE,
        id_bed_in                     IN epis_info.id_bed%TYPE DEFAULT NULL,
        id_room_in                    IN epis_info.id_room%TYPE DEFAULT NULL,
        id_professional_in            IN epis_info.id_professional%TYPE DEFAULT NULL,
        norton_in                     IN epis_info.norton%TYPE DEFAULT NULL,
        flg_hydric_in                 IN epis_info.flg_hydric%TYPE DEFAULT NULL,
        flg_wound_in                  IN epis_info.flg_wound%TYPE DEFAULT NULL,
        companion_in                  IN epis_info.companion%TYPE DEFAULT NULL,
        flg_unknown_in                IN epis_info.flg_unknown%TYPE DEFAULT NULL,
        desc_info_in                  IN epis_info.desc_info%TYPE DEFAULT NULL,
        id_schedule_in                IN epis_info.id_schedule%TYPE DEFAULT NULL,
        id_first_nurse_resp_in        IN epis_info.id_first_nurse_resp%TYPE DEFAULT NULL,
        flg_status_in                 IN epis_info.flg_status%TYPE DEFAULT NULL,
        id_dep_clin_serv_in           IN epis_info.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_first_dep_clin_serv_in     IN epis_info.id_first_dep_clin_serv%TYPE DEFAULT NULL,
        id_institution_usf_in         IN epis_info.id_institution_usf%TYPE DEFAULT NULL,
        id_prof_team_in               IN epis_info.id_prof_team%TYPE DEFAULT NULL,
        id_triage_in                  IN epis_info.id_triage%TYPE DEFAULT NULL,
        id_triage_white_reason_in     IN epis_info.id_triage_white_reason%TYPE DEFAULT NULL,
        id_first_triage_in            IN epis_info.id_first_triage%TYPE DEFAULT NULL,
        id_first_triage_wr_in         IN epis_info.id_first_triage_wr%TYPE DEFAULT NULL,
        dt_harvest_tstz_in            IN epis_info.dt_harvest_tstz%TYPE DEFAULT NULL,
        dt_last_interaction_tstz_in   IN epis_info.dt_last_interaction_tstz%TYPE DEFAULT NULL,
        dt_movement_tstz_in           IN epis_info.dt_movement_tstz%TYPE DEFAULT NULL,
        dt_next_drug_tstz_in          IN epis_info.dt_next_drug_tstz%TYPE DEFAULT NULL,
        dt_first_obs_tstz_in          IN epis_info.dt_first_obs_tstz%TYPE DEFAULT NULL,
        dt_next_intervention_tstz_in  IN epis_info.dt_next_intervention_tstz%TYPE DEFAULT NULL,
        dt_next_vital_sign_tstz_in    IN epis_info.dt_next_vital_sign_tstz%TYPE DEFAULT NULL,
        dt_next_position_tstz_in      IN epis_info.dt_next_position_tstz%TYPE DEFAULT NULL,
        dt_entrance_room_tstz_in      IN epis_info.dt_entrance_room_tstz%TYPE DEFAULT NULL,
        dt_harvest_mov_tstz_in        IN epis_info.dt_harvest_mov_tstz%TYPE DEFAULT NULL,
        dt_first_nurse_obs_tstz_in    IN epis_info.dt_first_nurse_obs_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_exe_tstz_in IN epis_info.dt_first_analysis_exe_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_req_tstz_in IN epis_info.dt_first_analysis_req_tstz%TYPE DEFAULT NULL,
        dt_first_image_exec_tstz_in   IN epis_info.dt_first_image_exec_tstz%TYPE DEFAULT NULL,
        dt_first_image_req_tstz_in    IN epis_info.dt_first_image_req_tstz%TYPE DEFAULT NULL,
        dt_first_drug_prsc_tstz_in    IN epis_info.dt_first_drug_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_drug_take_tstz_in    IN epis_info.dt_first_drug_take_tstz%TYPE DEFAULT NULL,
        dt_first_interv_prsc_tstz_in  IN epis_info.dt_first_interv_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_interv_take_tstz_in  IN epis_info.dt_first_interv_take_tstz%TYPE DEFAULT NULL,
        dt_first_inst_obs_tstz_in     IN epis_info.dt_first_inst_obs_tstz%TYPE DEFAULT NULL,
        dt_init_in                    IN epis_info.dt_init%TYPE DEFAULT NULL,
        id_prof_first_obs_in          IN epis_info.id_prof_first_obs%TYPE DEFAULT NULL,
        id_prof_first_nurse_obs_in    IN epis_info.id_prof_first_nurse_obs%TYPE DEFAULT NULL,
        dt_first_sch_in               IN epis_info.dt_first_sch%TYPE DEFAULT NULL,
        dt_first_nurse_sch_in         IN epis_info.dt_first_nurse_sch%TYPE DEFAULT NULL,
        id_prof_first_sch_in          IN epis_info.id_prof_first_sch%TYPE DEFAULT NULL,
        id_prof_first_nurse_sch_in    IN epis_info.id_prof_first_nurse_sch%TYPE DEFAULT NULL,
        id_patient_in                 IN epis_info.id_patient%TYPE DEFAULT NULL,
        flg_dsch_status_in            IN epis_info.flg_dsch_status%TYPE DEFAULT NULL,
        id_disch_reas_dest_in         IN epis_info.id_disch_reas_dest%TYPE DEFAULT NULL,
        dt_med_tstz_in                IN epis_info.dt_med_tstz%TYPE DEFAULT NULL,
        dt_pend_active_tstz_in        IN epis_info.dt_pend_active_tstz%TYPE DEFAULT NULL,
        id_dcs_requested_in           IN epis_info.id_dcs_requested%TYPE DEFAULT NULL,
        id_instit_requested_in        IN epis_info.id_instit_requested%TYPE DEFAULT NULL,
        id_prof_schedules_in          IN epis_info.id_prof_schedules%TYPE DEFAULT NULL,
        flg_sch_status_in             IN epis_info.flg_sch_status%TYPE DEFAULT NULL,
        id_complaint_in               IN epis_info.id_complaint%TYPE DEFAULT NULL,
        flg_urgency_in                IN epis_info.flg_urgency%TYPE DEFAULT NULL,
        sch_group_id_patient_in       IN epis_info.sch_group_id_patient%TYPE DEFAULT NULL,
        id_schedule_outp_in           IN epis_info.id_schedule_outp%TYPE DEFAULT NULL,
        sch_prof_outp_id_prof_in      IN epis_info.sch_prof_outp_id_prof%TYPE DEFAULT NULL,
        id_schedule_sr_in             IN epis_info.id_schedule_sr%TYPE DEFAULT NULL,
        triage_acuity_in              IN epis_info.triage_acuity%TYPE DEFAULT NULL,
        triage_color_text_in          IN epis_info.triage_color_text%TYPE DEFAULT NULL,
        triage_rank_acuity_in         IN epis_info.triage_rank_acuity%TYPE DEFAULT NULL,
        triage_flg_letter_in          IN epis_info.triage_flg_letter%TYPE DEFAULT NULL,
        fast_track_icon_in            IN epis_info.fast_track_icon%TYPE DEFAULT NULL,
        fast_track_desc_in            IN epis_info.fast_track_desc%TYPE DEFAULT NULL,
        fast_track_color_in           IN epis_info.fast_track_color%TYPE DEFAULT NULL,
        id_room_scheduled_in          IN epis_info.id_room_scheduled%TYPE DEFAULT NULL,
        room_sch_flg_status_in        IN epis_info.room_sch_flg_status%TYPE DEFAULT NULL,
        flg_pat_status_in             IN epis_info.flg_pat_status%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in         IN epis_info.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_surgery_time_det_tstz_in   IN epis_info.dt_surgery_time_det_tstz%TYPE DEFAULT NULL,
        desc_diet_in                  IN epis_info.desc_diet%TYPE DEFAULT NULL,
        dt_admin_tstz_in              IN epis_info.dt_admin_tstz%TYPE DEFAULT NULL,
        id_triage_color_in            IN epis_info.id_triage_color%TYPE DEFAULT NULL,
        id_software_in                IN epis_info.id_software%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      OUT table_varchar
    ) IS
    BEGIN
        upd(id_episode_in                 => id_episode_in,
            id_bed_in                     => id_bed_in,
            id_room_in                    => id_room_in,
            id_professional_in            => id_professional_in,
            norton_in                     => norton_in,
            flg_hydric_in                 => flg_hydric_in,
            flg_wound_in                  => flg_wound_in,
            companion_in                  => companion_in,
            flg_unknown_in                => flg_unknown_in,
            desc_info_in                  => desc_info_in,
            id_schedule_in                => id_schedule_in,
            id_first_nurse_resp_in        => id_first_nurse_resp_in,
            flg_status_in                 => flg_status_in,
            id_dep_clin_serv_in           => id_dep_clin_serv_in,
            id_first_dep_clin_serv_in     => id_first_dep_clin_serv_in,
            id_institution_usf_in         => id_institution_usf_in,
            id_prof_team_in               => id_prof_team_in,
            id_triage_in                  => id_triage_in,
            id_triage_white_reason_in     => id_triage_white_reason_in,
            id_first_triage_in            => id_first_triage_in,
            id_first_triage_wr_in         => id_first_triage_wr_in,
            dt_harvest_tstz_in            => dt_harvest_tstz_in,
            dt_last_interaction_tstz_in   => dt_last_interaction_tstz_in,
            dt_movement_tstz_in           => dt_movement_tstz_in,
            dt_next_drug_tstz_in          => dt_next_drug_tstz_in,
            dt_first_obs_tstz_in          => dt_first_obs_tstz_in,
            dt_next_intervention_tstz_in  => dt_next_intervention_tstz_in,
            dt_next_vital_sign_tstz_in    => dt_next_vital_sign_tstz_in,
            dt_next_position_tstz_in      => dt_next_position_tstz_in,
            dt_entrance_room_tstz_in      => dt_entrance_room_tstz_in,
            dt_harvest_mov_tstz_in        => dt_harvest_mov_tstz_in,
            dt_first_nurse_obs_tstz_in    => dt_first_nurse_obs_tstz_in,
            dt_first_analysis_exe_tstz_in => dt_first_analysis_exe_tstz_in,
            dt_first_analysis_req_tstz_in => dt_first_analysis_req_tstz_in,
            dt_first_image_exec_tstz_in   => dt_first_image_exec_tstz_in,
            dt_first_image_req_tstz_in    => dt_first_image_req_tstz_in,
            dt_first_drug_prsc_tstz_in    => dt_first_drug_prsc_tstz_in,
            dt_first_drug_take_tstz_in    => dt_first_drug_take_tstz_in,
            dt_first_interv_prsc_tstz_in  => dt_first_interv_prsc_tstz_in,
            dt_first_interv_take_tstz_in  => dt_first_interv_take_tstz_in,
            dt_first_inst_obs_tstz_in     => dt_first_inst_obs_tstz_in,
            dt_init_in                    => dt_init_in,
            id_prof_first_obs_in          => id_prof_first_obs_in,
            id_prof_first_nurse_obs_in    => id_prof_first_nurse_obs_in,
            dt_first_sch_in               => dt_first_sch_in,
            dt_first_nurse_sch_in         => dt_first_nurse_sch_in,
            id_prof_first_sch_in          => id_prof_first_sch_in,
            id_prof_first_nurse_sch_in    => id_prof_first_nurse_sch_in,
            id_patient_in                 => id_patient_in,
            flg_dsch_status_in            => flg_dsch_status_in,
            id_disch_reas_dest_in         => id_disch_reas_dest_in,
            dt_med_tstz_in                => dt_med_tstz_in,
            dt_pend_active_tstz_in        => dt_pend_active_tstz_in,
            id_dcs_requested_in           => id_dcs_requested_in,
            id_instit_requested_in        => id_instit_requested_in,
            id_prof_schedules_in          => id_prof_schedules_in,
            flg_sch_status_in             => flg_sch_status_in,
            id_complaint_in               => id_complaint_in,
            flg_urgency_in                => flg_urgency_in,
            sch_group_id_patient_in       => sch_group_id_patient_in,
            id_schedule_outp_in           => id_schedule_outp_in,
            sch_prof_outp_id_prof_in      => sch_prof_outp_id_prof_in,
            id_schedule_sr_in             => id_schedule_sr_in,
            triage_acuity_in              => triage_acuity_in,
            triage_color_text_in          => triage_color_text_in,
            triage_rank_acuity_in         => triage_rank_acuity_in,
            triage_flg_letter_in          => triage_flg_letter_in,
            fast_track_icon_in            => fast_track_icon_in,
            fast_track_desc_in            => fast_track_desc_in,
            fast_track_color_in           => fast_track_color_in,
            id_room_scheduled_in          => id_room_scheduled_in,
            room_sch_flg_status_in        => room_sch_flg_status_in,
            flg_pat_status_in             => flg_pat_status_in,
            dt_room_entry_tstz_in         => dt_room_entry_tstz_in,
            dt_surgery_time_det_tstz_in   => dt_surgery_time_det_tstz_in,
            desc_diet_in                  => desc_diet_in,
            dt_admin_tstz_in              => dt_admin_tstz_in,
            id_triage_color_in            => id_triage_color_in,
            id_software_in                => id_software_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_episode_in                 => id_episode_in,
                id_bed_in                     => id_bed_in,
                id_room_in                    => id_room_in,
                id_professional_in            => id_professional_in,
                norton_in                     => norton_in,
                flg_hydric_in                 => flg_hydric_in,
                flg_wound_in                  => flg_wound_in,
                companion_in                  => companion_in,
                flg_unknown_in                => flg_unknown_in,
                desc_info_in                  => desc_info_in,
                id_schedule_in                => id_schedule_in,
                id_first_nurse_resp_in        => id_first_nurse_resp_in,
                flg_status_in                 => flg_status_in,
                id_dep_clin_serv_in           => id_dep_clin_serv_in,
                id_first_dep_clin_serv_in     => id_first_dep_clin_serv_in,
                id_institution_usf_in         => id_institution_usf_in,
                id_prof_team_in               => id_prof_team_in,
                id_triage_in                  => id_triage_in,
                id_triage_white_reason_in     => id_triage_white_reason_in,
                id_first_triage_in            => id_first_triage_in,
                id_first_triage_wr_in         => id_first_triage_wr_in,
                dt_harvest_tstz_in            => dt_harvest_tstz_in,
                dt_last_interaction_tstz_in   => dt_last_interaction_tstz_in,
                dt_movement_tstz_in           => dt_movement_tstz_in,
                dt_next_drug_tstz_in          => dt_next_drug_tstz_in,
                dt_first_obs_tstz_in          => dt_first_obs_tstz_in,
                dt_next_intervention_tstz_in  => dt_next_intervention_tstz_in,
                dt_next_vital_sign_tstz_in    => dt_next_vital_sign_tstz_in,
                dt_next_position_tstz_in      => dt_next_position_tstz_in,
                dt_entrance_room_tstz_in      => dt_entrance_room_tstz_in,
                dt_harvest_mov_tstz_in        => dt_harvest_mov_tstz_in,
                dt_first_nurse_obs_tstz_in    => dt_first_nurse_obs_tstz_in,
                dt_first_analysis_exe_tstz_in => dt_first_analysis_exe_tstz_in,
                dt_first_analysis_req_tstz_in => dt_first_analysis_req_tstz_in,
                dt_first_image_exec_tstz_in   => dt_first_image_exec_tstz_in,
                dt_first_image_req_tstz_in    => dt_first_image_req_tstz_in,
                dt_first_drug_prsc_tstz_in    => dt_first_drug_prsc_tstz_in,
                dt_first_drug_take_tstz_in    => dt_first_drug_take_tstz_in,
                dt_first_interv_prsc_tstz_in  => dt_first_interv_prsc_tstz_in,
                dt_first_interv_take_tstz_in  => dt_first_interv_take_tstz_in,
                dt_first_inst_obs_tstz_in     => dt_first_inst_obs_tstz_in,
                dt_init_in                    => dt_init_in,
                id_prof_first_obs_in          => id_prof_first_obs_in,
                id_prof_first_nurse_obs_in    => id_prof_first_nurse_obs_in,
                dt_first_sch_in               => dt_first_sch_in,
                dt_first_nurse_sch_in         => dt_first_nurse_sch_in,
                id_prof_first_sch_in          => id_prof_first_sch_in,
                id_prof_first_nurse_sch_in    => id_prof_first_nurse_sch_in,
                id_patient_in                 => id_patient_in,
                flg_dsch_status_in            => flg_dsch_status_in,
                id_disch_reas_dest_in         => id_disch_reas_dest_in,
                dt_med_tstz_in                => dt_med_tstz_in,
                dt_pend_active_tstz_in        => dt_pend_active_tstz_in,
                id_dcs_requested_in           => id_dcs_requested_in,
                id_instit_requested_in        => id_instit_requested_in,
                id_prof_schedules_in          => id_prof_schedules_in,
                flg_sch_status_in             => flg_sch_status_in,
                id_complaint_in               => id_complaint_in,
                flg_urgency_in                => flg_urgency_in,
                sch_group_id_patient_in       => sch_group_id_patient_in,
                id_schedule_outp_in           => id_schedule_outp_in,
                sch_prof_outp_id_prof_in      => sch_prof_outp_id_prof_in,
                id_schedule_sr_in             => id_schedule_sr_in,
                triage_acuity_in              => triage_acuity_in,
                triage_color_text_in          => triage_color_text_in,
                triage_rank_acuity_in         => triage_rank_acuity_in,
                triage_flg_letter_in          => triage_flg_letter_in,
                fast_track_icon_in            => fast_track_icon_in,
                fast_track_desc_in            => fast_track_desc_in,
                fast_track_color_in           => fast_track_color_in,
                id_room_scheduled_in          => id_room_scheduled_in,
                room_sch_flg_status_in        => room_sch_flg_status_in,
                flg_pat_status_in             => flg_pat_status_in,
                dt_room_entry_tstz_in         => dt_room_entry_tstz_in,
                dt_surgery_time_det_tstz_in   => dt_surgery_time_det_tstz_in,
                desc_diet_in                  => desc_diet_in,
                dt_admin_tstz_in              => dt_admin_tstz_in,
                id_triage_color_in            => id_triage_color_in,
                id_software_in                => id_software_in,
                handle_error_in               => handle_error_in,
                rows_out                      => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_episode_in                 IN epis_info.id_episode%TYPE,
        id_bed_in                     IN epis_info.id_bed%TYPE DEFAULT NULL,
        id_room_in                    IN epis_info.id_room%TYPE DEFAULT NULL,
        id_professional_in            IN epis_info.id_professional%TYPE DEFAULT NULL,
        norton_in                     IN epis_info.norton%TYPE DEFAULT NULL,
        flg_hydric_in                 IN epis_info.flg_hydric%TYPE DEFAULT NULL,
        flg_wound_in                  IN epis_info.flg_wound%TYPE DEFAULT NULL,
        companion_in                  IN epis_info.companion%TYPE DEFAULT NULL,
        flg_unknown_in                IN epis_info.flg_unknown%TYPE DEFAULT NULL,
        desc_info_in                  IN epis_info.desc_info%TYPE DEFAULT NULL,
        id_schedule_in                IN epis_info.id_schedule%TYPE DEFAULT NULL,
        id_first_nurse_resp_in        IN epis_info.id_first_nurse_resp%TYPE DEFAULT NULL,
        flg_status_in                 IN epis_info.flg_status%TYPE DEFAULT NULL,
        id_dep_clin_serv_in           IN epis_info.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_first_dep_clin_serv_in     IN epis_info.id_first_dep_clin_serv%TYPE DEFAULT NULL,
        id_institution_usf_in         IN epis_info.id_institution_usf%TYPE DEFAULT NULL,
        id_prof_team_in               IN epis_info.id_prof_team%TYPE DEFAULT NULL,
        id_triage_in                  IN epis_info.id_triage%TYPE DEFAULT NULL,
        id_triage_white_reason_in     IN epis_info.id_triage_white_reason%TYPE DEFAULT NULL,
        id_first_triage_in            IN epis_info.id_first_triage%TYPE DEFAULT NULL,
        id_first_triage_wr_in         IN epis_info.id_first_triage_wr%TYPE DEFAULT NULL,
        dt_harvest_tstz_in            IN epis_info.dt_harvest_tstz%TYPE DEFAULT NULL,
        dt_last_interaction_tstz_in   IN epis_info.dt_last_interaction_tstz%TYPE DEFAULT NULL,
        dt_movement_tstz_in           IN epis_info.dt_movement_tstz%TYPE DEFAULT NULL,
        dt_next_drug_tstz_in          IN epis_info.dt_next_drug_tstz%TYPE DEFAULT NULL,
        dt_first_obs_tstz_in          IN epis_info.dt_first_obs_tstz%TYPE DEFAULT NULL,
        dt_next_intervention_tstz_in  IN epis_info.dt_next_intervention_tstz%TYPE DEFAULT NULL,
        dt_next_vital_sign_tstz_in    IN epis_info.dt_next_vital_sign_tstz%TYPE DEFAULT NULL,
        dt_next_position_tstz_in      IN epis_info.dt_next_position_tstz%TYPE DEFAULT NULL,
        dt_entrance_room_tstz_in      IN epis_info.dt_entrance_room_tstz%TYPE DEFAULT NULL,
        dt_harvest_mov_tstz_in        IN epis_info.dt_harvest_mov_tstz%TYPE DEFAULT NULL,
        dt_first_nurse_obs_tstz_in    IN epis_info.dt_first_nurse_obs_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_exe_tstz_in IN epis_info.dt_first_analysis_exe_tstz%TYPE DEFAULT NULL,
        dt_first_analysis_req_tstz_in IN epis_info.dt_first_analysis_req_tstz%TYPE DEFAULT NULL,
        dt_first_image_exec_tstz_in   IN epis_info.dt_first_image_exec_tstz%TYPE DEFAULT NULL,
        dt_first_image_req_tstz_in    IN epis_info.dt_first_image_req_tstz%TYPE DEFAULT NULL,
        dt_first_drug_prsc_tstz_in    IN epis_info.dt_first_drug_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_drug_take_tstz_in    IN epis_info.dt_first_drug_take_tstz%TYPE DEFAULT NULL,
        dt_first_interv_prsc_tstz_in  IN epis_info.dt_first_interv_prsc_tstz%TYPE DEFAULT NULL,
        dt_first_interv_take_tstz_in  IN epis_info.dt_first_interv_take_tstz%TYPE DEFAULT NULL,
        dt_first_inst_obs_tstz_in     IN epis_info.dt_first_inst_obs_tstz%TYPE DEFAULT NULL,
        dt_init_in                    IN epis_info.dt_init%TYPE DEFAULT NULL,
        id_prof_first_obs_in          IN epis_info.id_prof_first_obs%TYPE DEFAULT NULL,
        id_prof_first_nurse_obs_in    IN epis_info.id_prof_first_nurse_obs%TYPE DEFAULT NULL,
        dt_first_sch_in               IN epis_info.dt_first_sch%TYPE DEFAULT NULL,
        dt_first_nurse_sch_in         IN epis_info.dt_first_nurse_sch%TYPE DEFAULT NULL,
        id_prof_first_sch_in          IN epis_info.id_prof_first_sch%TYPE DEFAULT NULL,
        id_prof_first_nurse_sch_in    IN epis_info.id_prof_first_nurse_sch%TYPE DEFAULT NULL,
        id_patient_in                 IN epis_info.id_patient%TYPE DEFAULT NULL,
        flg_dsch_status_in            IN epis_info.flg_dsch_status%TYPE DEFAULT NULL,
        id_disch_reas_dest_in         IN epis_info.id_disch_reas_dest%TYPE DEFAULT NULL,
        dt_med_tstz_in                IN epis_info.dt_med_tstz%TYPE DEFAULT NULL,
        dt_pend_active_tstz_in        IN epis_info.dt_pend_active_tstz%TYPE DEFAULT NULL,
        id_dcs_requested_in           IN epis_info.id_dcs_requested%TYPE DEFAULT NULL,
        id_instit_requested_in        IN epis_info.id_instit_requested%TYPE DEFAULT NULL,
        id_prof_schedules_in          IN epis_info.id_prof_schedules%TYPE DEFAULT NULL,
        flg_sch_status_in             IN epis_info.flg_sch_status%TYPE DEFAULT NULL,
        id_complaint_in               IN epis_info.id_complaint%TYPE DEFAULT NULL,
        flg_urgency_in                IN epis_info.flg_urgency%TYPE DEFAULT NULL,
        sch_group_id_patient_in       IN epis_info.sch_group_id_patient%TYPE DEFAULT NULL,
        id_schedule_outp_in           IN epis_info.id_schedule_outp%TYPE DEFAULT NULL,
        sch_prof_outp_id_prof_in      IN epis_info.sch_prof_outp_id_prof%TYPE DEFAULT NULL,
        id_schedule_sr_in             IN epis_info.id_schedule_sr%TYPE DEFAULT NULL,
        triage_acuity_in              IN epis_info.triage_acuity%TYPE DEFAULT NULL,
        triage_color_text_in          IN epis_info.triage_color_text%TYPE DEFAULT NULL,
        triage_rank_acuity_in         IN epis_info.triage_rank_acuity%TYPE DEFAULT NULL,
        triage_flg_letter_in          IN epis_info.triage_flg_letter%TYPE DEFAULT NULL,
        fast_track_icon_in            IN epis_info.fast_track_icon%TYPE DEFAULT NULL,
        fast_track_desc_in            IN epis_info.fast_track_desc%TYPE DEFAULT NULL,
        fast_track_color_in           IN epis_info.fast_track_color%TYPE DEFAULT NULL,
        id_room_scheduled_in          IN epis_info.id_room_scheduled%TYPE DEFAULT NULL,
        room_sch_flg_status_in        IN epis_info.room_sch_flg_status%TYPE DEFAULT NULL,
        flg_pat_status_in             IN epis_info.flg_pat_status%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in         IN epis_info.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_surgery_time_det_tstz_in   IN epis_info.dt_surgery_time_det_tstz%TYPE DEFAULT NULL,
        desc_diet_in                  IN epis_info.desc_diet%TYPE DEFAULT NULL,
        dt_admin_tstz_in              IN epis_info.dt_admin_tstz%TYPE DEFAULT NULL,
        id_triage_color_in            IN epis_info.id_triage_color%TYPE DEFAULT NULL,
        id_software_in                IN epis_info.id_software%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_episode_in,
                id_bed_in,
                id_room_in,
                id_professional_in,
                norton_in,
                flg_hydric_in,
                flg_wound_in,
                companion_in,
                flg_unknown_in,
                desc_info_in,
                id_schedule_in,
                id_first_nurse_resp_in,
                flg_status_in,
                id_dep_clin_serv_in,
                id_first_dep_clin_serv_in,
                id_institution_usf_in,
                id_prof_team_in,
                id_triage_in,
                id_triage_white_reason_in,
                id_first_triage_in,
                id_first_triage_wr_in,
                dt_harvest_tstz_in,
                dt_last_interaction_tstz_in,
                dt_movement_tstz_in,
                dt_next_drug_tstz_in,
                dt_first_obs_tstz_in,
                dt_next_intervention_tstz_in,
                dt_next_vital_sign_tstz_in,
                dt_next_position_tstz_in,
                dt_entrance_room_tstz_in,
                dt_harvest_mov_tstz_in,
                dt_first_nurse_obs_tstz_in,
                dt_first_analysis_exe_tstz_in,
                dt_first_analysis_req_tstz_in,
                dt_first_image_exec_tstz_in,
                dt_first_image_req_tstz_in,
                dt_first_drug_prsc_tstz_in,
                dt_first_drug_take_tstz_in,
                dt_first_interv_prsc_tstz_in,
                dt_first_interv_take_tstz_in,
                dt_first_inst_obs_tstz_in,
                dt_init_in,
                id_prof_first_obs_in,
                id_prof_first_nurse_obs_in,
                dt_first_sch_in,
                dt_first_nurse_sch_in,
                id_prof_first_sch_in,
                id_prof_first_nurse_sch_in,
                id_patient_in,
                flg_dsch_status_in,
                id_disch_reas_dest_in,
                dt_med_tstz_in,
                dt_pend_active_tstz_in,
                id_dcs_requested_in,
                id_instit_requested_in,
                id_prof_schedules_in,
                flg_sch_status_in,
                id_complaint_in,
                flg_urgency_in,
                sch_group_id_patient_in,
                id_schedule_outp_in,
                sch_prof_outp_id_prof_in,
                id_schedule_sr_in,
                triage_acuity_in,
                triage_color_text_in,
                triage_rank_acuity_in,
                triage_flg_letter_in,
                fast_track_icon_in,
                fast_track_desc_in,
                fast_track_color_in,
                id_room_scheduled_in,
                room_sch_flg_status_in,
                flg_pat_status_in,
                dt_room_entry_tstz_in,
                dt_surgery_time_det_tstz_in,
                desc_diet_in,
                dt_admin_tstz_in,
                id_triage_color_in,
                id_software_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN epis_info_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_bed                     id_bed_cc;
        l_id_room                    id_room_cc;
        l_id_professional            id_professional_cc;
        l_id_episode                 id_episode_cc;
        l_norton                     norton_cc;
        l_flg_hydric                 flg_hydric_cc;
        l_flg_wound                  flg_wound_cc;
        l_companion                  companion_cc;
        l_flg_unknown                flg_unknown_cc;
        l_desc_info                  desc_info_cc;
        l_id_schedule                id_schedule_cc;
        l_id_first_nurse_resp        id_first_nurse_resp_cc;
        l_flg_status                 flg_status_cc;
        l_id_dep_clin_serv           id_dep_clin_serv_cc;
        l_id_first_dep_clin_serv     id_first_dep_clin_serv_cc;
        l_id_institution_usf         id_institution_usf_cc;
        l_id_prof_team               id_prof_team_cc;
        l_id_triage                  id_triage_cc;
        l_id_triage_white_reason     id_triage_white_reason_cc;
        l_id_first_triage            id_first_triage_cc;
        l_id_first_triage_wr         id_first_triage_wr_cc;
        l_dt_harvest_tstz            dt_harvest_tstz_cc;
        l_dt_last_interaction_tstz   dt_last_interaction_tstz_cc;
        l_dt_movement_tstz           dt_movement_tstz_cc;
        l_dt_next_drug_tstz          dt_next_drug_tstz_cc;
        l_dt_first_obs_tstz          dt_first_obs_tstz_cc;
        l_dt_next_intervention_tstz  dt_next_intervention_tstz_cc;
        l_dt_next_vital_sign_tstz    dt_next_vital_sign_tstz_cc;
        l_dt_next_position_tstz      dt_next_position_tstz_cc;
        l_dt_entrance_room_tstz      dt_entrance_room_tstz_cc;
        l_dt_harvest_mov_tstz        dt_harvest_mov_tstz_cc;
        l_dt_first_nurse_obs_tstz    dt_first_nurse_obs_tstz_cc;
        l_dt_first_analysis_exe_tstz dt_first_analysis_exe_tstz_cc;
        l_dt_first_analysis_req_tstz dt_first_analysis_req_tstz_cc;
        l_dt_first_image_exec_tstz   dt_first_image_exec_tstz_cc;
        l_dt_first_image_req_tstz    dt_first_image_req_tstz_cc;
        l_dt_first_drug_prsc_tstz    dt_first_drug_prsc_tstz_cc;
        l_dt_first_drug_take_tstz    dt_first_drug_take_tstz_cc;
        l_dt_first_interv_prsc_tstz  dt_first_interv_prsc_tstz_cc;
        l_dt_first_interv_take_tstz  dt_first_interv_take_tstz_cc;
        l_dt_first_inst_obs_tstz     dt_first_inst_obs_tstz_cc;
        l_dt_init                    dt_init_cc;
        l_id_prof_first_obs          id_prof_first_obs_cc;
        l_id_prof_first_nurse_obs    id_prof_first_nurse_obs_cc;
        l_dt_first_sch               dt_first_sch_cc;
        l_dt_first_nurse_sch         dt_first_nurse_sch_cc;
        l_id_prof_first_sch          id_prof_first_sch_cc;
        l_id_prof_first_nurse_sch    id_prof_first_nurse_sch_cc;
        l_id_patient                 id_patient_cc;
        l_flg_dsch_status            flg_dsch_status_cc;
        l_id_disch_reas_dest         id_disch_reas_dest_cc;
        l_dt_med_tstz                dt_med_tstz_cc;
        l_dt_pend_active_tstz        dt_pend_active_tstz_cc;
        l_id_dcs_requested           id_dcs_requested_cc;
        l_id_instit_requested        id_instit_requested_cc;
        l_id_prof_schedules          id_prof_schedules_cc;
        l_flg_sch_status             flg_sch_status_cc;
        l_id_complaint               id_complaint_cc;
        l_flg_urgency                flg_urgency_cc;
        l_sch_group_id_patient       sch_group_id_patient_cc;
        l_id_schedule_outp           id_schedule_outp_cc;
        l_sch_prof_outp_id_prof      sch_prof_outp_id_prof_cc;
        l_id_schedule_sr             id_schedule_sr_cc;
        l_triage_acuity              triage_acuity_cc;
        l_triage_color_text          triage_color_text_cc;
        l_triage_rank_acuity         triage_rank_acuity_cc;
        l_triage_flg_letter          triage_flg_letter_cc;
        l_fast_track_icon            fast_track_icon_cc;
        l_fast_track_desc            fast_track_desc_cc;
        l_fast_track_color           fast_track_color_cc;
        l_id_room_scheduled          id_room_scheduled_cc;
        l_room_sch_flg_status        room_sch_flg_status_cc;
        l_flg_pat_status             flg_pat_status_cc;
        l_dt_room_entry_tstz         dt_room_entry_tstz_cc;
        l_dt_surgery_time_det_tstz   dt_surgery_time_det_tstz_cc;
        l_desc_diet                  desc_diet_cc;
        l_dt_admin_tstz              dt_admin_tstz_cc;
        l_id_triage_color            id_triage_color_cc;
        l_id_software                id_software_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_bed(i) := col_in(i).id_bed;
            l_id_room(i) := col_in(i).id_room;
            l_id_professional(i) := col_in(i).id_professional;
            l_id_episode(i) := col_in(i).id_episode;
            l_norton(i) := col_in(i).norton;
            l_flg_hydric(i) := col_in(i).flg_hydric;
            l_flg_wound(i) := col_in(i).flg_wound;
            l_companion(i) := col_in(i).companion;
            l_flg_unknown(i) := col_in(i).flg_unknown;
            l_desc_info(i) := col_in(i).desc_info;
            l_id_schedule(i) := col_in(i).id_schedule;
            l_id_first_nurse_resp(i) := col_in(i).id_first_nurse_resp;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_dep_clin_serv(i) := col_in(i).id_dep_clin_serv;
            l_id_first_dep_clin_serv(i) := col_in(i).id_first_dep_clin_serv;
            l_id_institution_usf(i) := col_in(i).id_institution_usf;
            l_id_prof_team(i) := col_in(i).id_prof_team;
            l_id_triage(i) := col_in(i).id_triage;
            l_id_triage_white_reason(i) := col_in(i).id_triage_white_reason;
            l_id_first_triage(i) := col_in(i).id_first_triage;
            l_id_first_triage_wr(i) := col_in(i).id_first_triage_wr;
            l_dt_harvest_tstz(i) := col_in(i).dt_harvest_tstz;
            l_dt_last_interaction_tstz(i) := col_in(i).dt_last_interaction_tstz;
            l_dt_movement_tstz(i) := col_in(i).dt_movement_tstz;
            l_dt_next_drug_tstz(i) := col_in(i).dt_next_drug_tstz;
            l_dt_first_obs_tstz(i) := col_in(i).dt_first_obs_tstz;
            l_dt_next_intervention_tstz(i) := col_in(i).dt_next_intervention_tstz;
            l_dt_next_vital_sign_tstz(i) := col_in(i).dt_next_vital_sign_tstz;
            l_dt_next_position_tstz(i) := col_in(i).dt_next_position_tstz;
            l_dt_entrance_room_tstz(i) := col_in(i).dt_entrance_room_tstz;
            l_dt_harvest_mov_tstz(i) := col_in(i).dt_harvest_mov_tstz;
            l_dt_first_nurse_obs_tstz(i) := col_in(i).dt_first_nurse_obs_tstz;
            l_dt_first_analysis_exe_tstz(i) := col_in(i).dt_first_analysis_exe_tstz;
            l_dt_first_analysis_req_tstz(i) := col_in(i).dt_first_analysis_req_tstz;
            l_dt_first_image_exec_tstz(i) := col_in(i).dt_first_image_exec_tstz;
            l_dt_first_image_req_tstz(i) := col_in(i).dt_first_image_req_tstz;
            l_dt_first_drug_prsc_tstz(i) := col_in(i).dt_first_drug_prsc_tstz;
            l_dt_first_drug_take_tstz(i) := col_in(i).dt_first_drug_take_tstz;
            l_dt_first_interv_prsc_tstz(i) := col_in(i).dt_first_interv_prsc_tstz;
            l_dt_first_interv_take_tstz(i) := col_in(i).dt_first_interv_take_tstz;
            l_dt_first_inst_obs_tstz(i) := col_in(i).dt_first_inst_obs_tstz;
            l_dt_init(i) := col_in(i).dt_init;
            l_id_prof_first_obs(i) := col_in(i).id_prof_first_obs;
            l_id_prof_first_nurse_obs(i) := col_in(i).id_prof_first_nurse_obs;
            l_dt_first_sch(i) := col_in(i).dt_first_sch;
            l_dt_first_nurse_sch(i) := col_in(i).dt_first_nurse_sch;
            l_id_prof_first_sch(i) := col_in(i).id_prof_first_sch;
            l_id_prof_first_nurse_sch(i) := col_in(i).id_prof_first_nurse_sch;
            l_id_patient(i) := col_in(i).id_patient;
            l_flg_dsch_status(i) := col_in(i).flg_dsch_status;
            l_id_disch_reas_dest(i) := col_in(i).id_disch_reas_dest;
            l_dt_med_tstz(i) := col_in(i).dt_med_tstz;
            l_dt_pend_active_tstz(i) := col_in(i).dt_pend_active_tstz;
            l_id_dcs_requested(i) := col_in(i).id_dcs_requested;
            l_id_instit_requested(i) := col_in(i).id_instit_requested;
            l_id_prof_schedules(i) := col_in(i).id_prof_schedules;
            l_flg_sch_status(i) := col_in(i).flg_sch_status;
            l_id_complaint(i) := col_in(i).id_complaint;
            l_flg_urgency(i) := col_in(i).flg_urgency;
            l_sch_group_id_patient(i) := col_in(i).sch_group_id_patient;
            l_id_schedule_outp(i) := col_in(i).id_schedule_outp;
            l_sch_prof_outp_id_prof(i) := col_in(i).sch_prof_outp_id_prof;
            l_id_schedule_sr(i) := col_in(i).id_schedule_sr;
            l_triage_acuity(i) := col_in(i).triage_acuity;
            l_triage_color_text(i) := col_in(i).triage_color_text;
            l_triage_rank_acuity(i) := col_in(i).triage_rank_acuity;
            l_triage_flg_letter(i) := col_in(i).triage_flg_letter;
            l_fast_track_icon(i) := col_in(i).fast_track_icon;
            l_fast_track_desc(i) := col_in(i).fast_track_desc;
            l_fast_track_color(i) := col_in(i).fast_track_color;
            l_id_room_scheduled(i) := col_in(i).id_room_scheduled;
            l_room_sch_flg_status(i) := col_in(i).room_sch_flg_status;
            l_flg_pat_status(i) := col_in(i).flg_pat_status;
            l_dt_room_entry_tstz(i) := col_in(i).dt_room_entry_tstz;
            l_dt_surgery_time_det_tstz(i) := col_in(i).dt_surgery_time_det_tstz;
            l_desc_diet(i) := col_in(i).desc_diet;
            l_dt_admin_tstz(i) := col_in(i).dt_admin_tstz;
            l_id_triage_color(i) := col_in(i).id_triage_color;
            l_id_software(i) := col_in(i).id_software;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE epis_info
                   SET id_bed                     = nvl(l_id_bed(i), id_bed),
                       id_room                    = nvl(l_id_room(i), id_room),
                       id_professional            = nvl(l_id_professional(i), id_professional),
                       norton                     = nvl(l_norton(i), norton),
                       flg_hydric                 = nvl(l_flg_hydric(i), flg_hydric),
                       flg_wound                  = nvl(l_flg_wound(i), flg_wound),
                       companion                  = nvl(l_companion(i), companion),
                       flg_unknown                = nvl(l_flg_unknown(i), flg_unknown),
                       desc_info                  = nvl(l_desc_info(i), desc_info),
                       id_schedule                = nvl(l_id_schedule(i), id_schedule),
                       id_first_nurse_resp        = nvl(l_id_first_nurse_resp(i), id_first_nurse_resp),
                       flg_status                 = nvl(l_flg_status(i), flg_status),
                       id_dep_clin_serv           = nvl(l_id_dep_clin_serv(i), id_dep_clin_serv),
                       id_first_dep_clin_serv     = nvl(l_id_first_dep_clin_serv(i), id_first_dep_clin_serv),
                       id_institution_usf         = nvl(l_id_institution_usf(i), id_institution_usf),
                       id_prof_team               = nvl(l_id_prof_team(i), id_prof_team),
                       id_triage                  = nvl(l_id_triage(i), id_triage),
                       id_triage_white_reason     = nvl(l_id_triage_white_reason(i), id_triage_white_reason),
                       id_first_triage            = nvl(l_id_first_triage(i), id_first_triage),
                       id_first_triage_wr         = nvl(l_id_first_triage_wr(i), id_first_triage_wr),
                       dt_harvest_tstz            = nvl(l_dt_harvest_tstz(i), dt_harvest_tstz),
                       dt_last_interaction_tstz   = nvl(l_dt_last_interaction_tstz(i), dt_last_interaction_tstz),
                       dt_movement_tstz           = nvl(l_dt_movement_tstz(i), dt_movement_tstz),
                       dt_next_drug_tstz          = nvl(l_dt_next_drug_tstz(i), dt_next_drug_tstz),
                       dt_first_obs_tstz          = nvl(l_dt_first_obs_tstz(i), dt_first_obs_tstz),
                       dt_next_intervention_tstz  = nvl(l_dt_next_intervention_tstz(i), dt_next_intervention_tstz),
                       dt_next_vital_sign_tstz    = nvl(l_dt_next_vital_sign_tstz(i), dt_next_vital_sign_tstz),
                       dt_next_position_tstz      = nvl(l_dt_next_position_tstz(i), dt_next_position_tstz),
                       dt_entrance_room_tstz      = nvl(l_dt_entrance_room_tstz(i), dt_entrance_room_tstz),
                       dt_harvest_mov_tstz        = nvl(l_dt_harvest_mov_tstz(i), dt_harvest_mov_tstz),
                       dt_first_nurse_obs_tstz    = nvl(l_dt_first_nurse_obs_tstz(i), dt_first_nurse_obs_tstz),
                       dt_first_analysis_exe_tstz = nvl(l_dt_first_analysis_exe_tstz(i), dt_first_analysis_exe_tstz),
                       dt_first_analysis_req_tstz = nvl(l_dt_first_analysis_req_tstz(i), dt_first_analysis_req_tstz),
                       dt_first_image_exec_tstz   = nvl(l_dt_first_image_exec_tstz(i), dt_first_image_exec_tstz),
                       dt_first_image_req_tstz    = nvl(l_dt_first_image_req_tstz(i), dt_first_image_req_tstz),
                       dt_first_drug_prsc_tstz    = nvl(l_dt_first_drug_prsc_tstz(i), dt_first_drug_prsc_tstz),
                       dt_first_drug_take_tstz    = nvl(l_dt_first_drug_take_tstz(i), dt_first_drug_take_tstz),
                       dt_first_interv_prsc_tstz  = nvl(l_dt_first_interv_prsc_tstz(i), dt_first_interv_prsc_tstz),
                       dt_first_interv_take_tstz  = nvl(l_dt_first_interv_take_tstz(i), dt_first_interv_take_tstz),
                       dt_first_inst_obs_tstz     = nvl(l_dt_first_inst_obs_tstz(i), dt_first_inst_obs_tstz),
                       dt_init                    = nvl(l_dt_init(i), dt_init),
                       id_prof_first_obs          = nvl(l_id_prof_first_obs(i), id_prof_first_obs),
                       id_prof_first_nurse_obs    = nvl(l_id_prof_first_nurse_obs(i), id_prof_first_nurse_obs),
                       dt_first_sch               = nvl(l_dt_first_sch(i), dt_first_sch),
                       dt_first_nurse_sch         = nvl(l_dt_first_nurse_sch(i), dt_first_nurse_sch),
                       id_prof_first_sch          = nvl(l_id_prof_first_sch(i), id_prof_first_sch),
                       id_prof_first_nurse_sch    = nvl(l_id_prof_first_nurse_sch(i), id_prof_first_nurse_sch),
                       id_patient                 = nvl(l_id_patient(i), id_patient),
                       flg_dsch_status            = nvl(l_flg_dsch_status(i), flg_dsch_status),
                       id_disch_reas_dest         = nvl(l_id_disch_reas_dest(i), id_disch_reas_dest),
                       dt_med_tstz                = nvl(l_dt_med_tstz(i), dt_med_tstz),
                       dt_pend_active_tstz        = nvl(l_dt_pend_active_tstz(i), dt_pend_active_tstz),
                       id_dcs_requested           = nvl(l_id_dcs_requested(i), id_dcs_requested),
                       id_instit_requested        = nvl(l_id_instit_requested(i), id_instit_requested),
                       id_prof_schedules          = nvl(l_id_prof_schedules(i), id_prof_schedules),
                       flg_sch_status             = nvl(l_flg_sch_status(i), flg_sch_status),
                       id_complaint               = nvl(l_id_complaint(i), id_complaint),
                       flg_urgency                = nvl(l_flg_urgency(i), flg_urgency),
                       sch_group_id_patient       = nvl(l_sch_group_id_patient(i), sch_group_id_patient),
                       id_schedule_outp           = nvl(l_id_schedule_outp(i), id_schedule_outp),
                       sch_prof_outp_id_prof      = nvl(l_sch_prof_outp_id_prof(i), sch_prof_outp_id_prof),
                       id_schedule_sr             = nvl(l_id_schedule_sr(i), id_schedule_sr),
                       triage_acuity              = nvl(l_triage_acuity(i), triage_acuity),
                       triage_color_text          = nvl(l_triage_color_text(i), triage_color_text),
                       triage_rank_acuity         = nvl(l_triage_rank_acuity(i), triage_rank_acuity),
                       triage_flg_letter          = nvl(l_triage_flg_letter(i), triage_flg_letter),
                       fast_track_icon            = nvl(l_fast_track_icon(i), fast_track_icon),
                       fast_track_desc            = nvl(l_fast_track_desc(i), fast_track_desc),
                       fast_track_color           = nvl(l_fast_track_color(i), fast_track_color),
                       id_room_scheduled          = nvl(l_id_room_scheduled(i), id_room_scheduled),
                       room_sch_flg_status        = nvl(l_room_sch_flg_status(i), room_sch_flg_status),
                       flg_pat_status             = nvl(l_flg_pat_status(i), flg_pat_status),
                       dt_room_entry_tstz         = nvl(l_dt_room_entry_tstz(i), dt_room_entry_tstz),
                       dt_surgery_time_det_tstz   = nvl(l_dt_surgery_time_det_tstz(i), dt_surgery_time_det_tstz),
                       desc_diet                  = nvl(l_desc_diet(i), desc_diet),
                       dt_admin_tstz              = nvl(l_dt_admin_tstz(i), dt_admin_tstz),
                       id_triage_color            = nvl(l_id_triage_color(i), id_triage_color),
                       id_software                = nvl(l_id_software(i), id_software)
                 WHERE id_episode = l_id_episode(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE epis_info
                   SET id_bed                     = l_id_bed(i),
                       id_room                    = l_id_room(i),
                       id_professional            = l_id_professional(i),
                       norton                     = l_norton(i),
                       flg_hydric                 = l_flg_hydric(i),
                       flg_wound                  = l_flg_wound(i),
                       companion                  = l_companion(i),
                       flg_unknown                = l_flg_unknown(i),
                       desc_info                  = l_desc_info(i),
                       id_schedule                = l_id_schedule(i),
                       id_first_nurse_resp        = l_id_first_nurse_resp(i),
                       flg_status                 = l_flg_status(i),
                       id_dep_clin_serv           = l_id_dep_clin_serv(i),
                       id_first_dep_clin_serv     = l_id_first_dep_clin_serv(i),
                       id_institution_usf         = l_id_institution_usf(i),
                       id_prof_team               = l_id_prof_team(i),
                       id_triage                  = l_id_triage(i),
                       id_triage_white_reason     = l_id_triage_white_reason(i),
                       id_first_triage            = l_id_first_triage(i),
                       id_first_triage_wr         = l_id_first_triage_wr(i),
                       dt_harvest_tstz            = l_dt_harvest_tstz(i),
                       dt_last_interaction_tstz   = l_dt_last_interaction_tstz(i),
                       dt_movement_tstz           = l_dt_movement_tstz(i),
                       dt_next_drug_tstz          = l_dt_next_drug_tstz(i),
                       dt_first_obs_tstz          = l_dt_first_obs_tstz(i),
                       dt_next_intervention_tstz  = l_dt_next_intervention_tstz(i),
                       dt_next_vital_sign_tstz    = l_dt_next_vital_sign_tstz(i),
                       dt_next_position_tstz      = l_dt_next_position_tstz(i),
                       dt_entrance_room_tstz      = l_dt_entrance_room_tstz(i),
                       dt_harvest_mov_tstz        = l_dt_harvest_mov_tstz(i),
                       dt_first_nurse_obs_tstz    = l_dt_first_nurse_obs_tstz(i),
                       dt_first_analysis_exe_tstz = l_dt_first_analysis_exe_tstz(i),
                       dt_first_analysis_req_tstz = l_dt_first_analysis_req_tstz(i),
                       dt_first_image_exec_tstz   = l_dt_first_image_exec_tstz(i),
                       dt_first_image_req_tstz    = l_dt_first_image_req_tstz(i),
                       dt_first_drug_prsc_tstz    = l_dt_first_drug_prsc_tstz(i),
                       dt_first_drug_take_tstz    = l_dt_first_drug_take_tstz(i),
                       dt_first_interv_prsc_tstz  = l_dt_first_interv_prsc_tstz(i),
                       dt_first_interv_take_tstz  = l_dt_first_interv_take_tstz(i),
                       dt_first_inst_obs_tstz     = l_dt_first_inst_obs_tstz(i),
                       dt_init                    = l_dt_init(i),
                       id_prof_first_obs          = l_id_prof_first_obs(i),
                       id_prof_first_nurse_obs    = l_id_prof_first_nurse_obs(i),
                       dt_first_sch               = l_dt_first_sch(i),
                       dt_first_nurse_sch         = l_dt_first_nurse_sch(i),
                       id_prof_first_sch          = l_id_prof_first_sch(i),
                       id_prof_first_nurse_sch    = l_id_prof_first_nurse_sch(i),
                       id_patient                 = l_id_patient(i),
                       flg_dsch_status            = l_flg_dsch_status(i),
                       id_disch_reas_dest         = l_id_disch_reas_dest(i),
                       dt_med_tstz                = l_dt_med_tstz(i),
                       dt_pend_active_tstz        = l_dt_pend_active_tstz(i),
                       id_dcs_requested           = l_id_dcs_requested(i),
                       id_instit_requested        = l_id_instit_requested(i),
                       id_prof_schedules          = l_id_prof_schedules(i),
                       flg_sch_status             = l_flg_sch_status(i),
                       id_complaint               = l_id_complaint(i),
                       flg_urgency                = l_flg_urgency(i),
                       sch_group_id_patient       = l_sch_group_id_patient(i),
                       id_schedule_outp           = l_id_schedule_outp(i),
                       sch_prof_outp_id_prof      = l_sch_prof_outp_id_prof(i),
                       id_schedule_sr             = l_id_schedule_sr(i),
                       triage_acuity              = l_triage_acuity(i),
                       triage_color_text          = l_triage_color_text(i),
                       triage_rank_acuity         = l_triage_rank_acuity(i),
                       triage_flg_letter          = l_triage_flg_letter(i),
                       fast_track_icon            = l_fast_track_icon(i),
                       fast_track_desc            = l_fast_track_desc(i),
                       fast_track_color           = l_fast_track_color(i),
                       id_room_scheduled          = l_id_room_scheduled(i),
                       room_sch_flg_status        = l_room_sch_flg_status(i),
                       flg_pat_status             = l_flg_pat_status(i),
                       dt_room_entry_tstz         = l_dt_room_entry_tstz(i),
                       dt_surgery_time_det_tstz   = l_dt_surgery_time_det_tstz(i),
                       desc_diet                  = l_desc_diet(i),
                       dt_admin_tstz              = l_dt_admin_tstz(i),
                       id_triage_color            = l_id_triage_color(i),
                       id_software                = l_id_software(i)
                 WHERE id_episode = l_id_episode(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN epis_info_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE EPIS_INFO
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE EPIS_INFO
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE EPIS_INFO set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE EPIS_INFO set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_episode_in   IN epis_info.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_episode = id_episode_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_episode_in   IN epis_info.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_EPISODE
    PROCEDURE del_id_episode
    (
        id_episode_in   IN epis_info.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_episode = id_episode_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_episode;

    -- Delete all rows for primary key column ID_EPISODE
    PROCEDURE del_id_episode
    (
        id_episode_in   IN epis_info.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_episode(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_episode;

    -- Delete for unique value of EIO_EPIS_FK_I
    PROCEDURE del_eio_epis_fk_i
    (
        id_episode_in   IN epis_info.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_episode = id_episode_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_epis_fk_i;

    -- Delete for unique value of EIO_EPIS_FK_I
    PROCEDURE del_eio_epis_fk_i
    (
        id_episode_in   IN epis_info.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_epis_fk_i(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eio_epis_fk_i;

    PROCEDURE del_eio_bed_fk
    (
        id_bed_in       IN epis_info.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_bed = del_eio_bed_fk.id_bed_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_bed_fk;

    PROCEDURE del_eio_bed_fk
    (
        id_bed_in       IN epis_info.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_bed_fk(id_bed_in => id_bed_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eio_bed_fk;

    PROCEDURE del_eio_compl_fk
    (
        id_complaint_in IN epis_info.id_complaint%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_complaint = del_eio_compl_fk.id_complaint_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_compl_fk;

    PROCEDURE del_eio_compl_fk
    (
        id_complaint_in IN epis_info.id_complaint%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_compl_fk(id_complaint_in => id_complaint_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eio_compl_fk;

    PROCEDURE del_eio_dcs_fk
    (
        id_dep_clin_serv_in IN epis_info.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_dep_clin_serv = del_eio_dcs_fk.id_dep_clin_serv_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_dcs_fk;

    PROCEDURE del_eio_dcs_fk
    (
        id_dep_clin_serv_in IN epis_info.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_dcs_fk(id_dep_clin_serv_in => id_dep_clin_serv_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_eio_dcs_fk;

    PROCEDURE del_eio_dcs_fk2
    (
        id_first_dep_clin_serv_in IN epis_info.id_first_dep_clin_serv%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_first_dep_clin_serv = del_eio_dcs_fk2.id_first_dep_clin_serv_in RETURNING ROWID BULK COLLECT INTO
         rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_dcs_fk2;

    PROCEDURE del_eio_dcs_fk2
    (
        id_first_dep_clin_serv_in IN epis_info.id_first_dep_clin_serv%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_dcs_fk2(id_first_dep_clin_serv_in => id_first_dep_clin_serv_in,
                        handle_error_in           => handle_error_in,
                        rows_out                  => rows_out);
    END del_eio_dcs_fk2;

    PROCEDURE del_eio_dcs_req_fk
    (
        id_dcs_requested_in IN epis_info.id_dcs_requested%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_dcs_requested = del_eio_dcs_req_fk.id_dcs_requested_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_dcs_req_fk;

    PROCEDURE del_eio_dcs_req_fk
    (
        id_dcs_requested_in IN epis_info.id_dcs_requested%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_dcs_req_fk(id_dcs_requested_in => id_dcs_requested_in,
                           handle_error_in     => handle_error_in,
                           rows_out            => rows_out);
    END del_eio_dcs_req_fk;

    PROCEDURE del_eio_disch_reas_dest_fk
    (
        id_disch_reas_dest_in IN epis_info.id_disch_reas_dest%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_disch_reas_dest = del_eio_disch_reas_dest_fk.id_disch_reas_dest_in RETURNING ROWID BULK COLLECT INTO
         rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_disch_reas_dest_fk;

    PROCEDURE del_eio_disch_reas_dest_fk
    (
        id_disch_reas_dest_in IN epis_info.id_disch_reas_dest%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_disch_reas_dest_fk(id_disch_reas_dest_in => id_disch_reas_dest_in,
                                   handle_error_in       => handle_error_in,
                                   rows_out              => rows_out);
    END del_eio_disch_reas_dest_fk;

    PROCEDURE del_eio_epis_fk
    (
        id_episode_in   IN epis_info.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_episode = del_eio_epis_fk.id_episode_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_epis_fk;

    PROCEDURE del_eio_epis_fk
    (
        id_episode_in   IN epis_info.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eio_epis_fk;

    PROCEDURE del_eio_inst_req_fk
    (
        id_instit_requested_in IN epis_info.id_instit_requested%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_instit_requested = del_eio_inst_req_fk.id_instit_requested_in RETURNING ROWID BULK COLLECT INTO
         rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_inst_req_fk;

    PROCEDURE del_eio_inst_req_fk
    (
        id_instit_requested_in IN epis_info.id_instit_requested%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_inst_req_fk(id_instit_requested_in => id_instit_requested_in,
                            handle_error_in        => handle_error_in,
                            rows_out               => rows_out);
    END del_eio_inst_req_fk;

    PROCEDURE del_eio_inst_usf_fk
    (
        id_institution_usf_in IN epis_info.id_institution_usf%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_institution_usf = del_eio_inst_usf_fk.id_institution_usf_in RETURNING ROWID BULK COLLECT INTO
         rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_inst_usf_fk;

    PROCEDURE del_eio_inst_usf_fk
    (
        id_institution_usf_in IN epis_info.id_institution_usf%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_inst_usf_fk(id_institution_usf_in => id_institution_usf_in,
                            handle_error_in       => handle_error_in,
                            rows_out              => rows_out);
    END del_eio_inst_usf_fk;

    PROCEDURE del_eio_nurse_fk
    (
        id_first_nurse_resp_in IN epis_info.id_first_nurse_resp%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_first_nurse_resp = del_eio_nurse_fk.id_first_nurse_resp_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_nurse_fk;

    PROCEDURE del_eio_nurse_fk
    (
        id_first_nurse_resp_in IN epis_info.id_first_nurse_resp%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_nurse_fk(id_first_nurse_resp_in => id_first_nurse_resp_in,
                         handle_error_in        => handle_error_in,
                         rows_out               => rows_out);
    END del_eio_nurse_fk;

    PROCEDURE del_eio_pat_fk
    (
        id_patient_in   IN epis_info.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_patient = del_eio_pat_fk.id_patient_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_pat_fk;

    PROCEDURE del_eio_pat_fk
    (
        id_patient_in   IN epis_info.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eio_pat_fk;

    PROCEDURE del_eio_pat_sch_grp_fk
    (
        sch_group_id_patient_in IN epis_info.sch_group_id_patient%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE sch_group_id_patient = del_eio_pat_sch_grp_fk.sch_group_id_patient_in RETURNING ROWID BULK COLLECT INTO
         rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_pat_sch_grp_fk;

    PROCEDURE del_eio_pat_sch_grp_fk
    (
        sch_group_id_patient_in IN epis_info.sch_group_id_patient%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_pat_sch_grp_fk(sch_group_id_patient_in => sch_group_id_patient_in,
                               handle_error_in         => handle_error_in,
                               rows_out                => rows_out);
    END del_eio_pat_sch_grp_fk;

    PROCEDURE del_eio_prof_fk
    (
        id_professional_in IN epis_info.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_professional = del_eio_prof_fk.id_professional_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_prof_fk;

    PROCEDURE del_eio_prof_fk
    (
        id_professional_in IN epis_info.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_prof_fk(id_professional_in => id_professional_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_eio_prof_fk;

    PROCEDURE del_eio_prof_nurse_obs_fk
    (
        id_prof_first_nurse_obs_in IN epis_info.id_prof_first_nurse_obs%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_prof_first_nurse_obs = del_eio_prof_nurse_obs_fk.id_prof_first_nurse_obs_in RETURNING ROWID BULK
         COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_prof_nurse_obs_fk;

    PROCEDURE del_eio_prof_nurse_obs_fk
    (
        id_prof_first_nurse_obs_in IN epis_info.id_prof_first_nurse_obs%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_prof_nurse_obs_fk(id_prof_first_nurse_obs_in => id_prof_first_nurse_obs_in,
                                  handle_error_in            => handle_error_in,
                                  rows_out                   => rows_out);
    END del_eio_prof_nurse_obs_fk;

    PROCEDURE del_eio_prof_nurse_sch_fk
    (
        id_prof_first_nurse_sch_in IN epis_info.id_prof_first_nurse_sch%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_prof_first_nurse_sch = del_eio_prof_nurse_sch_fk.id_prof_first_nurse_sch_in RETURNING ROWID BULK
         COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_prof_nurse_sch_fk;

    PROCEDURE del_eio_prof_nurse_sch_fk
    (
        id_prof_first_nurse_sch_in IN epis_info.id_prof_first_nurse_sch%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_prof_nurse_sch_fk(id_prof_first_nurse_sch_in => id_prof_first_nurse_sch_in,
                                  handle_error_in            => handle_error_in,
                                  rows_out                   => rows_out);
    END del_eio_prof_nurse_sch_fk;

    PROCEDURE del_eio_prof_obs_fk
    (
        id_prof_first_obs_in IN epis_info.id_prof_first_obs%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_prof_first_obs = del_eio_prof_obs_fk.id_prof_first_obs_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_prof_obs_fk;

    PROCEDURE del_eio_prof_obs_fk
    (
        id_prof_first_obs_in IN epis_info.id_prof_first_obs%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_prof_obs_fk(id_prof_first_obs_in => id_prof_first_obs_in,
                            handle_error_in      => handle_error_in,
                            rows_out             => rows_out);
    END del_eio_prof_obs_fk;

    PROCEDURE del_eio_prof_schs_fk
    (
        id_prof_schedules_in IN epis_info.id_prof_schedules%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_prof_schedules = del_eio_prof_schs_fk.id_prof_schedules_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_prof_schs_fk;

    PROCEDURE del_eio_prof_schs_fk
    (
        id_prof_schedules_in IN epis_info.id_prof_schedules%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_prof_schs_fk(id_prof_schedules_in => id_prof_schedules_in,
                             handle_error_in      => handle_error_in,
                             rows_out             => rows_out);
    END del_eio_prof_schs_fk;

    PROCEDURE del_eio_prof_sch_fk
    (
        id_prof_first_sch_in IN epis_info.id_prof_first_sch%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_prof_first_sch = del_eio_prof_sch_fk.id_prof_first_sch_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_prof_sch_fk;

    PROCEDURE del_eio_prof_sch_fk
    (
        id_prof_first_sch_in IN epis_info.id_prof_first_sch%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_prof_sch_fk(id_prof_first_sch_in => id_prof_first_sch_in,
                            handle_error_in      => handle_error_in,
                            rows_out             => rows_out);
    END del_eio_prof_sch_fk;

    PROCEDURE del_eio_prof_sch_o_fk
    (
        sch_prof_outp_id_prof_in IN epis_info.sch_prof_outp_id_prof%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE sch_prof_outp_id_prof = del_eio_prof_sch_o_fk.sch_prof_outp_id_prof_in RETURNING ROWID BULK COLLECT INTO
         rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_prof_sch_o_fk;

    PROCEDURE del_eio_prof_sch_o_fk
    (
        sch_prof_outp_id_prof_in IN epis_info.sch_prof_outp_id_prof%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_prof_sch_o_fk(sch_prof_outp_id_prof_in => sch_prof_outp_id_prof_in,
                              handle_error_in          => handle_error_in,
                              rows_out                 => rows_out);
    END del_eio_prof_sch_o_fk;

    PROCEDURE del_eio_prof_team_fk
    (
        id_prof_team_in IN epis_info.id_prof_team%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_prof_team = del_eio_prof_team_fk.id_prof_team_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_prof_team_fk;

    PROCEDURE del_eio_prof_team_fk
    (
        id_prof_team_in IN epis_info.id_prof_team%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_prof_team_fk(id_prof_team_in => id_prof_team_in,
                             handle_error_in => handle_error_in,
                             rows_out        => rows_out);
    END del_eio_prof_team_fk;

    PROCEDURE del_eio_rm_sch_fk
    (
        id_room_scheduled_in IN epis_info.id_room_scheduled%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_room_scheduled = del_eio_rm_sch_fk.id_room_scheduled_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_rm_sch_fk;

    PROCEDURE del_eio_rm_sch_fk
    (
        id_room_scheduled_in IN epis_info.id_room_scheduled%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_rm_sch_fk(id_room_scheduled_in => id_room_scheduled_in,
                          handle_error_in      => handle_error_in,
                          rows_out             => rows_out);
    END del_eio_rm_sch_fk;

    PROCEDURE del_eio_room_fk
    (
        id_room_in      IN epis_info.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_room = del_eio_room_fk.id_room_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_room_fk;

    PROCEDURE del_eio_room_fk
    (
        id_room_in      IN epis_info.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_room_fk(id_room_in => id_room_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eio_room_fk;

    PROCEDURE del_eio_schd_fk
    (
        id_schedule_in  IN epis_info.id_schedule%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_schedule = del_eio_schd_fk.id_schedule_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_schd_fk;

    PROCEDURE del_eio_schd_fk
    (
        id_schedule_in  IN epis_info.id_schedule%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_schd_fk(id_schedule_in => id_schedule_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eio_schd_fk;

    PROCEDURE del_eio_sch_o_fk
    (
        id_schedule_outp_in IN epis_info.id_schedule_outp%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_schedule_outp = del_eio_sch_o_fk.id_schedule_outp_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_sch_o_fk;

    PROCEDURE del_eio_sch_o_fk
    (
        id_schedule_outp_in IN epis_info.id_schedule_outp%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_sch_o_fk(id_schedule_outp_in => id_schedule_outp_in,
                         handle_error_in     => handle_error_in,
                         rows_out            => rows_out);
    END del_eio_sch_o_fk;

    PROCEDURE del_eio_sch_sr_fk
    (
        id_schedule_sr_in IN epis_info.id_schedule_sr%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_schedule_sr = del_eio_sch_sr_fk.id_schedule_sr_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_sch_sr_fk;

    PROCEDURE del_eio_sch_sr_fk
    (
        id_schedule_sr_in IN epis_info.id_schedule_sr%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_sch_sr_fk(id_schedule_sr_in => id_schedule_sr_in,
                          handle_error_in   => handle_error_in,
                          rows_out          => rows_out);
    END del_eio_sch_sr_fk;

    PROCEDURE del_eio_tc_fk
    (
        id_triage_color_in IN epis_info.id_triage_color%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_triage_color = del_eio_tc_fk.id_triage_color_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_tc_fk;

    PROCEDURE del_eio_tc_fk
    (
        id_triage_color_in IN epis_info.id_triage_color%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_tc_fk(id_triage_color_in => id_triage_color_in,
                      handle_error_in    => handle_error_in,
                      rows_out           => rows_out);
    END del_eio_tc_fk;

    PROCEDURE del_eio_triage_fk
    (
        id_triage_in    IN epis_info.id_triage%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_triage = del_eio_triage_fk.id_triage_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_triage_fk;

    PROCEDURE del_eio_triage_fk
    (
        id_triage_in    IN epis_info.id_triage%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_triage_fk(id_triage_in => id_triage_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eio_triage_fk;

    PROCEDURE del_eio_triage_frst_fk
    (
        id_first_triage_in IN epis_info.id_first_triage%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_first_triage = del_eio_triage_frst_fk.id_first_triage_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_triage_frst_fk;

    PROCEDURE del_eio_triage_frst_fk
    (
        id_first_triage_in IN epis_info.id_first_triage%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_triage_frst_fk(id_first_triage_in => id_first_triage_in,
                               handle_error_in    => handle_error_in,
                               rows_out           => rows_out);
    END del_eio_triage_frst_fk;

    PROCEDURE del_eio_triage_frst_wr_fk
    (
        id_first_triage_wr_in IN epis_info.id_first_triage_wr%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_first_triage_wr = del_eio_triage_frst_wr_fk.id_first_triage_wr_in RETURNING ROWID BULK COLLECT INTO
         rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_triage_frst_wr_fk;

    PROCEDURE del_eio_triage_frst_wr_fk
    (
        id_first_triage_wr_in IN epis_info.id_first_triage_wr%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_triage_frst_wr_fk(id_first_triage_wr_in => id_first_triage_wr_in,
                                  handle_error_in       => handle_error_in,
                                  rows_out              => rows_out);
    END del_eio_triage_frst_wr_fk;

    PROCEDURE del_eio_triage_wr_fk
    (
        id_triage_white_reason_in IN epis_info.id_triage_white_reason%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_info
         WHERE id_triage_white_reason = del_eio_triage_wr_fk.id_triage_white_reason_in RETURNING ROWID BULK COLLECT INTO
         rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eio_triage_wr_fk;

    PROCEDURE del_eio_triage_wr_fk
    (
        id_triage_white_reason_in IN epis_info.id_triage_white_reason%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eio_triage_wr_fk(id_triage_white_reason_in => id_triage_white_reason_in,
                             handle_error_in           => handle_error_in,
                             rows_out                  => rows_out);
    END del_eio_triage_wr_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM EPIS_INFO';
        ELSE
            RETURN 'DELETE FROM EPIS_INFO WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_INFO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_INFO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(epis_info_inout IN OUT epis_info%ROWTYPE) IS
    BEGIN
        epis_info_inout.id_bed                     := NULL;
        epis_info_inout.id_room                    := NULL;
        epis_info_inout.id_professional            := NULL;
        epis_info_inout.id_episode                 := NULL;
        epis_info_inout.norton                     := NULL;
        epis_info_inout.flg_hydric                 := NULL;
        epis_info_inout.flg_wound                  := NULL;
        epis_info_inout.companion                  := NULL;
        epis_info_inout.flg_unknown                := NULL;
        epis_info_inout.desc_info                  := NULL;
        epis_info_inout.id_schedule                := NULL;
        epis_info_inout.id_first_nurse_resp        := NULL;
        epis_info_inout.flg_status                 := NULL;
        epis_info_inout.id_dep_clin_serv           := NULL;
        epis_info_inout.id_first_dep_clin_serv     := NULL;
        epis_info_inout.id_institution_usf         := NULL;
        epis_info_inout.id_prof_team               := NULL;
        epis_info_inout.id_triage                  := NULL;
        epis_info_inout.id_triage_white_reason     := NULL;
        epis_info_inout.id_first_triage            := NULL;
        epis_info_inout.id_first_triage_wr         := NULL;
        epis_info_inout.dt_harvest_tstz            := NULL;
        epis_info_inout.dt_last_interaction_tstz   := NULL;
        epis_info_inout.dt_movement_tstz           := NULL;
        epis_info_inout.dt_next_drug_tstz          := NULL;
        epis_info_inout.dt_first_obs_tstz          := NULL;
        epis_info_inout.dt_next_intervention_tstz  := NULL;
        epis_info_inout.dt_next_vital_sign_tstz    := NULL;
        epis_info_inout.dt_next_position_tstz      := NULL;
        epis_info_inout.dt_entrance_room_tstz      := NULL;
        epis_info_inout.dt_harvest_mov_tstz        := NULL;
        epis_info_inout.dt_first_nurse_obs_tstz    := NULL;
        epis_info_inout.dt_first_analysis_exe_tstz := NULL;
        epis_info_inout.dt_first_analysis_req_tstz := NULL;
        epis_info_inout.dt_first_image_exec_tstz   := NULL;
        epis_info_inout.dt_first_image_req_tstz    := NULL;
        epis_info_inout.dt_first_drug_prsc_tstz    := NULL;
        epis_info_inout.dt_first_drug_take_tstz    := NULL;
        epis_info_inout.dt_first_interv_prsc_tstz  := NULL;
        epis_info_inout.dt_first_interv_take_tstz  := NULL;
        epis_info_inout.dt_first_inst_obs_tstz     := NULL;
        epis_info_inout.dt_init                    := NULL;
        epis_info_inout.id_prof_first_obs          := NULL;
        epis_info_inout.id_prof_first_nurse_obs    := NULL;
        epis_info_inout.dt_first_sch               := NULL;
        epis_info_inout.dt_first_nurse_sch         := NULL;
        epis_info_inout.id_prof_first_sch          := NULL;
        epis_info_inout.id_prof_first_nurse_sch    := NULL;
        epis_info_inout.id_patient                 := NULL;
        epis_info_inout.flg_dsch_status            := NULL;
        epis_info_inout.id_disch_reas_dest         := NULL;
        epis_info_inout.dt_med_tstz                := NULL;
        epis_info_inout.dt_pend_active_tstz        := NULL;
        epis_info_inout.id_dcs_requested           := NULL;
        epis_info_inout.id_instit_requested        := NULL;
        epis_info_inout.id_prof_schedules          := NULL;
        epis_info_inout.flg_sch_status             := NULL;
        epis_info_inout.id_complaint               := NULL;
        epis_info_inout.flg_urgency                := NULL;
        epis_info_inout.sch_group_id_patient       := NULL;
        epis_info_inout.id_schedule_outp           := NULL;
        epis_info_inout.sch_prof_outp_id_prof      := NULL;
        epis_info_inout.id_schedule_sr             := NULL;
        epis_info_inout.triage_acuity              := NULL;
        epis_info_inout.triage_color_text          := NULL;
        epis_info_inout.triage_rank_acuity         := NULL;
        epis_info_inout.triage_flg_letter          := NULL;
        epis_info_inout.fast_track_icon            := NULL;
        epis_info_inout.fast_track_desc            := NULL;
        epis_info_inout.fast_track_color           := NULL;
        epis_info_inout.id_room_scheduled          := NULL;
        epis_info_inout.room_sch_flg_status        := NULL;
        epis_info_inout.flg_pat_status             := NULL;
        epis_info_inout.dt_room_entry_tstz         := NULL;
        epis_info_inout.dt_surgery_time_det_tstz   := NULL;
        epis_info_inout.desc_diet                  := NULL;
        epis_info_inout.dt_admin_tstz              := NULL;
        epis_info_inout.id_triage_color            := NULL;
        epis_info_inout.id_software                := NULL;
    END initrec;

    FUNCTION initrec RETURN epis_info%ROWTYPE IS
        l_epis_info epis_info%ROWTYPE;
    BEGIN
        RETURN l_epis_info;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_info_tc IS
        data epis_info_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM epis_info
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_info_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data epis_info_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_info;
/
