/*-- Last Change Revision: $Rev: 2028379 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:26 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_rounds
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Julho 9, 2009 12:20:32
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_round_in           IN rounds.id_round%TYPE,
        area_code_in          IN rounds.area_code%TYPE DEFAULT NULL,
        desc_round_in         IN rounds.desc_round%TYPE DEFAULT NULL,
        sample_time_in        IN rounds.sample_time%TYPE DEFAULT NULL,
        trigger_time_in       IN rounds.trigger_time%TYPE DEFAULT NULL,
        default_days_in       IN rounds.default_days%TYPE DEFAULT NULL,
        available_holidays_in IN rounds.available_holidays%TYPE DEFAULT NULL,
        id_institution_in     IN rounds.id_institution%TYPE DEFAULT NULL,
        id_software_in        IN rounds.id_software%TYPE DEFAULT NULL,
        valid_from_in         IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_to_in           IN rounds.valid_to%TYPE DEFAULT NULL,
        flg_available_in      IN rounds.flg_available%TYPE DEFAULT NULL,
        cancel_notes_in       IN rounds.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_in    IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        prof_create_in        IN rounds.prof_create%TYPE DEFAULT NULL,
        dt_create_in          IN rounds.dt_create%TYPE DEFAULT NULL,
        create_user_in        IN rounds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN rounds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN rounds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN rounds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN rounds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN rounds.update_institution%TYPE DEFAULT NULL,
        flg_edit_in           IN rounds.flg_edit%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO rounds
            (id_round,
             area_code,
             desc_round,
             sample_time,
             trigger_time,
             default_days,
             available_holidays,
             id_institution,
             id_software,
             valid_from,
             valid_to,
             flg_available,
             cancel_notes,
             dt_cancel_notes,
             prof_create,
             dt_create,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_edit)
        VALUES
            (id_round_in,
             area_code_in,
             desc_round_in,
             sample_time_in,
             trigger_time_in,
             default_days_in,
             available_holidays_in,
             id_institution_in,
             id_software_in,
             valid_from_in,
             valid_to_in,
             flg_available_in,
             cancel_notes_in,
             dt_cancel_notes_in,
             prof_create_in,
             dt_create_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_edit_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'RND_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "RND_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ROUNDS',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'AREA_CODE',
                                                        value_in           => area_code_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'SAMPLE_TIME',
                                                        value_in           => sample_time_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'VALID_FROM',
                                                        value_in           => valid_from_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ROUNDS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    IF l_name = 'RND_INN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'RND_SOE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_round_in           IN rounds.id_round%TYPE,
        area_code_in          IN rounds.area_code%TYPE DEFAULT NULL,
        desc_round_in         IN rounds.desc_round%TYPE DEFAULT NULL,
        sample_time_in        IN rounds.sample_time%TYPE DEFAULT NULL,
        trigger_time_in       IN rounds.trigger_time%TYPE DEFAULT NULL,
        default_days_in       IN rounds.default_days%TYPE DEFAULT NULL,
        available_holidays_in IN rounds.available_holidays%TYPE DEFAULT NULL,
        id_institution_in     IN rounds.id_institution%TYPE DEFAULT NULL,
        id_software_in        IN rounds.id_software%TYPE DEFAULT NULL,
        valid_from_in         IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_to_in           IN rounds.valid_to%TYPE DEFAULT NULL,
        flg_available_in      IN rounds.flg_available%TYPE DEFAULT NULL,
        cancel_notes_in       IN rounds.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_in    IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        prof_create_in        IN rounds.prof_create%TYPE DEFAULT NULL,
        dt_create_in          IN rounds.dt_create%TYPE DEFAULT NULL,
        create_user_in        IN rounds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN rounds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN rounds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN rounds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN rounds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN rounds.update_institution%TYPE DEFAULT NULL,
        flg_edit_in           IN rounds.flg_edit%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_round_in           => id_round_in,
            area_code_in          => area_code_in,
            desc_round_in         => desc_round_in,
            sample_time_in        => sample_time_in,
            trigger_time_in       => trigger_time_in,
            default_days_in       => default_days_in,
            available_holidays_in => available_holidays_in,
            id_institution_in     => id_institution_in,
            id_software_in        => id_software_in,
            valid_from_in         => valid_from_in,
            valid_to_in           => valid_to_in,
            flg_available_in      => flg_available_in,
            cancel_notes_in       => cancel_notes_in,
            dt_cancel_notes_in    => dt_cancel_notes_in,
            prof_create_in        => prof_create_in,
            dt_create_in          => dt_create_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_edit_in           => flg_edit_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN rounds%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec rounds%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_round := next_key(sequence_in);
        END IF;
        ins(id_round_in           => l_rec.id_round,
            area_code_in          => l_rec.area_code,
            desc_round_in         => l_rec.desc_round,
            sample_time_in        => l_rec.sample_time,
            trigger_time_in       => l_rec.trigger_time,
            default_days_in       => l_rec.default_days,
            available_holidays_in => l_rec.available_holidays,
            id_institution_in     => l_rec.id_institution,
            id_software_in        => l_rec.id_software,
            valid_from_in         => l_rec.valid_from,
            valid_to_in           => l_rec.valid_to,
            flg_available_in      => l_rec.flg_available,
            cancel_notes_in       => l_rec.cancel_notes,
            dt_cancel_notes_in    => l_rec.dt_cancel_notes,
            prof_create_in        => l_rec.prof_create,
            dt_create_in          => l_rec.dt_create,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_time_in        => l_rec.update_time,
            update_institution_in => l_rec.update_institution,
            flg_edit_in           => l_rec.flg_edit,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN rounds%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN rounds.id_round%TYPE
    
     IS
        retval rounds.id_round%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_rounds.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_ROUNDS'));
    END next_key;

    PROCEDURE ins
    (
        area_code_in          IN rounds.area_code%TYPE DEFAULT NULL,
        desc_round_in         IN rounds.desc_round%TYPE DEFAULT NULL,
        sample_time_in        IN rounds.sample_time%TYPE DEFAULT NULL,
        trigger_time_in       IN rounds.trigger_time%TYPE DEFAULT NULL,
        default_days_in       IN rounds.default_days%TYPE DEFAULT NULL,
        available_holidays_in IN rounds.available_holidays%TYPE DEFAULT NULL,
        id_institution_in     IN rounds.id_institution%TYPE DEFAULT NULL,
        id_software_in        IN rounds.id_software%TYPE DEFAULT NULL,
        valid_from_in         IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_to_in           IN rounds.valid_to%TYPE DEFAULT NULL,
        flg_available_in      IN rounds.flg_available%TYPE DEFAULT NULL,
        cancel_notes_in       IN rounds.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_in    IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        prof_create_in        IN rounds.prof_create%TYPE DEFAULT NULL,
        dt_create_in          IN rounds.dt_create%TYPE DEFAULT NULL,
        create_user_in        IN rounds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN rounds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN rounds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN rounds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN rounds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN rounds.update_institution%TYPE DEFAULT NULL,
        flg_edit_in           IN rounds.flg_edit%TYPE DEFAULT NULL,
        id_round_out          IN OUT rounds.id_round%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky rounds.id_round%TYPE := next_key;
    BEGIN
        ins(id_round_in           => l_pky,
            area_code_in          => area_code_in,
            desc_round_in         => desc_round_in,
            sample_time_in        => sample_time_in,
            trigger_time_in       => trigger_time_in,
            default_days_in       => default_days_in,
            available_holidays_in => available_holidays_in,
            id_institution_in     => id_institution_in,
            id_software_in        => id_software_in,
            valid_from_in         => valid_from_in,
            valid_to_in           => valid_to_in,
            flg_available_in      => flg_available_in,
            cancel_notes_in       => cancel_notes_in,
            dt_cancel_notes_in    => dt_cancel_notes_in,
            prof_create_in        => prof_create_in,
            dt_create_in          => dt_create_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_edit_in           => flg_edit_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        id_round_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        area_code_in          IN rounds.area_code%TYPE DEFAULT NULL,
        desc_round_in         IN rounds.desc_round%TYPE DEFAULT NULL,
        sample_time_in        IN rounds.sample_time%TYPE DEFAULT NULL,
        trigger_time_in       IN rounds.trigger_time%TYPE DEFAULT NULL,
        default_days_in       IN rounds.default_days%TYPE DEFAULT NULL,
        available_holidays_in IN rounds.available_holidays%TYPE DEFAULT NULL,
        id_institution_in     IN rounds.id_institution%TYPE DEFAULT NULL,
        id_software_in        IN rounds.id_software%TYPE DEFAULT NULL,
        valid_from_in         IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_to_in           IN rounds.valid_to%TYPE DEFAULT NULL,
        flg_available_in      IN rounds.flg_available%TYPE DEFAULT NULL,
        cancel_notes_in       IN rounds.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_in    IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        prof_create_in        IN rounds.prof_create%TYPE DEFAULT NULL,
        dt_create_in          IN rounds.dt_create%TYPE DEFAULT NULL,
        create_user_in        IN rounds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN rounds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN rounds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN rounds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN rounds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN rounds.update_institution%TYPE DEFAULT NULL,
        flg_edit_in           IN rounds.flg_edit%TYPE DEFAULT NULL,
        id_round_out          IN OUT rounds.id_round%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(area_code_in          => area_code_in,
            desc_round_in         => desc_round_in,
            sample_time_in        => sample_time_in,
            trigger_time_in       => trigger_time_in,
            default_days_in       => default_days_in,
            available_holidays_in => available_holidays_in,
            id_institution_in     => id_institution_in,
            id_software_in        => id_software_in,
            valid_from_in         => valid_from_in,
            valid_to_in           => valid_to_in,
            flg_available_in      => flg_available_in,
            cancel_notes_in       => cancel_notes_in,
            dt_cancel_notes_in    => dt_cancel_notes_in,
            prof_create_in        => prof_create_in,
            dt_create_in          => dt_create_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_edit_in           => flg_edit_in,
            id_round_out          => id_round_out,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    FUNCTION ins
    (
        area_code_in          IN rounds.area_code%TYPE DEFAULT NULL,
        desc_round_in         IN rounds.desc_round%TYPE DEFAULT NULL,
        sample_time_in        IN rounds.sample_time%TYPE DEFAULT NULL,
        trigger_time_in       IN rounds.trigger_time%TYPE DEFAULT NULL,
        default_days_in       IN rounds.default_days%TYPE DEFAULT NULL,
        available_holidays_in IN rounds.available_holidays%TYPE DEFAULT NULL,
        id_institution_in     IN rounds.id_institution%TYPE DEFAULT NULL,
        id_software_in        IN rounds.id_software%TYPE DEFAULT NULL,
        valid_from_in         IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_to_in           IN rounds.valid_to%TYPE DEFAULT NULL,
        flg_available_in      IN rounds.flg_available%TYPE DEFAULT NULL,
        cancel_notes_in       IN rounds.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_in    IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        prof_create_in        IN rounds.prof_create%TYPE DEFAULT NULL,
        dt_create_in          IN rounds.dt_create%TYPE DEFAULT NULL,
        create_user_in        IN rounds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN rounds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN rounds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN rounds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN rounds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN rounds.update_institution%TYPE DEFAULT NULL,
        flg_edit_in           IN rounds.flg_edit%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) RETURN rounds.id_round%TYPE IS
        l_pky rounds.id_round%TYPE := next_key;
    BEGIN
        ins(id_round_in           => l_pky,
            area_code_in          => area_code_in,
            desc_round_in         => desc_round_in,
            sample_time_in        => sample_time_in,
            trigger_time_in       => trigger_time_in,
            default_days_in       => default_days_in,
            available_holidays_in => available_holidays_in,
            id_institution_in     => id_institution_in,
            id_software_in        => id_software_in,
            valid_from_in         => valid_from_in,
            valid_to_in           => valid_to_in,
            flg_available_in      => flg_available_in,
            cancel_notes_in       => cancel_notes_in,
            dt_cancel_notes_in    => dt_cancel_notes_in,
            prof_create_in        => prof_create_in,
            dt_create_in          => dt_create_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_edit_in           => flg_edit_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        area_code_in          IN rounds.area_code%TYPE DEFAULT NULL,
        desc_round_in         IN rounds.desc_round%TYPE DEFAULT NULL,
        sample_time_in        IN rounds.sample_time%TYPE DEFAULT NULL,
        trigger_time_in       IN rounds.trigger_time%TYPE DEFAULT NULL,
        default_days_in       IN rounds.default_days%TYPE DEFAULT NULL,
        available_holidays_in IN rounds.available_holidays%TYPE DEFAULT NULL,
        id_institution_in     IN rounds.id_institution%TYPE DEFAULT NULL,
        id_software_in        IN rounds.id_software%TYPE DEFAULT NULL,
        valid_from_in         IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_to_in           IN rounds.valid_to%TYPE DEFAULT NULL,
        flg_available_in      IN rounds.flg_available%TYPE DEFAULT NULL,
        cancel_notes_in       IN rounds.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_in    IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        prof_create_in        IN rounds.prof_create%TYPE DEFAULT NULL,
        dt_create_in          IN rounds.dt_create%TYPE DEFAULT NULL,
        create_user_in        IN rounds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN rounds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN rounds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN rounds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN rounds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN rounds.update_institution%TYPE DEFAULT NULL,
        flg_edit_in           IN rounds.flg_edit%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) RETURN rounds.id_round%TYPE IS
        l_pky    rounds.id_round%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_round_in           => l_pky,
            area_code_in          => area_code_in,
            desc_round_in         => desc_round_in,
            sample_time_in        => sample_time_in,
            trigger_time_in       => trigger_time_in,
            default_days_in       => default_days_in,
            available_holidays_in => available_holidays_in,
            id_institution_in     => id_institution_in,
            id_software_in        => id_software_in,
            valid_from_in         => valid_from_in,
            valid_to_in           => valid_to_in,
            flg_available_in      => flg_available_in,
            cancel_notes_in       => cancel_notes_in,
            dt_cancel_notes_in    => dt_cancel_notes_in,
            prof_create_in        => prof_create_in,
            dt_create_in          => dt_create_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_edit_in           => flg_edit_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        area_code_in          IN rounds.area_code%TYPE DEFAULT NULL,
        desc_round_in         IN rounds.desc_round%TYPE DEFAULT NULL,
        sample_time_in        IN rounds.sample_time%TYPE DEFAULT NULL,
        trigger_time_in       IN rounds.trigger_time%TYPE DEFAULT NULL,
        default_days_in       IN rounds.default_days%TYPE DEFAULT NULL,
        available_holidays_in IN rounds.available_holidays%TYPE DEFAULT NULL,
        id_institution_in     IN rounds.id_institution%TYPE DEFAULT NULL,
        id_software_in        IN rounds.id_software%TYPE DEFAULT NULL,
        valid_from_in         IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_to_in           IN rounds.valid_to%TYPE DEFAULT NULL,
        flg_available_in      IN rounds.flg_available%TYPE DEFAULT NULL,
        cancel_notes_in       IN rounds.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_in    IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        prof_create_in        IN rounds.prof_create%TYPE DEFAULT NULL,
        dt_create_in          IN rounds.dt_create%TYPE DEFAULT NULL,
        create_user_in        IN rounds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN rounds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN rounds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN rounds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN rounds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN rounds.update_institution%TYPE DEFAULT NULL,
        flg_edit_in           IN rounds.flg_edit%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky rounds.id_round%TYPE := next_key;
    BEGIN
        ins(id_round_in           => l_pky,
            area_code_in          => area_code_in,
            desc_round_in         => desc_round_in,
            sample_time_in        => sample_time_in,
            trigger_time_in       => trigger_time_in,
            default_days_in       => default_days_in,
            available_holidays_in => available_holidays_in,
            id_institution_in     => id_institution_in,
            id_software_in        => id_software_in,
            valid_from_in         => valid_from_in,
            valid_to_in           => valid_to_in,
            flg_available_in      => flg_available_in,
            cancel_notes_in       => cancel_notes_in,
            dt_cancel_notes_in    => dt_cancel_notes_in,
            prof_create_in        => prof_create_in,
            dt_create_in          => dt_create_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_edit_in           => flg_edit_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        area_code_in          IN rounds.area_code%TYPE DEFAULT NULL,
        desc_round_in         IN rounds.desc_round%TYPE DEFAULT NULL,
        sample_time_in        IN rounds.sample_time%TYPE DEFAULT NULL,
        trigger_time_in       IN rounds.trigger_time%TYPE DEFAULT NULL,
        default_days_in       IN rounds.default_days%TYPE DEFAULT NULL,
        available_holidays_in IN rounds.available_holidays%TYPE DEFAULT NULL,
        id_institution_in     IN rounds.id_institution%TYPE DEFAULT NULL,
        id_software_in        IN rounds.id_software%TYPE DEFAULT NULL,
        valid_from_in         IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_to_in           IN rounds.valid_to%TYPE DEFAULT NULL,
        flg_available_in      IN rounds.flg_available%TYPE DEFAULT NULL,
        cancel_notes_in       IN rounds.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_in    IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        prof_create_in        IN rounds.prof_create%TYPE DEFAULT NULL,
        dt_create_in          IN rounds.dt_create%TYPE DEFAULT NULL,
        create_user_in        IN rounds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN rounds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN rounds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN rounds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN rounds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN rounds.update_institution%TYPE DEFAULT NULL,
        flg_edit_in           IN rounds.flg_edit%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        l_pky    rounds.id_round%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_round_in           => l_pky,
            area_code_in          => area_code_in,
            desc_round_in         => desc_round_in,
            sample_time_in        => sample_time_in,
            trigger_time_in       => trigger_time_in,
            default_days_in       => default_days_in,
            available_holidays_in => available_holidays_in,
            id_institution_in     => id_institution_in,
            id_software_in        => id_software_in,
            valid_from_in         => valid_from_in,
            valid_to_in           => valid_to_in,
            flg_available_in      => flg_available_in,
            cancel_notes_in       => cancel_notes_in,
            dt_cancel_notes_in    => dt_cancel_notes_in,
            prof_create_in        => prof_create_in,
            dt_create_in          => dt_create_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_edit_in           => flg_edit_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN rounds_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO rounds
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROUND _' || indx,
                                                        value_in           => rows_in(indx).id_round,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'AREA_CODE _' || indx,
                                                        value_in           => rows_in(indx).area_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DESC_ROUND _' || indx,
                                                        value_in           => rows_in(indx).desc_round,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'SAMPLE_TIME _' || indx,
                                                        value_in           => rows_in(indx).sample_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TRIGGER_TIME _' || indx,
                                                        value_in           => rows_in(indx).trigger_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DEFAULT_DAYS _' || indx,
                                                        value_in           => rows_in(indx).default_days,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'AVAILABLE_HOLIDAYS _' || indx,
                                                        value_in           => rows_in(indx).available_holidays,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE _' || indx,
                                                        value_in           => rows_in(indx).id_software,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'VALID_FROM _' || indx,
                                                        value_in           => rows_in(indx).valid_from,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'VALID_TO _' || indx,
                                                        value_in           => rows_in(indx).valid_to,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE _' || indx,
                                                        value_in           => rows_in(indx).flg_available,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CANCEL_NOTES _' || indx,
                                                        value_in           => rows_in(indx).cancel_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL_NOTES _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PROF_CREATE _' || indx,
                                                        value_in           => rows_in(indx).prof_create,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CREATE _' || indx,
                                                        value_in           => rows_in(indx).dt_create,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_EDIT _' || indx,
                                                        value_in           => rows_in(indx).flg_edit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'ROUNDS',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN rounds_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_round_in            IN rounds.id_round%TYPE,
        area_code_in           IN rounds.area_code%TYPE DEFAULT NULL,
        area_code_nin          IN BOOLEAN := TRUE,
        desc_round_in          IN rounds.desc_round%TYPE DEFAULT NULL,
        desc_round_nin         IN BOOLEAN := TRUE,
        sample_time_in         IN rounds.sample_time%TYPE DEFAULT NULL,
        sample_time_nin        IN BOOLEAN := TRUE,
        trigger_time_in        IN rounds.trigger_time%TYPE DEFAULT NULL,
        trigger_time_nin       IN BOOLEAN := TRUE,
        default_days_in        IN rounds.default_days%TYPE DEFAULT NULL,
        default_days_nin       IN BOOLEAN := TRUE,
        available_holidays_in  IN rounds.available_holidays%TYPE DEFAULT NULL,
        available_holidays_nin IN BOOLEAN := TRUE,
        id_institution_in      IN rounds.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        id_software_in         IN rounds.id_software%TYPE DEFAULT NULL,
        id_software_nin        IN BOOLEAN := TRUE,
        valid_from_in          IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_from_nin         IN BOOLEAN := TRUE,
        valid_to_in            IN rounds.valid_to%TYPE DEFAULT NULL,
        valid_to_nin           IN BOOLEAN := TRUE,
        flg_available_in       IN rounds.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        cancel_notes_in        IN rounds.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin       IN BOOLEAN := TRUE,
        dt_cancel_notes_in     IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_nin    IN BOOLEAN := TRUE,
        prof_create_in         IN rounds.prof_create%TYPE DEFAULT NULL,
        prof_create_nin        IN BOOLEAN := TRUE,
        dt_create_in           IN rounds.dt_create%TYPE DEFAULT NULL,
        dt_create_nin          IN BOOLEAN := TRUE,
        create_user_in         IN rounds.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN rounds.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN rounds.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN rounds.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN rounds.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN rounds.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        flg_edit_in            IN rounds.flg_edit%TYPE DEFAULT NULL,
        flg_edit_nin           IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_area_code_n          NUMBER(1);
        l_desc_round_n         NUMBER(1);
        l_sample_time_n        NUMBER(1);
        l_trigger_time_n       NUMBER(1);
        l_default_days_n       NUMBER(1);
        l_available_holidays_n NUMBER(1);
        l_id_institution_n     NUMBER(1);
        l_id_software_n        NUMBER(1);
        l_valid_from_n         NUMBER(1);
        l_valid_to_n           NUMBER(1);
        l_flg_available_n      NUMBER(1);
        l_cancel_notes_n       NUMBER(1);
        l_dt_cancel_notes_n    NUMBER(1);
        l_prof_create_n        NUMBER(1);
        l_dt_create_n          NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        l_flg_edit_n           NUMBER(1);
    BEGIN
    
        l_area_code_n          := sys.diutil.bool_to_int(area_code_nin);
        l_desc_round_n         := sys.diutil.bool_to_int(desc_round_nin);
        l_sample_time_n        := sys.diutil.bool_to_int(sample_time_nin);
        l_trigger_time_n       := sys.diutil.bool_to_int(trigger_time_nin);
        l_default_days_n       := sys.diutil.bool_to_int(default_days_nin);
        l_available_holidays_n := sys.diutil.bool_to_int(available_holidays_nin);
        l_id_institution_n     := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n        := sys.diutil.bool_to_int(id_software_nin);
        l_valid_from_n         := sys.diutil.bool_to_int(valid_from_nin);
        l_valid_to_n           := sys.diutil.bool_to_int(valid_to_nin);
        l_flg_available_n      := sys.diutil.bool_to_int(flg_available_nin);
        l_cancel_notes_n       := sys.diutil.bool_to_int(cancel_notes_nin);
        l_dt_cancel_notes_n    := sys.diutil.bool_to_int(dt_cancel_notes_nin);
        l_prof_create_n        := sys.diutil.bool_to_int(prof_create_nin);
        l_dt_create_n          := sys.diutil.bool_to_int(dt_create_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_edit_n           := sys.diutil.bool_to_int(flg_edit_nin);
    
        UPDATE rounds
           SET area_code          = decode(l_area_code_n, 0, area_code_in, nvl(area_code_in, area_code)),
               desc_round         = decode(l_desc_round_n, 0, desc_round_in, nvl(desc_round_in, desc_round)),
               sample_time        = decode(l_sample_time_n, 0, sample_time_in, nvl(sample_time_in, sample_time)),
               trigger_time       = decode(l_trigger_time_n, 0, trigger_time_in, nvl(trigger_time_in, trigger_time)),
               default_days       = decode(l_default_days_n, 0, default_days_in, nvl(default_days_in, default_days)),
               available_holidays = decode(l_available_holidays_n,
                                           0,
                                           available_holidays_in,
                                           nvl(available_holidays_in, available_holidays)),
               id_institution     = decode(l_id_institution_n,
                                           0,
                                           id_institution_in,
                                           nvl(id_institution_in, id_institution)),
               id_software        = decode(l_id_software_n, 0, id_software_in, nvl(id_software_in, id_software)),
               valid_from         = decode(l_valid_from_n, 0, valid_from_in, nvl(valid_from_in, valid_from)),
               valid_to           = decode(l_valid_to_n, 0, valid_to_in, nvl(valid_to_in, valid_to)),
               flg_available      = decode(l_flg_available_n, 0, flg_available_in, nvl(flg_available_in, flg_available)),
               cancel_notes       = decode(l_cancel_notes_n, 0, cancel_notes_in, nvl(cancel_notes_in, cancel_notes)),
               dt_cancel_notes    = decode(l_dt_cancel_notes_n,
                                           0,
                                           dt_cancel_notes_in,
                                           nvl(dt_cancel_notes_in, dt_cancel_notes)),
               prof_create        = decode(l_prof_create_n, 0, prof_create_in, nvl(prof_create_in, prof_create)),
               dt_create          = decode(l_dt_create_n, 0, dt_create_in, nvl(dt_create_in, dt_create)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution)),
               flg_edit           = decode(l_flg_edit_n, 0, flg_edit_in, nvl(flg_edit_in, flg_edit))
         WHERE id_round = id_round_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'RND_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "RND_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ROUNDS',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'AREA_CODE',
                                                        value_in           => area_code_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'SAMPLE_TIME',
                                                        value_in           => sample_time_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'VALID_FROM',
                                                        value_in           => valid_from_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ROUNDS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    IF l_name = 'RND_INN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'RND_SOE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_round_in            IN rounds.id_round%TYPE,
        area_code_in           IN rounds.area_code%TYPE DEFAULT NULL,
        area_code_nin          IN BOOLEAN := TRUE,
        desc_round_in          IN rounds.desc_round%TYPE DEFAULT NULL,
        desc_round_nin         IN BOOLEAN := TRUE,
        sample_time_in         IN rounds.sample_time%TYPE DEFAULT NULL,
        sample_time_nin        IN BOOLEAN := TRUE,
        trigger_time_in        IN rounds.trigger_time%TYPE DEFAULT NULL,
        trigger_time_nin       IN BOOLEAN := TRUE,
        default_days_in        IN rounds.default_days%TYPE DEFAULT NULL,
        default_days_nin       IN BOOLEAN := TRUE,
        available_holidays_in  IN rounds.available_holidays%TYPE DEFAULT NULL,
        available_holidays_nin IN BOOLEAN := TRUE,
        id_institution_in      IN rounds.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        id_software_in         IN rounds.id_software%TYPE DEFAULT NULL,
        id_software_nin        IN BOOLEAN := TRUE,
        valid_from_in          IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_from_nin         IN BOOLEAN := TRUE,
        valid_to_in            IN rounds.valid_to%TYPE DEFAULT NULL,
        valid_to_nin           IN BOOLEAN := TRUE,
        flg_available_in       IN rounds.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        cancel_notes_in        IN rounds.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin       IN BOOLEAN := TRUE,
        dt_cancel_notes_in     IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_nin    IN BOOLEAN := TRUE,
        prof_create_in         IN rounds.prof_create%TYPE DEFAULT NULL,
        prof_create_nin        IN BOOLEAN := TRUE,
        dt_create_in           IN rounds.dt_create%TYPE DEFAULT NULL,
        dt_create_nin          IN BOOLEAN := TRUE,
        create_user_in         IN rounds.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN rounds.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN rounds.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN rounds.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN rounds.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN rounds.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        flg_edit_in            IN rounds.flg_edit%TYPE DEFAULT NULL,
        flg_edit_nin           IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_round_in            => id_round_in,
            area_code_in           => area_code_in,
            area_code_nin          => area_code_nin,
            desc_round_in          => desc_round_in,
            desc_round_nin         => desc_round_nin,
            sample_time_in         => sample_time_in,
            sample_time_nin        => sample_time_nin,
            trigger_time_in        => trigger_time_in,
            trigger_time_nin       => trigger_time_nin,
            default_days_in        => default_days_in,
            default_days_nin       => default_days_nin,
            available_holidays_in  => available_holidays_in,
            available_holidays_nin => available_holidays_nin,
            id_institution_in      => id_institution_in,
            id_institution_nin     => id_institution_nin,
            id_software_in         => id_software_in,
            id_software_nin        => id_software_nin,
            valid_from_in          => valid_from_in,
            valid_from_nin         => valid_from_nin,
            valid_to_in            => valid_to_in,
            valid_to_nin           => valid_to_nin,
            flg_available_in       => flg_available_in,
            flg_available_nin      => flg_available_nin,
            cancel_notes_in        => cancel_notes_in,
            cancel_notes_nin       => cancel_notes_nin,
            dt_cancel_notes_in     => dt_cancel_notes_in,
            dt_cancel_notes_nin    => dt_cancel_notes_nin,
            prof_create_in         => prof_create_in,
            prof_create_nin        => prof_create_nin,
            dt_create_in           => dt_create_in,
            dt_create_nin          => dt_create_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            flg_edit_in            => flg_edit_in,
            flg_edit_nin           => flg_edit_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        area_code_in           IN rounds.area_code%TYPE DEFAULT NULL,
        area_code_nin          IN BOOLEAN := TRUE,
        desc_round_in          IN rounds.desc_round%TYPE DEFAULT NULL,
        desc_round_nin         IN BOOLEAN := TRUE,
        sample_time_in         IN rounds.sample_time%TYPE DEFAULT NULL,
        sample_time_nin        IN BOOLEAN := TRUE,
        trigger_time_in        IN rounds.trigger_time%TYPE DEFAULT NULL,
        trigger_time_nin       IN BOOLEAN := TRUE,
        default_days_in        IN rounds.default_days%TYPE DEFAULT NULL,
        default_days_nin       IN BOOLEAN := TRUE,
        available_holidays_in  IN rounds.available_holidays%TYPE DEFAULT NULL,
        available_holidays_nin IN BOOLEAN := TRUE,
        id_institution_in      IN rounds.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        id_software_in         IN rounds.id_software%TYPE DEFAULT NULL,
        id_software_nin        IN BOOLEAN := TRUE,
        valid_from_in          IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_from_nin         IN BOOLEAN := TRUE,
        valid_to_in            IN rounds.valid_to%TYPE DEFAULT NULL,
        valid_to_nin           IN BOOLEAN := TRUE,
        flg_available_in       IN rounds.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        cancel_notes_in        IN rounds.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin       IN BOOLEAN := TRUE,
        dt_cancel_notes_in     IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_nin    IN BOOLEAN := TRUE,
        prof_create_in         IN rounds.prof_create%TYPE DEFAULT NULL,
        prof_create_nin        IN BOOLEAN := TRUE,
        dt_create_in           IN rounds.dt_create%TYPE DEFAULT NULL,
        dt_create_nin          IN BOOLEAN := TRUE,
        create_user_in         IN rounds.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN rounds.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN rounds.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN rounds.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN rounds.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN rounds.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        flg_edit_in            IN rounds.flg_edit%TYPE DEFAULT NULL,
        flg_edit_nin           IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_area_code_n          NUMBER(1);
        l_desc_round_n         NUMBER(1);
        l_sample_time_n        NUMBER(1);
        l_trigger_time_n       NUMBER(1);
        l_default_days_n       NUMBER(1);
        l_available_holidays_n NUMBER(1);
        l_id_institution_n     NUMBER(1);
        l_id_software_n        NUMBER(1);
        l_valid_from_n         NUMBER(1);
        l_valid_to_n           NUMBER(1);
        l_flg_available_n      NUMBER(1);
        l_cancel_notes_n       NUMBER(1);
        l_dt_cancel_notes_n    NUMBER(1);
        l_prof_create_n        NUMBER(1);
        l_dt_create_n          NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        l_flg_edit_n           NUMBER(1);
        id_round_in            rounds.id_round%TYPE;
    BEGIN
    
        l_area_code_n          := sys.diutil.bool_to_int(area_code_nin);
        l_desc_round_n         := sys.diutil.bool_to_int(desc_round_nin);
        l_sample_time_n        := sys.diutil.bool_to_int(sample_time_nin);
        l_trigger_time_n       := sys.diutil.bool_to_int(trigger_time_nin);
        l_default_days_n       := sys.diutil.bool_to_int(default_days_nin);
        l_available_holidays_n := sys.diutil.bool_to_int(available_holidays_nin);
        l_id_institution_n     := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n        := sys.diutil.bool_to_int(id_software_nin);
        l_valid_from_n         := sys.diutil.bool_to_int(valid_from_nin);
        l_valid_to_n           := sys.diutil.bool_to_int(valid_to_nin);
        l_flg_available_n      := sys.diutil.bool_to_int(flg_available_nin);
        l_cancel_notes_n       := sys.diutil.bool_to_int(cancel_notes_nin);
        l_dt_cancel_notes_n    := sys.diutil.bool_to_int(dt_cancel_notes_nin);
        l_prof_create_n        := sys.diutil.bool_to_int(prof_create_nin);
        l_dt_create_n          := sys.diutil.bool_to_int(dt_create_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_edit_n           := sys.diutil.bool_to_int(flg_edit_nin);
    
        l_sql := 'UPDATE ROUNDS SET ' || ' AREA_CODE = decode (' || l_area_code_n ||
                 ',0,:area_code_in, NVL (:area_code_in, AREA_CODE)) ' || ',' || ' DESC_ROUND = decode (' ||
                 l_desc_round_n || ',0,:desc_round_in, NVL (:desc_round_in, DESC_ROUND)) ' || ',' ||
                 ' SAMPLE_TIME = decode (' || l_sample_time_n ||
                 ',0,:sample_time_in, NVL (:sample_time_in, SAMPLE_TIME)) ' || ',' || ' TRIGGER_TIME = decode (' ||
                 l_trigger_time_n || ',0,:trigger_time_in, NVL (:trigger_time_in, TRIGGER_TIME)) ' || ',' ||
                 ' DEFAULT_DAYS = decode (' || l_default_days_n ||
                 ',0,:default_days_in, NVL (:default_days_in, DEFAULT_DAYS)) ' || ',' ||
                 ' AVAILABLE_HOLIDAYS = decode (' || l_available_holidays_n ||
                 ',0,:available_holidays_in, NVL (:available_holidays_in, AVAILABLE_HOLIDAYS)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' ID_SOFTWARE = decode (' || l_id_software_n ||
                 ',0,:id_software_in, NVL (:id_software_in, ID_SOFTWARE)) ' || ',' || ' VALID_FROM = decode (' ||
                 l_valid_from_n || ',0,:valid_from_in, NVL (:valid_from_in, VALID_FROM)) ' || ',' ||
                 ' VALID_TO = decode (' || l_valid_to_n || ',0,:valid_to_in, NVL (:valid_to_in, VALID_TO)) ' || ',' ||
                 ' FLG_AVAILABLE = decode (' || l_flg_available_n ||
                 ',0,:flg_available_in, NVL (:flg_available_in, FLG_AVAILABLE)) ' || ',' || ' CANCEL_NOTES = decode (' ||
                 l_cancel_notes_n || ',0,:cancel_notes_in, NVL (:cancel_notes_in, CANCEL_NOTES)) ' || ',' ||
                 ' DT_CANCEL_NOTES = decode (' || l_dt_cancel_notes_n ||
                 ',0,:dt_cancel_notes_in, NVL (:dt_cancel_notes_in, DT_CANCEL_NOTES)) ' || ',' ||
                 ' PROF_CREATE = decode (' || l_prof_create_n ||
                 ',0,:prof_create_in, NVL (:prof_create_in, PROF_CREATE)) ' || ',' || ' DT_CREATE = decode (' ||
                 l_dt_create_n || ',0,:dt_create_in, NVL (:dt_create_in, DT_CREATE)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' FLG_EDIT = decode (' || l_flg_edit_n || ',0,:flg_edit_in, NVL (:flg_edit_in, FLG_EDIT)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN area_code_in, desc_round_in, sample_time_in, trigger_time_in, default_days_in, available_holidays_in, id_institution_in, id_software_in, valid_from_in, valid_to_in, flg_available_in, cancel_notes_in, dt_cancel_notes_in, prof_create_in, dt_create_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_edit_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'RND_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "RND_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ROUNDS',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'AREA_CODE',
                                                        value_in           => area_code_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'SAMPLE_TIME',
                                                        value_in           => sample_time_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'VALID_FROM',
                                                        value_in           => valid_from_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ROUNDS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    IF l_name = 'RND_INN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'RND_SOE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        area_code_in           IN rounds.area_code%TYPE DEFAULT NULL,
        area_code_nin          IN BOOLEAN := TRUE,
        desc_round_in          IN rounds.desc_round%TYPE DEFAULT NULL,
        desc_round_nin         IN BOOLEAN := TRUE,
        sample_time_in         IN rounds.sample_time%TYPE DEFAULT NULL,
        sample_time_nin        IN BOOLEAN := TRUE,
        trigger_time_in        IN rounds.trigger_time%TYPE DEFAULT NULL,
        trigger_time_nin       IN BOOLEAN := TRUE,
        default_days_in        IN rounds.default_days%TYPE DEFAULT NULL,
        default_days_nin       IN BOOLEAN := TRUE,
        available_holidays_in  IN rounds.available_holidays%TYPE DEFAULT NULL,
        available_holidays_nin IN BOOLEAN := TRUE,
        id_institution_in      IN rounds.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        id_software_in         IN rounds.id_software%TYPE DEFAULT NULL,
        id_software_nin        IN BOOLEAN := TRUE,
        valid_from_in          IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_from_nin         IN BOOLEAN := TRUE,
        valid_to_in            IN rounds.valid_to%TYPE DEFAULT NULL,
        valid_to_nin           IN BOOLEAN := TRUE,
        flg_available_in       IN rounds.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        cancel_notes_in        IN rounds.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin       IN BOOLEAN := TRUE,
        dt_cancel_notes_in     IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_nin    IN BOOLEAN := TRUE,
        prof_create_in         IN rounds.prof_create%TYPE DEFAULT NULL,
        prof_create_nin        IN BOOLEAN := TRUE,
        dt_create_in           IN rounds.dt_create%TYPE DEFAULT NULL,
        dt_create_nin          IN BOOLEAN := TRUE,
        create_user_in         IN rounds.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN rounds.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN rounds.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN rounds.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN rounds.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN rounds.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        flg_edit_in            IN rounds.flg_edit%TYPE DEFAULT NULL,
        flg_edit_nin           IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(area_code_in           => area_code_in,
            area_code_nin          => area_code_nin,
            desc_round_in          => desc_round_in,
            desc_round_nin         => desc_round_nin,
            sample_time_in         => sample_time_in,
            sample_time_nin        => sample_time_nin,
            trigger_time_in        => trigger_time_in,
            trigger_time_nin       => trigger_time_nin,
            default_days_in        => default_days_in,
            default_days_nin       => default_days_nin,
            available_holidays_in  => available_holidays_in,
            available_holidays_nin => available_holidays_nin,
            id_institution_in      => id_institution_in,
            id_institution_nin     => id_institution_nin,
            id_software_in         => id_software_in,
            id_software_nin        => id_software_nin,
            valid_from_in          => valid_from_in,
            valid_from_nin         => valid_from_nin,
            valid_to_in            => valid_to_in,
            valid_to_nin           => valid_to_nin,
            flg_available_in       => flg_available_in,
            flg_available_nin      => flg_available_nin,
            cancel_notes_in        => cancel_notes_in,
            cancel_notes_nin       => cancel_notes_nin,
            dt_cancel_notes_in     => dt_cancel_notes_in,
            dt_cancel_notes_nin    => dt_cancel_notes_nin,
            prof_create_in         => prof_create_in,
            prof_create_nin        => prof_create_nin,
            dt_create_in           => dt_create_in,
            dt_create_nin          => dt_create_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            flg_edit_in            => flg_edit_in,
            flg_edit_nin           => flg_edit_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN rounds%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_round_in           => rec_in.id_round,
            area_code_in          => rec_in.area_code,
            desc_round_in         => rec_in.desc_round,
            sample_time_in        => rec_in.sample_time,
            trigger_time_in       => rec_in.trigger_time,
            default_days_in       => rec_in.default_days,
            available_holidays_in => rec_in.available_holidays,
            id_institution_in     => rec_in.id_institution,
            id_software_in        => rec_in.id_software,
            valid_from_in         => rec_in.valid_from,
            valid_to_in           => rec_in.valid_to,
            flg_available_in      => rec_in.flg_available,
            cancel_notes_in       => rec_in.cancel_notes,
            dt_cancel_notes_in    => rec_in.dt_cancel_notes,
            prof_create_in        => rec_in.prof_create,
            dt_create_in          => rec_in.dt_create,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            flg_edit_in           => rec_in.flg_edit
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN rounds%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_round_in           => rec_in.id_round,
            area_code_in          => rec_in.area_code,
            desc_round_in         => rec_in.desc_round,
            sample_time_in        => rec_in.sample_time,
            trigger_time_in       => rec_in.trigger_time,
            default_days_in       => rec_in.default_days,
            available_holidays_in => rec_in.available_holidays,
            id_institution_in     => rec_in.id_institution,
            id_software_in        => rec_in.id_software,
            valid_from_in         => rec_in.valid_from,
            valid_to_in           => rec_in.valid_to,
            flg_available_in      => rec_in.flg_available,
            cancel_notes_in       => rec_in.cancel_notes,
            dt_cancel_notes_in    => rec_in.dt_cancel_notes,
            prof_create_in        => rec_in.prof_create,
            dt_create_in          => rec_in.dt_create,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            flg_edit_in           => rec_in.flg_edit
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_round_in           IN rounds.id_round%TYPE,
        area_code_in          IN rounds.area_code%TYPE DEFAULT NULL,
        desc_round_in         IN rounds.desc_round%TYPE DEFAULT NULL,
        sample_time_in        IN rounds.sample_time%TYPE DEFAULT NULL,
        trigger_time_in       IN rounds.trigger_time%TYPE DEFAULT NULL,
        default_days_in       IN rounds.default_days%TYPE DEFAULT NULL,
        available_holidays_in IN rounds.available_holidays%TYPE DEFAULT NULL,
        id_institution_in     IN rounds.id_institution%TYPE DEFAULT NULL,
        id_software_in        IN rounds.id_software%TYPE DEFAULT NULL,
        valid_from_in         IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_to_in           IN rounds.valid_to%TYPE DEFAULT NULL,
        flg_available_in      IN rounds.flg_available%TYPE DEFAULT NULL,
        cancel_notes_in       IN rounds.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_in    IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        prof_create_in        IN rounds.prof_create%TYPE DEFAULT NULL,
        dt_create_in          IN rounds.dt_create%TYPE DEFAULT NULL,
        create_user_in        IN rounds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN rounds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN rounds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN rounds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN rounds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN rounds.update_institution%TYPE DEFAULT NULL,
        flg_edit_in           IN rounds.flg_edit%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        upd(id_round_in           => id_round_in,
            area_code_in          => area_code_in,
            desc_round_in         => desc_round_in,
            sample_time_in        => sample_time_in,
            trigger_time_in       => trigger_time_in,
            default_days_in       => default_days_in,
            available_holidays_in => available_holidays_in,
            id_institution_in     => id_institution_in,
            id_software_in        => id_software_in,
            valid_from_in         => valid_from_in,
            valid_to_in           => valid_to_in,
            flg_available_in      => flg_available_in,
            cancel_notes_in       => cancel_notes_in,
            dt_cancel_notes_in    => dt_cancel_notes_in,
            prof_create_in        => prof_create_in,
            dt_create_in          => dt_create_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_edit_in           => flg_edit_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_round_in           => id_round_in,
                area_code_in          => area_code_in,
                desc_round_in         => desc_round_in,
                sample_time_in        => sample_time_in,
                trigger_time_in       => trigger_time_in,
                default_days_in       => default_days_in,
                available_holidays_in => available_holidays_in,
                id_institution_in     => id_institution_in,
                id_software_in        => id_software_in,
                valid_from_in         => valid_from_in,
                valid_to_in           => valid_to_in,
                flg_available_in      => flg_available_in,
                cancel_notes_in       => cancel_notes_in,
                dt_cancel_notes_in    => dt_cancel_notes_in,
                prof_create_in        => prof_create_in,
                dt_create_in          => dt_create_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_time_in        => update_time_in,
                update_institution_in => update_institution_in,
                flg_edit_in           => flg_edit_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_round_in           IN rounds.id_round%TYPE,
        area_code_in          IN rounds.area_code%TYPE DEFAULT NULL,
        desc_round_in         IN rounds.desc_round%TYPE DEFAULT NULL,
        sample_time_in        IN rounds.sample_time%TYPE DEFAULT NULL,
        trigger_time_in       IN rounds.trigger_time%TYPE DEFAULT NULL,
        default_days_in       IN rounds.default_days%TYPE DEFAULT NULL,
        available_holidays_in IN rounds.available_holidays%TYPE DEFAULT NULL,
        id_institution_in     IN rounds.id_institution%TYPE DEFAULT NULL,
        id_software_in        IN rounds.id_software%TYPE DEFAULT NULL,
        valid_from_in         IN rounds.valid_from%TYPE DEFAULT NULL,
        valid_to_in           IN rounds.valid_to%TYPE DEFAULT NULL,
        flg_available_in      IN rounds.flg_available%TYPE DEFAULT NULL,
        cancel_notes_in       IN rounds.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_notes_in    IN rounds.dt_cancel_notes%TYPE DEFAULT NULL,
        prof_create_in        IN rounds.prof_create%TYPE DEFAULT NULL,
        dt_create_in          IN rounds.dt_create%TYPE DEFAULT NULL,
        create_user_in        IN rounds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN rounds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN rounds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN rounds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN rounds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN rounds.update_institution%TYPE DEFAULT NULL,
        flg_edit_in           IN rounds.flg_edit%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_round_in,
                area_code_in,
                desc_round_in,
                sample_time_in,
                trigger_time_in,
                default_days_in,
                available_holidays_in,
                id_institution_in,
                id_software_in,
                valid_from_in,
                valid_to_in,
                flg_available_in,
                cancel_notes_in,
                dt_cancel_notes_in,
                prof_create_in,
                dt_create_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_edit_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN rounds_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_round           id_round_cc;
        l_area_code          area_code_cc;
        l_desc_round         desc_round_cc;
        l_sample_time        sample_time_cc;
        l_trigger_time       trigger_time_cc;
        l_default_days       default_days_cc;
        l_available_holidays available_holidays_cc;
        l_id_institution     id_institution_cc;
        l_id_software        id_software_cc;
        l_valid_from         valid_from_cc;
        l_valid_to           valid_to_cc;
        l_flg_available      flg_available_cc;
        l_cancel_notes       cancel_notes_cc;
        l_dt_cancel_notes    dt_cancel_notes_cc;
        l_prof_create        prof_create_cc;
        l_dt_create          dt_create_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_time        update_time_cc;
        l_update_institution update_institution_cc;
        l_flg_edit           flg_edit_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_round(i) := col_in(i).id_round;
            l_area_code(i) := col_in(i).area_code;
            l_desc_round(i) := col_in(i).desc_round;
            l_sample_time(i) := col_in(i).sample_time;
            l_trigger_time(i) := col_in(i).trigger_time;
            l_default_days(i) := col_in(i).default_days;
            l_available_holidays(i) := col_in(i).available_holidays;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_software(i) := col_in(i).id_software;
            l_valid_from(i) := col_in(i).valid_from;
            l_valid_to(i) := col_in(i).valid_to;
            l_flg_available(i) := col_in(i).flg_available;
            l_cancel_notes(i) := col_in(i).cancel_notes;
            l_dt_cancel_notes(i) := col_in(i).dt_cancel_notes;
            l_prof_create(i) := col_in(i).prof_create;
            l_dt_create(i) := col_in(i).dt_create;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_edit(i) := col_in(i).flg_edit;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE rounds
                   SET area_code          = nvl(l_area_code(i), area_code),
                       desc_round         = nvl(l_desc_round(i), desc_round),
                       sample_time        = nvl(l_sample_time(i), sample_time),
                       trigger_time       = nvl(l_trigger_time(i), trigger_time),
                       default_days       = nvl(l_default_days(i), default_days),
                       available_holidays = nvl(l_available_holidays(i), available_holidays),
                       id_institution     = nvl(l_id_institution(i), id_institution),
                       id_software        = nvl(l_id_software(i), id_software),
                       valid_from         = nvl(l_valid_from(i), valid_from),
                       valid_to           = nvl(l_valid_to(i), valid_to),
                       flg_available      = nvl(l_flg_available(i), flg_available),
                       cancel_notes       = nvl(l_cancel_notes(i), cancel_notes),
                       dt_cancel_notes    = nvl(l_dt_cancel_notes(i), dt_cancel_notes),
                       prof_create        = nvl(l_prof_create(i), prof_create),
                       dt_create          = nvl(l_dt_create(i), dt_create),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution),
                       flg_edit           = nvl(l_flg_edit(i), flg_edit)
                 WHERE id_round = l_id_round(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE rounds
                   SET area_code          = l_area_code(i),
                       desc_round         = l_desc_round(i),
                       sample_time        = l_sample_time(i),
                       trigger_time       = l_trigger_time(i),
                       default_days       = l_default_days(i),
                       available_holidays = l_available_holidays(i),
                       id_institution     = l_id_institution(i),
                       id_software        = l_id_software(i),
                       valid_from         = l_valid_from(i),
                       valid_to           = l_valid_to(i),
                       flg_available      = l_flg_available(i),
                       cancel_notes       = l_cancel_notes(i),
                       dt_cancel_notes    = l_dt_cancel_notes(i),
                       prof_create        = l_prof_create(i),
                       dt_create          = l_dt_create(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i),
                       flg_edit           = l_flg_edit(i)
                 WHERE id_round = l_id_round(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN rounds_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE ROUNDS
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE ROUNDS
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE ROUNDS set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE ROUNDS set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_round_in     IN rounds.id_round%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rounds
         WHERE id_round = id_round_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_round_in     IN rounds.id_round%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_round_in => id_round_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_ROUND
    PROCEDURE del_id_round
    (
        id_round_in     IN rounds.id_round%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rounds
         WHERE id_round = id_round_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_round;

    -- Delete all rows for primary key column ID_ROUND
    PROCEDURE del_id_round
    (
        id_round_in     IN rounds.id_round%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_round(id_round_in => id_round_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_round;

    -- Delete for unique value of RND_UK
    PROCEDURE del_rnd_uk
    (
        area_code_in      IN rounds.area_code%TYPE,
        sample_time_in    IN rounds.sample_time%TYPE,
        valid_from_in     IN rounds.valid_from%TYPE,
        id_institution_in IN rounds.id_institution%TYPE,
        id_software_in    IN rounds.id_software%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rounds
         WHERE area_code = area_code_in
           AND sample_time = sample_time_in
           AND valid_from = valid_from_in
           AND id_institution = id_institution_in
           AND id_software = id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_rnd_uk;

    -- Delete for unique value of RND_UK
    PROCEDURE del_rnd_uk
    (
        area_code_in      IN rounds.area_code%TYPE,
        sample_time_in    IN rounds.sample_time%TYPE,
        valid_from_in     IN rounds.valid_from%TYPE,
        id_institution_in IN rounds.id_institution%TYPE,
        id_software_in    IN rounds.id_software%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rnd_uk(area_code_in      => area_code_in,
                   sample_time_in    => sample_time_in,
                   valid_from_in     => valid_from_in,
                   id_institution_in => id_institution_in,
                   id_software_in    => id_software_in,
                   handle_error_in   => handle_error_in,
                   rows_out          => rows_out);
    END del_rnd_uk;

    PROCEDURE del_rnd_inn_fk
    (
        id_institution_in IN rounds.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rounds
         WHERE id_institution = del_rnd_inn_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_rnd_inn_fk;

    PROCEDURE del_rnd_inn_fk
    (
        id_institution_in IN rounds.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rnd_inn_fk(id_institution_in => id_institution_in,
                       handle_error_in   => handle_error_in,
                       rows_out          => rows_out);
    END del_rnd_inn_fk;

    PROCEDURE del_rnd_soe_fk
    (
        id_software_in  IN rounds.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rounds
         WHERE id_software = del_rnd_soe_fk.id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_rnd_soe_fk;

    PROCEDURE del_rnd_soe_fk
    (
        id_software_in  IN rounds.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rnd_soe_fk(id_software_in => id_software_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_rnd_soe_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM ROUNDS';
        ELSE
            RETURN 'DELETE FROM ROUNDS WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ROUNDS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ROUNDS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(rounds_inout IN OUT rounds%ROWTYPE) IS
    BEGIN
        rounds_inout.id_round           := NULL;
        rounds_inout.area_code          := NULL;
        rounds_inout.desc_round         := NULL;
        rounds_inout.sample_time        := NULL;
        rounds_inout.trigger_time       := NULL;
        rounds_inout.default_days       := NULL;
        rounds_inout.available_holidays := NULL;
        rounds_inout.id_institution     := NULL;
        rounds_inout.id_software        := NULL;
        rounds_inout.valid_from         := NULL;
        rounds_inout.valid_to           := NULL;
        rounds_inout.flg_available      := NULL;
        rounds_inout.cancel_notes       := NULL;
        rounds_inout.dt_cancel_notes    := NULL;
        rounds_inout.prof_create        := NULL;
        rounds_inout.dt_create          := NULL;
        rounds_inout.create_user        := NULL;
        rounds_inout.create_time        := NULL;
        rounds_inout.create_institution := NULL;
        rounds_inout.update_user        := NULL;
        rounds_inout.update_time        := NULL;
        rounds_inout.update_institution := NULL;
        rounds_inout.flg_edit           := NULL;
    END initrec;

    FUNCTION initrec RETURN rounds%ROWTYPE IS
        l_rounds rounds%ROWTYPE;
    BEGIN
        RETURN l_rounds;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN rounds_tc IS
        data rounds_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM rounds
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN rounds_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data rounds_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_rounds;
/
