/*-- Last Change Revision: $Rev: 1877368 $*/
/*-- Last Change by: $Author: adriano.ferreira $*/
/*-- Date of last change: $Date: 2018-11-12 15:39:19 +0000 (seg, 12 nov 2018) $*/
CREATE OR REPLACE PACKAGE BODY ts_print_list_job_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: October 13, 2014 23:31:16
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_print_list_job_hist_in IN print_list_job_hist.id_print_list_job_hist%TYPE,
        id_print_list_job_in      IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_area_in     IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        print_arguments_in        IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        id_workflow_in            IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_status_in              IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        dt_status_in              IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        id_prof_status_in         IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_patient_in             IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_req_in            IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_inst_req_in            IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        dt_req_in                 IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        context_data_in           IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        create_user_in            IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO print_list_job_hist
            (id_print_list_job_hist,
             id_print_list_job,
             id_print_list_area,
             print_arguments,
             id_workflow,
             id_status,
             dt_status,
             id_prof_status,
             id_patient,
             id_episode,
             id_prof_req,
             id_inst_req,
             dt_req,
             context_data,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_print_list_job_hist_in,
             id_print_list_job_in,
             id_print_list_area_in,
             print_arguments_in,
             id_workflow_in,
             id_status_in,
             dt_status_in,
             id_prof_status_in,
             id_patient_in,
             id_episode_in,
             id_prof_req_in,
             id_inst_req_in,
             dt_req_in,
             context_data_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PRINT_LIST_JOB_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_print_list_job_hist_in IN print_list_job_hist.id_print_list_job_hist%TYPE,
        id_print_list_job_in      IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_area_in     IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        print_arguments_in        IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        id_workflow_in            IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_status_in              IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        dt_status_in              IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        id_prof_status_in         IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_patient_in             IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_req_in            IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_inst_req_in            IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        dt_req_in                 IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        context_data_in           IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        create_user_in            IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_print_list_job_hist_in => id_print_list_job_hist_in,
            id_print_list_job_in      => id_print_list_job_in,
            id_print_list_area_in     => id_print_list_area_in,
            print_arguments_in        => print_arguments_in,
            id_workflow_in            => id_workflow_in,
            id_status_in              => id_status_in,
            dt_status_in              => dt_status_in,
            id_prof_status_in         => id_prof_status_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            id_prof_req_in            => id_prof_req_in,
            id_inst_req_in            => id_inst_req_in,
            dt_req_in                 => dt_req_in,
            context_data_in           => context_data_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    /*
    START Special logic for handling LOB columns....
    */

    PROCEDURE n_ins_clobs_in_chunks
    (
        id_print_list_job_hist_in IN print_list_job_hist.id_print_list_job_hist%TYPE,
        id_print_list_job_in      IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_area_in     IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        print_arguments_in        IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        id_workflow_in            IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_status_in              IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        dt_status_in              IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        id_prof_status_in         IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_patient_in             IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_req_in            IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_inst_req_in            IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        dt_req_in                 IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        create_user_in            IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        clob_columns_in           IN varchar2_t,
        clob_pieces_in            IN varchar2_t
    ) IS
        l_context_data CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
    BEGIN
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'context_data_in' THEN
                            IF l_context_data IS NULL
                            THEN
                                dbms_lob.createtemporary(l_context_data, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'context_data_in' THEN
                        dbms_lob.writeappend(l_context_data, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        ins(id_print_list_job_hist_in => id_print_list_job_hist_in,
            id_print_list_job_in      => id_print_list_job_in,
            id_print_list_area_in     => id_print_list_area_in,
            print_arguments_in        => print_arguments_in,
            id_workflow_in            => id_workflow_in,
            id_status_in              => id_status_in,
            dt_status_in              => dt_status_in,
            id_prof_status_in         => id_prof_status_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            id_prof_req_in            => id_prof_req_in,
            id_inst_req_in            => id_inst_req_in,
            dt_req_in                 => dt_req_in,
            context_data_in           => l_context_data,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in);
    
    END n_ins_clobs_in_chunks;

    PROCEDURE n_upd_clobs_in_chunks
    (
        id_print_list_job_hist_in IN print_list_job_hist.id_print_list_job_hist%TYPE,
        id_print_list_job_in      IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_area_in     IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        print_arguments_in        IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        id_workflow_in            IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_status_in              IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        dt_status_in              IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        id_prof_status_in         IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_patient_in             IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_req_in            IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_inst_req_in            IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        dt_req_in                 IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        create_user_in            IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        ignore_if_null_in         IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        clob_columns_in           IN varchar2_t,
        clob_pieces_in            IN varchar2_t
    ) IS
        l_context_data CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
        l_rows         PLS_INTEGER;
    BEGIN
    
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'context_data_in' THEN
                            IF l_context_data IS NULL
                            THEN
                                dbms_lob.createtemporary(l_context_data, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'context_data_in' THEN
                        dbms_lob.writeappend(l_context_data, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        upd(id_print_list_job_hist_in => id_print_list_job_hist_in,
            id_print_list_job_in      => id_print_list_job_in,
            id_print_list_area_in     => id_print_list_area_in,
            print_arguments_in        => print_arguments_in,
            id_workflow_in            => id_workflow_in,
            id_status_in              => id_status_in,
            dt_status_in              => dt_status_in,
            id_prof_status_in         => id_prof_status_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            id_prof_req_in            => id_prof_req_in,
            id_inst_req_in            => id_inst_req_in,
            dt_req_in                 => dt_req_in,
            context_data_in           => l_context_data,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in);
    END n_upd_clobs_in_chunks;

    PROCEDURE n_upd_ins_clobs_in_chunks
    (
        id_print_list_job_hist_in IN print_list_job_hist.id_print_list_job_hist%TYPE,
        id_print_list_job_in      IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_area_in     IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        print_arguments_in        IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        id_workflow_in            IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_status_in              IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        dt_status_in              IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        id_prof_status_in         IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_patient_in             IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_req_in            IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_inst_req_in            IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        dt_req_in                 IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        create_user_in            IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        ignore_if_null_in         IN BOOLEAN DEFAULT TRUE,
        handle_error_in           IN BOOLEAN DEFAULT TRUE,
        clob_columns_in           IN varchar2_t,
        clob_pieces_in            IN varchar2_t
    ) IS
    BEGIN
        n_upd_clobs_in_chunks(id_print_list_job_hist_in => id_print_list_job_hist_in,
                              id_print_list_job_in      => id_print_list_job_in,
                              id_print_list_area_in     => id_print_list_area_in,
                              print_arguments_in        => print_arguments_in,
                              id_workflow_in            => id_workflow_in,
                              id_status_in              => id_status_in,
                              dt_status_in              => dt_status_in,
                              id_prof_status_in         => id_prof_status_in,
                              id_patient_in             => id_patient_in,
                              id_episode_in             => id_episode_in,
                              id_prof_req_in            => id_prof_req_in,
                              id_inst_req_in            => id_inst_req_in,
                              dt_req_in                 => dt_req_in,
                              create_user_in            => create_user_in,
                              create_time_in            => create_time_in,
                              create_institution_in     => create_institution_in,
                              update_user_in            => update_user_in,
                              update_time_in            => update_time_in,
                              update_institution_in     => update_institution_in,
                              clob_columns_in           => clob_columns_in,
                              clob_pieces_in            => clob_pieces_in,
                              ignore_if_null_in         => ignore_if_null_in,
                              handle_error_in           => handle_error_in);
    
        IF SQL%ROWCOUNT = 0
        THEN
            n_ins_clobs_in_chunks(id_print_list_job_hist_in => id_print_list_job_hist_in,
                                  id_print_list_job_in      => id_print_list_job_in,
                                  id_print_list_area_in     => id_print_list_area_in,
                                  print_arguments_in        => print_arguments_in,
                                  id_workflow_in            => id_workflow_in,
                                  id_status_in              => id_status_in,
                                  dt_status_in              => dt_status_in,
                                  id_prof_status_in         => id_prof_status_in,
                                  id_patient_in             => id_patient_in,
                                  id_episode_in             => id_episode_in,
                                  id_prof_req_in            => id_prof_req_in,
                                  id_inst_req_in            => id_inst_req_in,
                                  dt_req_in                 => dt_req_in,
                                  create_user_in            => create_user_in,
                                  create_time_in            => create_time_in,
                                  create_institution_in     => create_institution_in,
                                  update_user_in            => update_user_in,
                                  update_time_in            => update_time_in,
                                  update_institution_in     => update_institution_in,
                                  clob_columns_in           => clob_columns_in,
                                  clob_pieces_in            => clob_pieces_in,
                                  handle_error_in           => handle_error_in);
        END IF;
    END n_upd_ins_clobs_in_chunks;

    /*
    END Special logic for handling LOB columns.
    */

    PROCEDURE ins
    (
        rec_in          IN print_list_job_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec print_list_job_hist%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_print_list_job_hist := next_key(sequence_in);
        END IF;
        ins(id_print_list_job_hist_in => l_rec.id_print_list_job_hist,
            id_print_list_job_in      => l_rec.id_print_list_job,
            id_print_list_area_in     => l_rec.id_print_list_area,
            print_arguments_in        => l_rec.print_arguments,
            id_workflow_in            => l_rec.id_workflow,
            id_status_in              => l_rec.id_status,
            dt_status_in              => l_rec.dt_status,
            id_prof_status_in         => l_rec.id_prof_status,
            id_patient_in             => l_rec.id_patient,
            id_episode_in             => l_rec.id_episode,
            id_prof_req_in            => l_rec.id_prof_req,
            id_inst_req_in            => l_rec.id_inst_req,
            dt_req_in                 => l_rec.dt_req,
            context_data_in           => l_rec.context_data,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN print_list_job_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN print_list_job_hist.id_print_list_job_hist%TYPE
    
     IS
        retval print_list_job_hist.id_print_list_job_hist%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_print_list_job_hist.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PRINT_LIST_JOB_HIST'));
    END next_key;

    PROCEDURE ins
    (
        id_print_list_job_in       IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_area_in      IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        print_arguments_in         IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        id_workflow_in             IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_status_in               IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        dt_status_in               IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        id_prof_status_in          IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_patient_in              IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_req_in             IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_inst_req_in             IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        dt_req_in                  IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        context_data_in            IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        create_user_in             IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        id_print_list_job_hist_out IN OUT print_list_job_hist.id_print_list_job_hist%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky print_list_job_hist.id_print_list_job_hist%TYPE := next_key;
    BEGIN
        ins(id_print_list_job_hist_in => l_pky,
            id_print_list_job_in      => id_print_list_job_in,
            id_print_list_area_in     => id_print_list_area_in,
            print_arguments_in        => print_arguments_in,
            id_workflow_in            => id_workflow_in,
            id_status_in              => id_status_in,
            dt_status_in              => dt_status_in,
            id_prof_status_in         => id_prof_status_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            id_prof_req_in            => id_prof_req_in,
            id_inst_req_in            => id_inst_req_in,
            dt_req_in                 => dt_req_in,
            context_data_in           => context_data_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        id_print_list_job_hist_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_print_list_job_in       IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_area_in      IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        print_arguments_in         IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        id_workflow_in             IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_status_in               IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        dt_status_in               IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        id_prof_status_in          IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_patient_in              IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_req_in             IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_inst_req_in             IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        dt_req_in                  IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        context_data_in            IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        create_user_in             IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        id_print_list_job_hist_out IN OUT print_list_job_hist.id_print_list_job_hist%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_print_list_job_in       => id_print_list_job_in,
            id_print_list_area_in      => id_print_list_area_in,
            print_arguments_in         => print_arguments_in,
            id_workflow_in             => id_workflow_in,
            id_status_in               => id_status_in,
            dt_status_in               => dt_status_in,
            id_prof_status_in          => id_prof_status_in,
            id_patient_in              => id_patient_in,
            id_episode_in              => id_episode_in,
            id_prof_req_in             => id_prof_req_in,
            id_inst_req_in             => id_inst_req_in,
            dt_req_in                  => dt_req_in,
            context_data_in            => context_data_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_print_list_job_hist_out => id_print_list_job_hist_out,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    FUNCTION ins
    (
        id_print_list_job_in  IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_area_in IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        print_arguments_in    IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        id_workflow_in        IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_status_in          IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        dt_status_in          IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        id_prof_status_in     IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_patient_in         IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_req_in        IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_inst_req_in        IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        dt_req_in             IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        context_data_in       IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        create_user_in        IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) RETURN print_list_job_hist.id_print_list_job_hist%TYPE IS
        l_pky print_list_job_hist.id_print_list_job_hist%TYPE := next_key;
    BEGIN
        ins(id_print_list_job_hist_in => l_pky,
            id_print_list_job_in      => id_print_list_job_in,
            id_print_list_area_in     => id_print_list_area_in,
            print_arguments_in        => print_arguments_in,
            id_workflow_in            => id_workflow_in,
            id_status_in              => id_status_in,
            dt_status_in              => dt_status_in,
            id_prof_status_in         => id_prof_status_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            id_prof_req_in            => id_prof_req_in,
            id_inst_req_in            => id_inst_req_in,
            dt_req_in                 => dt_req_in,
            context_data_in           => context_data_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_print_list_job_in  IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_area_in IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        print_arguments_in    IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        id_workflow_in        IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_status_in          IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        dt_status_in          IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        id_prof_status_in     IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_patient_in         IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_req_in        IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_inst_req_in        IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        dt_req_in             IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        context_data_in       IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        create_user_in        IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) RETURN print_list_job_hist.id_print_list_job_hist%TYPE IS
        l_pky    print_list_job_hist.id_print_list_job_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_print_list_job_hist_in => l_pky,
            id_print_list_job_in      => id_print_list_job_in,
            id_print_list_area_in     => id_print_list_area_in,
            print_arguments_in        => print_arguments_in,
            id_workflow_in            => id_workflow_in,
            id_status_in              => id_status_in,
            dt_status_in              => dt_status_in,
            id_prof_status_in         => id_prof_status_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            id_prof_req_in            => id_prof_req_in,
            id_inst_req_in            => id_inst_req_in,
            dt_req_in                 => dt_req_in,
            context_data_in           => context_data_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_print_list_job_in  IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_area_in IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        print_arguments_in    IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        id_workflow_in        IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_status_in          IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        dt_status_in          IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        id_prof_status_in     IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_patient_in         IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_req_in        IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_inst_req_in        IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        dt_req_in             IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        context_data_in       IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        create_user_in        IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky print_list_job_hist.id_print_list_job_hist%TYPE := next_key;
    BEGIN
        ins(id_print_list_job_hist_in => l_pky,
            id_print_list_job_in      => id_print_list_job_in,
            id_print_list_area_in     => id_print_list_area_in,
            print_arguments_in        => print_arguments_in,
            id_workflow_in            => id_workflow_in,
            id_status_in              => id_status_in,
            dt_status_in              => dt_status_in,
            id_prof_status_in         => id_prof_status_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            id_prof_req_in            => id_prof_req_in,
            id_inst_req_in            => id_inst_req_in,
            dt_req_in                 => dt_req_in,
            context_data_in           => context_data_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_print_list_job_in  IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_area_in IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        print_arguments_in    IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        id_workflow_in        IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_status_in          IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        dt_status_in          IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        id_prof_status_in     IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_patient_in         IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_req_in        IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_inst_req_in        IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        dt_req_in             IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        context_data_in       IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        create_user_in        IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        l_pky    print_list_job_hist.id_print_list_job_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_print_list_job_hist_in => l_pky,
            id_print_list_job_in      => id_print_list_job_in,
            id_print_list_area_in     => id_print_list_area_in,
            print_arguments_in        => print_arguments_in,
            id_workflow_in            => id_workflow_in,
            id_status_in              => id_status_in,
            dt_status_in              => dt_status_in,
            id_prof_status_in         => id_prof_status_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            id_prof_req_in            => id_prof_req_in,
            id_inst_req_in            => id_inst_req_in,
            dt_req_in                 => dt_req_in,
            context_data_in           => context_data_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN print_list_job_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO print_list_job_hist
                    (id_print_list_job_hist,
                     id_print_list_job,
                     id_print_list_area,
                     print_arguments,
                     id_workflow,
                     id_status,
                     dt_status,
                     id_prof_status,
                     id_patient,
                     id_episode,
                     id_prof_req,
                     id_inst_req,
                     dt_req,
                     context_data,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution)
                VALUES
                    (rows_in(indx).id_print_list_job_hist,
                     rows_in(indx).id_print_list_job,
                     rows_in(indx).id_print_list_area,
                     rows_in(indx).print_arguments,
                     rows_in(indx).id_workflow,
                     rows_in(indx).id_status,
                     rows_in(indx).dt_status,
                     rows_in(indx).id_prof_status,
                     rows_in(indx).id_patient,
                     rows_in(indx).id_episode,
                     rows_in(indx).id_prof_req,
                     rows_in(indx).id_inst_req,
                     rows_in(indx).dt_req,
                     rows_in(indx).context_data,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PRINT_LIST_JOB_HIST _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_print_list_job_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PRINT_LIST_JOB _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_print_list_job,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PRINT_LIST_AREA _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_print_list_area,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PRINT_ARGUMENTS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .print_arguments,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_WORKFLOW _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_workflow,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INST_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_inst_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PRINT_LIST_JOB_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN print_list_job_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_print_list_job_hist_in IN print_list_job_hist.id_print_list_job_hist%TYPE,
        id_print_list_job_in      IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_job_nin     IN BOOLEAN := TRUE,
        id_print_list_area_in     IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        id_print_list_area_nin    IN BOOLEAN := TRUE,
        print_arguments_in        IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        print_arguments_nin       IN BOOLEAN := TRUE,
        id_workflow_in            IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin           IN BOOLEAN := TRUE,
        id_status_in              IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        id_status_nin             IN BOOLEAN := TRUE,
        dt_status_in              IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        dt_status_nin             IN BOOLEAN := TRUE,
        id_prof_status_in         IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_prof_status_nin        IN BOOLEAN := TRUE,
        id_patient_in             IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_episode_in             IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_prof_req_in            IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin           IN BOOLEAN := TRUE,
        id_inst_req_in            IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        id_inst_req_nin           IN BOOLEAN := TRUE,
        dt_req_in                 IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        dt_req_nin                IN BOOLEAN := TRUE,
        context_data_in           IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        context_data_nin          IN BOOLEAN := TRUE,
        create_user_in            IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_print_list_job_n  NUMBER(1);
        l_id_print_list_area_n NUMBER(1);
        l_print_arguments_n    NUMBER(1);
        l_id_workflow_n        NUMBER(1);
        l_id_status_n          NUMBER(1);
        l_dt_status_n          NUMBER(1);
        l_id_prof_status_n     NUMBER(1);
        l_id_patient_n         NUMBER(1);
        l_id_episode_n         NUMBER(1);
        l_id_prof_req_n        NUMBER(1);
        l_id_inst_req_n        NUMBER(1);
        l_dt_req_n             NUMBER(1);
        l_context_data_n       NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
    BEGIN
    
        l_id_print_list_job_n  := sys.diutil.bool_to_int(id_print_list_job_nin);
        l_id_print_list_area_n := sys.diutil.bool_to_int(id_print_list_area_nin);
        l_print_arguments_n    := sys.diutil.bool_to_int(print_arguments_nin);
        l_id_workflow_n        := sys.diutil.bool_to_int(id_workflow_nin);
        l_id_status_n          := sys.diutil.bool_to_int(id_status_nin);
        l_dt_status_n          := sys.diutil.bool_to_int(dt_status_nin);
        l_id_prof_status_n     := sys.diutil.bool_to_int(id_prof_status_nin);
        l_id_patient_n         := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_id_prof_req_n        := sys.diutil.bool_to_int(id_prof_req_nin);
        l_id_inst_req_n        := sys.diutil.bool_to_int(id_inst_req_nin);
        l_dt_req_n             := sys.diutil.bool_to_int(dt_req_nin);
        l_context_data_n       := sys.diutil.bool_to_int(context_data_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE print_list_job_hist
           SET id_print_list_job  = decode(l_id_print_list_job_n,
                                           0,
                                           id_print_list_job_in,
                                           nvl(id_print_list_job_in, id_print_list_job)),
               id_print_list_area = decode(l_id_print_list_area_n,
                                           0,
                                           id_print_list_area_in,
                                           nvl(id_print_list_area_in, id_print_list_area)),
               print_arguments    = decode(l_print_arguments_n,
                                           0,
                                           print_arguments_in,
                                           nvl(print_arguments_in, print_arguments)),
               id_workflow        = decode(l_id_workflow_n, 0, id_workflow_in, nvl(id_workflow_in, id_workflow)),
               id_status          = decode(l_id_status_n, 0, id_status_in, nvl(id_status_in, id_status)),
               dt_status          = decode(l_dt_status_n, 0, dt_status_in, nvl(dt_status_in, dt_status)),
               id_prof_status     = decode(l_id_prof_status_n,
                                           0,
                                           id_prof_status_in,
                                           nvl(id_prof_status_in, id_prof_status)),
               id_patient         = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_episode         = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_prof_req        = decode(l_id_prof_req_n, 0, id_prof_req_in, nvl(id_prof_req_in, id_prof_req)),
               id_inst_req        = decode(l_id_inst_req_n, 0, id_inst_req_in, nvl(id_inst_req_in, id_inst_req)),
               dt_req             = decode(l_dt_req_n, 0, dt_req_in, nvl(dt_req_in, dt_req)),
               context_data       = decode(l_context_data_n, 0, context_data_in, nvl(context_data_in, context_data)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution))
         WHERE id_print_list_job_hist = id_print_list_job_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PRINT_LIST_JOB_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_print_list_job_hist_in IN print_list_job_hist.id_print_list_job_hist%TYPE,
        id_print_list_job_in      IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_job_nin     IN BOOLEAN := TRUE,
        id_print_list_area_in     IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        id_print_list_area_nin    IN BOOLEAN := TRUE,
        print_arguments_in        IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        print_arguments_nin       IN BOOLEAN := TRUE,
        id_workflow_in            IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin           IN BOOLEAN := TRUE,
        id_status_in              IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        id_status_nin             IN BOOLEAN := TRUE,
        dt_status_in              IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        dt_status_nin             IN BOOLEAN := TRUE,
        id_prof_status_in         IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_prof_status_nin        IN BOOLEAN := TRUE,
        id_patient_in             IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_episode_in             IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_prof_req_in            IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin           IN BOOLEAN := TRUE,
        id_inst_req_in            IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        id_inst_req_nin           IN BOOLEAN := TRUE,
        dt_req_in                 IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        dt_req_nin                IN BOOLEAN := TRUE,
        context_data_in           IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        context_data_nin          IN BOOLEAN := TRUE,
        create_user_in            IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_print_list_job_hist_in => id_print_list_job_hist_in,
            id_print_list_job_in      => id_print_list_job_in,
            id_print_list_job_nin     => id_print_list_job_nin,
            id_print_list_area_in     => id_print_list_area_in,
            id_print_list_area_nin    => id_print_list_area_nin,
            print_arguments_in        => print_arguments_in,
            print_arguments_nin       => print_arguments_nin,
            id_workflow_in            => id_workflow_in,
            id_workflow_nin           => id_workflow_nin,
            id_status_in              => id_status_in,
            id_status_nin             => id_status_nin,
            dt_status_in              => dt_status_in,
            dt_status_nin             => dt_status_nin,
            id_prof_status_in         => id_prof_status_in,
            id_prof_status_nin        => id_prof_status_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            id_prof_req_in            => id_prof_req_in,
            id_prof_req_nin           => id_prof_req_nin,
            id_inst_req_in            => id_inst_req_in,
            id_inst_req_nin           => id_inst_req_nin,
            dt_req_in                 => dt_req_in,
            dt_req_nin                => dt_req_nin,
            context_data_in           => context_data_in,
            context_data_nin          => context_data_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_print_list_job_in   IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_job_nin  IN BOOLEAN := TRUE,
        id_print_list_area_in  IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        id_print_list_area_nin IN BOOLEAN := TRUE,
        print_arguments_in     IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        print_arguments_nin    IN BOOLEAN := TRUE,
        id_workflow_in         IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin        IN BOOLEAN := TRUE,
        id_status_in           IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        id_status_nin          IN BOOLEAN := TRUE,
        dt_status_in           IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        dt_status_nin          IN BOOLEAN := TRUE,
        id_prof_status_in      IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_prof_status_nin     IN BOOLEAN := TRUE,
        id_patient_in          IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_episode_in          IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_prof_req_in         IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin        IN BOOLEAN := TRUE,
        id_inst_req_in         IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        id_inst_req_nin        IN BOOLEAN := TRUE,
        dt_req_in              IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        dt_req_nin             IN BOOLEAN := TRUE,
        context_data_in        IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        context_data_nin       IN BOOLEAN := TRUE,
        create_user_in         IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_print_list_job_n     NUMBER(1);
        l_id_print_list_area_n    NUMBER(1);
        l_print_arguments_n       NUMBER(1);
        l_id_workflow_n           NUMBER(1);
        l_id_status_n             NUMBER(1);
        l_dt_status_n             NUMBER(1);
        l_id_prof_status_n        NUMBER(1);
        l_id_patient_n            NUMBER(1);
        l_id_episode_n            NUMBER(1);
        l_id_prof_req_n           NUMBER(1);
        l_id_inst_req_n           NUMBER(1);
        l_dt_req_n                NUMBER(1);
        l_context_data_n          NUMBER(1);
        l_create_user_n           NUMBER(1);
        l_create_time_n           NUMBER(1);
        l_create_institution_n    NUMBER(1);
        l_update_user_n           NUMBER(1);
        l_update_time_n           NUMBER(1);
        l_update_institution_n    NUMBER(1);
        id_print_list_job_hist_in print_list_job_hist.id_print_list_job_hist%TYPE;
    BEGIN
    
        l_id_print_list_job_n  := sys.diutil.bool_to_int(id_print_list_job_nin);
        l_id_print_list_area_n := sys.diutil.bool_to_int(id_print_list_area_nin);
        l_print_arguments_n    := sys.diutil.bool_to_int(print_arguments_nin);
        l_id_workflow_n        := sys.diutil.bool_to_int(id_workflow_nin);
        l_id_status_n          := sys.diutil.bool_to_int(id_status_nin);
        l_dt_status_n          := sys.diutil.bool_to_int(dt_status_nin);
        l_id_prof_status_n     := sys.diutil.bool_to_int(id_prof_status_nin);
        l_id_patient_n         := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_id_prof_req_n        := sys.diutil.bool_to_int(id_prof_req_nin);
        l_id_inst_req_n        := sys.diutil.bool_to_int(id_inst_req_nin);
        l_dt_req_n             := sys.diutil.bool_to_int(dt_req_nin);
        l_context_data_n       := sys.diutil.bool_to_int(context_data_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE PRINT_LIST_JOB_HIST SET ' || ' ID_PRINT_LIST_JOB = decode (' || l_id_print_list_job_n ||
                 ',0,:id_print_list_job_in, NVL (:id_print_list_job_in, ID_PRINT_LIST_JOB)) ' || ',' ||
                 ' ID_PRINT_LIST_AREA = decode (' || l_id_print_list_area_n ||
                 ',0,:id_print_list_area_in, NVL (:id_print_list_area_in, ID_PRINT_LIST_AREA)) ' || ',' ||
                 ' PRINT_ARGUMENTS = decode (' || l_print_arguments_n ||
                 ',0,:print_arguments_in, NVL (:print_arguments_in, PRINT_ARGUMENTS)) ' || ',' ||
                 ' ID_WORKFLOW = decode (' || l_id_workflow_n ||
                 ',0,:id_workflow_in, NVL (:id_workflow_in, ID_WORKFLOW)) ' || ',' || ' ID_STATUS = decode (' ||
                 l_id_status_n || ',0,:id_status_in, NVL (:id_status_in, ID_STATUS)) ' || ',' ||
                 ' DT_STATUS = decode (' || l_dt_status_n || ',0,:dt_status_in, NVL (:dt_status_in, DT_STATUS)) ' || ',' ||
                 ' ID_PROF_STATUS = decode (' || l_id_prof_status_n ||
                 ',0,:id_prof_status_in, NVL (:id_prof_status_in, ID_PROF_STATUS)) ' || ',' || ' ID_PATIENT = decode (' ||
                 l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_PROF_REQ = decode (' || l_id_prof_req_n ||
                 ',0,:id_prof_req_in, NVL (:id_prof_req_in, ID_PROF_REQ)) ' || ',' || ' ID_INST_REQ = decode (' ||
                 l_id_inst_req_n || ',0,:id_inst_req_in, NVL (:id_inst_req_in, ID_INST_REQ)) ' || ',' ||
                 ' DT_REQ = decode (' || l_dt_req_n || ',0,:dt_req_in, NVL (:dt_req_in, DT_REQ)) ' || ',' ||
                 ' CONTEXT_DATA = decode (' || l_context_data_n ||
                 ',0,:context_data_in, NVL (:context_data_in, CONTEXT_DATA)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_print_list_job_in, id_print_list_area_in, print_arguments_in, id_workflow_in, id_status_in, dt_status_in, id_prof_status_in, id_patient_in, id_episode_in, id_prof_req_in, id_inst_req_in, dt_req_in, context_data_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PRINT_LIST_JOB_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_print_list_job_in   IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_job_nin  IN BOOLEAN := TRUE,
        id_print_list_area_in  IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        id_print_list_area_nin IN BOOLEAN := TRUE,
        print_arguments_in     IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        print_arguments_nin    IN BOOLEAN := TRUE,
        id_workflow_in         IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin        IN BOOLEAN := TRUE,
        id_status_in           IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        id_status_nin          IN BOOLEAN := TRUE,
        dt_status_in           IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        dt_status_nin          IN BOOLEAN := TRUE,
        id_prof_status_in      IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_prof_status_nin     IN BOOLEAN := TRUE,
        id_patient_in          IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_episode_in          IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_prof_req_in         IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin        IN BOOLEAN := TRUE,
        id_inst_req_in         IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        id_inst_req_nin        IN BOOLEAN := TRUE,
        dt_req_in              IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        dt_req_nin             IN BOOLEAN := TRUE,
        context_data_in        IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        context_data_nin       IN BOOLEAN := TRUE,
        create_user_in         IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_print_list_job_in   => id_print_list_job_in,
            id_print_list_job_nin  => id_print_list_job_nin,
            id_print_list_area_in  => id_print_list_area_in,
            id_print_list_area_nin => id_print_list_area_nin,
            print_arguments_in     => print_arguments_in,
            print_arguments_nin    => print_arguments_nin,
            id_workflow_in         => id_workflow_in,
            id_workflow_nin        => id_workflow_nin,
            id_status_in           => id_status_in,
            id_status_nin          => id_status_nin,
            dt_status_in           => dt_status_in,
            dt_status_nin          => dt_status_nin,
            id_prof_status_in      => id_prof_status_in,
            id_prof_status_nin     => id_prof_status_nin,
            id_patient_in          => id_patient_in,
            id_patient_nin         => id_patient_nin,
            id_episode_in          => id_episode_in,
            id_episode_nin         => id_episode_nin,
            id_prof_req_in         => id_prof_req_in,
            id_prof_req_nin        => id_prof_req_nin,
            id_inst_req_in         => id_inst_req_in,
            id_inst_req_nin        => id_inst_req_nin,
            dt_req_in              => dt_req_in,
            dt_req_nin             => dt_req_nin,
            context_data_in        => context_data_in,
            context_data_nin       => context_data_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN print_list_job_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_print_list_job_hist_in => rec_in.id_print_list_job_hist,
            id_print_list_job_in      => rec_in.id_print_list_job,
            id_print_list_area_in     => rec_in.id_print_list_area,
            print_arguments_in        => rec_in.print_arguments,
            id_workflow_in            => rec_in.id_workflow,
            id_status_in              => rec_in.id_status,
            dt_status_in              => rec_in.dt_status,
            id_prof_status_in         => rec_in.id_prof_status,
            id_patient_in             => rec_in.id_patient,
            id_episode_in             => rec_in.id_episode,
            id_prof_req_in            => rec_in.id_prof_req,
            id_inst_req_in            => rec_in.id_inst_req,
            dt_req_in                 => rec_in.dt_req,
            context_data_in           => rec_in.context_data,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN print_list_job_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_print_list_job_hist_in => rec_in.id_print_list_job_hist,
            id_print_list_job_in      => rec_in.id_print_list_job,
            id_print_list_area_in     => rec_in.id_print_list_area,
            print_arguments_in        => rec_in.print_arguments,
            id_workflow_in            => rec_in.id_workflow,
            id_status_in              => rec_in.id_status,
            dt_status_in              => rec_in.dt_status,
            id_prof_status_in         => rec_in.id_prof_status,
            id_patient_in             => rec_in.id_patient,
            id_episode_in             => rec_in.id_episode,
            id_prof_req_in            => rec_in.id_prof_req,
            id_inst_req_in            => rec_in.id_inst_req,
            dt_req_in                 => rec_in.dt_req,
            context_data_in           => rec_in.context_data,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_print_list_job_hist_in IN print_list_job_hist.id_print_list_job_hist%TYPE,
        id_print_list_job_in      IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_area_in     IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        print_arguments_in        IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        id_workflow_in            IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_status_in              IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        dt_status_in              IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        id_prof_status_in         IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_patient_in             IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_req_in            IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_inst_req_in            IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        dt_req_in                 IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        context_data_in           IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        create_user_in            IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        upd(id_print_list_job_hist_in => id_print_list_job_hist_in,
            id_print_list_job_in      => id_print_list_job_in,
            id_print_list_area_in     => id_print_list_area_in,
            print_arguments_in        => print_arguments_in,
            id_workflow_in            => id_workflow_in,
            id_status_in              => id_status_in,
            dt_status_in              => dt_status_in,
            id_prof_status_in         => id_prof_status_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            id_prof_req_in            => id_prof_req_in,
            id_inst_req_in            => id_inst_req_in,
            dt_req_in                 => dt_req_in,
            context_data_in           => context_data_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_print_list_job_hist_in => id_print_list_job_hist_in,
                id_print_list_job_in      => id_print_list_job_in,
                id_print_list_area_in     => id_print_list_area_in,
                print_arguments_in        => print_arguments_in,
                id_workflow_in            => id_workflow_in,
                id_status_in              => id_status_in,
                dt_status_in              => dt_status_in,
                id_prof_status_in         => id_prof_status_in,
                id_patient_in             => id_patient_in,
                id_episode_in             => id_episode_in,
                id_prof_req_in            => id_prof_req_in,
                id_inst_req_in            => id_inst_req_in,
                dt_req_in                 => dt_req_in,
                context_data_in           => context_data_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_print_list_job_hist_in IN print_list_job_hist.id_print_list_job_hist%TYPE,
        id_print_list_job_in      IN print_list_job_hist.id_print_list_job%TYPE DEFAULT NULL,
        id_print_list_area_in     IN print_list_job_hist.id_print_list_area%TYPE DEFAULT NULL,
        print_arguments_in        IN print_list_job_hist.print_arguments%TYPE DEFAULT NULL,
        id_workflow_in            IN print_list_job_hist.id_workflow%TYPE DEFAULT NULL,
        id_status_in              IN print_list_job_hist.id_status%TYPE DEFAULT NULL,
        dt_status_in              IN print_list_job_hist.dt_status%TYPE DEFAULT NULL,
        id_prof_status_in         IN print_list_job_hist.id_prof_status%TYPE DEFAULT NULL,
        id_patient_in             IN print_list_job_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN print_list_job_hist.id_episode%TYPE DEFAULT NULL,
        id_prof_req_in            IN print_list_job_hist.id_prof_req%TYPE DEFAULT NULL,
        id_inst_req_in            IN print_list_job_hist.id_inst_req%TYPE DEFAULT NULL,
        dt_req_in                 IN print_list_job_hist.dt_req%TYPE DEFAULT NULL,
        context_data_in           IN print_list_job_hist.context_data%TYPE DEFAULT NULL,
        create_user_in            IN print_list_job_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN print_list_job_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN print_list_job_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN print_list_job_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN print_list_job_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN print_list_job_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_print_list_job_hist_in,
                id_print_list_job_in,
                id_print_list_area_in,
                print_arguments_in,
                id_workflow_in,
                id_status_in,
                dt_status_in,
                id_prof_status_in,
                id_patient_in,
                id_episode_in,
                id_prof_req_in,
                id_inst_req_in,
                dt_req_in,
                context_data_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN print_list_job_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_print_list_job_hist id_print_list_job_hist_cc;
        l_id_print_list_job      id_print_list_job_cc;
        l_id_print_list_area     id_print_list_area_cc;
        l_print_arguments        print_arguments_cc;
        l_id_workflow            id_workflow_cc;
        l_id_status              id_status_cc;
        l_dt_status              dt_status_cc;
        l_id_prof_status         id_prof_status_cc;
        l_id_patient             id_patient_cc;
        l_id_episode             id_episode_cc;
        l_id_prof_req            id_prof_req_cc;
        l_id_inst_req            id_inst_req_cc;
        l_dt_req                 dt_req_cc;
        l_context_data           context_data_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_print_list_job_hist(i) := col_in(i).id_print_list_job_hist;
            l_id_print_list_job(i) := col_in(i).id_print_list_job;
            l_id_print_list_area(i) := col_in(i).id_print_list_area;
            l_print_arguments(i) := col_in(i).print_arguments;
            l_id_workflow(i) := col_in(i).id_workflow;
            l_id_status(i) := col_in(i).id_status;
            l_dt_status(i) := col_in(i).dt_status;
            l_id_prof_status(i) := col_in(i).id_prof_status;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_prof_req(i) := col_in(i).id_prof_req;
            l_id_inst_req(i) := col_in(i).id_inst_req;
            l_dt_req(i) := col_in(i).dt_req;
            l_context_data(i) := col_in(i).context_data;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE print_list_job_hist
                   SET id_print_list_job  = nvl(l_id_print_list_job(i), id_print_list_job),
                       id_print_list_area = nvl(l_id_print_list_area(i), id_print_list_area),
                       print_arguments    = nvl(l_print_arguments(i), print_arguments),
                       id_workflow        = nvl(l_id_workflow(i), id_workflow),
                       id_status          = nvl(l_id_status(i), id_status),
                       dt_status          = nvl(l_dt_status(i), dt_status),
                       id_prof_status     = nvl(l_id_prof_status(i), id_prof_status),
                       id_patient         = nvl(l_id_patient(i), id_patient),
                       id_episode         = nvl(l_id_episode(i), id_episode),
                       id_prof_req        = nvl(l_id_prof_req(i), id_prof_req),
                       id_inst_req        = nvl(l_id_inst_req(i), id_inst_req),
                       dt_req             = nvl(l_dt_req(i), dt_req),
                       context_data       = nvl(l_context_data(i), context_data),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution)
                 WHERE id_print_list_job_hist = l_id_print_list_job_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE print_list_job_hist
                   SET id_print_list_job  = l_id_print_list_job(i),
                       id_print_list_area = l_id_print_list_area(i),
                       print_arguments    = l_print_arguments(i),
                       id_workflow        = l_id_workflow(i),
                       id_status          = l_id_status(i),
                       dt_status          = l_dt_status(i),
                       id_prof_status     = l_id_prof_status(i),
                       id_patient         = l_id_patient(i),
                       id_episode         = l_id_episode(i),
                       id_prof_req        = l_id_prof_req(i),
                       id_inst_req        = l_id_inst_req(i),
                       dt_req             = l_dt_req(i),
                       context_data       = l_context_data(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i)
                 WHERE id_print_list_job_hist = l_id_print_list_job_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN print_list_job_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PRINT_LIST_JOB_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PRINT_LIST_JOB_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PRINT_LIST_JOB_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PRINT_LIST_JOB_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_print_list_job_hist_in IN print_list_job_hist.id_print_list_job_hist%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM print_list_job_hist
         WHERE id_print_list_job_hist = id_print_list_job_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_print_list_job_hist_in IN print_list_job_hist.id_print_list_job_hist%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_print_list_job_hist_in => id_print_list_job_hist_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PRINT_LIST_JOB_HIST
    PROCEDURE del_id_print_list_job_hist
    (
        id_print_list_job_hist_in IN print_list_job_hist.id_print_list_job_hist%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM print_list_job_hist
         WHERE id_print_list_job_hist = id_print_list_job_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_print_list_job_hist;

    -- Delete all rows for primary key column ID_PRINT_LIST_JOB_HIST
    PROCEDURE del_id_print_list_job_hist
    (
        id_print_list_job_hist_in IN print_list_job_hist.id_print_list_job_hist%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_print_list_job_hist(id_print_list_job_hist_in => id_print_list_job_hist_in,
                                   handle_error_in           => handle_error_in,
                                   rows_out                  => rows_out);
    END del_id_print_list_job_hist;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PRINT_LIST_JOB_HIST';
        ELSE
            RETURN 'DELETE FROM PRINT_LIST_JOB_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRINT_LIST_JOB_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRINT_LIST_JOB_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(print_list_job_hist_inout IN OUT print_list_job_hist%ROWTYPE) IS
    BEGIN
        print_list_job_hist_inout.id_print_list_job_hist := NULL;
        print_list_job_hist_inout.id_print_list_job      := NULL;
        print_list_job_hist_inout.id_print_list_area     := NULL;
        print_list_job_hist_inout.print_arguments        := NULL;
        print_list_job_hist_inout.id_workflow            := NULL;
        print_list_job_hist_inout.id_status              := NULL;
        print_list_job_hist_inout.dt_status              := NULL;
        print_list_job_hist_inout.id_prof_status         := NULL;
        print_list_job_hist_inout.id_patient             := NULL;
        print_list_job_hist_inout.id_episode             := NULL;
        print_list_job_hist_inout.id_prof_req            := NULL;
        print_list_job_hist_inout.id_inst_req            := NULL;
        print_list_job_hist_inout.dt_req                 := NULL;
        print_list_job_hist_inout.context_data           := NULL;
        print_list_job_hist_inout.create_user            := NULL;
        print_list_job_hist_inout.create_time            := NULL;
        print_list_job_hist_inout.create_institution     := NULL;
        print_list_job_hist_inout.update_user            := NULL;
        print_list_job_hist_inout.update_time            := NULL;
        print_list_job_hist_inout.update_institution     := NULL;
    END initrec;

    FUNCTION initrec RETURN print_list_job_hist%ROWTYPE IS
        l_print_list_job_hist print_list_job_hist%ROWTYPE;
    BEGIN
        RETURN l_print_list_job_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN print_list_job_hist_tc IS
        data print_list_job_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM print_list_job_hist
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN print_list_job_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data print_list_job_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_print_list_job_hist;
/
