/*-- Last Change Revision: $Rev: 2028256 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:42 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_management_follow_up
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2020-03-09 08:03:58
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN management_follow_up.id_management_follow_up%TYPE IS
        retval management_follow_up.id_management_follow_up%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_management_follow_up.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in            IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in     IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        time_spent_in            IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        flg_status_in            IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        id_unit_time_in          IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        dt_register_in           IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        notes_in                 IN management_follow_up.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in          IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in             IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        create_user_in           IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in           IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in           IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        id_professional_in       IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        dt_start_in              IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_next_encounter_in     IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        flg_end_followup_in      IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        id_opinion_type_in       IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        dt_next_enc_precision_in IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        id_opinion_in            IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky management_follow_up.id_management_follow_up%TYPE := next_key;
    BEGIN
        ins(id_management_follow_up_in => l_pky,
            id_episode_in              => id_episode_in,
            id_epis_encounter_in       => id_epis_encounter_in,
            time_spent_in              => time_spent_in,
            flg_status_in              => flg_status_in,
            id_unit_time_in            => id_unit_time_in,
            dt_register_in             => dt_register_in,
            notes_in                   => notes_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            id_parent_in               => id_parent_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_professional_in         => id_professional_in,
            dt_start_in                => dt_start_in,
            dt_next_encounter_in       => dt_next_encounter_in,
            flg_end_followup_in        => flg_end_followup_in,
            id_opinion_type_in         => id_opinion_type_in,
            dt_next_enc_precision_in   => dt_next_enc_precision_in,
            id_opinion_in              => id_opinion_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in            IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in     IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        time_spent_in            IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        flg_status_in            IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        id_unit_time_in          IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        dt_register_in           IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        notes_in                 IN management_follow_up.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in          IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in             IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        create_user_in           IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in           IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in           IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        id_professional_in       IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        dt_start_in              IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_next_encounter_in     IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        flg_end_followup_in      IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        id_opinion_type_in       IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        dt_next_enc_precision_in IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        id_opinion_in            IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in            => id_episode_in,
            id_epis_encounter_in     => id_epis_encounter_in,
            time_spent_in            => time_spent_in,
            flg_status_in            => flg_status_in,
            id_unit_time_in          => id_unit_time_in,
            dt_register_in           => dt_register_in,
            notes_in                 => notes_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            notes_cancel_in          => notes_cancel_in,
            id_parent_in             => id_parent_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_professional_in       => id_professional_in,
            dt_start_in              => dt_start_in,
            dt_next_encounter_in     => dt_next_encounter_in,
            flg_end_followup_in      => flg_end_followup_in,
            id_opinion_type_in       => id_opinion_type_in,
            dt_next_enc_precision_in => dt_next_enc_precision_in,
            id_opinion_in            => id_opinion_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in               IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in        IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        time_spent_in               IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        flg_status_in               IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        id_unit_time_in             IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        dt_register_in              IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        notes_in                    IN management_follow_up.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in         IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in             IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in                IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        create_user_in              IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in              IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in              IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        id_professional_in          IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        dt_start_in                 IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_next_encounter_in        IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        flg_end_followup_in         IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        id_opinion_type_in          IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        dt_next_enc_precision_in    IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        id_opinion_in               IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        id_management_follow_up_out IN OUT management_follow_up.id_management_follow_up%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky management_follow_up.id_management_follow_up%TYPE := next_key;
    BEGIN
        ins(id_management_follow_up_in => l_pky,
            id_episode_in              => id_episode_in,
            id_epis_encounter_in       => id_epis_encounter_in,
            time_spent_in              => time_spent_in,
            flg_status_in              => flg_status_in,
            id_unit_time_in            => id_unit_time_in,
            dt_register_in             => dt_register_in,
            notes_in                   => notes_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            id_parent_in               => id_parent_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_professional_in         => id_professional_in,
            dt_start_in                => dt_start_in,
            dt_next_encounter_in       => dt_next_encounter_in,
            flg_end_followup_in        => flg_end_followup_in,
            id_opinion_type_in         => id_opinion_type_in,
            dt_next_enc_precision_in   => dt_next_enc_precision_in,
            id_opinion_in              => id_opinion_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        id_management_follow_up_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in               IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in        IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        time_spent_in               IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        flg_status_in               IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        id_unit_time_in             IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        dt_register_in              IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        notes_in                    IN management_follow_up.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in         IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in             IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in                IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        create_user_in              IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in              IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in              IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        id_professional_in          IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        dt_start_in                 IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_next_encounter_in        IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        flg_end_followup_in         IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        id_opinion_type_in          IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        dt_next_enc_precision_in    IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        id_opinion_in               IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        id_management_follow_up_out IN OUT management_follow_up.id_management_follow_up%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in               => id_episode_in,
            id_epis_encounter_in        => id_epis_encounter_in,
            time_spent_in               => time_spent_in,
            flg_status_in               => flg_status_in,
            id_unit_time_in             => id_unit_time_in,
            dt_register_in              => dt_register_in,
            notes_in                    => notes_in,
            id_cancel_reason_in         => id_cancel_reason_in,
            notes_cancel_in             => notes_cancel_in,
            id_parent_in                => id_parent_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_professional_in          => id_professional_in,
            dt_start_in                 => dt_start_in,
            dt_next_encounter_in        => dt_next_encounter_in,
            flg_end_followup_in         => flg_end_followup_in,
            id_opinion_type_in          => id_opinion_type_in,
            dt_next_enc_precision_in    => dt_next_enc_precision_in,
            id_opinion_in               => id_opinion_in,
            id_management_follow_up_out => id_management_follow_up_out,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in            IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in     IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        time_spent_in            IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        flg_status_in            IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        id_unit_time_in          IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        dt_register_in           IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        notes_in                 IN management_follow_up.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in          IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in             IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        create_user_in           IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in           IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in           IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        id_professional_in       IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        dt_start_in              IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_next_encounter_in     IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        flg_end_followup_in      IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        id_opinion_type_in       IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        dt_next_enc_precision_in IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        id_opinion_in            IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN management_follow_up.id_management_follow_up%TYPE IS
        l_pky management_follow_up.id_management_follow_up%TYPE := next_key;
    BEGIN
        ins(id_management_follow_up_in => l_pky,
            id_episode_in              => id_episode_in,
            id_epis_encounter_in       => id_epis_encounter_in,
            time_spent_in              => time_spent_in,
            flg_status_in              => flg_status_in,
            id_unit_time_in            => id_unit_time_in,
            dt_register_in             => dt_register_in,
            notes_in                   => notes_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            id_parent_in               => id_parent_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_professional_in         => id_professional_in,
            dt_start_in                => dt_start_in,
            dt_next_encounter_in       => dt_next_encounter_in,
            flg_end_followup_in        => flg_end_followup_in,
            id_opinion_type_in         => id_opinion_type_in,
            dt_next_enc_precision_in   => dt_next_enc_precision_in,
            id_opinion_in              => id_opinion_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in            IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in     IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        time_spent_in            IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        flg_status_in            IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        id_unit_time_in          IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        dt_register_in           IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        notes_in                 IN management_follow_up.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in          IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in             IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        create_user_in           IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in           IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in           IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        id_professional_in       IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        dt_start_in              IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_next_encounter_in     IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        flg_end_followup_in      IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        id_opinion_type_in       IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        dt_next_enc_precision_in IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        id_opinion_in            IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN management_follow_up.id_management_follow_up%TYPE IS
        l_pky    management_follow_up.id_management_follow_up%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_management_follow_up_in => l_pky,
            id_episode_in              => id_episode_in,
            id_epis_encounter_in       => id_epis_encounter_in,
            time_spent_in              => time_spent_in,
            flg_status_in              => flg_status_in,
            id_unit_time_in            => id_unit_time_in,
            dt_register_in             => dt_register_in,
            notes_in                   => notes_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            id_parent_in               => id_parent_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_professional_in         => id_professional_in,
            dt_start_in                => dt_start_in,
            dt_next_encounter_in       => dt_next_encounter_in,
            flg_end_followup_in        => flg_end_followup_in,
            id_opinion_type_in         => id_opinion_type_in,
            dt_next_enc_precision_in   => dt_next_enc_precision_in,
            id_opinion_in              => id_opinion_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_management_follow_up_in IN management_follow_up.id_management_follow_up%TYPE,
        id_episode_in              IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in       IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        time_spent_in              IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        flg_status_in              IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        id_unit_time_in            IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        dt_register_in             IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        notes_in                   IN management_follow_up.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in               IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        create_user_in             IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in             IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in             IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        id_professional_in         IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        dt_start_in                IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_next_encounter_in       IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        flg_end_followup_in        IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        id_opinion_type_in         IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        dt_next_enc_precision_in   IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        id_opinion_in              IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO management_follow_up
            (id_management_follow_up,
             id_episode,
             id_epis_encounter,
             time_spent,
             flg_status,
             id_unit_time,
             dt_register,
             notes,
             id_cancel_reason,
             notes_cancel,
             id_parent,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_professional,
             dt_start,
             dt_next_encounter,
             flg_end_followup,
             id_opinion_type,
             dt_next_enc_precision,
             id_opinion)
        VALUES
            (id_management_follow_up_in,
             id_episode_in,
             id_epis_encounter_in,
             time_spent_in,
             flg_status_in,
             id_unit_time_in,
             dt_register_in,
             notes_in,
             id_cancel_reason_in,
             notes_cancel_in,
             id_parent_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_professional_in,
             dt_start_in,
             dt_next_encounter_in,
             flg_end_followup_in,
             id_opinion_type_in,
             dt_next_enc_precision_in,
             id_opinion_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_management_follow_up_in IN management_follow_up.id_management_follow_up%TYPE,
        id_episode_in              IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in       IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        time_spent_in              IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        flg_status_in              IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        id_unit_time_in            IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        dt_register_in             IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        notes_in                   IN management_follow_up.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in               IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        create_user_in             IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in             IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in             IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        id_professional_in         IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        dt_start_in                IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_next_encounter_in       IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        flg_end_followup_in        IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        id_opinion_type_in         IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        dt_next_enc_precision_in   IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        id_opinion_in              IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_management_follow_up_in => id_management_follow_up_in,
            id_episode_in              => id_episode_in,
            id_epis_encounter_in       => id_epis_encounter_in,
            time_spent_in              => time_spent_in,
            flg_status_in              => flg_status_in,
            id_unit_time_in            => id_unit_time_in,
            dt_register_in             => dt_register_in,
            notes_in                   => notes_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            id_parent_in               => id_parent_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_professional_in         => id_professional_in,
            dt_start_in                => dt_start_in,
            dt_next_encounter_in       => dt_next_encounter_in,
            flg_end_followup_in        => flg_end_followup_in,
            id_opinion_type_in         => id_opinion_type_in,
            dt_next_enc_precision_in   => dt_next_enc_precision_in,
            id_opinion_in              => id_opinion_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN management_follow_up%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec management_follow_up%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_management_follow_up := next_key(sequence_in);
        END IF;
    
        ins(id_management_follow_up_in => l_rec.id_management_follow_up,
            id_episode_in              => l_rec.id_episode,
            id_epis_encounter_in       => l_rec.id_epis_encounter,
            time_spent_in              => l_rec.time_spent,
            flg_status_in              => l_rec.flg_status,
            id_unit_time_in            => l_rec.id_unit_time,
            dt_register_in             => l_rec.dt_register,
            notes_in                   => l_rec.notes,
            id_cancel_reason_in        => l_rec.id_cancel_reason,
            notes_cancel_in            => l_rec.notes_cancel,
            id_parent_in               => l_rec.id_parent,
            create_user_in             => l_rec.create_user,
            create_time_in             => l_rec.create_time,
            create_institution_in      => l_rec.create_institution,
            update_user_in             => l_rec.update_user,
            update_time_in             => l_rec.update_time,
            update_institution_in      => l_rec.update_institution,
            id_professional_in         => l_rec.id_professional,
            dt_start_in                => l_rec.dt_start,
            dt_next_encounter_in       => l_rec.dt_next_encounter,
            flg_end_followup_in        => l_rec.flg_end_followup,
            id_opinion_type_in         => l_rec.id_opinion_type,
            dt_next_enc_precision_in   => l_rec.dt_next_enc_precision,
            id_opinion_in              => l_rec.id_opinion,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN management_follow_up%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN management_follow_up_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO management_follow_up
                    (id_management_follow_up,
                     id_episode,
                     id_epis_encounter,
                     time_spent,
                     flg_status,
                     id_unit_time,
                     dt_register,
                     notes,
                     id_cancel_reason,
                     notes_cancel,
                     id_parent,
                     id_professional,
                     dt_start,
                     dt_next_encounter,
                     flg_end_followup,
                     id_opinion_type,
                     dt_next_enc_precision,
                     id_opinion)
                VALUES
                    (rows_in(indx).id_management_follow_up,
                     rows_in(indx).id_episode,
                     rows_in(indx).id_epis_encounter,
                     rows_in(indx).time_spent,
                     rows_in(indx).flg_status,
                     rows_in(indx).id_unit_time,
                     rows_in(indx).dt_register,
                     rows_in(indx).notes,
                     rows_in(indx).id_cancel_reason,
                     rows_in(indx).notes_cancel,
                     rows_in(indx).id_parent,
                     rows_in(indx).id_professional,
                     rows_in(indx).dt_start,
                     rows_in(indx).dt_next_encounter,
                     rows_in(indx).flg_end_followup,
                     rows_in(indx).id_opinion_type,
                     rows_in(indx).dt_next_enc_precision,
                     rows_in(indx).id_opinion)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN management_follow_up_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_management_follow_up_in IN management_follow_up.id_management_follow_up%TYPE,
        id_episode_in              IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        id_epis_encounter_in       IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        id_epis_encounter_nin      IN BOOLEAN := TRUE,
        time_spent_in              IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        time_spent_nin             IN BOOLEAN := TRUE,
        flg_status_in              IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_unit_time_in            IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        id_unit_time_nin           IN BOOLEAN := TRUE,
        dt_register_in             IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        dt_register_nin            IN BOOLEAN := TRUE,
        notes_in                   IN management_follow_up.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_parent_in               IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        create_user_in             IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        id_professional_in         IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        dt_start_in                IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_start_nin               IN BOOLEAN := TRUE,
        dt_next_encounter_in       IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        dt_next_encounter_nin      IN BOOLEAN := TRUE,
        flg_end_followup_in        IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        flg_end_followup_nin       IN BOOLEAN := TRUE,
        id_opinion_type_in         IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        id_opinion_type_nin        IN BOOLEAN := TRUE,
        dt_next_enc_precision_in   IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        dt_next_enc_precision_nin  IN BOOLEAN := TRUE,
        id_opinion_in              IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        id_opinion_nin             IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out                table_varchar;
        l_id_episode_n            NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_id_epis_encounter_n     NUMBER(1) := sys.diutil.bool_to_int(id_epis_encounter_nin);
        l_time_spent_n            NUMBER(1) := sys.diutil.bool_to_int(time_spent_nin);
        l_flg_status_n            NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_unit_time_n          NUMBER(1) := sys.diutil.bool_to_int(id_unit_time_nin);
        l_dt_register_n           NUMBER(1) := sys.diutil.bool_to_int(dt_register_nin);
        l_notes_n                 NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n      NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n          NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_parent_n             NUMBER(1) := sys.diutil.bool_to_int(id_parent_nin);
        l_create_user_n           NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_professional_n       NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_dt_start_n              NUMBER(1) := sys.diutil.bool_to_int(dt_start_nin);
        l_dt_next_encounter_n     NUMBER(1) := sys.diutil.bool_to_int(dt_next_encounter_nin);
        l_flg_end_followup_n      NUMBER(1) := sys.diutil.bool_to_int(flg_end_followup_nin);
        l_id_opinion_type_n       NUMBER(1) := sys.diutil.bool_to_int(id_opinion_type_nin);
        l_dt_next_enc_precision_n NUMBER(1) := sys.diutil.bool_to_int(dt_next_enc_precision_nin);
        l_id_opinion_n            NUMBER(1) := sys.diutil.bool_to_int(id_opinion_nin);
    BEGIN
    
        UPDATE management_follow_up
           SET id_episode            = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_epis_encounter     = decode(l_id_epis_encounter_n,
                                              0,
                                              id_epis_encounter_in,
                                              nvl(id_epis_encounter_in, id_epis_encounter)),
               time_spent            = decode(l_time_spent_n, 0, time_spent_in, nvl(time_spent_in, time_spent)),
               flg_status            = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_unit_time          = decode(l_id_unit_time_n, 0, id_unit_time_in, nvl(id_unit_time_in, id_unit_time)),
               dt_register           = decode(l_dt_register_n, 0, dt_register_in, nvl(dt_register_in, dt_register)),
               notes                 = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_cancel_reason      = decode(l_id_cancel_reason_n,
                                              0,
                                              id_cancel_reason_in,
                                              nvl(id_cancel_reason_in, id_cancel_reason)),
               notes_cancel          = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               id_parent             = decode(l_id_parent_n, 0, id_parent_in, nvl(id_parent_in, id_parent)),
               create_user           = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time           = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution    = decode(l_create_institution_n,
                                              0,
                                              create_institution_in,
                                              nvl(create_institution_in, create_institution)),
               update_user           = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time           = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution    = decode(l_update_institution_n,
                                              0,
                                              update_institution_in,
                                              nvl(update_institution_in, update_institution)),
               id_professional       = decode(l_id_professional_n,
                                              0,
                                              id_professional_in,
                                              nvl(id_professional_in, id_professional)),
               dt_start              = decode(l_dt_start_n, 0, dt_start_in, nvl(dt_start_in, dt_start)),
               dt_next_encounter     = decode(l_dt_next_encounter_n,
                                              0,
                                              dt_next_encounter_in,
                                              nvl(dt_next_encounter_in, dt_next_encounter)),
               flg_end_followup      = decode(l_flg_end_followup_n,
                                              0,
                                              flg_end_followup_in,
                                              nvl(flg_end_followup_in, flg_end_followup)),
               id_opinion_type       = decode(l_id_opinion_type_n,
                                              0,
                                              id_opinion_type_in,
                                              nvl(id_opinion_type_in, id_opinion_type)),
               dt_next_enc_precision = decode(l_dt_next_enc_precision_n,
                                              0,
                                              dt_next_enc_precision_in,
                                              nvl(dt_next_enc_precision_in, dt_next_enc_precision)),
               id_opinion            = decode(l_id_opinion_n, 0, id_opinion_in, nvl(id_opinion_in, id_opinion))
         WHERE id_management_follow_up = id_management_follow_up_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_management_follow_up_in IN management_follow_up.id_management_follow_up%TYPE,
        id_episode_in              IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        id_epis_encounter_in       IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        id_epis_encounter_nin      IN BOOLEAN := TRUE,
        time_spent_in              IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        time_spent_nin             IN BOOLEAN := TRUE,
        flg_status_in              IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_unit_time_in            IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        id_unit_time_nin           IN BOOLEAN := TRUE,
        dt_register_in             IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        dt_register_nin            IN BOOLEAN := TRUE,
        notes_in                   IN management_follow_up.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_parent_in               IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        create_user_in             IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        id_professional_in         IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        dt_start_in                IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_start_nin               IN BOOLEAN := TRUE,
        dt_next_encounter_in       IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        dt_next_encounter_nin      IN BOOLEAN := TRUE,
        flg_end_followup_in        IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        flg_end_followup_nin       IN BOOLEAN := TRUE,
        id_opinion_type_in         IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        id_opinion_type_nin        IN BOOLEAN := TRUE,
        dt_next_enc_precision_in   IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        dt_next_enc_precision_nin  IN BOOLEAN := TRUE,
        id_opinion_in              IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        id_opinion_nin             IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_management_follow_up_in => id_management_follow_up_in,
            id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            id_epis_encounter_in       => id_epis_encounter_in,
            id_epis_encounter_nin      => id_epis_encounter_nin,
            time_spent_in              => time_spent_in,
            time_spent_nin             => time_spent_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            id_unit_time_in            => id_unit_time_in,
            id_unit_time_nin           => id_unit_time_nin,
            dt_register_in             => dt_register_in,
            dt_register_nin            => dt_register_nin,
            notes_in                   => notes_in,
            notes_nin                  => notes_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            notes_cancel_in            => notes_cancel_in,
            notes_cancel_nin           => notes_cancel_nin,
            id_parent_in               => id_parent_in,
            id_parent_nin              => id_parent_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            id_professional_in         => id_professional_in,
            id_professional_nin        => id_professional_nin,
            dt_start_in                => dt_start_in,
            dt_start_nin               => dt_start_nin,
            dt_next_encounter_in       => dt_next_encounter_in,
            dt_next_encounter_nin      => dt_next_encounter_nin,
            flg_end_followup_in        => flg_end_followup_in,
            flg_end_followup_nin       => flg_end_followup_nin,
            id_opinion_type_in         => id_opinion_type_in,
            id_opinion_type_nin        => id_opinion_type_nin,
            dt_next_enc_precision_in   => dt_next_enc_precision_in,
            dt_next_enc_precision_nin  => dt_next_enc_precision_nin,
            id_opinion_in              => id_opinion_in,
            id_opinion_nin             => id_opinion_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in             IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_epis_encounter_in      IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        id_epis_encounter_nin     IN BOOLEAN := TRUE,
        time_spent_in             IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        time_spent_nin            IN BOOLEAN := TRUE,
        flg_status_in             IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_unit_time_in           IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        id_unit_time_nin          IN BOOLEAN := TRUE,
        dt_register_in            IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        dt_register_nin           IN BOOLEAN := TRUE,
        notes_in                  IN management_follow_up.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        notes_cancel_in           IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_parent_in              IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        id_parent_nin             IN BOOLEAN := TRUE,
        create_user_in            IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_professional_in        IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        id_professional_nin       IN BOOLEAN := TRUE,
        dt_start_in               IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_start_nin              IN BOOLEAN := TRUE,
        dt_next_encounter_in      IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        dt_next_encounter_nin     IN BOOLEAN := TRUE,
        flg_end_followup_in       IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        flg_end_followup_nin      IN BOOLEAN := TRUE,
        id_opinion_type_in        IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        id_opinion_type_nin       IN BOOLEAN := TRUE,
        dt_next_enc_precision_in  IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        dt_next_enc_precision_nin IN BOOLEAN := TRUE,
        id_opinion_in             IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        id_opinion_nin            IN BOOLEAN := TRUE,
        where_in                  IN VARCHAR2,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_episode_n            NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_id_epis_encounter_n     NUMBER(1) := sys.diutil.bool_to_int(id_epis_encounter_nin);
        l_time_spent_n            NUMBER(1) := sys.diutil.bool_to_int(time_spent_nin);
        l_flg_status_n            NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_unit_time_n          NUMBER(1) := sys.diutil.bool_to_int(id_unit_time_nin);
        l_dt_register_n           NUMBER(1) := sys.diutil.bool_to_int(dt_register_nin);
        l_notes_n                 NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n      NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n          NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_parent_n             NUMBER(1) := sys.diutil.bool_to_int(id_parent_nin);
        l_create_user_n           NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_professional_n       NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_dt_start_n              NUMBER(1) := sys.diutil.bool_to_int(dt_start_nin);
        l_dt_next_encounter_n     NUMBER(1) := sys.diutil.bool_to_int(dt_next_encounter_nin);
        l_flg_end_followup_n      NUMBER(1) := sys.diutil.bool_to_int(flg_end_followup_nin);
        l_id_opinion_type_n       NUMBER(1) := sys.diutil.bool_to_int(id_opinion_type_nin);
        l_dt_next_enc_precision_n NUMBER(1) := sys.diutil.bool_to_int(dt_next_enc_precision_nin);
        l_id_opinion_n            NUMBER(1) := sys.diutil.bool_to_int(id_opinion_nin);
    BEGIN
        l_id_episode_n            := sys.diutil.bool_to_int(id_episode_nin);
        l_id_epis_encounter_n     := sys.diutil.bool_to_int(id_epis_encounter_nin);
        l_time_spent_n            := sys.diutil.bool_to_int(time_spent_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_id_unit_time_n          := sys.diutil.bool_to_int(id_unit_time_nin);
        l_dt_register_n           := sys.diutil.bool_to_int(dt_register_nin);
        l_notes_n                 := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n      := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n          := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_parent_n             := sys.diutil.bool_to_int(id_parent_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
        l_id_professional_n       := sys.diutil.bool_to_int(id_professional_nin);
        l_dt_start_n              := sys.diutil.bool_to_int(dt_start_nin);
        l_dt_next_encounter_n     := sys.diutil.bool_to_int(dt_next_encounter_nin);
        l_flg_end_followup_n      := sys.diutil.bool_to_int(flg_end_followup_nin);
        l_id_opinion_type_n       := sys.diutil.bool_to_int(id_opinion_type_nin);
        l_dt_next_enc_precision_n := sys.diutil.bool_to_int(dt_next_enc_precision_nin);
        l_id_opinion_n            := sys.diutil.bool_to_int(id_opinion_nin);
        l_sql                     := 'UPDATE management_follow_up SET' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                                     ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ',' ||
                                     ' ID_EPIS_ENCOUNTER = decode (' || l_id_epis_encounter_n ||
                                     ',0,:ID_EPIS_ENCOUNTER_in, NVL (:ID_EPIS_ENCOUNTER_in, ID_EPIS_ENCOUNTER)) ' || ',' ||
                                     ' TIME_SPENT = decode (' || l_time_spent_n ||
                                     ',0,:TIME_SPENT_in, NVL (:TIME_SPENT_in, TIME_SPENT)) ' || ',' ||
                                     ' FLG_STATUS = decode (' || l_flg_status_n ||
                                     ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                     ' ID_UNIT_TIME = decode (' || l_id_unit_time_n ||
                                     ',0,:ID_UNIT_TIME_in, NVL (:ID_UNIT_TIME_in, ID_UNIT_TIME)) ' || ',' ||
                                     ' DT_REGISTER = decode (' || l_dt_register_n ||
                                     ',0,:DT_REGISTER_in, NVL (:DT_REGISTER_in, DT_REGISTER)) ' || ',' ||
                                     ' NOTES = decode (' || l_notes_n || ',0,:NOTES_in, NVL (:NOTES_in, NOTES)) ' || ',' ||
                                     ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                                     ',0,:ID_CANCEL_REASON_in, NVL (:ID_CANCEL_REASON_in, ID_CANCEL_REASON)) ' || ',' ||
                                     ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                                     ',0,:NOTES_CANCEL_in, NVL (:NOTES_CANCEL_in, NOTES_CANCEL)) ' || ',' ||
                                     ' ID_PARENT = decode (' || l_id_parent_n ||
                                     ',0,:ID_PARENT_in, NVL (:ID_PARENT_in, ID_PARENT)) ' || ',' ||
                                     ' CREATE_USER = decode (' || l_create_user_n ||
                                     ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                     ' CREATE_TIME = decode (' || l_create_time_n ||
                                     ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                     ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                     ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                     ' UPDATE_USER = decode (' || l_update_user_n ||
                                     ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                     ' UPDATE_TIME = decode (' || l_update_time_n ||
                                     ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                     ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                     ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                     ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                                     ',0,:ID_PROFESSIONAL_in, NVL (:ID_PROFESSIONAL_in, ID_PROFESSIONAL)) ' || ',' ||
                                     ' DT_START = decode (' || l_dt_start_n ||
                                     ',0,:DT_START_in, NVL (:DT_START_in, DT_START)) ' || ',' ||
                                     ' DT_NEXT_ENCOUNTER = decode (' || l_dt_next_encounter_n ||
                                     ',0,:DT_NEXT_ENCOUNTER_in, NVL (:DT_NEXT_ENCOUNTER_in, DT_NEXT_ENCOUNTER)) ' || ',' ||
                                     ' FLG_END_FOLLOWUP = decode (' || l_flg_end_followup_n ||
                                     ',0,:FLG_END_FOLLOWUP_in, NVL (:FLG_END_FOLLOWUP_in, FLG_END_FOLLOWUP)) ' || ',' ||
                                     ' ID_OPINION_TYPE = decode (' || l_id_opinion_type_n ||
                                     ',0,:ID_OPINION_TYPE_in, NVL (:ID_OPINION_TYPE_in, ID_OPINION_TYPE)) ' || ',' ||
                                     ' DT_NEXT_ENC_PRECISION = decode (' || l_dt_next_enc_precision_n ||
                                     ',0,:DT_NEXT_ENC_PRECISION_in, NVL (:DT_NEXT_ENC_PRECISION_in, DT_NEXT_ENC_PRECISION)) ' || ',' ||
                                     ' ID_OPINION = decode (' || l_id_opinion_n ||
                                     ',0,:ID_OPINION_in, NVL (:ID_OPINION_in, ID_OPINION)) ' || ' where ' ||
                                     nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, id_epis_encounter_in, time_spent_in, flg_status_in, id_unit_time_in, dt_register_in, notes_in, id_cancel_reason_in, notes_cancel_in, id_parent_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_professional_in, dt_start_in, dt_next_encounter_in, flg_end_followup_in, id_opinion_type_in, dt_next_enc_precision_in, id_opinion_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in             IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_epis_encounter_in      IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        id_epis_encounter_nin     IN BOOLEAN := TRUE,
        time_spent_in             IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        time_spent_nin            IN BOOLEAN := TRUE,
        flg_status_in             IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_unit_time_in           IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        id_unit_time_nin          IN BOOLEAN := TRUE,
        dt_register_in            IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        dt_register_nin           IN BOOLEAN := TRUE,
        notes_in                  IN management_follow_up.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        notes_cancel_in           IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_parent_in              IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        id_parent_nin             IN BOOLEAN := TRUE,
        create_user_in            IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_professional_in        IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        id_professional_nin       IN BOOLEAN := TRUE,
        dt_start_in               IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_start_nin              IN BOOLEAN := TRUE,
        dt_next_encounter_in      IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        dt_next_encounter_nin     IN BOOLEAN := TRUE,
        flg_end_followup_in       IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        flg_end_followup_nin      IN BOOLEAN := TRUE,
        id_opinion_type_in        IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        id_opinion_type_nin       IN BOOLEAN := TRUE,
        dt_next_enc_precision_in  IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        dt_next_enc_precision_nin IN BOOLEAN := TRUE,
        id_opinion_in             IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        id_opinion_nin            IN BOOLEAN := TRUE,
        where_in                  IN VARCHAR2,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            id_epis_encounter_in      => id_epis_encounter_in,
            id_epis_encounter_nin     => id_epis_encounter_nin,
            time_spent_in             => time_spent_in,
            time_spent_nin            => time_spent_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            id_unit_time_in           => id_unit_time_in,
            id_unit_time_nin          => id_unit_time_nin,
            dt_register_in            => dt_register_in,
            dt_register_nin           => dt_register_nin,
            notes_in                  => notes_in,
            notes_nin                 => notes_nin,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_reason_nin      => id_cancel_reason_nin,
            notes_cancel_in           => notes_cancel_in,
            notes_cancel_nin          => notes_cancel_nin,
            id_parent_in              => id_parent_in,
            id_parent_nin             => id_parent_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            id_professional_in        => id_professional_in,
            id_professional_nin       => id_professional_nin,
            dt_start_in               => dt_start_in,
            dt_start_nin              => dt_start_nin,
            dt_next_encounter_in      => dt_next_encounter_in,
            dt_next_encounter_nin     => dt_next_encounter_nin,
            flg_end_followup_in       => flg_end_followup_in,
            flg_end_followup_nin      => flg_end_followup_nin,
            id_opinion_type_in        => id_opinion_type_in,
            id_opinion_type_nin       => id_opinion_type_nin,
            dt_next_enc_precision_in  => dt_next_enc_precision_in,
            dt_next_enc_precision_nin => dt_next_enc_precision_nin,
            id_opinion_in             => id_opinion_in,
            id_opinion_nin            => id_opinion_nin,
            where_in                  => where_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_management_follow_up_in IN management_follow_up.id_management_follow_up%TYPE,
        id_episode_in              IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in       IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        time_spent_in              IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        flg_status_in              IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        id_unit_time_in            IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        dt_register_in             IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        notes_in                   IN management_follow_up.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in               IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        create_user_in             IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in             IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in             IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        id_professional_in         IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        dt_start_in                IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_next_encounter_in       IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        flg_end_followup_in        IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        id_opinion_type_in         IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        dt_next_enc_precision_in   IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        id_opinion_in              IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_management_follow_up_in => id_management_follow_up_in,
            id_episode_in              => id_episode_in,
            id_epis_encounter_in       => id_epis_encounter_in,
            time_spent_in              => time_spent_in,
            flg_status_in              => flg_status_in,
            id_unit_time_in            => id_unit_time_in,
            dt_register_in             => dt_register_in,
            notes_in                   => notes_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            id_parent_in               => id_parent_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_professional_in         => id_professional_in,
            dt_start_in                => dt_start_in,
            dt_next_encounter_in       => dt_next_encounter_in,
            flg_end_followup_in        => flg_end_followup_in,
            id_opinion_type_in         => id_opinion_type_in,
            dt_next_enc_precision_in   => dt_next_enc_precision_in,
            id_opinion_in              => id_opinion_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_management_follow_up_in => id_management_follow_up_in,
                id_episode_in              => id_episode_in,
                id_epis_encounter_in       => id_epis_encounter_in,
                time_spent_in              => time_spent_in,
                flg_status_in              => flg_status_in,
                id_unit_time_in            => id_unit_time_in,
                dt_register_in             => dt_register_in,
                notes_in                   => notes_in,
                id_cancel_reason_in        => id_cancel_reason_in,
                notes_cancel_in            => notes_cancel_in,
                id_parent_in               => id_parent_in,
                create_user_in             => create_user_in,
                create_time_in             => create_time_in,
                create_institution_in      => create_institution_in,
                update_user_in             => update_user_in,
                update_time_in             => update_time_in,
                update_institution_in      => update_institution_in,
                id_professional_in         => id_professional_in,
                dt_start_in                => dt_start_in,
                dt_next_encounter_in       => dt_next_encounter_in,
                flg_end_followup_in        => flg_end_followup_in,
                id_opinion_type_in         => id_opinion_type_in,
                dt_next_enc_precision_in   => dt_next_enc_precision_in,
                id_opinion_in              => id_opinion_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_management_follow_up_in IN management_follow_up.id_management_follow_up%TYPE,
        id_episode_in              IN management_follow_up.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in       IN management_follow_up.id_epis_encounter%TYPE DEFAULT NULL,
        time_spent_in              IN management_follow_up.time_spent%TYPE DEFAULT NULL,
        flg_status_in              IN management_follow_up.flg_status%TYPE DEFAULT NULL,
        id_unit_time_in            IN management_follow_up.id_unit_time%TYPE DEFAULT NULL,
        dt_register_in             IN management_follow_up.dt_register%TYPE DEFAULT NULL,
        notes_in                   IN management_follow_up.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN management_follow_up.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN management_follow_up.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in               IN management_follow_up.id_parent%TYPE DEFAULT NULL,
        create_user_in             IN management_follow_up.create_user%TYPE DEFAULT NULL,
        create_time_in             IN management_follow_up.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN management_follow_up.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN management_follow_up.update_user%TYPE DEFAULT NULL,
        update_time_in             IN management_follow_up.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN management_follow_up.update_institution%TYPE DEFAULT NULL,
        id_professional_in         IN management_follow_up.id_professional%TYPE DEFAULT NULL,
        dt_start_in                IN management_follow_up.dt_start%TYPE DEFAULT NULL,
        dt_next_encounter_in       IN management_follow_up.dt_next_encounter%TYPE DEFAULT NULL,
        flg_end_followup_in        IN management_follow_up.flg_end_followup%TYPE DEFAULT NULL,
        id_opinion_type_in         IN management_follow_up.id_opinion_type%TYPE DEFAULT NULL,
        dt_next_enc_precision_in   IN management_follow_up.dt_next_enc_precision%TYPE DEFAULT NULL,
        id_opinion_in              IN management_follow_up.id_opinion%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_management_follow_up_in,
                id_episode_in,
                id_epis_encounter_in,
                time_spent_in,
                flg_status_in,
                id_unit_time_in,
                dt_register_in,
                notes_in,
                id_cancel_reason_in,
                notes_cancel_in,
                id_parent_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_professional_in,
                dt_start_in,
                dt_next_encounter_in,
                flg_end_followup_in,
                id_opinion_type_in,
                dt_next_enc_precision_in,
                id_opinion_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN management_follow_up%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_management_follow_up_in => rec_in.id_management_follow_up,
            id_episode_in              => rec_in.id_episode,
            id_epis_encounter_in       => rec_in.id_epis_encounter,
            time_spent_in              => rec_in.time_spent,
            flg_status_in              => rec_in.flg_status,
            id_unit_time_in            => rec_in.id_unit_time,
            dt_register_in             => rec_in.dt_register,
            notes_in                   => rec_in.notes,
            id_cancel_reason_in        => rec_in.id_cancel_reason,
            notes_cancel_in            => rec_in.notes_cancel,
            id_parent_in               => rec_in.id_parent,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            id_professional_in         => rec_in.id_professional,
            dt_start_in                => rec_in.dt_start,
            dt_next_encounter_in       => rec_in.dt_next_encounter,
            flg_end_followup_in        => rec_in.flg_end_followup,
            id_opinion_type_in         => rec_in.id_opinion_type,
            dt_next_enc_precision_in   => rec_in.dt_next_enc_precision,
            id_opinion_in              => rec_in.id_opinion,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN management_follow_up%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_management_follow_up_in => rec_in.id_management_follow_up,
            id_episode_in              => rec_in.id_episode,
            id_epis_encounter_in       => rec_in.id_epis_encounter,
            time_spent_in              => rec_in.time_spent,
            flg_status_in              => rec_in.flg_status,
            id_unit_time_in            => rec_in.id_unit_time,
            dt_register_in             => rec_in.dt_register,
            notes_in                   => rec_in.notes,
            id_cancel_reason_in        => rec_in.id_cancel_reason,
            notes_cancel_in            => rec_in.notes_cancel,
            id_parent_in               => rec_in.id_parent,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            id_professional_in         => rec_in.id_professional,
            dt_start_in                => rec_in.dt_start,
            dt_next_encounter_in       => rec_in.dt_next_encounter,
            flg_end_followup_in        => rec_in.flg_end_followup,
            id_opinion_type_in         => rec_in.id_opinion_type,
            dt_next_enc_precision_in   => rec_in.dt_next_enc_precision,
            id_opinion_in              => rec_in.id_opinion,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN management_follow_up_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_management_follow_up id_management_follow_up_cc;
        l_id_episode              id_episode_cc;
        l_id_epis_encounter       id_epis_encounter_cc;
        l_time_spent              time_spent_cc;
        l_flg_status              flg_status_cc;
        l_id_unit_time            id_unit_time_cc;
        l_dt_register             dt_register_cc;
        l_notes                   notes_cc;
        l_id_cancel_reason        id_cancel_reason_cc;
        l_notes_cancel            notes_cancel_cc;
        l_id_parent               id_parent_cc;
        l_create_user             create_user_cc;
        l_create_time             create_time_cc;
        l_create_institution      create_institution_cc;
        l_update_user             update_user_cc;
        l_update_time             update_time_cc;
        l_update_institution      update_institution_cc;
        l_id_professional         id_professional_cc;
        l_dt_start                dt_start_cc;
        l_dt_next_encounter       dt_next_encounter_cc;
        l_flg_end_followup        flg_end_followup_cc;
        l_id_opinion_type         id_opinion_type_cc;
        l_dt_next_enc_precision   dt_next_enc_precision_cc;
        l_id_opinion              id_opinion_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_management_follow_up(i) := col_in(i).id_management_follow_up;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_epis_encounter(i) := col_in(i).id_epis_encounter;
            l_time_spent(i) := col_in(i).time_spent;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_unit_time(i) := col_in(i).id_unit_time;
            l_dt_register(i) := col_in(i).dt_register;
            l_notes(i) := col_in(i).notes;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_parent(i) := col_in(i).id_parent;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_professional(i) := col_in(i).id_professional;
            l_dt_start(i) := col_in(i).dt_start;
            l_dt_next_encounter(i) := col_in(i).dt_next_encounter;
            l_flg_end_followup(i) := col_in(i).flg_end_followup;
            l_id_opinion_type(i) := col_in(i).id_opinion_type;
            l_dt_next_enc_precision(i) := col_in(i).dt_next_enc_precision;
            l_id_opinion(i) := col_in(i).id_opinion;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE management_follow_up
                   SET id_episode            = nvl(l_id_episode(i), id_episode),
                       id_epis_encounter     = nvl(l_id_epis_encounter(i), id_epis_encounter),
                       time_spent            = nvl(l_time_spent(i), time_spent),
                       flg_status            = nvl(l_flg_status(i), flg_status),
                       id_unit_time          = nvl(l_id_unit_time(i), id_unit_time),
                       dt_register           = nvl(l_dt_register(i), dt_register),
                       notes                 = nvl(l_notes(i), notes),
                       id_cancel_reason      = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       notes_cancel          = nvl(l_notes_cancel(i), notes_cancel),
                       id_parent             = nvl(l_id_parent(i), id_parent),
                       create_user           = nvl(l_create_user(i), create_user),
                       create_time           = nvl(l_create_time(i), create_time),
                       create_institution    = nvl(l_create_institution(i), create_institution),
                       update_user           = nvl(l_update_user(i), update_user),
                       update_time           = nvl(l_update_time(i), update_time),
                       update_institution    = nvl(l_update_institution(i), update_institution),
                       id_professional       = nvl(l_id_professional(i), id_professional),
                       dt_start              = nvl(l_dt_start(i), dt_start),
                       dt_next_encounter     = nvl(l_dt_next_encounter(i), dt_next_encounter),
                       flg_end_followup      = nvl(l_flg_end_followup(i), flg_end_followup),
                       id_opinion_type       = nvl(l_id_opinion_type(i), id_opinion_type),
                       dt_next_enc_precision = nvl(l_dt_next_enc_precision(i), dt_next_enc_precision),
                       id_opinion            = nvl(l_id_opinion(i), id_opinion)
                 WHERE id_management_follow_up = l_id_management_follow_up(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE management_follow_up
                   SET id_episode            = l_id_episode(i),
                       id_epis_encounter     = l_id_epis_encounter(i),
                       time_spent            = l_time_spent(i),
                       flg_status            = l_flg_status(i),
                       id_unit_time          = l_id_unit_time(i),
                       dt_register           = l_dt_register(i),
                       notes                 = l_notes(i),
                       id_cancel_reason      = l_id_cancel_reason(i),
                       notes_cancel          = l_notes_cancel(i),
                       id_parent             = l_id_parent(i),
                       create_user           = l_create_user(i),
                       create_time           = l_create_time(i),
                       create_institution    = l_create_institution(i),
                       update_user           = l_update_user(i),
                       update_time           = l_update_time(i),
                       update_institution    = l_update_institution(i),
                       id_professional       = l_id_professional(i),
                       dt_start              = l_dt_start(i),
                       dt_next_encounter     = l_dt_next_encounter(i),
                       flg_end_followup      = l_flg_end_followup(i),
                       id_opinion_type       = l_id_opinion_type(i),
                       dt_next_enc_precision = l_dt_next_enc_precision(i),
                       id_opinion            = l_id_opinion(i)
                 WHERE id_management_follow_up = l_id_management_follow_up(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN management_follow_up_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE management_follow_up
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE management_follow_up
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE management_follow_up
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_management_follow_up_in IN management_follow_up.id_management_follow_up%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM management_follow_up
         WHERE id_management_follow_up = id_management_follow_up_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_management_follow_up_in IN management_follow_up.id_management_follow_up%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_management_follow_up_in => id_management_follow_up_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END del;

    -- Delete all rows for this MFU_CANCEL_REASON_FK foreign key value
    PROCEDURE del_mfu_cancel_reason_fk
    (
        id_cancel_reason_in IN management_follow_up.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM management_follow_up
         WHERE id_cancel_reason = id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_mfu_cancel_reason_fk;

    -- Delete all rows for this MFU_EC_FK foreign key value
    PROCEDURE del_mfu_ec_fk
    (
        id_epis_encounter_in IN management_follow_up.id_epis_encounter%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM management_follow_up
         WHERE id_epis_encounter = id_epis_encounter_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_mfu_ec_fk;

    -- Delete all rows for this MFU_EPISODE_FK foreign key value
    PROCEDURE del_mfu_episode_fk
    (
        id_episode_in   IN management_follow_up.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM management_follow_up
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_mfu_episode_fk;

    -- Delete all rows for this MFU_MFU_PARENT_FK foreign key value
    PROCEDURE del_mfu_mfu_parent_fk
    (
        id_parent_in    IN management_follow_up.id_parent%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM management_follow_up
         WHERE id_parent = id_parent_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_mfu_mfu_parent_fk;

    -- Delete all rows for this MFU_OPINION_FK foreign key value
    PROCEDURE del_mfu_opinion_fk
    (
        id_opinion_in   IN management_follow_up.id_opinion%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM management_follow_up
         WHERE id_opinion = id_opinion_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_mfu_opinion_fk;

    -- Delete all rows for this MFU_OPINION_TYPE_FK foreign key value
    PROCEDURE del_mfu_opinion_type_fk
    (
        id_opinion_type_in IN management_follow_up.id_opinion_type%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM management_follow_up
         WHERE id_opinion_type = id_opinion_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_mfu_opinion_type_fk;

    -- Delete all rows for this MFU_UNIT_MS_FK foreign key value
    PROCEDURE del_mfu_unit_ms_fk
    (
        id_unit_time_in IN management_follow_up.id_unit_time%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM management_follow_up
         WHERE id_unit_time = id_unit_time_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_mfu_unit_ms_fk;

    -- Delete all rows for this MFU_CANCEL_REASON_FK foreign key value
    PROCEDURE del_mfu_cancel_reason_fk
    (
        id_cancel_reason_in IN management_follow_up.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mfu_cancel_reason_fk(id_cancel_reason_in => id_cancel_reason_in,
                                 handle_error_in     => handle_error_in,
                                 rows_out            => rows_out);
    END del_mfu_cancel_reason_fk;

    -- Delete all rows for this MFU_EC_FK foreign key value
    PROCEDURE del_mfu_ec_fk
    (
        id_epis_encounter_in IN management_follow_up.id_epis_encounter%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mfu_ec_fk(id_epis_encounter_in => id_epis_encounter_in,
                      handle_error_in      => handle_error_in,
                      rows_out             => rows_out);
    END del_mfu_ec_fk;

    -- Delete all rows for this MFU_EPISODE_FK foreign key value
    PROCEDURE del_mfu_episode_fk
    (
        id_episode_in   IN management_follow_up.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mfu_episode_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_mfu_episode_fk;

    -- Delete all rows for this MFU_MFU_PARENT_FK foreign key value
    PROCEDURE del_mfu_mfu_parent_fk
    (
        id_parent_in    IN management_follow_up.id_parent%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mfu_mfu_parent_fk(id_parent_in => id_parent_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_mfu_mfu_parent_fk;

    -- Delete all rows for this MFU_OPINION_FK foreign key value
    PROCEDURE del_mfu_opinion_fk
    (
        id_opinion_in   IN management_follow_up.id_opinion%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mfu_opinion_fk(id_opinion_in => id_opinion_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_mfu_opinion_fk;

    -- Delete all rows for this MFU_OPINION_TYPE_FK foreign key value
    PROCEDURE del_mfu_opinion_type_fk
    (
        id_opinion_type_in IN management_follow_up.id_opinion_type%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mfu_opinion_type_fk(id_opinion_type_in => id_opinion_type_in,
                                handle_error_in    => handle_error_in,
                                rows_out           => rows_out);
    END del_mfu_opinion_type_fk;

    -- Delete all rows for this MFU_UNIT_MS_FK foreign key value
    PROCEDURE del_mfu_unit_ms_fk
    (
        id_unit_time_in IN management_follow_up.id_unit_time%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mfu_unit_ms_fk(id_unit_time_in => id_unit_time_in,
                           handle_error_in => handle_error_in,
                           rows_out        => rows_out);
    END del_mfu_unit_ms_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM management_follow_up';
        ELSE
            RETURN 'DELETE FROM management_follow_up WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(management_follow_up_inout IN OUT management_follow_up%ROWTYPE) IS
    BEGIN
        management_follow_up_inout.id_management_follow_up := NULL;
        management_follow_up_inout.id_episode              := NULL;
        management_follow_up_inout.id_epis_encounter       := NULL;
        management_follow_up_inout.time_spent              := NULL;
        management_follow_up_inout.flg_status              := NULL;
        management_follow_up_inout.id_unit_time            := NULL;
        management_follow_up_inout.dt_register             := NULL;
        management_follow_up_inout.notes                   := NULL;
        management_follow_up_inout.id_cancel_reason        := NULL;
        management_follow_up_inout.notes_cancel            := NULL;
        management_follow_up_inout.id_parent               := NULL;
        management_follow_up_inout.create_user             := NULL;
        management_follow_up_inout.create_time             := NULL;
        management_follow_up_inout.create_institution      := NULL;
        management_follow_up_inout.update_user             := NULL;
        management_follow_up_inout.update_time             := NULL;
        management_follow_up_inout.update_institution      := NULL;
        management_follow_up_inout.id_professional         := NULL;
        management_follow_up_inout.dt_start                := NULL;
        management_follow_up_inout.dt_next_encounter       := NULL;
        management_follow_up_inout.flg_end_followup        := NULL;
        management_follow_up_inout.id_opinion_type         := NULL;
        management_follow_up_inout.dt_next_enc_precision   := NULL;
        management_follow_up_inout.id_opinion              := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN management_follow_up%ROWTYPE IS
        l_management_follow_up management_follow_up%ROWTYPE;
    BEGIN
        RETURN l_management_follow_up;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN management_follow_up_tc IS
        data management_follow_up_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM management_follow_up
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN management_follow_up_tc IS
        data management_follow_up_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_management_follow_up;
/
