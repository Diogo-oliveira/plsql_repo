/*-- Last Change Revision: $Rev: 597743 $*/
/*-- Last Change by: $Author: gustavo.serrano $*/
/*-- Date of last change: $Date: 2010-07-30 10:06:30 +0100 (sex, 30 jul 2010) $*/
CREATE OR REPLACE PACKAGE BODY ts_rehab_diagnosis_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Julho 22, 2010 15:25:55
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_rehab_diagnosis_in        IN rehab_diagnosis_hist.id_rehab_diagnosis%TYPE,
        dt_rehab_diagnosis_hist_in   IN rehab_diagnosis_hist.dt_rehab_diagnosis_hist%TYPE,
        id_icf_in                    IN rehab_diagnosis_hist.id_icf%TYPE DEFAULT NULL,
        id_iq_initial_incapacity_in  IN rehab_diagnosis_hist.id_iq_initial_incapacity%TYPE DEFAULT NULL,
        id_iqs_initial_incapacity_in IN rehab_diagnosis_hist.id_iqs_initial_incapacity%TYPE DEFAULT NULL,
        id_iq_expected_result_in     IN rehab_diagnosis_hist.id_iq_expected_result%TYPE DEFAULT NULL,
        id_iqs_expected_result_in    IN rehab_diagnosis_hist.id_iqs_expected_result%TYPE DEFAULT NULL,
        id_iq_active_incapacity_in   IN rehab_diagnosis_hist.id_iq_active_incapacity%TYPE DEFAULT NULL,
        id_iqs_active_incapacity_in  IN rehab_diagnosis_hist.id_iqs_active_incapacity%TYPE DEFAULT NULL,
        flg_status_in                IN rehab_diagnosis_hist.flg_status%TYPE DEFAULT NULL,
        id_episode_origin_in         IN rehab_diagnosis_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_in                IN rehab_diagnosis_hist.id_episode%TYPE DEFAULT NULL,
        id_patient_in                IN rehab_diagnosis_hist.id_patient%TYPE DEFAULT NULL,
        notes_in                     IN rehab_diagnosis_hist.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN rehab_diagnosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in              IN rehab_diagnosis_hist.notes_cancel%TYPE DEFAULT NULL,
        id_prof_last_update_in       IN rehab_diagnosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in            IN rehab_diagnosis_hist.dt_last_update%TYPE DEFAULT NULL,
        create_user_in               IN rehab_diagnosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN rehab_diagnosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN rehab_diagnosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN rehab_diagnosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN rehab_diagnosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN rehab_diagnosis_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO rehab_diagnosis_hist
            (dt_rehab_diagnosis_hist,
             id_rehab_diagnosis,
             id_icf,
             id_iq_initial_incapacity,
             id_iqs_initial_incapacity,
             id_iq_expected_result,
             id_iqs_expected_result,
             id_iq_active_incapacity,
             id_iqs_active_incapacity,
             flg_status,
             id_episode_origin,
             id_episode,
             id_patient,
             notes,
             id_cancel_reason,
             notes_cancel,
             id_prof_last_update,
             dt_last_update,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (dt_rehab_diagnosis_hist_in,
             id_rehab_diagnosis_in,
             id_icf_in,
             id_iq_initial_incapacity_in,
             id_iqs_initial_incapacity_in,
             id_iq_expected_result_in,
             id_iqs_expected_result_in,
             id_iq_active_incapacity_in,
             id_iqs_active_incapacity_in,
             flg_status_in,
             id_episode_origin_in,
             id_episode_in,
             id_patient_in,
             notes_in,
             id_cancel_reason_in,
             notes_cancel_in,
             id_prof_last_update_in,
             dt_last_update_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'REHAB_DIAGNOSIS_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    IF l_name = 'RDGH_IQAI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQS_ACTIVE_INCAPACITY',
                                                        value_in           => id_iqs_active_incapacity_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQ_ACTIVE_INCAPACITY',
                                                        value_in           => id_iq_active_incapacity_in);
                    END IF;
                    IF l_name = 'RDGH_IQER_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQS_EXPECTED_RESULT',
                                                        value_in           => id_iqs_expected_result_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQ_EXPECTED_RESULT',
                                                        value_in           => id_iq_expected_result_in);
                    END IF;
                    IF l_name = 'RDGH_IQII_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQS_INITIAL_INCAPACITY',
                                                        value_in           => id_iqs_initial_incapacity_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQ_INITIAL_INCAPACITY',
                                                        value_in           => id_iq_initial_incapacity_in);
                    END IF;
                    IF l_name = 'RDGH_RD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REHAB_DIAGNOSIS',
                                                        value_in           => id_rehab_diagnosis_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_rehab_diagnosis_in        IN rehab_diagnosis_hist.id_rehab_diagnosis%TYPE,
        dt_rehab_diagnosis_hist_in   IN rehab_diagnosis_hist.dt_rehab_diagnosis_hist%TYPE,
        id_icf_in                    IN rehab_diagnosis_hist.id_icf%TYPE DEFAULT NULL,
        id_iq_initial_incapacity_in  IN rehab_diagnosis_hist.id_iq_initial_incapacity%TYPE DEFAULT NULL,
        id_iqs_initial_incapacity_in IN rehab_diagnosis_hist.id_iqs_initial_incapacity%TYPE DEFAULT NULL,
        id_iq_expected_result_in     IN rehab_diagnosis_hist.id_iq_expected_result%TYPE DEFAULT NULL,
        id_iqs_expected_result_in    IN rehab_diagnosis_hist.id_iqs_expected_result%TYPE DEFAULT NULL,
        id_iq_active_incapacity_in   IN rehab_diagnosis_hist.id_iq_active_incapacity%TYPE DEFAULT NULL,
        id_iqs_active_incapacity_in  IN rehab_diagnosis_hist.id_iqs_active_incapacity%TYPE DEFAULT NULL,
        flg_status_in                IN rehab_diagnosis_hist.flg_status%TYPE DEFAULT NULL,
        id_episode_origin_in         IN rehab_diagnosis_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_in                IN rehab_diagnosis_hist.id_episode%TYPE DEFAULT NULL,
        id_patient_in                IN rehab_diagnosis_hist.id_patient%TYPE DEFAULT NULL,
        notes_in                     IN rehab_diagnosis_hist.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN rehab_diagnosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in              IN rehab_diagnosis_hist.notes_cancel%TYPE DEFAULT NULL,
        id_prof_last_update_in       IN rehab_diagnosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in            IN rehab_diagnosis_hist.dt_last_update%TYPE DEFAULT NULL,
        create_user_in               IN rehab_diagnosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN rehab_diagnosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN rehab_diagnosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN rehab_diagnosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN rehab_diagnosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN rehab_diagnosis_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_rehab_diagnosis_in        => id_rehab_diagnosis_in,
            dt_rehab_diagnosis_hist_in   => dt_rehab_diagnosis_hist_in,
            id_icf_in                    => id_icf_in,
            id_iq_initial_incapacity_in  => id_iq_initial_incapacity_in,
            id_iqs_initial_incapacity_in => id_iqs_initial_incapacity_in,
            id_iq_expected_result_in     => id_iq_expected_result_in,
            id_iqs_expected_result_in    => id_iqs_expected_result_in,
            id_iq_active_incapacity_in   => id_iq_active_incapacity_in,
            id_iqs_active_incapacity_in  => id_iqs_active_incapacity_in,
            flg_status_in                => flg_status_in,
            id_episode_origin_in         => id_episode_origin_in,
            id_episode_in                => id_episode_in,
            id_patient_in                => id_patient_in,
            notes_in                     => notes_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            notes_cancel_in              => notes_cancel_in,
            id_prof_last_update_in       => id_prof_last_update_in,
            dt_last_update_in            => dt_last_update_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN rehab_diagnosis_hist%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec rehab_diagnosis_hist%ROWTYPE := rec_in;
    BEGIN
        ins(id_rehab_diagnosis_in        => l_rec.id_rehab_diagnosis,
            dt_rehab_diagnosis_hist_in   => l_rec.dt_rehab_diagnosis_hist,
            id_icf_in                    => l_rec.id_icf,
            id_iq_initial_incapacity_in  => l_rec.id_iq_initial_incapacity,
            id_iqs_initial_incapacity_in => l_rec.id_iqs_initial_incapacity,
            id_iq_expected_result_in     => l_rec.id_iq_expected_result,
            id_iqs_expected_result_in    => l_rec.id_iqs_expected_result,
            id_iq_active_incapacity_in   => l_rec.id_iq_active_incapacity,
            id_iqs_active_incapacity_in  => l_rec.id_iqs_active_incapacity,
            flg_status_in                => l_rec.flg_status,
            id_episode_origin_in         => l_rec.id_episode_origin,
            id_episode_in                => l_rec.id_episode,
            id_patient_in                => l_rec.id_patient,
            notes_in                     => l_rec.notes,
            id_cancel_reason_in          => l_rec.id_cancel_reason,
            notes_cancel_in              => l_rec.notes_cancel,
            id_prof_last_update_in       => l_rec.id_prof_last_update,
            dt_last_update_in            => l_rec.dt_last_update,
            create_user_in               => l_rec.create_user,
            create_time_in               => l_rec.create_time,
            create_institution_in        => l_rec.create_institution,
            update_user_in               => l_rec.update_user,
            update_time_in               => l_rec.update_time,
            update_institution_in        => l_rec.update_institution,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN rehab_diagnosis_hist%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN rehab_diagnosis_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO rehab_diagnosis_hist
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REHAB_DIAGNOSIS_HIST _' || indx,
                                                        value_in           => rows_in(indx).dt_rehab_diagnosis_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REHAB_DIAGNOSIS _' || indx,
                                                        value_in           => rows_in(indx).id_rehab_diagnosis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ICF _' || indx,
                                                        value_in           => rows_in(indx).id_icf,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_IQ_INITIAL_INCAPACITY _' || indx,
                                                        value_in           => rows_in(indx).id_iq_initial_incapacity,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_IQS_INITIAL_INCAPACITY _' || indx,
                                                        value_in           => rows_in(indx).id_iqs_initial_incapacity,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_IQ_EXPECTED_RESULT _' || indx,
                                                        value_in           => rows_in(indx).id_iq_expected_result,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_IQS_EXPECTED_RESULT _' || indx,
                                                        value_in           => rows_in(indx).id_iqs_expected_result,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_IQ_ACTIVE_INCAPACITY _' || indx,
                                                        value_in           => rows_in(indx).id_iq_active_incapacity,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_IQS_ACTIVE_INCAPACITY _' || indx,
                                                        value_in           => rows_in(indx).id_iqs_active_incapacity,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN _' || indx,
                                                        value_in           => rows_in(indx).id_episode_origin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).dt_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'REHAB_DIAGNOSIS_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN rehab_diagnosis_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_rehab_diagnosis_in         IN rehab_diagnosis_hist.id_rehab_diagnosis%TYPE,
        dt_rehab_diagnosis_hist_in    IN rehab_diagnosis_hist.dt_rehab_diagnosis_hist%TYPE,
        id_icf_in                     IN rehab_diagnosis_hist.id_icf%TYPE DEFAULT NULL,
        id_icf_nin                    IN BOOLEAN := TRUE,
        id_iq_initial_incapacity_in   IN rehab_diagnosis_hist.id_iq_initial_incapacity%TYPE DEFAULT NULL,
        id_iq_initial_incapacity_nin  IN BOOLEAN := TRUE,
        id_iqs_initial_incapacity_in  IN rehab_diagnosis_hist.id_iqs_initial_incapacity%TYPE DEFAULT NULL,
        id_iqs_initial_incapacity_nin IN BOOLEAN := TRUE,
        id_iq_expected_result_in      IN rehab_diagnosis_hist.id_iq_expected_result%TYPE DEFAULT NULL,
        id_iq_expected_result_nin     IN BOOLEAN := TRUE,
        id_iqs_expected_result_in     IN rehab_diagnosis_hist.id_iqs_expected_result%TYPE DEFAULT NULL,
        id_iqs_expected_result_nin    IN BOOLEAN := TRUE,
        id_iq_active_incapacity_in    IN rehab_diagnosis_hist.id_iq_active_incapacity%TYPE DEFAULT NULL,
        id_iq_active_incapacity_nin   IN BOOLEAN := TRUE,
        id_iqs_active_incapacity_in   IN rehab_diagnosis_hist.id_iqs_active_incapacity%TYPE DEFAULT NULL,
        id_iqs_active_incapacity_nin  IN BOOLEAN := TRUE,
        flg_status_in                 IN rehab_diagnosis_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        id_episode_origin_in          IN rehab_diagnosis_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin         IN BOOLEAN := TRUE,
        id_episode_in                 IN rehab_diagnosis_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        id_patient_in                 IN rehab_diagnosis_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        notes_in                      IN rehab_diagnosis_hist.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        id_cancel_reason_in           IN rehab_diagnosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin          IN BOOLEAN := TRUE,
        notes_cancel_in               IN rehab_diagnosis_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin              IN BOOLEAN := TRUE,
        id_prof_last_update_in        IN rehab_diagnosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin       IN BOOLEAN := TRUE,
        dt_last_update_in             IN rehab_diagnosis_hist.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin            IN BOOLEAN := TRUE,
        create_user_in                IN rehab_diagnosis_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN rehab_diagnosis_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN rehab_diagnosis_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN rehab_diagnosis_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN rehab_diagnosis_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN rehab_diagnosis_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
        l_rows_out                    table_varchar;
        l_id_icf_n                    NUMBER(1);
        l_id_iq_initial_incapacity_n  NUMBER(1);
        l_id_iqs_initial_incapacity_n NUMBER(1);
        l_id_iq_expected_result_n     NUMBER(1);
        l_id_iqs_expected_result_n    NUMBER(1);
        l_id_iq_active_incapacity_n   NUMBER(1);
        l_id_iqs_active_incapacity_n  NUMBER(1);
        l_flg_status_n                NUMBER(1);
        l_id_episode_origin_n         NUMBER(1);
        l_id_episode_n                NUMBER(1);
        l_id_patient_n                NUMBER(1);
        l_notes_n                     NUMBER(1);
        l_id_cancel_reason_n          NUMBER(1);
        l_notes_cancel_n              NUMBER(1);
        l_id_prof_last_update_n       NUMBER(1);
        l_dt_last_update_n            NUMBER(1);
        l_create_user_n               NUMBER(1);
        l_create_time_n               NUMBER(1);
        l_create_institution_n        NUMBER(1);
        l_update_user_n               NUMBER(1);
        l_update_time_n               NUMBER(1);
        l_update_institution_n        NUMBER(1);
    BEGIN
    
        l_id_icf_n                    := sys.diutil.bool_to_int(id_icf_nin);
        l_id_iq_initial_incapacity_n  := sys.diutil.bool_to_int(id_iq_initial_incapacity_nin);
        l_id_iqs_initial_incapacity_n := sys.diutil.bool_to_int(id_iqs_initial_incapacity_nin);
        l_id_iq_expected_result_n     := sys.diutil.bool_to_int(id_iq_expected_result_nin);
        l_id_iqs_expected_result_n    := sys.diutil.bool_to_int(id_iqs_expected_result_nin);
        l_id_iq_active_incapacity_n   := sys.diutil.bool_to_int(id_iq_active_incapacity_nin);
        l_id_iqs_active_incapacity_n  := sys.diutil.bool_to_int(id_iqs_active_incapacity_nin);
        l_flg_status_n                := sys.diutil.bool_to_int(flg_status_nin);
        l_id_episode_origin_n         := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_episode_n                := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n                := sys.diutil.bool_to_int(id_patient_nin);
        l_notes_n                     := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n          := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n              := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_prof_last_update_n       := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n            := sys.diutil.bool_to_int(dt_last_update_nin);
        l_create_user_n               := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n               := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n        := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n               := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n               := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n        := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE rehab_diagnosis_hist
           SET id_icf                    = decode(l_id_icf_n, 0, id_icf_in, nvl(id_icf_in, id_icf)),
               id_iq_initial_incapacity  = decode(l_id_iq_initial_incapacity_n,
                                                  0,
                                                  id_iq_initial_incapacity_in,
                                                  nvl(id_iq_initial_incapacity_in, id_iq_initial_incapacity)),
               id_iqs_initial_incapacity = decode(l_id_iqs_initial_incapacity_n,
                                                  0,
                                                  id_iqs_initial_incapacity_in,
                                                  nvl(id_iqs_initial_incapacity_in, id_iqs_initial_incapacity)),
               id_iq_expected_result     = decode(l_id_iq_expected_result_n,
                                                  0,
                                                  id_iq_expected_result_in,
                                                  nvl(id_iq_expected_result_in, id_iq_expected_result)),
               id_iqs_expected_result    = decode(l_id_iqs_expected_result_n,
                                                  0,
                                                  id_iqs_expected_result_in,
                                                  nvl(id_iqs_expected_result_in, id_iqs_expected_result)),
               id_iq_active_incapacity   = decode(l_id_iq_active_incapacity_n,
                                                  0,
                                                  id_iq_active_incapacity_in,
                                                  nvl(id_iq_active_incapacity_in, id_iq_active_incapacity)),
               id_iqs_active_incapacity  = decode(l_id_iqs_active_incapacity_n,
                                                  0,
                                                  id_iqs_active_incapacity_in,
                                                  nvl(id_iqs_active_incapacity_in, id_iqs_active_incapacity)),
               flg_status                = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_episode_origin         = decode(l_id_episode_origin_n,
                                                  0,
                                                  id_episode_origin_in,
                                                  nvl(id_episode_origin_in, id_episode_origin)),
               id_episode                = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_patient                = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               notes                     = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_cancel_reason          = decode(l_id_cancel_reason_n,
                                                  0,
                                                  id_cancel_reason_in,
                                                  nvl(id_cancel_reason_in, id_cancel_reason)),
               notes_cancel              = decode(l_notes_cancel_n,
                                                  0,
                                                  notes_cancel_in,
                                                  nvl(notes_cancel_in, notes_cancel)),
               id_prof_last_update       = decode(l_id_prof_last_update_n,
                                                  0,
                                                  id_prof_last_update_in,
                                                  nvl(id_prof_last_update_in, id_prof_last_update)),
               dt_last_update            = decode(l_dt_last_update_n,
                                                  0,
                                                  dt_last_update_in,
                                                  nvl(dt_last_update_in, dt_last_update)),
               create_user               = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time               = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution        = decode(l_create_institution_n,
                                                  0,
                                                  create_institution_in,
                                                  nvl(create_institution_in, create_institution)),
               update_user               = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time               = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution        = decode(l_update_institution_n,
                                                  0,
                                                  update_institution_in,
                                                  nvl(update_institution_in, update_institution))
         WHERE id_rehab_diagnosis = id_rehab_diagnosis_in
           AND dt_rehab_diagnosis_hist = dt_rehab_diagnosis_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'REHAB_DIAGNOSIS_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    IF l_name = 'RDGH_IQAI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQS_ACTIVE_INCAPACITY',
                                                        value_in           => id_iqs_active_incapacity_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQ_ACTIVE_INCAPACITY',
                                                        value_in           => id_iq_active_incapacity_in);
                    END IF;
                    IF l_name = 'RDGH_IQER_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQS_EXPECTED_RESULT',
                                                        value_in           => id_iqs_expected_result_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQ_EXPECTED_RESULT',
                                                        value_in           => id_iq_expected_result_in);
                    END IF;
                    IF l_name = 'RDGH_IQII_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQS_INITIAL_INCAPACITY',
                                                        value_in           => id_iqs_initial_incapacity_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQ_INITIAL_INCAPACITY',
                                                        value_in           => id_iq_initial_incapacity_in);
                    END IF;
                    IF l_name = 'RDGH_RD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REHAB_DIAGNOSIS',
                                                        value_in           => id_rehab_diagnosis_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_rehab_diagnosis_in         IN rehab_diagnosis_hist.id_rehab_diagnosis%TYPE,
        dt_rehab_diagnosis_hist_in    IN rehab_diagnosis_hist.dt_rehab_diagnosis_hist%TYPE,
        id_icf_in                     IN rehab_diagnosis_hist.id_icf%TYPE DEFAULT NULL,
        id_icf_nin                    IN BOOLEAN := TRUE,
        id_iq_initial_incapacity_in   IN rehab_diagnosis_hist.id_iq_initial_incapacity%TYPE DEFAULT NULL,
        id_iq_initial_incapacity_nin  IN BOOLEAN := TRUE,
        id_iqs_initial_incapacity_in  IN rehab_diagnosis_hist.id_iqs_initial_incapacity%TYPE DEFAULT NULL,
        id_iqs_initial_incapacity_nin IN BOOLEAN := TRUE,
        id_iq_expected_result_in      IN rehab_diagnosis_hist.id_iq_expected_result%TYPE DEFAULT NULL,
        id_iq_expected_result_nin     IN BOOLEAN := TRUE,
        id_iqs_expected_result_in     IN rehab_diagnosis_hist.id_iqs_expected_result%TYPE DEFAULT NULL,
        id_iqs_expected_result_nin    IN BOOLEAN := TRUE,
        id_iq_active_incapacity_in    IN rehab_diagnosis_hist.id_iq_active_incapacity%TYPE DEFAULT NULL,
        id_iq_active_incapacity_nin   IN BOOLEAN := TRUE,
        id_iqs_active_incapacity_in   IN rehab_diagnosis_hist.id_iqs_active_incapacity%TYPE DEFAULT NULL,
        id_iqs_active_incapacity_nin  IN BOOLEAN := TRUE,
        flg_status_in                 IN rehab_diagnosis_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        id_episode_origin_in          IN rehab_diagnosis_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin         IN BOOLEAN := TRUE,
        id_episode_in                 IN rehab_diagnosis_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        id_patient_in                 IN rehab_diagnosis_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        notes_in                      IN rehab_diagnosis_hist.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        id_cancel_reason_in           IN rehab_diagnosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin          IN BOOLEAN := TRUE,
        notes_cancel_in               IN rehab_diagnosis_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin              IN BOOLEAN := TRUE,
        id_prof_last_update_in        IN rehab_diagnosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin       IN BOOLEAN := TRUE,
        dt_last_update_in             IN rehab_diagnosis_hist.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin            IN BOOLEAN := TRUE,
        create_user_in                IN rehab_diagnosis_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN rehab_diagnosis_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN rehab_diagnosis_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN rehab_diagnosis_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN rehab_diagnosis_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN rehab_diagnosis_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_rehab_diagnosis_in         => id_rehab_diagnosis_in,
            dt_rehab_diagnosis_hist_in    => dt_rehab_diagnosis_hist_in,
            id_icf_in                     => id_icf_in,
            id_icf_nin                    => id_icf_nin,
            id_iq_initial_incapacity_in   => id_iq_initial_incapacity_in,
            id_iq_initial_incapacity_nin  => id_iq_initial_incapacity_nin,
            id_iqs_initial_incapacity_in  => id_iqs_initial_incapacity_in,
            id_iqs_initial_incapacity_nin => id_iqs_initial_incapacity_nin,
            id_iq_expected_result_in      => id_iq_expected_result_in,
            id_iq_expected_result_nin     => id_iq_expected_result_nin,
            id_iqs_expected_result_in     => id_iqs_expected_result_in,
            id_iqs_expected_result_nin    => id_iqs_expected_result_nin,
            id_iq_active_incapacity_in    => id_iq_active_incapacity_in,
            id_iq_active_incapacity_nin   => id_iq_active_incapacity_nin,
            id_iqs_active_incapacity_in   => id_iqs_active_incapacity_in,
            id_iqs_active_incapacity_nin  => id_iqs_active_incapacity_nin,
            flg_status_in                 => flg_status_in,
            flg_status_nin                => flg_status_nin,
            id_episode_origin_in          => id_episode_origin_in,
            id_episode_origin_nin         => id_episode_origin_nin,
            id_episode_in                 => id_episode_in,
            id_episode_nin                => id_episode_nin,
            id_patient_in                 => id_patient_in,
            id_patient_nin                => id_patient_nin,
            notes_in                      => notes_in,
            notes_nin                     => notes_nin,
            id_cancel_reason_in           => id_cancel_reason_in,
            id_cancel_reason_nin          => id_cancel_reason_nin,
            notes_cancel_in               => notes_cancel_in,
            notes_cancel_nin              => notes_cancel_nin,
            id_prof_last_update_in        => id_prof_last_update_in,
            id_prof_last_update_nin       => id_prof_last_update_nin,
            dt_last_update_in             => dt_last_update_in,
            dt_last_update_nin            => dt_last_update_nin,
            create_user_in                => create_user_in,
            create_user_nin               => create_user_nin,
            create_time_in                => create_time_in,
            create_time_nin               => create_time_nin,
            create_institution_in         => create_institution_in,
            create_institution_nin        => create_institution_nin,
            update_user_in                => update_user_in,
            update_user_nin               => update_user_nin,
            update_time_in                => update_time_in,
            update_time_nin               => update_time_nin,
            update_institution_in         => update_institution_in,
            update_institution_nin        => update_institution_nin,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_icf_in                     IN rehab_diagnosis_hist.id_icf%TYPE DEFAULT NULL,
        id_icf_nin                    IN BOOLEAN := TRUE,
        id_iq_initial_incapacity_in   IN rehab_diagnosis_hist.id_iq_initial_incapacity%TYPE DEFAULT NULL,
        id_iq_initial_incapacity_nin  IN BOOLEAN := TRUE,
        id_iqs_initial_incapacity_in  IN rehab_diagnosis_hist.id_iqs_initial_incapacity%TYPE DEFAULT NULL,
        id_iqs_initial_incapacity_nin IN BOOLEAN := TRUE,
        id_iq_expected_result_in      IN rehab_diagnosis_hist.id_iq_expected_result%TYPE DEFAULT NULL,
        id_iq_expected_result_nin     IN BOOLEAN := TRUE,
        id_iqs_expected_result_in     IN rehab_diagnosis_hist.id_iqs_expected_result%TYPE DEFAULT NULL,
        id_iqs_expected_result_nin    IN BOOLEAN := TRUE,
        id_iq_active_incapacity_in    IN rehab_diagnosis_hist.id_iq_active_incapacity%TYPE DEFAULT NULL,
        id_iq_active_incapacity_nin   IN BOOLEAN := TRUE,
        id_iqs_active_incapacity_in   IN rehab_diagnosis_hist.id_iqs_active_incapacity%TYPE DEFAULT NULL,
        id_iqs_active_incapacity_nin  IN BOOLEAN := TRUE,
        flg_status_in                 IN rehab_diagnosis_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        id_episode_origin_in          IN rehab_diagnosis_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin         IN BOOLEAN := TRUE,
        id_episode_in                 IN rehab_diagnosis_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        id_patient_in                 IN rehab_diagnosis_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        notes_in                      IN rehab_diagnosis_hist.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        id_cancel_reason_in           IN rehab_diagnosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin          IN BOOLEAN := TRUE,
        notes_cancel_in               IN rehab_diagnosis_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin              IN BOOLEAN := TRUE,
        id_prof_last_update_in        IN rehab_diagnosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin       IN BOOLEAN := TRUE,
        dt_last_update_in             IN rehab_diagnosis_hist.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin            IN BOOLEAN := TRUE,
        create_user_in                IN rehab_diagnosis_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN rehab_diagnosis_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN rehab_diagnosis_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN rehab_diagnosis_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN rehab_diagnosis_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN rehab_diagnosis_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        where_in                      VARCHAR2 DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
        l_sql                         VARCHAR2(32767);
        l_rows_out                    table_varchar;
        l_id_icf_n                    NUMBER(1);
        l_id_iq_initial_incapacity_n  NUMBER(1);
        l_id_iqs_initial_incapacity_n NUMBER(1);
        l_id_iq_expected_result_n     NUMBER(1);
        l_id_iqs_expected_result_n    NUMBER(1);
        l_id_iq_active_incapacity_n   NUMBER(1);
        l_id_iqs_active_incapacity_n  NUMBER(1);
        l_flg_status_n                NUMBER(1);
        l_id_episode_origin_n         NUMBER(1);
        l_id_episode_n                NUMBER(1);
        l_id_patient_n                NUMBER(1);
        l_notes_n                     NUMBER(1);
        l_id_cancel_reason_n          NUMBER(1);
        l_notes_cancel_n              NUMBER(1);
        l_id_prof_last_update_n       NUMBER(1);
        l_dt_last_update_n            NUMBER(1);
        l_create_user_n               NUMBER(1);
        l_create_time_n               NUMBER(1);
        l_create_institution_n        NUMBER(1);
        l_update_user_n               NUMBER(1);
        l_update_time_n               NUMBER(1);
        l_update_institution_n        NUMBER(1);
        id_rehab_diagnosis_in         rehab_diagnosis_hist.id_rehab_diagnosis%TYPE;
        dt_rehab_diagnosis_hist_in    rehab_diagnosis_hist.dt_rehab_diagnosis_hist%TYPE;
    BEGIN
    
        l_id_icf_n                    := sys.diutil.bool_to_int(id_icf_nin);
        l_id_iq_initial_incapacity_n  := sys.diutil.bool_to_int(id_iq_initial_incapacity_nin);
        l_id_iqs_initial_incapacity_n := sys.diutil.bool_to_int(id_iqs_initial_incapacity_nin);
        l_id_iq_expected_result_n     := sys.diutil.bool_to_int(id_iq_expected_result_nin);
        l_id_iqs_expected_result_n    := sys.diutil.bool_to_int(id_iqs_expected_result_nin);
        l_id_iq_active_incapacity_n   := sys.diutil.bool_to_int(id_iq_active_incapacity_nin);
        l_id_iqs_active_incapacity_n  := sys.diutil.bool_to_int(id_iqs_active_incapacity_nin);
        l_flg_status_n                := sys.diutil.bool_to_int(flg_status_nin);
        l_id_episode_origin_n         := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_episode_n                := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n                := sys.diutil.bool_to_int(id_patient_nin);
        l_notes_n                     := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n          := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n              := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_prof_last_update_n       := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n            := sys.diutil.bool_to_int(dt_last_update_nin);
        l_create_user_n               := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n               := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n        := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n               := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n               := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n        := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE REHAB_DIAGNOSIS_HIST SET ' || ' ID_ICF = decode (' || l_id_icf_n ||
                 ',0,:id_icf_in, NVL (:id_icf_in, ID_ICF)) ' || ',' || ' ID_IQ_INITIAL_INCAPACITY = decode (' ||
                 l_id_iq_initial_incapacity_n ||
                 ',0,:id_iq_initial_incapacity_in, NVL (:id_iq_initial_incapacity_in, ID_IQ_INITIAL_INCAPACITY)) ' || ',' ||
                 ' ID_IQS_INITIAL_INCAPACITY = decode (' || l_id_iqs_initial_incapacity_n ||
                 ',0,:id_iqs_initial_incapacity_in, NVL (:id_iqs_initial_incapacity_in, ID_IQS_INITIAL_INCAPACITY)) ' || ',' ||
                 ' ID_IQ_EXPECTED_RESULT = decode (' || l_id_iq_expected_result_n ||
                 ',0,:id_iq_expected_result_in, NVL (:id_iq_expected_result_in, ID_IQ_EXPECTED_RESULT)) ' || ',' ||
                 ' ID_IQS_EXPECTED_RESULT = decode (' || l_id_iqs_expected_result_n ||
                 ',0,:id_iqs_expected_result_in, NVL (:id_iqs_expected_result_in, ID_IQS_EXPECTED_RESULT)) ' || ',' ||
                 ' ID_IQ_ACTIVE_INCAPACITY = decode (' || l_id_iq_active_incapacity_n ||
                 ',0,:id_iq_active_incapacity_in, NVL (:id_iq_active_incapacity_in, ID_IQ_ACTIVE_INCAPACITY)) ' || ',' ||
                 ' ID_IQS_ACTIVE_INCAPACITY = decode (' || l_id_iqs_active_incapacity_n ||
                 ',0,:id_iqs_active_incapacity_in, NVL (:id_iqs_active_incapacity_in, ID_IQS_ACTIVE_INCAPACITY)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_EPISODE_ORIGIN = decode (' || l_id_episode_origin_n ||
                 ',0,:id_episode_origin_in, NVL (:id_episode_origin_in, ID_EPISODE_ORIGIN)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' ||
                 ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                 ',0,:id_prof_last_update_in, NVL (:id_prof_last_update_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                 ' DT_LAST_UPDATE = decode (' || l_dt_last_update_n ||
                 ',0,:dt_last_update_in, NVL (:dt_last_update_in, DT_LAST_UPDATE)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_icf_in, id_iq_initial_incapacity_in, id_iqs_initial_incapacity_in, id_iq_expected_result_in, id_iqs_expected_result_in, id_iq_active_incapacity_in, id_iqs_active_incapacity_in, flg_status_in, id_episode_origin_in, id_episode_in, id_patient_in, notes_in, id_cancel_reason_in, notes_cancel_in, id_prof_last_update_in, dt_last_update_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'REHAB_DIAGNOSIS_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    IF l_name = 'RDGH_IQAI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQS_ACTIVE_INCAPACITY',
                                                        value_in           => id_iqs_active_incapacity_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQ_ACTIVE_INCAPACITY',
                                                        value_in           => id_iq_active_incapacity_in);
                    END IF;
                    IF l_name = 'RDGH_IQER_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQS_EXPECTED_RESULT',
                                                        value_in           => id_iqs_expected_result_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQ_EXPECTED_RESULT',
                                                        value_in           => id_iq_expected_result_in);
                    END IF;
                    IF l_name = 'RDGH_IQII_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQS_INITIAL_INCAPACITY',
                                                        value_in           => id_iqs_initial_incapacity_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_IQ_INITIAL_INCAPACITY',
                                                        value_in           => id_iq_initial_incapacity_in);
                    END IF;
                    IF l_name = 'RDGH_RD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REHAB_DIAGNOSIS',
                                                        value_in           => id_rehab_diagnosis_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_icf_in                     IN rehab_diagnosis_hist.id_icf%TYPE DEFAULT NULL,
        id_icf_nin                    IN BOOLEAN := TRUE,
        id_iq_initial_incapacity_in   IN rehab_diagnosis_hist.id_iq_initial_incapacity%TYPE DEFAULT NULL,
        id_iq_initial_incapacity_nin  IN BOOLEAN := TRUE,
        id_iqs_initial_incapacity_in  IN rehab_diagnosis_hist.id_iqs_initial_incapacity%TYPE DEFAULT NULL,
        id_iqs_initial_incapacity_nin IN BOOLEAN := TRUE,
        id_iq_expected_result_in      IN rehab_diagnosis_hist.id_iq_expected_result%TYPE DEFAULT NULL,
        id_iq_expected_result_nin     IN BOOLEAN := TRUE,
        id_iqs_expected_result_in     IN rehab_diagnosis_hist.id_iqs_expected_result%TYPE DEFAULT NULL,
        id_iqs_expected_result_nin    IN BOOLEAN := TRUE,
        id_iq_active_incapacity_in    IN rehab_diagnosis_hist.id_iq_active_incapacity%TYPE DEFAULT NULL,
        id_iq_active_incapacity_nin   IN BOOLEAN := TRUE,
        id_iqs_active_incapacity_in   IN rehab_diagnosis_hist.id_iqs_active_incapacity%TYPE DEFAULT NULL,
        id_iqs_active_incapacity_nin  IN BOOLEAN := TRUE,
        flg_status_in                 IN rehab_diagnosis_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        id_episode_origin_in          IN rehab_diagnosis_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin         IN BOOLEAN := TRUE,
        id_episode_in                 IN rehab_diagnosis_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        id_patient_in                 IN rehab_diagnosis_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        notes_in                      IN rehab_diagnosis_hist.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        id_cancel_reason_in           IN rehab_diagnosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin          IN BOOLEAN := TRUE,
        notes_cancel_in               IN rehab_diagnosis_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin              IN BOOLEAN := TRUE,
        id_prof_last_update_in        IN rehab_diagnosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin       IN BOOLEAN := TRUE,
        dt_last_update_in             IN rehab_diagnosis_hist.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin            IN BOOLEAN := TRUE,
        create_user_in                IN rehab_diagnosis_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN rehab_diagnosis_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN rehab_diagnosis_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN rehab_diagnosis_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN rehab_diagnosis_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN rehab_diagnosis_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        where_in                      VARCHAR2 DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_icf_in                     => id_icf_in,
            id_icf_nin                    => id_icf_nin,
            id_iq_initial_incapacity_in   => id_iq_initial_incapacity_in,
            id_iq_initial_incapacity_nin  => id_iq_initial_incapacity_nin,
            id_iqs_initial_incapacity_in  => id_iqs_initial_incapacity_in,
            id_iqs_initial_incapacity_nin => id_iqs_initial_incapacity_nin,
            id_iq_expected_result_in      => id_iq_expected_result_in,
            id_iq_expected_result_nin     => id_iq_expected_result_nin,
            id_iqs_expected_result_in     => id_iqs_expected_result_in,
            id_iqs_expected_result_nin    => id_iqs_expected_result_nin,
            id_iq_active_incapacity_in    => id_iq_active_incapacity_in,
            id_iq_active_incapacity_nin   => id_iq_active_incapacity_nin,
            id_iqs_active_incapacity_in   => id_iqs_active_incapacity_in,
            id_iqs_active_incapacity_nin  => id_iqs_active_incapacity_nin,
            flg_status_in                 => flg_status_in,
            flg_status_nin                => flg_status_nin,
            id_episode_origin_in          => id_episode_origin_in,
            id_episode_origin_nin         => id_episode_origin_nin,
            id_episode_in                 => id_episode_in,
            id_episode_nin                => id_episode_nin,
            id_patient_in                 => id_patient_in,
            id_patient_nin                => id_patient_nin,
            notes_in                      => notes_in,
            notes_nin                     => notes_nin,
            id_cancel_reason_in           => id_cancel_reason_in,
            id_cancel_reason_nin          => id_cancel_reason_nin,
            notes_cancel_in               => notes_cancel_in,
            notes_cancel_nin              => notes_cancel_nin,
            id_prof_last_update_in        => id_prof_last_update_in,
            id_prof_last_update_nin       => id_prof_last_update_nin,
            dt_last_update_in             => dt_last_update_in,
            dt_last_update_nin            => dt_last_update_nin,
            create_user_in                => create_user_in,
            create_user_nin               => create_user_nin,
            create_time_in                => create_time_in,
            create_time_nin               => create_time_nin,
            create_institution_in         => create_institution_in,
            create_institution_nin        => create_institution_nin,
            update_user_in                => update_user_in,
            update_user_nin               => update_user_nin,
            update_time_in                => update_time_in,
            update_time_nin               => update_time_nin,
            update_institution_in         => update_institution_in,
            update_institution_nin        => update_institution_nin,
            where_in                      => where_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN rehab_diagnosis_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(dt_rehab_diagnosis_hist_in   => rec_in.dt_rehab_diagnosis_hist,
            id_rehab_diagnosis_in        => rec_in.id_rehab_diagnosis,
            id_icf_in                    => rec_in.id_icf,
            id_iq_initial_incapacity_in  => rec_in.id_iq_initial_incapacity,
            id_iqs_initial_incapacity_in => rec_in.id_iqs_initial_incapacity,
            id_iq_expected_result_in     => rec_in.id_iq_expected_result,
            id_iqs_expected_result_in    => rec_in.id_iqs_expected_result,
            id_iq_active_incapacity_in   => rec_in.id_iq_active_incapacity,
            id_iqs_active_incapacity_in  => rec_in.id_iqs_active_incapacity,
            flg_status_in                => rec_in.flg_status,
            id_episode_origin_in         => rec_in.id_episode_origin,
            id_episode_in                => rec_in.id_episode,
            id_patient_in                => rec_in.id_patient,
            notes_in                     => rec_in.notes,
            id_cancel_reason_in          => rec_in.id_cancel_reason,
            notes_cancel_in              => rec_in.notes_cancel,
            id_prof_last_update_in       => rec_in.id_prof_last_update,
            dt_last_update_in            => rec_in.dt_last_update,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN rehab_diagnosis_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(dt_rehab_diagnosis_hist_in   => rec_in.dt_rehab_diagnosis_hist,
            id_rehab_diagnosis_in        => rec_in.id_rehab_diagnosis,
            id_icf_in                    => rec_in.id_icf,
            id_iq_initial_incapacity_in  => rec_in.id_iq_initial_incapacity,
            id_iqs_initial_incapacity_in => rec_in.id_iqs_initial_incapacity,
            id_iq_expected_result_in     => rec_in.id_iq_expected_result,
            id_iqs_expected_result_in    => rec_in.id_iqs_expected_result,
            id_iq_active_incapacity_in   => rec_in.id_iq_active_incapacity,
            id_iqs_active_incapacity_in  => rec_in.id_iqs_active_incapacity,
            flg_status_in                => rec_in.flg_status,
            id_episode_origin_in         => rec_in.id_episode_origin,
            id_episode_in                => rec_in.id_episode,
            id_patient_in                => rec_in.id_patient,
            notes_in                     => rec_in.notes,
            id_cancel_reason_in          => rec_in.id_cancel_reason,
            notes_cancel_in              => rec_in.notes_cancel,
            id_prof_last_update_in       => rec_in.id_prof_last_update,
            dt_last_update_in            => rec_in.dt_last_update,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_rehab_diagnosis_in        IN rehab_diagnosis_hist.id_rehab_diagnosis%TYPE,
        dt_rehab_diagnosis_hist_in   IN rehab_diagnosis_hist.dt_rehab_diagnosis_hist%TYPE,
        id_icf_in                    IN rehab_diagnosis_hist.id_icf%TYPE DEFAULT NULL,
        id_iq_initial_incapacity_in  IN rehab_diagnosis_hist.id_iq_initial_incapacity%TYPE DEFAULT NULL,
        id_iqs_initial_incapacity_in IN rehab_diagnosis_hist.id_iqs_initial_incapacity%TYPE DEFAULT NULL,
        id_iq_expected_result_in     IN rehab_diagnosis_hist.id_iq_expected_result%TYPE DEFAULT NULL,
        id_iqs_expected_result_in    IN rehab_diagnosis_hist.id_iqs_expected_result%TYPE DEFAULT NULL,
        id_iq_active_incapacity_in   IN rehab_diagnosis_hist.id_iq_active_incapacity%TYPE DEFAULT NULL,
        id_iqs_active_incapacity_in  IN rehab_diagnosis_hist.id_iqs_active_incapacity%TYPE DEFAULT NULL,
        flg_status_in                IN rehab_diagnosis_hist.flg_status%TYPE DEFAULT NULL,
        id_episode_origin_in         IN rehab_diagnosis_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_in                IN rehab_diagnosis_hist.id_episode%TYPE DEFAULT NULL,
        id_patient_in                IN rehab_diagnosis_hist.id_patient%TYPE DEFAULT NULL,
        notes_in                     IN rehab_diagnosis_hist.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN rehab_diagnosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in              IN rehab_diagnosis_hist.notes_cancel%TYPE DEFAULT NULL,
        id_prof_last_update_in       IN rehab_diagnosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in            IN rehab_diagnosis_hist.dt_last_update%TYPE DEFAULT NULL,
        create_user_in               IN rehab_diagnosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN rehab_diagnosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN rehab_diagnosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN rehab_diagnosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN rehab_diagnosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN rehab_diagnosis_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        upd(id_rehab_diagnosis_in        => id_rehab_diagnosis_in,
            dt_rehab_diagnosis_hist_in   => dt_rehab_diagnosis_hist_in,
            id_icf_in                    => id_icf_in,
            id_iq_initial_incapacity_in  => id_iq_initial_incapacity_in,
            id_iqs_initial_incapacity_in => id_iqs_initial_incapacity_in,
            id_iq_expected_result_in     => id_iq_expected_result_in,
            id_iqs_expected_result_in    => id_iqs_expected_result_in,
            id_iq_active_incapacity_in   => id_iq_active_incapacity_in,
            id_iqs_active_incapacity_in  => id_iqs_active_incapacity_in,
            flg_status_in                => flg_status_in,
            id_episode_origin_in         => id_episode_origin_in,
            id_episode_in                => id_episode_in,
            id_patient_in                => id_patient_in,
            notes_in                     => notes_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            notes_cancel_in              => notes_cancel_in,
            id_prof_last_update_in       => id_prof_last_update_in,
            dt_last_update_in            => dt_last_update_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_rehab_diagnosis_in        => id_rehab_diagnosis_in,
                dt_rehab_diagnosis_hist_in   => dt_rehab_diagnosis_hist_in,
                id_icf_in                    => id_icf_in,
                id_iq_initial_incapacity_in  => id_iq_initial_incapacity_in,
                id_iqs_initial_incapacity_in => id_iqs_initial_incapacity_in,
                id_iq_expected_result_in     => id_iq_expected_result_in,
                id_iqs_expected_result_in    => id_iqs_expected_result_in,
                id_iq_active_incapacity_in   => id_iq_active_incapacity_in,
                id_iqs_active_incapacity_in  => id_iqs_active_incapacity_in,
                flg_status_in                => flg_status_in,
                id_episode_origin_in         => id_episode_origin_in,
                id_episode_in                => id_episode_in,
                id_patient_in                => id_patient_in,
                notes_in                     => notes_in,
                id_cancel_reason_in          => id_cancel_reason_in,
                notes_cancel_in              => notes_cancel_in,
                id_prof_last_update_in       => id_prof_last_update_in,
                dt_last_update_in            => dt_last_update_in,
                create_user_in               => create_user_in,
                create_time_in               => create_time_in,
                create_institution_in        => create_institution_in,
                update_user_in               => update_user_in,
                update_time_in               => update_time_in,
                update_institution_in        => update_institution_in,
                handle_error_in              => handle_error_in,
                rows_out                     => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_rehab_diagnosis_in        IN rehab_diagnosis_hist.id_rehab_diagnosis%TYPE,
        dt_rehab_diagnosis_hist_in   IN rehab_diagnosis_hist.dt_rehab_diagnosis_hist%TYPE,
        id_icf_in                    IN rehab_diagnosis_hist.id_icf%TYPE DEFAULT NULL,
        id_iq_initial_incapacity_in  IN rehab_diagnosis_hist.id_iq_initial_incapacity%TYPE DEFAULT NULL,
        id_iqs_initial_incapacity_in IN rehab_diagnosis_hist.id_iqs_initial_incapacity%TYPE DEFAULT NULL,
        id_iq_expected_result_in     IN rehab_diagnosis_hist.id_iq_expected_result%TYPE DEFAULT NULL,
        id_iqs_expected_result_in    IN rehab_diagnosis_hist.id_iqs_expected_result%TYPE DEFAULT NULL,
        id_iq_active_incapacity_in   IN rehab_diagnosis_hist.id_iq_active_incapacity%TYPE DEFAULT NULL,
        id_iqs_active_incapacity_in  IN rehab_diagnosis_hist.id_iqs_active_incapacity%TYPE DEFAULT NULL,
        flg_status_in                IN rehab_diagnosis_hist.flg_status%TYPE DEFAULT NULL,
        id_episode_origin_in         IN rehab_diagnosis_hist.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_in                IN rehab_diagnosis_hist.id_episode%TYPE DEFAULT NULL,
        id_patient_in                IN rehab_diagnosis_hist.id_patient%TYPE DEFAULT NULL,
        notes_in                     IN rehab_diagnosis_hist.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN rehab_diagnosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in              IN rehab_diagnosis_hist.notes_cancel%TYPE DEFAULT NULL,
        id_prof_last_update_in       IN rehab_diagnosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in            IN rehab_diagnosis_hist.dt_last_update%TYPE DEFAULT NULL,
        create_user_in               IN rehab_diagnosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN rehab_diagnosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN rehab_diagnosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN rehab_diagnosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN rehab_diagnosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN rehab_diagnosis_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_rehab_diagnosis_in,
                dt_rehab_diagnosis_hist_in,
                id_icf_in,
                id_iq_initial_incapacity_in,
                id_iqs_initial_incapacity_in,
                id_iq_expected_result_in,
                id_iqs_expected_result_in,
                id_iq_active_incapacity_in,
                id_iqs_active_incapacity_in,
                flg_status_in,
                id_episode_origin_in,
                id_episode_in,
                id_patient_in,
                notes_in,
                id_cancel_reason_in,
                notes_cancel_in,
                id_prof_last_update_in,
                dt_last_update_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN rehab_diagnosis_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_dt_rehab_diagnosis_hist   dt_rehab_diagnosis_hist_cc;
        l_id_rehab_diagnosis        id_rehab_diagnosis_cc;
        l_id_icf                    id_icf_cc;
        l_id_iq_initial_incapacity  id_iq_initial_incapacity_cc;
        l_id_iqs_initial_incapacity id_iqs_initial_incapacity_cc;
        l_id_iq_expected_result     id_iq_expected_result_cc;
        l_id_iqs_expected_result    id_iqs_expected_result_cc;
        l_id_iq_active_incapacity   id_iq_active_incapacity_cc;
        l_id_iqs_active_incapacity  id_iqs_active_incapacity_cc;
        l_flg_status                flg_status_cc;
        l_id_episode_origin         id_episode_origin_cc;
        l_id_episode                id_episode_cc;
        l_id_patient                id_patient_cc;
        l_notes                     notes_cc;
        l_id_cancel_reason          id_cancel_reason_cc;
        l_notes_cancel              notes_cancel_cc;
        l_id_prof_last_update       id_prof_last_update_cc;
        l_dt_last_update            dt_last_update_cc;
        l_create_user               create_user_cc;
        l_create_time               create_time_cc;
        l_create_institution        create_institution_cc;
        l_update_user               update_user_cc;
        l_update_time               update_time_cc;
        l_update_institution        update_institution_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_dt_rehab_diagnosis_hist(i) := col_in(i).dt_rehab_diagnosis_hist;
            l_id_rehab_diagnosis(i) := col_in(i).id_rehab_diagnosis;
            l_id_icf(i) := col_in(i).id_icf;
            l_id_iq_initial_incapacity(i) := col_in(i).id_iq_initial_incapacity;
            l_id_iqs_initial_incapacity(i) := col_in(i).id_iqs_initial_incapacity;
            l_id_iq_expected_result(i) := col_in(i).id_iq_expected_result;
            l_id_iqs_expected_result(i) := col_in(i).id_iqs_expected_result;
            l_id_iq_active_incapacity(i) := col_in(i).id_iq_active_incapacity;
            l_id_iqs_active_incapacity(i) := col_in(i).id_iqs_active_incapacity;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_episode_origin(i) := col_in(i).id_episode_origin;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_patient(i) := col_in(i).id_patient;
            l_notes(i) := col_in(i).notes;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_dt_last_update(i) := col_in(i).dt_last_update;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE rehab_diagnosis_hist
                   SET id_icf                    = nvl(l_id_icf(i), id_icf),
                       id_iq_initial_incapacity  = nvl(l_id_iq_initial_incapacity(i), id_iq_initial_incapacity),
                       id_iqs_initial_incapacity = nvl(l_id_iqs_initial_incapacity(i), id_iqs_initial_incapacity),
                       id_iq_expected_result     = nvl(l_id_iq_expected_result(i), id_iq_expected_result),
                       id_iqs_expected_result    = nvl(l_id_iqs_expected_result(i), id_iqs_expected_result),
                       id_iq_active_incapacity   = nvl(l_id_iq_active_incapacity(i), id_iq_active_incapacity),
                       id_iqs_active_incapacity  = nvl(l_id_iqs_active_incapacity(i), id_iqs_active_incapacity),
                       flg_status                = nvl(l_flg_status(i), flg_status),
                       id_episode_origin         = nvl(l_id_episode_origin(i), id_episode_origin),
                       id_episode                = nvl(l_id_episode(i), id_episode),
                       id_patient                = nvl(l_id_patient(i), id_patient),
                       notes                     = nvl(l_notes(i), notes),
                       id_cancel_reason          = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       notes_cancel              = nvl(l_notes_cancel(i), notes_cancel),
                       id_prof_last_update       = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       dt_last_update            = nvl(l_dt_last_update(i), dt_last_update),
                       create_user               = nvl(l_create_user(i), create_user),
                       create_time               = nvl(l_create_time(i), create_time),
                       create_institution        = nvl(l_create_institution(i), create_institution),
                       update_user               = nvl(l_update_user(i), update_user),
                       update_time               = nvl(l_update_time(i), update_time),
                       update_institution        = nvl(l_update_institution(i), update_institution)
                 WHERE id_rehab_diagnosis = l_id_rehab_diagnosis(i)
                   AND dt_rehab_diagnosis_hist = l_dt_rehab_diagnosis_hist(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE rehab_diagnosis_hist
                   SET id_icf                    = l_id_icf(i),
                       id_iq_initial_incapacity  = l_id_iq_initial_incapacity(i),
                       id_iqs_initial_incapacity = l_id_iqs_initial_incapacity(i),
                       id_iq_expected_result     = l_id_iq_expected_result(i),
                       id_iqs_expected_result    = l_id_iqs_expected_result(i),
                       id_iq_active_incapacity   = l_id_iq_active_incapacity(i),
                       id_iqs_active_incapacity  = l_id_iqs_active_incapacity(i),
                       flg_status                = l_flg_status(i),
                       id_episode_origin         = l_id_episode_origin(i),
                       id_episode                = l_id_episode(i),
                       id_patient                = l_id_patient(i),
                       notes                     = l_notes(i),
                       id_cancel_reason          = l_id_cancel_reason(i),
                       notes_cancel              = l_notes_cancel(i),
                       id_prof_last_update       = l_id_prof_last_update(i),
                       dt_last_update            = l_dt_last_update(i),
                       create_user               = l_create_user(i),
                       create_time               = l_create_time(i),
                       create_institution        = l_create_institution(i),
                       update_user               = l_update_user(i),
                       update_time               = l_update_time(i),
                       update_institution        = l_update_institution(i)
                 WHERE id_rehab_diagnosis = l_id_rehab_diagnosis(i)
                   AND dt_rehab_diagnosis_hist = l_dt_rehab_diagnosis_hist(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN rehab_diagnosis_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE REHAB_DIAGNOSIS_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE REHAB_DIAGNOSIS_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE REHAB_DIAGNOSIS_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE REHAB_DIAGNOSIS_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_rehab_diagnosis_in      IN rehab_diagnosis_hist.id_rehab_diagnosis%TYPE,
        dt_rehab_diagnosis_hist_in IN rehab_diagnosis_hist.dt_rehab_diagnosis_hist%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_diagnosis_hist
         WHERE id_rehab_diagnosis = id_rehab_diagnosis_in
           AND dt_rehab_diagnosis_hist = dt_rehab_diagnosis_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_rehab_diagnosis_in      IN rehab_diagnosis_hist.id_rehab_diagnosis%TYPE,
        dt_rehab_diagnosis_hist_in IN rehab_diagnosis_hist.dt_rehab_diagnosis_hist%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_rehab_diagnosis_in      => id_rehab_diagnosis_in,
            dt_rehab_diagnosis_hist_in => dt_rehab_diagnosis_hist_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_REHAB_DIAGNOSIS
    PROCEDURE del_id_rehab_diagnosis
    (
        id_rehab_diagnosis_in IN rehab_diagnosis_hist.id_rehab_diagnosis%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_diagnosis_hist
         WHERE id_rehab_diagnosis = id_rehab_diagnosis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_rehab_diagnosis;

    -- Delete all rows for primary key column DT_REHAB_DIAGNOSIS_HIST
    PROCEDURE del_dt_rehab_diagnosis_hist
    (
        dt_rehab_diagnosis_hist_in IN rehab_diagnosis_hist.dt_rehab_diagnosis_hist%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_diagnosis_hist
         WHERE dt_rehab_diagnosis_hist = dt_rehab_diagnosis_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_dt_rehab_diagnosis_hist;

    -- Delete all rows for primary key column ID_REHAB_DIAGNOSIS
    PROCEDURE del_id_rehab_diagnosis
    (
        id_rehab_diagnosis_in IN rehab_diagnosis_hist.id_rehab_diagnosis%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_rehab_diagnosis(id_rehab_diagnosis_in => id_rehab_diagnosis_in,
                               handle_error_in       => handle_error_in,
                               rows_out              => rows_out);
    END del_id_rehab_diagnosis;

    -- Delete all rows for primary key column DT_REHAB_DIAGNOSIS_HIST
    PROCEDURE del_dt_rehab_diagnosis_hist
    (
        dt_rehab_diagnosis_hist_in IN rehab_diagnosis_hist.dt_rehab_diagnosis_hist%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dt_rehab_diagnosis_hist(dt_rehab_diagnosis_hist_in => dt_rehab_diagnosis_hist_in,
                                    handle_error_in            => handle_error_in,
                                    rows_out                   => rows_out);
    END del_dt_rehab_diagnosis_hist;

    PROCEDURE del_rdgh_iqai_fk
    (
        id_iqs_active_incapacity_in IN rehab_diagnosis_hist.id_iqs_active_incapacity%TYPE,
        id_iq_active_incapacity_in  IN rehab_diagnosis_hist.id_iq_active_incapacity%TYPE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_diagnosis_hist
         WHERE id_iqs_active_incapacity = del_rdgh_iqai_fk.id_iqs_active_incapacity_in
           AND id_iq_active_incapacity = del_rdgh_iqai_fk.id_iq_active_incapacity_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_rdgh_iqai_fk;

    PROCEDURE del_rdgh_iqai_fk
    (
        id_iqs_active_incapacity_in IN rehab_diagnosis_hist.id_iqs_active_incapacity%TYPE,
        id_iq_active_incapacity_in  IN rehab_diagnosis_hist.id_iq_active_incapacity%TYPE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rdgh_iqai_fk(id_iqs_active_incapacity_in => id_iqs_active_incapacity_in,
                         id_iq_active_incapacity_in  => id_iq_active_incapacity_in,
                         handle_error_in             => handle_error_in,
                         rows_out                    => rows_out);
    END del_rdgh_iqai_fk;

    PROCEDURE del_rdgh_iqer_fk
    (
        id_iqs_expected_result_in IN rehab_diagnosis_hist.id_iqs_expected_result%TYPE,
        id_iq_expected_result_in  IN rehab_diagnosis_hist.id_iq_expected_result%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_diagnosis_hist
         WHERE id_iqs_expected_result = del_rdgh_iqer_fk.id_iqs_expected_result_in
           AND id_iq_expected_result = del_rdgh_iqer_fk.id_iq_expected_result_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_rdgh_iqer_fk;

    PROCEDURE del_rdgh_iqer_fk
    (
        id_iqs_expected_result_in IN rehab_diagnosis_hist.id_iqs_expected_result%TYPE,
        id_iq_expected_result_in  IN rehab_diagnosis_hist.id_iq_expected_result%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rdgh_iqer_fk(id_iqs_expected_result_in => id_iqs_expected_result_in,
                         id_iq_expected_result_in  => id_iq_expected_result_in,
                         handle_error_in           => handle_error_in,
                         rows_out                  => rows_out);
    END del_rdgh_iqer_fk;

    PROCEDURE del_rdgh_iqii_fk
    (
        id_iqs_initial_incapacity_in IN rehab_diagnosis_hist.id_iqs_initial_incapacity%TYPE,
        id_iq_initial_incapacity_in  IN rehab_diagnosis_hist.id_iq_initial_incapacity%TYPE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_diagnosis_hist
         WHERE id_iqs_initial_incapacity = del_rdgh_iqii_fk.id_iqs_initial_incapacity_in
           AND id_iq_initial_incapacity = del_rdgh_iqii_fk.id_iq_initial_incapacity_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_rdgh_iqii_fk;

    PROCEDURE del_rdgh_iqii_fk
    (
        id_iqs_initial_incapacity_in IN rehab_diagnosis_hist.id_iqs_initial_incapacity%TYPE,
        id_iq_initial_incapacity_in  IN rehab_diagnosis_hist.id_iq_initial_incapacity%TYPE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rdgh_iqii_fk(id_iqs_initial_incapacity_in => id_iqs_initial_incapacity_in,
                         id_iq_initial_incapacity_in  => id_iq_initial_incapacity_in,
                         handle_error_in              => handle_error_in,
                         rows_out                     => rows_out);
    END del_rdgh_iqii_fk;

    PROCEDURE del_rdgh_rd_fk
    (
        id_rehab_diagnosis_in IN rehab_diagnosis_hist.id_rehab_diagnosis%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_diagnosis_hist
         WHERE id_rehab_diagnosis = del_rdgh_rd_fk.id_rehab_diagnosis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_rdgh_rd_fk;

    PROCEDURE del_rdgh_rd_fk
    (
        id_rehab_diagnosis_in IN rehab_diagnosis_hist.id_rehab_diagnosis%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rdgh_rd_fk(id_rehab_diagnosis_in => id_rehab_diagnosis_in,
                       handle_error_in       => handle_error_in,
                       rows_out              => rows_out);
    END del_rdgh_rd_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM REHAB_DIAGNOSIS_HIST';
        ELSE
            RETURN 'DELETE FROM REHAB_DIAGNOSIS_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_DIAGNOSIS_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_DIAGNOSIS_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(rehab_diagnosis_hist_inout IN OUT rehab_diagnosis_hist%ROWTYPE) IS
    BEGIN
        rehab_diagnosis_hist_inout.dt_rehab_diagnosis_hist   := NULL;
        rehab_diagnosis_hist_inout.id_rehab_diagnosis        := NULL;
        rehab_diagnosis_hist_inout.id_icf                    := NULL;
        rehab_diagnosis_hist_inout.id_iq_initial_incapacity  := NULL;
        rehab_diagnosis_hist_inout.id_iqs_initial_incapacity := NULL;
        rehab_diagnosis_hist_inout.id_iq_expected_result     := NULL;
        rehab_diagnosis_hist_inout.id_iqs_expected_result    := NULL;
        rehab_diagnosis_hist_inout.id_iq_active_incapacity   := NULL;
        rehab_diagnosis_hist_inout.id_iqs_active_incapacity  := NULL;
        rehab_diagnosis_hist_inout.flg_status                := NULL;
        rehab_diagnosis_hist_inout.id_episode_origin         := NULL;
        rehab_diagnosis_hist_inout.id_episode                := NULL;
        rehab_diagnosis_hist_inout.id_patient                := NULL;
        rehab_diagnosis_hist_inout.notes                     := NULL;
        rehab_diagnosis_hist_inout.id_cancel_reason          := NULL;
        rehab_diagnosis_hist_inout.notes_cancel              := NULL;
        rehab_diagnosis_hist_inout.id_prof_last_update       := NULL;
        rehab_diagnosis_hist_inout.dt_last_update            := NULL;
        rehab_diagnosis_hist_inout.create_user               := NULL;
        rehab_diagnosis_hist_inout.create_time               := NULL;
        rehab_diagnosis_hist_inout.create_institution        := NULL;
        rehab_diagnosis_hist_inout.update_user               := NULL;
        rehab_diagnosis_hist_inout.update_time               := NULL;
        rehab_diagnosis_hist_inout.update_institution        := NULL;
    END initrec;

    FUNCTION initrec RETURN rehab_diagnosis_hist%ROWTYPE IS
        l_rehab_diagnosis_hist rehab_diagnosis_hist%ROWTYPE;
    BEGIN
        RETURN l_rehab_diagnosis_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN rehab_diagnosis_hist_tc IS
        data rehab_diagnosis_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM rehab_diagnosis_hist
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN rehab_diagnosis_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data rehab_diagnosis_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_rehab_diagnosis_hist;
/
