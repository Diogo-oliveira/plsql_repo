/*-- Last Change Revision: $Rev: 2027964 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:49 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_bmng_action
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Julho 31, 2009 2:38:56
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_bmng_action_in           IN bmng_action.id_bmng_action%TYPE,
        id_room_in                  IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_bed_in                   IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        flg_target_action_in        IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_status_in               IN bmng_action.flg_status%TYPE DEFAULT 'A',
        flg_origin_action_in        IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        id_prof_creation_in         IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in              IN bmng_action.dt_creation%TYPE DEFAULT current_timestamp,
        nch_capacity_in             IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        action_notes_in             IN bmng_action.action_notes%TYPE DEFAULT NULL,
        dt_begin_action_in          IN bmng_action.dt_begin_action%TYPE DEFAULT current_timestamp,
        dt_end_action_in            IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        create_user_in              IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_action.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_action.update_institution%TYPE DEFAULT NULL,
        id_department_in            IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_cancel_reason_in         IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        flg_action_in               IN bmng_action.flg_action%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO bmng_action
            (id_bmng_action,
             id_room,
             id_bed,
             id_bmng_reason,
             id_bmng_reason_type,
             id_bmng_allocation_bed,
             flg_target_action,
             flg_status,
             flg_origin_action,
             flg_bed_ocupacity_status,
             flg_bed_status,
             flg_bed_cleaning_status,
             id_prof_creation,
             dt_creation,
             nch_capacity,
             action_notes,
             dt_begin_action,
             dt_end_action,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_department,
             id_cancel_reason,
             flg_action)
        VALUES
            (id_bmng_action_in,
             id_room_in,
             id_bed_in,
             id_bmng_reason_in,
             id_bmng_reason_type_in,
             id_bmng_allocation_bed_in,
             flg_target_action_in,
             flg_status_in,
             flg_origin_action_in,
             flg_bed_ocupacity_status_in,
             flg_bed_status_in,
             flg_bed_cleaning_status_in,
             id_prof_creation_in,
             dt_creation_in,
             nch_capacity_in,
             action_notes_in,
             dt_begin_action_in,
             dt_end_action_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_department_in,
             id_cancel_reason_in,
             flg_action_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BMNG_ACTION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    IF l_name = 'BAN_BAB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_ALLOCATION_BED',
                                                        value_in           => id_bmng_allocation_bed_in);
                    END IF;
                    IF l_name = 'BAN_BED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED',
                                                        value_in           => id_bed_in);
                    END IF;
                    IF l_name = 'BAN_BRN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_REASON',
                                                        value_in           => id_bmng_reason_in);
                    END IF;
                    IF l_name = 'BAN_BRT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_REASON_TYPE',
                                                        value_in           => id_bmng_reason_type_in);
                    END IF;
                    IF l_name = 'BAN_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'BAN_DEP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEPARTMENT',
                                                        value_in           => id_department_in);
                    END IF;
                    IF l_name = 'BAN_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATION',
                                                        value_in           => id_prof_creation_in);
                    END IF;
                    IF l_name = 'BAN_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_bmng_action_in           IN bmng_action.id_bmng_action%TYPE,
        id_room_in                  IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_bed_in                   IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        flg_target_action_in        IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_status_in               IN bmng_action.flg_status%TYPE DEFAULT 'A',
        flg_origin_action_in        IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        id_prof_creation_in         IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in              IN bmng_action.dt_creation%TYPE DEFAULT current_timestamp,
        nch_capacity_in             IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        action_notes_in             IN bmng_action.action_notes%TYPE DEFAULT NULL,
        dt_begin_action_in          IN bmng_action.dt_begin_action%TYPE DEFAULT current_timestamp,
        dt_end_action_in            IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        create_user_in              IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_action.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_action.update_institution%TYPE DEFAULT NULL,
        id_department_in            IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_cancel_reason_in         IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        flg_action_in               IN bmng_action.flg_action%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_bmng_action_in           => id_bmng_action_in,
            id_room_in                  => id_room_in,
            id_bed_in                   => id_bed_in,
            id_bmng_reason_in           => id_bmng_reason_in,
            id_bmng_reason_type_in      => id_bmng_reason_type_in,
            id_bmng_allocation_bed_in   => id_bmng_allocation_bed_in,
            flg_target_action_in        => flg_target_action_in,
            flg_status_in               => flg_status_in,
            flg_origin_action_in        => flg_origin_action_in,
            flg_bed_ocupacity_status_in => flg_bed_ocupacity_status_in,
            flg_bed_status_in           => flg_bed_status_in,
            flg_bed_cleaning_status_in  => flg_bed_cleaning_status_in,
            id_prof_creation_in         => id_prof_creation_in,
            dt_creation_in              => dt_creation_in,
            nch_capacity_in             => nch_capacity_in,
            action_notes_in             => action_notes_in,
            dt_begin_action_in          => dt_begin_action_in,
            dt_end_action_in            => dt_end_action_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_department_in            => id_department_in,
            id_cancel_reason_in         => id_cancel_reason_in,
            flg_action_in               => flg_action_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN bmng_action%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec bmng_action%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_bmng_action := next_key(sequence_in);
        END IF;
        ins(id_bmng_action_in           => l_rec.id_bmng_action,
            id_room_in                  => l_rec.id_room,
            id_bed_in                   => l_rec.id_bed,
            id_bmng_reason_in           => l_rec.id_bmng_reason,
            id_bmng_reason_type_in      => l_rec.id_bmng_reason_type,
            id_bmng_allocation_bed_in   => l_rec.id_bmng_allocation_bed,
            flg_target_action_in        => l_rec.flg_target_action,
            flg_status_in               => l_rec.flg_status,
            flg_origin_action_in        => l_rec.flg_origin_action,
            flg_bed_ocupacity_status_in => l_rec.flg_bed_ocupacity_status,
            flg_bed_status_in           => l_rec.flg_bed_status,
            flg_bed_cleaning_status_in  => l_rec.flg_bed_cleaning_status,
            id_prof_creation_in         => l_rec.id_prof_creation,
            dt_creation_in              => l_rec.dt_creation,
            nch_capacity_in             => l_rec.nch_capacity,
            action_notes_in             => l_rec.action_notes,
            dt_begin_action_in          => l_rec.dt_begin_action,
            dt_end_action_in            => l_rec.dt_end_action,
            create_user_in              => l_rec.create_user,
            create_time_in              => l_rec.create_time,
            create_institution_in       => l_rec.create_institution,
            update_user_in              => l_rec.update_user,
            update_time_in              => l_rec.update_time,
            update_institution_in       => l_rec.update_institution,
            id_department_in            => l_rec.id_department,
            id_cancel_reason_in         => l_rec.id_cancel_reason,
            flg_action_in               => l_rec.flg_action,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN bmng_action%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN bmng_action.id_bmng_action%TYPE
    
     IS
        retval bmng_action.id_bmng_action%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_bmng_action.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_BMNG_ACTION'));
    END next_key;

    PROCEDURE ins
    (
        id_room_in                  IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_bed_in                   IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        flg_target_action_in        IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_status_in               IN bmng_action.flg_status%TYPE DEFAULT 'A',
        flg_origin_action_in        IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        id_prof_creation_in         IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in              IN bmng_action.dt_creation%TYPE DEFAULT current_timestamp,
        nch_capacity_in             IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        action_notes_in             IN bmng_action.action_notes%TYPE DEFAULT NULL,
        dt_begin_action_in          IN bmng_action.dt_begin_action%TYPE DEFAULT current_timestamp,
        dt_end_action_in            IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        create_user_in              IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_action.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_action.update_institution%TYPE DEFAULT NULL,
        id_department_in            IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_cancel_reason_in         IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        flg_action_in               IN bmng_action.flg_action%TYPE DEFAULT NULL,
        id_bmng_action_out          IN OUT bmng_action.id_bmng_action%TYPE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
        l_pky bmng_action.id_bmng_action%TYPE := next_key;
    BEGIN
        ins(id_bmng_action_in           => l_pky,
            id_room_in                  => id_room_in,
            id_bed_in                   => id_bed_in,
            id_bmng_reason_in           => id_bmng_reason_in,
            id_bmng_reason_type_in      => id_bmng_reason_type_in,
            id_bmng_allocation_bed_in   => id_bmng_allocation_bed_in,
            flg_target_action_in        => flg_target_action_in,
            flg_status_in               => flg_status_in,
            flg_origin_action_in        => flg_origin_action_in,
            flg_bed_ocupacity_status_in => flg_bed_ocupacity_status_in,
            flg_bed_status_in           => flg_bed_status_in,
            flg_bed_cleaning_status_in  => flg_bed_cleaning_status_in,
            id_prof_creation_in         => id_prof_creation_in,
            dt_creation_in              => dt_creation_in,
            nch_capacity_in             => nch_capacity_in,
            action_notes_in             => action_notes_in,
            dt_begin_action_in          => dt_begin_action_in,
            dt_end_action_in            => dt_end_action_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_department_in            => id_department_in,
            id_cancel_reason_in         => id_cancel_reason_in,
            flg_action_in               => flg_action_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        id_bmng_action_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_room_in                  IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_bed_in                   IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        flg_target_action_in        IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_status_in               IN bmng_action.flg_status%TYPE DEFAULT 'A',
        flg_origin_action_in        IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        id_prof_creation_in         IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in              IN bmng_action.dt_creation%TYPE DEFAULT current_timestamp,
        nch_capacity_in             IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        action_notes_in             IN bmng_action.action_notes%TYPE DEFAULT NULL,
        dt_begin_action_in          IN bmng_action.dt_begin_action%TYPE DEFAULT current_timestamp,
        dt_end_action_in            IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        create_user_in              IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_action.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_action.update_institution%TYPE DEFAULT NULL,
        id_department_in            IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_cancel_reason_in         IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        flg_action_in               IN bmng_action.flg_action%TYPE DEFAULT NULL,
        id_bmng_action_out          IN OUT bmng_action.id_bmng_action%TYPE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_room_in                  => id_room_in,
            id_bed_in                   => id_bed_in,
            id_bmng_reason_in           => id_bmng_reason_in,
            id_bmng_reason_type_in      => id_bmng_reason_type_in,
            id_bmng_allocation_bed_in   => id_bmng_allocation_bed_in,
            flg_target_action_in        => flg_target_action_in,
            flg_status_in               => flg_status_in,
            flg_origin_action_in        => flg_origin_action_in,
            flg_bed_ocupacity_status_in => flg_bed_ocupacity_status_in,
            flg_bed_status_in           => flg_bed_status_in,
            flg_bed_cleaning_status_in  => flg_bed_cleaning_status_in,
            id_prof_creation_in         => id_prof_creation_in,
            dt_creation_in              => dt_creation_in,
            nch_capacity_in             => nch_capacity_in,
            action_notes_in             => action_notes_in,
            dt_begin_action_in          => dt_begin_action_in,
            dt_end_action_in            => dt_end_action_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_department_in            => id_department_in,
            id_cancel_reason_in         => id_cancel_reason_in,
            flg_action_in               => flg_action_in,
            id_bmng_action_out          => id_bmng_action_out,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    FUNCTION ins
    (
        id_room_in                  IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_bed_in                   IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        flg_target_action_in        IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_status_in               IN bmng_action.flg_status%TYPE DEFAULT 'A',
        flg_origin_action_in        IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        id_prof_creation_in         IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in              IN bmng_action.dt_creation%TYPE DEFAULT current_timestamp,
        nch_capacity_in             IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        action_notes_in             IN bmng_action.action_notes%TYPE DEFAULT NULL,
        dt_begin_action_in          IN bmng_action.dt_begin_action%TYPE DEFAULT current_timestamp,
        dt_end_action_in            IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        create_user_in              IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_action.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_action.update_institution%TYPE DEFAULT NULL,
        id_department_in            IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_cancel_reason_in         IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        flg_action_in               IN bmng_action.flg_action%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) RETURN bmng_action.id_bmng_action%TYPE IS
        l_pky bmng_action.id_bmng_action%TYPE := next_key;
    BEGIN
        ins(id_bmng_action_in           => l_pky,
            id_room_in                  => id_room_in,
            id_bed_in                   => id_bed_in,
            id_bmng_reason_in           => id_bmng_reason_in,
            id_bmng_reason_type_in      => id_bmng_reason_type_in,
            id_bmng_allocation_bed_in   => id_bmng_allocation_bed_in,
            flg_target_action_in        => flg_target_action_in,
            flg_status_in               => flg_status_in,
            flg_origin_action_in        => flg_origin_action_in,
            flg_bed_ocupacity_status_in => flg_bed_ocupacity_status_in,
            flg_bed_status_in           => flg_bed_status_in,
            flg_bed_cleaning_status_in  => flg_bed_cleaning_status_in,
            id_prof_creation_in         => id_prof_creation_in,
            dt_creation_in              => dt_creation_in,
            nch_capacity_in             => nch_capacity_in,
            action_notes_in             => action_notes_in,
            dt_begin_action_in          => dt_begin_action_in,
            dt_end_action_in            => dt_end_action_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_department_in            => id_department_in,
            id_cancel_reason_in         => id_cancel_reason_in,
            flg_action_in               => flg_action_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_room_in                  IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_bed_in                   IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        flg_target_action_in        IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_status_in               IN bmng_action.flg_status%TYPE DEFAULT 'A',
        flg_origin_action_in        IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        id_prof_creation_in         IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in              IN bmng_action.dt_creation%TYPE DEFAULT current_timestamp,
        nch_capacity_in             IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        action_notes_in             IN bmng_action.action_notes%TYPE DEFAULT NULL,
        dt_begin_action_in          IN bmng_action.dt_begin_action%TYPE DEFAULT current_timestamp,
        dt_end_action_in            IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        create_user_in              IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_action.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_action.update_institution%TYPE DEFAULT NULL,
        id_department_in            IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_cancel_reason_in         IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        flg_action_in               IN bmng_action.flg_action%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) RETURN bmng_action.id_bmng_action%TYPE IS
        l_pky    bmng_action.id_bmng_action%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_bmng_action_in           => l_pky,
            id_room_in                  => id_room_in,
            id_bed_in                   => id_bed_in,
            id_bmng_reason_in           => id_bmng_reason_in,
            id_bmng_reason_type_in      => id_bmng_reason_type_in,
            id_bmng_allocation_bed_in   => id_bmng_allocation_bed_in,
            flg_target_action_in        => flg_target_action_in,
            flg_status_in               => flg_status_in,
            flg_origin_action_in        => flg_origin_action_in,
            flg_bed_ocupacity_status_in => flg_bed_ocupacity_status_in,
            flg_bed_status_in           => flg_bed_status_in,
            flg_bed_cleaning_status_in  => flg_bed_cleaning_status_in,
            id_prof_creation_in         => id_prof_creation_in,
            dt_creation_in              => dt_creation_in,
            nch_capacity_in             => nch_capacity_in,
            action_notes_in             => action_notes_in,
            dt_begin_action_in          => dt_begin_action_in,
            dt_end_action_in            => dt_end_action_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_department_in            => id_department_in,
            id_cancel_reason_in         => id_cancel_reason_in,
            flg_action_in               => flg_action_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_room_in                  IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_bed_in                   IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        flg_target_action_in        IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_status_in               IN bmng_action.flg_status%TYPE DEFAULT 'A',
        flg_origin_action_in        IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        id_prof_creation_in         IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in              IN bmng_action.dt_creation%TYPE DEFAULT current_timestamp,
        nch_capacity_in             IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        action_notes_in             IN bmng_action.action_notes%TYPE DEFAULT NULL,
        dt_begin_action_in          IN bmng_action.dt_begin_action%TYPE DEFAULT current_timestamp,
        dt_end_action_in            IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        create_user_in              IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_action.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_action.update_institution%TYPE DEFAULT NULL,
        id_department_in            IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_cancel_reason_in         IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        flg_action_in               IN bmng_action.flg_action%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
        l_pky bmng_action.id_bmng_action%TYPE := next_key;
    BEGIN
        ins(id_bmng_action_in           => l_pky,
            id_room_in                  => id_room_in,
            id_bed_in                   => id_bed_in,
            id_bmng_reason_in           => id_bmng_reason_in,
            id_bmng_reason_type_in      => id_bmng_reason_type_in,
            id_bmng_allocation_bed_in   => id_bmng_allocation_bed_in,
            flg_target_action_in        => flg_target_action_in,
            flg_status_in               => flg_status_in,
            flg_origin_action_in        => flg_origin_action_in,
            flg_bed_ocupacity_status_in => flg_bed_ocupacity_status_in,
            flg_bed_status_in           => flg_bed_status_in,
            flg_bed_cleaning_status_in  => flg_bed_cleaning_status_in,
            id_prof_creation_in         => id_prof_creation_in,
            dt_creation_in              => dt_creation_in,
            nch_capacity_in             => nch_capacity_in,
            action_notes_in             => action_notes_in,
            dt_begin_action_in          => dt_begin_action_in,
            dt_end_action_in            => dt_end_action_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_department_in            => id_department_in,
            id_cancel_reason_in         => id_cancel_reason_in,
            flg_action_in               => flg_action_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_room_in                  IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_bed_in                   IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        flg_target_action_in        IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_status_in               IN bmng_action.flg_status%TYPE DEFAULT 'A',
        flg_origin_action_in        IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        id_prof_creation_in         IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in              IN bmng_action.dt_creation%TYPE DEFAULT current_timestamp,
        nch_capacity_in             IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        action_notes_in             IN bmng_action.action_notes%TYPE DEFAULT NULL,
        dt_begin_action_in          IN bmng_action.dt_begin_action%TYPE DEFAULT current_timestamp,
        dt_end_action_in            IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        create_user_in              IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_action.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_action.update_institution%TYPE DEFAULT NULL,
        id_department_in            IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_cancel_reason_in         IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        flg_action_in               IN bmng_action.flg_action%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        l_pky    bmng_action.id_bmng_action%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_bmng_action_in           => l_pky,
            id_room_in                  => id_room_in,
            id_bed_in                   => id_bed_in,
            id_bmng_reason_in           => id_bmng_reason_in,
            id_bmng_reason_type_in      => id_bmng_reason_type_in,
            id_bmng_allocation_bed_in   => id_bmng_allocation_bed_in,
            flg_target_action_in        => flg_target_action_in,
            flg_status_in               => flg_status_in,
            flg_origin_action_in        => flg_origin_action_in,
            flg_bed_ocupacity_status_in => flg_bed_ocupacity_status_in,
            flg_bed_status_in           => flg_bed_status_in,
            flg_bed_cleaning_status_in  => flg_bed_cleaning_status_in,
            id_prof_creation_in         => id_prof_creation_in,
            dt_creation_in              => dt_creation_in,
            nch_capacity_in             => nch_capacity_in,
            action_notes_in             => action_notes_in,
            dt_begin_action_in          => dt_begin_action_in,
            dt_end_action_in            => dt_end_action_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_department_in            => id_department_in,
            id_cancel_reason_in         => id_cancel_reason_in,
            flg_action_in               => flg_action_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN bmng_action_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO bmng_action
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BMNG_ACTION _' || indx,
                                                        value_in           => rows_in(indx).id_bmng_action,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROOM _' || indx,
                                                        value_in           => rows_in(indx).id_room,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BED _' || indx,
                                                        value_in           => rows_in(indx).id_bed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BMNG_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_bmng_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BMNG_REASON_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_bmng_reason_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BMNG_ALLOCATION_BED _' || indx,
                                                        value_in           => rows_in(indx).id_bmng_allocation_bed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TARGET_ACTION _' || indx,
                                                        value_in           => rows_in(indx).flg_target_action,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_ORIGIN_ACTION _' || indx,
                                                        value_in           => rows_in(indx).flg_origin_action,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_BED_OCUPACITY_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_bed_ocupacity_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_BED_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_bed_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_BED_CLEANING_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_bed_cleaning_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CREATION _' || indx,
                                                        value_in           => rows_in(indx).id_prof_creation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CREATION _' || indx,
                                                        value_in           => rows_in(indx).dt_creation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NCH_CAPACITY _' || indx,
                                                        value_in           => rows_in(indx).nch_capacity,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ACTION_NOTES _' || indx,
                                                        value_in           => rows_in(indx).action_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BEGIN_ACTION _' || indx,
                                                        value_in           => rows_in(indx).dt_begin_action,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_END_ACTION _' || indx,
                                                        value_in           => rows_in(indx).dt_end_action,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DEPARTMENT _' || indx,
                                                        value_in           => rows_in(indx).id_department,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_ACTION _' || indx,
                                                        value_in           => rows_in(indx).flg_action,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'BMNG_ACTION',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN bmng_action_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_bmng_action_in            IN bmng_action.id_bmng_action%TYPE,
        id_room_in                   IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_room_nin                  IN BOOLEAN := TRUE,
        id_bed_in                    IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                   IN BOOLEAN := TRUE,
        id_bmng_reason_in            IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_nin           IN BOOLEAN := TRUE,
        id_bmng_reason_type_in       IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_reason_type_nin      IN BOOLEAN := TRUE,
        id_bmng_allocation_bed_in    IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_nin   IN BOOLEAN := TRUE,
        flg_target_action_in         IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_target_action_nin        IN BOOLEAN := TRUE,
        flg_status_in                IN bmng_action.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        flg_origin_action_in         IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_origin_action_nin        IN BOOLEAN := TRUE,
        flg_bed_ocupacity_status_in  IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_nin IN BOOLEAN := TRUE,
        flg_bed_status_in            IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_status_nin           IN BOOLEAN := TRUE,
        flg_bed_cleaning_status_in   IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_nin  IN BOOLEAN := TRUE,
        id_prof_creation_in          IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        id_prof_creation_nin         IN BOOLEAN := TRUE,
        dt_creation_in               IN bmng_action.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin              IN BOOLEAN := TRUE,
        nch_capacity_in              IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        nch_capacity_nin             IN BOOLEAN := TRUE,
        action_notes_in              IN bmng_action.action_notes%TYPE DEFAULT NULL,
        action_notes_nin             IN BOOLEAN := TRUE,
        dt_begin_action_in           IN bmng_action.dt_begin_action%TYPE DEFAULT NULL,
        dt_begin_action_nin          IN BOOLEAN := TRUE,
        dt_end_action_in             IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        dt_end_action_nin            IN BOOLEAN := TRUE,
        create_user_in               IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN bmng_action.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN bmng_action.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        id_department_in             IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_department_nin            IN BOOLEAN := TRUE,
        id_cancel_reason_in          IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin         IN BOOLEAN := TRUE,
        flg_action_in                IN bmng_action.flg_action%TYPE DEFAULT NULL,
        flg_action_nin               IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     IN OUT table_varchar
    ) IS
        l_rows_out                   table_varchar;
        l_id_room_n                  NUMBER(1);
        l_id_bed_n                   NUMBER(1);
        l_id_bmng_reason_n           NUMBER(1);
        l_id_bmng_reason_type_n      NUMBER(1);
        l_id_bmng_allocation_bed_n   NUMBER(1);
        l_flg_target_action_n        NUMBER(1);
        l_flg_status_n               NUMBER(1);
        l_flg_origin_action_n        NUMBER(1);
        l_flg_bed_ocupacity_status_n NUMBER(1);
        l_flg_bed_status_n           NUMBER(1);
        l_flg_bed_cleaning_status_n  NUMBER(1);
        l_id_prof_creation_n         NUMBER(1);
        l_dt_creation_n              NUMBER(1);
        l_nch_capacity_n             NUMBER(1);
        l_action_notes_n             NUMBER(1);
        l_dt_begin_action_n          NUMBER(1);
        l_dt_end_action_n            NUMBER(1);
        l_create_user_n              NUMBER(1);
        l_create_time_n              NUMBER(1);
        l_create_institution_n       NUMBER(1);
        l_update_user_n              NUMBER(1);
        l_update_time_n              NUMBER(1);
        l_update_institution_n       NUMBER(1);
        l_id_department_n            NUMBER(1);
        l_id_cancel_reason_n         NUMBER(1);
        l_flg_action_n               NUMBER(1);
    BEGIN
    
        l_id_room_n                  := sys.diutil.bool_to_int(id_room_nin);
        l_id_bed_n                   := sys.diutil.bool_to_int(id_bed_nin);
        l_id_bmng_reason_n           := sys.diutil.bool_to_int(id_bmng_reason_nin);
        l_id_bmng_reason_type_n      := sys.diutil.bool_to_int(id_bmng_reason_type_nin);
        l_id_bmng_allocation_bed_n   := sys.diutil.bool_to_int(id_bmng_allocation_bed_nin);
        l_flg_target_action_n        := sys.diutil.bool_to_int(flg_target_action_nin);
        l_flg_status_n               := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_origin_action_n        := sys.diutil.bool_to_int(flg_origin_action_nin);
        l_flg_bed_ocupacity_status_n := sys.diutil.bool_to_int(flg_bed_ocupacity_status_nin);
        l_flg_bed_status_n           := sys.diutil.bool_to_int(flg_bed_status_nin);
        l_flg_bed_cleaning_status_n  := sys.diutil.bool_to_int(flg_bed_cleaning_status_nin);
        l_id_prof_creation_n         := sys.diutil.bool_to_int(id_prof_creation_nin);
        l_dt_creation_n              := sys.diutil.bool_to_int(dt_creation_nin);
        l_nch_capacity_n             := sys.diutil.bool_to_int(nch_capacity_nin);
        l_action_notes_n             := sys.diutil.bool_to_int(action_notes_nin);
        l_dt_begin_action_n          := sys.diutil.bool_to_int(dt_begin_action_nin);
        l_dt_end_action_n            := sys.diutil.bool_to_int(dt_end_action_nin);
        l_create_user_n              := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n              := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n       := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n              := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n              := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n       := sys.diutil.bool_to_int(update_institution_nin);
        l_id_department_n            := sys.diutil.bool_to_int(id_department_nin);
        l_id_cancel_reason_n         := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_flg_action_n               := sys.diutil.bool_to_int(flg_action_nin);
    
        UPDATE bmng_action
           SET id_room                  = decode(l_id_room_n, 0, id_room_in, nvl(id_room_in, id_room)),
               id_bed                   = decode(l_id_bed_n, 0, id_bed_in, nvl(id_bed_in, id_bed)),
               id_bmng_reason           = decode(l_id_bmng_reason_n,
                                                 0,
                                                 id_bmng_reason_in,
                                                 nvl(id_bmng_reason_in, id_bmng_reason)),
               id_bmng_reason_type      = decode(l_id_bmng_reason_type_n,
                                                 0,
                                                 id_bmng_reason_type_in,
                                                 nvl(id_bmng_reason_type_in, id_bmng_reason_type)),
               id_bmng_allocation_bed   = decode(l_id_bmng_allocation_bed_n,
                                                 0,
                                                 id_bmng_allocation_bed_in,
                                                 nvl(id_bmng_allocation_bed_in, id_bmng_allocation_bed)),
               flg_target_action        = decode(l_flg_target_action_n,
                                                 0,
                                                 flg_target_action_in,
                                                 nvl(flg_target_action_in, flg_target_action)),
               flg_status               = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               flg_origin_action        = decode(l_flg_origin_action_n,
                                                 0,
                                                 flg_origin_action_in,
                                                 nvl(flg_origin_action_in, flg_origin_action)),
               flg_bed_ocupacity_status = decode(l_flg_bed_ocupacity_status_n,
                                                 0,
                                                 flg_bed_ocupacity_status_in,
                                                 nvl(flg_bed_ocupacity_status_in, flg_bed_ocupacity_status)),
               flg_bed_status           = decode(l_flg_bed_status_n,
                                                 0,
                                                 flg_bed_status_in,
                                                 nvl(flg_bed_status_in, flg_bed_status)),
               flg_bed_cleaning_status  = decode(l_flg_bed_cleaning_status_n,
                                                 0,
                                                 flg_bed_cleaning_status_in,
                                                 nvl(flg_bed_cleaning_status_in, flg_bed_cleaning_status)),
               id_prof_creation         = decode(l_id_prof_creation_n,
                                                 0,
                                                 id_prof_creation_in,
                                                 nvl(id_prof_creation_in, id_prof_creation)),
               dt_creation              = decode(l_dt_creation_n, 0, dt_creation_in, nvl(dt_creation_in, dt_creation)),
               nch_capacity             = decode(l_nch_capacity_n,
                                                 0,
                                                 nch_capacity_in,
                                                 nvl(nch_capacity_in, nch_capacity)),
               action_notes             = decode(l_action_notes_n,
                                                 0,
                                                 action_notes_in,
                                                 nvl(action_notes_in, action_notes)),
               dt_begin_action          = decode(l_dt_begin_action_n,
                                                 0,
                                                 dt_begin_action_in,
                                                 nvl(dt_begin_action_in, dt_begin_action)),
               dt_end_action            = decode(l_dt_end_action_n,
                                                 0,
                                                 dt_end_action_in,
                                                 nvl(dt_end_action_in, dt_end_action)),
               create_user              = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time              = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution       = decode(l_create_institution_n,
                                                 0,
                                                 create_institution_in,
                                                 nvl(create_institution_in, create_institution)),
               update_user              = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time              = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution       = decode(l_update_institution_n,
                                                 0,
                                                 update_institution_in,
                                                 nvl(update_institution_in, update_institution)),
               id_department            = decode(l_id_department_n,
                                                 0,
                                                 id_department_in,
                                                 nvl(id_department_in, id_department)),
               id_cancel_reason         = decode(l_id_cancel_reason_n,
                                                 0,
                                                 id_cancel_reason_in,
                                                 nvl(id_cancel_reason_in, id_cancel_reason)),
               flg_action               = decode(l_flg_action_n, 0, flg_action_in, nvl(flg_action_in, flg_action))
         WHERE id_bmng_action = id_bmng_action_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BMNG_ACTION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    IF l_name = 'BAN_BAB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_ALLOCATION_BED',
                                                        value_in           => id_bmng_allocation_bed_in);
                    END IF;
                    IF l_name = 'BAN_BED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED',
                                                        value_in           => id_bed_in);
                    END IF;
                    IF l_name = 'BAN_BRN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_REASON',
                                                        value_in           => id_bmng_reason_in);
                    END IF;
                    IF l_name = 'BAN_BRT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_REASON_TYPE',
                                                        value_in           => id_bmng_reason_type_in);
                    END IF;
                    IF l_name = 'BAN_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'BAN_DEP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEPARTMENT',
                                                        value_in           => id_department_in);
                    END IF;
                    IF l_name = 'BAN_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATION',
                                                        value_in           => id_prof_creation_in);
                    END IF;
                    IF l_name = 'BAN_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_bmng_action_in            IN bmng_action.id_bmng_action%TYPE,
        id_room_in                   IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_room_nin                  IN BOOLEAN := TRUE,
        id_bed_in                    IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                   IN BOOLEAN := TRUE,
        id_bmng_reason_in            IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_nin           IN BOOLEAN := TRUE,
        id_bmng_reason_type_in       IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_reason_type_nin      IN BOOLEAN := TRUE,
        id_bmng_allocation_bed_in    IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_nin   IN BOOLEAN := TRUE,
        flg_target_action_in         IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_target_action_nin        IN BOOLEAN := TRUE,
        flg_status_in                IN bmng_action.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        flg_origin_action_in         IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_origin_action_nin        IN BOOLEAN := TRUE,
        flg_bed_ocupacity_status_in  IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_nin IN BOOLEAN := TRUE,
        flg_bed_status_in            IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_status_nin           IN BOOLEAN := TRUE,
        flg_bed_cleaning_status_in   IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_nin  IN BOOLEAN := TRUE,
        id_prof_creation_in          IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        id_prof_creation_nin         IN BOOLEAN := TRUE,
        dt_creation_in               IN bmng_action.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin              IN BOOLEAN := TRUE,
        nch_capacity_in              IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        nch_capacity_nin             IN BOOLEAN := TRUE,
        action_notes_in              IN bmng_action.action_notes%TYPE DEFAULT NULL,
        action_notes_nin             IN BOOLEAN := TRUE,
        dt_begin_action_in           IN bmng_action.dt_begin_action%TYPE DEFAULT NULL,
        dt_begin_action_nin          IN BOOLEAN := TRUE,
        dt_end_action_in             IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        dt_end_action_nin            IN BOOLEAN := TRUE,
        create_user_in               IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN bmng_action.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN bmng_action.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        id_department_in             IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_department_nin            IN BOOLEAN := TRUE,
        id_cancel_reason_in          IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin         IN BOOLEAN := TRUE,
        flg_action_in                IN bmng_action.flg_action%TYPE DEFAULT NULL,
        flg_action_nin               IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_bmng_action_in            => id_bmng_action_in,
            id_room_in                   => id_room_in,
            id_room_nin                  => id_room_nin,
            id_bed_in                    => id_bed_in,
            id_bed_nin                   => id_bed_nin,
            id_bmng_reason_in            => id_bmng_reason_in,
            id_bmng_reason_nin           => id_bmng_reason_nin,
            id_bmng_reason_type_in       => id_bmng_reason_type_in,
            id_bmng_reason_type_nin      => id_bmng_reason_type_nin,
            id_bmng_allocation_bed_in    => id_bmng_allocation_bed_in,
            id_bmng_allocation_bed_nin   => id_bmng_allocation_bed_nin,
            flg_target_action_in         => flg_target_action_in,
            flg_target_action_nin        => flg_target_action_nin,
            flg_status_in                => flg_status_in,
            flg_status_nin               => flg_status_nin,
            flg_origin_action_in         => flg_origin_action_in,
            flg_origin_action_nin        => flg_origin_action_nin,
            flg_bed_ocupacity_status_in  => flg_bed_ocupacity_status_in,
            flg_bed_ocupacity_status_nin => flg_bed_ocupacity_status_nin,
            flg_bed_status_in            => flg_bed_status_in,
            flg_bed_status_nin           => flg_bed_status_nin,
            flg_bed_cleaning_status_in   => flg_bed_cleaning_status_in,
            flg_bed_cleaning_status_nin  => flg_bed_cleaning_status_nin,
            id_prof_creation_in          => id_prof_creation_in,
            id_prof_creation_nin         => id_prof_creation_nin,
            dt_creation_in               => dt_creation_in,
            dt_creation_nin              => dt_creation_nin,
            nch_capacity_in              => nch_capacity_in,
            nch_capacity_nin             => nch_capacity_nin,
            action_notes_in              => action_notes_in,
            action_notes_nin             => action_notes_nin,
            dt_begin_action_in           => dt_begin_action_in,
            dt_begin_action_nin          => dt_begin_action_nin,
            dt_end_action_in             => dt_end_action_in,
            dt_end_action_nin            => dt_end_action_nin,
            create_user_in               => create_user_in,
            create_user_nin              => create_user_nin,
            create_time_in               => create_time_in,
            create_time_nin              => create_time_nin,
            create_institution_in        => create_institution_in,
            create_institution_nin       => create_institution_nin,
            update_user_in               => update_user_in,
            update_user_nin              => update_user_nin,
            update_time_in               => update_time_in,
            update_time_nin              => update_time_nin,
            update_institution_in        => update_institution_in,
            update_institution_nin       => update_institution_nin,
            id_department_in             => id_department_in,
            id_department_nin            => id_department_nin,
            id_cancel_reason_in          => id_cancel_reason_in,
            id_cancel_reason_nin         => id_cancel_reason_nin,
            flg_action_in                => flg_action_in,
            flg_action_nin               => flg_action_nin,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_room_in                   IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_room_nin                  IN BOOLEAN := TRUE,
        id_bed_in                    IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                   IN BOOLEAN := TRUE,
        id_bmng_reason_in            IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_nin           IN BOOLEAN := TRUE,
        id_bmng_reason_type_in       IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_reason_type_nin      IN BOOLEAN := TRUE,
        id_bmng_allocation_bed_in    IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_nin   IN BOOLEAN := TRUE,
        flg_target_action_in         IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_target_action_nin        IN BOOLEAN := TRUE,
        flg_status_in                IN bmng_action.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        flg_origin_action_in         IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_origin_action_nin        IN BOOLEAN := TRUE,
        flg_bed_ocupacity_status_in  IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_nin IN BOOLEAN := TRUE,
        flg_bed_status_in            IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_status_nin           IN BOOLEAN := TRUE,
        flg_bed_cleaning_status_in   IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_nin  IN BOOLEAN := TRUE,
        id_prof_creation_in          IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        id_prof_creation_nin         IN BOOLEAN := TRUE,
        dt_creation_in               IN bmng_action.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin              IN BOOLEAN := TRUE,
        nch_capacity_in              IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        nch_capacity_nin             IN BOOLEAN := TRUE,
        action_notes_in              IN bmng_action.action_notes%TYPE DEFAULT NULL,
        action_notes_nin             IN BOOLEAN := TRUE,
        dt_begin_action_in           IN bmng_action.dt_begin_action%TYPE DEFAULT NULL,
        dt_begin_action_nin          IN BOOLEAN := TRUE,
        dt_end_action_in             IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        dt_end_action_nin            IN BOOLEAN := TRUE,
        create_user_in               IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN bmng_action.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN bmng_action.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        id_department_in             IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_department_nin            IN BOOLEAN := TRUE,
        id_cancel_reason_in          IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin         IN BOOLEAN := TRUE,
        flg_action_in                IN bmng_action.flg_action%TYPE DEFAULT NULL,
        flg_action_nin               IN BOOLEAN := TRUE,
        where_in                     VARCHAR2 DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     IN OUT table_varchar
    ) IS
        l_sql                        VARCHAR2(32767);
        l_rows_out                   table_varchar;
        l_id_room_n                  NUMBER(1);
        l_id_bed_n                   NUMBER(1);
        l_id_bmng_reason_n           NUMBER(1);
        l_id_bmng_reason_type_n      NUMBER(1);
        l_id_bmng_allocation_bed_n   NUMBER(1);
        l_flg_target_action_n        NUMBER(1);
        l_flg_status_n               NUMBER(1);
        l_flg_origin_action_n        NUMBER(1);
        l_flg_bed_ocupacity_status_n NUMBER(1);
        l_flg_bed_status_n           NUMBER(1);
        l_flg_bed_cleaning_status_n  NUMBER(1);
        l_id_prof_creation_n         NUMBER(1);
        l_dt_creation_n              NUMBER(1);
        l_nch_capacity_n             NUMBER(1);
        l_action_notes_n             NUMBER(1);
        l_dt_begin_action_n          NUMBER(1);
        l_dt_end_action_n            NUMBER(1);
        l_create_user_n              NUMBER(1);
        l_create_time_n              NUMBER(1);
        l_create_institution_n       NUMBER(1);
        l_update_user_n              NUMBER(1);
        l_update_time_n              NUMBER(1);
        l_update_institution_n       NUMBER(1);
        l_id_department_n            NUMBER(1);
        l_id_cancel_reason_n         NUMBER(1);
        l_flg_action_n               NUMBER(1);
        id_bmng_action_in            bmng_action.id_bmng_action%TYPE;
    BEGIN
    
        l_id_room_n                  := sys.diutil.bool_to_int(id_room_nin);
        l_id_bed_n                   := sys.diutil.bool_to_int(id_bed_nin);
        l_id_bmng_reason_n           := sys.diutil.bool_to_int(id_bmng_reason_nin);
        l_id_bmng_reason_type_n      := sys.diutil.bool_to_int(id_bmng_reason_type_nin);
        l_id_bmng_allocation_bed_n   := sys.diutil.bool_to_int(id_bmng_allocation_bed_nin);
        l_flg_target_action_n        := sys.diutil.bool_to_int(flg_target_action_nin);
        l_flg_status_n               := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_origin_action_n        := sys.diutil.bool_to_int(flg_origin_action_nin);
        l_flg_bed_ocupacity_status_n := sys.diutil.bool_to_int(flg_bed_ocupacity_status_nin);
        l_flg_bed_status_n           := sys.diutil.bool_to_int(flg_bed_status_nin);
        l_flg_bed_cleaning_status_n  := sys.diutil.bool_to_int(flg_bed_cleaning_status_nin);
        l_id_prof_creation_n         := sys.diutil.bool_to_int(id_prof_creation_nin);
        l_dt_creation_n              := sys.diutil.bool_to_int(dt_creation_nin);
        l_nch_capacity_n             := sys.diutil.bool_to_int(nch_capacity_nin);
        l_action_notes_n             := sys.diutil.bool_to_int(action_notes_nin);
        l_dt_begin_action_n          := sys.diutil.bool_to_int(dt_begin_action_nin);
        l_dt_end_action_n            := sys.diutil.bool_to_int(dt_end_action_nin);
        l_create_user_n              := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n              := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n       := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n              := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n              := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n       := sys.diutil.bool_to_int(update_institution_nin);
        l_id_department_n            := sys.diutil.bool_to_int(id_department_nin);
        l_id_cancel_reason_n         := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_flg_action_n               := sys.diutil.bool_to_int(flg_action_nin);
    
        l_sql := 'UPDATE BMNG_ACTION SET ' || ' ID_ROOM = decode (' || l_id_room_n ||
                 ',0,:id_room_in, NVL (:id_room_in, ID_ROOM)) ' || ',' || ' ID_BED = decode (' || l_id_bed_n ||
                 ',0,:id_bed_in, NVL (:id_bed_in, ID_BED)) ' || ',' || ' ID_BMNG_REASON = decode (' ||
                 l_id_bmng_reason_n || ',0,:id_bmng_reason_in, NVL (:id_bmng_reason_in, ID_BMNG_REASON)) ' || ',' ||
                 ' ID_BMNG_REASON_TYPE = decode (' || l_id_bmng_reason_type_n ||
                 ',0,:id_bmng_reason_type_in, NVL (:id_bmng_reason_type_in, ID_BMNG_REASON_TYPE)) ' || ',' ||
                 ' ID_BMNG_ALLOCATION_BED = decode (' || l_id_bmng_allocation_bed_n ||
                 ',0,:id_bmng_allocation_bed_in, NVL (:id_bmng_allocation_bed_in, ID_BMNG_ALLOCATION_BED)) ' || ',' ||
                 ' FLG_TARGET_ACTION = decode (' || l_flg_target_action_n ||
                 ',0,:flg_target_action_in, NVL (:flg_target_action_in, FLG_TARGET_ACTION)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' FLG_ORIGIN_ACTION = decode (' || l_flg_origin_action_n ||
                 ',0,:flg_origin_action_in, NVL (:flg_origin_action_in, FLG_ORIGIN_ACTION)) ' || ',' ||
                 ' FLG_BED_OCUPACITY_STATUS = decode (' || l_flg_bed_ocupacity_status_n ||
                 ',0,:flg_bed_ocupacity_status_in, NVL (:flg_bed_ocupacity_status_in, FLG_BED_OCUPACITY_STATUS)) ' || ',' ||
                 ' FLG_BED_STATUS = decode (' || l_flg_bed_status_n ||
                 ',0,:flg_bed_status_in, NVL (:flg_bed_status_in, FLG_BED_STATUS)) ' || ',' ||
                 ' FLG_BED_CLEANING_STATUS = decode (' || l_flg_bed_cleaning_status_n ||
                 ',0,:flg_bed_cleaning_status_in, NVL (:flg_bed_cleaning_status_in, FLG_BED_CLEANING_STATUS)) ' || ',' ||
                 ' ID_PROF_CREATION = decode (' || l_id_prof_creation_n ||
                 ',0,:id_prof_creation_in, NVL (:id_prof_creation_in, ID_PROF_CREATION)) ' || ',' ||
                 ' DT_CREATION = decode (' || l_dt_creation_n ||
                 ',0,:dt_creation_in, NVL (:dt_creation_in, DT_CREATION)) ' || ',' || ' NCH_CAPACITY = decode (' ||
                 l_nch_capacity_n || ',0,:nch_capacity_in, NVL (:nch_capacity_in, NCH_CAPACITY)) ' || ',' ||
                 ' ACTION_NOTES = decode (' || l_action_notes_n ||
                 ',0,:action_notes_in, NVL (:action_notes_in, ACTION_NOTES)) ' || ',' || ' DT_BEGIN_ACTION = decode (' ||
                 l_dt_begin_action_n || ',0,:dt_begin_action_in, NVL (:dt_begin_action_in, DT_BEGIN_ACTION)) ' || ',' ||
                 ' DT_END_ACTION = decode (' || l_dt_end_action_n ||
                 ',0,:dt_end_action_in, NVL (:dt_end_action_in, DT_END_ACTION)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_DEPARTMENT = decode (' || l_id_department_n ||
                 ',0,:id_department_in, NVL (:id_department_in, ID_DEPARTMENT)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' FLG_ACTION = decode (' || l_flg_action_n || ',0,:flg_action_in, NVL (:flg_action_in, FLG_ACTION)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_room_in, id_bed_in, id_bmng_reason_in, id_bmng_reason_type_in, id_bmng_allocation_bed_in, flg_target_action_in, flg_status_in, flg_origin_action_in, flg_bed_ocupacity_status_in, flg_bed_status_in, flg_bed_cleaning_status_in, id_prof_creation_in, dt_creation_in, nch_capacity_in, action_notes_in, dt_begin_action_in, dt_end_action_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_department_in, id_cancel_reason_in, flg_action_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BMNG_ACTION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    IF l_name = 'BAN_BAB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_ALLOCATION_BED',
                                                        value_in           => id_bmng_allocation_bed_in);
                    END IF;
                    IF l_name = 'BAN_BED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED',
                                                        value_in           => id_bed_in);
                    END IF;
                    IF l_name = 'BAN_BRN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_REASON',
                                                        value_in           => id_bmng_reason_in);
                    END IF;
                    IF l_name = 'BAN_BRT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_REASON_TYPE',
                                                        value_in           => id_bmng_reason_type_in);
                    END IF;
                    IF l_name = 'BAN_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'BAN_DEP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEPARTMENT',
                                                        value_in           => id_department_in);
                    END IF;
                    IF l_name = 'BAN_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATION',
                                                        value_in           => id_prof_creation_in);
                    END IF;
                    IF l_name = 'BAN_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_room_in                   IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_room_nin                  IN BOOLEAN := TRUE,
        id_bed_in                    IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                   IN BOOLEAN := TRUE,
        id_bmng_reason_in            IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_nin           IN BOOLEAN := TRUE,
        id_bmng_reason_type_in       IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_reason_type_nin      IN BOOLEAN := TRUE,
        id_bmng_allocation_bed_in    IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_nin   IN BOOLEAN := TRUE,
        flg_target_action_in         IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_target_action_nin        IN BOOLEAN := TRUE,
        flg_status_in                IN bmng_action.flg_status%TYPE DEFAULT NULL,
        flg_status_nin               IN BOOLEAN := TRUE,
        flg_origin_action_in         IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_origin_action_nin        IN BOOLEAN := TRUE,
        flg_bed_ocupacity_status_in  IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_nin IN BOOLEAN := TRUE,
        flg_bed_status_in            IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_status_nin           IN BOOLEAN := TRUE,
        flg_bed_cleaning_status_in   IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_nin  IN BOOLEAN := TRUE,
        id_prof_creation_in          IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        id_prof_creation_nin         IN BOOLEAN := TRUE,
        dt_creation_in               IN bmng_action.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin              IN BOOLEAN := TRUE,
        nch_capacity_in              IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        nch_capacity_nin             IN BOOLEAN := TRUE,
        action_notes_in              IN bmng_action.action_notes%TYPE DEFAULT NULL,
        action_notes_nin             IN BOOLEAN := TRUE,
        dt_begin_action_in           IN bmng_action.dt_begin_action%TYPE DEFAULT NULL,
        dt_begin_action_nin          IN BOOLEAN := TRUE,
        dt_end_action_in             IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        dt_end_action_nin            IN BOOLEAN := TRUE,
        create_user_in               IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN bmng_action.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN bmng_action.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        id_department_in             IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_department_nin            IN BOOLEAN := TRUE,
        id_cancel_reason_in          IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin         IN BOOLEAN := TRUE,
        flg_action_in                IN bmng_action.flg_action%TYPE DEFAULT NULL,
        flg_action_nin               IN BOOLEAN := TRUE,
        where_in                     VARCHAR2 DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_room_in                   => id_room_in,
            id_room_nin                  => id_room_nin,
            id_bed_in                    => id_bed_in,
            id_bed_nin                   => id_bed_nin,
            id_bmng_reason_in            => id_bmng_reason_in,
            id_bmng_reason_nin           => id_bmng_reason_nin,
            id_bmng_reason_type_in       => id_bmng_reason_type_in,
            id_bmng_reason_type_nin      => id_bmng_reason_type_nin,
            id_bmng_allocation_bed_in    => id_bmng_allocation_bed_in,
            id_bmng_allocation_bed_nin   => id_bmng_allocation_bed_nin,
            flg_target_action_in         => flg_target_action_in,
            flg_target_action_nin        => flg_target_action_nin,
            flg_status_in                => flg_status_in,
            flg_status_nin               => flg_status_nin,
            flg_origin_action_in         => flg_origin_action_in,
            flg_origin_action_nin        => flg_origin_action_nin,
            flg_bed_ocupacity_status_in  => flg_bed_ocupacity_status_in,
            flg_bed_ocupacity_status_nin => flg_bed_ocupacity_status_nin,
            flg_bed_status_in            => flg_bed_status_in,
            flg_bed_status_nin           => flg_bed_status_nin,
            flg_bed_cleaning_status_in   => flg_bed_cleaning_status_in,
            flg_bed_cleaning_status_nin  => flg_bed_cleaning_status_nin,
            id_prof_creation_in          => id_prof_creation_in,
            id_prof_creation_nin         => id_prof_creation_nin,
            dt_creation_in               => dt_creation_in,
            dt_creation_nin              => dt_creation_nin,
            nch_capacity_in              => nch_capacity_in,
            nch_capacity_nin             => nch_capacity_nin,
            action_notes_in              => action_notes_in,
            action_notes_nin             => action_notes_nin,
            dt_begin_action_in           => dt_begin_action_in,
            dt_begin_action_nin          => dt_begin_action_nin,
            dt_end_action_in             => dt_end_action_in,
            dt_end_action_nin            => dt_end_action_nin,
            create_user_in               => create_user_in,
            create_user_nin              => create_user_nin,
            create_time_in               => create_time_in,
            create_time_nin              => create_time_nin,
            create_institution_in        => create_institution_in,
            create_institution_nin       => create_institution_nin,
            update_user_in               => update_user_in,
            update_user_nin              => update_user_nin,
            update_time_in               => update_time_in,
            update_time_nin              => update_time_nin,
            update_institution_in        => update_institution_in,
            update_institution_nin       => update_institution_nin,
            id_department_in             => id_department_in,
            id_department_nin            => id_department_nin,
            id_cancel_reason_in          => id_cancel_reason_in,
            id_cancel_reason_nin         => id_cancel_reason_nin,
            flg_action_in                => flg_action_in,
            flg_action_nin               => flg_action_nin,
            where_in                     => where_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN bmng_action%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_bmng_action_in           => rec_in.id_bmng_action,
            id_room_in                  => rec_in.id_room,
            id_bed_in                   => rec_in.id_bed,
            id_bmng_reason_in           => rec_in.id_bmng_reason,
            id_bmng_reason_type_in      => rec_in.id_bmng_reason_type,
            id_bmng_allocation_bed_in   => rec_in.id_bmng_allocation_bed,
            flg_target_action_in        => rec_in.flg_target_action,
            flg_status_in               => rec_in.flg_status,
            flg_origin_action_in        => rec_in.flg_origin_action,
            flg_bed_ocupacity_status_in => rec_in.flg_bed_ocupacity_status,
            flg_bed_status_in           => rec_in.flg_bed_status,
            flg_bed_cleaning_status_in  => rec_in.flg_bed_cleaning_status,
            id_prof_creation_in         => rec_in.id_prof_creation,
            dt_creation_in              => rec_in.dt_creation,
            nch_capacity_in             => rec_in.nch_capacity,
            action_notes_in             => rec_in.action_notes,
            dt_begin_action_in          => rec_in.dt_begin_action,
            dt_end_action_in            => rec_in.dt_end_action,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution,
            id_department_in            => rec_in.id_department,
            id_cancel_reason_in         => rec_in.id_cancel_reason,
            flg_action_in               => rec_in.flg_action
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN bmng_action%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_bmng_action_in           => rec_in.id_bmng_action,
            id_room_in                  => rec_in.id_room,
            id_bed_in                   => rec_in.id_bed,
            id_bmng_reason_in           => rec_in.id_bmng_reason,
            id_bmng_reason_type_in      => rec_in.id_bmng_reason_type,
            id_bmng_allocation_bed_in   => rec_in.id_bmng_allocation_bed,
            flg_target_action_in        => rec_in.flg_target_action,
            flg_status_in               => rec_in.flg_status,
            flg_origin_action_in        => rec_in.flg_origin_action,
            flg_bed_ocupacity_status_in => rec_in.flg_bed_ocupacity_status,
            flg_bed_status_in           => rec_in.flg_bed_status,
            flg_bed_cleaning_status_in  => rec_in.flg_bed_cleaning_status,
            id_prof_creation_in         => rec_in.id_prof_creation,
            dt_creation_in              => rec_in.dt_creation,
            nch_capacity_in             => rec_in.nch_capacity,
            action_notes_in             => rec_in.action_notes,
            dt_begin_action_in          => rec_in.dt_begin_action,
            dt_end_action_in            => rec_in.dt_end_action,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution,
            id_department_in            => rec_in.id_department,
            id_cancel_reason_in         => rec_in.id_cancel_reason,
            flg_action_in               => rec_in.flg_action
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_bmng_action_in           IN bmng_action.id_bmng_action%TYPE,
        id_room_in                  IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_bed_in                   IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        flg_target_action_in        IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_status_in               IN bmng_action.flg_status%TYPE DEFAULT NULL,
        flg_origin_action_in        IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        id_prof_creation_in         IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in              IN bmng_action.dt_creation%TYPE DEFAULT NULL,
        nch_capacity_in             IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        action_notes_in             IN bmng_action.action_notes%TYPE DEFAULT NULL,
        dt_begin_action_in          IN bmng_action.dt_begin_action%TYPE DEFAULT NULL,
        dt_end_action_in            IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        create_user_in              IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_action.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_action.update_institution%TYPE DEFAULT NULL,
        id_department_in            IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_cancel_reason_in         IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        flg_action_in               IN bmng_action.flg_action%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        upd(id_bmng_action_in           => id_bmng_action_in,
            id_room_in                  => id_room_in,
            id_bed_in                   => id_bed_in,
            id_bmng_reason_in           => id_bmng_reason_in,
            id_bmng_reason_type_in      => id_bmng_reason_type_in,
            id_bmng_allocation_bed_in   => id_bmng_allocation_bed_in,
            flg_target_action_in        => flg_target_action_in,
            flg_status_in               => flg_status_in,
            flg_origin_action_in        => flg_origin_action_in,
            flg_bed_ocupacity_status_in => flg_bed_ocupacity_status_in,
            flg_bed_status_in           => flg_bed_status_in,
            flg_bed_cleaning_status_in  => flg_bed_cleaning_status_in,
            id_prof_creation_in         => id_prof_creation_in,
            dt_creation_in              => dt_creation_in,
            nch_capacity_in             => nch_capacity_in,
            action_notes_in             => action_notes_in,
            dt_begin_action_in          => dt_begin_action_in,
            dt_end_action_in            => dt_end_action_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_department_in            => id_department_in,
            id_cancel_reason_in         => id_cancel_reason_in,
            flg_action_in               => flg_action_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_bmng_action_in           => id_bmng_action_in,
                id_room_in                  => id_room_in,
                id_bed_in                   => id_bed_in,
                id_bmng_reason_in           => id_bmng_reason_in,
                id_bmng_reason_type_in      => id_bmng_reason_type_in,
                id_bmng_allocation_bed_in   => id_bmng_allocation_bed_in,
                flg_target_action_in        => flg_target_action_in,
                flg_status_in               => flg_status_in,
                flg_origin_action_in        => flg_origin_action_in,
                flg_bed_ocupacity_status_in => flg_bed_ocupacity_status_in,
                flg_bed_status_in           => flg_bed_status_in,
                flg_bed_cleaning_status_in  => flg_bed_cleaning_status_in,
                id_prof_creation_in         => id_prof_creation_in,
                dt_creation_in              => dt_creation_in,
                nch_capacity_in             => nch_capacity_in,
                action_notes_in             => action_notes_in,
                dt_begin_action_in          => dt_begin_action_in,
                dt_end_action_in            => dt_end_action_in,
                create_user_in              => create_user_in,
                create_time_in              => create_time_in,
                create_institution_in       => create_institution_in,
                update_user_in              => update_user_in,
                update_time_in              => update_time_in,
                update_institution_in       => update_institution_in,
                id_department_in            => id_department_in,
                id_cancel_reason_in         => id_cancel_reason_in,
                flg_action_in               => flg_action_in,
                handle_error_in             => handle_error_in,
                rows_out                    => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_bmng_action_in           IN bmng_action.id_bmng_action%TYPE,
        id_room_in                  IN bmng_action.id_room%TYPE DEFAULT NULL,
        id_bed_in                   IN bmng_action.id_bed%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_action.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_action.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_action.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        flg_target_action_in        IN bmng_action.flg_target_action%TYPE DEFAULT NULL,
        flg_status_in               IN bmng_action.flg_status%TYPE DEFAULT NULL,
        flg_origin_action_in        IN bmng_action.flg_origin_action%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_action.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_action.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_action.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        id_prof_creation_in         IN bmng_action.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in              IN bmng_action.dt_creation%TYPE DEFAULT NULL,
        nch_capacity_in             IN bmng_action.nch_capacity%TYPE DEFAULT NULL,
        action_notes_in             IN bmng_action.action_notes%TYPE DEFAULT NULL,
        dt_begin_action_in          IN bmng_action.dt_begin_action%TYPE DEFAULT NULL,
        dt_end_action_in            IN bmng_action.dt_end_action%TYPE DEFAULT NULL,
        create_user_in              IN bmng_action.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_action.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_action.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_action.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_action.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_action.update_institution%TYPE DEFAULT NULL,
        id_department_in            IN bmng_action.id_department%TYPE DEFAULT NULL,
        id_cancel_reason_in         IN bmng_action.id_cancel_reason%TYPE DEFAULT NULL,
        flg_action_in               IN bmng_action.flg_action%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_bmng_action_in,
                id_room_in,
                id_bed_in,
                id_bmng_reason_in,
                id_bmng_reason_type_in,
                id_bmng_allocation_bed_in,
                flg_target_action_in,
                flg_status_in,
                flg_origin_action_in,
                flg_bed_ocupacity_status_in,
                flg_bed_status_in,
                flg_bed_cleaning_status_in,
                id_prof_creation_in,
                dt_creation_in,
                nch_capacity_in,
                action_notes_in,
                dt_begin_action_in,
                dt_end_action_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_department_in,
                id_cancel_reason_in,
                flg_action_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN bmng_action_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_bmng_action           id_bmng_action_cc;
        l_id_room                  id_room_cc;
        l_id_bed                   id_bed_cc;
        l_id_bmng_reason           id_bmng_reason_cc;
        l_id_bmng_reason_type      id_bmng_reason_type_cc;
        l_id_bmng_allocation_bed   id_bmng_allocation_bed_cc;
        l_flg_target_action        flg_target_action_cc;
        l_flg_status               flg_status_cc;
        l_flg_origin_action        flg_origin_action_cc;
        l_flg_bed_ocupacity_status flg_bed_ocupacity_status_cc;
        l_flg_bed_status           flg_bed_status_cc;
        l_flg_bed_cleaning_status  flg_bed_cleaning_status_cc;
        l_id_prof_creation         id_prof_creation_cc;
        l_dt_creation              dt_creation_cc;
        l_nch_capacity             nch_capacity_cc;
        l_action_notes             action_notes_cc;
        l_dt_begin_action          dt_begin_action_cc;
        l_dt_end_action            dt_end_action_cc;
        l_create_user              create_user_cc;
        l_create_time              create_time_cc;
        l_create_institution       create_institution_cc;
        l_update_user              update_user_cc;
        l_update_time              update_time_cc;
        l_update_institution       update_institution_cc;
        l_id_department            id_department_cc;
        l_id_cancel_reason         id_cancel_reason_cc;
        l_flg_action               flg_action_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_bmng_action(i) := col_in(i).id_bmng_action;
            l_id_room(i) := col_in(i).id_room;
            l_id_bed(i) := col_in(i).id_bed;
            l_id_bmng_reason(i) := col_in(i).id_bmng_reason;
            l_id_bmng_reason_type(i) := col_in(i).id_bmng_reason_type;
            l_id_bmng_allocation_bed(i) := col_in(i).id_bmng_allocation_bed;
            l_flg_target_action(i) := col_in(i).flg_target_action;
            l_flg_status(i) := col_in(i).flg_status;
            l_flg_origin_action(i) := col_in(i).flg_origin_action;
            l_flg_bed_ocupacity_status(i) := col_in(i).flg_bed_ocupacity_status;
            l_flg_bed_status(i) := col_in(i).flg_bed_status;
            l_flg_bed_cleaning_status(i) := col_in(i).flg_bed_cleaning_status;
            l_id_prof_creation(i) := col_in(i).id_prof_creation;
            l_dt_creation(i) := col_in(i).dt_creation;
            l_nch_capacity(i) := col_in(i).nch_capacity;
            l_action_notes(i) := col_in(i).action_notes;
            l_dt_begin_action(i) := col_in(i).dt_begin_action;
            l_dt_end_action(i) := col_in(i).dt_end_action;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_department(i) := col_in(i).id_department;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_flg_action(i) := col_in(i).flg_action;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE bmng_action
                   SET id_room                  = nvl(l_id_room(i), id_room),
                       id_bed                   = nvl(l_id_bed(i), id_bed),
                       id_bmng_reason           = nvl(l_id_bmng_reason(i), id_bmng_reason),
                       id_bmng_reason_type      = nvl(l_id_bmng_reason_type(i), id_bmng_reason_type),
                       id_bmng_allocation_bed   = nvl(l_id_bmng_allocation_bed(i), id_bmng_allocation_bed),
                       flg_target_action        = nvl(l_flg_target_action(i), flg_target_action),
                       flg_status               = nvl(l_flg_status(i), flg_status),
                       flg_origin_action        = nvl(l_flg_origin_action(i), flg_origin_action),
                       flg_bed_ocupacity_status = nvl(l_flg_bed_ocupacity_status(i), flg_bed_ocupacity_status),
                       flg_bed_status           = nvl(l_flg_bed_status(i), flg_bed_status),
                       flg_bed_cleaning_status  = nvl(l_flg_bed_cleaning_status(i), flg_bed_cleaning_status),
                       id_prof_creation         = nvl(l_id_prof_creation(i), id_prof_creation),
                       dt_creation              = nvl(l_dt_creation(i), dt_creation),
                       nch_capacity             = nvl(l_nch_capacity(i), nch_capacity),
                       action_notes             = nvl(l_action_notes(i), action_notes),
                       dt_begin_action          = nvl(l_dt_begin_action(i), dt_begin_action),
                       dt_end_action            = nvl(l_dt_end_action(i), dt_end_action),
                       create_user              = nvl(l_create_user(i), create_user),
                       create_time              = nvl(l_create_time(i), create_time),
                       create_institution       = nvl(l_create_institution(i), create_institution),
                       update_user              = nvl(l_update_user(i), update_user),
                       update_time              = nvl(l_update_time(i), update_time),
                       update_institution       = nvl(l_update_institution(i), update_institution),
                       id_department            = nvl(l_id_department(i), id_department),
                       id_cancel_reason         = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       flg_action               = nvl(l_flg_action(i), flg_action)
                 WHERE id_bmng_action = l_id_bmng_action(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE bmng_action
                   SET id_room                  = l_id_room(i),
                       id_bed                   = l_id_bed(i),
                       id_bmng_reason           = l_id_bmng_reason(i),
                       id_bmng_reason_type      = l_id_bmng_reason_type(i),
                       id_bmng_allocation_bed   = l_id_bmng_allocation_bed(i),
                       flg_target_action        = l_flg_target_action(i),
                       flg_status               = l_flg_status(i),
                       flg_origin_action        = l_flg_origin_action(i),
                       flg_bed_ocupacity_status = l_flg_bed_ocupacity_status(i),
                       flg_bed_status           = l_flg_bed_status(i),
                       flg_bed_cleaning_status  = l_flg_bed_cleaning_status(i),
                       id_prof_creation         = l_id_prof_creation(i),
                       dt_creation              = l_dt_creation(i),
                       nch_capacity             = l_nch_capacity(i),
                       action_notes             = l_action_notes(i),
                       dt_begin_action          = l_dt_begin_action(i),
                       dt_end_action            = l_dt_end_action(i),
                       create_user              = l_create_user(i),
                       create_time              = l_create_time(i),
                       create_institution       = l_create_institution(i),
                       update_user              = l_update_user(i),
                       update_time              = l_update_time(i),
                       update_institution       = l_update_institution(i),
                       id_department            = l_id_department(i),
                       id_cancel_reason         = l_id_cancel_reason(i),
                       flg_action               = l_flg_action(i)
                 WHERE id_bmng_action = l_id_bmng_action(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN bmng_action_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE BMNG_ACTION
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE BMNG_ACTION
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE BMNG_ACTION set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE BMNG_ACTION set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_bmng_action_in IN bmng_action.id_bmng_action%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_action
         WHERE id_bmng_action = id_bmng_action_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_bmng_action_in IN bmng_action.id_bmng_action%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_bmng_action_in => id_bmng_action_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_BMNG_ACTION
    PROCEDURE del_id_bmng_action
    (
        id_bmng_action_in IN bmng_action.id_bmng_action%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_action
         WHERE id_bmng_action = id_bmng_action_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_bmng_action;

    -- Delete all rows for primary key column ID_BMNG_ACTION
    PROCEDURE del_id_bmng_action
    (
        id_bmng_action_in IN bmng_action.id_bmng_action%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_bmng_action(id_bmng_action_in => id_bmng_action_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_id_bmng_action;

    PROCEDURE del_ban_bab_fk
    (
        id_bmng_allocation_bed_in IN bmng_action.id_bmng_allocation_bed%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_action
         WHERE id_bmng_allocation_bed = del_ban_bab_fk.id_bmng_allocation_bed_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ban_bab_fk;

    PROCEDURE del_ban_bab_fk
    (
        id_bmng_allocation_bed_in IN bmng_action.id_bmng_allocation_bed%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ban_bab_fk(id_bmng_allocation_bed_in => id_bmng_allocation_bed_in,
                       handle_error_in           => handle_error_in,
                       rows_out                  => rows_out);
    END del_ban_bab_fk;

    PROCEDURE del_ban_bed_fk
    (
        id_bed_in       IN bmng_action.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_action
         WHERE id_bed = del_ban_bed_fk.id_bed_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ban_bed_fk;

    PROCEDURE del_ban_bed_fk
    (
        id_bed_in       IN bmng_action.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ban_bed_fk(id_bed_in => id_bed_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ban_bed_fk;

    PROCEDURE del_ban_brn_fk
    (
        id_bmng_reason_in IN bmng_action.id_bmng_reason%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_action
         WHERE id_bmng_reason = del_ban_brn_fk.id_bmng_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ban_brn_fk;

    PROCEDURE del_ban_brn_fk
    (
        id_bmng_reason_in IN bmng_action.id_bmng_reason%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ban_brn_fk(id_bmng_reason_in => id_bmng_reason_in,
                       handle_error_in   => handle_error_in,
                       rows_out          => rows_out);
    END del_ban_brn_fk;

    PROCEDURE del_ban_brt_fk
    (
        id_bmng_reason_type_in IN bmng_action.id_bmng_reason_type%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_action
         WHERE id_bmng_reason_type = del_ban_brt_fk.id_bmng_reason_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ban_brt_fk;

    PROCEDURE del_ban_brt_fk
    (
        id_bmng_reason_type_in IN bmng_action.id_bmng_reason_type%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ban_brt_fk(id_bmng_reason_type_in => id_bmng_reason_type_in,
                       handle_error_in        => handle_error_in,
                       rows_out               => rows_out);
    END del_ban_brt_fk;

    PROCEDURE del_ban_cre_fk
    (
        id_cancel_reason_in IN bmng_action.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_action
         WHERE id_cancel_reason = del_ban_cre_fk.id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ban_cre_fk;

    PROCEDURE del_ban_cre_fk
    (
        id_cancel_reason_in IN bmng_action.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ban_cre_fk(id_cancel_reason_in => id_cancel_reason_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_ban_cre_fk;

    PROCEDURE del_ban_dep_fk
    (
        id_department_in IN bmng_action.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_action
         WHERE id_department = del_ban_dep_fk.id_department_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ban_dep_fk;

    PROCEDURE del_ban_dep_fk
    (
        id_department_in IN bmng_action.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ban_dep_fk(id_department_in => id_department_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ban_dep_fk;

    PROCEDURE del_ban_prof_fk
    (
        id_prof_creation_in IN bmng_action.id_prof_creation%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_action
         WHERE id_prof_creation = del_ban_prof_fk.id_prof_creation_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ban_prof_fk;

    PROCEDURE del_ban_prof_fk
    (
        id_prof_creation_in IN bmng_action.id_prof_creation%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ban_prof_fk(id_prof_creation_in => id_prof_creation_in,
                        handle_error_in     => handle_error_in,
                        rows_out            => rows_out);
    END del_ban_prof_fk;

    PROCEDURE del_ban_room_fk
    (
        id_room_in      IN bmng_action.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_action
         WHERE id_room = del_ban_room_fk.id_room_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ban_room_fk;

    PROCEDURE del_ban_room_fk
    (
        id_room_in      IN bmng_action.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ban_room_fk(id_room_in => id_room_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ban_room_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM BMNG_ACTION';
        ELSE
            RETURN 'DELETE FROM BMNG_ACTION WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ACTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ACTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(bmng_action_inout IN OUT bmng_action%ROWTYPE) IS
    BEGIN
        bmng_action_inout.id_bmng_action           := NULL;
        bmng_action_inout.id_room                  := NULL;
        bmng_action_inout.id_bed                   := NULL;
        bmng_action_inout.id_bmng_reason           := NULL;
        bmng_action_inout.id_bmng_reason_type      := NULL;
        bmng_action_inout.id_bmng_allocation_bed   := NULL;
        bmng_action_inout.flg_target_action        := NULL;
        bmng_action_inout.flg_status               := 'A';
        bmng_action_inout.flg_origin_action        := NULL;
        bmng_action_inout.flg_bed_ocupacity_status := NULL;
        bmng_action_inout.flg_bed_status           := NULL;
        bmng_action_inout.flg_bed_cleaning_status  := NULL;
        bmng_action_inout.id_prof_creation         := NULL;
        bmng_action_inout.dt_creation              := current_timestamp;
        bmng_action_inout.nch_capacity             := NULL;
        bmng_action_inout.action_notes             := NULL;
        bmng_action_inout.dt_begin_action          := current_timestamp;
        bmng_action_inout.dt_end_action            := NULL;
        bmng_action_inout.create_user              := NULL;
        bmng_action_inout.create_time              := NULL;
        bmng_action_inout.create_institution       := NULL;
        bmng_action_inout.update_user              := NULL;
        bmng_action_inout.update_time              := NULL;
        bmng_action_inout.update_institution       := NULL;
        bmng_action_inout.id_department            := NULL;
        bmng_action_inout.id_cancel_reason         := NULL;
        bmng_action_inout.flg_action               := NULL;
    END initrec;

    FUNCTION initrec RETURN bmng_action%ROWTYPE IS
        l_bmng_action bmng_action%ROWTYPE;
    BEGIN
        l_bmng_action.flg_status               := 'A';
        l_bmng_action.flg_bed_ocupacity_status := NULL;
        l_bmng_action.flg_bed_status           := NULL;
        l_bmng_action.flg_bed_cleaning_status  := NULL;
        l_bmng_action.dt_creation              := current_timestamp;
        l_bmng_action.dt_begin_action          := current_timestamp;
        RETURN l_bmng_action;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN bmng_action_tc IS
        data bmng_action_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM bmng_action
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN bmng_action_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data bmng_action_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_bmng_action;
/
