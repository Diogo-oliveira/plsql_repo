/*-- Last Change Revision: $Rev: 2028406 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:35 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_tracking_board_ea
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Fevereiro 10, 2015 8:34:24
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_episode_in           IN tracking_board_ea.id_episode%TYPE,
        id_patient_in           IN tracking_board_ea.id_patient%TYPE DEFAULT NULL,
        id_epis_type_in         IN tracking_board_ea.id_epis_type%TYPE DEFAULT NULL,
        id_triage_color_in      IN tracking_board_ea.id_triage_color%TYPE DEFAULT NULL,
        id_fast_track_in        IN tracking_board_ea.id_fast_track%TYPE DEFAULT NULL,
        id_room_in              IN tracking_board_ea.id_room%TYPE DEFAULT NULL,
        id_bed_in               IN tracking_board_ea.id_bed%TYPE DEFAULT NULL,
        dt_begin_in             IN tracking_board_ea.dt_begin%TYPE DEFAULT NULL,
        id_diet_in              IN tracking_board_ea.id_diet%TYPE DEFAULT NULL,
        desc_diet_in            IN tracking_board_ea.desc_diet%TYPE DEFAULT NULL,
        id_prof_resp_in         IN tracking_board_ea.id_prof_resp%TYPE DEFAULT NULL,
        id_nurse_resp_in        IN tracking_board_ea.id_nurse_resp%TYPE DEFAULT NULL,
        lab_count_in            IN tracking_board_ea.lab_count%TYPE DEFAULT 0,
        lab_pend_in             IN tracking_board_ea.lab_pend%TYPE DEFAULT NULL,
        lab_req_in              IN tracking_board_ea.lab_req%TYPE DEFAULT NULL,
        lab_harv_in             IN tracking_board_ea.lab_harv%TYPE DEFAULT NULL,
        lab_transp_in           IN tracking_board_ea.lab_transp%TYPE DEFAULT NULL,
        lab_exec_in             IN tracking_board_ea.lab_exec%TYPE DEFAULT NULL,
        lab_result_in           IN tracking_board_ea.lab_result%TYPE DEFAULT NULL,
        lab_result_read_in      IN tracking_board_ea.lab_result_read%TYPE DEFAULT NULL,
        exam_count_in           IN tracking_board_ea.exam_count%TYPE DEFAULT 0,
        exam_pend_in            IN tracking_board_ea.exam_pend%TYPE DEFAULT NULL,
        exam_req_in             IN tracking_board_ea.exam_req%TYPE DEFAULT NULL,
        exam_transp_in          IN tracking_board_ea.exam_transp%TYPE DEFAULT NULL,
        exam_exec_in            IN tracking_board_ea.exam_exec%TYPE DEFAULT NULL,
        exam_result_in          IN tracking_board_ea.exam_result%TYPE DEFAULT NULL,
        exam_result_read_in     IN tracking_board_ea.exam_result_read%TYPE DEFAULT NULL,
        interv_count_in         IN tracking_board_ea.interv_count%TYPE DEFAULT 0,
        interv_pend_in          IN tracking_board_ea.interv_pend%TYPE DEFAULT NULL,
        interv_sos_in           IN tracking_board_ea.interv_sos%TYPE DEFAULT NULL,
        interv_req_in           IN tracking_board_ea.interv_req%TYPE DEFAULT NULL,
        interv_exec_in          IN tracking_board_ea.interv_exec%TYPE DEFAULT NULL,
        interv_finish_in        IN tracking_board_ea.interv_finish%TYPE DEFAULT NULL,
        med_count_in            IN tracking_board_ea.med_count%TYPE DEFAULT 0,
        med_pend_in             IN tracking_board_ea.med_pend%TYPE DEFAULT NULL,
        med_req_in              IN tracking_board_ea.med_req%TYPE DEFAULT NULL,
        med_exec_in             IN tracking_board_ea.med_exec%TYPE DEFAULT NULL,
        med_finish_in           IN tracking_board_ea.med_finish%TYPE DEFAULT NULL,
        med_sos_in              IN tracking_board_ea.med_sos%TYPE DEFAULT NULL,
        transp_count_in         IN tracking_board_ea.transp_count%TYPE DEFAULT 0,
        transp_delay_in         IN tracking_board_ea.transp_delay%TYPE DEFAULT NULL,
        transp_ongoing_in       IN tracking_board_ea.transp_ongoing%TYPE DEFAULT NULL,
        monit_count_in          IN tracking_board_ea.monit_count%TYPE DEFAULT 0,
        monit_delay_in          IN tracking_board_ea.monit_delay%TYPE DEFAULT NULL,
        monit_ongoing_in        IN tracking_board_ea.monit_ongoing%TYPE DEFAULT NULL,
        monit_finish_in         IN tracking_board_ea.monit_finish%TYPE DEFAULT NULL,
        dt_dg_last_update_in    IN tracking_board_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        create_user_in          IN tracking_board_ea.create_user%TYPE DEFAULT NULL,
        create_time_in          IN tracking_board_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN tracking_board_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN tracking_board_ea.update_user%TYPE DEFAULT NULL,
        update_time_in          IN tracking_board_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN tracking_board_ea.update_institution%TYPE DEFAULT NULL,
        lab_ext_in              IN tracking_board_ea.lab_ext%TYPE DEFAULT NULL,
        exam_ext_in             IN tracking_board_ea.exam_ext%TYPE DEFAULT NULL,
        exam_perf_in            IN tracking_board_ea.exam_perf%TYPE DEFAULT NULL,
        exam_wtg_in             IN tracking_board_ea.exam_wtg%TYPE DEFAULT NULL,
        lab_wtg_in              IN tracking_board_ea.lab_wtg%TYPE DEFAULT NULL,
        flg_has_stripes_in      IN tracking_board_ea.flg_has_stripes%TYPE DEFAULT NULL,
        lab_cc_in               IN tracking_board_ea.lab_cc%TYPE DEFAULT NULL,
        lab_sos_in              IN tracking_board_ea.lab_sos%TYPE DEFAULT NULL,
        exam_sos_in             IN tracking_board_ea.exam_sos%TYPE DEFAULT NULL,
        oth_exam_count_in       IN tracking_board_ea.oth_exam_count%TYPE DEFAULT 0,
        oth_exam_pend_in        IN tracking_board_ea.oth_exam_pend%TYPE DEFAULT NULL,
        oth_exam_req_in         IN tracking_board_ea.oth_exam_req%TYPE DEFAULT NULL,
        oth_exam_transp_in      IN tracking_board_ea.oth_exam_transp%TYPE DEFAULT NULL,
        oth_exam_exec_in        IN tracking_board_ea.oth_exam_exec%TYPE DEFAULT NULL,
        oth_exam_result_in      IN tracking_board_ea.oth_exam_result%TYPE DEFAULT NULL,
        oth_exam_result_read_in IN tracking_board_ea.oth_exam_result_read%TYPE DEFAULT NULL,
        oth_exam_ext_in         IN tracking_board_ea.oth_exam_ext%TYPE DEFAULT NULL,
        oth_exam_perf_in        IN tracking_board_ea.oth_exam_perf%TYPE DEFAULT NULL,
        oth_exam_wtg_in         IN tracking_board_ea.oth_exam_wtg%TYPE DEFAULT NULL,
        oth_exam_sos_in         IN tracking_board_ea.oth_exam_sos%TYPE DEFAULT NULL,
        opinion_count_in        IN tracking_board_ea.opinion_count%TYPE DEFAULT 0,
        opinion_state_in        IN tracking_board_ea.opinion_state%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO tracking_board_ea
            (id_episode,
             id_patient,
             id_epis_type,
             id_triage_color,
             id_fast_track,
             id_room,
             id_bed,
             dt_begin,
             id_diet,
             desc_diet,
             id_prof_resp,
             id_nurse_resp,
             lab_count,
             lab_pend,
             lab_req,
             lab_harv,
             lab_transp,
             lab_exec,
             lab_result,
             lab_result_read,
             exam_count,
             exam_pend,
             exam_req,
             exam_transp,
             exam_exec,
             exam_result,
             exam_result_read,
             interv_count,
             interv_pend,
             interv_sos,
             interv_req,
             interv_exec,
             interv_finish,
             med_count,
             med_pend,
             med_req,
             med_exec,
             med_finish,
             med_sos,
             transp_count,
             transp_delay,
             transp_ongoing,
             monit_count,
             monit_delay,
             monit_ongoing,
             monit_finish,
             dt_dg_last_update,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             lab_ext,
             exam_ext,
             exam_perf,
             exam_wtg,
             lab_wtg,
             flg_has_stripes,
             lab_cc,
             lab_sos,
             exam_sos,
             oth_exam_count,
             oth_exam_pend,
             oth_exam_req,
             oth_exam_transp,
             oth_exam_exec,
             oth_exam_result,
             oth_exam_result_read,
             oth_exam_ext,
             oth_exam_perf,
             oth_exam_wtg,
             oth_exam_sos,
             opinion_count,
             opinion_state)
        VALUES
            (id_episode_in,
             id_patient_in,
             id_epis_type_in,
             id_triage_color_in,
             id_fast_track_in,
             id_room_in,
             id_bed_in,
             dt_begin_in,
             id_diet_in,
             desc_diet_in,
             id_prof_resp_in,
             id_nurse_resp_in,
             lab_count_in,
             lab_pend_in,
             lab_req_in,
             lab_harv_in,
             lab_transp_in,
             lab_exec_in,
             lab_result_in,
             lab_result_read_in,
             exam_count_in,
             exam_pend_in,
             exam_req_in,
             exam_transp_in,
             exam_exec_in,
             exam_result_in,
             exam_result_read_in,
             interv_count_in,
             interv_pend_in,
             interv_sos_in,
             interv_req_in,
             interv_exec_in,
             interv_finish_in,
             med_count_in,
             med_pend_in,
             med_req_in,
             med_exec_in,
             med_finish_in,
             med_sos_in,
             transp_count_in,
             transp_delay_in,
             transp_ongoing_in,
             monit_count_in,
             monit_delay_in,
             monit_ongoing_in,
             monit_finish_in,
             dt_dg_last_update_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             lab_ext_in,
             exam_ext_in,
             exam_perf_in,
             exam_wtg_in,
             lab_wtg_in,
             flg_has_stripes_in,
             lab_cc_in,
             lab_sos_in,
             exam_sos_in,
             oth_exam_count_in,
             oth_exam_pend_in,
             oth_exam_req_in,
             oth_exam_transp_in,
             oth_exam_exec_in,
             oth_exam_result_in,
             oth_exam_result_read_in,
             oth_exam_ext_in,
             oth_exam_perf_in,
             oth_exam_wtg_in,
             oth_exam_sos_in,
             opinion_count_in,
             opinion_state_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'TRACKING_BOARD_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_episode_in           IN tracking_board_ea.id_episode%TYPE,
        id_patient_in           IN tracking_board_ea.id_patient%TYPE DEFAULT NULL,
        id_epis_type_in         IN tracking_board_ea.id_epis_type%TYPE DEFAULT NULL,
        id_triage_color_in      IN tracking_board_ea.id_triage_color%TYPE DEFAULT NULL,
        id_fast_track_in        IN tracking_board_ea.id_fast_track%TYPE DEFAULT NULL,
        id_room_in              IN tracking_board_ea.id_room%TYPE DEFAULT NULL,
        id_bed_in               IN tracking_board_ea.id_bed%TYPE DEFAULT NULL,
        dt_begin_in             IN tracking_board_ea.dt_begin%TYPE DEFAULT NULL,
        id_diet_in              IN tracking_board_ea.id_diet%TYPE DEFAULT NULL,
        desc_diet_in            IN tracking_board_ea.desc_diet%TYPE DEFAULT NULL,
        id_prof_resp_in         IN tracking_board_ea.id_prof_resp%TYPE DEFAULT NULL,
        id_nurse_resp_in        IN tracking_board_ea.id_nurse_resp%TYPE DEFAULT NULL,
        lab_count_in            IN tracking_board_ea.lab_count%TYPE DEFAULT 0,
        lab_pend_in             IN tracking_board_ea.lab_pend%TYPE DEFAULT NULL,
        lab_req_in              IN tracking_board_ea.lab_req%TYPE DEFAULT NULL,
        lab_harv_in             IN tracking_board_ea.lab_harv%TYPE DEFAULT NULL,
        lab_transp_in           IN tracking_board_ea.lab_transp%TYPE DEFAULT NULL,
        lab_exec_in             IN tracking_board_ea.lab_exec%TYPE DEFAULT NULL,
        lab_result_in           IN tracking_board_ea.lab_result%TYPE DEFAULT NULL,
        lab_result_read_in      IN tracking_board_ea.lab_result_read%TYPE DEFAULT NULL,
        exam_count_in           IN tracking_board_ea.exam_count%TYPE DEFAULT 0,
        exam_pend_in            IN tracking_board_ea.exam_pend%TYPE DEFAULT NULL,
        exam_req_in             IN tracking_board_ea.exam_req%TYPE DEFAULT NULL,
        exam_transp_in          IN tracking_board_ea.exam_transp%TYPE DEFAULT NULL,
        exam_exec_in            IN tracking_board_ea.exam_exec%TYPE DEFAULT NULL,
        exam_result_in          IN tracking_board_ea.exam_result%TYPE DEFAULT NULL,
        exam_result_read_in     IN tracking_board_ea.exam_result_read%TYPE DEFAULT NULL,
        interv_count_in         IN tracking_board_ea.interv_count%TYPE DEFAULT 0,
        interv_pend_in          IN tracking_board_ea.interv_pend%TYPE DEFAULT NULL,
        interv_sos_in           IN tracking_board_ea.interv_sos%TYPE DEFAULT NULL,
        interv_req_in           IN tracking_board_ea.interv_req%TYPE DEFAULT NULL,
        interv_exec_in          IN tracking_board_ea.interv_exec%TYPE DEFAULT NULL,
        interv_finish_in        IN tracking_board_ea.interv_finish%TYPE DEFAULT NULL,
        med_count_in            IN tracking_board_ea.med_count%TYPE DEFAULT 0,
        med_pend_in             IN tracking_board_ea.med_pend%TYPE DEFAULT NULL,
        med_req_in              IN tracking_board_ea.med_req%TYPE DEFAULT NULL,
        med_exec_in             IN tracking_board_ea.med_exec%TYPE DEFAULT NULL,
        med_finish_in           IN tracking_board_ea.med_finish%TYPE DEFAULT NULL,
        med_sos_in              IN tracking_board_ea.med_sos%TYPE DEFAULT NULL,
        transp_count_in         IN tracking_board_ea.transp_count%TYPE DEFAULT 0,
        transp_delay_in         IN tracking_board_ea.transp_delay%TYPE DEFAULT NULL,
        transp_ongoing_in       IN tracking_board_ea.transp_ongoing%TYPE DEFAULT NULL,
        monit_count_in          IN tracking_board_ea.monit_count%TYPE DEFAULT 0,
        monit_delay_in          IN tracking_board_ea.monit_delay%TYPE DEFAULT NULL,
        monit_ongoing_in        IN tracking_board_ea.monit_ongoing%TYPE DEFAULT NULL,
        monit_finish_in         IN tracking_board_ea.monit_finish%TYPE DEFAULT NULL,
        dt_dg_last_update_in    IN tracking_board_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        create_user_in          IN tracking_board_ea.create_user%TYPE DEFAULT NULL,
        create_time_in          IN tracking_board_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN tracking_board_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN tracking_board_ea.update_user%TYPE DEFAULT NULL,
        update_time_in          IN tracking_board_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN tracking_board_ea.update_institution%TYPE DEFAULT NULL,
        lab_ext_in              IN tracking_board_ea.lab_ext%TYPE DEFAULT NULL,
        exam_ext_in             IN tracking_board_ea.exam_ext%TYPE DEFAULT NULL,
        exam_perf_in            IN tracking_board_ea.exam_perf%TYPE DEFAULT NULL,
        exam_wtg_in             IN tracking_board_ea.exam_wtg%TYPE DEFAULT NULL,
        lab_wtg_in              IN tracking_board_ea.lab_wtg%TYPE DEFAULT NULL,
        flg_has_stripes_in      IN tracking_board_ea.flg_has_stripes%TYPE DEFAULT NULL,
        lab_cc_in               IN tracking_board_ea.lab_cc%TYPE DEFAULT NULL,
        lab_sos_in              IN tracking_board_ea.lab_sos%TYPE DEFAULT NULL,
        exam_sos_in             IN tracking_board_ea.exam_sos%TYPE DEFAULT NULL,
        oth_exam_count_in       IN tracking_board_ea.oth_exam_count%TYPE DEFAULT 0,
        oth_exam_pend_in        IN tracking_board_ea.oth_exam_pend%TYPE DEFAULT NULL,
        oth_exam_req_in         IN tracking_board_ea.oth_exam_req%TYPE DEFAULT NULL,
        oth_exam_transp_in      IN tracking_board_ea.oth_exam_transp%TYPE DEFAULT NULL,
        oth_exam_exec_in        IN tracking_board_ea.oth_exam_exec%TYPE DEFAULT NULL,
        oth_exam_result_in      IN tracking_board_ea.oth_exam_result%TYPE DEFAULT NULL,
        oth_exam_result_read_in IN tracking_board_ea.oth_exam_result_read%TYPE DEFAULT NULL,
        oth_exam_ext_in         IN tracking_board_ea.oth_exam_ext%TYPE DEFAULT NULL,
        oth_exam_perf_in        IN tracking_board_ea.oth_exam_perf%TYPE DEFAULT NULL,
        oth_exam_wtg_in         IN tracking_board_ea.oth_exam_wtg%TYPE DEFAULT NULL,
        oth_exam_sos_in         IN tracking_board_ea.oth_exam_sos%TYPE DEFAULT NULL,
        opinion_count_in        IN tracking_board_ea.opinion_count%TYPE DEFAULT 0,
        opinion_state_in        IN tracking_board_ea.opinion_state%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_episode_in           => id_episode_in,
            id_patient_in           => id_patient_in,
            id_epis_type_in         => id_epis_type_in,
            id_triage_color_in      => id_triage_color_in,
            id_fast_track_in        => id_fast_track_in,
            id_room_in              => id_room_in,
            id_bed_in               => id_bed_in,
            dt_begin_in             => dt_begin_in,
            id_diet_in              => id_diet_in,
            desc_diet_in            => desc_diet_in,
            id_prof_resp_in         => id_prof_resp_in,
            id_nurse_resp_in        => id_nurse_resp_in,
            lab_count_in            => lab_count_in,
            lab_pend_in             => lab_pend_in,
            lab_req_in              => lab_req_in,
            lab_harv_in             => lab_harv_in,
            lab_transp_in           => lab_transp_in,
            lab_exec_in             => lab_exec_in,
            lab_result_in           => lab_result_in,
            lab_result_read_in      => lab_result_read_in,
            exam_count_in           => exam_count_in,
            exam_pend_in            => exam_pend_in,
            exam_req_in             => exam_req_in,
            exam_transp_in          => exam_transp_in,
            exam_exec_in            => exam_exec_in,
            exam_result_in          => exam_result_in,
            exam_result_read_in     => exam_result_read_in,
            interv_count_in         => interv_count_in,
            interv_pend_in          => interv_pend_in,
            interv_sos_in           => interv_sos_in,
            interv_req_in           => interv_req_in,
            interv_exec_in          => interv_exec_in,
            interv_finish_in        => interv_finish_in,
            med_count_in            => med_count_in,
            med_pend_in             => med_pend_in,
            med_req_in              => med_req_in,
            med_exec_in             => med_exec_in,
            med_finish_in           => med_finish_in,
            med_sos_in              => med_sos_in,
            transp_count_in         => transp_count_in,
            transp_delay_in         => transp_delay_in,
            transp_ongoing_in       => transp_ongoing_in,
            monit_count_in          => monit_count_in,
            monit_delay_in          => monit_delay_in,
            monit_ongoing_in        => monit_ongoing_in,
            monit_finish_in         => monit_finish_in,
            dt_dg_last_update_in    => dt_dg_last_update_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            lab_ext_in              => lab_ext_in,
            exam_ext_in             => exam_ext_in,
            exam_perf_in            => exam_perf_in,
            exam_wtg_in             => exam_wtg_in,
            lab_wtg_in              => lab_wtg_in,
            flg_has_stripes_in      => flg_has_stripes_in,
            lab_cc_in               => lab_cc_in,
            lab_sos_in              => lab_sos_in,
            exam_sos_in             => exam_sos_in,
            oth_exam_count_in       => oth_exam_count_in,
            oth_exam_pend_in        => oth_exam_pend_in,
            oth_exam_req_in         => oth_exam_req_in,
            oth_exam_transp_in      => oth_exam_transp_in,
            oth_exam_exec_in        => oth_exam_exec_in,
            oth_exam_result_in      => oth_exam_result_in,
            oth_exam_result_read_in => oth_exam_result_read_in,
            oth_exam_ext_in         => oth_exam_ext_in,
            oth_exam_perf_in        => oth_exam_perf_in,
            oth_exam_wtg_in         => oth_exam_wtg_in,
            oth_exam_sos_in         => oth_exam_sos_in,
            opinion_count_in        => opinion_count_in,
            opinion_state_in        => opinion_state_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN tracking_board_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec tracking_board_ea%ROWTYPE := rec_in;
    BEGIN
        ins(id_episode_in           => l_rec.id_episode,
            id_patient_in           => l_rec.id_patient,
            id_epis_type_in         => l_rec.id_epis_type,
            id_triage_color_in      => l_rec.id_triage_color,
            id_fast_track_in        => l_rec.id_fast_track,
            id_room_in              => l_rec.id_room,
            id_bed_in               => l_rec.id_bed,
            dt_begin_in             => l_rec.dt_begin,
            id_diet_in              => l_rec.id_diet,
            desc_diet_in            => l_rec.desc_diet,
            id_prof_resp_in         => l_rec.id_prof_resp,
            id_nurse_resp_in        => l_rec.id_nurse_resp,
            lab_count_in            => l_rec.lab_count,
            lab_pend_in             => l_rec.lab_pend,
            lab_req_in              => l_rec.lab_req,
            lab_harv_in             => l_rec.lab_harv,
            lab_transp_in           => l_rec.lab_transp,
            lab_exec_in             => l_rec.lab_exec,
            lab_result_in           => l_rec.lab_result,
            lab_result_read_in      => l_rec.lab_result_read,
            exam_count_in           => l_rec.exam_count,
            exam_pend_in            => l_rec.exam_pend,
            exam_req_in             => l_rec.exam_req,
            exam_transp_in          => l_rec.exam_transp,
            exam_exec_in            => l_rec.exam_exec,
            exam_result_in          => l_rec.exam_result,
            exam_result_read_in     => l_rec.exam_result_read,
            interv_count_in         => l_rec.interv_count,
            interv_pend_in          => l_rec.interv_pend,
            interv_sos_in           => l_rec.interv_sos,
            interv_req_in           => l_rec.interv_req,
            interv_exec_in          => l_rec.interv_exec,
            interv_finish_in        => l_rec.interv_finish,
            med_count_in            => l_rec.med_count,
            med_pend_in             => l_rec.med_pend,
            med_req_in              => l_rec.med_req,
            med_exec_in             => l_rec.med_exec,
            med_finish_in           => l_rec.med_finish,
            med_sos_in              => l_rec.med_sos,
            transp_count_in         => l_rec.transp_count,
            transp_delay_in         => l_rec.transp_delay,
            transp_ongoing_in       => l_rec.transp_ongoing,
            monit_count_in          => l_rec.monit_count,
            monit_delay_in          => l_rec.monit_delay,
            monit_ongoing_in        => l_rec.monit_ongoing,
            monit_finish_in         => l_rec.monit_finish,
            dt_dg_last_update_in    => l_rec.dt_dg_last_update,
            create_user_in          => l_rec.create_user,
            create_time_in          => l_rec.create_time,
            create_institution_in   => l_rec.create_institution,
            update_user_in          => l_rec.update_user,
            update_time_in          => l_rec.update_time,
            update_institution_in   => l_rec.update_institution,
            lab_ext_in              => l_rec.lab_ext,
            exam_ext_in             => l_rec.exam_ext,
            exam_perf_in            => l_rec.exam_perf,
            exam_wtg_in             => l_rec.exam_wtg,
            lab_wtg_in              => l_rec.lab_wtg,
            flg_has_stripes_in      => l_rec.flg_has_stripes,
            lab_cc_in               => l_rec.lab_cc,
            lab_sos_in              => l_rec.lab_sos,
            exam_sos_in             => l_rec.exam_sos,
            oth_exam_count_in       => l_rec.oth_exam_count,
            oth_exam_pend_in        => l_rec.oth_exam_pend,
            oth_exam_req_in         => l_rec.oth_exam_req,
            oth_exam_transp_in      => l_rec.oth_exam_transp,
            oth_exam_exec_in        => l_rec.oth_exam_exec,
            oth_exam_result_in      => l_rec.oth_exam_result,
            oth_exam_result_read_in => l_rec.oth_exam_result_read,
            oth_exam_ext_in         => l_rec.oth_exam_ext,
            oth_exam_perf_in        => l_rec.oth_exam_perf,
            oth_exam_wtg_in         => l_rec.oth_exam_wtg,
            oth_exam_sos_in         => l_rec.oth_exam_sos,
            opinion_count_in        => l_rec.opinion_count,
            opinion_state_in        => l_rec.opinion_state,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN tracking_board_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN tracking_board_ea_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO tracking_board_ea
                    (id_episode,
                     id_patient,
                     id_epis_type,
                     id_triage_color,
                     id_fast_track,
                     id_room,
                     id_bed,
                     dt_begin,
                     id_diet,
                     desc_diet,
                     id_prof_resp,
                     id_nurse_resp,
                     lab_count,
                     lab_pend,
                     lab_req,
                     lab_harv,
                     lab_transp,
                     lab_exec,
                     lab_result,
                     lab_result_read,
                     exam_count,
                     exam_pend,
                     exam_req,
                     exam_transp,
                     exam_exec,
                     exam_result,
                     exam_result_read,
                     interv_count,
                     interv_pend,
                     interv_sos,
                     interv_req,
                     interv_exec,
                     interv_finish,
                     med_count,
                     med_pend,
                     med_req,
                     med_exec,
                     med_finish,
                     med_sos,
                     transp_count,
                     transp_delay,
                     transp_ongoing,
                     monit_count,
                     monit_delay,
                     monit_ongoing,
                     monit_finish,
                     dt_dg_last_update,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     lab_ext,
                     exam_ext,
                     exam_perf,
                     exam_wtg,
                     lab_wtg,
                     flg_has_stripes,
                     lab_cc,
                     lab_sos,
                     exam_sos,
                     oth_exam_count,
                     oth_exam_pend,
                     oth_exam_req,
                     oth_exam_transp,
                     oth_exam_exec,
                     oth_exam_result,
                     oth_exam_result_read,
                     oth_exam_ext,
                     oth_exam_perf,
                     oth_exam_wtg,
                     oth_exam_sos,
                     opinion_count,
                     opinion_state)
                VALUES
                    (rows_in(indx).id_episode,
                     rows_in(indx).id_patient,
                     rows_in(indx).id_epis_type,
                     rows_in(indx).id_triage_color,
                     rows_in(indx).id_fast_track,
                     rows_in(indx).id_room,
                     rows_in(indx).id_bed,
                     rows_in(indx).dt_begin,
                     rows_in(indx).id_diet,
                     rows_in(indx).desc_diet,
                     rows_in(indx).id_prof_resp,
                     rows_in(indx).id_nurse_resp,
                     rows_in(indx).lab_count,
                     rows_in(indx).lab_pend,
                     rows_in(indx).lab_req,
                     rows_in(indx).lab_harv,
                     rows_in(indx).lab_transp,
                     rows_in(indx).lab_exec,
                     rows_in(indx).lab_result,
                     rows_in(indx).lab_result_read,
                     rows_in(indx).exam_count,
                     rows_in(indx).exam_pend,
                     rows_in(indx).exam_req,
                     rows_in(indx).exam_transp,
                     rows_in(indx).exam_exec,
                     rows_in(indx).exam_result,
                     rows_in(indx).exam_result_read,
                     rows_in(indx).interv_count,
                     rows_in(indx).interv_pend,
                     rows_in(indx).interv_sos,
                     rows_in(indx).interv_req,
                     rows_in(indx).interv_exec,
                     rows_in(indx).interv_finish,
                     rows_in(indx).med_count,
                     rows_in(indx).med_pend,
                     rows_in(indx).med_req,
                     rows_in(indx).med_exec,
                     rows_in(indx).med_finish,
                     rows_in(indx).med_sos,
                     rows_in(indx).transp_count,
                     rows_in(indx).transp_delay,
                     rows_in(indx).transp_ongoing,
                     rows_in(indx).monit_count,
                     rows_in(indx).monit_delay,
                     rows_in(indx).monit_ongoing,
                     rows_in(indx).monit_finish,
                     rows_in(indx).dt_dg_last_update,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).lab_ext,
                     rows_in(indx).exam_ext,
                     rows_in(indx).exam_perf,
                     rows_in(indx).exam_wtg,
                     rows_in(indx).lab_wtg,
                     rows_in(indx).flg_has_stripes,
                     rows_in(indx).lab_cc,
                     rows_in(indx).lab_sos,
                     rows_in(indx).exam_sos,
                     rows_in(indx).oth_exam_count,
                     rows_in(indx).oth_exam_pend,
                     rows_in(indx).oth_exam_req,
                     rows_in(indx).oth_exam_transp,
                     rows_in(indx).oth_exam_exec,
                     rows_in(indx).oth_exam_result,
                     rows_in(indx).oth_exam_result_read,
                     rows_in(indx).oth_exam_ext,
                     rows_in(indx).oth_exam_perf,
                     rows_in(indx).oth_exam_wtg,
                     rows_in(indx).oth_exam_sos,
                     rows_in(indx).opinion_count,
                     rows_in(indx).opinion_state)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_epis_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TRIAGE_COLOR _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_triage_color,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_FAST_TRACK _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_fast_track,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROOM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_room,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BED _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_bed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BEGIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DIET _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_diet,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DESC_DIET _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .desc_diet,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_RESP _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_resp,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_NURSE_RESP _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_nurse_resp,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAB_COUNT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .lab_count,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAB_PEND _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .lab_pend,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAB_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .lab_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAB_HARV _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .lab_harv,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAB_TRANSP _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .lab_transp,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAB_EXEC _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .lab_exec,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAB_RESULT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .lab_result,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAB_RESULT_READ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .lab_result_read,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'EXAM_COUNT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .exam_count,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'EXAM_PEND _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .exam_pend,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'EXAM_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .exam_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'EXAM_TRANSP _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .exam_transp,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'EXAM_EXEC _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .exam_exec,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'EXAM_RESULT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .exam_result,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'EXAM_RESULT_READ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .exam_result_read,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'INTERV_COUNT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .interv_count,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'INTERV_PEND _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .interv_pend,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'INTERV_SOS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .interv_sos,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'INTERV_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .interv_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'INTERV_EXEC _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .interv_exec,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'INTERV_FINISH _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .interv_finish,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MED_COUNT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .med_count,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MED_PEND _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .med_pend,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MED_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .med_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MED_EXEC _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .med_exec,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MED_FINISH _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .med_finish,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MED_SOS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .med_sos,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TRANSP_COUNT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .transp_count,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TRANSP_DELAY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .transp_delay,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TRANSP_ONGOING _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .transp_ongoing,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MONIT_COUNT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .monit_count,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MONIT_DELAY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .monit_delay,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MONIT_ONGOING _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .monit_ongoing,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MONIT_FINISH _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .monit_finish,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_DG_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_dg_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAB_EXT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .lab_ext,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'EXAM_EXT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .exam_ext,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'EXAM_PERF _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .exam_perf,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'EXAM_WTG _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .exam_wtg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAB_WTG _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .lab_wtg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_HAS_STRIPES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_has_stripes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAB_CC _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .lab_cc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LAB_SOS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .lab_sos,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'EXAM_SOS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .exam_sos,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OTH_EXAM_COUNT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .oth_exam_count,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OTH_EXAM_PEND _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .oth_exam_pend,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OTH_EXAM_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .oth_exam_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OTH_EXAM_TRANSP _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .oth_exam_transp,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OTH_EXAM_EXEC _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .oth_exam_exec,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OTH_EXAM_RESULT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .oth_exam_result,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OTH_EXAM_RESULT_READ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .oth_exam_result_read,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OTH_EXAM_EXT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .oth_exam_ext,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OTH_EXAM_PERF _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .oth_exam_perf,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OTH_EXAM_WTG _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .oth_exam_wtg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OTH_EXAM_SOS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .oth_exam_sos,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OPINION_COUNT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .opinion_count,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OPINION_STATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .opinion_state,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'TRACKING_BOARD_EA',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN tracking_board_ea_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_episode_in            IN tracking_board_ea.id_episode%TYPE,
        id_patient_in            IN tracking_board_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin           IN BOOLEAN := TRUE,
        id_epis_type_in          IN tracking_board_ea.id_epis_type%TYPE DEFAULT NULL,
        id_epis_type_nin         IN BOOLEAN := TRUE,
        id_triage_color_in       IN tracking_board_ea.id_triage_color%TYPE DEFAULT NULL,
        id_triage_color_nin      IN BOOLEAN := TRUE,
        id_fast_track_in         IN tracking_board_ea.id_fast_track%TYPE DEFAULT NULL,
        id_fast_track_nin        IN BOOLEAN := TRUE,
        id_room_in               IN tracking_board_ea.id_room%TYPE DEFAULT NULL,
        id_room_nin              IN BOOLEAN := TRUE,
        id_bed_in                IN tracking_board_ea.id_bed%TYPE DEFAULT NULL,
        id_bed_nin               IN BOOLEAN := TRUE,
        dt_begin_in              IN tracking_board_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin             IN BOOLEAN := TRUE,
        id_diet_in               IN tracking_board_ea.id_diet%TYPE DEFAULT NULL,
        id_diet_nin              IN BOOLEAN := TRUE,
        desc_diet_in             IN tracking_board_ea.desc_diet%TYPE DEFAULT NULL,
        desc_diet_nin            IN BOOLEAN := TRUE,
        id_prof_resp_in          IN tracking_board_ea.id_prof_resp%TYPE DEFAULT NULL,
        id_prof_resp_nin         IN BOOLEAN := TRUE,
        id_nurse_resp_in         IN tracking_board_ea.id_nurse_resp%TYPE DEFAULT NULL,
        id_nurse_resp_nin        IN BOOLEAN := TRUE,
        lab_count_in             IN tracking_board_ea.lab_count%TYPE DEFAULT NULL,
        lab_count_nin            IN BOOLEAN := TRUE,
        lab_pend_in              IN tracking_board_ea.lab_pend%TYPE DEFAULT NULL,
        lab_pend_nin             IN BOOLEAN := TRUE,
        lab_req_in               IN tracking_board_ea.lab_req%TYPE DEFAULT NULL,
        lab_req_nin              IN BOOLEAN := TRUE,
        lab_harv_in              IN tracking_board_ea.lab_harv%TYPE DEFAULT NULL,
        lab_harv_nin             IN BOOLEAN := TRUE,
        lab_transp_in            IN tracking_board_ea.lab_transp%TYPE DEFAULT NULL,
        lab_transp_nin           IN BOOLEAN := TRUE,
        lab_exec_in              IN tracking_board_ea.lab_exec%TYPE DEFAULT NULL,
        lab_exec_nin             IN BOOLEAN := TRUE,
        lab_result_in            IN tracking_board_ea.lab_result%TYPE DEFAULT NULL,
        lab_result_nin           IN BOOLEAN := TRUE,
        lab_result_read_in       IN tracking_board_ea.lab_result_read%TYPE DEFAULT NULL,
        lab_result_read_nin      IN BOOLEAN := TRUE,
        exam_count_in            IN tracking_board_ea.exam_count%TYPE DEFAULT NULL,
        exam_count_nin           IN BOOLEAN := TRUE,
        exam_pend_in             IN tracking_board_ea.exam_pend%TYPE DEFAULT NULL,
        exam_pend_nin            IN BOOLEAN := TRUE,
        exam_req_in              IN tracking_board_ea.exam_req%TYPE DEFAULT NULL,
        exam_req_nin             IN BOOLEAN := TRUE,
        exam_transp_in           IN tracking_board_ea.exam_transp%TYPE DEFAULT NULL,
        exam_transp_nin          IN BOOLEAN := TRUE,
        exam_exec_in             IN tracking_board_ea.exam_exec%TYPE DEFAULT NULL,
        exam_exec_nin            IN BOOLEAN := TRUE,
        exam_result_in           IN tracking_board_ea.exam_result%TYPE DEFAULT NULL,
        exam_result_nin          IN BOOLEAN := TRUE,
        exam_result_read_in      IN tracking_board_ea.exam_result_read%TYPE DEFAULT NULL,
        exam_result_read_nin     IN BOOLEAN := TRUE,
        interv_count_in          IN tracking_board_ea.interv_count%TYPE DEFAULT NULL,
        interv_count_nin         IN BOOLEAN := TRUE,
        interv_pend_in           IN tracking_board_ea.interv_pend%TYPE DEFAULT NULL,
        interv_pend_nin          IN BOOLEAN := TRUE,
        interv_sos_in            IN tracking_board_ea.interv_sos%TYPE DEFAULT NULL,
        interv_sos_nin           IN BOOLEAN := TRUE,
        interv_req_in            IN tracking_board_ea.interv_req%TYPE DEFAULT NULL,
        interv_req_nin           IN BOOLEAN := TRUE,
        interv_exec_in           IN tracking_board_ea.interv_exec%TYPE DEFAULT NULL,
        interv_exec_nin          IN BOOLEAN := TRUE,
        interv_finish_in         IN tracking_board_ea.interv_finish%TYPE DEFAULT NULL,
        interv_finish_nin        IN BOOLEAN := TRUE,
        med_count_in             IN tracking_board_ea.med_count%TYPE DEFAULT NULL,
        med_count_nin            IN BOOLEAN := TRUE,
        med_pend_in              IN tracking_board_ea.med_pend%TYPE DEFAULT NULL,
        med_pend_nin             IN BOOLEAN := TRUE,
        med_req_in               IN tracking_board_ea.med_req%TYPE DEFAULT NULL,
        med_req_nin              IN BOOLEAN := TRUE,
        med_exec_in              IN tracking_board_ea.med_exec%TYPE DEFAULT NULL,
        med_exec_nin             IN BOOLEAN := TRUE,
        med_finish_in            IN tracking_board_ea.med_finish%TYPE DEFAULT NULL,
        med_finish_nin           IN BOOLEAN := TRUE,
        med_sos_in               IN tracking_board_ea.med_sos%TYPE DEFAULT NULL,
        med_sos_nin              IN BOOLEAN := TRUE,
        transp_count_in          IN tracking_board_ea.transp_count%TYPE DEFAULT NULL,
        transp_count_nin         IN BOOLEAN := TRUE,
        transp_delay_in          IN tracking_board_ea.transp_delay%TYPE DEFAULT NULL,
        transp_delay_nin         IN BOOLEAN := TRUE,
        transp_ongoing_in        IN tracking_board_ea.transp_ongoing%TYPE DEFAULT NULL,
        transp_ongoing_nin       IN BOOLEAN := TRUE,
        monit_count_in           IN tracking_board_ea.monit_count%TYPE DEFAULT NULL,
        monit_count_nin          IN BOOLEAN := TRUE,
        monit_delay_in           IN tracking_board_ea.monit_delay%TYPE DEFAULT NULL,
        monit_delay_nin          IN BOOLEAN := TRUE,
        monit_ongoing_in         IN tracking_board_ea.monit_ongoing%TYPE DEFAULT NULL,
        monit_ongoing_nin        IN BOOLEAN := TRUE,
        monit_finish_in          IN tracking_board_ea.monit_finish%TYPE DEFAULT NULL,
        monit_finish_nin         IN BOOLEAN := TRUE,
        dt_dg_last_update_in     IN tracking_board_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin    IN BOOLEAN := TRUE,
        create_user_in           IN tracking_board_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN tracking_board_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN tracking_board_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN tracking_board_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN tracking_board_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN tracking_board_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        lab_ext_in               IN tracking_board_ea.lab_ext%TYPE DEFAULT NULL,
        lab_ext_nin              IN BOOLEAN := TRUE,
        exam_ext_in              IN tracking_board_ea.exam_ext%TYPE DEFAULT NULL,
        exam_ext_nin             IN BOOLEAN := TRUE,
        exam_perf_in             IN tracking_board_ea.exam_perf%TYPE DEFAULT NULL,
        exam_perf_nin            IN BOOLEAN := TRUE,
        exam_wtg_in              IN tracking_board_ea.exam_wtg%TYPE DEFAULT NULL,
        exam_wtg_nin             IN BOOLEAN := TRUE,
        lab_wtg_in               IN tracking_board_ea.lab_wtg%TYPE DEFAULT NULL,
        lab_wtg_nin              IN BOOLEAN := TRUE,
        flg_has_stripes_in       IN tracking_board_ea.flg_has_stripes%TYPE DEFAULT NULL,
        flg_has_stripes_nin      IN BOOLEAN := TRUE,
        lab_cc_in                IN tracking_board_ea.lab_cc%TYPE DEFAULT NULL,
        lab_cc_nin               IN BOOLEAN := TRUE,
        lab_sos_in               IN tracking_board_ea.lab_sos%TYPE DEFAULT NULL,
        lab_sos_nin              IN BOOLEAN := TRUE,
        exam_sos_in              IN tracking_board_ea.exam_sos%TYPE DEFAULT NULL,
        exam_sos_nin             IN BOOLEAN := TRUE,
        oth_exam_count_in        IN tracking_board_ea.oth_exam_count%TYPE DEFAULT NULL,
        oth_exam_count_nin       IN BOOLEAN := TRUE,
        oth_exam_pend_in         IN tracking_board_ea.oth_exam_pend%TYPE DEFAULT NULL,
        oth_exam_pend_nin        IN BOOLEAN := TRUE,
        oth_exam_req_in          IN tracking_board_ea.oth_exam_req%TYPE DEFAULT NULL,
        oth_exam_req_nin         IN BOOLEAN := TRUE,
        oth_exam_transp_in       IN tracking_board_ea.oth_exam_transp%TYPE DEFAULT NULL,
        oth_exam_transp_nin      IN BOOLEAN := TRUE,
        oth_exam_exec_in         IN tracking_board_ea.oth_exam_exec%TYPE DEFAULT NULL,
        oth_exam_exec_nin        IN BOOLEAN := TRUE,
        oth_exam_result_in       IN tracking_board_ea.oth_exam_result%TYPE DEFAULT NULL,
        oth_exam_result_nin      IN BOOLEAN := TRUE,
        oth_exam_result_read_in  IN tracking_board_ea.oth_exam_result_read%TYPE DEFAULT NULL,
        oth_exam_result_read_nin IN BOOLEAN := TRUE,
        oth_exam_ext_in          IN tracking_board_ea.oth_exam_ext%TYPE DEFAULT NULL,
        oth_exam_ext_nin         IN BOOLEAN := TRUE,
        oth_exam_perf_in         IN tracking_board_ea.oth_exam_perf%TYPE DEFAULT NULL,
        oth_exam_perf_nin        IN BOOLEAN := TRUE,
        oth_exam_wtg_in          IN tracking_board_ea.oth_exam_wtg%TYPE DEFAULT NULL,
        oth_exam_wtg_nin         IN BOOLEAN := TRUE,
        oth_exam_sos_in          IN tracking_board_ea.oth_exam_sos%TYPE DEFAULT NULL,
        oth_exam_sos_nin         IN BOOLEAN := TRUE,
        opinion_count_in         IN tracking_board_ea.opinion_count%TYPE DEFAULT NULL,
        opinion_count_nin        IN BOOLEAN := TRUE,
        opinion_state_in         IN tracking_board_ea.opinion_state%TYPE DEFAULT NULL,
        opinion_state_nin        IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_rows_out               table_varchar;
        l_id_patient_n           NUMBER(1);
        l_id_epis_type_n         NUMBER(1);
        l_id_triage_color_n      NUMBER(1);
        l_id_fast_track_n        NUMBER(1);
        l_id_room_n              NUMBER(1);
        l_id_bed_n               NUMBER(1);
        l_dt_begin_n             NUMBER(1);
        l_id_diet_n              NUMBER(1);
        l_desc_diet_n            NUMBER(1);
        l_id_prof_resp_n         NUMBER(1);
        l_id_nurse_resp_n        NUMBER(1);
        l_lab_count_n            NUMBER(1);
        l_lab_pend_n             NUMBER(1);
        l_lab_req_n              NUMBER(1);
        l_lab_harv_n             NUMBER(1);
        l_lab_transp_n           NUMBER(1);
        l_lab_exec_n             NUMBER(1);
        l_lab_result_n           NUMBER(1);
        l_lab_result_read_n      NUMBER(1);
        l_exam_count_n           NUMBER(1);
        l_exam_pend_n            NUMBER(1);
        l_exam_req_n             NUMBER(1);
        l_exam_transp_n          NUMBER(1);
        l_exam_exec_n            NUMBER(1);
        l_exam_result_n          NUMBER(1);
        l_exam_result_read_n     NUMBER(1);
        l_interv_count_n         NUMBER(1);
        l_interv_pend_n          NUMBER(1);
        l_interv_sos_n           NUMBER(1);
        l_interv_req_n           NUMBER(1);
        l_interv_exec_n          NUMBER(1);
        l_interv_finish_n        NUMBER(1);
        l_med_count_n            NUMBER(1);
        l_med_pend_n             NUMBER(1);
        l_med_req_n              NUMBER(1);
        l_med_exec_n             NUMBER(1);
        l_med_finish_n           NUMBER(1);
        l_med_sos_n              NUMBER(1);
        l_transp_count_n         NUMBER(1);
        l_transp_delay_n         NUMBER(1);
        l_transp_ongoing_n       NUMBER(1);
        l_monit_count_n          NUMBER(1);
        l_monit_delay_n          NUMBER(1);
        l_monit_ongoing_n        NUMBER(1);
        l_monit_finish_n         NUMBER(1);
        l_dt_dg_last_update_n    NUMBER(1);
        l_create_user_n          NUMBER(1);
        l_create_time_n          NUMBER(1);
        l_create_institution_n   NUMBER(1);
        l_update_user_n          NUMBER(1);
        l_update_time_n          NUMBER(1);
        l_update_institution_n   NUMBER(1);
        l_lab_ext_n              NUMBER(1);
        l_exam_ext_n             NUMBER(1);
        l_exam_perf_n            NUMBER(1);
        l_exam_wtg_n             NUMBER(1);
        l_lab_wtg_n              NUMBER(1);
        l_flg_has_stripes_n      NUMBER(1);
        l_lab_cc_n               NUMBER(1);
        l_lab_sos_n              NUMBER(1);
        l_exam_sos_n             NUMBER(1);
        l_oth_exam_count_n       NUMBER(1);
        l_oth_exam_pend_n        NUMBER(1);
        l_oth_exam_req_n         NUMBER(1);
        l_oth_exam_transp_n      NUMBER(1);
        l_oth_exam_exec_n        NUMBER(1);
        l_oth_exam_result_n      NUMBER(1);
        l_oth_exam_result_read_n NUMBER(1);
        l_oth_exam_ext_n         NUMBER(1);
        l_oth_exam_perf_n        NUMBER(1);
        l_oth_exam_wtg_n         NUMBER(1);
        l_oth_exam_sos_n         NUMBER(1);
        l_opinion_count_n        NUMBER(1);
        l_opinion_state_n        NUMBER(1);
    BEGIN
    
        l_id_patient_n           := sys.diutil.bool_to_int(id_patient_nin);
        l_id_epis_type_n         := sys.diutil.bool_to_int(id_epis_type_nin);
        l_id_triage_color_n      := sys.diutil.bool_to_int(id_triage_color_nin);
        l_id_fast_track_n        := sys.diutil.bool_to_int(id_fast_track_nin);
        l_id_room_n              := sys.diutil.bool_to_int(id_room_nin);
        l_id_bed_n               := sys.diutil.bool_to_int(id_bed_nin);
        l_dt_begin_n             := sys.diutil.bool_to_int(dt_begin_nin);
        l_id_diet_n              := sys.diutil.bool_to_int(id_diet_nin);
        l_desc_diet_n            := sys.diutil.bool_to_int(desc_diet_nin);
        l_id_prof_resp_n         := sys.diutil.bool_to_int(id_prof_resp_nin);
        l_id_nurse_resp_n        := sys.diutil.bool_to_int(id_nurse_resp_nin);
        l_lab_count_n            := sys.diutil.bool_to_int(lab_count_nin);
        l_lab_pend_n             := sys.diutil.bool_to_int(lab_pend_nin);
        l_lab_req_n              := sys.diutil.bool_to_int(lab_req_nin);
        l_lab_harv_n             := sys.diutil.bool_to_int(lab_harv_nin);
        l_lab_transp_n           := sys.diutil.bool_to_int(lab_transp_nin);
        l_lab_exec_n             := sys.diutil.bool_to_int(lab_exec_nin);
        l_lab_result_n           := sys.diutil.bool_to_int(lab_result_nin);
        l_lab_result_read_n      := sys.diutil.bool_to_int(lab_result_read_nin);
        l_exam_count_n           := sys.diutil.bool_to_int(exam_count_nin);
        l_exam_pend_n            := sys.diutil.bool_to_int(exam_pend_nin);
        l_exam_req_n             := sys.diutil.bool_to_int(exam_req_nin);
        l_exam_transp_n          := sys.diutil.bool_to_int(exam_transp_nin);
        l_exam_exec_n            := sys.diutil.bool_to_int(exam_exec_nin);
        l_exam_result_n          := sys.diutil.bool_to_int(exam_result_nin);
        l_exam_result_read_n     := sys.diutil.bool_to_int(exam_result_read_nin);
        l_interv_count_n         := sys.diutil.bool_to_int(interv_count_nin);
        l_interv_pend_n          := sys.diutil.bool_to_int(interv_pend_nin);
        l_interv_sos_n           := sys.diutil.bool_to_int(interv_sos_nin);
        l_interv_req_n           := sys.diutil.bool_to_int(interv_req_nin);
        l_interv_exec_n          := sys.diutil.bool_to_int(interv_exec_nin);
        l_interv_finish_n        := sys.diutil.bool_to_int(interv_finish_nin);
        l_med_count_n            := sys.diutil.bool_to_int(med_count_nin);
        l_med_pend_n             := sys.diutil.bool_to_int(med_pend_nin);
        l_med_req_n              := sys.diutil.bool_to_int(med_req_nin);
        l_med_exec_n             := sys.diutil.bool_to_int(med_exec_nin);
        l_med_finish_n           := sys.diutil.bool_to_int(med_finish_nin);
        l_med_sos_n              := sys.diutil.bool_to_int(med_sos_nin);
        l_transp_count_n         := sys.diutil.bool_to_int(transp_count_nin);
        l_transp_delay_n         := sys.diutil.bool_to_int(transp_delay_nin);
        l_transp_ongoing_n       := sys.diutil.bool_to_int(transp_ongoing_nin);
        l_monit_count_n          := sys.diutil.bool_to_int(monit_count_nin);
        l_monit_delay_n          := sys.diutil.bool_to_int(monit_delay_nin);
        l_monit_ongoing_n        := sys.diutil.bool_to_int(monit_ongoing_nin);
        l_monit_finish_n         := sys.diutil.bool_to_int(monit_finish_nin);
        l_dt_dg_last_update_n    := sys.diutil.bool_to_int(dt_dg_last_update_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_lab_ext_n              := sys.diutil.bool_to_int(lab_ext_nin);
        l_exam_ext_n             := sys.diutil.bool_to_int(exam_ext_nin);
        l_exam_perf_n            := sys.diutil.bool_to_int(exam_perf_nin);
        l_exam_wtg_n             := sys.diutil.bool_to_int(exam_wtg_nin);
        l_lab_wtg_n              := sys.diutil.bool_to_int(lab_wtg_nin);
        l_flg_has_stripes_n      := sys.diutil.bool_to_int(flg_has_stripes_nin);
        l_lab_cc_n               := sys.diutil.bool_to_int(lab_cc_nin);
        l_lab_sos_n              := sys.diutil.bool_to_int(lab_sos_nin);
        l_exam_sos_n             := sys.diutil.bool_to_int(exam_sos_nin);
        l_oth_exam_count_n       := sys.diutil.bool_to_int(oth_exam_count_nin);
        l_oth_exam_pend_n        := sys.diutil.bool_to_int(oth_exam_pend_nin);
        l_oth_exam_req_n         := sys.diutil.bool_to_int(oth_exam_req_nin);
        l_oth_exam_transp_n      := sys.diutil.bool_to_int(oth_exam_transp_nin);
        l_oth_exam_exec_n        := sys.diutil.bool_to_int(oth_exam_exec_nin);
        l_oth_exam_result_n      := sys.diutil.bool_to_int(oth_exam_result_nin);
        l_oth_exam_result_read_n := sys.diutil.bool_to_int(oth_exam_result_read_nin);
        l_oth_exam_ext_n         := sys.diutil.bool_to_int(oth_exam_ext_nin);
        l_oth_exam_perf_n        := sys.diutil.bool_to_int(oth_exam_perf_nin);
        l_oth_exam_wtg_n         := sys.diutil.bool_to_int(oth_exam_wtg_nin);
        l_oth_exam_sos_n         := sys.diutil.bool_to_int(oth_exam_sos_nin);
        l_opinion_count_n        := sys.diutil.bool_to_int(opinion_count_nin);
        l_opinion_state_n        := sys.diutil.bool_to_int(opinion_state_nin);
    
        UPDATE tracking_board_ea
           SET id_patient           = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_epis_type         = decode(l_id_epis_type_n, 0, id_epis_type_in, nvl(id_epis_type_in, id_epis_type)),
               id_triage_color      = decode(l_id_triage_color_n,
                                             0,
                                             id_triage_color_in,
                                             nvl(id_triage_color_in, id_triage_color)),
               id_fast_track        = decode(l_id_fast_track_n,
                                             0,
                                             id_fast_track_in,
                                             nvl(id_fast_track_in, id_fast_track)),
               id_room              = decode(l_id_room_n, 0, id_room_in, nvl(id_room_in, id_room)),
               id_bed               = decode(l_id_bed_n, 0, id_bed_in, nvl(id_bed_in, id_bed)),
               dt_begin             = decode(l_dt_begin_n, 0, dt_begin_in, nvl(dt_begin_in, dt_begin)),
               id_diet              = decode(l_id_diet_n, 0, id_diet_in, nvl(id_diet_in, id_diet)),
               desc_diet            = decode(l_desc_diet_n, 0, desc_diet_in, nvl(desc_diet_in, desc_diet)),
               id_prof_resp         = decode(l_id_prof_resp_n, 0, id_prof_resp_in, nvl(id_prof_resp_in, id_prof_resp)),
               id_nurse_resp        = decode(l_id_nurse_resp_n,
                                             0,
                                             id_nurse_resp_in,
                                             nvl(id_nurse_resp_in, id_nurse_resp)),
               lab_count            = decode(l_lab_count_n, 0, lab_count_in, nvl(lab_count_in, lab_count)),
               lab_pend             = decode(l_lab_pend_n, 0, lab_pend_in, nvl(lab_pend_in, lab_pend)),
               lab_req              = decode(l_lab_req_n, 0, lab_req_in, nvl(lab_req_in, lab_req)),
               lab_harv             = decode(l_lab_harv_n, 0, lab_harv_in, nvl(lab_harv_in, lab_harv)),
               lab_transp           = decode(l_lab_transp_n, 0, lab_transp_in, nvl(lab_transp_in, lab_transp)),
               lab_exec             = decode(l_lab_exec_n, 0, lab_exec_in, nvl(lab_exec_in, lab_exec)),
               lab_result           = decode(l_lab_result_n, 0, lab_result_in, nvl(lab_result_in, lab_result)),
               lab_result_read      = decode(l_lab_result_read_n,
                                             0,
                                             lab_result_read_in,
                                             nvl(lab_result_read_in, lab_result_read)),
               exam_count           = decode(l_exam_count_n, 0, exam_count_in, nvl(exam_count_in, exam_count)),
               exam_pend            = decode(l_exam_pend_n, 0, exam_pend_in, nvl(exam_pend_in, exam_pend)),
               exam_req             = decode(l_exam_req_n, 0, exam_req_in, nvl(exam_req_in, exam_req)),
               exam_transp          = decode(l_exam_transp_n, 0, exam_transp_in, nvl(exam_transp_in, exam_transp)),
               exam_exec            = decode(l_exam_exec_n, 0, exam_exec_in, nvl(exam_exec_in, exam_exec)),
               exam_result          = decode(l_exam_result_n, 0, exam_result_in, nvl(exam_result_in, exam_result)),
               exam_result_read     = decode(l_exam_result_read_n,
                                             0,
                                             exam_result_read_in,
                                             nvl(exam_result_read_in, exam_result_read)),
               interv_count         = decode(l_interv_count_n, 0, interv_count_in, nvl(interv_count_in, interv_count)),
               interv_pend          = decode(l_interv_pend_n, 0, interv_pend_in, nvl(interv_pend_in, interv_pend)),
               interv_sos           = decode(l_interv_sos_n, 0, interv_sos_in, nvl(interv_sos_in, interv_sos)),
               interv_req           = decode(l_interv_req_n, 0, interv_req_in, nvl(interv_req_in, interv_req)),
               interv_exec          = decode(l_interv_exec_n, 0, interv_exec_in, nvl(interv_exec_in, interv_exec)),
               interv_finish        = decode(l_interv_finish_n,
                                             0,
                                             interv_finish_in,
                                             nvl(interv_finish_in, interv_finish)),
               med_count            = decode(l_med_count_n, 0, med_count_in, nvl(med_count_in, med_count)),
               med_pend             = decode(l_med_pend_n, 0, med_pend_in, nvl(med_pend_in, med_pend)),
               med_req              = decode(l_med_req_n, 0, med_req_in, nvl(med_req_in, med_req)),
               med_exec             = decode(l_med_exec_n, 0, med_exec_in, nvl(med_exec_in, med_exec)),
               med_finish           = decode(l_med_finish_n, 0, med_finish_in, nvl(med_finish_in, med_finish)),
               med_sos              = decode(l_med_sos_n, 0, med_sos_in, nvl(med_sos_in, med_sos)),
               transp_count         = decode(l_transp_count_n, 0, transp_count_in, nvl(transp_count_in, transp_count)),
               transp_delay         = decode(l_transp_delay_n, 0, transp_delay_in, nvl(transp_delay_in, transp_delay)),
               transp_ongoing       = decode(l_transp_ongoing_n,
                                             0,
                                             transp_ongoing_in,
                                             nvl(transp_ongoing_in, transp_ongoing)),
               monit_count          = decode(l_monit_count_n, 0, monit_count_in, nvl(monit_count_in, monit_count)),
               monit_delay          = decode(l_monit_delay_n, 0, monit_delay_in, nvl(monit_delay_in, monit_delay)),
               monit_ongoing        = decode(l_monit_ongoing_n,
                                             0,
                                             monit_ongoing_in,
                                             nvl(monit_ongoing_in, monit_ongoing)),
               monit_finish         = decode(l_monit_finish_n, 0, monit_finish_in, nvl(monit_finish_in, monit_finish)),
               dt_dg_last_update    = nvl(dt_dg_last_update_in, current_timestamp),
               create_user          = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time          = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution   = decode(l_create_institution_n,
                                             0,
                                             create_institution_in,
                                             nvl(create_institution_in, create_institution)),
               update_user          = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time          = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution   = decode(l_update_institution_n,
                                             0,
                                             update_institution_in,
                                             nvl(update_institution_in, update_institution)),
               lab_ext              = decode(l_lab_ext_n, 0, lab_ext_in, nvl(lab_ext_in, lab_ext)),
               exam_ext             = decode(l_exam_ext_n, 0, exam_ext_in, nvl(exam_ext_in, exam_ext)),
               exam_perf            = decode(l_exam_perf_n, 0, exam_perf_in, nvl(exam_perf_in, exam_perf)),
               exam_wtg             = decode(l_exam_wtg_n, 0, exam_wtg_in, nvl(exam_wtg_in, exam_wtg)),
               lab_wtg              = decode(l_lab_wtg_n, 0, lab_wtg_in, nvl(lab_wtg_in, lab_wtg)),
               flg_has_stripes      = decode(l_flg_has_stripes_n,
                                             0,
                                             flg_has_stripes_in,
                                             nvl(flg_has_stripes_in, flg_has_stripes)),
               lab_cc               = decode(l_lab_cc_n, 0, lab_cc_in, nvl(lab_cc_in, lab_cc)),
               lab_sos              = decode(l_lab_sos_n, 0, lab_sos_in, nvl(lab_sos_in, lab_sos)),
               exam_sos             = decode(l_exam_sos_n, 0, exam_sos_in, nvl(exam_sos_in, exam_sos)),
               oth_exam_count       = decode(l_oth_exam_count_n,
                                             0,
                                             oth_exam_count_in,
                                             nvl(oth_exam_count_in, oth_exam_count)),
               oth_exam_pend        = decode(l_oth_exam_pend_n,
                                             0,
                                             oth_exam_pend_in,
                                             nvl(oth_exam_pend_in, oth_exam_pend)),
               oth_exam_req         = decode(l_oth_exam_req_n, 0, oth_exam_req_in, nvl(oth_exam_req_in, oth_exam_req)),
               oth_exam_transp      = decode(l_oth_exam_transp_n,
                                             0,
                                             oth_exam_transp_in,
                                             nvl(oth_exam_transp_in, oth_exam_transp)),
               oth_exam_exec        = decode(l_oth_exam_exec_n,
                                             0,
                                             oth_exam_exec_in,
                                             nvl(oth_exam_exec_in, oth_exam_exec)),
               oth_exam_result      = decode(l_oth_exam_result_n,
                                             0,
                                             oth_exam_result_in,
                                             nvl(oth_exam_result_in, oth_exam_result)),
               oth_exam_result_read = decode(l_oth_exam_result_read_n,
                                             0,
                                             oth_exam_result_read_in,
                                             nvl(oth_exam_result_read_in, oth_exam_result_read)),
               oth_exam_ext         = decode(l_oth_exam_ext_n, 0, oth_exam_ext_in, nvl(oth_exam_ext_in, oth_exam_ext)),
               oth_exam_perf        = decode(l_oth_exam_perf_n,
                                             0,
                                             oth_exam_perf_in,
                                             nvl(oth_exam_perf_in, oth_exam_perf)),
               oth_exam_wtg         = decode(l_oth_exam_wtg_n, 0, oth_exam_wtg_in, nvl(oth_exam_wtg_in, oth_exam_wtg)),
               oth_exam_sos         = decode(l_oth_exam_sos_n, 0, oth_exam_sos_in, nvl(oth_exam_sos_in, oth_exam_sos)),
               opinion_count        = decode(l_opinion_count_n,
                                             0,
                                             opinion_count_in,
                                             nvl(opinion_count_in, opinion_count)),
               opinion_state        = decode(l_opinion_state_n,
                                             0,
                                             opinion_state_in,
                                             nvl(opinion_state_in, opinion_state))
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'TRACKING_BOARD_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_episode_in            IN tracking_board_ea.id_episode%TYPE,
        id_patient_in            IN tracking_board_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin           IN BOOLEAN := TRUE,
        id_epis_type_in          IN tracking_board_ea.id_epis_type%TYPE DEFAULT NULL,
        id_epis_type_nin         IN BOOLEAN := TRUE,
        id_triage_color_in       IN tracking_board_ea.id_triage_color%TYPE DEFAULT NULL,
        id_triage_color_nin      IN BOOLEAN := TRUE,
        id_fast_track_in         IN tracking_board_ea.id_fast_track%TYPE DEFAULT NULL,
        id_fast_track_nin        IN BOOLEAN := TRUE,
        id_room_in               IN tracking_board_ea.id_room%TYPE DEFAULT NULL,
        id_room_nin              IN BOOLEAN := TRUE,
        id_bed_in                IN tracking_board_ea.id_bed%TYPE DEFAULT NULL,
        id_bed_nin               IN BOOLEAN := TRUE,
        dt_begin_in              IN tracking_board_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin             IN BOOLEAN := TRUE,
        id_diet_in               IN tracking_board_ea.id_diet%TYPE DEFAULT NULL,
        id_diet_nin              IN BOOLEAN := TRUE,
        desc_diet_in             IN tracking_board_ea.desc_diet%TYPE DEFAULT NULL,
        desc_diet_nin            IN BOOLEAN := TRUE,
        id_prof_resp_in          IN tracking_board_ea.id_prof_resp%TYPE DEFAULT NULL,
        id_prof_resp_nin         IN BOOLEAN := TRUE,
        id_nurse_resp_in         IN tracking_board_ea.id_nurse_resp%TYPE DEFAULT NULL,
        id_nurse_resp_nin        IN BOOLEAN := TRUE,
        lab_count_in             IN tracking_board_ea.lab_count%TYPE DEFAULT NULL,
        lab_count_nin            IN BOOLEAN := TRUE,
        lab_pend_in              IN tracking_board_ea.lab_pend%TYPE DEFAULT NULL,
        lab_pend_nin             IN BOOLEAN := TRUE,
        lab_req_in               IN tracking_board_ea.lab_req%TYPE DEFAULT NULL,
        lab_req_nin              IN BOOLEAN := TRUE,
        lab_harv_in              IN tracking_board_ea.lab_harv%TYPE DEFAULT NULL,
        lab_harv_nin             IN BOOLEAN := TRUE,
        lab_transp_in            IN tracking_board_ea.lab_transp%TYPE DEFAULT NULL,
        lab_transp_nin           IN BOOLEAN := TRUE,
        lab_exec_in              IN tracking_board_ea.lab_exec%TYPE DEFAULT NULL,
        lab_exec_nin             IN BOOLEAN := TRUE,
        lab_result_in            IN tracking_board_ea.lab_result%TYPE DEFAULT NULL,
        lab_result_nin           IN BOOLEAN := TRUE,
        lab_result_read_in       IN tracking_board_ea.lab_result_read%TYPE DEFAULT NULL,
        lab_result_read_nin      IN BOOLEAN := TRUE,
        exam_count_in            IN tracking_board_ea.exam_count%TYPE DEFAULT NULL,
        exam_count_nin           IN BOOLEAN := TRUE,
        exam_pend_in             IN tracking_board_ea.exam_pend%TYPE DEFAULT NULL,
        exam_pend_nin            IN BOOLEAN := TRUE,
        exam_req_in              IN tracking_board_ea.exam_req%TYPE DEFAULT NULL,
        exam_req_nin             IN BOOLEAN := TRUE,
        exam_transp_in           IN tracking_board_ea.exam_transp%TYPE DEFAULT NULL,
        exam_transp_nin          IN BOOLEAN := TRUE,
        exam_exec_in             IN tracking_board_ea.exam_exec%TYPE DEFAULT NULL,
        exam_exec_nin            IN BOOLEAN := TRUE,
        exam_result_in           IN tracking_board_ea.exam_result%TYPE DEFAULT NULL,
        exam_result_nin          IN BOOLEAN := TRUE,
        exam_result_read_in      IN tracking_board_ea.exam_result_read%TYPE DEFAULT NULL,
        exam_result_read_nin     IN BOOLEAN := TRUE,
        interv_count_in          IN tracking_board_ea.interv_count%TYPE DEFAULT NULL,
        interv_count_nin         IN BOOLEAN := TRUE,
        interv_pend_in           IN tracking_board_ea.interv_pend%TYPE DEFAULT NULL,
        interv_pend_nin          IN BOOLEAN := TRUE,
        interv_sos_in            IN tracking_board_ea.interv_sos%TYPE DEFAULT NULL,
        interv_sos_nin           IN BOOLEAN := TRUE,
        interv_req_in            IN tracking_board_ea.interv_req%TYPE DEFAULT NULL,
        interv_req_nin           IN BOOLEAN := TRUE,
        interv_exec_in           IN tracking_board_ea.interv_exec%TYPE DEFAULT NULL,
        interv_exec_nin          IN BOOLEAN := TRUE,
        interv_finish_in         IN tracking_board_ea.interv_finish%TYPE DEFAULT NULL,
        interv_finish_nin        IN BOOLEAN := TRUE,
        med_count_in             IN tracking_board_ea.med_count%TYPE DEFAULT NULL,
        med_count_nin            IN BOOLEAN := TRUE,
        med_pend_in              IN tracking_board_ea.med_pend%TYPE DEFAULT NULL,
        med_pend_nin             IN BOOLEAN := TRUE,
        med_req_in               IN tracking_board_ea.med_req%TYPE DEFAULT NULL,
        med_req_nin              IN BOOLEAN := TRUE,
        med_exec_in              IN tracking_board_ea.med_exec%TYPE DEFAULT NULL,
        med_exec_nin             IN BOOLEAN := TRUE,
        med_finish_in            IN tracking_board_ea.med_finish%TYPE DEFAULT NULL,
        med_finish_nin           IN BOOLEAN := TRUE,
        med_sos_in               IN tracking_board_ea.med_sos%TYPE DEFAULT NULL,
        med_sos_nin              IN BOOLEAN := TRUE,
        transp_count_in          IN tracking_board_ea.transp_count%TYPE DEFAULT NULL,
        transp_count_nin         IN BOOLEAN := TRUE,
        transp_delay_in          IN tracking_board_ea.transp_delay%TYPE DEFAULT NULL,
        transp_delay_nin         IN BOOLEAN := TRUE,
        transp_ongoing_in        IN tracking_board_ea.transp_ongoing%TYPE DEFAULT NULL,
        transp_ongoing_nin       IN BOOLEAN := TRUE,
        monit_count_in           IN tracking_board_ea.monit_count%TYPE DEFAULT NULL,
        monit_count_nin          IN BOOLEAN := TRUE,
        monit_delay_in           IN tracking_board_ea.monit_delay%TYPE DEFAULT NULL,
        monit_delay_nin          IN BOOLEAN := TRUE,
        monit_ongoing_in         IN tracking_board_ea.monit_ongoing%TYPE DEFAULT NULL,
        monit_ongoing_nin        IN BOOLEAN := TRUE,
        monit_finish_in          IN tracking_board_ea.monit_finish%TYPE DEFAULT NULL,
        monit_finish_nin         IN BOOLEAN := TRUE,
        dt_dg_last_update_in     IN tracking_board_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin    IN BOOLEAN := TRUE,
        create_user_in           IN tracking_board_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN tracking_board_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN tracking_board_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN tracking_board_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN tracking_board_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN tracking_board_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        lab_ext_in               IN tracking_board_ea.lab_ext%TYPE DEFAULT NULL,
        lab_ext_nin              IN BOOLEAN := TRUE,
        exam_ext_in              IN tracking_board_ea.exam_ext%TYPE DEFAULT NULL,
        exam_ext_nin             IN BOOLEAN := TRUE,
        exam_perf_in             IN tracking_board_ea.exam_perf%TYPE DEFAULT NULL,
        exam_perf_nin            IN BOOLEAN := TRUE,
        exam_wtg_in              IN tracking_board_ea.exam_wtg%TYPE DEFAULT NULL,
        exam_wtg_nin             IN BOOLEAN := TRUE,
        lab_wtg_in               IN tracking_board_ea.lab_wtg%TYPE DEFAULT NULL,
        lab_wtg_nin              IN BOOLEAN := TRUE,
        flg_has_stripes_in       IN tracking_board_ea.flg_has_stripes%TYPE DEFAULT NULL,
        flg_has_stripes_nin      IN BOOLEAN := TRUE,
        lab_cc_in                IN tracking_board_ea.lab_cc%TYPE DEFAULT NULL,
        lab_cc_nin               IN BOOLEAN := TRUE,
        lab_sos_in               IN tracking_board_ea.lab_sos%TYPE DEFAULT NULL,
        lab_sos_nin              IN BOOLEAN := TRUE,
        exam_sos_in              IN tracking_board_ea.exam_sos%TYPE DEFAULT NULL,
        exam_sos_nin             IN BOOLEAN := TRUE,
        oth_exam_count_in        IN tracking_board_ea.oth_exam_count%TYPE DEFAULT NULL,
        oth_exam_count_nin       IN BOOLEAN := TRUE,
        oth_exam_pend_in         IN tracking_board_ea.oth_exam_pend%TYPE DEFAULT NULL,
        oth_exam_pend_nin        IN BOOLEAN := TRUE,
        oth_exam_req_in          IN tracking_board_ea.oth_exam_req%TYPE DEFAULT NULL,
        oth_exam_req_nin         IN BOOLEAN := TRUE,
        oth_exam_transp_in       IN tracking_board_ea.oth_exam_transp%TYPE DEFAULT NULL,
        oth_exam_transp_nin      IN BOOLEAN := TRUE,
        oth_exam_exec_in         IN tracking_board_ea.oth_exam_exec%TYPE DEFAULT NULL,
        oth_exam_exec_nin        IN BOOLEAN := TRUE,
        oth_exam_result_in       IN tracking_board_ea.oth_exam_result%TYPE DEFAULT NULL,
        oth_exam_result_nin      IN BOOLEAN := TRUE,
        oth_exam_result_read_in  IN tracking_board_ea.oth_exam_result_read%TYPE DEFAULT NULL,
        oth_exam_result_read_nin IN BOOLEAN := TRUE,
        oth_exam_ext_in          IN tracking_board_ea.oth_exam_ext%TYPE DEFAULT NULL,
        oth_exam_ext_nin         IN BOOLEAN := TRUE,
        oth_exam_perf_in         IN tracking_board_ea.oth_exam_perf%TYPE DEFAULT NULL,
        oth_exam_perf_nin        IN BOOLEAN := TRUE,
        oth_exam_wtg_in          IN tracking_board_ea.oth_exam_wtg%TYPE DEFAULT NULL,
        oth_exam_wtg_nin         IN BOOLEAN := TRUE,
        oth_exam_sos_in          IN tracking_board_ea.oth_exam_sos%TYPE DEFAULT NULL,
        oth_exam_sos_nin         IN BOOLEAN := TRUE,
        opinion_count_in         IN tracking_board_ea.opinion_count%TYPE DEFAULT NULL,
        opinion_count_nin        IN BOOLEAN := TRUE,
        opinion_state_in         IN tracking_board_ea.opinion_state%TYPE DEFAULT NULL,
        opinion_state_nin        IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            id_patient_nin           => id_patient_nin,
            id_epis_type_in          => id_epis_type_in,
            id_epis_type_nin         => id_epis_type_nin,
            id_triage_color_in       => id_triage_color_in,
            id_triage_color_nin      => id_triage_color_nin,
            id_fast_track_in         => id_fast_track_in,
            id_fast_track_nin        => id_fast_track_nin,
            id_room_in               => id_room_in,
            id_room_nin              => id_room_nin,
            id_bed_in                => id_bed_in,
            id_bed_nin               => id_bed_nin,
            dt_begin_in              => dt_begin_in,
            dt_begin_nin             => dt_begin_nin,
            id_diet_in               => id_diet_in,
            id_diet_nin              => id_diet_nin,
            desc_diet_in             => desc_diet_in,
            desc_diet_nin            => desc_diet_nin,
            id_prof_resp_in          => id_prof_resp_in,
            id_prof_resp_nin         => id_prof_resp_nin,
            id_nurse_resp_in         => id_nurse_resp_in,
            id_nurse_resp_nin        => id_nurse_resp_nin,
            lab_count_in             => lab_count_in,
            lab_count_nin            => lab_count_nin,
            lab_pend_in              => lab_pend_in,
            lab_pend_nin             => lab_pend_nin,
            lab_req_in               => lab_req_in,
            lab_req_nin              => lab_req_nin,
            lab_harv_in              => lab_harv_in,
            lab_harv_nin             => lab_harv_nin,
            lab_transp_in            => lab_transp_in,
            lab_transp_nin           => lab_transp_nin,
            lab_exec_in              => lab_exec_in,
            lab_exec_nin             => lab_exec_nin,
            lab_result_in            => lab_result_in,
            lab_result_nin           => lab_result_nin,
            lab_result_read_in       => lab_result_read_in,
            lab_result_read_nin      => lab_result_read_nin,
            exam_count_in            => exam_count_in,
            exam_count_nin           => exam_count_nin,
            exam_pend_in             => exam_pend_in,
            exam_pend_nin            => exam_pend_nin,
            exam_req_in              => exam_req_in,
            exam_req_nin             => exam_req_nin,
            exam_transp_in           => exam_transp_in,
            exam_transp_nin          => exam_transp_nin,
            exam_exec_in             => exam_exec_in,
            exam_exec_nin            => exam_exec_nin,
            exam_result_in           => exam_result_in,
            exam_result_nin          => exam_result_nin,
            exam_result_read_in      => exam_result_read_in,
            exam_result_read_nin     => exam_result_read_nin,
            interv_count_in          => interv_count_in,
            interv_count_nin         => interv_count_nin,
            interv_pend_in           => interv_pend_in,
            interv_pend_nin          => interv_pend_nin,
            interv_sos_in            => interv_sos_in,
            interv_sos_nin           => interv_sos_nin,
            interv_req_in            => interv_req_in,
            interv_req_nin           => interv_req_nin,
            interv_exec_in           => interv_exec_in,
            interv_exec_nin          => interv_exec_nin,
            interv_finish_in         => interv_finish_in,
            interv_finish_nin        => interv_finish_nin,
            med_count_in             => med_count_in,
            med_count_nin            => med_count_nin,
            med_pend_in              => med_pend_in,
            med_pend_nin             => med_pend_nin,
            med_req_in               => med_req_in,
            med_req_nin              => med_req_nin,
            med_exec_in              => med_exec_in,
            med_exec_nin             => med_exec_nin,
            med_finish_in            => med_finish_in,
            med_finish_nin           => med_finish_nin,
            med_sos_in               => med_sos_in,
            med_sos_nin              => med_sos_nin,
            transp_count_in          => transp_count_in,
            transp_count_nin         => transp_count_nin,
            transp_delay_in          => transp_delay_in,
            transp_delay_nin         => transp_delay_nin,
            transp_ongoing_in        => transp_ongoing_in,
            transp_ongoing_nin       => transp_ongoing_nin,
            monit_count_in           => monit_count_in,
            monit_count_nin          => monit_count_nin,
            monit_delay_in           => monit_delay_in,
            monit_delay_nin          => monit_delay_nin,
            monit_ongoing_in         => monit_ongoing_in,
            monit_ongoing_nin        => monit_ongoing_nin,
            monit_finish_in          => monit_finish_in,
            monit_finish_nin         => monit_finish_nin,
            dt_dg_last_update_in     => dt_dg_last_update_in,
            dt_dg_last_update_nin    => dt_dg_last_update_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            lab_ext_in               => lab_ext_in,
            lab_ext_nin              => lab_ext_nin,
            exam_ext_in              => exam_ext_in,
            exam_ext_nin             => exam_ext_nin,
            exam_perf_in             => exam_perf_in,
            exam_perf_nin            => exam_perf_nin,
            exam_wtg_in              => exam_wtg_in,
            exam_wtg_nin             => exam_wtg_nin,
            lab_wtg_in               => lab_wtg_in,
            lab_wtg_nin              => lab_wtg_nin,
            flg_has_stripes_in       => flg_has_stripes_in,
            flg_has_stripes_nin      => flg_has_stripes_nin,
            lab_cc_in                => lab_cc_in,
            lab_cc_nin               => lab_cc_nin,
            lab_sos_in               => lab_sos_in,
            lab_sos_nin              => lab_sos_nin,
            exam_sos_in              => exam_sos_in,
            exam_sos_nin             => exam_sos_nin,
            oth_exam_count_in        => oth_exam_count_in,
            oth_exam_count_nin       => oth_exam_count_nin,
            oth_exam_pend_in         => oth_exam_pend_in,
            oth_exam_pend_nin        => oth_exam_pend_nin,
            oth_exam_req_in          => oth_exam_req_in,
            oth_exam_req_nin         => oth_exam_req_nin,
            oth_exam_transp_in       => oth_exam_transp_in,
            oth_exam_transp_nin      => oth_exam_transp_nin,
            oth_exam_exec_in         => oth_exam_exec_in,
            oth_exam_exec_nin        => oth_exam_exec_nin,
            oth_exam_result_in       => oth_exam_result_in,
            oth_exam_result_nin      => oth_exam_result_nin,
            oth_exam_result_read_in  => oth_exam_result_read_in,
            oth_exam_result_read_nin => oth_exam_result_read_nin,
            oth_exam_ext_in          => oth_exam_ext_in,
            oth_exam_ext_nin         => oth_exam_ext_nin,
            oth_exam_perf_in         => oth_exam_perf_in,
            oth_exam_perf_nin        => oth_exam_perf_nin,
            oth_exam_wtg_in          => oth_exam_wtg_in,
            oth_exam_wtg_nin         => oth_exam_wtg_nin,
            oth_exam_sos_in          => oth_exam_sos_in,
            oth_exam_sos_nin         => oth_exam_sos_nin,
            opinion_count_in         => opinion_count_in,
            opinion_count_nin        => opinion_count_nin,
            opinion_state_in         => opinion_state_in,
            opinion_state_nin        => opinion_state_nin,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_patient_in            IN tracking_board_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin           IN BOOLEAN := TRUE,
        id_epis_type_in          IN tracking_board_ea.id_epis_type%TYPE DEFAULT NULL,
        id_epis_type_nin         IN BOOLEAN := TRUE,
        id_triage_color_in       IN tracking_board_ea.id_triage_color%TYPE DEFAULT NULL,
        id_triage_color_nin      IN BOOLEAN := TRUE,
        id_fast_track_in         IN tracking_board_ea.id_fast_track%TYPE DEFAULT NULL,
        id_fast_track_nin        IN BOOLEAN := TRUE,
        id_room_in               IN tracking_board_ea.id_room%TYPE DEFAULT NULL,
        id_room_nin              IN BOOLEAN := TRUE,
        id_bed_in                IN tracking_board_ea.id_bed%TYPE DEFAULT NULL,
        id_bed_nin               IN BOOLEAN := TRUE,
        dt_begin_in              IN tracking_board_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin             IN BOOLEAN := TRUE,
        id_diet_in               IN tracking_board_ea.id_diet%TYPE DEFAULT NULL,
        id_diet_nin              IN BOOLEAN := TRUE,
        desc_diet_in             IN tracking_board_ea.desc_diet%TYPE DEFAULT NULL,
        desc_diet_nin            IN BOOLEAN := TRUE,
        id_prof_resp_in          IN tracking_board_ea.id_prof_resp%TYPE DEFAULT NULL,
        id_prof_resp_nin         IN BOOLEAN := TRUE,
        id_nurse_resp_in         IN tracking_board_ea.id_nurse_resp%TYPE DEFAULT NULL,
        id_nurse_resp_nin        IN BOOLEAN := TRUE,
        lab_count_in             IN tracking_board_ea.lab_count%TYPE DEFAULT NULL,
        lab_count_nin            IN BOOLEAN := TRUE,
        lab_pend_in              IN tracking_board_ea.lab_pend%TYPE DEFAULT NULL,
        lab_pend_nin             IN BOOLEAN := TRUE,
        lab_req_in               IN tracking_board_ea.lab_req%TYPE DEFAULT NULL,
        lab_req_nin              IN BOOLEAN := TRUE,
        lab_harv_in              IN tracking_board_ea.lab_harv%TYPE DEFAULT NULL,
        lab_harv_nin             IN BOOLEAN := TRUE,
        lab_transp_in            IN tracking_board_ea.lab_transp%TYPE DEFAULT NULL,
        lab_transp_nin           IN BOOLEAN := TRUE,
        lab_exec_in              IN tracking_board_ea.lab_exec%TYPE DEFAULT NULL,
        lab_exec_nin             IN BOOLEAN := TRUE,
        lab_result_in            IN tracking_board_ea.lab_result%TYPE DEFAULT NULL,
        lab_result_nin           IN BOOLEAN := TRUE,
        lab_result_read_in       IN tracking_board_ea.lab_result_read%TYPE DEFAULT NULL,
        lab_result_read_nin      IN BOOLEAN := TRUE,
        exam_count_in            IN tracking_board_ea.exam_count%TYPE DEFAULT NULL,
        exam_count_nin           IN BOOLEAN := TRUE,
        exam_pend_in             IN tracking_board_ea.exam_pend%TYPE DEFAULT NULL,
        exam_pend_nin            IN BOOLEAN := TRUE,
        exam_req_in              IN tracking_board_ea.exam_req%TYPE DEFAULT NULL,
        exam_req_nin             IN BOOLEAN := TRUE,
        exam_transp_in           IN tracking_board_ea.exam_transp%TYPE DEFAULT NULL,
        exam_transp_nin          IN BOOLEAN := TRUE,
        exam_exec_in             IN tracking_board_ea.exam_exec%TYPE DEFAULT NULL,
        exam_exec_nin            IN BOOLEAN := TRUE,
        exam_result_in           IN tracking_board_ea.exam_result%TYPE DEFAULT NULL,
        exam_result_nin          IN BOOLEAN := TRUE,
        exam_result_read_in      IN tracking_board_ea.exam_result_read%TYPE DEFAULT NULL,
        exam_result_read_nin     IN BOOLEAN := TRUE,
        interv_count_in          IN tracking_board_ea.interv_count%TYPE DEFAULT NULL,
        interv_count_nin         IN BOOLEAN := TRUE,
        interv_pend_in           IN tracking_board_ea.interv_pend%TYPE DEFAULT NULL,
        interv_pend_nin          IN BOOLEAN := TRUE,
        interv_sos_in            IN tracking_board_ea.interv_sos%TYPE DEFAULT NULL,
        interv_sos_nin           IN BOOLEAN := TRUE,
        interv_req_in            IN tracking_board_ea.interv_req%TYPE DEFAULT NULL,
        interv_req_nin           IN BOOLEAN := TRUE,
        interv_exec_in           IN tracking_board_ea.interv_exec%TYPE DEFAULT NULL,
        interv_exec_nin          IN BOOLEAN := TRUE,
        interv_finish_in         IN tracking_board_ea.interv_finish%TYPE DEFAULT NULL,
        interv_finish_nin        IN BOOLEAN := TRUE,
        med_count_in             IN tracking_board_ea.med_count%TYPE DEFAULT NULL,
        med_count_nin            IN BOOLEAN := TRUE,
        med_pend_in              IN tracking_board_ea.med_pend%TYPE DEFAULT NULL,
        med_pend_nin             IN BOOLEAN := TRUE,
        med_req_in               IN tracking_board_ea.med_req%TYPE DEFAULT NULL,
        med_req_nin              IN BOOLEAN := TRUE,
        med_exec_in              IN tracking_board_ea.med_exec%TYPE DEFAULT NULL,
        med_exec_nin             IN BOOLEAN := TRUE,
        med_finish_in            IN tracking_board_ea.med_finish%TYPE DEFAULT NULL,
        med_finish_nin           IN BOOLEAN := TRUE,
        med_sos_in               IN tracking_board_ea.med_sos%TYPE DEFAULT NULL,
        med_sos_nin              IN BOOLEAN := TRUE,
        transp_count_in          IN tracking_board_ea.transp_count%TYPE DEFAULT NULL,
        transp_count_nin         IN BOOLEAN := TRUE,
        transp_delay_in          IN tracking_board_ea.transp_delay%TYPE DEFAULT NULL,
        transp_delay_nin         IN BOOLEAN := TRUE,
        transp_ongoing_in        IN tracking_board_ea.transp_ongoing%TYPE DEFAULT NULL,
        transp_ongoing_nin       IN BOOLEAN := TRUE,
        monit_count_in           IN tracking_board_ea.monit_count%TYPE DEFAULT NULL,
        monit_count_nin          IN BOOLEAN := TRUE,
        monit_delay_in           IN tracking_board_ea.monit_delay%TYPE DEFAULT NULL,
        monit_delay_nin          IN BOOLEAN := TRUE,
        monit_ongoing_in         IN tracking_board_ea.monit_ongoing%TYPE DEFAULT NULL,
        monit_ongoing_nin        IN BOOLEAN := TRUE,
        monit_finish_in          IN tracking_board_ea.monit_finish%TYPE DEFAULT NULL,
        monit_finish_nin         IN BOOLEAN := TRUE,
        dt_dg_last_update_in     IN tracking_board_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin    IN BOOLEAN := TRUE,
        create_user_in           IN tracking_board_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN tracking_board_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN tracking_board_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN tracking_board_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN tracking_board_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN tracking_board_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        lab_ext_in               IN tracking_board_ea.lab_ext%TYPE DEFAULT NULL,
        lab_ext_nin              IN BOOLEAN := TRUE,
        exam_ext_in              IN tracking_board_ea.exam_ext%TYPE DEFAULT NULL,
        exam_ext_nin             IN BOOLEAN := TRUE,
        exam_perf_in             IN tracking_board_ea.exam_perf%TYPE DEFAULT NULL,
        exam_perf_nin            IN BOOLEAN := TRUE,
        exam_wtg_in              IN tracking_board_ea.exam_wtg%TYPE DEFAULT NULL,
        exam_wtg_nin             IN BOOLEAN := TRUE,
        lab_wtg_in               IN tracking_board_ea.lab_wtg%TYPE DEFAULT NULL,
        lab_wtg_nin              IN BOOLEAN := TRUE,
        flg_has_stripes_in       IN tracking_board_ea.flg_has_stripes%TYPE DEFAULT NULL,
        flg_has_stripes_nin      IN BOOLEAN := TRUE,
        lab_cc_in                IN tracking_board_ea.lab_cc%TYPE DEFAULT NULL,
        lab_cc_nin               IN BOOLEAN := TRUE,
        lab_sos_in               IN tracking_board_ea.lab_sos%TYPE DEFAULT NULL,
        lab_sos_nin              IN BOOLEAN := TRUE,
        exam_sos_in              IN tracking_board_ea.exam_sos%TYPE DEFAULT NULL,
        exam_sos_nin             IN BOOLEAN := TRUE,
        oth_exam_count_in        IN tracking_board_ea.oth_exam_count%TYPE DEFAULT NULL,
        oth_exam_count_nin       IN BOOLEAN := TRUE,
        oth_exam_pend_in         IN tracking_board_ea.oth_exam_pend%TYPE DEFAULT NULL,
        oth_exam_pend_nin        IN BOOLEAN := TRUE,
        oth_exam_req_in          IN tracking_board_ea.oth_exam_req%TYPE DEFAULT NULL,
        oth_exam_req_nin         IN BOOLEAN := TRUE,
        oth_exam_transp_in       IN tracking_board_ea.oth_exam_transp%TYPE DEFAULT NULL,
        oth_exam_transp_nin      IN BOOLEAN := TRUE,
        oth_exam_exec_in         IN tracking_board_ea.oth_exam_exec%TYPE DEFAULT NULL,
        oth_exam_exec_nin        IN BOOLEAN := TRUE,
        oth_exam_result_in       IN tracking_board_ea.oth_exam_result%TYPE DEFAULT NULL,
        oth_exam_result_nin      IN BOOLEAN := TRUE,
        oth_exam_result_read_in  IN tracking_board_ea.oth_exam_result_read%TYPE DEFAULT NULL,
        oth_exam_result_read_nin IN BOOLEAN := TRUE,
        oth_exam_ext_in          IN tracking_board_ea.oth_exam_ext%TYPE DEFAULT NULL,
        oth_exam_ext_nin         IN BOOLEAN := TRUE,
        oth_exam_perf_in         IN tracking_board_ea.oth_exam_perf%TYPE DEFAULT NULL,
        oth_exam_perf_nin        IN BOOLEAN := TRUE,
        oth_exam_wtg_in          IN tracking_board_ea.oth_exam_wtg%TYPE DEFAULT NULL,
        oth_exam_wtg_nin         IN BOOLEAN := TRUE,
        oth_exam_sos_in          IN tracking_board_ea.oth_exam_sos%TYPE DEFAULT NULL,
        oth_exam_sos_nin         IN BOOLEAN := TRUE,
        opinion_count_in         IN tracking_board_ea.opinion_count%TYPE DEFAULT NULL,
        opinion_count_nin        IN BOOLEAN := TRUE,
        opinion_state_in         IN tracking_board_ea.opinion_state%TYPE DEFAULT NULL,
        opinion_state_nin        IN BOOLEAN := TRUE,
        where_in                 VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_sql                    VARCHAR2(32767);
        l_rows_out               table_varchar;
        l_id_patient_n           NUMBER(1);
        l_id_epis_type_n         NUMBER(1);
        l_id_triage_color_n      NUMBER(1);
        l_id_fast_track_n        NUMBER(1);
        l_id_room_n              NUMBER(1);
        l_id_bed_n               NUMBER(1);
        l_dt_begin_n             NUMBER(1);
        l_id_diet_n              NUMBER(1);
        l_desc_diet_n            NUMBER(1);
        l_id_prof_resp_n         NUMBER(1);
        l_id_nurse_resp_n        NUMBER(1);
        l_lab_count_n            NUMBER(1);
        l_lab_pend_n             NUMBER(1);
        l_lab_req_n              NUMBER(1);
        l_lab_harv_n             NUMBER(1);
        l_lab_transp_n           NUMBER(1);
        l_lab_exec_n             NUMBER(1);
        l_lab_result_n           NUMBER(1);
        l_lab_result_read_n      NUMBER(1);
        l_exam_count_n           NUMBER(1);
        l_exam_pend_n            NUMBER(1);
        l_exam_req_n             NUMBER(1);
        l_exam_transp_n          NUMBER(1);
        l_exam_exec_n            NUMBER(1);
        l_exam_result_n          NUMBER(1);
        l_exam_result_read_n     NUMBER(1);
        l_interv_count_n         NUMBER(1);
        l_interv_pend_n          NUMBER(1);
        l_interv_sos_n           NUMBER(1);
        l_interv_req_n           NUMBER(1);
        l_interv_exec_n          NUMBER(1);
        l_interv_finish_n        NUMBER(1);
        l_med_count_n            NUMBER(1);
        l_med_pend_n             NUMBER(1);
        l_med_req_n              NUMBER(1);
        l_med_exec_n             NUMBER(1);
        l_med_finish_n           NUMBER(1);
        l_med_sos_n              NUMBER(1);
        l_transp_count_n         NUMBER(1);
        l_transp_delay_n         NUMBER(1);
        l_transp_ongoing_n       NUMBER(1);
        l_monit_count_n          NUMBER(1);
        l_monit_delay_n          NUMBER(1);
        l_monit_ongoing_n        NUMBER(1);
        l_monit_finish_n         NUMBER(1);
        l_dt_dg_last_update_n    NUMBER(1);
        l_create_user_n          NUMBER(1);
        l_create_time_n          NUMBER(1);
        l_create_institution_n   NUMBER(1);
        l_update_user_n          NUMBER(1);
        l_update_time_n          NUMBER(1);
        l_update_institution_n   NUMBER(1);
        l_lab_ext_n              NUMBER(1);
        l_exam_ext_n             NUMBER(1);
        l_exam_perf_n            NUMBER(1);
        l_exam_wtg_n             NUMBER(1);
        l_lab_wtg_n              NUMBER(1);
        l_flg_has_stripes_n      NUMBER(1);
        l_lab_cc_n               NUMBER(1);
        l_lab_sos_n              NUMBER(1);
        l_exam_sos_n             NUMBER(1);
        l_oth_exam_count_n       NUMBER(1);
        l_oth_exam_pend_n        NUMBER(1);
        l_oth_exam_req_n         NUMBER(1);
        l_oth_exam_transp_n      NUMBER(1);
        l_oth_exam_exec_n        NUMBER(1);
        l_oth_exam_result_n      NUMBER(1);
        l_oth_exam_result_read_n NUMBER(1);
        l_oth_exam_ext_n         NUMBER(1);
        l_oth_exam_perf_n        NUMBER(1);
        l_oth_exam_wtg_n         NUMBER(1);
        l_oth_exam_sos_n         NUMBER(1);
        l_opinion_count_n        NUMBER(1);
        l_opinion_state_n        NUMBER(1);
        id_episode_in            tracking_board_ea.id_episode%TYPE;
    BEGIN
    
        l_id_patient_n           := sys.diutil.bool_to_int(id_patient_nin);
        l_id_epis_type_n         := sys.diutil.bool_to_int(id_epis_type_nin);
        l_id_triage_color_n      := sys.diutil.bool_to_int(id_triage_color_nin);
        l_id_fast_track_n        := sys.diutil.bool_to_int(id_fast_track_nin);
        l_id_room_n              := sys.diutil.bool_to_int(id_room_nin);
        l_id_bed_n               := sys.diutil.bool_to_int(id_bed_nin);
        l_dt_begin_n             := sys.diutil.bool_to_int(dt_begin_nin);
        l_id_diet_n              := sys.diutil.bool_to_int(id_diet_nin);
        l_desc_diet_n            := sys.diutil.bool_to_int(desc_diet_nin);
        l_id_prof_resp_n         := sys.diutil.bool_to_int(id_prof_resp_nin);
        l_id_nurse_resp_n        := sys.diutil.bool_to_int(id_nurse_resp_nin);
        l_lab_count_n            := sys.diutil.bool_to_int(lab_count_nin);
        l_lab_pend_n             := sys.diutil.bool_to_int(lab_pend_nin);
        l_lab_req_n              := sys.diutil.bool_to_int(lab_req_nin);
        l_lab_harv_n             := sys.diutil.bool_to_int(lab_harv_nin);
        l_lab_transp_n           := sys.diutil.bool_to_int(lab_transp_nin);
        l_lab_exec_n             := sys.diutil.bool_to_int(lab_exec_nin);
        l_lab_result_n           := sys.diutil.bool_to_int(lab_result_nin);
        l_lab_result_read_n      := sys.diutil.bool_to_int(lab_result_read_nin);
        l_exam_count_n           := sys.diutil.bool_to_int(exam_count_nin);
        l_exam_pend_n            := sys.diutil.bool_to_int(exam_pend_nin);
        l_exam_req_n             := sys.diutil.bool_to_int(exam_req_nin);
        l_exam_transp_n          := sys.diutil.bool_to_int(exam_transp_nin);
        l_exam_exec_n            := sys.diutil.bool_to_int(exam_exec_nin);
        l_exam_result_n          := sys.diutil.bool_to_int(exam_result_nin);
        l_exam_result_read_n     := sys.diutil.bool_to_int(exam_result_read_nin);
        l_interv_count_n         := sys.diutil.bool_to_int(interv_count_nin);
        l_interv_pend_n          := sys.diutil.bool_to_int(interv_pend_nin);
        l_interv_sos_n           := sys.diutil.bool_to_int(interv_sos_nin);
        l_interv_req_n           := sys.diutil.bool_to_int(interv_req_nin);
        l_interv_exec_n          := sys.diutil.bool_to_int(interv_exec_nin);
        l_interv_finish_n        := sys.diutil.bool_to_int(interv_finish_nin);
        l_med_count_n            := sys.diutil.bool_to_int(med_count_nin);
        l_med_pend_n             := sys.diutil.bool_to_int(med_pend_nin);
        l_med_req_n              := sys.diutil.bool_to_int(med_req_nin);
        l_med_exec_n             := sys.diutil.bool_to_int(med_exec_nin);
        l_med_finish_n           := sys.diutil.bool_to_int(med_finish_nin);
        l_med_sos_n              := sys.diutil.bool_to_int(med_sos_nin);
        l_transp_count_n         := sys.diutil.bool_to_int(transp_count_nin);
        l_transp_delay_n         := sys.diutil.bool_to_int(transp_delay_nin);
        l_transp_ongoing_n       := sys.diutil.bool_to_int(transp_ongoing_nin);
        l_monit_count_n          := sys.diutil.bool_to_int(monit_count_nin);
        l_monit_delay_n          := sys.diutil.bool_to_int(monit_delay_nin);
        l_monit_ongoing_n        := sys.diutil.bool_to_int(monit_ongoing_nin);
        l_monit_finish_n         := sys.diutil.bool_to_int(monit_finish_nin);
        l_dt_dg_last_update_n    := sys.diutil.bool_to_int(dt_dg_last_update_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_lab_ext_n              := sys.diutil.bool_to_int(lab_ext_nin);
        l_exam_ext_n             := sys.diutil.bool_to_int(exam_ext_nin);
        l_exam_perf_n            := sys.diutil.bool_to_int(exam_perf_nin);
        l_exam_wtg_n             := sys.diutil.bool_to_int(exam_wtg_nin);
        l_lab_wtg_n              := sys.diutil.bool_to_int(lab_wtg_nin);
        l_flg_has_stripes_n      := sys.diutil.bool_to_int(flg_has_stripes_nin);
        l_lab_cc_n               := sys.diutil.bool_to_int(lab_cc_nin);
        l_lab_sos_n              := sys.diutil.bool_to_int(lab_sos_nin);
        l_exam_sos_n             := sys.diutil.bool_to_int(exam_sos_nin);
        l_oth_exam_count_n       := sys.diutil.bool_to_int(oth_exam_count_nin);
        l_oth_exam_pend_n        := sys.diutil.bool_to_int(oth_exam_pend_nin);
        l_oth_exam_req_n         := sys.diutil.bool_to_int(oth_exam_req_nin);
        l_oth_exam_transp_n      := sys.diutil.bool_to_int(oth_exam_transp_nin);
        l_oth_exam_exec_n        := sys.diutil.bool_to_int(oth_exam_exec_nin);
        l_oth_exam_result_n      := sys.diutil.bool_to_int(oth_exam_result_nin);
        l_oth_exam_result_read_n := sys.diutil.bool_to_int(oth_exam_result_read_nin);
        l_oth_exam_ext_n         := sys.diutil.bool_to_int(oth_exam_ext_nin);
        l_oth_exam_perf_n        := sys.diutil.bool_to_int(oth_exam_perf_nin);
        l_oth_exam_wtg_n         := sys.diutil.bool_to_int(oth_exam_wtg_nin);
        l_oth_exam_sos_n         := sys.diutil.bool_to_int(oth_exam_sos_nin);
        l_opinion_count_n        := sys.diutil.bool_to_int(opinion_count_nin);
        l_opinion_state_n        := sys.diutil.bool_to_int(opinion_state_nin);
    
        l_sql := 'UPDATE TRACKING_BOARD_EA SET ' || ' ID_PATIENT = decode (' || l_id_patient_n ||
                 ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' || ' ID_EPIS_TYPE = decode (' ||
                 l_id_epis_type_n || ',0,:id_epis_type_in, NVL (:id_epis_type_in, ID_EPIS_TYPE)) ' || ',' ||
                 ' ID_TRIAGE_COLOR = decode (' || l_id_triage_color_n ||
                 ',0,:id_triage_color_in, NVL (:id_triage_color_in, ID_TRIAGE_COLOR)) ' || ',' ||
                 ' ID_FAST_TRACK = decode (' || l_id_fast_track_n ||
                 ',0,:id_fast_track_in, NVL (:id_fast_track_in, ID_FAST_TRACK)) ' || ',' || ' ID_ROOM = decode (' ||
                 l_id_room_n || ',0,:id_room_in, NVL (:id_room_in, ID_ROOM)) ' || ',' || ' ID_BED = decode (' ||
                 l_id_bed_n || ',0,:id_bed_in, NVL (:id_bed_in, ID_BED)) ' || ',' || ' DT_BEGIN = decode (' ||
                 l_dt_begin_n || ',0,:dt_begin_in, NVL (:dt_begin_in, DT_BEGIN)) ' || ',' || ' ID_DIET = decode (' ||
                 l_id_diet_n || ',0,:id_diet_in, NVL (:id_diet_in, ID_DIET)) ' || ',' || ' DESC_DIET = decode (' ||
                 l_desc_diet_n || ',0,:desc_diet_in, NVL (:desc_diet_in, DESC_DIET)) ' || ',' ||
                 ' ID_PROF_RESP = decode (' || l_id_prof_resp_n ||
                 ',0,:id_prof_resp_in, NVL (:id_prof_resp_in, ID_PROF_RESP)) ' || ',' || ' ID_NURSE_RESP = decode (' ||
                 l_id_nurse_resp_n || ',0,:id_nurse_resp_in, NVL (:id_nurse_resp_in, ID_NURSE_RESP)) ' || ',' ||
                 ' LAB_COUNT = decode (' || l_lab_count_n || ',0,:lab_count_in, NVL (:lab_count_in, LAB_COUNT)) ' || ',' ||
                 ' LAB_PEND = decode (' || l_lab_pend_n || ',0,:lab_pend_in, NVL (:lab_pend_in, LAB_PEND)) ' || ',' ||
                 ' LAB_REQ = decode (' || l_lab_req_n || ',0,:lab_req_in, NVL (:lab_req_in, LAB_REQ)) ' || ',' ||
                 ' LAB_HARV = decode (' || l_lab_harv_n || ',0,:lab_harv_in, NVL (:lab_harv_in, LAB_HARV)) ' || ',' ||
                 ' LAB_TRANSP = decode (' || l_lab_transp_n || ',0,:lab_transp_in, NVL (:lab_transp_in, LAB_TRANSP)) ' || ',' ||
                 ' LAB_EXEC = decode (' || l_lab_exec_n || ',0,:lab_exec_in, NVL (:lab_exec_in, LAB_EXEC)) ' || ',' ||
                 ' LAB_RESULT = decode (' || l_lab_result_n || ',0,:lab_result_in, NVL (:lab_result_in, LAB_RESULT)) ' || ',' ||
                 ' LAB_RESULT_READ = decode (' || l_lab_result_read_n ||
                 ',0,:lab_result_read_in, NVL (:lab_result_read_in, LAB_RESULT_READ)) ' || ',' ||
                 ' EXAM_COUNT = decode (' || l_exam_count_n || ',0,:exam_count_in, NVL (:exam_count_in, EXAM_COUNT)) ' || ',' ||
                 ' EXAM_PEND = decode (' || l_exam_pend_n || ',0,:exam_pend_in, NVL (:exam_pend_in, EXAM_PEND)) ' || ',' ||
                 ' EXAM_REQ = decode (' || l_exam_req_n || ',0,:exam_req_in, NVL (:exam_req_in, EXAM_REQ)) ' || ',' ||
                 ' EXAM_TRANSP = decode (' || l_exam_transp_n ||
                 ',0,:exam_transp_in, NVL (:exam_transp_in, EXAM_TRANSP)) ' || ',' || ' EXAM_EXEC = decode (' ||
                 l_exam_exec_n || ',0,:exam_exec_in, NVL (:exam_exec_in, EXAM_EXEC)) ' || ',' ||
                 ' EXAM_RESULT = decode (' || l_exam_result_n ||
                 ',0,:exam_result_in, NVL (:exam_result_in, EXAM_RESULT)) ' || ',' || ' EXAM_RESULT_READ = decode (' ||
                 l_exam_result_read_n || ',0,:exam_result_read_in, NVL (:exam_result_read_in, EXAM_RESULT_READ)) ' || ',' ||
                 ' INTERV_COUNT = decode (' || l_interv_count_n ||
                 ',0,:interv_count_in, NVL (:interv_count_in, INTERV_COUNT)) ' || ',' || ' INTERV_PEND = decode (' ||
                 l_interv_pend_n || ',0,:interv_pend_in, NVL (:interv_pend_in, INTERV_PEND)) ' || ',' ||
                 ' INTERV_SOS = decode (' || l_interv_sos_n || ',0,:interv_sos_in, NVL (:interv_sos_in, INTERV_SOS)) ' || ',' ||
                 ' INTERV_REQ = decode (' || l_interv_req_n || ',0,:interv_req_in, NVL (:interv_req_in, INTERV_REQ)) ' || ',' ||
                 ' INTERV_EXEC = decode (' || l_interv_exec_n ||
                 ',0,:interv_exec_in, NVL (:interv_exec_in, INTERV_EXEC)) ' || ',' || ' INTERV_FINISH = decode (' ||
                 l_interv_finish_n || ',0,:interv_finish_in, NVL (:interv_finish_in, INTERV_FINISH)) ' || ',' ||
                 ' MED_COUNT = decode (' || l_med_count_n || ',0,:med_count_in, NVL (:med_count_in, MED_COUNT)) ' || ',' ||
                 ' MED_PEND = decode (' || l_med_pend_n || ',0,:med_pend_in, NVL (:med_pend_in, MED_PEND)) ' || ',' ||
                 ' MED_REQ = decode (' || l_med_req_n || ',0,:med_req_in, NVL (:med_req_in, MED_REQ)) ' || ',' ||
                 ' MED_EXEC = decode (' || l_med_exec_n || ',0,:med_exec_in, NVL (:med_exec_in, MED_EXEC)) ' || ',' ||
                 ' MED_FINISH = decode (' || l_med_finish_n || ',0,:med_finish_in, NVL (:med_finish_in, MED_FINISH)) ' || ',' ||
                 ' MED_SOS = decode (' || l_med_sos_n || ',0,:med_sos_in, NVL (:med_sos_in, MED_SOS)) ' || ',' ||
                 ' TRANSP_COUNT = decode (' || l_transp_count_n ||
                 ',0,:transp_count_in, NVL (:transp_count_in, TRANSP_COUNT)) ' || ',' || ' TRANSP_DELAY = decode (' ||
                 l_transp_delay_n || ',0,:transp_delay_in, NVL (:transp_delay_in, TRANSP_DELAY)) ' || ',' ||
                 ' TRANSP_ONGOING = decode (' || l_transp_ongoing_n ||
                 ',0,:transp_ongoing_in, NVL (:transp_ongoing_in, TRANSP_ONGOING)) ' || ',' ||
                 ' MONIT_COUNT = decode (' || l_monit_count_n ||
                 ',0,:monit_count_in, NVL (:monit_count_in, MONIT_COUNT)) ' || ',' || ' MONIT_DELAY = decode (' ||
                 l_monit_delay_n || ',0,:monit_delay_in, NVL (:monit_delay_in, MONIT_DELAY)) ' || ',' ||
                 ' MONIT_ONGOING = decode (' || l_monit_ongoing_n ||
                 ',0,:monit_ongoing_in, NVL (:monit_ongoing_in, MONIT_ONGOING)) ' || ',' || ' MONIT_FINISH = decode (' ||
                 l_monit_finish_n || ',0,:monit_finish_in, NVL (:monit_finish_in, MONIT_FINISH)) ' || ',' ||
                 ' DT_DG_LAST_UPDATE = nvl(:dt_dg_last_update_in,current_timestamp) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' LAB_EXT = decode (' || l_lab_ext_n || ',0,:lab_ext_in, NVL (:lab_ext_in, LAB_EXT)) ' || ',' ||
                 ' EXAM_EXT = decode (' || l_exam_ext_n || ',0,:exam_ext_in, NVL (:exam_ext_in, EXAM_EXT)) ' || ',' ||
                 ' EXAM_PERF = decode (' || l_exam_perf_n || ',0,:exam_perf_in, NVL (:exam_perf_in, EXAM_PERF)) ' || ',' ||
                 ' EXAM_WTG = decode (' || l_exam_wtg_n || ',0,:exam_wtg_in, NVL (:exam_wtg_in, EXAM_WTG)) ' || ',' ||
                 ' LAB_WTG = decode (' || l_lab_wtg_n || ',0,:lab_wtg_in, NVL (:lab_wtg_in, LAB_WTG)) ' || ',' ||
                 ' FLG_HAS_STRIPES = decode (' || l_flg_has_stripes_n ||
                 ',0,:flg_has_stripes_in, NVL (:flg_has_stripes_in, FLG_HAS_STRIPES)) ' || ',' || ' LAB_CC = decode (' ||
                 l_lab_cc_n || ',0,:lab_cc_in, NVL (:lab_cc_in, LAB_CC)) ' || ',' || ' LAB_SOS = decode (' ||
                 l_lab_sos_n || ',0,:lab_sos_in, NVL (:lab_sos_in, LAB_SOS)) ' || ',' || ' EXAM_SOS = decode (' ||
                 l_exam_sos_n || ',0,:exam_sos_in, NVL (:exam_sos_in, EXAM_SOS)) ' || ',' ||
                 ' OTH_EXAM_COUNT = decode (' || l_oth_exam_count_n ||
                 ',0,:oth_exam_count_in, NVL (:oth_exam_count_in, OTH_EXAM_COUNT)) ' || ',' ||
                 ' OTH_EXAM_PEND = decode (' || l_oth_exam_pend_n ||
                 ',0,:oth_exam_pend_in, NVL (:oth_exam_pend_in, OTH_EXAM_PEND)) ' || ',' || ' OTH_EXAM_REQ = decode (' ||
                 l_oth_exam_req_n || ',0,:oth_exam_req_in, NVL (:oth_exam_req_in, OTH_EXAM_REQ)) ' || ',' ||
                 ' OTH_EXAM_TRANSP = decode (' || l_oth_exam_transp_n ||
                 ',0,:oth_exam_transp_in, NVL (:oth_exam_transp_in, OTH_EXAM_TRANSP)) ' || ',' ||
                 ' OTH_EXAM_EXEC = decode (' || l_oth_exam_exec_n ||
                 ',0,:oth_exam_exec_in, NVL (:oth_exam_exec_in, OTH_EXAM_EXEC)) ' || ',' ||
                 ' OTH_EXAM_RESULT = decode (' || l_oth_exam_result_n ||
                 ',0,:oth_exam_result_in, NVL (:oth_exam_result_in, OTH_EXAM_RESULT)) ' || ',' ||
                 ' OTH_EXAM_RESULT_READ = decode (' || l_oth_exam_result_read_n ||
                 ',0,:oth_exam_result_read_in, NVL (:oth_exam_result_read_in, OTH_EXAM_RESULT_READ)) ' || ',' ||
                 ' OTH_EXAM_EXT = decode (' || l_oth_exam_ext_n ||
                 ',0,:oth_exam_ext_in, NVL (:oth_exam_ext_in, OTH_EXAM_EXT)) ' || ',' || ' OTH_EXAM_PERF = decode (' ||
                 l_oth_exam_perf_n || ',0,:oth_exam_perf_in, NVL (:oth_exam_perf_in, OTH_EXAM_PERF)) ' || ',' ||
                 ' OTH_EXAM_WTG = decode (' || l_oth_exam_wtg_n ||
                 ',0,:oth_exam_wtg_in, NVL (:oth_exam_wtg_in, OTH_EXAM_WTG)) ' || ',' || ' OTH_EXAM_SOS = decode (' ||
                 l_oth_exam_sos_n || ',0,:oth_exam_sos_in, NVL (:oth_exam_sos_in, OTH_EXAM_SOS)) ' || ',' ||
                 ' OPINION_COUNT = decode (' || l_opinion_count_n ||
                 ',0,:opinion_count_in, NVL (:opinion_count_in, OPINION_COUNT)) ' || ',' || ' OPINION_STATE = decode (' ||
                 l_opinion_state_n || ',0,:opinion_state_in, NVL (:opinion_state_in, OPINION_STATE)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_patient_in, id_epis_type_in, id_triage_color_in, id_fast_track_in, id_room_in, id_bed_in, dt_begin_in, id_diet_in, desc_diet_in, id_prof_resp_in, id_nurse_resp_in, lab_count_in, lab_pend_in, lab_req_in, lab_harv_in, lab_transp_in, lab_exec_in, lab_result_in, lab_result_read_in, exam_count_in, exam_pend_in, exam_req_in, exam_transp_in, exam_exec_in, exam_result_in, exam_result_read_in, interv_count_in, interv_pend_in, interv_sos_in, interv_req_in, interv_exec_in, interv_finish_in, med_count_in, med_pend_in, med_req_in, med_exec_in, med_finish_in, med_sos_in, transp_count_in, transp_delay_in, transp_ongoing_in, monit_count_in, monit_delay_in, monit_ongoing_in, monit_finish_in, dt_dg_last_update_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, lab_ext_in, exam_ext_in, exam_perf_in, exam_wtg_in, lab_wtg_in, flg_has_stripes_in, lab_cc_in, lab_sos_in, exam_sos_in, oth_exam_count_in, oth_exam_pend_in, oth_exam_req_in, oth_exam_transp_in, oth_exam_exec_in, oth_exam_result_in, oth_exam_result_read_in, oth_exam_ext_in, oth_exam_perf_in, oth_exam_wtg_in, oth_exam_sos_in, opinion_count_in, opinion_state_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'TRACKING_BOARD_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_patient_in            IN tracking_board_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin           IN BOOLEAN := TRUE,
        id_epis_type_in          IN tracking_board_ea.id_epis_type%TYPE DEFAULT NULL,
        id_epis_type_nin         IN BOOLEAN := TRUE,
        id_triage_color_in       IN tracking_board_ea.id_triage_color%TYPE DEFAULT NULL,
        id_triage_color_nin      IN BOOLEAN := TRUE,
        id_fast_track_in         IN tracking_board_ea.id_fast_track%TYPE DEFAULT NULL,
        id_fast_track_nin        IN BOOLEAN := TRUE,
        id_room_in               IN tracking_board_ea.id_room%TYPE DEFAULT NULL,
        id_room_nin              IN BOOLEAN := TRUE,
        id_bed_in                IN tracking_board_ea.id_bed%TYPE DEFAULT NULL,
        id_bed_nin               IN BOOLEAN := TRUE,
        dt_begin_in              IN tracking_board_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin             IN BOOLEAN := TRUE,
        id_diet_in               IN tracking_board_ea.id_diet%TYPE DEFAULT NULL,
        id_diet_nin              IN BOOLEAN := TRUE,
        desc_diet_in             IN tracking_board_ea.desc_diet%TYPE DEFAULT NULL,
        desc_diet_nin            IN BOOLEAN := TRUE,
        id_prof_resp_in          IN tracking_board_ea.id_prof_resp%TYPE DEFAULT NULL,
        id_prof_resp_nin         IN BOOLEAN := TRUE,
        id_nurse_resp_in         IN tracking_board_ea.id_nurse_resp%TYPE DEFAULT NULL,
        id_nurse_resp_nin        IN BOOLEAN := TRUE,
        lab_count_in             IN tracking_board_ea.lab_count%TYPE DEFAULT NULL,
        lab_count_nin            IN BOOLEAN := TRUE,
        lab_pend_in              IN tracking_board_ea.lab_pend%TYPE DEFAULT NULL,
        lab_pend_nin             IN BOOLEAN := TRUE,
        lab_req_in               IN tracking_board_ea.lab_req%TYPE DEFAULT NULL,
        lab_req_nin              IN BOOLEAN := TRUE,
        lab_harv_in              IN tracking_board_ea.lab_harv%TYPE DEFAULT NULL,
        lab_harv_nin             IN BOOLEAN := TRUE,
        lab_transp_in            IN tracking_board_ea.lab_transp%TYPE DEFAULT NULL,
        lab_transp_nin           IN BOOLEAN := TRUE,
        lab_exec_in              IN tracking_board_ea.lab_exec%TYPE DEFAULT NULL,
        lab_exec_nin             IN BOOLEAN := TRUE,
        lab_result_in            IN tracking_board_ea.lab_result%TYPE DEFAULT NULL,
        lab_result_nin           IN BOOLEAN := TRUE,
        lab_result_read_in       IN tracking_board_ea.lab_result_read%TYPE DEFAULT NULL,
        lab_result_read_nin      IN BOOLEAN := TRUE,
        exam_count_in            IN tracking_board_ea.exam_count%TYPE DEFAULT NULL,
        exam_count_nin           IN BOOLEAN := TRUE,
        exam_pend_in             IN tracking_board_ea.exam_pend%TYPE DEFAULT NULL,
        exam_pend_nin            IN BOOLEAN := TRUE,
        exam_req_in              IN tracking_board_ea.exam_req%TYPE DEFAULT NULL,
        exam_req_nin             IN BOOLEAN := TRUE,
        exam_transp_in           IN tracking_board_ea.exam_transp%TYPE DEFAULT NULL,
        exam_transp_nin          IN BOOLEAN := TRUE,
        exam_exec_in             IN tracking_board_ea.exam_exec%TYPE DEFAULT NULL,
        exam_exec_nin            IN BOOLEAN := TRUE,
        exam_result_in           IN tracking_board_ea.exam_result%TYPE DEFAULT NULL,
        exam_result_nin          IN BOOLEAN := TRUE,
        exam_result_read_in      IN tracking_board_ea.exam_result_read%TYPE DEFAULT NULL,
        exam_result_read_nin     IN BOOLEAN := TRUE,
        interv_count_in          IN tracking_board_ea.interv_count%TYPE DEFAULT NULL,
        interv_count_nin         IN BOOLEAN := TRUE,
        interv_pend_in           IN tracking_board_ea.interv_pend%TYPE DEFAULT NULL,
        interv_pend_nin          IN BOOLEAN := TRUE,
        interv_sos_in            IN tracking_board_ea.interv_sos%TYPE DEFAULT NULL,
        interv_sos_nin           IN BOOLEAN := TRUE,
        interv_req_in            IN tracking_board_ea.interv_req%TYPE DEFAULT NULL,
        interv_req_nin           IN BOOLEAN := TRUE,
        interv_exec_in           IN tracking_board_ea.interv_exec%TYPE DEFAULT NULL,
        interv_exec_nin          IN BOOLEAN := TRUE,
        interv_finish_in         IN tracking_board_ea.interv_finish%TYPE DEFAULT NULL,
        interv_finish_nin        IN BOOLEAN := TRUE,
        med_count_in             IN tracking_board_ea.med_count%TYPE DEFAULT NULL,
        med_count_nin            IN BOOLEAN := TRUE,
        med_pend_in              IN tracking_board_ea.med_pend%TYPE DEFAULT NULL,
        med_pend_nin             IN BOOLEAN := TRUE,
        med_req_in               IN tracking_board_ea.med_req%TYPE DEFAULT NULL,
        med_req_nin              IN BOOLEAN := TRUE,
        med_exec_in              IN tracking_board_ea.med_exec%TYPE DEFAULT NULL,
        med_exec_nin             IN BOOLEAN := TRUE,
        med_finish_in            IN tracking_board_ea.med_finish%TYPE DEFAULT NULL,
        med_finish_nin           IN BOOLEAN := TRUE,
        med_sos_in               IN tracking_board_ea.med_sos%TYPE DEFAULT NULL,
        med_sos_nin              IN BOOLEAN := TRUE,
        transp_count_in          IN tracking_board_ea.transp_count%TYPE DEFAULT NULL,
        transp_count_nin         IN BOOLEAN := TRUE,
        transp_delay_in          IN tracking_board_ea.transp_delay%TYPE DEFAULT NULL,
        transp_delay_nin         IN BOOLEAN := TRUE,
        transp_ongoing_in        IN tracking_board_ea.transp_ongoing%TYPE DEFAULT NULL,
        transp_ongoing_nin       IN BOOLEAN := TRUE,
        monit_count_in           IN tracking_board_ea.monit_count%TYPE DEFAULT NULL,
        monit_count_nin          IN BOOLEAN := TRUE,
        monit_delay_in           IN tracking_board_ea.monit_delay%TYPE DEFAULT NULL,
        monit_delay_nin          IN BOOLEAN := TRUE,
        monit_ongoing_in         IN tracking_board_ea.monit_ongoing%TYPE DEFAULT NULL,
        monit_ongoing_nin        IN BOOLEAN := TRUE,
        monit_finish_in          IN tracking_board_ea.monit_finish%TYPE DEFAULT NULL,
        monit_finish_nin         IN BOOLEAN := TRUE,
        dt_dg_last_update_in     IN tracking_board_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin    IN BOOLEAN := TRUE,
        create_user_in           IN tracking_board_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN tracking_board_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN tracking_board_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN tracking_board_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN tracking_board_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN tracking_board_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        lab_ext_in               IN tracking_board_ea.lab_ext%TYPE DEFAULT NULL,
        lab_ext_nin              IN BOOLEAN := TRUE,
        exam_ext_in              IN tracking_board_ea.exam_ext%TYPE DEFAULT NULL,
        exam_ext_nin             IN BOOLEAN := TRUE,
        exam_perf_in             IN tracking_board_ea.exam_perf%TYPE DEFAULT NULL,
        exam_perf_nin            IN BOOLEAN := TRUE,
        exam_wtg_in              IN tracking_board_ea.exam_wtg%TYPE DEFAULT NULL,
        exam_wtg_nin             IN BOOLEAN := TRUE,
        lab_wtg_in               IN tracking_board_ea.lab_wtg%TYPE DEFAULT NULL,
        lab_wtg_nin              IN BOOLEAN := TRUE,
        flg_has_stripes_in       IN tracking_board_ea.flg_has_stripes%TYPE DEFAULT NULL,
        flg_has_stripes_nin      IN BOOLEAN := TRUE,
        lab_cc_in                IN tracking_board_ea.lab_cc%TYPE DEFAULT NULL,
        lab_cc_nin               IN BOOLEAN := TRUE,
        lab_sos_in               IN tracking_board_ea.lab_sos%TYPE DEFAULT NULL,
        lab_sos_nin              IN BOOLEAN := TRUE,
        exam_sos_in              IN tracking_board_ea.exam_sos%TYPE DEFAULT NULL,
        exam_sos_nin             IN BOOLEAN := TRUE,
        oth_exam_count_in        IN tracking_board_ea.oth_exam_count%TYPE DEFAULT NULL,
        oth_exam_count_nin       IN BOOLEAN := TRUE,
        oth_exam_pend_in         IN tracking_board_ea.oth_exam_pend%TYPE DEFAULT NULL,
        oth_exam_pend_nin        IN BOOLEAN := TRUE,
        oth_exam_req_in          IN tracking_board_ea.oth_exam_req%TYPE DEFAULT NULL,
        oth_exam_req_nin         IN BOOLEAN := TRUE,
        oth_exam_transp_in       IN tracking_board_ea.oth_exam_transp%TYPE DEFAULT NULL,
        oth_exam_transp_nin      IN BOOLEAN := TRUE,
        oth_exam_exec_in         IN tracking_board_ea.oth_exam_exec%TYPE DEFAULT NULL,
        oth_exam_exec_nin        IN BOOLEAN := TRUE,
        oth_exam_result_in       IN tracking_board_ea.oth_exam_result%TYPE DEFAULT NULL,
        oth_exam_result_nin      IN BOOLEAN := TRUE,
        oth_exam_result_read_in  IN tracking_board_ea.oth_exam_result_read%TYPE DEFAULT NULL,
        oth_exam_result_read_nin IN BOOLEAN := TRUE,
        oth_exam_ext_in          IN tracking_board_ea.oth_exam_ext%TYPE DEFAULT NULL,
        oth_exam_ext_nin         IN BOOLEAN := TRUE,
        oth_exam_perf_in         IN tracking_board_ea.oth_exam_perf%TYPE DEFAULT NULL,
        oth_exam_perf_nin        IN BOOLEAN := TRUE,
        oth_exam_wtg_in          IN tracking_board_ea.oth_exam_wtg%TYPE DEFAULT NULL,
        oth_exam_wtg_nin         IN BOOLEAN := TRUE,
        oth_exam_sos_in          IN tracking_board_ea.oth_exam_sos%TYPE DEFAULT NULL,
        oth_exam_sos_nin         IN BOOLEAN := TRUE,
        opinion_count_in         IN tracking_board_ea.opinion_count%TYPE DEFAULT NULL,
        opinion_count_nin        IN BOOLEAN := TRUE,
        opinion_state_in         IN tracking_board_ea.opinion_state%TYPE DEFAULT NULL,
        opinion_state_nin        IN BOOLEAN := TRUE,
        where_in                 VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_patient_in            => id_patient_in,
            id_patient_nin           => id_patient_nin,
            id_epis_type_in          => id_epis_type_in,
            id_epis_type_nin         => id_epis_type_nin,
            id_triage_color_in       => id_triage_color_in,
            id_triage_color_nin      => id_triage_color_nin,
            id_fast_track_in         => id_fast_track_in,
            id_fast_track_nin        => id_fast_track_nin,
            id_room_in               => id_room_in,
            id_room_nin              => id_room_nin,
            id_bed_in                => id_bed_in,
            id_bed_nin               => id_bed_nin,
            dt_begin_in              => dt_begin_in,
            dt_begin_nin             => dt_begin_nin,
            id_diet_in               => id_diet_in,
            id_diet_nin              => id_diet_nin,
            desc_diet_in             => desc_diet_in,
            desc_diet_nin            => desc_diet_nin,
            id_prof_resp_in          => id_prof_resp_in,
            id_prof_resp_nin         => id_prof_resp_nin,
            id_nurse_resp_in         => id_nurse_resp_in,
            id_nurse_resp_nin        => id_nurse_resp_nin,
            lab_count_in             => lab_count_in,
            lab_count_nin            => lab_count_nin,
            lab_pend_in              => lab_pend_in,
            lab_pend_nin             => lab_pend_nin,
            lab_req_in               => lab_req_in,
            lab_req_nin              => lab_req_nin,
            lab_harv_in              => lab_harv_in,
            lab_harv_nin             => lab_harv_nin,
            lab_transp_in            => lab_transp_in,
            lab_transp_nin           => lab_transp_nin,
            lab_exec_in              => lab_exec_in,
            lab_exec_nin             => lab_exec_nin,
            lab_result_in            => lab_result_in,
            lab_result_nin           => lab_result_nin,
            lab_result_read_in       => lab_result_read_in,
            lab_result_read_nin      => lab_result_read_nin,
            exam_count_in            => exam_count_in,
            exam_count_nin           => exam_count_nin,
            exam_pend_in             => exam_pend_in,
            exam_pend_nin            => exam_pend_nin,
            exam_req_in              => exam_req_in,
            exam_req_nin             => exam_req_nin,
            exam_transp_in           => exam_transp_in,
            exam_transp_nin          => exam_transp_nin,
            exam_exec_in             => exam_exec_in,
            exam_exec_nin            => exam_exec_nin,
            exam_result_in           => exam_result_in,
            exam_result_nin          => exam_result_nin,
            exam_result_read_in      => exam_result_read_in,
            exam_result_read_nin     => exam_result_read_nin,
            interv_count_in          => interv_count_in,
            interv_count_nin         => interv_count_nin,
            interv_pend_in           => interv_pend_in,
            interv_pend_nin          => interv_pend_nin,
            interv_sos_in            => interv_sos_in,
            interv_sos_nin           => interv_sos_nin,
            interv_req_in            => interv_req_in,
            interv_req_nin           => interv_req_nin,
            interv_exec_in           => interv_exec_in,
            interv_exec_nin          => interv_exec_nin,
            interv_finish_in         => interv_finish_in,
            interv_finish_nin        => interv_finish_nin,
            med_count_in             => med_count_in,
            med_count_nin            => med_count_nin,
            med_pend_in              => med_pend_in,
            med_pend_nin             => med_pend_nin,
            med_req_in               => med_req_in,
            med_req_nin              => med_req_nin,
            med_exec_in              => med_exec_in,
            med_exec_nin             => med_exec_nin,
            med_finish_in            => med_finish_in,
            med_finish_nin           => med_finish_nin,
            med_sos_in               => med_sos_in,
            med_sos_nin              => med_sos_nin,
            transp_count_in          => transp_count_in,
            transp_count_nin         => transp_count_nin,
            transp_delay_in          => transp_delay_in,
            transp_delay_nin         => transp_delay_nin,
            transp_ongoing_in        => transp_ongoing_in,
            transp_ongoing_nin       => transp_ongoing_nin,
            monit_count_in           => monit_count_in,
            monit_count_nin          => monit_count_nin,
            monit_delay_in           => monit_delay_in,
            monit_delay_nin          => monit_delay_nin,
            monit_ongoing_in         => monit_ongoing_in,
            monit_ongoing_nin        => monit_ongoing_nin,
            monit_finish_in          => monit_finish_in,
            monit_finish_nin         => monit_finish_nin,
            dt_dg_last_update_in     => dt_dg_last_update_in,
            dt_dg_last_update_nin    => dt_dg_last_update_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            lab_ext_in               => lab_ext_in,
            lab_ext_nin              => lab_ext_nin,
            exam_ext_in              => exam_ext_in,
            exam_ext_nin             => exam_ext_nin,
            exam_perf_in             => exam_perf_in,
            exam_perf_nin            => exam_perf_nin,
            exam_wtg_in              => exam_wtg_in,
            exam_wtg_nin             => exam_wtg_nin,
            lab_wtg_in               => lab_wtg_in,
            lab_wtg_nin              => lab_wtg_nin,
            flg_has_stripes_in       => flg_has_stripes_in,
            flg_has_stripes_nin      => flg_has_stripes_nin,
            lab_cc_in                => lab_cc_in,
            lab_cc_nin               => lab_cc_nin,
            lab_sos_in               => lab_sos_in,
            lab_sos_nin              => lab_sos_nin,
            exam_sos_in              => exam_sos_in,
            exam_sos_nin             => exam_sos_nin,
            oth_exam_count_in        => oth_exam_count_in,
            oth_exam_count_nin       => oth_exam_count_nin,
            oth_exam_pend_in         => oth_exam_pend_in,
            oth_exam_pend_nin        => oth_exam_pend_nin,
            oth_exam_req_in          => oth_exam_req_in,
            oth_exam_req_nin         => oth_exam_req_nin,
            oth_exam_transp_in       => oth_exam_transp_in,
            oth_exam_transp_nin      => oth_exam_transp_nin,
            oth_exam_exec_in         => oth_exam_exec_in,
            oth_exam_exec_nin        => oth_exam_exec_nin,
            oth_exam_result_in       => oth_exam_result_in,
            oth_exam_result_nin      => oth_exam_result_nin,
            oth_exam_result_read_in  => oth_exam_result_read_in,
            oth_exam_result_read_nin => oth_exam_result_read_nin,
            oth_exam_ext_in          => oth_exam_ext_in,
            oth_exam_ext_nin         => oth_exam_ext_nin,
            oth_exam_perf_in         => oth_exam_perf_in,
            oth_exam_perf_nin        => oth_exam_perf_nin,
            oth_exam_wtg_in          => oth_exam_wtg_in,
            oth_exam_wtg_nin         => oth_exam_wtg_nin,
            oth_exam_sos_in          => oth_exam_sos_in,
            oth_exam_sos_nin         => oth_exam_sos_nin,
            opinion_count_in         => opinion_count_in,
            opinion_count_nin        => opinion_count_nin,
            opinion_state_in         => opinion_state_in,
            opinion_state_nin        => opinion_state_nin,
            where_in                 => where_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN tracking_board_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_episode_in           => rec_in.id_episode,
            id_patient_in           => rec_in.id_patient,
            id_epis_type_in         => rec_in.id_epis_type,
            id_triage_color_in      => rec_in.id_triage_color,
            id_fast_track_in        => rec_in.id_fast_track,
            id_room_in              => rec_in.id_room,
            id_bed_in               => rec_in.id_bed,
            dt_begin_in             => rec_in.dt_begin,
            id_diet_in              => rec_in.id_diet,
            desc_diet_in            => rec_in.desc_diet,
            id_prof_resp_in         => rec_in.id_prof_resp,
            id_nurse_resp_in        => rec_in.id_nurse_resp,
            lab_count_in            => rec_in.lab_count,
            lab_pend_in             => rec_in.lab_pend,
            lab_req_in              => rec_in.lab_req,
            lab_harv_in             => rec_in.lab_harv,
            lab_transp_in           => rec_in.lab_transp,
            lab_exec_in             => rec_in.lab_exec,
            lab_result_in           => rec_in.lab_result,
            lab_result_read_in      => rec_in.lab_result_read,
            exam_count_in           => rec_in.exam_count,
            exam_pend_in            => rec_in.exam_pend,
            exam_req_in             => rec_in.exam_req,
            exam_transp_in          => rec_in.exam_transp,
            exam_exec_in            => rec_in.exam_exec,
            exam_result_in          => rec_in.exam_result,
            exam_result_read_in     => rec_in.exam_result_read,
            interv_count_in         => rec_in.interv_count,
            interv_pend_in          => rec_in.interv_pend,
            interv_sos_in           => rec_in.interv_sos,
            interv_req_in           => rec_in.interv_req,
            interv_exec_in          => rec_in.interv_exec,
            interv_finish_in        => rec_in.interv_finish,
            med_count_in            => rec_in.med_count,
            med_pend_in             => rec_in.med_pend,
            med_req_in              => rec_in.med_req,
            med_exec_in             => rec_in.med_exec,
            med_finish_in           => rec_in.med_finish,
            med_sos_in              => rec_in.med_sos,
            transp_count_in         => rec_in.transp_count,
            transp_delay_in         => rec_in.transp_delay,
            transp_ongoing_in       => rec_in.transp_ongoing,
            monit_count_in          => rec_in.monit_count,
            monit_delay_in          => rec_in.monit_delay,
            monit_ongoing_in        => rec_in.monit_ongoing,
            monit_finish_in         => rec_in.monit_finish,
            dt_dg_last_update_in    => rec_in.dt_dg_last_update,
            create_user_in          => rec_in.create_user,
            create_time_in          => rec_in.create_time,
            create_institution_in   => rec_in.create_institution,
            update_user_in          => rec_in.update_user,
            update_time_in          => rec_in.update_time,
            update_institution_in   => rec_in.update_institution,
            lab_ext_in              => rec_in.lab_ext,
            exam_ext_in             => rec_in.exam_ext,
            exam_perf_in            => rec_in.exam_perf,
            exam_wtg_in             => rec_in.exam_wtg,
            lab_wtg_in              => rec_in.lab_wtg,
            flg_has_stripes_in      => rec_in.flg_has_stripes,
            lab_cc_in               => rec_in.lab_cc,
            lab_sos_in              => rec_in.lab_sos,
            exam_sos_in             => rec_in.exam_sos,
            oth_exam_count_in       => rec_in.oth_exam_count,
            oth_exam_pend_in        => rec_in.oth_exam_pend,
            oth_exam_req_in         => rec_in.oth_exam_req,
            oth_exam_transp_in      => rec_in.oth_exam_transp,
            oth_exam_exec_in        => rec_in.oth_exam_exec,
            oth_exam_result_in      => rec_in.oth_exam_result,
            oth_exam_result_read_in => rec_in.oth_exam_result_read,
            oth_exam_ext_in         => rec_in.oth_exam_ext,
            oth_exam_perf_in        => rec_in.oth_exam_perf,
            oth_exam_wtg_in         => rec_in.oth_exam_wtg,
            oth_exam_sos_in         => rec_in.oth_exam_sos,
            opinion_count_in        => rec_in.opinion_count,
            opinion_state_in        => rec_in.opinion_state
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN tracking_board_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in           => rec_in.id_episode,
            id_patient_in           => rec_in.id_patient,
            id_epis_type_in         => rec_in.id_epis_type,
            id_triage_color_in      => rec_in.id_triage_color,
            id_fast_track_in        => rec_in.id_fast_track,
            id_room_in              => rec_in.id_room,
            id_bed_in               => rec_in.id_bed,
            dt_begin_in             => rec_in.dt_begin,
            id_diet_in              => rec_in.id_diet,
            desc_diet_in            => rec_in.desc_diet,
            id_prof_resp_in         => rec_in.id_prof_resp,
            id_nurse_resp_in        => rec_in.id_nurse_resp,
            lab_count_in            => rec_in.lab_count,
            lab_pend_in             => rec_in.lab_pend,
            lab_req_in              => rec_in.lab_req,
            lab_harv_in             => rec_in.lab_harv,
            lab_transp_in           => rec_in.lab_transp,
            lab_exec_in             => rec_in.lab_exec,
            lab_result_in           => rec_in.lab_result,
            lab_result_read_in      => rec_in.lab_result_read,
            exam_count_in           => rec_in.exam_count,
            exam_pend_in            => rec_in.exam_pend,
            exam_req_in             => rec_in.exam_req,
            exam_transp_in          => rec_in.exam_transp,
            exam_exec_in            => rec_in.exam_exec,
            exam_result_in          => rec_in.exam_result,
            exam_result_read_in     => rec_in.exam_result_read,
            interv_count_in         => rec_in.interv_count,
            interv_pend_in          => rec_in.interv_pend,
            interv_sos_in           => rec_in.interv_sos,
            interv_req_in           => rec_in.interv_req,
            interv_exec_in          => rec_in.interv_exec,
            interv_finish_in        => rec_in.interv_finish,
            med_count_in            => rec_in.med_count,
            med_pend_in             => rec_in.med_pend,
            med_req_in              => rec_in.med_req,
            med_exec_in             => rec_in.med_exec,
            med_finish_in           => rec_in.med_finish,
            med_sos_in              => rec_in.med_sos,
            transp_count_in         => rec_in.transp_count,
            transp_delay_in         => rec_in.transp_delay,
            transp_ongoing_in       => rec_in.transp_ongoing,
            monit_count_in          => rec_in.monit_count,
            monit_delay_in          => rec_in.monit_delay,
            monit_ongoing_in        => rec_in.monit_ongoing,
            monit_finish_in         => rec_in.monit_finish,
            dt_dg_last_update_in    => rec_in.dt_dg_last_update,
            create_user_in          => rec_in.create_user,
            create_time_in          => rec_in.create_time,
            create_institution_in   => rec_in.create_institution,
            update_user_in          => rec_in.update_user,
            update_time_in          => rec_in.update_time,
            update_institution_in   => rec_in.update_institution,
            lab_ext_in              => rec_in.lab_ext,
            exam_ext_in             => rec_in.exam_ext,
            exam_perf_in            => rec_in.exam_perf,
            exam_wtg_in             => rec_in.exam_wtg,
            lab_wtg_in              => rec_in.lab_wtg,
            flg_has_stripes_in      => rec_in.flg_has_stripes,
            lab_cc_in               => rec_in.lab_cc,
            lab_sos_in              => rec_in.lab_sos,
            exam_sos_in             => rec_in.exam_sos,
            oth_exam_count_in       => rec_in.oth_exam_count,
            oth_exam_pend_in        => rec_in.oth_exam_pend,
            oth_exam_req_in         => rec_in.oth_exam_req,
            oth_exam_transp_in      => rec_in.oth_exam_transp,
            oth_exam_exec_in        => rec_in.oth_exam_exec,
            oth_exam_result_in      => rec_in.oth_exam_result,
            oth_exam_result_read_in => rec_in.oth_exam_result_read,
            oth_exam_ext_in         => rec_in.oth_exam_ext,
            oth_exam_perf_in        => rec_in.oth_exam_perf,
            oth_exam_wtg_in         => rec_in.oth_exam_wtg,
            oth_exam_sos_in         => rec_in.oth_exam_sos,
            opinion_count_in        => rec_in.opinion_count,
            opinion_state_in        => rec_in.opinion_state
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_episode_in           IN tracking_board_ea.id_episode%TYPE,
        id_patient_in           IN tracking_board_ea.id_patient%TYPE DEFAULT NULL,
        id_epis_type_in         IN tracking_board_ea.id_epis_type%TYPE DEFAULT NULL,
        id_triage_color_in      IN tracking_board_ea.id_triage_color%TYPE DEFAULT NULL,
        id_fast_track_in        IN tracking_board_ea.id_fast_track%TYPE DEFAULT NULL,
        id_room_in              IN tracking_board_ea.id_room%TYPE DEFAULT NULL,
        id_bed_in               IN tracking_board_ea.id_bed%TYPE DEFAULT NULL,
        dt_begin_in             IN tracking_board_ea.dt_begin%TYPE DEFAULT NULL,
        id_diet_in              IN tracking_board_ea.id_diet%TYPE DEFAULT NULL,
        desc_diet_in            IN tracking_board_ea.desc_diet%TYPE DEFAULT NULL,
        id_prof_resp_in         IN tracking_board_ea.id_prof_resp%TYPE DEFAULT NULL,
        id_nurse_resp_in        IN tracking_board_ea.id_nurse_resp%TYPE DEFAULT NULL,
        lab_count_in            IN tracking_board_ea.lab_count%TYPE DEFAULT NULL,
        lab_pend_in             IN tracking_board_ea.lab_pend%TYPE DEFAULT NULL,
        lab_req_in              IN tracking_board_ea.lab_req%TYPE DEFAULT NULL,
        lab_harv_in             IN tracking_board_ea.lab_harv%TYPE DEFAULT NULL,
        lab_transp_in           IN tracking_board_ea.lab_transp%TYPE DEFAULT NULL,
        lab_exec_in             IN tracking_board_ea.lab_exec%TYPE DEFAULT NULL,
        lab_result_in           IN tracking_board_ea.lab_result%TYPE DEFAULT NULL,
        lab_result_read_in      IN tracking_board_ea.lab_result_read%TYPE DEFAULT NULL,
        exam_count_in           IN tracking_board_ea.exam_count%TYPE DEFAULT NULL,
        exam_pend_in            IN tracking_board_ea.exam_pend%TYPE DEFAULT NULL,
        exam_req_in             IN tracking_board_ea.exam_req%TYPE DEFAULT NULL,
        exam_transp_in          IN tracking_board_ea.exam_transp%TYPE DEFAULT NULL,
        exam_exec_in            IN tracking_board_ea.exam_exec%TYPE DEFAULT NULL,
        exam_result_in          IN tracking_board_ea.exam_result%TYPE DEFAULT NULL,
        exam_result_read_in     IN tracking_board_ea.exam_result_read%TYPE DEFAULT NULL,
        interv_count_in         IN tracking_board_ea.interv_count%TYPE DEFAULT NULL,
        interv_pend_in          IN tracking_board_ea.interv_pend%TYPE DEFAULT NULL,
        interv_sos_in           IN tracking_board_ea.interv_sos%TYPE DEFAULT NULL,
        interv_req_in           IN tracking_board_ea.interv_req%TYPE DEFAULT NULL,
        interv_exec_in          IN tracking_board_ea.interv_exec%TYPE DEFAULT NULL,
        interv_finish_in        IN tracking_board_ea.interv_finish%TYPE DEFAULT NULL,
        med_count_in            IN tracking_board_ea.med_count%TYPE DEFAULT NULL,
        med_pend_in             IN tracking_board_ea.med_pend%TYPE DEFAULT NULL,
        med_req_in              IN tracking_board_ea.med_req%TYPE DEFAULT NULL,
        med_exec_in             IN tracking_board_ea.med_exec%TYPE DEFAULT NULL,
        med_finish_in           IN tracking_board_ea.med_finish%TYPE DEFAULT NULL,
        med_sos_in              IN tracking_board_ea.med_sos%TYPE DEFAULT NULL,
        transp_count_in         IN tracking_board_ea.transp_count%TYPE DEFAULT NULL,
        transp_delay_in         IN tracking_board_ea.transp_delay%TYPE DEFAULT NULL,
        transp_ongoing_in       IN tracking_board_ea.transp_ongoing%TYPE DEFAULT NULL,
        monit_count_in          IN tracking_board_ea.monit_count%TYPE DEFAULT NULL,
        monit_delay_in          IN tracking_board_ea.monit_delay%TYPE DEFAULT NULL,
        monit_ongoing_in        IN tracking_board_ea.monit_ongoing%TYPE DEFAULT NULL,
        monit_finish_in         IN tracking_board_ea.monit_finish%TYPE DEFAULT NULL,
        dt_dg_last_update_in    IN tracking_board_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        create_user_in          IN tracking_board_ea.create_user%TYPE DEFAULT NULL,
        create_time_in          IN tracking_board_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN tracking_board_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN tracking_board_ea.update_user%TYPE DEFAULT NULL,
        update_time_in          IN tracking_board_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN tracking_board_ea.update_institution%TYPE DEFAULT NULL,
        lab_ext_in              IN tracking_board_ea.lab_ext%TYPE DEFAULT NULL,
        exam_ext_in             IN tracking_board_ea.exam_ext%TYPE DEFAULT NULL,
        exam_perf_in            IN tracking_board_ea.exam_perf%TYPE DEFAULT NULL,
        exam_wtg_in             IN tracking_board_ea.exam_wtg%TYPE DEFAULT NULL,
        lab_wtg_in              IN tracking_board_ea.lab_wtg%TYPE DEFAULT NULL,
        flg_has_stripes_in      IN tracking_board_ea.flg_has_stripes%TYPE DEFAULT NULL,
        lab_cc_in               IN tracking_board_ea.lab_cc%TYPE DEFAULT NULL,
        lab_sos_in              IN tracking_board_ea.lab_sos%TYPE DEFAULT NULL,
        exam_sos_in             IN tracking_board_ea.exam_sos%TYPE DEFAULT NULL,
        oth_exam_count_in       IN tracking_board_ea.oth_exam_count%TYPE DEFAULT NULL,
        oth_exam_pend_in        IN tracking_board_ea.oth_exam_pend%TYPE DEFAULT NULL,
        oth_exam_req_in         IN tracking_board_ea.oth_exam_req%TYPE DEFAULT NULL,
        oth_exam_transp_in      IN tracking_board_ea.oth_exam_transp%TYPE DEFAULT NULL,
        oth_exam_exec_in        IN tracking_board_ea.oth_exam_exec%TYPE DEFAULT NULL,
        oth_exam_result_in      IN tracking_board_ea.oth_exam_result%TYPE DEFAULT NULL,
        oth_exam_result_read_in IN tracking_board_ea.oth_exam_result_read%TYPE DEFAULT NULL,
        oth_exam_ext_in         IN tracking_board_ea.oth_exam_ext%TYPE DEFAULT NULL,
        oth_exam_perf_in        IN tracking_board_ea.oth_exam_perf%TYPE DEFAULT NULL,
        oth_exam_wtg_in         IN tracking_board_ea.oth_exam_wtg%TYPE DEFAULT NULL,
        oth_exam_sos_in         IN tracking_board_ea.oth_exam_sos%TYPE DEFAULT NULL,
        opinion_count_in        IN tracking_board_ea.opinion_count%TYPE DEFAULT NULL,
        opinion_state_in        IN tracking_board_ea.opinion_state%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        upd(id_episode_in           => id_episode_in,
            id_patient_in           => id_patient_in,
            id_epis_type_in         => id_epis_type_in,
            id_triage_color_in      => id_triage_color_in,
            id_fast_track_in        => id_fast_track_in,
            id_room_in              => id_room_in,
            id_bed_in               => id_bed_in,
            dt_begin_in             => dt_begin_in,
            id_diet_in              => id_diet_in,
            desc_diet_in            => desc_diet_in,
            id_prof_resp_in         => id_prof_resp_in,
            id_nurse_resp_in        => id_nurse_resp_in,
            lab_count_in            => lab_count_in,
            lab_pend_in             => lab_pend_in,
            lab_req_in              => lab_req_in,
            lab_harv_in             => lab_harv_in,
            lab_transp_in           => lab_transp_in,
            lab_exec_in             => lab_exec_in,
            lab_result_in           => lab_result_in,
            lab_result_read_in      => lab_result_read_in,
            exam_count_in           => exam_count_in,
            exam_pend_in            => exam_pend_in,
            exam_req_in             => exam_req_in,
            exam_transp_in          => exam_transp_in,
            exam_exec_in            => exam_exec_in,
            exam_result_in          => exam_result_in,
            exam_result_read_in     => exam_result_read_in,
            interv_count_in         => interv_count_in,
            interv_pend_in          => interv_pend_in,
            interv_sos_in           => interv_sos_in,
            interv_req_in           => interv_req_in,
            interv_exec_in          => interv_exec_in,
            interv_finish_in        => interv_finish_in,
            med_count_in            => med_count_in,
            med_pend_in             => med_pend_in,
            med_req_in              => med_req_in,
            med_exec_in             => med_exec_in,
            med_finish_in           => med_finish_in,
            med_sos_in              => med_sos_in,
            transp_count_in         => transp_count_in,
            transp_delay_in         => transp_delay_in,
            transp_ongoing_in       => transp_ongoing_in,
            monit_count_in          => monit_count_in,
            monit_delay_in          => monit_delay_in,
            monit_ongoing_in        => monit_ongoing_in,
            monit_finish_in         => monit_finish_in,
            dt_dg_last_update_in    => dt_dg_last_update_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            lab_ext_in              => lab_ext_in,
            exam_ext_in             => exam_ext_in,
            exam_perf_in            => exam_perf_in,
            exam_wtg_in             => exam_wtg_in,
            lab_wtg_in              => lab_wtg_in,
            flg_has_stripes_in      => flg_has_stripes_in,
            lab_cc_in               => lab_cc_in,
            lab_sos_in              => lab_sos_in,
            exam_sos_in             => exam_sos_in,
            oth_exam_count_in       => oth_exam_count_in,
            oth_exam_pend_in        => oth_exam_pend_in,
            oth_exam_req_in         => oth_exam_req_in,
            oth_exam_transp_in      => oth_exam_transp_in,
            oth_exam_exec_in        => oth_exam_exec_in,
            oth_exam_result_in      => oth_exam_result_in,
            oth_exam_result_read_in => oth_exam_result_read_in,
            oth_exam_ext_in         => oth_exam_ext_in,
            oth_exam_perf_in        => oth_exam_perf_in,
            oth_exam_wtg_in         => oth_exam_wtg_in,
            oth_exam_sos_in         => oth_exam_sos_in,
            opinion_count_in        => opinion_count_in,
            opinion_state_in        => opinion_state_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_episode_in           => id_episode_in,
                id_patient_in           => id_patient_in,
                id_epis_type_in         => id_epis_type_in,
                id_triage_color_in      => id_triage_color_in,
                id_fast_track_in        => id_fast_track_in,
                id_room_in              => id_room_in,
                id_bed_in               => id_bed_in,
                dt_begin_in             => dt_begin_in,
                id_diet_in              => id_diet_in,
                desc_diet_in            => desc_diet_in,
                id_prof_resp_in         => id_prof_resp_in,
                id_nurse_resp_in        => id_nurse_resp_in,
                lab_count_in            => lab_count_in,
                lab_pend_in             => lab_pend_in,
                lab_req_in              => lab_req_in,
                lab_harv_in             => lab_harv_in,
                lab_transp_in           => lab_transp_in,
                lab_exec_in             => lab_exec_in,
                lab_result_in           => lab_result_in,
                lab_result_read_in      => lab_result_read_in,
                exam_count_in           => exam_count_in,
                exam_pend_in            => exam_pend_in,
                exam_req_in             => exam_req_in,
                exam_transp_in          => exam_transp_in,
                exam_exec_in            => exam_exec_in,
                exam_result_in          => exam_result_in,
                exam_result_read_in     => exam_result_read_in,
                interv_count_in         => interv_count_in,
                interv_pend_in          => interv_pend_in,
                interv_sos_in           => interv_sos_in,
                interv_req_in           => interv_req_in,
                interv_exec_in          => interv_exec_in,
                interv_finish_in        => interv_finish_in,
                med_count_in            => med_count_in,
                med_pend_in             => med_pend_in,
                med_req_in              => med_req_in,
                med_exec_in             => med_exec_in,
                med_finish_in           => med_finish_in,
                med_sos_in              => med_sos_in,
                transp_count_in         => transp_count_in,
                transp_delay_in         => transp_delay_in,
                transp_ongoing_in       => transp_ongoing_in,
                monit_count_in          => monit_count_in,
                monit_delay_in          => monit_delay_in,
                monit_ongoing_in        => monit_ongoing_in,
                monit_finish_in         => monit_finish_in,
                dt_dg_last_update_in    => dt_dg_last_update_in,
                create_user_in          => create_user_in,
                create_time_in          => create_time_in,
                create_institution_in   => create_institution_in,
                update_user_in          => update_user_in,
                update_time_in          => update_time_in,
                update_institution_in   => update_institution_in,
                lab_ext_in              => lab_ext_in,
                exam_ext_in             => exam_ext_in,
                exam_perf_in            => exam_perf_in,
                exam_wtg_in             => exam_wtg_in,
                lab_wtg_in              => lab_wtg_in,
                flg_has_stripes_in      => flg_has_stripes_in,
                lab_cc_in               => lab_cc_in,
                lab_sos_in              => lab_sos_in,
                exam_sos_in             => exam_sos_in,
                oth_exam_count_in       => oth_exam_count_in,
                oth_exam_pend_in        => oth_exam_pend_in,
                oth_exam_req_in         => oth_exam_req_in,
                oth_exam_transp_in      => oth_exam_transp_in,
                oth_exam_exec_in        => oth_exam_exec_in,
                oth_exam_result_in      => oth_exam_result_in,
                oth_exam_result_read_in => oth_exam_result_read_in,
                oth_exam_ext_in         => oth_exam_ext_in,
                oth_exam_perf_in        => oth_exam_perf_in,
                oth_exam_wtg_in         => oth_exam_wtg_in,
                oth_exam_sos_in         => oth_exam_sos_in,
                opinion_count_in        => opinion_count_in,
                opinion_state_in        => opinion_state_in,
                handle_error_in         => handle_error_in,
                rows_out                => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_episode_in           IN tracking_board_ea.id_episode%TYPE,
        id_patient_in           IN tracking_board_ea.id_patient%TYPE DEFAULT NULL,
        id_epis_type_in         IN tracking_board_ea.id_epis_type%TYPE DEFAULT NULL,
        id_triage_color_in      IN tracking_board_ea.id_triage_color%TYPE DEFAULT NULL,
        id_fast_track_in        IN tracking_board_ea.id_fast_track%TYPE DEFAULT NULL,
        id_room_in              IN tracking_board_ea.id_room%TYPE DEFAULT NULL,
        id_bed_in               IN tracking_board_ea.id_bed%TYPE DEFAULT NULL,
        dt_begin_in             IN tracking_board_ea.dt_begin%TYPE DEFAULT NULL,
        id_diet_in              IN tracking_board_ea.id_diet%TYPE DEFAULT NULL,
        desc_diet_in            IN tracking_board_ea.desc_diet%TYPE DEFAULT NULL,
        id_prof_resp_in         IN tracking_board_ea.id_prof_resp%TYPE DEFAULT NULL,
        id_nurse_resp_in        IN tracking_board_ea.id_nurse_resp%TYPE DEFAULT NULL,
        lab_count_in            IN tracking_board_ea.lab_count%TYPE DEFAULT NULL,
        lab_pend_in             IN tracking_board_ea.lab_pend%TYPE DEFAULT NULL,
        lab_req_in              IN tracking_board_ea.lab_req%TYPE DEFAULT NULL,
        lab_harv_in             IN tracking_board_ea.lab_harv%TYPE DEFAULT NULL,
        lab_transp_in           IN tracking_board_ea.lab_transp%TYPE DEFAULT NULL,
        lab_exec_in             IN tracking_board_ea.lab_exec%TYPE DEFAULT NULL,
        lab_result_in           IN tracking_board_ea.lab_result%TYPE DEFAULT NULL,
        lab_result_read_in      IN tracking_board_ea.lab_result_read%TYPE DEFAULT NULL,
        exam_count_in           IN tracking_board_ea.exam_count%TYPE DEFAULT NULL,
        exam_pend_in            IN tracking_board_ea.exam_pend%TYPE DEFAULT NULL,
        exam_req_in             IN tracking_board_ea.exam_req%TYPE DEFAULT NULL,
        exam_transp_in          IN tracking_board_ea.exam_transp%TYPE DEFAULT NULL,
        exam_exec_in            IN tracking_board_ea.exam_exec%TYPE DEFAULT NULL,
        exam_result_in          IN tracking_board_ea.exam_result%TYPE DEFAULT NULL,
        exam_result_read_in     IN tracking_board_ea.exam_result_read%TYPE DEFAULT NULL,
        interv_count_in         IN tracking_board_ea.interv_count%TYPE DEFAULT NULL,
        interv_pend_in          IN tracking_board_ea.interv_pend%TYPE DEFAULT NULL,
        interv_sos_in           IN tracking_board_ea.interv_sos%TYPE DEFAULT NULL,
        interv_req_in           IN tracking_board_ea.interv_req%TYPE DEFAULT NULL,
        interv_exec_in          IN tracking_board_ea.interv_exec%TYPE DEFAULT NULL,
        interv_finish_in        IN tracking_board_ea.interv_finish%TYPE DEFAULT NULL,
        med_count_in            IN tracking_board_ea.med_count%TYPE DEFAULT NULL,
        med_pend_in             IN tracking_board_ea.med_pend%TYPE DEFAULT NULL,
        med_req_in              IN tracking_board_ea.med_req%TYPE DEFAULT NULL,
        med_exec_in             IN tracking_board_ea.med_exec%TYPE DEFAULT NULL,
        med_finish_in           IN tracking_board_ea.med_finish%TYPE DEFAULT NULL,
        med_sos_in              IN tracking_board_ea.med_sos%TYPE DEFAULT NULL,
        transp_count_in         IN tracking_board_ea.transp_count%TYPE DEFAULT NULL,
        transp_delay_in         IN tracking_board_ea.transp_delay%TYPE DEFAULT NULL,
        transp_ongoing_in       IN tracking_board_ea.transp_ongoing%TYPE DEFAULT NULL,
        monit_count_in          IN tracking_board_ea.monit_count%TYPE DEFAULT NULL,
        monit_delay_in          IN tracking_board_ea.monit_delay%TYPE DEFAULT NULL,
        monit_ongoing_in        IN tracking_board_ea.monit_ongoing%TYPE DEFAULT NULL,
        monit_finish_in         IN tracking_board_ea.monit_finish%TYPE DEFAULT NULL,
        dt_dg_last_update_in    IN tracking_board_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        create_user_in          IN tracking_board_ea.create_user%TYPE DEFAULT NULL,
        create_time_in          IN tracking_board_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN tracking_board_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN tracking_board_ea.update_user%TYPE DEFAULT NULL,
        update_time_in          IN tracking_board_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN tracking_board_ea.update_institution%TYPE DEFAULT NULL,
        lab_ext_in              IN tracking_board_ea.lab_ext%TYPE DEFAULT NULL,
        exam_ext_in             IN tracking_board_ea.exam_ext%TYPE DEFAULT NULL,
        exam_perf_in            IN tracking_board_ea.exam_perf%TYPE DEFAULT NULL,
        exam_wtg_in             IN tracking_board_ea.exam_wtg%TYPE DEFAULT NULL,
        lab_wtg_in              IN tracking_board_ea.lab_wtg%TYPE DEFAULT NULL,
        flg_has_stripes_in      IN tracking_board_ea.flg_has_stripes%TYPE DEFAULT NULL,
        lab_cc_in               IN tracking_board_ea.lab_cc%TYPE DEFAULT NULL,
        lab_sos_in              IN tracking_board_ea.lab_sos%TYPE DEFAULT NULL,
        exam_sos_in             IN tracking_board_ea.exam_sos%TYPE DEFAULT NULL,
        oth_exam_count_in       IN tracking_board_ea.oth_exam_count%TYPE DEFAULT NULL,
        oth_exam_pend_in        IN tracking_board_ea.oth_exam_pend%TYPE DEFAULT NULL,
        oth_exam_req_in         IN tracking_board_ea.oth_exam_req%TYPE DEFAULT NULL,
        oth_exam_transp_in      IN tracking_board_ea.oth_exam_transp%TYPE DEFAULT NULL,
        oth_exam_exec_in        IN tracking_board_ea.oth_exam_exec%TYPE DEFAULT NULL,
        oth_exam_result_in      IN tracking_board_ea.oth_exam_result%TYPE DEFAULT NULL,
        oth_exam_result_read_in IN tracking_board_ea.oth_exam_result_read%TYPE DEFAULT NULL,
        oth_exam_ext_in         IN tracking_board_ea.oth_exam_ext%TYPE DEFAULT NULL,
        oth_exam_perf_in        IN tracking_board_ea.oth_exam_perf%TYPE DEFAULT NULL,
        oth_exam_wtg_in         IN tracking_board_ea.oth_exam_wtg%TYPE DEFAULT NULL,
        oth_exam_sos_in         IN tracking_board_ea.oth_exam_sos%TYPE DEFAULT NULL,
        opinion_count_in        IN tracking_board_ea.opinion_count%TYPE DEFAULT NULL,
        opinion_state_in        IN tracking_board_ea.opinion_state%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_episode_in,
                id_patient_in,
                id_epis_type_in,
                id_triage_color_in,
                id_fast_track_in,
                id_room_in,
                id_bed_in,
                dt_begin_in,
                id_diet_in,
                desc_diet_in,
                id_prof_resp_in,
                id_nurse_resp_in,
                lab_count_in,
                lab_pend_in,
                lab_req_in,
                lab_harv_in,
                lab_transp_in,
                lab_exec_in,
                lab_result_in,
                lab_result_read_in,
                exam_count_in,
                exam_pend_in,
                exam_req_in,
                exam_transp_in,
                exam_exec_in,
                exam_result_in,
                exam_result_read_in,
                interv_count_in,
                interv_pend_in,
                interv_sos_in,
                interv_req_in,
                interv_exec_in,
                interv_finish_in,
                med_count_in,
                med_pend_in,
                med_req_in,
                med_exec_in,
                med_finish_in,
                med_sos_in,
                transp_count_in,
                transp_delay_in,
                transp_ongoing_in,
                monit_count_in,
                monit_delay_in,
                monit_ongoing_in,
                monit_finish_in,
                dt_dg_last_update_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                lab_ext_in,
                exam_ext_in,
                exam_perf_in,
                exam_wtg_in,
                lab_wtg_in,
                flg_has_stripes_in,
                lab_cc_in,
                lab_sos_in,
                exam_sos_in,
                oth_exam_count_in,
                oth_exam_pend_in,
                oth_exam_req_in,
                oth_exam_transp_in,
                oth_exam_exec_in,
                oth_exam_result_in,
                oth_exam_result_read_in,
                oth_exam_ext_in,
                oth_exam_perf_in,
                oth_exam_wtg_in,
                oth_exam_sos_in,
                opinion_count_in,
                opinion_state_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN tracking_board_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_episode           id_episode_cc;
        l_id_patient           id_patient_cc;
        l_id_epis_type         id_epis_type_cc;
        l_id_triage_color      id_triage_color_cc;
        l_id_fast_track        id_fast_track_cc;
        l_id_room              id_room_cc;
        l_id_bed               id_bed_cc;
        l_dt_begin             dt_begin_cc;
        l_id_diet              id_diet_cc;
        l_desc_diet            desc_diet_cc;
        l_id_prof_resp         id_prof_resp_cc;
        l_id_nurse_resp        id_nurse_resp_cc;
        l_lab_count            lab_count_cc;
        l_lab_pend             lab_pend_cc;
        l_lab_req              lab_req_cc;
        l_lab_harv             lab_harv_cc;
        l_lab_transp           lab_transp_cc;
        l_lab_exec             lab_exec_cc;
        l_lab_result           lab_result_cc;
        l_lab_result_read      lab_result_read_cc;
        l_exam_count           exam_count_cc;
        l_exam_pend            exam_pend_cc;
        l_exam_req             exam_req_cc;
        l_exam_transp          exam_transp_cc;
        l_exam_exec            exam_exec_cc;
        l_exam_result          exam_result_cc;
        l_exam_result_read     exam_result_read_cc;
        l_interv_count         interv_count_cc;
        l_interv_pend          interv_pend_cc;
        l_interv_sos           interv_sos_cc;
        l_interv_req           interv_req_cc;
        l_interv_exec          interv_exec_cc;
        l_interv_finish        interv_finish_cc;
        l_med_count            med_count_cc;
        l_med_pend             med_pend_cc;
        l_med_req              med_req_cc;
        l_med_exec             med_exec_cc;
        l_med_finish           med_finish_cc;
        l_med_sos              med_sos_cc;
        l_transp_count         transp_count_cc;
        l_transp_delay         transp_delay_cc;
        l_transp_ongoing       transp_ongoing_cc;
        l_monit_count          monit_count_cc;
        l_monit_delay          monit_delay_cc;
        l_monit_ongoing        monit_ongoing_cc;
        l_monit_finish         monit_finish_cc;
        l_dt_dg_last_update    dt_dg_last_update_cc;
        l_create_user          create_user_cc;
        l_create_time          create_time_cc;
        l_create_institution   create_institution_cc;
        l_update_user          update_user_cc;
        l_update_time          update_time_cc;
        l_update_institution   update_institution_cc;
        l_lab_ext              lab_ext_cc;
        l_exam_ext             exam_ext_cc;
        l_exam_perf            exam_perf_cc;
        l_exam_wtg             exam_wtg_cc;
        l_lab_wtg              lab_wtg_cc;
        l_flg_has_stripes      flg_has_stripes_cc;
        l_lab_cc               lab_cc_cc;
        l_lab_sos              lab_sos_cc;
        l_exam_sos             exam_sos_cc;
        l_oth_exam_count       oth_exam_count_cc;
        l_oth_exam_pend        oth_exam_pend_cc;
        l_oth_exam_req         oth_exam_req_cc;
        l_oth_exam_transp      oth_exam_transp_cc;
        l_oth_exam_exec        oth_exam_exec_cc;
        l_oth_exam_result      oth_exam_result_cc;
        l_oth_exam_result_read oth_exam_result_read_cc;
        l_oth_exam_ext         oth_exam_ext_cc;
        l_oth_exam_perf        oth_exam_perf_cc;
        l_oth_exam_wtg         oth_exam_wtg_cc;
        l_oth_exam_sos         oth_exam_sos_cc;
        l_opinion_count        opinion_count_cc;
        l_opinion_state        opinion_state_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_episode(i) := col_in(i).id_episode;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_epis_type(i) := col_in(i).id_epis_type;
            l_id_triage_color(i) := col_in(i).id_triage_color;
            l_id_fast_track(i) := col_in(i).id_fast_track;
            l_id_room(i) := col_in(i).id_room;
            l_id_bed(i) := col_in(i).id_bed;
            l_dt_begin(i) := col_in(i).dt_begin;
            l_id_diet(i) := col_in(i).id_diet;
            l_desc_diet(i) := col_in(i).desc_diet;
            l_id_prof_resp(i) := col_in(i).id_prof_resp;
            l_id_nurse_resp(i) := col_in(i).id_nurse_resp;
            l_lab_count(i) := col_in(i).lab_count;
            l_lab_pend(i) := col_in(i).lab_pend;
            l_lab_req(i) := col_in(i).lab_req;
            l_lab_harv(i) := col_in(i).lab_harv;
            l_lab_transp(i) := col_in(i).lab_transp;
            l_lab_exec(i) := col_in(i).lab_exec;
            l_lab_result(i) := col_in(i).lab_result;
            l_lab_result_read(i) := col_in(i).lab_result_read;
            l_exam_count(i) := col_in(i).exam_count;
            l_exam_pend(i) := col_in(i).exam_pend;
            l_exam_req(i) := col_in(i).exam_req;
            l_exam_transp(i) := col_in(i).exam_transp;
            l_exam_exec(i) := col_in(i).exam_exec;
            l_exam_result(i) := col_in(i).exam_result;
            l_exam_result_read(i) := col_in(i).exam_result_read;
            l_interv_count(i) := col_in(i).interv_count;
            l_interv_pend(i) := col_in(i).interv_pend;
            l_interv_sos(i) := col_in(i).interv_sos;
            l_interv_req(i) := col_in(i).interv_req;
            l_interv_exec(i) := col_in(i).interv_exec;
            l_interv_finish(i) := col_in(i).interv_finish;
            l_med_count(i) := col_in(i).med_count;
            l_med_pend(i) := col_in(i).med_pend;
            l_med_req(i) := col_in(i).med_req;
            l_med_exec(i) := col_in(i).med_exec;
            l_med_finish(i) := col_in(i).med_finish;
            l_med_sos(i) := col_in(i).med_sos;
            l_transp_count(i) := col_in(i).transp_count;
            l_transp_delay(i) := col_in(i).transp_delay;
            l_transp_ongoing(i) := col_in(i).transp_ongoing;
            l_monit_count(i) := col_in(i).monit_count;
            l_monit_delay(i) := col_in(i).monit_delay;
            l_monit_ongoing(i) := col_in(i).monit_ongoing;
            l_monit_finish(i) := col_in(i).monit_finish;
            l_dt_dg_last_update(i) := col_in(i).dt_dg_last_update;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_lab_ext(i) := col_in(i).lab_ext;
            l_exam_ext(i) := col_in(i).exam_ext;
            l_exam_perf(i) := col_in(i).exam_perf;
            l_exam_wtg(i) := col_in(i).exam_wtg;
            l_lab_wtg(i) := col_in(i).lab_wtg;
            l_flg_has_stripes(i) := col_in(i).flg_has_stripes;
            l_lab_cc(i) := col_in(i).lab_cc;
            l_lab_sos(i) := col_in(i).lab_sos;
            l_exam_sos(i) := col_in(i).exam_sos;
            l_oth_exam_count(i) := col_in(i).oth_exam_count;
            l_oth_exam_pend(i) := col_in(i).oth_exam_pend;
            l_oth_exam_req(i) := col_in(i).oth_exam_req;
            l_oth_exam_transp(i) := col_in(i).oth_exam_transp;
            l_oth_exam_exec(i) := col_in(i).oth_exam_exec;
            l_oth_exam_result(i) := col_in(i).oth_exam_result;
            l_oth_exam_result_read(i) := col_in(i).oth_exam_result_read;
            l_oth_exam_ext(i) := col_in(i).oth_exam_ext;
            l_oth_exam_perf(i) := col_in(i).oth_exam_perf;
            l_oth_exam_wtg(i) := col_in(i).oth_exam_wtg;
            l_oth_exam_sos(i) := col_in(i).oth_exam_sos;
            l_opinion_count(i) := col_in(i).opinion_count;
            l_opinion_state(i) := col_in(i).opinion_state;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE tracking_board_ea
                   SET id_patient           = nvl(l_id_patient(i), id_patient),
                       id_epis_type         = nvl(l_id_epis_type(i), id_epis_type),
                       id_triage_color      = nvl(l_id_triage_color(i), id_triage_color),
                       id_fast_track        = nvl(l_id_fast_track(i), id_fast_track),
                       id_room              = nvl(l_id_room(i), id_room),
                       id_bed               = nvl(l_id_bed(i), id_bed),
                       dt_begin             = nvl(l_dt_begin(i), dt_begin),
                       id_diet              = nvl(l_id_diet(i), id_diet),
                       desc_diet            = nvl(l_desc_diet(i), desc_diet),
                       id_prof_resp         = nvl(l_id_prof_resp(i), id_prof_resp),
                       id_nurse_resp        = nvl(l_id_nurse_resp(i), id_nurse_resp),
                       lab_count            = nvl(l_lab_count(i), lab_count),
                       lab_pend             = nvl(l_lab_pend(i), lab_pend),
                       lab_req              = nvl(l_lab_req(i), lab_req),
                       lab_harv             = nvl(l_lab_harv(i), lab_harv),
                       lab_transp           = nvl(l_lab_transp(i), lab_transp),
                       lab_exec             = nvl(l_lab_exec(i), lab_exec),
                       lab_result           = nvl(l_lab_result(i), lab_result),
                       lab_result_read      = nvl(l_lab_result_read(i), lab_result_read),
                       exam_count           = nvl(l_exam_count(i), exam_count),
                       exam_pend            = nvl(l_exam_pend(i), exam_pend),
                       exam_req             = nvl(l_exam_req(i), exam_req),
                       exam_transp          = nvl(l_exam_transp(i), exam_transp),
                       exam_exec            = nvl(l_exam_exec(i), exam_exec),
                       exam_result          = nvl(l_exam_result(i), exam_result),
                       exam_result_read     = nvl(l_exam_result_read(i), exam_result_read),
                       interv_count         = nvl(l_interv_count(i), interv_count),
                       interv_pend          = nvl(l_interv_pend(i), interv_pend),
                       interv_sos           = nvl(l_interv_sos(i), interv_sos),
                       interv_req           = nvl(l_interv_req(i), interv_req),
                       interv_exec          = nvl(l_interv_exec(i), interv_exec),
                       interv_finish        = nvl(l_interv_finish(i), interv_finish),
                       med_count            = nvl(l_med_count(i), med_count),
                       med_pend             = nvl(l_med_pend(i), med_pend),
                       med_req              = nvl(l_med_req(i), med_req),
                       med_exec             = nvl(l_med_exec(i), med_exec),
                       med_finish           = nvl(l_med_finish(i), med_finish),
                       med_sos              = nvl(l_med_sos(i), med_sos),
                       transp_count         = nvl(l_transp_count(i), transp_count),
                       transp_delay         = nvl(l_transp_delay(i), transp_delay),
                       transp_ongoing       = nvl(l_transp_ongoing(i), transp_ongoing),
                       monit_count          = nvl(l_monit_count(i), monit_count),
                       monit_delay          = nvl(l_monit_delay(i), monit_delay),
                       monit_ongoing        = nvl(l_monit_ongoing(i), monit_ongoing),
                       monit_finish         = nvl(l_monit_finish(i), monit_finish),
                       dt_dg_last_update    = nvl(l_dt_dg_last_update(i), current_timestamp),
                       create_user          = nvl(l_create_user(i), create_user),
                       create_time          = nvl(l_create_time(i), create_time),
                       create_institution   = nvl(l_create_institution(i), create_institution),
                       update_user          = nvl(l_update_user(i), update_user),
                       update_time          = nvl(l_update_time(i), update_time),
                       update_institution   = nvl(l_update_institution(i), update_institution),
                       lab_ext              = nvl(l_lab_ext(i), lab_ext),
                       exam_ext             = nvl(l_exam_ext(i), exam_ext),
                       exam_perf            = nvl(l_exam_perf(i), exam_perf),
                       exam_wtg             = nvl(l_exam_wtg(i), exam_wtg),
                       lab_wtg              = nvl(l_lab_wtg(i), lab_wtg),
                       flg_has_stripes      = nvl(l_flg_has_stripes(i), flg_has_stripes),
                       lab_cc               = nvl(l_lab_cc(i), lab_cc),
                       lab_sos              = nvl(l_lab_sos(i), lab_sos),
                       exam_sos             = nvl(l_exam_sos(i), exam_sos),
                       oth_exam_count       = nvl(l_oth_exam_count(i), oth_exam_count),
                       oth_exam_pend        = nvl(l_oth_exam_pend(i), oth_exam_pend),
                       oth_exam_req         = nvl(l_oth_exam_req(i), oth_exam_req),
                       oth_exam_transp      = nvl(l_oth_exam_transp(i), oth_exam_transp),
                       oth_exam_exec        = nvl(l_oth_exam_exec(i), oth_exam_exec),
                       oth_exam_result      = nvl(l_oth_exam_result(i), oth_exam_result),
                       oth_exam_result_read = nvl(l_oth_exam_result_read(i), oth_exam_result_read),
                       oth_exam_ext         = nvl(l_oth_exam_ext(i), oth_exam_ext),
                       oth_exam_perf        = nvl(l_oth_exam_perf(i), oth_exam_perf),
                       oth_exam_wtg         = nvl(l_oth_exam_wtg(i), oth_exam_wtg),
                       oth_exam_sos         = nvl(l_oth_exam_sos(i), oth_exam_sos),
                       opinion_count        = nvl(l_opinion_count(i), opinion_count),
                       opinion_state        = nvl(l_opinion_state(i), opinion_state)
                 WHERE id_episode = l_id_episode(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE tracking_board_ea
                   SET id_patient           = l_id_patient(i),
                       id_epis_type         = l_id_epis_type(i),
                       id_triage_color      = l_id_triage_color(i),
                       id_fast_track        = l_id_fast_track(i),
                       id_room              = l_id_room(i),
                       id_bed               = l_id_bed(i),
                       dt_begin             = l_dt_begin(i),
                       id_diet              = l_id_diet(i),
                       desc_diet            = l_desc_diet(i),
                       id_prof_resp         = l_id_prof_resp(i),
                       id_nurse_resp        = l_id_nurse_resp(i),
                       lab_count            = l_lab_count(i),
                       lab_pend             = l_lab_pend(i),
                       lab_req              = l_lab_req(i),
                       lab_harv             = l_lab_harv(i),
                       lab_transp           = l_lab_transp(i),
                       lab_exec             = l_lab_exec(i),
                       lab_result           = l_lab_result(i),
                       lab_result_read      = l_lab_result_read(i),
                       exam_count           = l_exam_count(i),
                       exam_pend            = l_exam_pend(i),
                       exam_req             = l_exam_req(i),
                       exam_transp          = l_exam_transp(i),
                       exam_exec            = l_exam_exec(i),
                       exam_result          = l_exam_result(i),
                       exam_result_read     = l_exam_result_read(i),
                       interv_count         = l_interv_count(i),
                       interv_pend          = l_interv_pend(i),
                       interv_sos           = l_interv_sos(i),
                       interv_req           = l_interv_req(i),
                       interv_exec          = l_interv_exec(i),
                       interv_finish        = l_interv_finish(i),
                       med_count            = l_med_count(i),
                       med_pend             = l_med_pend(i),
                       med_req              = l_med_req(i),
                       med_exec             = l_med_exec(i),
                       med_finish           = l_med_finish(i),
                       med_sos              = l_med_sos(i),
                       transp_count         = l_transp_count(i),
                       transp_delay         = l_transp_delay(i),
                       transp_ongoing       = l_transp_ongoing(i),
                       monit_count          = l_monit_count(i),
                       monit_delay          = l_monit_delay(i),
                       monit_ongoing        = l_monit_ongoing(i),
                       monit_finish         = l_monit_finish(i),
                       dt_dg_last_update    = nvl(l_dt_dg_last_update(i), current_timestamp),
                       create_user          = l_create_user(i),
                       create_time          = l_create_time(i),
                       create_institution   = l_create_institution(i),
                       update_user          = l_update_user(i),
                       update_time          = l_update_time(i),
                       update_institution   = l_update_institution(i),
                       lab_ext              = l_lab_ext(i),
                       exam_ext             = l_exam_ext(i),
                       exam_perf            = l_exam_perf(i),
                       exam_wtg             = l_exam_wtg(i),
                       lab_wtg              = l_lab_wtg(i),
                       flg_has_stripes      = l_flg_has_stripes(i),
                       lab_cc               = l_lab_cc(i),
                       lab_sos              = l_lab_sos(i),
                       exam_sos             = l_exam_sos(i),
                       oth_exam_count       = l_oth_exam_count(i),
                       oth_exam_pend        = l_oth_exam_pend(i),
                       oth_exam_req         = l_oth_exam_req(i),
                       oth_exam_transp      = l_oth_exam_transp(i),
                       oth_exam_exec        = l_oth_exam_exec(i),
                       oth_exam_result      = l_oth_exam_result(i),
                       oth_exam_result_read = l_oth_exam_result_read(i),
                       oth_exam_ext         = l_oth_exam_ext(i),
                       oth_exam_perf        = l_oth_exam_perf(i),
                       oth_exam_wtg         = l_oth_exam_wtg(i),
                       oth_exam_sos         = l_oth_exam_sos(i),
                       opinion_count        = l_opinion_count(i),
                       opinion_state        = l_opinion_state(i)
                 WHERE id_episode = l_id_episode(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN tracking_board_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE TRACKING_BOARD_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE TRACKING_BOARD_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE TRACKING_BOARD_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE TRACKING_BOARD_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_episode_in   IN tracking_board_ea.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM tracking_board_ea
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_episode_in   IN tracking_board_ea.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_EPISODE
    PROCEDURE del_id_episode
    (
        id_episode_in   IN tracking_board_ea.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM tracking_board_ea
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_episode;

    -- Delete all rows for primary key column ID_EPISODE
    PROCEDURE del_id_episode
    (
        id_episode_in   IN tracking_board_ea.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_episode(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_episode;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM TRACKING_BOARD_EA';
        ELSE
            RETURN 'DELETE FROM TRACKING_BOARD_EA WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRACKING_BOARD_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRACKING_BOARD_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(tracking_board_ea_inout IN OUT tracking_board_ea%ROWTYPE) IS
    BEGIN
        tracking_board_ea_inout.id_episode           := NULL;
        tracking_board_ea_inout.id_patient           := NULL;
        tracking_board_ea_inout.id_epis_type         := NULL;
        tracking_board_ea_inout.id_triage_color      := NULL;
        tracking_board_ea_inout.id_fast_track        := NULL;
        tracking_board_ea_inout.id_room              := NULL;
        tracking_board_ea_inout.id_bed               := NULL;
        tracking_board_ea_inout.dt_begin             := NULL;
        tracking_board_ea_inout.id_diet              := NULL;
        tracking_board_ea_inout.desc_diet            := NULL;
        tracking_board_ea_inout.id_prof_resp         := NULL;
        tracking_board_ea_inout.id_nurse_resp        := NULL;
        tracking_board_ea_inout.lab_count            := 0;
        tracking_board_ea_inout.lab_pend             := NULL;
        tracking_board_ea_inout.lab_req              := NULL;
        tracking_board_ea_inout.lab_harv             := NULL;
        tracking_board_ea_inout.lab_transp           := NULL;
        tracking_board_ea_inout.lab_exec             := NULL;
        tracking_board_ea_inout.lab_result           := NULL;
        tracking_board_ea_inout.lab_result_read      := NULL;
        tracking_board_ea_inout.exam_count           := 0;
        tracking_board_ea_inout.exam_pend            := NULL;
        tracking_board_ea_inout.exam_req             := NULL;
        tracking_board_ea_inout.exam_transp          := NULL;
        tracking_board_ea_inout.exam_exec            := NULL;
        tracking_board_ea_inout.exam_result          := NULL;
        tracking_board_ea_inout.exam_result_read     := NULL;
        tracking_board_ea_inout.interv_count         := 0;
        tracking_board_ea_inout.interv_pend          := NULL;
        tracking_board_ea_inout.interv_sos           := NULL;
        tracking_board_ea_inout.interv_req           := NULL;
        tracking_board_ea_inout.interv_exec          := NULL;
        tracking_board_ea_inout.interv_finish        := NULL;
        tracking_board_ea_inout.med_count            := 0;
        tracking_board_ea_inout.med_pend             := NULL;
        tracking_board_ea_inout.med_req              := NULL;
        tracking_board_ea_inout.med_exec             := NULL;
        tracking_board_ea_inout.med_finish           := NULL;
        tracking_board_ea_inout.med_sos              := NULL;
        tracking_board_ea_inout.transp_count         := 0;
        tracking_board_ea_inout.transp_delay         := NULL;
        tracking_board_ea_inout.transp_ongoing       := NULL;
        tracking_board_ea_inout.monit_count          := 0;
        tracking_board_ea_inout.monit_delay          := NULL;
        tracking_board_ea_inout.monit_ongoing        := NULL;
        tracking_board_ea_inout.monit_finish         := NULL;
        tracking_board_ea_inout.dt_dg_last_update    := current_timestamp;
        tracking_board_ea_inout.create_user          := NULL;
        tracking_board_ea_inout.create_time          := NULL;
        tracking_board_ea_inout.create_institution   := NULL;
        tracking_board_ea_inout.update_user          := NULL;
        tracking_board_ea_inout.update_time          := NULL;
        tracking_board_ea_inout.update_institution   := NULL;
        tracking_board_ea_inout.lab_ext              := NULL;
        tracking_board_ea_inout.exam_ext             := NULL;
        tracking_board_ea_inout.exam_perf            := NULL;
        tracking_board_ea_inout.exam_wtg             := NULL;
        tracking_board_ea_inout.lab_wtg              := NULL;
        tracking_board_ea_inout.flg_has_stripes      := NULL;
        tracking_board_ea_inout.lab_cc               := NULL;
        tracking_board_ea_inout.lab_sos              := NULL;
        tracking_board_ea_inout.exam_sos             := NULL;
        tracking_board_ea_inout.oth_exam_count       := 0;
        tracking_board_ea_inout.oth_exam_pend        := NULL;
        tracking_board_ea_inout.oth_exam_req         := NULL;
        tracking_board_ea_inout.oth_exam_transp      := NULL;
        tracking_board_ea_inout.oth_exam_exec        := NULL;
        tracking_board_ea_inout.oth_exam_result      := NULL;
        tracking_board_ea_inout.oth_exam_result_read := NULL;
        tracking_board_ea_inout.oth_exam_ext         := NULL;
        tracking_board_ea_inout.oth_exam_perf        := NULL;
        tracking_board_ea_inout.oth_exam_wtg         := NULL;
        tracking_board_ea_inout.oth_exam_sos         := NULL;
        tracking_board_ea_inout.opinion_count        := 0;
        tracking_board_ea_inout.opinion_state        := NULL;
    END initrec;

    FUNCTION initrec RETURN tracking_board_ea%ROWTYPE IS
        l_tracking_board_ea tracking_board_ea%ROWTYPE;
    BEGIN
        l_tracking_board_ea.lab_count         := 0;
        l_tracking_board_ea.exam_count        := 0;
        l_tracking_board_ea.interv_count      := 0;
        l_tracking_board_ea.med_count         := 0;
        l_tracking_board_ea.transp_count      := 0;
        l_tracking_board_ea.monit_count       := 0;
        l_tracking_board_ea.dt_dg_last_update := current_timestamp;
        l_tracking_board_ea.oth_exam_count    := 0;
        l_tracking_board_ea.opinion_count     := 0;
        RETURN l_tracking_board_ea;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN tracking_board_ea_tc IS
        data tracking_board_ea_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM tracking_board_ea
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN tracking_board_ea_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data tracking_board_ea_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_tracking_board_ea;
/
