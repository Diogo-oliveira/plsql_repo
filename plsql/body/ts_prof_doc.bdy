/*-- Last Change Revision: $Rev: 1921094 $*/
/*-- Last Change by: $Author: pedro.henriques $*/
/*-- Date of last change: $Date: 2019-10-18 11:58:15 +0100 (sex, 18 out 2019) $*/
CREATE OR REPLACE PACKAGE BODY ts_prof_doc
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2019-10-14 17:12:19
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN prof_doc.id_prof_doc%TYPE IS
        retval prof_doc.id_prof_doc%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_prof_doc.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_doc_type_in        IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_professional_in    IN prof_doc.id_professional%TYPE DEFAULT NULL,
        value_in              IN prof_doc.value%TYPE DEFAULT NULL,
        id_institution_in     IN prof_doc.id_institution%TYPE DEFAULT NULL,
        local_emited_in       IN prof_doc.local_emited%TYPE DEFAULT NULL,
        dt_emited_tstz_in     IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_in     IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        create_user_in        IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_time_in        IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_institution_in IN prof_doc.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_time_in        IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_institution_in IN prof_doc.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky prof_doc.id_prof_doc%TYPE := next_key;
    BEGIN
        ins(id_prof_doc_in        => l_pky,
            id_doc_type_in        => id_doc_type_in,
            id_professional_in    => id_professional_in,
            value_in              => value_in,
            id_institution_in     => id_institution_in,
            local_emited_in       => local_emited_in,
            dt_emited_tstz_in     => dt_emited_tstz_in,
            dt_expire_tstz_in     => dt_expire_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_doc_type_in        IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_professional_in    IN prof_doc.id_professional%TYPE DEFAULT NULL,
        value_in              IN prof_doc.value%TYPE DEFAULT NULL,
        id_institution_in     IN prof_doc.id_institution%TYPE DEFAULT NULL,
        local_emited_in       IN prof_doc.local_emited%TYPE DEFAULT NULL,
        dt_emited_tstz_in     IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_in     IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        create_user_in        IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_time_in        IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_institution_in IN prof_doc.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_time_in        IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_institution_in IN prof_doc.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_doc_type_in        => id_doc_type_in,
            id_professional_in    => id_professional_in,
            value_in              => value_in,
            id_institution_in     => id_institution_in,
            local_emited_in       => local_emited_in,
            dt_emited_tstz_in     => dt_emited_tstz_in,
            dt_expire_tstz_in     => dt_expire_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_doc_type_in        IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_professional_in    IN prof_doc.id_professional%TYPE DEFAULT NULL,
        value_in              IN prof_doc.value%TYPE DEFAULT NULL,
        id_institution_in     IN prof_doc.id_institution%TYPE DEFAULT NULL,
        local_emited_in       IN prof_doc.local_emited%TYPE DEFAULT NULL,
        dt_emited_tstz_in     IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_in     IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        create_user_in        IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_time_in        IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_institution_in IN prof_doc.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_time_in        IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_institution_in IN prof_doc.update_institution%TYPE DEFAULT NULL,
        id_prof_doc_out       IN OUT prof_doc.id_prof_doc%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky prof_doc.id_prof_doc%TYPE := next_key;
    BEGIN
        ins(id_prof_doc_in        => l_pky,
            id_doc_type_in        => id_doc_type_in,
            id_professional_in    => id_professional_in,
            value_in              => value_in,
            id_institution_in     => id_institution_in,
            local_emited_in       => local_emited_in,
            dt_emited_tstz_in     => dt_emited_tstz_in,
            dt_expire_tstz_in     => dt_expire_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        id_prof_doc_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_doc_type_in        IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_professional_in    IN prof_doc.id_professional%TYPE DEFAULT NULL,
        value_in              IN prof_doc.value%TYPE DEFAULT NULL,
        id_institution_in     IN prof_doc.id_institution%TYPE DEFAULT NULL,
        local_emited_in       IN prof_doc.local_emited%TYPE DEFAULT NULL,
        dt_emited_tstz_in     IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_in     IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        create_user_in        IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_time_in        IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_institution_in IN prof_doc.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_time_in        IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_institution_in IN prof_doc.update_institution%TYPE DEFAULT NULL,
        id_prof_doc_out       IN OUT prof_doc.id_prof_doc%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_doc_type_in        => id_doc_type_in,
            id_professional_in    => id_professional_in,
            value_in              => value_in,
            id_institution_in     => id_institution_in,
            local_emited_in       => local_emited_in,
            dt_emited_tstz_in     => dt_emited_tstz_in,
            dt_expire_tstz_in     => dt_expire_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_prof_doc_out       => id_prof_doc_out,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_doc_type_in        IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_professional_in    IN prof_doc.id_professional%TYPE DEFAULT NULL,
        value_in              IN prof_doc.value%TYPE DEFAULT NULL,
        id_institution_in     IN prof_doc.id_institution%TYPE DEFAULT NULL,
        local_emited_in       IN prof_doc.local_emited%TYPE DEFAULT NULL,
        dt_emited_tstz_in     IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_in     IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        create_user_in        IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_time_in        IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_institution_in IN prof_doc.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_time_in        IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_institution_in IN prof_doc.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN prof_doc.id_prof_doc%TYPE IS
        l_pky prof_doc.id_prof_doc%TYPE := next_key;
    BEGIN
        ins(id_prof_doc_in        => l_pky,
            id_doc_type_in        => id_doc_type_in,
            id_professional_in    => id_professional_in,
            value_in              => value_in,
            id_institution_in     => id_institution_in,
            local_emited_in       => local_emited_in,
            dt_emited_tstz_in     => dt_emited_tstz_in,
            dt_expire_tstz_in     => dt_expire_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_doc_type_in        IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_professional_in    IN prof_doc.id_professional%TYPE DEFAULT NULL,
        value_in              IN prof_doc.value%TYPE DEFAULT NULL,
        id_institution_in     IN prof_doc.id_institution%TYPE DEFAULT NULL,
        local_emited_in       IN prof_doc.local_emited%TYPE DEFAULT NULL,
        dt_emited_tstz_in     IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_in     IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        create_user_in        IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_time_in        IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_institution_in IN prof_doc.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_time_in        IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_institution_in IN prof_doc.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN prof_doc.id_prof_doc%TYPE IS
        l_pky    prof_doc.id_prof_doc%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_prof_doc_in        => l_pky,
            id_doc_type_in        => id_doc_type_in,
            id_professional_in    => id_professional_in,
            value_in              => value_in,
            id_institution_in     => id_institution_in,
            local_emited_in       => local_emited_in,
            dt_emited_tstz_in     => dt_emited_tstz_in,
            dt_expire_tstz_in     => dt_expire_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_prof_doc_in        IN prof_doc.id_prof_doc%TYPE,
        id_doc_type_in        IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_professional_in    IN prof_doc.id_professional%TYPE DEFAULT NULL,
        value_in              IN prof_doc.value%TYPE DEFAULT NULL,
        id_institution_in     IN prof_doc.id_institution%TYPE DEFAULT NULL,
        local_emited_in       IN prof_doc.local_emited%TYPE DEFAULT NULL,
        dt_emited_tstz_in     IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_in     IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        create_user_in        IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_time_in        IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_institution_in IN prof_doc.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_time_in        IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_institution_in IN prof_doc.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO prof_doc
            (id_prof_doc,
             id_doc_type,
             id_professional,
             VALUE,
             id_institution,
             local_emited,
             dt_emited_tstz,
             dt_expire_tstz,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_prof_doc_in,
             id_doc_type_in,
             id_professional_in,
             value_in,
             id_institution_in,
             local_emited_in,
             dt_emited_tstz_in,
             dt_expire_tstz_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_prof_doc_in        IN prof_doc.id_prof_doc%TYPE,
        id_doc_type_in        IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_professional_in    IN prof_doc.id_professional%TYPE DEFAULT NULL,
        value_in              IN prof_doc.value%TYPE DEFAULT NULL,
        id_institution_in     IN prof_doc.id_institution%TYPE DEFAULT NULL,
        local_emited_in       IN prof_doc.local_emited%TYPE DEFAULT NULL,
        dt_emited_tstz_in     IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_in     IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        create_user_in        IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_time_in        IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_institution_in IN prof_doc.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_time_in        IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_institution_in IN prof_doc.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_prof_doc_in        => id_prof_doc_in,
            id_doc_type_in        => id_doc_type_in,
            id_professional_in    => id_professional_in,
            value_in              => value_in,
            id_institution_in     => id_institution_in,
            local_emited_in       => local_emited_in,
            dt_emited_tstz_in     => dt_emited_tstz_in,
            dt_expire_tstz_in     => dt_expire_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN prof_doc%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec prof_doc%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_prof_doc := next_key(sequence_in);
        END IF;
    
        ins(id_prof_doc_in        => l_rec.id_prof_doc,
            id_doc_type_in        => l_rec.id_doc_type,
            id_professional_in    => l_rec.id_professional,
            value_in              => l_rec.value,
            id_institution_in     => l_rec.id_institution,
            local_emited_in       => l_rec.local_emited,
            dt_emited_tstz_in     => l_rec.dt_emited_tstz,
            dt_expire_tstz_in     => l_rec.dt_expire_tstz,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_time_in        => l_rec.update_time,
            update_institution_in => l_rec.update_institution,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN prof_doc%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN prof_doc_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO prof_doc
                    (id_prof_doc,
                     id_doc_type,
                     id_professional,
                     VALUE,
                     id_institution,
                     local_emited,
                     dt_emited_tstz,
                     dt_expire_tstz)
                VALUES
                    (rows_in(indx).id_prof_doc,
                     rows_in(indx).id_doc_type,
                     rows_in(indx).id_professional,
                     rows_in(indx).value,
                     rows_in(indx).id_institution,
                     rows_in(indx).local_emited,
                     rows_in(indx).dt_emited_tstz,
                     rows_in(indx).dt_expire_tstz)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN prof_doc_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_prof_doc_in         IN prof_doc.id_prof_doc%TYPE,
        id_doc_type_in         IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_doc_type_nin        IN BOOLEAN := TRUE,
        id_professional_in     IN prof_doc.id_professional%TYPE DEFAULT NULL,
        id_professional_nin    IN BOOLEAN := TRUE,
        value_in               IN prof_doc.value%TYPE DEFAULT NULL,
        value_nin              IN BOOLEAN := TRUE,
        id_institution_in      IN prof_doc.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        local_emited_in        IN prof_doc.local_emited%TYPE DEFAULT NULL,
        local_emited_nin       IN BOOLEAN := TRUE,
        dt_emited_tstz_in      IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_emited_tstz_nin     IN BOOLEAN := TRUE,
        dt_expire_tstz_in      IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_nin     IN BOOLEAN := TRUE,
        create_user_in         IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN prof_doc.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN prof_doc.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_doc_type_n        NUMBER(1) := sys.diutil.bool_to_int(id_doc_type_nin);
        l_id_professional_n    NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_value_n              NUMBER(1) := sys.diutil.bool_to_int(value_nin);
        l_id_institution_n     NUMBER(1) := sys.diutil.bool_to_int(id_institution_nin);
        l_local_emited_n       NUMBER(1) := sys.diutil.bool_to_int(local_emited_nin);
        l_dt_emited_tstz_n     NUMBER(1) := sys.diutil.bool_to_int(dt_emited_tstz_nin);
        l_dt_expire_tstz_n     NUMBER(1) := sys.diutil.bool_to_int(dt_expire_tstz_nin);
        l_create_user_n        NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN
    
        UPDATE prof_doc
           SET id_doc_type        = decode(l_id_doc_type_n, 0, id_doc_type_in, nvl(id_doc_type_in, id_doc_type)),
               id_professional    = decode(l_id_professional_n,
                                           0,
                                           id_professional_in,
                                           nvl(id_professional_in, id_professional)),
               VALUE              = decode(l_value_n, 0, value_in, nvl(value_in, VALUE)),
               id_institution     = decode(l_id_institution_n,
                                           0,
                                           id_institution_in,
                                           nvl(id_institution_in, id_institution)),
               local_emited       = decode(l_local_emited_n, 0, local_emited_in, nvl(local_emited_in, local_emited)),
               dt_emited_tstz     = decode(l_dt_emited_tstz_n,
                                           0,
                                           dt_emited_tstz_in,
                                           nvl(dt_emited_tstz_in, dt_emited_tstz)),
               dt_expire_tstz     = decode(l_dt_expire_tstz_n,
                                           0,
                                           dt_expire_tstz_in,
                                           nvl(dt_expire_tstz_in, dt_expire_tstz)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution))
         WHERE id_prof_doc = id_prof_doc_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_prof_doc_in         IN prof_doc.id_prof_doc%TYPE,
        id_doc_type_in         IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_doc_type_nin        IN BOOLEAN := TRUE,
        id_professional_in     IN prof_doc.id_professional%TYPE DEFAULT NULL,
        id_professional_nin    IN BOOLEAN := TRUE,
        value_in               IN prof_doc.value%TYPE DEFAULT NULL,
        value_nin              IN BOOLEAN := TRUE,
        id_institution_in      IN prof_doc.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        local_emited_in        IN prof_doc.local_emited%TYPE DEFAULT NULL,
        local_emited_nin       IN BOOLEAN := TRUE,
        dt_emited_tstz_in      IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_emited_tstz_nin     IN BOOLEAN := TRUE,
        dt_expire_tstz_in      IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_nin     IN BOOLEAN := TRUE,
        create_user_in         IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN prof_doc.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN prof_doc.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_prof_doc_in         => id_prof_doc_in,
            id_doc_type_in         => id_doc_type_in,
            id_doc_type_nin        => id_doc_type_nin,
            id_professional_in     => id_professional_in,
            id_professional_nin    => id_professional_nin,
            value_in               => value_in,
            value_nin              => value_nin,
            id_institution_in      => id_institution_in,
            id_institution_nin     => id_institution_nin,
            local_emited_in        => local_emited_in,
            local_emited_nin       => local_emited_nin,
            dt_emited_tstz_in      => dt_emited_tstz_in,
            dt_emited_tstz_nin     => dt_emited_tstz_nin,
            dt_expire_tstz_in      => dt_expire_tstz_in,
            dt_expire_tstz_nin     => dt_expire_tstz_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_doc_type_in         IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_doc_type_nin        IN BOOLEAN := TRUE,
        id_professional_in     IN prof_doc.id_professional%TYPE DEFAULT NULL,
        id_professional_nin    IN BOOLEAN := TRUE,
        value_in               IN prof_doc.value%TYPE DEFAULT NULL,
        value_nin              IN BOOLEAN := TRUE,
        id_institution_in      IN prof_doc.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        local_emited_in        IN prof_doc.local_emited%TYPE DEFAULT NULL,
        local_emited_nin       IN BOOLEAN := TRUE,
        dt_emited_tstz_in      IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_emited_tstz_nin     IN BOOLEAN := TRUE,
        dt_expire_tstz_in      IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_nin     IN BOOLEAN := TRUE,
        create_user_in         IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN prof_doc.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN prof_doc.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               IN VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_id_doc_type_n        NUMBER(1) := sys.diutil.bool_to_int(id_doc_type_nin);
        l_id_professional_n    NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_value_n              NUMBER(1) := sys.diutil.bool_to_int(value_nin);
        l_id_institution_n     NUMBER(1) := sys.diutil.bool_to_int(id_institution_nin);
        l_local_emited_n       NUMBER(1) := sys.diutil.bool_to_int(local_emited_nin);
        l_dt_emited_tstz_n     NUMBER(1) := sys.diutil.bool_to_int(dt_emited_tstz_nin);
        l_dt_expire_tstz_n     NUMBER(1) := sys.diutil.bool_to_int(dt_expire_tstz_nin);
        l_create_user_n        NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN
        l_id_doc_type_n        := sys.diutil.bool_to_int(id_doc_type_nin);
        l_id_professional_n    := sys.diutil.bool_to_int(id_professional_nin);
        l_value_n              := sys.diutil.bool_to_int(value_nin);
        l_id_institution_n     := sys.diutil.bool_to_int(id_institution_nin);
        l_local_emited_n       := sys.diutil.bool_to_int(local_emited_nin);
        l_dt_emited_tstz_n     := sys.diutil.bool_to_int(dt_emited_tstz_nin);
        l_dt_expire_tstz_n     := sys.diutil.bool_to_int(dt_expire_tstz_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_sql                  := 'UPDATE prof_doc SET' || ' ID_DOC_TYPE = decode (' || l_id_doc_type_n ||
                                  ',0,:ID_DOC_TYPE_in, NVL (:ID_DOC_TYPE_in, ID_DOC_TYPE)) ' || ',' ||
                                  ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                                  ',0,:ID_PROFESSIONAL_in, NVL (:ID_PROFESSIONAL_in, ID_PROFESSIONAL)) ' || ',' ||
                                  ' VALUE = decode (' || l_value_n || ',0,:VALUE_in, NVL (:VALUE_in, VALUE)) ' || ',' ||
                                  ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                                  ',0,:ID_INSTITUTION_in, NVL (:ID_INSTITUTION_in, ID_INSTITUTION)) ' || ',' ||
                                  ' LOCAL_EMITED = decode (' || l_local_emited_n ||
                                  ',0,:LOCAL_EMITED_in, NVL (:LOCAL_EMITED_in, LOCAL_EMITED)) ' || ',' ||
                                  ' DT_EMITED_TSTZ = decode (' || l_dt_emited_tstz_n ||
                                  ',0,:DT_EMITED_TSTZ_in, NVL (:DT_EMITED_TSTZ_in, DT_EMITED_TSTZ)) ' || ',' ||
                                  ' DT_EXPIRE_TSTZ = decode (' || l_dt_expire_tstz_n ||
                                  ',0,:DT_EXPIRE_TSTZ_in, NVL (:DT_EXPIRE_TSTZ_in, DT_EXPIRE_TSTZ)) ' || ',' ||
                                  ' CREATE_USER = decode (' || l_create_user_n ||
                                  ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                  ' CREATE_TIME = decode (' || l_create_time_n ||
                                  ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                  ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                  ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                  ' UPDATE_USER = decode (' || l_update_user_n ||
                                  ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                  ' UPDATE_TIME = decode (' || l_update_time_n ||
                                  ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                  ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                  ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' ||
                                  ' where ' || nvl(where_in, '(1=1)') ||
                                  ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_doc_type_in, id_professional_in, value_in, id_institution_in, local_emited_in, dt_emited_tstz_in, dt_expire_tstz_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_doc_type_in         IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_doc_type_nin        IN BOOLEAN := TRUE,
        id_professional_in     IN prof_doc.id_professional%TYPE DEFAULT NULL,
        id_professional_nin    IN BOOLEAN := TRUE,
        value_in               IN prof_doc.value%TYPE DEFAULT NULL,
        value_nin              IN BOOLEAN := TRUE,
        id_institution_in      IN prof_doc.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        local_emited_in        IN prof_doc.local_emited%TYPE DEFAULT NULL,
        local_emited_nin       IN BOOLEAN := TRUE,
        dt_emited_tstz_in      IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_emited_tstz_nin     IN BOOLEAN := TRUE,
        dt_expire_tstz_in      IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_nin     IN BOOLEAN := TRUE,
        create_user_in         IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN prof_doc.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN prof_doc.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               IN VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_doc_type_in         => id_doc_type_in,
            id_doc_type_nin        => id_doc_type_nin,
            id_professional_in     => id_professional_in,
            id_professional_nin    => id_professional_nin,
            value_in               => value_in,
            value_nin              => value_nin,
            id_institution_in      => id_institution_in,
            id_institution_nin     => id_institution_nin,
            local_emited_in        => local_emited_in,
            local_emited_nin       => local_emited_nin,
            dt_emited_tstz_in      => dt_emited_tstz_in,
            dt_emited_tstz_nin     => dt_emited_tstz_nin,
            dt_expire_tstz_in      => dt_expire_tstz_in,
            dt_expire_tstz_nin     => dt_expire_tstz_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_prof_doc_in        IN prof_doc.id_prof_doc%TYPE,
        id_doc_type_in        IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_professional_in    IN prof_doc.id_professional%TYPE DEFAULT NULL,
        value_in              IN prof_doc.value%TYPE DEFAULT NULL,
        id_institution_in     IN prof_doc.id_institution%TYPE DEFAULT NULL,
        local_emited_in       IN prof_doc.local_emited%TYPE DEFAULT NULL,
        dt_emited_tstz_in     IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_in     IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        create_user_in        IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_time_in        IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_institution_in IN prof_doc.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_time_in        IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_institution_in IN prof_doc.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_prof_doc_in        => id_prof_doc_in,
            id_doc_type_in        => id_doc_type_in,
            id_professional_in    => id_professional_in,
            value_in              => value_in,
            id_institution_in     => id_institution_in,
            local_emited_in       => local_emited_in,
            dt_emited_tstz_in     => dt_emited_tstz_in,
            dt_expire_tstz_in     => dt_expire_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_prof_doc_in        => id_prof_doc_in,
                id_doc_type_in        => id_doc_type_in,
                id_professional_in    => id_professional_in,
                value_in              => value_in,
                id_institution_in     => id_institution_in,
                local_emited_in       => local_emited_in,
                dt_emited_tstz_in     => dt_emited_tstz_in,
                dt_expire_tstz_in     => dt_expire_tstz_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_time_in        => update_time_in,
                update_institution_in => update_institution_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_prof_doc_in        IN prof_doc.id_prof_doc%TYPE,
        id_doc_type_in        IN prof_doc.id_doc_type%TYPE DEFAULT NULL,
        id_professional_in    IN prof_doc.id_professional%TYPE DEFAULT NULL,
        value_in              IN prof_doc.value%TYPE DEFAULT NULL,
        id_institution_in     IN prof_doc.id_institution%TYPE DEFAULT NULL,
        local_emited_in       IN prof_doc.local_emited%TYPE DEFAULT NULL,
        dt_emited_tstz_in     IN prof_doc.dt_emited_tstz%TYPE DEFAULT NULL,
        dt_expire_tstz_in     IN prof_doc.dt_expire_tstz%TYPE DEFAULT NULL,
        create_user_in        IN prof_doc.create_user%TYPE DEFAULT NULL,
        create_time_in        IN prof_doc.create_time%TYPE DEFAULT NULL,
        create_institution_in IN prof_doc.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN prof_doc.update_user%TYPE DEFAULT NULL,
        update_time_in        IN prof_doc.update_time%TYPE DEFAULT NULL,
        update_institution_in IN prof_doc.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_prof_doc_in,
                id_doc_type_in,
                id_professional_in,
                value_in,
                id_institution_in,
                local_emited_in,
                dt_emited_tstz_in,
                dt_expire_tstz_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN prof_doc%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_prof_doc_in        => rec_in.id_prof_doc,
            id_doc_type_in        => rec_in.id_doc_type,
            id_professional_in    => rec_in.id_professional,
            value_in              => rec_in.value,
            id_institution_in     => rec_in.id_institution,
            local_emited_in       => rec_in.local_emited,
            dt_emited_tstz_in     => rec_in.dt_emited_tstz,
            dt_expire_tstz_in     => rec_in.dt_expire_tstz,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN prof_doc%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_prof_doc_in        => rec_in.id_prof_doc,
            id_doc_type_in        => rec_in.id_doc_type,
            id_professional_in    => rec_in.id_professional,
            value_in              => rec_in.value,
            id_institution_in     => rec_in.id_institution,
            local_emited_in       => rec_in.local_emited,
            dt_emited_tstz_in     => rec_in.dt_emited_tstz,
            dt_expire_tstz_in     => rec_in.dt_expire_tstz,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN prof_doc_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_prof_doc        id_prof_doc_cc;
        l_id_doc_type        id_doc_type_cc;
        l_id_professional    id_professional_cc;
        l_value              value_cc;
        l_id_institution     id_institution_cc;
        l_local_emited       local_emited_cc;
        l_dt_emited_tstz     dt_emited_tstz_cc;
        l_dt_expire_tstz     dt_expire_tstz_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_time        update_time_cc;
        l_update_institution update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_prof_doc(i) := col_in(i).id_prof_doc;
            l_id_doc_type(i) := col_in(i).id_doc_type;
            l_id_professional(i) := col_in(i).id_professional;
            l_value(i) := col_in(i).value;
            l_id_institution(i) := col_in(i).id_institution;
            l_local_emited(i) := col_in(i).local_emited;
            l_dt_emited_tstz(i) := col_in(i).dt_emited_tstz;
            l_dt_expire_tstz(i) := col_in(i).dt_expire_tstz;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE prof_doc
                   SET id_doc_type        = nvl(l_id_doc_type(i), id_doc_type),
                       id_professional    = nvl(l_id_professional(i), id_professional),
                       VALUE              = nvl(l_value(i), VALUE),
                       id_institution     = nvl(l_id_institution(i), id_institution),
                       local_emited       = nvl(l_local_emited(i), local_emited),
                       dt_emited_tstz     = nvl(l_dt_emited_tstz(i), dt_emited_tstz),
                       dt_expire_tstz     = nvl(l_dt_expire_tstz(i), dt_expire_tstz),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution)
                 WHERE id_prof_doc = l_id_prof_doc(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE prof_doc
                   SET id_doc_type        = l_id_doc_type(i),
                       id_professional    = l_id_professional(i),
                       VALUE              = l_value(i),
                       id_institution     = l_id_institution(i),
                       local_emited       = l_local_emited(i),
                       dt_emited_tstz     = l_dt_emited_tstz(i),
                       dt_expire_tstz     = l_dt_expire_tstz(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i)
                 WHERE id_prof_doc = l_id_prof_doc(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN prof_doc_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE prof_doc
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE prof_doc
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE prof_doc
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_prof_doc_in  IN prof_doc.id_prof_doc%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prof_doc
         WHERE id_prof_doc = id_prof_doc_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_prof_doc_in  IN prof_doc.id_prof_doc%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_prof_doc_in => id_prof_doc_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this PDC_INST_FK foreign key value
    PROCEDURE del_pdc_inst_fk
    (
        id_institution_in IN prof_doc.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prof_doc
         WHERE id_institution = id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_pdc_inst_fk;

    -- Delete all rows for this PDC_PROF_FK foreign key value
    PROCEDURE del_pdc_prof_fk
    (
        id_professional_in IN prof_doc.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prof_doc
         WHERE id_professional = id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_pdc_prof_fk;

    -- Delete all rows for this PDC_INST_FK foreign key value
    PROCEDURE del_pdc_inst_fk
    (
        id_institution_in IN prof_doc.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pdc_inst_fk(id_institution_in => id_institution_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_pdc_inst_fk;

    -- Delete all rows for this PDC_PROF_FK foreign key value
    PROCEDURE del_pdc_prof_fk
    (
        id_professional_in IN prof_doc.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pdc_prof_fk(id_professional_in => id_professional_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_pdc_prof_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM prof_doc';
        ELSE
            RETURN 'DELETE FROM prof_doc WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(prof_doc_inout IN OUT prof_doc%ROWTYPE) IS
    BEGIN
        prof_doc_inout.id_prof_doc        := NULL;
        prof_doc_inout.id_doc_type        := NULL;
        prof_doc_inout.id_professional    := NULL;
        prof_doc_inout.value              := NULL;
        prof_doc_inout.id_institution     := NULL;
        prof_doc_inout.local_emited       := NULL;
        prof_doc_inout.dt_emited_tstz     := NULL;
        prof_doc_inout.dt_expire_tstz     := NULL;
        prof_doc_inout.create_user        := NULL;
        prof_doc_inout.create_time        := NULL;
        prof_doc_inout.create_institution := NULL;
        prof_doc_inout.update_user        := NULL;
        prof_doc_inout.update_time        := NULL;
        prof_doc_inout.update_institution := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN prof_doc%ROWTYPE IS
        l_prof_doc prof_doc%ROWTYPE;
    BEGIN
        RETURN l_prof_doc;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN prof_doc_tc IS
        data prof_doc_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM prof_doc
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN prof_doc_tc IS
        data prof_doc_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_prof_doc;
/
