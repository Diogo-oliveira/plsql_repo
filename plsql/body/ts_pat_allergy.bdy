/*-- Last Change Revision: $Rev: 2028293 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:54 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY TS_PAT_ALLERGY
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Maio 27, 2014 11:53:51
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_pat_allergy_in IN PAT_ALLERGY.ID_PAT_ALLERGY%TYPE
      ,
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT 'N'
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO PAT_ALLERGY (
         ID_PAT_ALLERGY,
         ID_ALLERGY,
         ID_PATIENT,
         ID_DRUG_PHARMA,
         FLG_STATUS,
         NOTES,
         ID_PROF_WRITE,
         FLG_TYPE,
         FLG_APROVED,
         YEAR_BEGIN,
         MONTH_BEGIN,
         DAY_BEGIN,
         YEAR_END,
         MONTH_END,
         DAY_END,
         ID_INSTITUTION,
         ID_EPISODE,
         FLG_NATURE,
         DT_PAT_ALLERGY_TSTZ,
         DT_FIRST_TIME_TSTZ,
         ID_CANCEL_REASON,
         CANCEL_NOTES,
         ID_ALLERGY_SEVERITY,
         DESC_ALLERGY,
         DESC_APROVED,
         FLG_EDIT,
         FLG_CANCEL,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         DESC_EDIT,
         REVISION,
         DT_RESOLUTION,
         ID_CDR_CALL,
         FLG_CDA_RECONCILIATION
         )
      VALUES (
         id_pat_allergy_in,
         id_allergy_in,
         id_patient_in,
         id_drug_pharma_in,
         flg_status_in,
         notes_in,
         id_prof_write_in,
         flg_type_in,
         flg_aproved_in,
         year_begin_in,
         month_begin_in,
         day_begin_in,
         year_end_in,
         month_end_in,
         day_end_in,
         id_institution_in,
         id_episode_in,
         flg_nature_in,
         dt_pat_allergy_tstz_in,
         dt_first_time_tstz_in,
         id_cancel_reason_in,
         cancel_notes_in,
         id_allergy_severity_in,
         desc_allergy_in,
         desc_aproved_in,
         flg_edit_in,
         flg_cancel_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         desc_edit_in,
         revision_in,
         dt_resolution_in,
         id_cdr_call_in,
         flg_cda_reconciliation_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_ALLERGY');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           IF l_name = 'PA_CR_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'PA_ICC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CDR_CALL'
               , value_in => id_cdr_call_in);
           END IF;
           IF l_name = 'PAL_ALL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ALLERGY'
               , value_in => id_allergy_in);
           END IF;
           IF l_name = 'PAL_ALLSE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ALLERGY_SEVERITY'
               , value_in => id_allergy_severity_in);
           END IF;
           IF l_name = 'PAL_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'PAL_INST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           IF l_name = 'PAL_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'PAL_PROF_WRITE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_WRITE'
               , value_in => id_prof_write_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_pat_allergy_in IN PAT_ALLERGY.ID_PAT_ALLERGY%TYPE
      ,
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT 'N'
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_pat_allergy_in => id_pat_allergy_in
      ,
      id_allergy_in => id_allergy_in,
      id_patient_in => id_patient_in,
      id_drug_pharma_in => id_drug_pharma_in,
      flg_status_in => flg_status_in,
      notes_in => notes_in,
      id_prof_write_in => id_prof_write_in,
      flg_type_in => flg_type_in,
      flg_aproved_in => flg_aproved_in,
      year_begin_in => year_begin_in,
      month_begin_in => month_begin_in,
      day_begin_in => day_begin_in,
      year_end_in => year_end_in,
      month_end_in => month_end_in,
      day_end_in => day_end_in,
      id_institution_in => id_institution_in,
      id_episode_in => id_episode_in,
      flg_nature_in => flg_nature_in,
      dt_pat_allergy_tstz_in => dt_pat_allergy_tstz_in,
      dt_first_time_tstz_in => dt_first_time_tstz_in,
      id_cancel_reason_in => id_cancel_reason_in,
      cancel_notes_in => cancel_notes_in,
      id_allergy_severity_in => id_allergy_severity_in,
      desc_allergy_in => desc_allergy_in,
      desc_aproved_in => desc_aproved_in,
      flg_edit_in => flg_edit_in,
      flg_cancel_in => flg_cancel_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      desc_edit_in => desc_edit_in,
      revision_in => revision_in,
      dt_resolution_in => dt_resolution_in,
      id_cdr_call_in => id_cdr_call_in,
      flg_cda_reconciliation_in => flg_cda_reconciliation_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN PAT_ALLERGY%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec PAT_ALLERGY%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_PAT_ALLERGY := next_key (sequence_in);
      END IF;
      ins (
         id_pat_allergy_in => l_rec.ID_PAT_ALLERGY
         ,
         id_allergy_in => l_rec.ID_ALLERGY,
         id_patient_in => l_rec.ID_PATIENT,
         id_drug_pharma_in => l_rec.ID_DRUG_PHARMA,
         flg_status_in => l_rec.FLG_STATUS,
         notes_in => l_rec.NOTES,
         id_prof_write_in => l_rec.ID_PROF_WRITE,
         flg_type_in => l_rec.FLG_TYPE,
         flg_aproved_in => l_rec.FLG_APROVED,
         year_begin_in => l_rec.YEAR_BEGIN,
         month_begin_in => l_rec.MONTH_BEGIN,
         day_begin_in => l_rec.DAY_BEGIN,
         year_end_in => l_rec.YEAR_END,
         month_end_in => l_rec.MONTH_END,
         day_end_in => l_rec.DAY_END,
         id_institution_in => l_rec.ID_INSTITUTION,
         id_episode_in => l_rec.ID_EPISODE,
         flg_nature_in => l_rec.FLG_NATURE,
         dt_pat_allergy_tstz_in => l_rec.DT_PAT_ALLERGY_TSTZ,
         dt_first_time_tstz_in => l_rec.DT_FIRST_TIME_TSTZ,
         id_cancel_reason_in => l_rec.ID_CANCEL_REASON,
         cancel_notes_in => l_rec.CANCEL_NOTES,
         id_allergy_severity_in => l_rec.ID_ALLERGY_SEVERITY,
         desc_allergy_in => l_rec.DESC_ALLERGY,
         desc_aproved_in => l_rec.DESC_APROVED,
         flg_edit_in => l_rec.FLG_EDIT,
         flg_cancel_in => l_rec.FLG_CANCEL,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         desc_edit_in => l_rec.DESC_EDIT,
         revision_in => l_rec.REVISION,
         dt_resolution_in => l_rec.DT_RESOLUTION,
         id_cdr_call_in => l_rec.ID_CDR_CALL,
         flg_cda_reconciliation_in => l_rec.FLG_CDA_RECONCILIATION
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN PAT_ALLERGY%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN PAT_ALLERGY.ID_PAT_ALLERGY%TYPE

   IS
     retval PAT_ALLERGY.ID_PAT_ALLERGY%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_PAT_ALLERGY.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_PAT_ALLERGY')
           );
   END next_key;

   PROCEDURE ins (
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT 'N',
      id_pat_allergy_out IN OUT PAT_ALLERGY.ID_PAT_ALLERGY%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky PAT_ALLERGY.ID_PAT_ALLERGY%TYPE := next_key;
   BEGIN
      ins (
         id_pat_allergy_in => l_pky,
         id_allergy_in => id_allergy_in,
         id_patient_in => id_patient_in,
         id_drug_pharma_in => id_drug_pharma_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_write_in => id_prof_write_in,
         flg_type_in => flg_type_in,
         flg_aproved_in => flg_aproved_in,
         year_begin_in => year_begin_in,
         month_begin_in => month_begin_in,
         day_begin_in => day_begin_in,
         year_end_in => year_end_in,
         month_end_in => month_end_in,
         day_end_in => day_end_in,
         id_institution_in => id_institution_in,
         id_episode_in => id_episode_in,
         flg_nature_in => flg_nature_in,
         dt_pat_allergy_tstz_in => dt_pat_allergy_tstz_in,
         dt_first_time_tstz_in => dt_first_time_tstz_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_notes_in => cancel_notes_in,
         id_allergy_severity_in => id_allergy_severity_in,
         desc_allergy_in => desc_allergy_in,
         desc_aproved_in => desc_aproved_in,
         flg_edit_in => flg_edit_in,
         flg_cancel_in => flg_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         desc_edit_in => desc_edit_in,
         revision_in => revision_in,
         dt_resolution_in => dt_resolution_in,
         id_cdr_call_in => id_cdr_call_in,
         flg_cda_reconciliation_in => flg_cda_reconciliation_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_pat_allergy_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT 'N',
      id_pat_allergy_out IN OUT PAT_ALLERGY.ID_PAT_ALLERGY%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_allergy_in => id_allergy_in,
      id_patient_in => id_patient_in,
      id_drug_pharma_in => id_drug_pharma_in,
      flg_status_in => flg_status_in,
      notes_in => notes_in,
      id_prof_write_in => id_prof_write_in,
      flg_type_in => flg_type_in,
      flg_aproved_in => flg_aproved_in,
      year_begin_in => year_begin_in,
      month_begin_in => month_begin_in,
      day_begin_in => day_begin_in,
      year_end_in => year_end_in,
      month_end_in => month_end_in,
      day_end_in => day_end_in,
      id_institution_in => id_institution_in,
      id_episode_in => id_episode_in,
      flg_nature_in => flg_nature_in,
      dt_pat_allergy_tstz_in => dt_pat_allergy_tstz_in,
      dt_first_time_tstz_in => dt_first_time_tstz_in,
      id_cancel_reason_in => id_cancel_reason_in,
      cancel_notes_in => cancel_notes_in,
      id_allergy_severity_in => id_allergy_severity_in,
      desc_allergy_in => desc_allergy_in,
      desc_aproved_in => desc_aproved_in,
      flg_edit_in => flg_edit_in,
      flg_cancel_in => flg_cancel_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      desc_edit_in => desc_edit_in,
      revision_in => revision_in,
      dt_resolution_in => dt_resolution_in,
      id_cdr_call_in => id_cdr_call_in,
      flg_cda_reconciliation_in => flg_cda_reconciliation_in,
      id_pat_allergy_out => id_pat_allergy_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT 'N'
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         PAT_ALLERGY.ID_PAT_ALLERGY%TYPE
   IS
        l_pky PAT_ALLERGY.ID_PAT_ALLERGY%TYPE := next_key;
   BEGIN
      ins (
         id_pat_allergy_in => l_pky,
         id_allergy_in => id_allergy_in,
         id_patient_in => id_patient_in,
         id_drug_pharma_in => id_drug_pharma_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_write_in => id_prof_write_in,
         flg_type_in => flg_type_in,
         flg_aproved_in => flg_aproved_in,
         year_begin_in => year_begin_in,
         month_begin_in => month_begin_in,
         day_begin_in => day_begin_in,
         year_end_in => year_end_in,
         month_end_in => month_end_in,
         day_end_in => day_end_in,
         id_institution_in => id_institution_in,
         id_episode_in => id_episode_in,
         flg_nature_in => flg_nature_in,
         dt_pat_allergy_tstz_in => dt_pat_allergy_tstz_in,
         dt_first_time_tstz_in => dt_first_time_tstz_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_notes_in => cancel_notes_in,
         id_allergy_severity_in => id_allergy_severity_in,
         desc_allergy_in => desc_allergy_in,
         desc_aproved_in => desc_aproved_in,
         flg_edit_in => flg_edit_in,
         flg_cancel_in => flg_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         desc_edit_in => desc_edit_in,
         revision_in => revision_in,
         dt_resolution_in => dt_resolution_in,
         id_cdr_call_in => id_cdr_call_in,
         flg_cda_reconciliation_in => flg_cda_reconciliation_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT 'N'
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         PAT_ALLERGY.ID_PAT_ALLERGY%TYPE
   IS
        l_pky PAT_ALLERGY.ID_PAT_ALLERGY%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_pat_allergy_in => l_pky,
         id_allergy_in => id_allergy_in,
         id_patient_in => id_patient_in,
         id_drug_pharma_in => id_drug_pharma_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_write_in => id_prof_write_in,
         flg_type_in => flg_type_in,
         flg_aproved_in => flg_aproved_in,
         year_begin_in => year_begin_in,
         month_begin_in => month_begin_in,
         day_begin_in => day_begin_in,
         year_end_in => year_end_in,
         month_end_in => month_end_in,
         day_end_in => day_end_in,
         id_institution_in => id_institution_in,
         id_episode_in => id_episode_in,
         flg_nature_in => flg_nature_in,
         dt_pat_allergy_tstz_in => dt_pat_allergy_tstz_in,
         dt_first_time_tstz_in => dt_first_time_tstz_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_notes_in => cancel_notes_in,
         id_allergy_severity_in => id_allergy_severity_in,
         desc_allergy_in => desc_allergy_in,
         desc_aproved_in => desc_aproved_in,
         flg_edit_in => flg_edit_in,
         flg_cancel_in => flg_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         desc_edit_in => desc_edit_in,
         revision_in => revision_in,
         dt_resolution_in => dt_resolution_in,
         id_cdr_call_in => id_cdr_call_in,
         flg_cda_reconciliation_in => flg_cda_reconciliation_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT 'N'
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky PAT_ALLERGY.ID_PAT_ALLERGY%TYPE := next_key;
   BEGIN
      ins (
         id_pat_allergy_in => l_pky,
         id_allergy_in => id_allergy_in,
         id_patient_in => id_patient_in,
         id_drug_pharma_in => id_drug_pharma_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_write_in => id_prof_write_in,
         flg_type_in => flg_type_in,
         flg_aproved_in => flg_aproved_in,
         year_begin_in => year_begin_in,
         month_begin_in => month_begin_in,
         day_begin_in => day_begin_in,
         year_end_in => year_end_in,
         month_end_in => month_end_in,
         day_end_in => day_end_in,
         id_institution_in => id_institution_in,
         id_episode_in => id_episode_in,
         flg_nature_in => flg_nature_in,
         dt_pat_allergy_tstz_in => dt_pat_allergy_tstz_in,
         dt_first_time_tstz_in => dt_first_time_tstz_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_notes_in => cancel_notes_in,
         id_allergy_severity_in => id_allergy_severity_in,
         desc_allergy_in => desc_allergy_in,
         desc_aproved_in => desc_aproved_in,
         flg_edit_in => flg_edit_in,
         flg_cancel_in => flg_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         desc_edit_in => desc_edit_in,
         revision_in => revision_in,
         dt_resolution_in => dt_resolution_in,
         id_cdr_call_in => id_cdr_call_in,
         flg_cda_reconciliation_in => flg_cda_reconciliation_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT 'N'
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky PAT_ALLERGY.ID_PAT_ALLERGY%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_pat_allergy_in => l_pky,
         id_allergy_in => id_allergy_in,
         id_patient_in => id_patient_in,
         id_drug_pharma_in => id_drug_pharma_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_write_in => id_prof_write_in,
         flg_type_in => flg_type_in,
         flg_aproved_in => flg_aproved_in,
         year_begin_in => year_begin_in,
         month_begin_in => month_begin_in,
         day_begin_in => day_begin_in,
         year_end_in => year_end_in,
         month_end_in => month_end_in,
         day_end_in => day_end_in,
         id_institution_in => id_institution_in,
         id_episode_in => id_episode_in,
         flg_nature_in => flg_nature_in,
         dt_pat_allergy_tstz_in => dt_pat_allergy_tstz_in,
         dt_first_time_tstz_in => dt_first_time_tstz_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_notes_in => cancel_notes_in,
         id_allergy_severity_in => id_allergy_severity_in,
         desc_allergy_in => desc_allergy_in,
         desc_aproved_in => desc_aproved_in,
         flg_edit_in => flg_edit_in,
         flg_cancel_in => flg_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         desc_edit_in => desc_edit_in,
         revision_in => revision_in,
         dt_resolution_in => dt_resolution_in,
         id_cdr_call_in => id_cdr_call_in,
         flg_cda_reconciliation_in => flg_cda_reconciliation_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN PAT_ALLERGY_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
       FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO PAT_ALLERGY (
               ID_PAT_ALLERGY,
               ID_ALLERGY,
               ID_PATIENT,
               ID_DRUG_PHARMA,
               FLG_STATUS,
               NOTES,
               ID_PROF_WRITE,
               FLG_TYPE,
               FLG_APROVED,
               YEAR_BEGIN,
               MONTH_BEGIN,
               DAY_BEGIN,
               YEAR_END,
               MONTH_END,
               DAY_END,
               ID_INSTITUTION,
               ID_EPISODE,
               FLG_NATURE,
               DT_PAT_ALLERGY_TSTZ,
               DT_FIRST_TIME_TSTZ,
               ID_CANCEL_REASON,
               CANCEL_NOTES,
               ID_ALLERGY_SEVERITY,
               DESC_ALLERGY,
               DESC_APROVED,
               FLG_EDIT,
               FLG_CANCEL,
               CREATE_USER,
               CREATE_TIME,
               CREATE_INSTITUTION,
               UPDATE_USER,
               UPDATE_TIME,
               UPDATE_INSTITUTION,
               DESC_EDIT,
               REVISION,
               DT_RESOLUTION,
               ID_CDR_CALL,
               FLG_CDA_RECONCILIATION
               )
            VALUES (
               rows_in(indx).ID_PAT_ALLERGY,
               rows_in(indx).ID_ALLERGY,
               rows_in(indx).ID_PATIENT,
               rows_in(indx).ID_DRUG_PHARMA,
               rows_in(indx).FLG_STATUS,
               rows_in(indx).NOTES,
               rows_in(indx).ID_PROF_WRITE,
               rows_in(indx).FLG_TYPE,
               rows_in(indx).FLG_APROVED,
               rows_in(indx).YEAR_BEGIN,
               rows_in(indx).MONTH_BEGIN,
               rows_in(indx).DAY_BEGIN,
               rows_in(indx).YEAR_END,
               rows_in(indx).MONTH_END,
               rows_in(indx).DAY_END,
               rows_in(indx).ID_INSTITUTION,
               rows_in(indx).ID_EPISODE,
               rows_in(indx).FLG_NATURE,
               rows_in(indx).DT_PAT_ALLERGY_TSTZ,
               rows_in(indx).DT_FIRST_TIME_TSTZ,
               rows_in(indx).ID_CANCEL_REASON,
               rows_in(indx).CANCEL_NOTES,
               rows_in(indx).ID_ALLERGY_SEVERITY,
               rows_in(indx).DESC_ALLERGY,
               rows_in(indx).DESC_APROVED,
               rows_in(indx).FLG_EDIT,
               rows_in(indx).FLG_CANCEL,
               rows_in(indx).CREATE_USER,
               rows_in(indx).CREATE_TIME,
               rows_in(indx).CREATE_INSTITUTION,
               rows_in(indx).UPDATE_USER,
               rows_in(indx).UPDATE_TIME,
               rows_in(indx).UPDATE_INSTITUTION,
               rows_in(indx).DESC_EDIT,
               rows_in(indx).REVISION,
               rows_in(indx).DT_RESOLUTION,
               rows_in(indx).ID_CDR_CALL,
               rows_in(indx).FLG_CDA_RECONCILIATION
               ) RETURNING ROWID BULK COLLECT INTO rows_out;

      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQLERRM (-SQL%BULK_EXCEPTIONS (indx).ERROR_CODE)
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PAT_ALLERGY _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PAT_ALLERGY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_ALLERGY _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_ALLERGY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PATIENT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PATIENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_DRUG_PHARMA _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_DRUG_PHARMA
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NOTES
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_WRITE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_WRITE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_TYPE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_TYPE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_APROVED _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_APROVED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'YEAR_BEGIN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).YEAR_BEGIN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'MONTH_BEGIN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).MONTH_BEGIN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DAY_BEGIN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DAY_BEGIN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'YEAR_END _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).YEAR_END
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'MONTH_END _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).MONTH_END
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DAY_END _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DAY_END
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_EPISODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_NATURE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_NATURE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_PAT_ALLERGY_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_PAT_ALLERGY_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_FIRST_TIME_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_FIRST_TIME_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CANCEL_REASON _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CANCEL_REASON
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CANCEL_NOTES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CANCEL_NOTES
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_ALLERGY_SEVERITY _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_ALLERGY_SEVERITY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DESC_ALLERGY _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DESC_ALLERGY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DESC_APROVED _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DESC_APROVED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_EDIT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_EDIT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DESC_EDIT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DESC_EDIT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'REVISION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).REVISION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_RESOLUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_RESOLUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CDR_CALL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CDR_CALL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_CDA_RECONCILIATION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_CDA_RECONCILIATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'PAT_ALLERGY'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN PAT_ALLERGY_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_pat_allergy_in IN PAT_ALLERGY.ID_PAT_ALLERGY%TYPE,
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      ID_ALLERGY_nin IN BOOLEAN := TRUE,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      ID_DRUG_PHARMA_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      ID_PROF_WRITE_nin IN BOOLEAN := TRUE,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      FLG_TYPE_nin IN BOOLEAN := TRUE,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      FLG_APROVED_nin IN BOOLEAN := TRUE,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      YEAR_BEGIN_nin IN BOOLEAN := TRUE,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      MONTH_BEGIN_nin IN BOOLEAN := TRUE,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      DAY_BEGIN_nin IN BOOLEAN := TRUE,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      YEAR_END_nin IN BOOLEAN := TRUE,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      MONTH_END_nin IN BOOLEAN := TRUE,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      DAY_END_nin IN BOOLEAN := TRUE,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      FLG_NATURE_nin IN BOOLEAN := TRUE,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      DT_PAT_ALLERGY_TSTZ_nin IN BOOLEAN := TRUE,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      DT_FIRST_TIME_TSTZ_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      CANCEL_NOTES_nin IN BOOLEAN := TRUE,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      ID_ALLERGY_SEVERITY_nin IN BOOLEAN := TRUE,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      DESC_ALLERGY_nin IN BOOLEAN := TRUE,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      DESC_APROVED_nin IN BOOLEAN := TRUE,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      FLG_EDIT_nin IN BOOLEAN := TRUE,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      FLG_CANCEL_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      DESC_EDIT_nin IN BOOLEAN := TRUE,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      REVISION_nin IN BOOLEAN := TRUE,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      DT_RESOLUTION_nin IN BOOLEAN := TRUE,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      ID_CDR_CALL_nin IN BOOLEAN := TRUE,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT NULL,
      FLG_CDA_RECONCILIATION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_ALLERGY_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_ID_DRUG_PHARMA_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_ID_PROF_WRITE_n NUMBER(1);
   l_FLG_TYPE_n NUMBER(1);
   l_FLG_APROVED_n NUMBER(1);
   l_YEAR_BEGIN_n NUMBER(1);
   l_MONTH_BEGIN_n NUMBER(1);
   l_DAY_BEGIN_n NUMBER(1);
   l_YEAR_END_n NUMBER(1);
   l_MONTH_END_n NUMBER(1);
   l_DAY_END_n NUMBER(1);
   l_ID_INSTITUTION_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_FLG_NATURE_n NUMBER(1);
   l_DT_PAT_ALLERGY_TSTZ_n NUMBER(1);
   l_DT_FIRST_TIME_TSTZ_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_CANCEL_NOTES_n NUMBER(1);
   l_ID_ALLERGY_SEVERITY_n NUMBER(1);
   l_DESC_ALLERGY_n NUMBER(1);
   l_DESC_APROVED_n NUMBER(1);
   l_FLG_EDIT_n NUMBER(1);
   l_FLG_CANCEL_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_DESC_EDIT_n NUMBER(1);
   l_REVISION_n NUMBER(1);
   l_DT_RESOLUTION_n NUMBER(1);
   l_ID_CDR_CALL_n NUMBER(1);
   l_FLG_CDA_RECONCILIATION_n NUMBER(1);
   BEGIN

   l_ID_ALLERGY_n := sys.diutil.bool_to_int(ID_ALLERGY_nin);
   l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
   l_ID_DRUG_PHARMA_n := sys.diutil.bool_to_int(ID_DRUG_PHARMA_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
   l_ID_PROF_WRITE_n := sys.diutil.bool_to_int(ID_PROF_WRITE_nin);
   l_FLG_TYPE_n := sys.diutil.bool_to_int(FLG_TYPE_nin);
   l_FLG_APROVED_n := sys.diutil.bool_to_int(FLG_APROVED_nin);
   l_YEAR_BEGIN_n := sys.diutil.bool_to_int(YEAR_BEGIN_nin);
   l_MONTH_BEGIN_n := sys.diutil.bool_to_int(MONTH_BEGIN_nin);
   l_DAY_BEGIN_n := sys.diutil.bool_to_int(DAY_BEGIN_nin);
   l_YEAR_END_n := sys.diutil.bool_to_int(YEAR_END_nin);
   l_MONTH_END_n := sys.diutil.bool_to_int(MONTH_END_nin);
   l_DAY_END_n := sys.diutil.bool_to_int(DAY_END_nin);
   l_ID_INSTITUTION_n := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
   l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
   l_FLG_NATURE_n := sys.diutil.bool_to_int(FLG_NATURE_nin);
   l_DT_PAT_ALLERGY_TSTZ_n := sys.diutil.bool_to_int(DT_PAT_ALLERGY_TSTZ_nin);
   l_DT_FIRST_TIME_TSTZ_n := sys.diutil.bool_to_int(DT_FIRST_TIME_TSTZ_nin);
   l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
   l_CANCEL_NOTES_n := sys.diutil.bool_to_int(CANCEL_NOTES_nin);
   l_ID_ALLERGY_SEVERITY_n := sys.diutil.bool_to_int(ID_ALLERGY_SEVERITY_nin);
   l_DESC_ALLERGY_n := sys.diutil.bool_to_int(DESC_ALLERGY_nin);
   l_DESC_APROVED_n := sys.diutil.bool_to_int(DESC_APROVED_nin);
   l_FLG_EDIT_n := sys.diutil.bool_to_int(FLG_EDIT_nin);
   l_FLG_CANCEL_n := sys.diutil.bool_to_int(FLG_CANCEL_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_DESC_EDIT_n := sys.diutil.bool_to_int(DESC_EDIT_nin);
   l_REVISION_n := sys.diutil.bool_to_int(REVISION_nin);
   l_DT_RESOLUTION_n := sys.diutil.bool_to_int(DT_RESOLUTION_nin);
   l_ID_CDR_CALL_n := sys.diutil.bool_to_int(ID_CDR_CALL_nin);
   l_FLG_CDA_RECONCILIATION_n := sys.diutil.bool_to_int(FLG_CDA_RECONCILIATION_nin);


         UPDATE PAT_ALLERGY SET
     ID_ALLERGY = decode (l_ID_ALLERGY_n,0,id_allergy_in, NVL (id_allergy_in, ID_ALLERGY)),
     ID_PATIENT = decode (l_ID_PATIENT_n,0,id_patient_in, NVL (id_patient_in, ID_PATIENT)),
     ID_DRUG_PHARMA = decode (l_ID_DRUG_PHARMA_n,0,id_drug_pharma_in, NVL (id_drug_pharma_in, ID_DRUG_PHARMA)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     NOTES = decode (l_NOTES_n,0,notes_in, NVL (notes_in, NOTES)),
     ID_PROF_WRITE = decode (l_ID_PROF_WRITE_n,0,id_prof_write_in, NVL (id_prof_write_in, ID_PROF_WRITE)),
     FLG_TYPE = decode (l_FLG_TYPE_n,0,flg_type_in, NVL (flg_type_in, FLG_TYPE)),
     FLG_APROVED = decode (l_FLG_APROVED_n,0,flg_aproved_in, NVL (flg_aproved_in, FLG_APROVED)),
     YEAR_BEGIN = decode (l_YEAR_BEGIN_n,0,year_begin_in, NVL (year_begin_in, YEAR_BEGIN)),
     MONTH_BEGIN = decode (l_MONTH_BEGIN_n,0,month_begin_in, NVL (month_begin_in, MONTH_BEGIN)),
     DAY_BEGIN = decode (l_DAY_BEGIN_n,0,day_begin_in, NVL (day_begin_in, DAY_BEGIN)),
     YEAR_END = decode (l_YEAR_END_n,0,year_end_in, NVL (year_end_in, YEAR_END)),
     MONTH_END = decode (l_MONTH_END_n,0,month_end_in, NVL (month_end_in, MONTH_END)),
     DAY_END = decode (l_DAY_END_n,0,day_end_in, NVL (day_end_in, DAY_END)),
     ID_INSTITUTION = decode (l_ID_INSTITUTION_n,0,id_institution_in, NVL (id_institution_in, ID_INSTITUTION)),
     ID_EPISODE = decode (l_ID_EPISODE_n,0,id_episode_in, NVL (id_episode_in, ID_EPISODE)),
     FLG_NATURE = decode (l_FLG_NATURE_n,0,flg_nature_in, NVL (flg_nature_in, FLG_NATURE)),
     DT_PAT_ALLERGY_TSTZ = decode (l_DT_PAT_ALLERGY_TSTZ_n,0,dt_pat_allergy_tstz_in, NVL (dt_pat_allergy_tstz_in, DT_PAT_ALLERGY_TSTZ)),
     DT_FIRST_TIME_TSTZ = decode (l_DT_FIRST_TIME_TSTZ_n,0,dt_first_time_tstz_in, NVL (dt_first_time_tstz_in, DT_FIRST_TIME_TSTZ)),
     ID_CANCEL_REASON = decode (l_ID_CANCEL_REASON_n,0,id_cancel_reason_in, NVL (id_cancel_reason_in, ID_CANCEL_REASON)),
     CANCEL_NOTES = decode (l_CANCEL_NOTES_n,0,cancel_notes_in, NVL (cancel_notes_in, CANCEL_NOTES)),
     ID_ALLERGY_SEVERITY = decode (l_ID_ALLERGY_SEVERITY_n,0,id_allergy_severity_in, NVL (id_allergy_severity_in, ID_ALLERGY_SEVERITY)),
     DESC_ALLERGY = decode (l_DESC_ALLERGY_n,0,desc_allergy_in, NVL (desc_allergy_in, DESC_ALLERGY)),
     DESC_APROVED = decode (l_DESC_APROVED_n,0,desc_aproved_in, NVL (desc_aproved_in, DESC_APROVED)),
     FLG_EDIT = decode (l_FLG_EDIT_n,0,flg_edit_in, NVL (flg_edit_in, FLG_EDIT)),
     FLG_CANCEL = decode (l_FLG_CANCEL_n,0,flg_cancel_in, NVL (flg_cancel_in, FLG_CANCEL)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     DESC_EDIT = decode (l_DESC_EDIT_n,0,desc_edit_in, NVL (desc_edit_in, DESC_EDIT)),
     REVISION = decode (l_REVISION_n,0,revision_in, NVL (revision_in, REVISION)),
     DT_RESOLUTION = decode (l_DT_RESOLUTION_n,0,dt_resolution_in, NVL (dt_resolution_in, DT_RESOLUTION)),
     ID_CDR_CALL = decode (l_ID_CDR_CALL_n,0,id_cdr_call_in, NVL (id_cdr_call_in, ID_CDR_CALL)),
     FLG_CDA_RECONCILIATION = decode (l_FLG_CDA_RECONCILIATION_n,0,flg_cda_reconciliation_in, NVL (flg_cda_reconciliation_in, FLG_CDA_RECONCILIATION))
          WHERE
             ID_PAT_ALLERGY = id_pat_allergy_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_ALLERGY');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           IF l_name = 'PA_CR_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'PA_ICC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CDR_CALL'
               , value_in => id_cdr_call_in);
           END IF;
           IF l_name = 'PAL_ALL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ALLERGY'
               , value_in => id_allergy_in);
           END IF;
           IF l_name = 'PAL_ALLSE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ALLERGY_SEVERITY'
               , value_in => id_allergy_severity_in);
           END IF;
           IF l_name = 'PAL_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'PAL_INST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           IF l_name = 'PAL_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'PAL_PROF_WRITE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_WRITE'
               , value_in => id_prof_write_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_pat_allergy_in IN PAT_ALLERGY.ID_PAT_ALLERGY%TYPE,
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      ID_ALLERGY_nin IN BOOLEAN := TRUE,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      ID_DRUG_PHARMA_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      ID_PROF_WRITE_nin IN BOOLEAN := TRUE,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      FLG_TYPE_nin IN BOOLEAN := TRUE,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      FLG_APROVED_nin IN BOOLEAN := TRUE,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      YEAR_BEGIN_nin IN BOOLEAN := TRUE,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      MONTH_BEGIN_nin IN BOOLEAN := TRUE,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      DAY_BEGIN_nin IN BOOLEAN := TRUE,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      YEAR_END_nin IN BOOLEAN := TRUE,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      MONTH_END_nin IN BOOLEAN := TRUE,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      DAY_END_nin IN BOOLEAN := TRUE,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      FLG_NATURE_nin IN BOOLEAN := TRUE,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      DT_PAT_ALLERGY_TSTZ_nin IN BOOLEAN := TRUE,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      DT_FIRST_TIME_TSTZ_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      CANCEL_NOTES_nin IN BOOLEAN := TRUE,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      ID_ALLERGY_SEVERITY_nin IN BOOLEAN := TRUE,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      DESC_ALLERGY_nin IN BOOLEAN := TRUE,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      DESC_APROVED_nin IN BOOLEAN := TRUE,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      FLG_EDIT_nin IN BOOLEAN := TRUE,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      FLG_CANCEL_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      DESC_EDIT_nin IN BOOLEAN := TRUE,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      REVISION_nin IN BOOLEAN := TRUE,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      DT_RESOLUTION_nin IN BOOLEAN := TRUE,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      ID_CDR_CALL_nin IN BOOLEAN := TRUE,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT NULL,
      FLG_CDA_RECONCILIATION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_pat_allergy_in => id_pat_allergy_in,
      id_allergy_in => id_allergy_in,
      ID_ALLERGY_nin => ID_ALLERGY_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_drug_pharma_in => id_drug_pharma_in,
      ID_DRUG_PHARMA_nin => ID_DRUG_PHARMA_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      id_prof_write_in => id_prof_write_in,
      ID_PROF_WRITE_nin => ID_PROF_WRITE_nin,
      flg_type_in => flg_type_in,
      FLG_TYPE_nin => FLG_TYPE_nin,
      flg_aproved_in => flg_aproved_in,
      FLG_APROVED_nin => FLG_APROVED_nin,
      year_begin_in => year_begin_in,
      YEAR_BEGIN_nin => YEAR_BEGIN_nin,
      month_begin_in => month_begin_in,
      MONTH_BEGIN_nin => MONTH_BEGIN_nin,
      day_begin_in => day_begin_in,
      DAY_BEGIN_nin => DAY_BEGIN_nin,
      year_end_in => year_end_in,
      YEAR_END_nin => YEAR_END_nin,
      month_end_in => month_end_in,
      MONTH_END_nin => MONTH_END_nin,
      day_end_in => day_end_in,
      DAY_END_nin => DAY_END_nin,
      id_institution_in => id_institution_in,
      ID_INSTITUTION_nin => ID_INSTITUTION_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      flg_nature_in => flg_nature_in,
      FLG_NATURE_nin => FLG_NATURE_nin,
      dt_pat_allergy_tstz_in => dt_pat_allergy_tstz_in,
      DT_PAT_ALLERGY_TSTZ_nin => DT_PAT_ALLERGY_TSTZ_nin,
      dt_first_time_tstz_in => dt_first_time_tstz_in,
      DT_FIRST_TIME_TSTZ_nin => DT_FIRST_TIME_TSTZ_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      cancel_notes_in => cancel_notes_in,
      CANCEL_NOTES_nin => CANCEL_NOTES_nin,
      id_allergy_severity_in => id_allergy_severity_in,
      ID_ALLERGY_SEVERITY_nin => ID_ALLERGY_SEVERITY_nin,
      desc_allergy_in => desc_allergy_in,
      DESC_ALLERGY_nin => DESC_ALLERGY_nin,
      desc_aproved_in => desc_aproved_in,
      DESC_APROVED_nin => DESC_APROVED_nin,
      flg_edit_in => flg_edit_in,
      FLG_EDIT_nin => FLG_EDIT_nin,
      flg_cancel_in => flg_cancel_in,
      FLG_CANCEL_nin => FLG_CANCEL_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      desc_edit_in => desc_edit_in,
      DESC_EDIT_nin => DESC_EDIT_nin,
      revision_in => revision_in,
      REVISION_nin => REVISION_nin,
      dt_resolution_in => dt_resolution_in,
      DT_RESOLUTION_nin => DT_RESOLUTION_nin,
      id_cdr_call_in => id_cdr_call_in,
      ID_CDR_CALL_nin => ID_CDR_CALL_nin,
      flg_cda_reconciliation_in => flg_cda_reconciliation_in,
      FLG_CDA_RECONCILIATION_nin => FLG_CDA_RECONCILIATION_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      ID_ALLERGY_nin IN BOOLEAN := TRUE,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      ID_DRUG_PHARMA_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      ID_PROF_WRITE_nin IN BOOLEAN := TRUE,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      FLG_TYPE_nin IN BOOLEAN := TRUE,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      FLG_APROVED_nin IN BOOLEAN := TRUE,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      YEAR_BEGIN_nin IN BOOLEAN := TRUE,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      MONTH_BEGIN_nin IN BOOLEAN := TRUE,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      DAY_BEGIN_nin IN BOOLEAN := TRUE,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      YEAR_END_nin IN BOOLEAN := TRUE,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      MONTH_END_nin IN BOOLEAN := TRUE,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      DAY_END_nin IN BOOLEAN := TRUE,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      FLG_NATURE_nin IN BOOLEAN := TRUE,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      DT_PAT_ALLERGY_TSTZ_nin IN BOOLEAN := TRUE,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      DT_FIRST_TIME_TSTZ_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      CANCEL_NOTES_nin IN BOOLEAN := TRUE,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      ID_ALLERGY_SEVERITY_nin IN BOOLEAN := TRUE,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      DESC_ALLERGY_nin IN BOOLEAN := TRUE,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      DESC_APROVED_nin IN BOOLEAN := TRUE,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      FLG_EDIT_nin IN BOOLEAN := TRUE,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      FLG_CANCEL_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      DESC_EDIT_nin IN BOOLEAN := TRUE,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      REVISION_nin IN BOOLEAN := TRUE,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      DT_RESOLUTION_nin IN BOOLEAN := TRUE,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      ID_CDR_CALL_nin IN BOOLEAN := TRUE,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT NULL,
      FLG_CDA_RECONCILIATION_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_ALLERGY_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_ID_DRUG_PHARMA_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_ID_PROF_WRITE_n NUMBER(1);
   l_FLG_TYPE_n NUMBER(1);
   l_FLG_APROVED_n NUMBER(1);
   l_YEAR_BEGIN_n NUMBER(1);
   l_MONTH_BEGIN_n NUMBER(1);
   l_DAY_BEGIN_n NUMBER(1);
   l_YEAR_END_n NUMBER(1);
   l_MONTH_END_n NUMBER(1);
   l_DAY_END_n NUMBER(1);
   l_ID_INSTITUTION_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_FLG_NATURE_n NUMBER(1);
   l_DT_PAT_ALLERGY_TSTZ_n NUMBER(1);
   l_DT_FIRST_TIME_TSTZ_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_CANCEL_NOTES_n NUMBER(1);
   l_ID_ALLERGY_SEVERITY_n NUMBER(1);
   l_DESC_ALLERGY_n NUMBER(1);
   l_DESC_APROVED_n NUMBER(1);
   l_FLG_EDIT_n NUMBER(1);
   l_FLG_CANCEL_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_DESC_EDIT_n NUMBER(1);
   l_REVISION_n NUMBER(1);
   l_DT_RESOLUTION_n NUMBER(1);
   l_ID_CDR_CALL_n NUMBER(1);
   l_FLG_CDA_RECONCILIATION_n NUMBER(1);
      id_pat_allergy_in PAT_ALLERGY.ID_PAT_ALLERGY%TYPE;
   BEGIN



      l_ID_ALLERGY_n := sys.diutil.bool_to_int(ID_ALLERGY_nin);
      l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
      l_ID_DRUG_PHARMA_n := sys.diutil.bool_to_int(ID_DRUG_PHARMA_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
      l_ID_PROF_WRITE_n := sys.diutil.bool_to_int(ID_PROF_WRITE_nin);
      l_FLG_TYPE_n := sys.diutil.bool_to_int(FLG_TYPE_nin);
      l_FLG_APROVED_n := sys.diutil.bool_to_int(FLG_APROVED_nin);
      l_YEAR_BEGIN_n := sys.diutil.bool_to_int(YEAR_BEGIN_nin);
      l_MONTH_BEGIN_n := sys.diutil.bool_to_int(MONTH_BEGIN_nin);
      l_DAY_BEGIN_n := sys.diutil.bool_to_int(DAY_BEGIN_nin);
      l_YEAR_END_n := sys.diutil.bool_to_int(YEAR_END_nin);
      l_MONTH_END_n := sys.diutil.bool_to_int(MONTH_END_nin);
      l_DAY_END_n := sys.diutil.bool_to_int(DAY_END_nin);
      l_ID_INSTITUTION_n := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
      l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
      l_FLG_NATURE_n := sys.diutil.bool_to_int(FLG_NATURE_nin);
      l_DT_PAT_ALLERGY_TSTZ_n := sys.diutil.bool_to_int(DT_PAT_ALLERGY_TSTZ_nin);
      l_DT_FIRST_TIME_TSTZ_n := sys.diutil.bool_to_int(DT_FIRST_TIME_TSTZ_nin);
      l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
      l_CANCEL_NOTES_n := sys.diutil.bool_to_int(CANCEL_NOTES_nin);
      l_ID_ALLERGY_SEVERITY_n := sys.diutil.bool_to_int(ID_ALLERGY_SEVERITY_nin);
      l_DESC_ALLERGY_n := sys.diutil.bool_to_int(DESC_ALLERGY_nin);
      l_DESC_APROVED_n := sys.diutil.bool_to_int(DESC_APROVED_nin);
      l_FLG_EDIT_n := sys.diutil.bool_to_int(FLG_EDIT_nin);
      l_FLG_CANCEL_n := sys.diutil.bool_to_int(FLG_CANCEL_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_DESC_EDIT_n := sys.diutil.bool_to_int(DESC_EDIT_nin);
      l_REVISION_n := sys.diutil.bool_to_int(REVISION_nin);
      l_DT_RESOLUTION_n := sys.diutil.bool_to_int(DT_RESOLUTION_nin);
      l_ID_CDR_CALL_n := sys.diutil.bool_to_int(ID_CDR_CALL_nin);
      l_FLG_CDA_RECONCILIATION_n := sys.diutil.bool_to_int(FLG_CDA_RECONCILIATION_nin);



l_sql := 'UPDATE PAT_ALLERGY SET '
     || ' ID_ALLERGY = decode (' || l_ID_ALLERGY_n || ',0,:id_allergy_in, NVL (:id_allergy_in, ID_ALLERGY)) '|| ','
     || ' ID_PATIENT = decode (' || l_ID_PATIENT_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) '|| ','
     || ' ID_DRUG_PHARMA = decode (' || l_ID_DRUG_PHARMA_n || ',0,:id_drug_pharma_in, NVL (:id_drug_pharma_in, ID_DRUG_PHARMA)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' NOTES = decode (' || l_NOTES_n || ',0,:notes_in, NVL (:notes_in, NOTES)) '|| ','
     || ' ID_PROF_WRITE = decode (' || l_ID_PROF_WRITE_n || ',0,:id_prof_write_in, NVL (:id_prof_write_in, ID_PROF_WRITE)) '|| ','
     || ' FLG_TYPE = decode (' || l_FLG_TYPE_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) '|| ','
     || ' FLG_APROVED = decode (' || l_FLG_APROVED_n || ',0,:flg_aproved_in, NVL (:flg_aproved_in, FLG_APROVED)) '|| ','
     || ' YEAR_BEGIN = decode (' || l_YEAR_BEGIN_n || ',0,:year_begin_in, NVL (:year_begin_in, YEAR_BEGIN)) '|| ','
     || ' MONTH_BEGIN = decode (' || l_MONTH_BEGIN_n || ',0,:month_begin_in, NVL (:month_begin_in, MONTH_BEGIN)) '|| ','
     || ' DAY_BEGIN = decode (' || l_DAY_BEGIN_n || ',0,:day_begin_in, NVL (:day_begin_in, DAY_BEGIN)) '|| ','
     || ' YEAR_END = decode (' || l_YEAR_END_n || ',0,:year_end_in, NVL (:year_end_in, YEAR_END)) '|| ','
     || ' MONTH_END = decode (' || l_MONTH_END_n || ',0,:month_end_in, NVL (:month_end_in, MONTH_END)) '|| ','
     || ' DAY_END = decode (' || l_DAY_END_n || ',0,:day_end_in, NVL (:day_end_in, DAY_END)) '|| ','
     || ' ID_INSTITUTION = decode (' || l_ID_INSTITUTION_n || ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) '|| ','
     || ' ID_EPISODE = decode (' || l_ID_EPISODE_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) '|| ','
     || ' FLG_NATURE = decode (' || l_FLG_NATURE_n || ',0,:flg_nature_in, NVL (:flg_nature_in, FLG_NATURE)) '|| ','
     || ' DT_PAT_ALLERGY_TSTZ = decode (' || l_DT_PAT_ALLERGY_TSTZ_n || ',0,:dt_pat_allergy_tstz_in, NVL (:dt_pat_allergy_tstz_in, DT_PAT_ALLERGY_TSTZ)) '|| ','
     || ' DT_FIRST_TIME_TSTZ = decode (' || l_DT_FIRST_TIME_TSTZ_n || ',0,:dt_first_time_tstz_in, NVL (:dt_first_time_tstz_in, DT_FIRST_TIME_TSTZ)) '|| ','
     || ' ID_CANCEL_REASON = decode (' || l_ID_CANCEL_REASON_n || ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) '|| ','
     || ' CANCEL_NOTES = decode (' || l_CANCEL_NOTES_n || ',0,:cancel_notes_in, NVL (:cancel_notes_in, CANCEL_NOTES)) '|| ','
     || ' ID_ALLERGY_SEVERITY = decode (' || l_ID_ALLERGY_SEVERITY_n || ',0,:id_allergy_severity_in, NVL (:id_allergy_severity_in, ID_ALLERGY_SEVERITY)) '|| ','
     || ' DESC_ALLERGY = decode (' || l_DESC_ALLERGY_n || ',0,:desc_allergy_in, NVL (:desc_allergy_in, DESC_ALLERGY)) '|| ','
     || ' DESC_APROVED = decode (' || l_DESC_APROVED_n || ',0,:desc_aproved_in, NVL (:desc_aproved_in, DESC_APROVED)) '|| ','
     || ' FLG_EDIT = decode (' || l_FLG_EDIT_n || ',0,:flg_edit_in, NVL (:flg_edit_in, FLG_EDIT)) '|| ','
     || ' FLG_CANCEL = decode (' || l_FLG_CANCEL_n || ',0,:flg_cancel_in, NVL (:flg_cancel_in, FLG_CANCEL)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' DESC_EDIT = decode (' || l_DESC_EDIT_n || ',0,:desc_edit_in, NVL (:desc_edit_in, DESC_EDIT)) '|| ','
     || ' REVISION = decode (' || l_REVISION_n || ',0,:revision_in, NVL (:revision_in, REVISION)) '|| ','
     || ' DT_RESOLUTION = decode (' || l_DT_RESOLUTION_n || ',0,:dt_resolution_in, NVL (:dt_resolution_in, DT_RESOLUTION)) '|| ','
     || ' ID_CDR_CALL = decode (' || l_ID_CDR_CALL_n || ',0,:id_cdr_call_in, NVL (:id_cdr_call_in, ID_CDR_CALL)) '|| ','
     || ' FLG_CDA_RECONCILIATION = decode (' || l_FLG_CDA_RECONCILIATION_n || ',0,:flg_cda_reconciliation_in, NVL (:flg_cda_reconciliation_in, FLG_CDA_RECONCILIATION)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_allergy_in,
     id_patient_in,
     id_drug_pharma_in,
     flg_status_in,
     notes_in,
     id_prof_write_in,
     flg_type_in,
     flg_aproved_in,
     year_begin_in,
     month_begin_in,
     day_begin_in,
     year_end_in,
     month_end_in,
     day_end_in,
     id_institution_in,
     id_episode_in,
     flg_nature_in,
     dt_pat_allergy_tstz_in,
     dt_first_time_tstz_in,
     id_cancel_reason_in,
     cancel_notes_in,
     id_allergy_severity_in,
     desc_allergy_in,
     desc_aproved_in,
     flg_edit_in,
     flg_cancel_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     desc_edit_in,
     revision_in,
     dt_resolution_in,
     id_cdr_call_in,
     flg_cda_reconciliation_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_ALLERGY');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           IF l_name = 'PA_CR_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'PA_ICC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CDR_CALL'
               , value_in => id_cdr_call_in);
           END IF;
           IF l_name = 'PAL_ALL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ALLERGY'
               , value_in => id_allergy_in);
           END IF;
           IF l_name = 'PAL_ALLSE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_ALLERGY_SEVERITY'
               , value_in => id_allergy_severity_in);
           END IF;
           IF l_name = 'PAL_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'PAL_INST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           IF l_name = 'PAL_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'PAL_PROF_WRITE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_WRITE'
               , value_in => id_prof_write_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      ID_ALLERGY_nin IN BOOLEAN := TRUE,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      ID_DRUG_PHARMA_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      ID_PROF_WRITE_nin IN BOOLEAN := TRUE,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      FLG_TYPE_nin IN BOOLEAN := TRUE,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      FLG_APROVED_nin IN BOOLEAN := TRUE,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      YEAR_BEGIN_nin IN BOOLEAN := TRUE,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      MONTH_BEGIN_nin IN BOOLEAN := TRUE,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      DAY_BEGIN_nin IN BOOLEAN := TRUE,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      YEAR_END_nin IN BOOLEAN := TRUE,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      MONTH_END_nin IN BOOLEAN := TRUE,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      DAY_END_nin IN BOOLEAN := TRUE,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      FLG_NATURE_nin IN BOOLEAN := TRUE,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      DT_PAT_ALLERGY_TSTZ_nin IN BOOLEAN := TRUE,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      DT_FIRST_TIME_TSTZ_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      CANCEL_NOTES_nin IN BOOLEAN := TRUE,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      ID_ALLERGY_SEVERITY_nin IN BOOLEAN := TRUE,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      DESC_ALLERGY_nin IN BOOLEAN := TRUE,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      DESC_APROVED_nin IN BOOLEAN := TRUE,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      FLG_EDIT_nin IN BOOLEAN := TRUE,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      FLG_CANCEL_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      DESC_EDIT_nin IN BOOLEAN := TRUE,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      REVISION_nin IN BOOLEAN := TRUE,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      DT_RESOLUTION_nin IN BOOLEAN := TRUE,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      ID_CDR_CALL_nin IN BOOLEAN := TRUE,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT NULL,
      FLG_CDA_RECONCILIATION_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_allergy_in => id_allergy_in,
      ID_ALLERGY_nin => ID_ALLERGY_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_drug_pharma_in => id_drug_pharma_in,
      ID_DRUG_PHARMA_nin => ID_DRUG_PHARMA_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      id_prof_write_in => id_prof_write_in,
      ID_PROF_WRITE_nin => ID_PROF_WRITE_nin,
      flg_type_in => flg_type_in,
      FLG_TYPE_nin => FLG_TYPE_nin,
      flg_aproved_in => flg_aproved_in,
      FLG_APROVED_nin => FLG_APROVED_nin,
      year_begin_in => year_begin_in,
      YEAR_BEGIN_nin => YEAR_BEGIN_nin,
      month_begin_in => month_begin_in,
      MONTH_BEGIN_nin => MONTH_BEGIN_nin,
      day_begin_in => day_begin_in,
      DAY_BEGIN_nin => DAY_BEGIN_nin,
      year_end_in => year_end_in,
      YEAR_END_nin => YEAR_END_nin,
      month_end_in => month_end_in,
      MONTH_END_nin => MONTH_END_nin,
      day_end_in => day_end_in,
      DAY_END_nin => DAY_END_nin,
      id_institution_in => id_institution_in,
      ID_INSTITUTION_nin => ID_INSTITUTION_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      flg_nature_in => flg_nature_in,
      FLG_NATURE_nin => FLG_NATURE_nin,
      dt_pat_allergy_tstz_in => dt_pat_allergy_tstz_in,
      DT_PAT_ALLERGY_TSTZ_nin => DT_PAT_ALLERGY_TSTZ_nin,
      dt_first_time_tstz_in => dt_first_time_tstz_in,
      DT_FIRST_TIME_TSTZ_nin => DT_FIRST_TIME_TSTZ_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      cancel_notes_in => cancel_notes_in,
      CANCEL_NOTES_nin => CANCEL_NOTES_nin,
      id_allergy_severity_in => id_allergy_severity_in,
      ID_ALLERGY_SEVERITY_nin => ID_ALLERGY_SEVERITY_nin,
      desc_allergy_in => desc_allergy_in,
      DESC_ALLERGY_nin => DESC_ALLERGY_nin,
      desc_aproved_in => desc_aproved_in,
      DESC_APROVED_nin => DESC_APROVED_nin,
      flg_edit_in => flg_edit_in,
      FLG_EDIT_nin => FLG_EDIT_nin,
      flg_cancel_in => flg_cancel_in,
      FLG_CANCEL_nin => FLG_CANCEL_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      desc_edit_in => desc_edit_in,
      DESC_EDIT_nin => DESC_EDIT_nin,
      revision_in => revision_in,
      REVISION_nin => REVISION_nin,
      dt_resolution_in => dt_resolution_in,
      DT_RESOLUTION_nin => DT_RESOLUTION_nin,
      id_cdr_call_in => id_cdr_call_in,
      ID_CDR_CALL_nin => ID_CDR_CALL_nin,
      flg_cda_reconciliation_in => flg_cda_reconciliation_in,
      FLG_CDA_RECONCILIATION_nin => FLG_CDA_RECONCILIATION_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN PAT_ALLERGY%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_pat_allergy_in => rec_in.ID_PAT_ALLERGY,
         id_allergy_in => rec_in.ID_ALLERGY,
         id_patient_in => rec_in.ID_PATIENT,
         id_drug_pharma_in => rec_in.ID_DRUG_PHARMA,
         flg_status_in => rec_in.FLG_STATUS,
         notes_in => rec_in.NOTES,
         id_prof_write_in => rec_in.ID_PROF_WRITE,
         flg_type_in => rec_in.FLG_TYPE,
         flg_aproved_in => rec_in.FLG_APROVED,
         year_begin_in => rec_in.YEAR_BEGIN,
         month_begin_in => rec_in.MONTH_BEGIN,
         day_begin_in => rec_in.DAY_BEGIN,
         year_end_in => rec_in.YEAR_END,
         month_end_in => rec_in.MONTH_END,
         day_end_in => rec_in.DAY_END,
         id_institution_in => rec_in.ID_INSTITUTION,
         id_episode_in => rec_in.ID_EPISODE,
         flg_nature_in => rec_in.FLG_NATURE,
         dt_pat_allergy_tstz_in => rec_in.DT_PAT_ALLERGY_TSTZ,
         dt_first_time_tstz_in => rec_in.DT_FIRST_TIME_TSTZ,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         cancel_notes_in => rec_in.CANCEL_NOTES,
         id_allergy_severity_in => rec_in.ID_ALLERGY_SEVERITY,
         desc_allergy_in => rec_in.DESC_ALLERGY,
         desc_aproved_in => rec_in.DESC_APROVED,
         flg_edit_in => rec_in.FLG_EDIT,
         flg_cancel_in => rec_in.FLG_CANCEL,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         desc_edit_in => rec_in.DESC_EDIT,
         revision_in => rec_in.REVISION,
         dt_resolution_in => rec_in.DT_RESOLUTION,
         id_cdr_call_in => rec_in.ID_CDR_CALL,
         flg_cda_reconciliation_in => rec_in.FLG_CDA_RECONCILIATION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN PAT_ALLERGY%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_pat_allergy_in => rec_in.ID_PAT_ALLERGY,
         id_allergy_in => rec_in.ID_ALLERGY,
         id_patient_in => rec_in.ID_PATIENT,
         id_drug_pharma_in => rec_in.ID_DRUG_PHARMA,
         flg_status_in => rec_in.FLG_STATUS,
         notes_in => rec_in.NOTES,
         id_prof_write_in => rec_in.ID_PROF_WRITE,
         flg_type_in => rec_in.FLG_TYPE,
         flg_aproved_in => rec_in.FLG_APROVED,
         year_begin_in => rec_in.YEAR_BEGIN,
         month_begin_in => rec_in.MONTH_BEGIN,
         day_begin_in => rec_in.DAY_BEGIN,
         year_end_in => rec_in.YEAR_END,
         month_end_in => rec_in.MONTH_END,
         day_end_in => rec_in.DAY_END,
         id_institution_in => rec_in.ID_INSTITUTION,
         id_episode_in => rec_in.ID_EPISODE,
         flg_nature_in => rec_in.FLG_NATURE,
         dt_pat_allergy_tstz_in => rec_in.DT_PAT_ALLERGY_TSTZ,
         dt_first_time_tstz_in => rec_in.DT_FIRST_TIME_TSTZ,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         cancel_notes_in => rec_in.CANCEL_NOTES,
         id_allergy_severity_in => rec_in.ID_ALLERGY_SEVERITY,
         desc_allergy_in => rec_in.DESC_ALLERGY,
         desc_aproved_in => rec_in.DESC_APROVED,
         flg_edit_in => rec_in.FLG_EDIT,
         flg_cancel_in => rec_in.FLG_CANCEL,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         desc_edit_in => rec_in.DESC_EDIT,
         revision_in => rec_in.REVISION,
         dt_resolution_in => rec_in.DT_RESOLUTION,
         id_cdr_call_in => rec_in.ID_CDR_CALL,
         flg_cda_reconciliation_in => rec_in.FLG_CDA_RECONCILIATION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_pat_allergy_in IN PAT_ALLERGY.ID_PAT_ALLERGY%TYPE,
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_pat_allergy_in => id_pat_allergy_in,
         id_allergy_in => id_allergy_in,
         id_patient_in => id_patient_in,
         id_drug_pharma_in => id_drug_pharma_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_write_in => id_prof_write_in,
         flg_type_in => flg_type_in,
         flg_aproved_in => flg_aproved_in,
         year_begin_in => year_begin_in,
         month_begin_in => month_begin_in,
         day_begin_in => day_begin_in,
         year_end_in => year_end_in,
         month_end_in => month_end_in,
         day_end_in => day_end_in,
         id_institution_in => id_institution_in,
         id_episode_in => id_episode_in,
         flg_nature_in => flg_nature_in,
         dt_pat_allergy_tstz_in => dt_pat_allergy_tstz_in,
         dt_first_time_tstz_in => dt_first_time_tstz_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_notes_in => cancel_notes_in,
         id_allergy_severity_in => id_allergy_severity_in,
         desc_allergy_in => desc_allergy_in,
         desc_aproved_in => desc_aproved_in,
         flg_edit_in => flg_edit_in,
         flg_cancel_in => flg_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         desc_edit_in => desc_edit_in,
         revision_in => revision_in,
         dt_resolution_in => dt_resolution_in,
         id_cdr_call_in => id_cdr_call_in,
         flg_cda_reconciliation_in => flg_cda_reconciliation_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_pat_allergy_in => id_pat_allergy_in,
            id_allergy_in => id_allergy_in,
            id_patient_in => id_patient_in,
            id_drug_pharma_in => id_drug_pharma_in,
            flg_status_in => flg_status_in,
            notes_in => notes_in,
            id_prof_write_in => id_prof_write_in,
            flg_type_in => flg_type_in,
            flg_aproved_in => flg_aproved_in,
            year_begin_in => year_begin_in,
            month_begin_in => month_begin_in,
            day_begin_in => day_begin_in,
            year_end_in => year_end_in,
            month_end_in => month_end_in,
            day_end_in => day_end_in,
            id_institution_in => id_institution_in,
            id_episode_in => id_episode_in,
            flg_nature_in => flg_nature_in,
            dt_pat_allergy_tstz_in => dt_pat_allergy_tstz_in,
            dt_first_time_tstz_in => dt_first_time_tstz_in,
            id_cancel_reason_in => id_cancel_reason_in,
            cancel_notes_in => cancel_notes_in,
            id_allergy_severity_in => id_allergy_severity_in,
            desc_allergy_in => desc_allergy_in,
            desc_aproved_in => desc_aproved_in,
            flg_edit_in => flg_edit_in,
            flg_cancel_in => flg_cancel_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            desc_edit_in => desc_edit_in,
            revision_in => revision_in,
            dt_resolution_in => dt_resolution_in,
            id_cdr_call_in => id_cdr_call_in,
            flg_cda_reconciliation_in => flg_cda_reconciliation_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_pat_allergy_in IN PAT_ALLERGY.ID_PAT_ALLERGY%TYPE,
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE DEFAULT NULL,
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE DEFAULT NULL,
      id_drug_pharma_in IN PAT_ALLERGY.ID_DRUG_PHARMA%TYPE DEFAULT NULL,
      flg_status_in IN PAT_ALLERGY.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN PAT_ALLERGY.NOTES%TYPE DEFAULT NULL,
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE DEFAULT NULL,
      flg_type_in IN PAT_ALLERGY.FLG_TYPE%TYPE DEFAULT NULL,
      flg_aproved_in IN PAT_ALLERGY.FLG_APROVED%TYPE DEFAULT NULL,
      year_begin_in IN PAT_ALLERGY.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_ALLERGY.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_ALLERGY.DAY_BEGIN%TYPE DEFAULT NULL,
      year_end_in IN PAT_ALLERGY.YEAR_END%TYPE DEFAULT NULL,
      month_end_in IN PAT_ALLERGY.MONTH_END%TYPE DEFAULT NULL,
      day_end_in IN PAT_ALLERGY.DAY_END%TYPE DEFAULT NULL,
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE DEFAULT NULL,
      flg_nature_in IN PAT_ALLERGY.FLG_NATURE%TYPE DEFAULT NULL,
      dt_pat_allergy_tstz_in IN PAT_ALLERGY.DT_PAT_ALLERGY_TSTZ%TYPE DEFAULT NULL,
      dt_first_time_tstz_in IN PAT_ALLERGY.DT_FIRST_TIME_TSTZ%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_notes_in IN PAT_ALLERGY.CANCEL_NOTES%TYPE DEFAULT NULL,
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE DEFAULT NULL,
      desc_allergy_in IN PAT_ALLERGY.DESC_ALLERGY%TYPE DEFAULT NULL,
      desc_aproved_in IN PAT_ALLERGY.DESC_APROVED%TYPE DEFAULT NULL,
      flg_edit_in IN PAT_ALLERGY.FLG_EDIT%TYPE DEFAULT NULL,
      flg_cancel_in IN PAT_ALLERGY.FLG_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PAT_ALLERGY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_ALLERGY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_ALLERGY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_ALLERGY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_ALLERGY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_ALLERGY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      desc_edit_in IN PAT_ALLERGY.DESC_EDIT%TYPE DEFAULT NULL,
      revision_in IN PAT_ALLERGY.REVISION%TYPE DEFAULT NULL,
      dt_resolution_in IN PAT_ALLERGY.DT_RESOLUTION%TYPE DEFAULT NULL,
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE DEFAULT NULL,
      flg_cda_reconciliation_in IN PAT_ALLERGY.FLG_CDA_RECONCILIATION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_pat_allergy_in,
      id_allergy_in,
      id_patient_in,
      id_drug_pharma_in,
      flg_status_in,
      notes_in,
      id_prof_write_in,
      flg_type_in,
      flg_aproved_in,
      year_begin_in,
      month_begin_in,
      day_begin_in,
      year_end_in,
      month_end_in,
      day_end_in,
      id_institution_in,
      id_episode_in,
      flg_nature_in,
      dt_pat_allergy_tstz_in,
      dt_first_time_tstz_in,
      id_cancel_reason_in,
      cancel_notes_in,
      id_allergy_severity_in,
      desc_allergy_in,
      desc_aproved_in,
      flg_edit_in,
      flg_cancel_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      desc_edit_in,
      revision_in,
      dt_resolution_in,
      id_cdr_call_in,
      flg_cda_reconciliation_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN PAT_ALLERGY_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_PAT_ALLERGY ID_PAT_ALLERGY_cc;
      l_ID_ALLERGY ID_ALLERGY_cc;
      l_ID_PATIENT ID_PATIENT_cc;
      l_ID_DRUG_PHARMA ID_DRUG_PHARMA_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_NOTES NOTES_cc;
      l_ID_PROF_WRITE ID_PROF_WRITE_cc;
      l_FLG_TYPE FLG_TYPE_cc;
      l_FLG_APROVED FLG_APROVED_cc;
      l_YEAR_BEGIN YEAR_BEGIN_cc;
      l_MONTH_BEGIN MONTH_BEGIN_cc;
      l_DAY_BEGIN DAY_BEGIN_cc;
      l_YEAR_END YEAR_END_cc;
      l_MONTH_END MONTH_END_cc;
      l_DAY_END DAY_END_cc;
      l_ID_INSTITUTION ID_INSTITUTION_cc;
      l_ID_EPISODE ID_EPISODE_cc;
      l_FLG_NATURE FLG_NATURE_cc;
      l_DT_PAT_ALLERGY_TSTZ DT_PAT_ALLERGY_TSTZ_cc;
      l_DT_FIRST_TIME_TSTZ DT_FIRST_TIME_TSTZ_cc;
      l_ID_CANCEL_REASON ID_CANCEL_REASON_cc;
      l_CANCEL_NOTES CANCEL_NOTES_cc;
      l_ID_ALLERGY_SEVERITY ID_ALLERGY_SEVERITY_cc;
      l_DESC_ALLERGY DESC_ALLERGY_cc;
      l_DESC_APROVED DESC_APROVED_cc;
      l_FLG_EDIT FLG_EDIT_cc;
      l_FLG_CANCEL FLG_CANCEL_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_DESC_EDIT DESC_EDIT_cc;
      l_REVISION REVISION_cc;
      l_DT_RESOLUTION DT_RESOLUTION_cc;
      l_ID_CDR_CALL ID_CDR_CALL_cc;
      l_FLG_CDA_RECONCILIATION FLG_CDA_RECONCILIATION_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_PAT_ALLERGY(i) := col_in(i).ID_PAT_ALLERGY;
         l_ID_ALLERGY(i) := col_in(i).ID_ALLERGY;
         l_ID_PATIENT(i) := col_in(i).ID_PATIENT;
         l_ID_DRUG_PHARMA(i) := col_in(i).ID_DRUG_PHARMA;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_NOTES(i) := col_in(i).NOTES;
         l_ID_PROF_WRITE(i) := col_in(i).ID_PROF_WRITE;
         l_FLG_TYPE(i) := col_in(i).FLG_TYPE;
         l_FLG_APROVED(i) := col_in(i).FLG_APROVED;
         l_YEAR_BEGIN(i) := col_in(i).YEAR_BEGIN;
         l_MONTH_BEGIN(i) := col_in(i).MONTH_BEGIN;
         l_DAY_BEGIN(i) := col_in(i).DAY_BEGIN;
         l_YEAR_END(i) := col_in(i).YEAR_END;
         l_MONTH_END(i) := col_in(i).MONTH_END;
         l_DAY_END(i) := col_in(i).DAY_END;
         l_ID_INSTITUTION(i) := col_in(i).ID_INSTITUTION;
         l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
         l_FLG_NATURE(i) := col_in(i).FLG_NATURE;
         l_DT_PAT_ALLERGY_TSTZ(i) := col_in(i).DT_PAT_ALLERGY_TSTZ;
         l_DT_FIRST_TIME_TSTZ(i) := col_in(i).DT_FIRST_TIME_TSTZ;
         l_ID_CANCEL_REASON(i) := col_in(i).ID_CANCEL_REASON;
         l_CANCEL_NOTES(i) := col_in(i).CANCEL_NOTES;
         l_ID_ALLERGY_SEVERITY(i) := col_in(i).ID_ALLERGY_SEVERITY;
         l_DESC_ALLERGY(i) := col_in(i).DESC_ALLERGY;
         l_DESC_APROVED(i) := col_in(i).DESC_APROVED;
         l_FLG_EDIT(i) := col_in(i).FLG_EDIT;
         l_FLG_CANCEL(i) := col_in(i).FLG_CANCEL;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_DESC_EDIT(i) := col_in(i).DESC_EDIT;
         l_REVISION(i) := col_in(i).REVISION;
         l_DT_RESOLUTION(i) := col_in(i).DT_RESOLUTION;
         l_ID_CDR_CALL(i) := col_in(i).ID_CDR_CALL;
         l_FLG_CDA_RECONCILIATION(i) := col_in(i).FLG_CDA_RECONCILIATION;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PAT_ALLERGY SET
               ID_ALLERGY = NVL (l_ID_ALLERGY(i), ID_ALLERGY),
               ID_PATIENT = NVL (l_ID_PATIENT(i), ID_PATIENT),
               ID_DRUG_PHARMA = NVL (l_ID_DRUG_PHARMA(i), ID_DRUG_PHARMA),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               NOTES = NVL (l_NOTES(i), NOTES),
               ID_PROF_WRITE = NVL (l_ID_PROF_WRITE(i), ID_PROF_WRITE),
               FLG_TYPE = NVL (l_FLG_TYPE(i), FLG_TYPE),
               FLG_APROVED = NVL (l_FLG_APROVED(i), FLG_APROVED),
               YEAR_BEGIN = NVL (l_YEAR_BEGIN(i), YEAR_BEGIN),
               MONTH_BEGIN = NVL (l_MONTH_BEGIN(i), MONTH_BEGIN),
               DAY_BEGIN = NVL (l_DAY_BEGIN(i), DAY_BEGIN),
               YEAR_END = NVL (l_YEAR_END(i), YEAR_END),
               MONTH_END = NVL (l_MONTH_END(i), MONTH_END),
               DAY_END = NVL (l_DAY_END(i), DAY_END),
               ID_INSTITUTION = NVL (l_ID_INSTITUTION(i), ID_INSTITUTION),
               ID_EPISODE = NVL (l_ID_EPISODE(i), ID_EPISODE),
               FLG_NATURE = NVL (l_FLG_NATURE(i), FLG_NATURE),
               DT_PAT_ALLERGY_TSTZ = NVL (l_DT_PAT_ALLERGY_TSTZ(i), DT_PAT_ALLERGY_TSTZ),
               DT_FIRST_TIME_TSTZ = NVL (l_DT_FIRST_TIME_TSTZ(i), DT_FIRST_TIME_TSTZ),
               ID_CANCEL_REASON = NVL (l_ID_CANCEL_REASON(i), ID_CANCEL_REASON),
               CANCEL_NOTES = NVL (l_CANCEL_NOTES(i), CANCEL_NOTES),
               ID_ALLERGY_SEVERITY = NVL (l_ID_ALLERGY_SEVERITY(i), ID_ALLERGY_SEVERITY),
               DESC_ALLERGY = NVL (l_DESC_ALLERGY(i), DESC_ALLERGY),
               DESC_APROVED = NVL (l_DESC_APROVED(i), DESC_APROVED),
               FLG_EDIT = NVL (l_FLG_EDIT(i), FLG_EDIT),
               FLG_CANCEL = NVL (l_FLG_CANCEL(i), FLG_CANCEL),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               DESC_EDIT = NVL (l_DESC_EDIT(i), DESC_EDIT),
               REVISION = NVL (l_REVISION(i), REVISION),
               DT_RESOLUTION = NVL (l_DT_RESOLUTION(i), DT_RESOLUTION),
               ID_CDR_CALL = NVL (l_ID_CDR_CALL(i), ID_CDR_CALL),
               FLG_CDA_RECONCILIATION = NVL (l_FLG_CDA_RECONCILIATION(i), FLG_CDA_RECONCILIATION)
             WHERE
                ID_PAT_ALLERGY = l_ID_PAT_ALLERGY(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PAT_ALLERGY SET
               ID_ALLERGY = l_ID_ALLERGY(i),
               ID_PATIENT = l_ID_PATIENT(i),
               ID_DRUG_PHARMA = l_ID_DRUG_PHARMA(i),
               FLG_STATUS = l_FLG_STATUS(i),
               NOTES = l_NOTES(i),
               ID_PROF_WRITE = l_ID_PROF_WRITE(i),
               FLG_TYPE = l_FLG_TYPE(i),
               FLG_APROVED = l_FLG_APROVED(i),
               YEAR_BEGIN = l_YEAR_BEGIN(i),
               MONTH_BEGIN = l_MONTH_BEGIN(i),
               DAY_BEGIN = l_DAY_BEGIN(i),
               YEAR_END = l_YEAR_END(i),
               MONTH_END = l_MONTH_END(i),
               DAY_END = l_DAY_END(i),
               ID_INSTITUTION = l_ID_INSTITUTION(i),
               ID_EPISODE = l_ID_EPISODE(i),
               FLG_NATURE = l_FLG_NATURE(i),
               DT_PAT_ALLERGY_TSTZ = l_DT_PAT_ALLERGY_TSTZ(i),
               DT_FIRST_TIME_TSTZ = l_DT_FIRST_TIME_TSTZ(i),
               ID_CANCEL_REASON = l_ID_CANCEL_REASON(i),
               CANCEL_NOTES = l_CANCEL_NOTES(i),
               ID_ALLERGY_SEVERITY = l_ID_ALLERGY_SEVERITY(i),
               DESC_ALLERGY = l_DESC_ALLERGY(i),
               DESC_APROVED = l_DESC_APROVED(i),
               FLG_EDIT = l_FLG_EDIT(i),
               FLG_CANCEL = l_FLG_CANCEL(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               DESC_EDIT = l_DESC_EDIT(i),
               REVISION = l_REVISION(i),
               DT_RESOLUTION = l_DT_RESOLUTION(i),
               ID_CDR_CALL = l_ID_CDR_CALL(i),
               FLG_CDA_RECONCILIATION = l_FLG_CDA_RECONCILIATION(i)
             WHERE
                ID_PAT_ALLERGY = l_ID_PAT_ALLERGY(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN PAT_ALLERGY_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE PAT_ALLERGY
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE PAT_ALLERGY
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_ALLERGY set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE PAT_ALLERGY set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_pat_allergy_in IN PAT_ALLERGY.ID_PAT_ALLERGY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ALLERGY
       WHERE
          ID_PAT_ALLERGY = id_pat_allergy_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_pat_allergy_in IN PAT_ALLERGY.ID_PAT_ALLERGY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_pat_allergy_in => id_pat_allergy_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_PAT_ALLERGY
   PROCEDURE del_ID_PAT_ALLERGY (
      id_pat_allergy_in IN PAT_ALLERGY.ID_PAT_ALLERGY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM PAT_ALLERGY
       WHERE ID_PAT_ALLERGY = id_pat_allergy_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_PAT_ALLERGY;






   -- Delete all rows for primary key column ID_PAT_ALLERGY
   PROCEDURE del_ID_PAT_ALLERGY (
      id_pat_allergy_in IN PAT_ALLERGY.ID_PAT_ALLERGY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_PAT_ALLERGY (
      id_pat_allergy_in => id_pat_allergy_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_PAT_ALLERGY;















   PROCEDURE del_PA_CR_FK (
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ALLERGY
       WHERE
          ID_CANCEL_REASON = del_PA_CR_FK.id_cancel_reason_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PA_CR_FK;



PROCEDURE del_PA_CR_FK (
      id_cancel_reason_in IN PAT_ALLERGY.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PA_CR_FK (
      id_cancel_reason_in => id_cancel_reason_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PA_CR_FK;





   PROCEDURE del_PA_ICC_FK (
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ALLERGY
       WHERE
          ID_CDR_CALL = del_PA_ICC_FK.id_cdr_call_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PA_ICC_FK;



PROCEDURE del_PA_ICC_FK (
      id_cdr_call_in IN PAT_ALLERGY.ID_CDR_CALL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PA_ICC_FK (
      id_cdr_call_in => id_cdr_call_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PA_ICC_FK;





   PROCEDURE del_PAL_ALL_FK (
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ALLERGY
       WHERE
          ID_ALLERGY = del_PAL_ALL_FK.id_allergy_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PAL_ALL_FK;



PROCEDURE del_PAL_ALL_FK (
      id_allergy_in IN PAT_ALLERGY.ID_ALLERGY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PAL_ALL_FK (
      id_allergy_in => id_allergy_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PAL_ALL_FK;





   PROCEDURE del_PAL_ALLSE_FK (
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ALLERGY
       WHERE
          ID_ALLERGY_SEVERITY = del_PAL_ALLSE_FK.id_allergy_severity_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PAL_ALLSE_FK;



PROCEDURE del_PAL_ALLSE_FK (
      id_allergy_severity_in IN PAT_ALLERGY.ID_ALLERGY_SEVERITY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PAL_ALLSE_FK (
      id_allergy_severity_in => id_allergy_severity_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PAL_ALLSE_FK;





   PROCEDURE del_PAL_EPIS_FK (
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ALLERGY
       WHERE
          ID_EPISODE = del_PAL_EPIS_FK.id_episode_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PAL_EPIS_FK;



PROCEDURE del_PAL_EPIS_FK (
      id_episode_in IN PAT_ALLERGY.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PAL_EPIS_FK (
      id_episode_in => id_episode_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PAL_EPIS_FK;





   PROCEDURE del_PAL_INST_FK (
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ALLERGY
       WHERE
          ID_INSTITUTION = del_PAL_INST_FK.id_institution_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PAL_INST_FK;



PROCEDURE del_PAL_INST_FK (
      id_institution_in IN PAT_ALLERGY.ID_INSTITUTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PAL_INST_FK (
      id_institution_in => id_institution_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PAL_INST_FK;





   PROCEDURE del_PAL_PAT_FK (
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ALLERGY
       WHERE
          ID_PATIENT = del_PAL_PAT_FK.id_patient_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PAL_PAT_FK;



PROCEDURE del_PAL_PAT_FK (
      id_patient_in IN PAT_ALLERGY.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PAL_PAT_FK (
      id_patient_in => id_patient_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PAL_PAT_FK;





   PROCEDURE del_PAL_PROF_WRITE_FK (
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_ALLERGY
       WHERE
          ID_PROF_WRITE = del_PAL_PROF_WRITE_FK.id_prof_write_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PAL_PROF_WRITE_FK;



PROCEDURE del_PAL_PROF_WRITE_FK (
      id_prof_write_in IN PAT_ALLERGY.ID_PROF_WRITE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PAL_PROF_WRITE_FK (
      id_prof_write_in => id_prof_write_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PAL_PROF_WRITE_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM PAT_ALLERGY';
      ELSE
         RETURN
            'DELETE FROM PAT_ALLERGY WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_ALLERGY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_ALLERGY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      pat_allergy_inout IN OUT PAT_ALLERGY%ROWTYPE
   )
   IS
   BEGIN
      pat_allergy_inout.ID_PAT_ALLERGY := NULL;
      pat_allergy_inout.ID_ALLERGY := NULL;
      pat_allergy_inout.ID_PATIENT := NULL;
      pat_allergy_inout.ID_DRUG_PHARMA := NULL;
      pat_allergy_inout.FLG_STATUS := NULL;
      pat_allergy_inout.NOTES := NULL;
      pat_allergy_inout.ID_PROF_WRITE := NULL;
      pat_allergy_inout.FLG_TYPE := NULL;
      pat_allergy_inout.FLG_APROVED := NULL;
      pat_allergy_inout.YEAR_BEGIN := NULL;
      pat_allergy_inout.MONTH_BEGIN := NULL;
      pat_allergy_inout.DAY_BEGIN := NULL;
      pat_allergy_inout.YEAR_END := NULL;
      pat_allergy_inout.MONTH_END := NULL;
      pat_allergy_inout.DAY_END := NULL;
      pat_allergy_inout.ID_INSTITUTION := NULL;
      pat_allergy_inout.ID_EPISODE := NULL;
      pat_allergy_inout.FLG_NATURE := NULL;
      pat_allergy_inout.DT_PAT_ALLERGY_TSTZ := NULL;
      pat_allergy_inout.DT_FIRST_TIME_TSTZ := NULL;
      pat_allergy_inout.ID_CANCEL_REASON := NULL;
      pat_allergy_inout.CANCEL_NOTES := NULL;
      pat_allergy_inout.ID_ALLERGY_SEVERITY := NULL;
      pat_allergy_inout.DESC_ALLERGY := NULL;
      pat_allergy_inout.DESC_APROVED := NULL;
      pat_allergy_inout.FLG_EDIT := NULL;
      pat_allergy_inout.FLG_CANCEL := NULL;
      pat_allergy_inout.CREATE_USER := NULL;
      pat_allergy_inout.CREATE_TIME := NULL;
      pat_allergy_inout.CREATE_INSTITUTION := NULL;
      pat_allergy_inout.UPDATE_USER := NULL;
      pat_allergy_inout.UPDATE_TIME := NULL;
      pat_allergy_inout.UPDATE_INSTITUTION := NULL;
      pat_allergy_inout.DESC_EDIT := NULL;
      pat_allergy_inout.REVISION := NULL;
      pat_allergy_inout.DT_RESOLUTION := NULL;
      pat_allergy_inout.ID_CDR_CALL := NULL;
      pat_allergy_inout.FLG_CDA_RECONCILIATION := 'N';
   END initrec;

   FUNCTION initrec RETURN PAT_ALLERGY%ROWTYPE
   IS
      l_pat_allergy PAT_ALLERGY%ROWTYPE;
   BEGIN
      l_pat_allergy.FLG_CDA_RECONCILIATION := 'N';
      RETURN l_pat_allergy;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN PAT_ALLERGY_tc
   IS
        data PAT_ALLERGY_tc;
   BEGIN
        select * bulk collect into data from PAT_ALLERGY where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN PAT_ALLERGY_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data PAT_ALLERGY_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_PAT_ALLERGY;
/
