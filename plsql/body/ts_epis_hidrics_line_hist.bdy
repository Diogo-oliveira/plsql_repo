/*-- Last Change Revision: $Rev: 1028800 $*/
/*-- Last Change by: $Author: sofia.mendes $*/
/*-- Date of last change: $Date: 2011-06-17 08:10:51 +0100 (sex, 17 jun 2011) $*/
CREATE OR REPLACE PACKAGE BODY TS_EPIS_HIDRICS_LINE_HIST
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Junho 15, 2011 10:29:17
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS_LINE%TYPE,
      dt_epis_hid_line_hist_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HID_LINE_HIST%TYPE
      ,
      id_epis_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      id_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS%TYPE DEFAULT NULL,
      id_way_in IN EPIS_HIDRICS_LINE_HIST.ID_WAY%TYPE DEFAULT NULL,
      id_hidrics_location_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS_LOCATION%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_HIDRICS_LINE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_creation_in IN EPIS_HIDRICS_LINE_HIST.DT_CREATION%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_cancel_reason_in IN EPIS_HIDRICS_LINE_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_HIDRICS_LINE_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN EPIS_HIDRICS_LINE_HIST.DT_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN EPIS_HIDRICS_LINE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN EPIS_HIDRICS_LINE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN EPIS_HIDRICS_LINE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_last_change_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      dt_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HIDRICS_LINE%TYPE DEFAULT NULL,
      flg_action_in IN EPIS_HIDRICS_LINE_HIST.FLG_ACTION%TYPE DEFAULT NULL,
      id_epis_hid_ftxt_way_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_WAY%TYPE DEFAULT NULL,
      id_epis_hid_ftxt_fluid_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_FLUID%TYPE DEFAULT NULL,
      id_epis_hid_ftxt_loc_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_LOC%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO EPIS_HIDRICS_LINE_HIST (
         ID_EPIS_HIDRICS_LINE,
         DT_EPIS_HID_LINE_HIST,
         ID_EPIS_HIDRICS,
         ID_HIDRICS,
         ID_WAY,
         ID_HIDRICS_LOCATION,
         FLG_STATUS,
         DT_CREATION,
         ID_PROF_CANCEL,
         ID_CANCEL_REASON,
         NOTES_CANCEL,
         DT_CANCEL,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         ID_PROF_LAST_CHANGE,
         DT_EPIS_HIDRICS_LINE,
         FLG_ACTION,
         ID_EPIS_HID_FTXT_WAY,
         ID_EPIS_HID_FTXT_FLUID,
         ID_EPIS_HID_FTXT_LOC
         )
      VALUES (
         id_epis_hidrics_line_in,
         dt_epis_hid_line_hist_in,
         id_epis_hidrics_in,
         id_hidrics_in,
         id_way_in,
         id_hidrics_location_in,
         flg_status_in,
         dt_creation_in,
         id_prof_cancel_in,
         id_cancel_reason_in,
         notes_cancel_in,
         dt_cancel_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         id_prof_last_change_in,
         dt_epis_hidrics_line_in,
         flg_action_in,
         id_epis_hid_ftxt_way_in,
         id_epis_hid_ftxt_fluid_in,
         id_epis_hid_ftxt_loc_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           IF l_name = 'EHLH_CR_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'EHLH_EHID_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_HIDRICS'
               , value_in => id_epis_hidrics_in);
           END IF;
           IF l_name = 'EHLH_EHL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_HIDRICS_LINE'
               , value_in => id_epis_hidrics_line_in);
           END IF;
           IF l_name = 'EHLH_HID_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HIDRICS'
               , value_in => id_hidrics_in);
           END IF;
           IF l_name = 'EHLH_HID_LOC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HIDRICS_LOCATION'
               , value_in => id_hidrics_location_in);
           END IF;
           IF l_name = 'EHLH_HID_WAY_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_WAY'
               , value_in => id_way_in);
           END IF;
           IF l_name = 'EHLH_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'EHLH_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_LAST_CHANGE'
               , value_in => id_prof_last_change_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS_LINE%TYPE,
      dt_epis_hid_line_hist_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HID_LINE_HIST%TYPE
      ,
      id_epis_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      id_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS%TYPE DEFAULT NULL,
      id_way_in IN EPIS_HIDRICS_LINE_HIST.ID_WAY%TYPE DEFAULT NULL,
      id_hidrics_location_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS_LOCATION%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_HIDRICS_LINE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_creation_in IN EPIS_HIDRICS_LINE_HIST.DT_CREATION%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_cancel_reason_in IN EPIS_HIDRICS_LINE_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_HIDRICS_LINE_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN EPIS_HIDRICS_LINE_HIST.DT_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN EPIS_HIDRICS_LINE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN EPIS_HIDRICS_LINE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN EPIS_HIDRICS_LINE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_last_change_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      dt_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HIDRICS_LINE%TYPE DEFAULT NULL,
      flg_action_in IN EPIS_HIDRICS_LINE_HIST.FLG_ACTION%TYPE DEFAULT NULL,
      id_epis_hid_ftxt_way_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_WAY%TYPE DEFAULT NULL,
      id_epis_hid_ftxt_fluid_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_FLUID%TYPE DEFAULT NULL,
      id_epis_hid_ftxt_loc_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_LOC%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_epis_hidrics_line_in => id_epis_hidrics_line_in,
      dt_epis_hid_line_hist_in => dt_epis_hid_line_hist_in
      ,
      id_epis_hidrics_in => id_epis_hidrics_in,
      id_hidrics_in => id_hidrics_in,
      id_way_in => id_way_in,
      id_hidrics_location_in => id_hidrics_location_in,
      flg_status_in => flg_status_in,
      dt_creation_in => dt_creation_in,
      id_prof_cancel_in => id_prof_cancel_in,
      id_cancel_reason_in => id_cancel_reason_in,
      notes_cancel_in => notes_cancel_in,
      dt_cancel_in => dt_cancel_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_prof_last_change_in => id_prof_last_change_in,
      dt_epis_hidrics_line_in => dt_epis_hidrics_line_in,
      flg_action_in => flg_action_in,
      id_epis_hid_ftxt_way_in => id_epis_hid_ftxt_way_in,
      id_epis_hid_ftxt_fluid_in => id_epis_hid_ftxt_fluid_in,
      id_epis_hid_ftxt_loc_in => id_epis_hid_ftxt_loc_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN EPIS_HIDRICS_LINE_HIST%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec EPIS_HIDRICS_LINE_HIST%ROWTYPE := rec_in;
   BEGIN
      ins (
         id_epis_hidrics_line_in => l_rec.ID_EPIS_HIDRICS_LINE,
         dt_epis_hid_line_hist_in => l_rec.DT_EPIS_HID_LINE_HIST
         ,
         id_epis_hidrics_in => l_rec.ID_EPIS_HIDRICS,
         id_hidrics_in => l_rec.ID_HIDRICS,
         id_way_in => l_rec.ID_WAY,
         id_hidrics_location_in => l_rec.ID_HIDRICS_LOCATION,
         flg_status_in => l_rec.FLG_STATUS,
         dt_creation_in => l_rec.DT_CREATION,
         id_prof_cancel_in => l_rec.ID_PROF_CANCEL,
         id_cancel_reason_in => l_rec.ID_CANCEL_REASON,
         notes_cancel_in => l_rec.NOTES_CANCEL,
         dt_cancel_in => l_rec.DT_CANCEL,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         id_prof_last_change_in => l_rec.ID_PROF_LAST_CHANGE,
         dt_epis_hidrics_line_in => l_rec.DT_EPIS_HIDRICS_LINE,
         flg_action_in => l_rec.FLG_ACTION,
         id_epis_hid_ftxt_way_in => l_rec.ID_EPIS_HID_FTXT_WAY,
         id_epis_hid_ftxt_fluid_in => l_rec.ID_EPIS_HID_FTXT_FLUID,
         id_epis_hid_ftxt_loc_in => l_rec.ID_EPIS_HID_FTXT_LOC
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN EPIS_HIDRICS_LINE_HIST%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

    PROCEDURE ins (
      rows_in IN EPIS_HIDRICS_LINE_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO EPIS_HIDRICS_LINE_HIST VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPIS_HIDRICS_LINE _' || indx
                  ,value_in => rows_in(indx).ID_EPIS_HIDRICS_LINE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_EPIS_HID_LINE_HIST _' || indx
                  ,value_in => rows_in(indx).DT_EPIS_HID_LINE_HIST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPIS_HIDRICS _' || indx
                  ,value_in => rows_in(indx).ID_EPIS_HIDRICS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_HIDRICS _' || indx
                  ,value_in => rows_in(indx).ID_HIDRICS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_WAY _' || indx
                  ,value_in => rows_in(indx).ID_WAY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_HIDRICS_LOCATION _' || indx
                  ,value_in => rows_in(indx).ID_HIDRICS_LOCATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(indx).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CREATION _' || indx
                  ,value_in => rows_in(indx).DT_CREATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CANCEL _' || indx
                  ,value_in => rows_in(indx).ID_PROF_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CANCEL_REASON _' || indx
                  ,value_in => rows_in(indx).ID_CANCEL_REASON
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_CANCEL _' || indx
                  ,value_in => rows_in(indx).NOTES_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CANCEL _' || indx
                  ,value_in => rows_in(indx).DT_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(indx).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(indx).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(indx).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(indx).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_LAST_CHANGE _' || indx
                  ,value_in => rows_in(indx).ID_PROF_LAST_CHANGE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_EPIS_HIDRICS_LINE _' || indx
                  ,value_in => rows_in(indx).DT_EPIS_HIDRICS_LINE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_ACTION _' || indx
                  ,value_in => rows_in(indx).FLG_ACTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPIS_HID_FTXT_WAY _' || indx
                  ,value_in => rows_in(indx).ID_EPIS_HID_FTXT_WAY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPIS_HID_FTXT_FLUID _' || indx
                  ,value_in => rows_in(indx).ID_EPIS_HID_FTXT_FLUID
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPIS_HID_FTXT_LOC _' || indx
                  ,value_in => rows_in(indx).ID_EPIS_HID_FTXT_LOC
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'EPIS_HIDRICS_LINE_HIST'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN EPIS_HIDRICS_LINE_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS_LINE%TYPE,
      dt_epis_hid_line_hist_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HID_LINE_HIST%TYPE,
      id_epis_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      ID_EPIS_HIDRICS_nin IN BOOLEAN := TRUE,
      id_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS%TYPE DEFAULT NULL,
      ID_HIDRICS_nin IN BOOLEAN := TRUE,
      id_way_in IN EPIS_HIDRICS_LINE_HIST.ID_WAY%TYPE DEFAULT NULL,
      ID_WAY_nin IN BOOLEAN := TRUE,
      id_hidrics_location_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS_LOCATION%TYPE DEFAULT NULL,
      ID_HIDRICS_LOCATION_nin IN BOOLEAN := TRUE,
      flg_status_in IN EPIS_HIDRICS_LINE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      dt_creation_in IN EPIS_HIDRICS_LINE_HIST.DT_CREATION%TYPE DEFAULT NULL,
      DT_CREATION_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN EPIS_HIDRICS_LINE_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN EPIS_HIDRICS_LINE_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN EPIS_HIDRICS_LINE_HIST.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
      create_user_in IN EPIS_HIDRICS_LINE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN EPIS_HIDRICS_LINE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN EPIS_HIDRICS_LINE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_prof_last_change_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      ID_PROF_LAST_CHANGE_nin IN BOOLEAN := TRUE,
      dt_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HIDRICS_LINE%TYPE DEFAULT NULL,
      DT_EPIS_HIDRICS_LINE_nin IN BOOLEAN := TRUE,
      flg_action_in IN EPIS_HIDRICS_LINE_HIST.FLG_ACTION%TYPE DEFAULT NULL,
      FLG_ACTION_nin IN BOOLEAN := TRUE,
      id_epis_hid_ftxt_way_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_WAY%TYPE DEFAULT NULL,
      ID_EPIS_HID_FTXT_WAY_nin IN BOOLEAN := TRUE,
      id_epis_hid_ftxt_fluid_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_FLUID%TYPE DEFAULT NULL,
      ID_EPIS_HID_FTXT_FLUID_nin IN BOOLEAN := TRUE,
      id_epis_hid_ftxt_loc_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_LOC%TYPE DEFAULT NULL,
      ID_EPIS_HID_FTXT_LOC_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_EPIS_HIDRICS_n NUMBER(1);
   l_ID_HIDRICS_n NUMBER(1);
   l_ID_WAY_n NUMBER(1);
   l_ID_HIDRICS_LOCATION_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_DT_CREATION_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_DT_CANCEL_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_PROF_LAST_CHANGE_n NUMBER(1);
   l_DT_EPIS_HIDRICS_LINE_n NUMBER(1);
   l_FLG_ACTION_n NUMBER(1);
   l_ID_EPIS_HID_FTXT_WAY_n NUMBER(1);
   l_ID_EPIS_HID_FTXT_FLUID_n NUMBER(1);
   l_ID_EPIS_HID_FTXT_LOC_n NUMBER(1);
   BEGIN

   l_ID_EPIS_HIDRICS_n := sys.diutil.bool_to_int(ID_EPIS_HIDRICS_nin);
   l_ID_HIDRICS_n := sys.diutil.bool_to_int(ID_HIDRICS_nin);
   l_ID_WAY_n := sys.diutil.bool_to_int(ID_WAY_nin);
   l_ID_HIDRICS_LOCATION_n := sys.diutil.bool_to_int(ID_HIDRICS_LOCATION_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_DT_CREATION_n := sys.diutil.bool_to_int(DT_CREATION_nin);
   l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
   l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
   l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
   l_DT_CANCEL_n := sys.diutil.bool_to_int(DT_CANCEL_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_ID_PROF_LAST_CHANGE_n := sys.diutil.bool_to_int(ID_PROF_LAST_CHANGE_nin);
   l_DT_EPIS_HIDRICS_LINE_n := sys.diutil.bool_to_int(DT_EPIS_HIDRICS_LINE_nin);
   l_FLG_ACTION_n := sys.diutil.bool_to_int(FLG_ACTION_nin);
   l_ID_EPIS_HID_FTXT_WAY_n := sys.diutil.bool_to_int(ID_EPIS_HID_FTXT_WAY_nin);
   l_ID_EPIS_HID_FTXT_FLUID_n := sys.diutil.bool_to_int(ID_EPIS_HID_FTXT_FLUID_nin);
   l_ID_EPIS_HID_FTXT_LOC_n := sys.diutil.bool_to_int(ID_EPIS_HID_FTXT_LOC_nin);


         UPDATE EPIS_HIDRICS_LINE_HIST SET
     ID_EPIS_HIDRICS = decode (l_ID_EPIS_HIDRICS_n,0,id_epis_hidrics_in, NVL (id_epis_hidrics_in, ID_EPIS_HIDRICS)),
     ID_HIDRICS = decode (l_ID_HIDRICS_n,0,id_hidrics_in, NVL (id_hidrics_in, ID_HIDRICS)),
     ID_WAY = decode (l_ID_WAY_n,0,id_way_in, NVL (id_way_in, ID_WAY)),
     ID_HIDRICS_LOCATION = decode (l_ID_HIDRICS_LOCATION_n,0,id_hidrics_location_in, NVL (id_hidrics_location_in, ID_HIDRICS_LOCATION)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     DT_CREATION = decode (l_DT_CREATION_n,0,dt_creation_in, NVL (dt_creation_in, DT_CREATION)),
     ID_PROF_CANCEL = decode (l_ID_PROF_CANCEL_n,0,id_prof_cancel_in, NVL (id_prof_cancel_in, ID_PROF_CANCEL)),
     ID_CANCEL_REASON = decode (l_ID_CANCEL_REASON_n,0,id_cancel_reason_in, NVL (id_cancel_reason_in, ID_CANCEL_REASON)),
     NOTES_CANCEL = decode (l_NOTES_CANCEL_n,0,notes_cancel_in, NVL (notes_cancel_in, NOTES_CANCEL)),
     DT_CANCEL = decode (l_DT_CANCEL_n,0,dt_cancel_in, NVL (dt_cancel_in, DT_CANCEL)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     ID_PROF_LAST_CHANGE = decode (l_ID_PROF_LAST_CHANGE_n,0,id_prof_last_change_in, NVL (id_prof_last_change_in, ID_PROF_LAST_CHANGE)),
     DT_EPIS_HIDRICS_LINE = decode (l_DT_EPIS_HIDRICS_LINE_n,0,dt_epis_hidrics_line_in, NVL (dt_epis_hidrics_line_in, DT_EPIS_HIDRICS_LINE)),
     FLG_ACTION = decode (l_FLG_ACTION_n,0,flg_action_in, NVL (flg_action_in, FLG_ACTION)),
     ID_EPIS_HID_FTXT_WAY = decode (l_ID_EPIS_HID_FTXT_WAY_n,0,id_epis_hid_ftxt_way_in, NVL (id_epis_hid_ftxt_way_in, ID_EPIS_HID_FTXT_WAY)),
     ID_EPIS_HID_FTXT_FLUID = decode (l_ID_EPIS_HID_FTXT_FLUID_n,0,id_epis_hid_ftxt_fluid_in, NVL (id_epis_hid_ftxt_fluid_in, ID_EPIS_HID_FTXT_FLUID)),
     ID_EPIS_HID_FTXT_LOC = decode (l_ID_EPIS_HID_FTXT_LOC_n,0,id_epis_hid_ftxt_loc_in, NVL (id_epis_hid_ftxt_loc_in, ID_EPIS_HID_FTXT_LOC))
          WHERE
             ID_EPIS_HIDRICS_LINE = id_epis_hidrics_line_in AND
             DT_EPIS_HID_LINE_HIST = dt_epis_hid_line_hist_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           IF l_name = 'EHLH_CR_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'EHLH_EHID_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_HIDRICS'
               , value_in => id_epis_hidrics_in);
           END IF;
           IF l_name = 'EHLH_EHL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_HIDRICS_LINE'
               , value_in => id_epis_hidrics_line_in);
           END IF;
           IF l_name = 'EHLH_HID_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HIDRICS'
               , value_in => id_hidrics_in);
           END IF;
           IF l_name = 'EHLH_HID_LOC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HIDRICS_LOCATION'
               , value_in => id_hidrics_location_in);
           END IF;
           IF l_name = 'EHLH_HID_WAY_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_WAY'
               , value_in => id_way_in);
           END IF;
           IF l_name = 'EHLH_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'EHLH_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_LAST_CHANGE'
               , value_in => id_prof_last_change_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS_LINE%TYPE,
      dt_epis_hid_line_hist_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HID_LINE_HIST%TYPE,
      id_epis_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      ID_EPIS_HIDRICS_nin IN BOOLEAN := TRUE,
      id_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS%TYPE DEFAULT NULL,
      ID_HIDRICS_nin IN BOOLEAN := TRUE,
      id_way_in IN EPIS_HIDRICS_LINE_HIST.ID_WAY%TYPE DEFAULT NULL,
      ID_WAY_nin IN BOOLEAN := TRUE,
      id_hidrics_location_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS_LOCATION%TYPE DEFAULT NULL,
      ID_HIDRICS_LOCATION_nin IN BOOLEAN := TRUE,
      flg_status_in IN EPIS_HIDRICS_LINE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      dt_creation_in IN EPIS_HIDRICS_LINE_HIST.DT_CREATION%TYPE DEFAULT NULL,
      DT_CREATION_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN EPIS_HIDRICS_LINE_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN EPIS_HIDRICS_LINE_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN EPIS_HIDRICS_LINE_HIST.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
      create_user_in IN EPIS_HIDRICS_LINE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN EPIS_HIDRICS_LINE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN EPIS_HIDRICS_LINE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_prof_last_change_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      ID_PROF_LAST_CHANGE_nin IN BOOLEAN := TRUE,
      dt_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HIDRICS_LINE%TYPE DEFAULT NULL,
      DT_EPIS_HIDRICS_LINE_nin IN BOOLEAN := TRUE,
      flg_action_in IN EPIS_HIDRICS_LINE_HIST.FLG_ACTION%TYPE DEFAULT NULL,
      FLG_ACTION_nin IN BOOLEAN := TRUE,
      id_epis_hid_ftxt_way_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_WAY%TYPE DEFAULT NULL,
      ID_EPIS_HID_FTXT_WAY_nin IN BOOLEAN := TRUE,
      id_epis_hid_ftxt_fluid_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_FLUID%TYPE DEFAULT NULL,
      ID_EPIS_HID_FTXT_FLUID_nin IN BOOLEAN := TRUE,
      id_epis_hid_ftxt_loc_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_LOC%TYPE DEFAULT NULL,
      ID_EPIS_HID_FTXT_LOC_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_epis_hidrics_line_in => id_epis_hidrics_line_in,
      dt_epis_hid_line_hist_in => dt_epis_hid_line_hist_in,
      id_epis_hidrics_in => id_epis_hidrics_in,
      ID_EPIS_HIDRICS_nin => ID_EPIS_HIDRICS_nin,
      id_hidrics_in => id_hidrics_in,
      ID_HIDRICS_nin => ID_HIDRICS_nin,
      id_way_in => id_way_in,
      ID_WAY_nin => ID_WAY_nin,
      id_hidrics_location_in => id_hidrics_location_in,
      ID_HIDRICS_LOCATION_nin => ID_HIDRICS_LOCATION_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      dt_creation_in => dt_creation_in,
      DT_CREATION_nin => DT_CREATION_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      dt_cancel_in => dt_cancel_in,
      DT_CANCEL_nin => DT_CANCEL_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_prof_last_change_in => id_prof_last_change_in,
      ID_PROF_LAST_CHANGE_nin => ID_PROF_LAST_CHANGE_nin,
      dt_epis_hidrics_line_in => dt_epis_hidrics_line_in,
      DT_EPIS_HIDRICS_LINE_nin => DT_EPIS_HIDRICS_LINE_nin,
      flg_action_in => flg_action_in,
      FLG_ACTION_nin => FLG_ACTION_nin,
      id_epis_hid_ftxt_way_in => id_epis_hid_ftxt_way_in,
      ID_EPIS_HID_FTXT_WAY_nin => ID_EPIS_HID_FTXT_WAY_nin,
      id_epis_hid_ftxt_fluid_in => id_epis_hid_ftxt_fluid_in,
      ID_EPIS_HID_FTXT_FLUID_nin => ID_EPIS_HID_FTXT_FLUID_nin,
      id_epis_hid_ftxt_loc_in => id_epis_hid_ftxt_loc_in,
      ID_EPIS_HID_FTXT_LOC_nin => ID_EPIS_HID_FTXT_LOC_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_epis_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      ID_EPIS_HIDRICS_nin IN BOOLEAN := TRUE,
      id_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS%TYPE DEFAULT NULL,
      ID_HIDRICS_nin IN BOOLEAN := TRUE,
      id_way_in IN EPIS_HIDRICS_LINE_HIST.ID_WAY%TYPE DEFAULT NULL,
      ID_WAY_nin IN BOOLEAN := TRUE,
      id_hidrics_location_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS_LOCATION%TYPE DEFAULT NULL,
      ID_HIDRICS_LOCATION_nin IN BOOLEAN := TRUE,
      flg_status_in IN EPIS_HIDRICS_LINE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      dt_creation_in IN EPIS_HIDRICS_LINE_HIST.DT_CREATION%TYPE DEFAULT NULL,
      DT_CREATION_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN EPIS_HIDRICS_LINE_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN EPIS_HIDRICS_LINE_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN EPIS_HIDRICS_LINE_HIST.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
      create_user_in IN EPIS_HIDRICS_LINE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN EPIS_HIDRICS_LINE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN EPIS_HIDRICS_LINE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_prof_last_change_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      ID_PROF_LAST_CHANGE_nin IN BOOLEAN := TRUE,
      dt_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HIDRICS_LINE%TYPE DEFAULT NULL,
      DT_EPIS_HIDRICS_LINE_nin IN BOOLEAN := TRUE,
      flg_action_in IN EPIS_HIDRICS_LINE_HIST.FLG_ACTION%TYPE DEFAULT NULL,
      FLG_ACTION_nin IN BOOLEAN := TRUE,
      id_epis_hid_ftxt_way_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_WAY%TYPE DEFAULT NULL,
      ID_EPIS_HID_FTXT_WAY_nin IN BOOLEAN := TRUE,
      id_epis_hid_ftxt_fluid_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_FLUID%TYPE DEFAULT NULL,
      ID_EPIS_HID_FTXT_FLUID_nin IN BOOLEAN := TRUE,
      id_epis_hid_ftxt_loc_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_LOC%TYPE DEFAULT NULL,
      ID_EPIS_HID_FTXT_LOC_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_EPIS_HIDRICS_n NUMBER(1);
   l_ID_HIDRICS_n NUMBER(1);
   l_ID_WAY_n NUMBER(1);
   l_ID_HIDRICS_LOCATION_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_DT_CREATION_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_DT_CANCEL_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_PROF_LAST_CHANGE_n NUMBER(1);
   l_DT_EPIS_HIDRICS_LINE_n NUMBER(1);
   l_FLG_ACTION_n NUMBER(1);
   l_ID_EPIS_HID_FTXT_WAY_n NUMBER(1);
   l_ID_EPIS_HID_FTXT_FLUID_n NUMBER(1);
   l_ID_EPIS_HID_FTXT_LOC_n NUMBER(1);
      id_epis_hidrics_line_in EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS_LINE%TYPE;
      dt_epis_hid_line_hist_in EPIS_HIDRICS_LINE_HIST.DT_EPIS_HID_LINE_HIST%TYPE;
   BEGIN



      l_ID_EPIS_HIDRICS_n := sys.diutil.bool_to_int(ID_EPIS_HIDRICS_nin);
      l_ID_HIDRICS_n := sys.diutil.bool_to_int(ID_HIDRICS_nin);
      l_ID_WAY_n := sys.diutil.bool_to_int(ID_WAY_nin);
      l_ID_HIDRICS_LOCATION_n := sys.diutil.bool_to_int(ID_HIDRICS_LOCATION_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_DT_CREATION_n := sys.diutil.bool_to_int(DT_CREATION_nin);
      l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
      l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
      l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
      l_DT_CANCEL_n := sys.diutil.bool_to_int(DT_CANCEL_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_ID_PROF_LAST_CHANGE_n := sys.diutil.bool_to_int(ID_PROF_LAST_CHANGE_nin);
      l_DT_EPIS_HIDRICS_LINE_n := sys.diutil.bool_to_int(DT_EPIS_HIDRICS_LINE_nin);
      l_FLG_ACTION_n := sys.diutil.bool_to_int(FLG_ACTION_nin);
      l_ID_EPIS_HID_FTXT_WAY_n := sys.diutil.bool_to_int(ID_EPIS_HID_FTXT_WAY_nin);
      l_ID_EPIS_HID_FTXT_FLUID_n := sys.diutil.bool_to_int(ID_EPIS_HID_FTXT_FLUID_nin);
      l_ID_EPIS_HID_FTXT_LOC_n := sys.diutil.bool_to_int(ID_EPIS_HID_FTXT_LOC_nin);



l_sql := 'UPDATE EPIS_HIDRICS_LINE_HIST SET '
     || ' ID_EPIS_HIDRICS = decode (' || l_ID_EPIS_HIDRICS_n || ',0,:id_epis_hidrics_in, NVL (:id_epis_hidrics_in, ID_EPIS_HIDRICS)) '|| ','
     || ' ID_HIDRICS = decode (' || l_ID_HIDRICS_n || ',0,:id_hidrics_in, NVL (:id_hidrics_in, ID_HIDRICS)) '|| ','
     || ' ID_WAY = decode (' || l_ID_WAY_n || ',0,:id_way_in, NVL (:id_way_in, ID_WAY)) '|| ','
     || ' ID_HIDRICS_LOCATION = decode (' || l_ID_HIDRICS_LOCATION_n || ',0,:id_hidrics_location_in, NVL (:id_hidrics_location_in, ID_HIDRICS_LOCATION)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' DT_CREATION = decode (' || l_DT_CREATION_n || ',0,:dt_creation_in, NVL (:dt_creation_in, DT_CREATION)) '|| ','
     || ' ID_PROF_CANCEL = decode (' || l_ID_PROF_CANCEL_n || ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) '|| ','
     || ' ID_CANCEL_REASON = decode (' || l_ID_CANCEL_REASON_n || ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) '|| ','
     || ' NOTES_CANCEL = decode (' || l_NOTES_CANCEL_n || ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) '|| ','
     || ' DT_CANCEL = decode (' || l_DT_CANCEL_n || ',0,:dt_cancel_in, NVL (:dt_cancel_in, DT_CANCEL)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' ID_PROF_LAST_CHANGE = decode (' || l_ID_PROF_LAST_CHANGE_n || ',0,:id_prof_last_change_in, NVL (:id_prof_last_change_in, ID_PROF_LAST_CHANGE)) '|| ','
     || ' DT_EPIS_HIDRICS_LINE = decode (' || l_DT_EPIS_HIDRICS_LINE_n || ',0,:dt_epis_hidrics_line_in, NVL (:dt_epis_hidrics_line_in, DT_EPIS_HIDRICS_LINE)) '|| ','
     || ' FLG_ACTION = decode (' || l_FLG_ACTION_n || ',0,:flg_action_in, NVL (:flg_action_in, FLG_ACTION)) '|| ','
     || ' ID_EPIS_HID_FTXT_WAY = decode (' || l_ID_EPIS_HID_FTXT_WAY_n || ',0,:id_epis_hid_ftxt_way_in, NVL (:id_epis_hid_ftxt_way_in, ID_EPIS_HID_FTXT_WAY)) '|| ','
     || ' ID_EPIS_HID_FTXT_FLUID = decode (' || l_ID_EPIS_HID_FTXT_FLUID_n || ',0,:id_epis_hid_ftxt_fluid_in, NVL (:id_epis_hid_ftxt_fluid_in, ID_EPIS_HID_FTXT_FLUID)) '|| ','
     || ' ID_EPIS_HID_FTXT_LOC = decode (' || l_ID_EPIS_HID_FTXT_LOC_n || ',0,:id_epis_hid_ftxt_loc_in, NVL (:id_epis_hid_ftxt_loc_in, ID_EPIS_HID_FTXT_LOC)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_epis_hidrics_in,
     id_hidrics_in,
     id_way_in,
     id_hidrics_location_in,
     flg_status_in,
     dt_creation_in,
     id_prof_cancel_in,
     id_cancel_reason_in,
     notes_cancel_in,
     dt_cancel_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     id_prof_last_change_in,
     dt_epis_hidrics_line_in,
     flg_action_in,
     id_epis_hid_ftxt_way_in,
     id_epis_hid_ftxt_fluid_in,
     id_epis_hid_ftxt_loc_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           IF l_name = 'EHLH_CR_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'EHLH_EHID_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_HIDRICS'
               , value_in => id_epis_hidrics_in);
           END IF;
           IF l_name = 'EHLH_EHL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_HIDRICS_LINE'
               , value_in => id_epis_hidrics_line_in);
           END IF;
           IF l_name = 'EHLH_HID_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HIDRICS'
               , value_in => id_hidrics_in);
           END IF;
           IF l_name = 'EHLH_HID_LOC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HIDRICS_LOCATION'
               , value_in => id_hidrics_location_in);
           END IF;
           IF l_name = 'EHLH_HID_WAY_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_WAY'
               , value_in => id_way_in);
           END IF;
           IF l_name = 'EHLH_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'EHLH_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_LAST_CHANGE'
               , value_in => id_prof_last_change_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_epis_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      ID_EPIS_HIDRICS_nin IN BOOLEAN := TRUE,
      id_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS%TYPE DEFAULT NULL,
      ID_HIDRICS_nin IN BOOLEAN := TRUE,
      id_way_in IN EPIS_HIDRICS_LINE_HIST.ID_WAY%TYPE DEFAULT NULL,
      ID_WAY_nin IN BOOLEAN := TRUE,
      id_hidrics_location_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS_LOCATION%TYPE DEFAULT NULL,
      ID_HIDRICS_LOCATION_nin IN BOOLEAN := TRUE,
      flg_status_in IN EPIS_HIDRICS_LINE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      dt_creation_in IN EPIS_HIDRICS_LINE_HIST.DT_CREATION%TYPE DEFAULT NULL,
      DT_CREATION_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN EPIS_HIDRICS_LINE_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN EPIS_HIDRICS_LINE_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN EPIS_HIDRICS_LINE_HIST.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
      create_user_in IN EPIS_HIDRICS_LINE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN EPIS_HIDRICS_LINE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN EPIS_HIDRICS_LINE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_prof_last_change_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      ID_PROF_LAST_CHANGE_nin IN BOOLEAN := TRUE,
      dt_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HIDRICS_LINE%TYPE DEFAULT NULL,
      DT_EPIS_HIDRICS_LINE_nin IN BOOLEAN := TRUE,
      flg_action_in IN EPIS_HIDRICS_LINE_HIST.FLG_ACTION%TYPE DEFAULT NULL,
      FLG_ACTION_nin IN BOOLEAN := TRUE,
      id_epis_hid_ftxt_way_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_WAY%TYPE DEFAULT NULL,
      ID_EPIS_HID_FTXT_WAY_nin IN BOOLEAN := TRUE,
      id_epis_hid_ftxt_fluid_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_FLUID%TYPE DEFAULT NULL,
      ID_EPIS_HID_FTXT_FLUID_nin IN BOOLEAN := TRUE,
      id_epis_hid_ftxt_loc_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_LOC%TYPE DEFAULT NULL,
      ID_EPIS_HID_FTXT_LOC_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_epis_hidrics_in => id_epis_hidrics_in,
      ID_EPIS_HIDRICS_nin => ID_EPIS_HIDRICS_nin,
      id_hidrics_in => id_hidrics_in,
      ID_HIDRICS_nin => ID_HIDRICS_nin,
      id_way_in => id_way_in,
      ID_WAY_nin => ID_WAY_nin,
      id_hidrics_location_in => id_hidrics_location_in,
      ID_HIDRICS_LOCATION_nin => ID_HIDRICS_LOCATION_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      dt_creation_in => dt_creation_in,
      DT_CREATION_nin => DT_CREATION_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      dt_cancel_in => dt_cancel_in,
      DT_CANCEL_nin => DT_CANCEL_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_prof_last_change_in => id_prof_last_change_in,
      ID_PROF_LAST_CHANGE_nin => ID_PROF_LAST_CHANGE_nin,
      dt_epis_hidrics_line_in => dt_epis_hidrics_line_in,
      DT_EPIS_HIDRICS_LINE_nin => DT_EPIS_HIDRICS_LINE_nin,
      flg_action_in => flg_action_in,
      FLG_ACTION_nin => FLG_ACTION_nin,
      id_epis_hid_ftxt_way_in => id_epis_hid_ftxt_way_in,
      ID_EPIS_HID_FTXT_WAY_nin => ID_EPIS_HID_FTXT_WAY_nin,
      id_epis_hid_ftxt_fluid_in => id_epis_hid_ftxt_fluid_in,
      ID_EPIS_HID_FTXT_FLUID_nin => ID_EPIS_HID_FTXT_FLUID_nin,
      id_epis_hid_ftxt_loc_in => id_epis_hid_ftxt_loc_in,
      ID_EPIS_HID_FTXT_LOC_nin => ID_EPIS_HID_FTXT_LOC_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN EPIS_HIDRICS_LINE_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_epis_hidrics_line_in => rec_in.ID_EPIS_HIDRICS_LINE,
         dt_epis_hid_line_hist_in => rec_in.DT_EPIS_HID_LINE_HIST,
         id_epis_hidrics_in => rec_in.ID_EPIS_HIDRICS,
         id_hidrics_in => rec_in.ID_HIDRICS,
         id_way_in => rec_in.ID_WAY,
         id_hidrics_location_in => rec_in.ID_HIDRICS_LOCATION,
         flg_status_in => rec_in.FLG_STATUS,
         dt_creation_in => rec_in.DT_CREATION,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         dt_cancel_in => rec_in.DT_CANCEL,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_prof_last_change_in => rec_in.ID_PROF_LAST_CHANGE,
         dt_epis_hidrics_line_in => rec_in.DT_EPIS_HIDRICS_LINE,
         flg_action_in => rec_in.FLG_ACTION,
         id_epis_hid_ftxt_way_in => rec_in.ID_EPIS_HID_FTXT_WAY,
         id_epis_hid_ftxt_fluid_in => rec_in.ID_EPIS_HID_FTXT_FLUID,
         id_epis_hid_ftxt_loc_in => rec_in.ID_EPIS_HID_FTXT_LOC

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN EPIS_HIDRICS_LINE_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_epis_hidrics_line_in => rec_in.ID_EPIS_HIDRICS_LINE,
         dt_epis_hid_line_hist_in => rec_in.DT_EPIS_HID_LINE_HIST,
         id_epis_hidrics_in => rec_in.ID_EPIS_HIDRICS,
         id_hidrics_in => rec_in.ID_HIDRICS,
         id_way_in => rec_in.ID_WAY,
         id_hidrics_location_in => rec_in.ID_HIDRICS_LOCATION,
         flg_status_in => rec_in.FLG_STATUS,
         dt_creation_in => rec_in.DT_CREATION,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         dt_cancel_in => rec_in.DT_CANCEL,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_prof_last_change_in => rec_in.ID_PROF_LAST_CHANGE,
         dt_epis_hidrics_line_in => rec_in.DT_EPIS_HIDRICS_LINE,
         flg_action_in => rec_in.FLG_ACTION,
         id_epis_hid_ftxt_way_in => rec_in.ID_EPIS_HID_FTXT_WAY,
         id_epis_hid_ftxt_fluid_in => rec_in.ID_EPIS_HID_FTXT_FLUID,
         id_epis_hid_ftxt_loc_in => rec_in.ID_EPIS_HID_FTXT_LOC

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS_LINE%TYPE,
      dt_epis_hid_line_hist_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HID_LINE_HIST%TYPE,
      id_epis_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      id_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS%TYPE DEFAULT NULL,
      id_way_in IN EPIS_HIDRICS_LINE_HIST.ID_WAY%TYPE DEFAULT NULL,
      id_hidrics_location_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS_LOCATION%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_HIDRICS_LINE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_creation_in IN EPIS_HIDRICS_LINE_HIST.DT_CREATION%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_cancel_reason_in IN EPIS_HIDRICS_LINE_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_HIDRICS_LINE_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN EPIS_HIDRICS_LINE_HIST.DT_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN EPIS_HIDRICS_LINE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN EPIS_HIDRICS_LINE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN EPIS_HIDRICS_LINE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_last_change_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      dt_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HIDRICS_LINE%TYPE DEFAULT NULL,
      flg_action_in IN EPIS_HIDRICS_LINE_HIST.FLG_ACTION%TYPE DEFAULT NULL,
      id_epis_hid_ftxt_way_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_WAY%TYPE DEFAULT NULL,
      id_epis_hid_ftxt_fluid_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_FLUID%TYPE DEFAULT NULL,
      id_epis_hid_ftxt_loc_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_LOC%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_epis_hidrics_line_in => id_epis_hidrics_line_in,
         dt_epis_hid_line_hist_in => dt_epis_hid_line_hist_in,
         id_epis_hidrics_in => id_epis_hidrics_in,
         id_hidrics_in => id_hidrics_in,
         id_way_in => id_way_in,
         id_hidrics_location_in => id_hidrics_location_in,
         flg_status_in => flg_status_in,
         dt_creation_in => dt_creation_in,
         id_prof_cancel_in => id_prof_cancel_in,
         id_cancel_reason_in => id_cancel_reason_in,
         notes_cancel_in => notes_cancel_in,
         dt_cancel_in => dt_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_prof_last_change_in => id_prof_last_change_in,
         dt_epis_hidrics_line_in => dt_epis_hidrics_line_in,
         flg_action_in => flg_action_in,
         id_epis_hid_ftxt_way_in => id_epis_hid_ftxt_way_in,
         id_epis_hid_ftxt_fluid_in => id_epis_hid_ftxt_fluid_in,
         id_epis_hid_ftxt_loc_in => id_epis_hid_ftxt_loc_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_epis_hidrics_line_in => id_epis_hidrics_line_in,
            dt_epis_hid_line_hist_in => dt_epis_hid_line_hist_in,
            id_epis_hidrics_in => id_epis_hidrics_in,
            id_hidrics_in => id_hidrics_in,
            id_way_in => id_way_in,
            id_hidrics_location_in => id_hidrics_location_in,
            flg_status_in => flg_status_in,
            dt_creation_in => dt_creation_in,
            id_prof_cancel_in => id_prof_cancel_in,
            id_cancel_reason_in => id_cancel_reason_in,
            notes_cancel_in => notes_cancel_in,
            dt_cancel_in => dt_cancel_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            id_prof_last_change_in => id_prof_last_change_in,
            dt_epis_hidrics_line_in => dt_epis_hidrics_line_in,
            flg_action_in => flg_action_in,
            id_epis_hid_ftxt_way_in => id_epis_hid_ftxt_way_in,
            id_epis_hid_ftxt_fluid_in => id_epis_hid_ftxt_fluid_in,
            id_epis_hid_ftxt_loc_in => id_epis_hid_ftxt_loc_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS_LINE%TYPE,
      dt_epis_hid_line_hist_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HID_LINE_HIST%TYPE,
      id_epis_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      id_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS%TYPE DEFAULT NULL,
      id_way_in IN EPIS_HIDRICS_LINE_HIST.ID_WAY%TYPE DEFAULT NULL,
      id_hidrics_location_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS_LOCATION%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_HIDRICS_LINE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      dt_creation_in IN EPIS_HIDRICS_LINE_HIST.DT_CREATION%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_cancel_reason_in IN EPIS_HIDRICS_LINE_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_HIDRICS_LINE_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_cancel_in IN EPIS_HIDRICS_LINE_HIST.DT_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN EPIS_HIDRICS_LINE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN EPIS_HIDRICS_LINE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN EPIS_HIDRICS_LINE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN EPIS_HIDRICS_LINE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_last_change_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      dt_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HIDRICS_LINE%TYPE DEFAULT NULL,
      flg_action_in IN EPIS_HIDRICS_LINE_HIST.FLG_ACTION%TYPE DEFAULT NULL,
      id_epis_hid_ftxt_way_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_WAY%TYPE DEFAULT NULL,
      id_epis_hid_ftxt_fluid_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_FLUID%TYPE DEFAULT NULL,
      id_epis_hid_ftxt_loc_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HID_FTXT_LOC%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_epis_hidrics_line_in,
      dt_epis_hid_line_hist_in,
      id_epis_hidrics_in,
      id_hidrics_in,
      id_way_in,
      id_hidrics_location_in,
      flg_status_in,
      dt_creation_in,
      id_prof_cancel_in,
      id_cancel_reason_in,
      notes_cancel_in,
      dt_cancel_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      id_prof_last_change_in,
      dt_epis_hidrics_line_in,
      flg_action_in,
      id_epis_hid_ftxt_way_in,
      id_epis_hid_ftxt_fluid_in,
      id_epis_hid_ftxt_loc_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN EPIS_HIDRICS_LINE_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_EPIS_HIDRICS_LINE ID_EPIS_HIDRICS_LINE_cc;
      l_DT_EPIS_HID_LINE_HIST DT_EPIS_HID_LINE_HIST_cc;
      l_ID_EPIS_HIDRICS ID_EPIS_HIDRICS_cc;
      l_ID_HIDRICS ID_HIDRICS_cc;
      l_ID_WAY ID_WAY_cc;
      l_ID_HIDRICS_LOCATION ID_HIDRICS_LOCATION_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_DT_CREATION DT_CREATION_cc;
      l_ID_PROF_CANCEL ID_PROF_CANCEL_cc;
      l_ID_CANCEL_REASON ID_CANCEL_REASON_cc;
      l_NOTES_CANCEL NOTES_CANCEL_cc;
      l_DT_CANCEL DT_CANCEL_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_ID_PROF_LAST_CHANGE ID_PROF_LAST_CHANGE_cc;
      l_DT_EPIS_HIDRICS_LINE DT_EPIS_HIDRICS_LINE_cc;
      l_FLG_ACTION FLG_ACTION_cc;
      l_ID_EPIS_HID_FTXT_WAY ID_EPIS_HID_FTXT_WAY_cc;
      l_ID_EPIS_HID_FTXT_FLUID ID_EPIS_HID_FTXT_FLUID_cc;
      l_ID_EPIS_HID_FTXT_LOC ID_EPIS_HID_FTXT_LOC_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_EPIS_HIDRICS_LINE(i) := col_in(i).ID_EPIS_HIDRICS_LINE;
         l_DT_EPIS_HID_LINE_HIST(i) := col_in(i).DT_EPIS_HID_LINE_HIST;
         l_ID_EPIS_HIDRICS(i) := col_in(i).ID_EPIS_HIDRICS;
         l_ID_HIDRICS(i) := col_in(i).ID_HIDRICS;
         l_ID_WAY(i) := col_in(i).ID_WAY;
         l_ID_HIDRICS_LOCATION(i) := col_in(i).ID_HIDRICS_LOCATION;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_DT_CREATION(i) := col_in(i).DT_CREATION;
         l_ID_PROF_CANCEL(i) := col_in(i).ID_PROF_CANCEL;
         l_ID_CANCEL_REASON(i) := col_in(i).ID_CANCEL_REASON;
         l_NOTES_CANCEL(i) := col_in(i).NOTES_CANCEL;
         l_DT_CANCEL(i) := col_in(i).DT_CANCEL;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_ID_PROF_LAST_CHANGE(i) := col_in(i).ID_PROF_LAST_CHANGE;
         l_DT_EPIS_HIDRICS_LINE(i) := col_in(i).DT_EPIS_HIDRICS_LINE;
         l_FLG_ACTION(i) := col_in(i).FLG_ACTION;
         l_ID_EPIS_HID_FTXT_WAY(i) := col_in(i).ID_EPIS_HID_FTXT_WAY;
         l_ID_EPIS_HID_FTXT_FLUID(i) := col_in(i).ID_EPIS_HID_FTXT_FLUID;
         l_ID_EPIS_HID_FTXT_LOC(i) := col_in(i).ID_EPIS_HID_FTXT_LOC;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE EPIS_HIDRICS_LINE_HIST SET
               ID_EPIS_HIDRICS = NVL (l_ID_EPIS_HIDRICS(i), ID_EPIS_HIDRICS),
               ID_HIDRICS = NVL (l_ID_HIDRICS(i), ID_HIDRICS),
               ID_WAY = NVL (l_ID_WAY(i), ID_WAY),
               ID_HIDRICS_LOCATION = NVL (l_ID_HIDRICS_LOCATION(i), ID_HIDRICS_LOCATION),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               DT_CREATION = NVL (l_DT_CREATION(i), DT_CREATION),
               ID_PROF_CANCEL = NVL (l_ID_PROF_CANCEL(i), ID_PROF_CANCEL),
               ID_CANCEL_REASON = NVL (l_ID_CANCEL_REASON(i), ID_CANCEL_REASON),
               NOTES_CANCEL = NVL (l_NOTES_CANCEL(i), NOTES_CANCEL),
               DT_CANCEL = NVL (l_DT_CANCEL(i), DT_CANCEL),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               ID_PROF_LAST_CHANGE = NVL (l_ID_PROF_LAST_CHANGE(i), ID_PROF_LAST_CHANGE),
               DT_EPIS_HIDRICS_LINE = NVL (l_DT_EPIS_HIDRICS_LINE(i), DT_EPIS_HIDRICS_LINE),
               FLG_ACTION = NVL (l_FLG_ACTION(i), FLG_ACTION),
               ID_EPIS_HID_FTXT_WAY = NVL (l_ID_EPIS_HID_FTXT_WAY(i), ID_EPIS_HID_FTXT_WAY),
               ID_EPIS_HID_FTXT_FLUID = NVL (l_ID_EPIS_HID_FTXT_FLUID(i), ID_EPIS_HID_FTXT_FLUID),
               ID_EPIS_HID_FTXT_LOC = NVL (l_ID_EPIS_HID_FTXT_LOC(i), ID_EPIS_HID_FTXT_LOC)
             WHERE
                ID_EPIS_HIDRICS_LINE = l_ID_EPIS_HIDRICS_LINE(i) AND
                DT_EPIS_HID_LINE_HIST = l_DT_EPIS_HID_LINE_HIST(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE EPIS_HIDRICS_LINE_HIST SET
               ID_EPIS_HIDRICS = l_ID_EPIS_HIDRICS(i),
               ID_HIDRICS = l_ID_HIDRICS(i),
               ID_WAY = l_ID_WAY(i),
               ID_HIDRICS_LOCATION = l_ID_HIDRICS_LOCATION(i),
               FLG_STATUS = l_FLG_STATUS(i),
               DT_CREATION = l_DT_CREATION(i),
               ID_PROF_CANCEL = l_ID_PROF_CANCEL(i),
               ID_CANCEL_REASON = l_ID_CANCEL_REASON(i),
               NOTES_CANCEL = l_NOTES_CANCEL(i),
               DT_CANCEL = l_DT_CANCEL(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               ID_PROF_LAST_CHANGE = l_ID_PROF_LAST_CHANGE(i),
               DT_EPIS_HIDRICS_LINE = l_DT_EPIS_HIDRICS_LINE(i),
               FLG_ACTION = l_FLG_ACTION(i),
               ID_EPIS_HID_FTXT_WAY = l_ID_EPIS_HID_FTXT_WAY(i),
               ID_EPIS_HID_FTXT_FLUID = l_ID_EPIS_HID_FTXT_FLUID(i),
               ID_EPIS_HID_FTXT_LOC = l_ID_EPIS_HID_FTXT_LOC(i)
             WHERE
                ID_EPIS_HIDRICS_LINE = l_ID_EPIS_HIDRICS_LINE(i) AND
                DT_EPIS_HID_LINE_HIST = l_DT_EPIS_HID_LINE_HIST(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN EPIS_HIDRICS_LINE_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE EPIS_HIDRICS_LINE_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE EPIS_HIDRICS_LINE_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE EPIS_HIDRICS_LINE_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE EPIS_HIDRICS_LINE_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS_LINE%TYPE,
      dt_epis_hid_line_hist_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HID_LINE_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HIDRICS_LINE_HIST
       WHERE
          ID_EPIS_HIDRICS_LINE = id_epis_hidrics_line_in AND
          DT_EPIS_HID_LINE_HIST = dt_epis_hid_line_hist_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS_LINE%TYPE,
      dt_epis_hid_line_hist_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HID_LINE_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_epis_hidrics_line_in => id_epis_hidrics_line_in,
      dt_epis_hid_line_hist_in => dt_epis_hid_line_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_EPIS_HIDRICS_LINE
   PROCEDURE del_ID_EPIS_HIDRICS_LINE (
      id_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS_LINE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM EPIS_HIDRICS_LINE_HIST
       WHERE ID_EPIS_HIDRICS_LINE = id_epis_hidrics_line_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_EPIS_HIDRICS_LINE;

   -- Delete all rows for primary key column DT_EPIS_HID_LINE_HIST
   PROCEDURE del_DT_EPIS_HID_LINE_HIST (
      dt_epis_hid_line_hist_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HID_LINE_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM EPIS_HIDRICS_LINE_HIST
       WHERE DT_EPIS_HID_LINE_HIST = dt_epis_hid_line_hist_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DT_EPIS_HID_LINE_HIST;






   -- Delete all rows for primary key column ID_EPIS_HIDRICS_LINE
   PROCEDURE del_ID_EPIS_HIDRICS_LINE (
      id_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS_LINE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_EPIS_HIDRICS_LINE (
      id_epis_hidrics_line_in => id_epis_hidrics_line_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_EPIS_HIDRICS_LINE;

   -- Delete all rows for primary key column DT_EPIS_HID_LINE_HIST
   PROCEDURE del_DT_EPIS_HID_LINE_HIST (
      dt_epis_hid_line_hist_in IN EPIS_HIDRICS_LINE_HIST.DT_EPIS_HID_LINE_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DT_EPIS_HID_LINE_HIST (
      dt_epis_hid_line_hist_in => dt_epis_hid_line_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_DT_EPIS_HID_LINE_HIST;















   PROCEDURE del_EHLH_CR_FK (
      id_cancel_reason_in IN EPIS_HIDRICS_LINE_HIST.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HIDRICS_LINE_HIST
       WHERE
          ID_CANCEL_REASON = del_EHLH_CR_FK.id_cancel_reason_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EHLH_CR_FK;



PROCEDURE del_EHLH_CR_FK (
      id_cancel_reason_in IN EPIS_HIDRICS_LINE_HIST.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EHLH_CR_FK (
      id_cancel_reason_in => id_cancel_reason_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EHLH_CR_FK;





   PROCEDURE del_EHLH_EHID_FK (
      id_epis_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HIDRICS_LINE_HIST
       WHERE
          ID_EPIS_HIDRICS = del_EHLH_EHID_FK.id_epis_hidrics_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EHLH_EHID_FK;



PROCEDURE del_EHLH_EHID_FK (
      id_epis_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EHLH_EHID_FK (
      id_epis_hidrics_in => id_epis_hidrics_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EHLH_EHID_FK;





   PROCEDURE del_EHLH_EHL_FK (
      id_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS_LINE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HIDRICS_LINE_HIST
       WHERE
          ID_EPIS_HIDRICS_LINE = del_EHLH_EHL_FK.id_epis_hidrics_line_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EHLH_EHL_FK;



PROCEDURE del_EHLH_EHL_FK (
      id_epis_hidrics_line_in IN EPIS_HIDRICS_LINE_HIST.ID_EPIS_HIDRICS_LINE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EHLH_EHL_FK (
      id_epis_hidrics_line_in => id_epis_hidrics_line_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EHLH_EHL_FK;





   PROCEDURE del_EHLH_HID_FK (
      id_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HIDRICS_LINE_HIST
       WHERE
          ID_HIDRICS = del_EHLH_HID_FK.id_hidrics_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EHLH_HID_FK;



PROCEDURE del_EHLH_HID_FK (
      id_hidrics_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EHLH_HID_FK (
      id_hidrics_in => id_hidrics_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EHLH_HID_FK;





   PROCEDURE del_EHLH_HID_LOC_FK (
      id_hidrics_location_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS_LOCATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HIDRICS_LINE_HIST
       WHERE
          ID_HIDRICS_LOCATION = del_EHLH_HID_LOC_FK.id_hidrics_location_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EHLH_HID_LOC_FK;



PROCEDURE del_EHLH_HID_LOC_FK (
      id_hidrics_location_in IN EPIS_HIDRICS_LINE_HIST.ID_HIDRICS_LOCATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EHLH_HID_LOC_FK (
      id_hidrics_location_in => id_hidrics_location_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EHLH_HID_LOC_FK;





   PROCEDURE del_EHLH_HID_WAY_FK (
      id_way_in IN EPIS_HIDRICS_LINE_HIST.ID_WAY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HIDRICS_LINE_HIST
       WHERE
          ID_WAY = del_EHLH_HID_WAY_FK.id_way_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EHLH_HID_WAY_FK;



PROCEDURE del_EHLH_HID_WAY_FK (
      id_way_in IN EPIS_HIDRICS_LINE_HIST.ID_WAY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EHLH_HID_WAY_FK (
      id_way_in => id_way_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EHLH_HID_WAY_FK;





   PROCEDURE del_EHLH_PROF_FK (
      id_prof_cancel_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HIDRICS_LINE_HIST
       WHERE
          ID_PROF_CANCEL = del_EHLH_PROF_FK.id_prof_cancel_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EHLH_PROF_FK;



PROCEDURE del_EHLH_PROF_FK (
      id_prof_cancel_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EHLH_PROF_FK (
      id_prof_cancel_in => id_prof_cancel_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EHLH_PROF_FK;





   PROCEDURE del_EHLH_PROF_FK2 (
      id_prof_last_change_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_LAST_CHANGE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HIDRICS_LINE_HIST
       WHERE
          ID_PROF_LAST_CHANGE = del_EHLH_PROF_FK2.id_prof_last_change_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EHLH_PROF_FK2;



PROCEDURE del_EHLH_PROF_FK2 (
      id_prof_last_change_in IN EPIS_HIDRICS_LINE_HIST.ID_PROF_LAST_CHANGE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EHLH_PROF_FK2 (
      id_prof_last_change_in => id_prof_last_change_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EHLH_PROF_FK2;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM EPIS_HIDRICS_LINE_HIST';
      ELSE
         RETURN
            'DELETE FROM EPIS_HIDRICS_LINE_HIST WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HIDRICS_LINE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HIDRICS_LINE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      epis_hidrics_line_hist_inout IN OUT EPIS_HIDRICS_LINE_HIST%ROWTYPE
   )
   IS
   BEGIN
      epis_hidrics_line_hist_inout.ID_EPIS_HIDRICS_LINE := NULL;
      epis_hidrics_line_hist_inout.DT_EPIS_HID_LINE_HIST := NULL;
      epis_hidrics_line_hist_inout.ID_EPIS_HIDRICS := NULL;
      epis_hidrics_line_hist_inout.ID_HIDRICS := NULL;
      epis_hidrics_line_hist_inout.ID_WAY := NULL;
      epis_hidrics_line_hist_inout.ID_HIDRICS_LOCATION := NULL;
      epis_hidrics_line_hist_inout.FLG_STATUS := NULL;
      epis_hidrics_line_hist_inout.DT_CREATION := NULL;
      epis_hidrics_line_hist_inout.ID_PROF_CANCEL := NULL;
      epis_hidrics_line_hist_inout.ID_CANCEL_REASON := NULL;
      epis_hidrics_line_hist_inout.NOTES_CANCEL := NULL;
      epis_hidrics_line_hist_inout.DT_CANCEL := NULL;
      epis_hidrics_line_hist_inout.CREATE_USER := NULL;
      epis_hidrics_line_hist_inout.CREATE_TIME := NULL;
      epis_hidrics_line_hist_inout.CREATE_INSTITUTION := NULL;
      epis_hidrics_line_hist_inout.UPDATE_USER := NULL;
      epis_hidrics_line_hist_inout.UPDATE_TIME := NULL;
      epis_hidrics_line_hist_inout.UPDATE_INSTITUTION := NULL;
      epis_hidrics_line_hist_inout.ID_PROF_LAST_CHANGE := NULL;
      epis_hidrics_line_hist_inout.DT_EPIS_HIDRICS_LINE := NULL;
      epis_hidrics_line_hist_inout.FLG_ACTION := NULL;
      epis_hidrics_line_hist_inout.ID_EPIS_HID_FTXT_WAY := NULL;
      epis_hidrics_line_hist_inout.ID_EPIS_HID_FTXT_FLUID := NULL;
      epis_hidrics_line_hist_inout.ID_EPIS_HID_FTXT_LOC := NULL;
   END initrec;

   FUNCTION initrec RETURN EPIS_HIDRICS_LINE_HIST%ROWTYPE
   IS
      l_epis_hidrics_line_hist EPIS_HIDRICS_LINE_HIST%ROWTYPE;
   BEGIN
      RETURN l_epis_hidrics_line_hist;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN EPIS_HIDRICS_LINE_HIST_tc
   IS
        data EPIS_HIDRICS_LINE_HIST_tc;
   BEGIN
        select * bulk collect into data from EPIS_HIDRICS_LINE_HIST where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN EPIS_HIDRICS_LINE_HIST_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data EPIS_HIDRICS_LINE_HIST_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_EPIS_HIDRICS_LINE_HIST;
/
