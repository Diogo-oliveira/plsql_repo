/*-- Last Change Revision: $Rev: 372225 $*/
/*-- Last Change by: $Author: claudio.ferreira $*/
/*-- Date of last change: $Date: 2010-01-08 10:42:48 +0000 (sex, 08 jan 2010) $*/

CREATE OR REPLACE PACKAGE BODY ts_epis_diet_det
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Abril 2, 2009 8:16:55
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO epis_diet_det
            (id_epis_diet_det,
             id_epis_diet_req,
             notes,
             id_diet_schedule,
             dt_diet_schedule,
             id_diet,
             quantity,
             id_unit_measure)
        VALUES
            (id_epis_diet_det_in,
             id_epis_diet_req_in,
             notes_in,
             id_diet_schedule_in,
             dt_diet_schedule_in,
             id_diet_in,
             quantity_in,
             id_unit_measure_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_DIET_DET');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    IF l_name = 'EDD_DIT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DIET',
                                                        value_in           => id_diet_in);
                    END IF;
                    IF l_name = 'EDD_DSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DIET_SCHEDULE',
                                                        value_in           => id_diet_schedule_in);
                    END IF;
                    IF l_name = 'EDD_EDR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DIET_REQ',
                                                        value_in           => id_epis_diet_req_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_epis_diet_det_in => id_epis_diet_det_in,
            id_epis_diet_req_in => id_epis_diet_req_in,
            notes_in            => notes_in,
            id_diet_schedule_in => id_diet_schedule_in,
            dt_diet_schedule_in => dt_diet_schedule_in,
            id_diet_in          => id_diet_in,
            quantity_in         => quantity_in,
            id_unit_measure_in  => id_unit_measure_in,
            handle_error_in     => handle_error_in,
            rows_out            => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_diet_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_diet_det%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_epis_diet_det := next_key(sequence_in);
        END IF;
        ins(id_epis_diet_det_in => l_rec.id_epis_diet_det,
            id_epis_diet_req_in => l_rec.id_epis_diet_req,
            notes_in            => l_rec.notes,
            id_diet_schedule_in => l_rec.id_diet_schedule,
            dt_diet_schedule_in => l_rec.dt_diet_schedule,
            id_diet_in          => l_rec.id_diet,
            quantity_in         => l_rec.quantity,
            id_unit_measure_in  => l_rec.id_unit_measure,
            handle_error_in     => handle_error_in,
            rows_out            => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_diet_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_diet_det.id_epis_diet_det%TYPE
    
     IS
        retval epis_diet_det.id_epis_diet_det%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_epis_diet_det.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_EPIS_DIET_DET'));
    END next_key;

    PROCEDURE ins
    (
        id_epis_diet_req_in  IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in             IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in  IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in  IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in           IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in          IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in   IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        id_epis_diet_det_out IN OUT epis_diet_det.id_epis_diet_det%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
        l_pky epis_diet_det.id_epis_diet_det%TYPE := next_key;
    BEGIN
        ins(id_epis_diet_det_in => l_pky,
            id_epis_diet_req_in => id_epis_diet_req_in,
            notes_in            => notes_in,
            id_diet_schedule_in => id_diet_schedule_in,
            dt_diet_schedule_in => dt_diet_schedule_in,
            id_diet_in          => id_diet_in,
            quantity_in         => quantity_in,
            id_unit_measure_in  => id_unit_measure_in,
            handle_error_in     => handle_error_in,
            rows_out            => rows_out);
        id_epis_diet_det_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_epis_diet_req_in  IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in             IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in  IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in  IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in           IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in          IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in   IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        id_epis_diet_det_out IN OUT epis_diet_det.id_epis_diet_det%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_diet_req_in  => id_epis_diet_req_in,
            notes_in             => notes_in,
            id_diet_schedule_in  => id_diet_schedule_in,
            dt_diet_schedule_in  => dt_diet_schedule_in,
            id_diet_in           => id_diet_in,
            quantity_in          => quantity_in,
            id_unit_measure_in   => id_unit_measure_in,
            id_epis_diet_det_out => id_epis_diet_det_out,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
    END ins;

    FUNCTION ins
    (
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) RETURN epis_diet_det.id_epis_diet_det%TYPE IS
        l_pky epis_diet_det.id_epis_diet_det%TYPE := next_key;
    BEGIN
        ins(id_epis_diet_det_in => l_pky,
            id_epis_diet_req_in => id_epis_diet_req_in,
            notes_in            => notes_in,
            id_diet_schedule_in => id_diet_schedule_in,
            dt_diet_schedule_in => dt_diet_schedule_in,
            id_diet_in          => id_diet_in,
            quantity_in         => quantity_in,
            id_unit_measure_in  => id_unit_measure_in,
            handle_error_in     => handle_error_in,
            rows_out            => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE
    ) RETURN epis_diet_det.id_epis_diet_det%TYPE IS
        l_pky    epis_diet_det.id_epis_diet_det%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_epis_diet_det_in => l_pky,
            id_epis_diet_req_in => id_epis_diet_req_in,
            notes_in            => notes_in,
            id_diet_schedule_in => id_diet_schedule_in,
            dt_diet_schedule_in => dt_diet_schedule_in,
            id_diet_in          => id_diet_in,
            quantity_in         => quantity_in,
            id_unit_measure_in  => id_unit_measure_in,
            handle_error_in     => handle_error_in,
            rows_out            => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
        l_pky epis_diet_det.id_epis_diet_det%TYPE := next_key;
    BEGIN
        ins(id_epis_diet_det_in => l_pky,
            id_epis_diet_req_in => id_epis_diet_req_in,
            notes_in            => notes_in,
            id_diet_schedule_in => id_diet_schedule_in,
            dt_diet_schedule_in => dt_diet_schedule_in,
            id_diet_in          => id_diet_in,
            quantity_in         => quantity_in,
            id_unit_measure_in  => id_unit_measure_in,
            handle_error_in     => handle_error_in,
            rows_out            => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        l_pky    epis_diet_det.id_epis_diet_det%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_epis_diet_det_in => l_pky,
            id_epis_diet_req_in => id_epis_diet_req_in,
            notes_in            => notes_in,
            id_diet_schedule_in => id_diet_schedule_in,
            dt_diet_schedule_in => dt_diet_schedule_in,
            id_diet_in          => id_diet_in,
            quantity_in         => quantity_in,
            id_unit_measure_in  => id_unit_measure_in,
            handle_error_in     => handle_error_in,
            rows_out            => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_diet_det_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO epis_diet_det
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_DIET_DET _' || indx,
                                                        value_in           => rows_in(indx).id_epis_diet_det,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_DIET_REQ _' || indx,
                                                        value_in           => rows_in(indx).id_epis_diet_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DIET_SCHEDULE _' || indx,
                                                        value_in           => rows_in(indx).id_diet_schedule,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_DIET_SCHEDULE _' || indx,
                                                        value_in           => rows_in(indx).dt_diet_schedule,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DIET _' || indx,
                                                        value_in           => rows_in(indx).id_diet,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'QUANTITY _' || indx,
                                                        value_in           => rows_in(indx).quantity,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_UNIT_MEASURE _' || indx,
                                                        value_in           => rows_in(indx).id_unit_measure,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'EPIS_DIET_DET',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_diet_det_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_epis_diet_det_in  IN epis_diet_det.id_epis_diet_det%TYPE,
        id_epis_diet_req_in  IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        id_epis_diet_req_nin IN BOOLEAN := TRUE,
        notes_in             IN epis_diet_det.notes%TYPE DEFAULT NULL,
        notes_nin            IN BOOLEAN := TRUE,
        id_diet_schedule_in  IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        id_diet_schedule_nin IN BOOLEAN := TRUE,
        dt_diet_schedule_in  IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_nin IN BOOLEAN := TRUE,
        id_diet_in           IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        id_diet_nin          IN BOOLEAN := TRUE,
        quantity_in          IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        quantity_nin         IN BOOLEAN := TRUE,
        id_unit_measure_in   IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        id_unit_measure_nin  IN BOOLEAN := TRUE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             IN OUT table_varchar
    ) IS
        l_rows_out           table_varchar;
        l_id_epis_diet_req_n NUMBER(1);
        l_notes_n            NUMBER(1);
        l_id_diet_schedule_n NUMBER(1);
        l_dt_diet_schedule_n NUMBER(1);
        l_id_diet_n          NUMBER(1);
        l_quantity_n         NUMBER(1);
        l_id_unit_measure_n  NUMBER(1);
    BEGIN
    
        l_id_epis_diet_req_n := sys.diutil.bool_to_int(id_epis_diet_req_nin);
        l_notes_n            := sys.diutil.bool_to_int(notes_nin);
        l_id_diet_schedule_n := sys.diutil.bool_to_int(id_diet_schedule_nin);
        l_dt_diet_schedule_n := sys.diutil.bool_to_int(dt_diet_schedule_nin);
        l_id_diet_n          := sys.diutil.bool_to_int(id_diet_nin);
        l_quantity_n         := sys.diutil.bool_to_int(quantity_nin);
        l_id_unit_measure_n  := sys.diutil.bool_to_int(id_unit_measure_nin);
    
        UPDATE epis_diet_det
           SET id_epis_diet_req = decode(l_id_epis_diet_req_n,
                                         0,
                                         id_epis_diet_req_in,
                                         nvl(id_epis_diet_req_in, id_epis_diet_req)),
               notes            = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_diet_schedule = decode(l_id_diet_schedule_n,
                                         0,
                                         id_diet_schedule_in,
                                         nvl(id_diet_schedule_in, id_diet_schedule)),
               dt_diet_schedule = decode(l_dt_diet_schedule_n,
                                         0,
                                         dt_diet_schedule_in,
                                         nvl(dt_diet_schedule_in, dt_diet_schedule)),
               id_diet          = decode(l_id_diet_n, 0, id_diet_in, nvl(id_diet_in, id_diet)),
               quantity         = decode(l_quantity_n, 0, quantity_in, nvl(quantity_in, quantity)),
               id_unit_measure  = decode(l_id_unit_measure_n,
                                         0,
                                         id_unit_measure_in,
                                         nvl(id_unit_measure_in, id_unit_measure))
         WHERE id_epis_diet_det = id_epis_diet_det_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_DIET_DET');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    IF l_name = 'EDD_DIT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DIET',
                                                        value_in           => id_diet_in);
                    END IF;
                    IF l_name = 'EDD_DSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DIET_SCHEDULE',
                                                        value_in           => id_diet_schedule_in);
                    END IF;
                    IF l_name = 'EDD_EDR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DIET_REQ',
                                                        value_in           => id_epis_diet_req_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_epis_diet_det_in  IN epis_diet_det.id_epis_diet_det%TYPE,
        id_epis_diet_req_in  IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        id_epis_diet_req_nin IN BOOLEAN := TRUE,
        notes_in             IN epis_diet_det.notes%TYPE DEFAULT NULL,
        notes_nin            IN BOOLEAN := TRUE,
        id_diet_schedule_in  IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        id_diet_schedule_nin IN BOOLEAN := TRUE,
        dt_diet_schedule_in  IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_nin IN BOOLEAN := TRUE,
        id_diet_in           IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        id_diet_nin          IN BOOLEAN := TRUE,
        quantity_in          IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        quantity_nin         IN BOOLEAN := TRUE,
        id_unit_measure_in   IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        id_unit_measure_nin  IN BOOLEAN := TRUE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_diet_det_in  => id_epis_diet_det_in,
            id_epis_diet_req_in  => id_epis_diet_req_in,
            id_epis_diet_req_nin => id_epis_diet_req_nin,
            notes_in             => notes_in,
            notes_nin            => notes_nin,
            id_diet_schedule_in  => id_diet_schedule_in,
            id_diet_schedule_nin => id_diet_schedule_nin,
            dt_diet_schedule_in  => dt_diet_schedule_in,
            dt_diet_schedule_nin => dt_diet_schedule_nin,
            id_diet_in           => id_diet_in,
            id_diet_nin          => id_diet_nin,
            quantity_in          => quantity_in,
            quantity_nin         => quantity_nin,
            id_unit_measure_in   => id_unit_measure_in,
            id_unit_measure_nin  => id_unit_measure_nin,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_epis_diet_req_in  IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        id_epis_diet_req_nin IN BOOLEAN := TRUE,
        notes_in             IN epis_diet_det.notes%TYPE DEFAULT NULL,
        notes_nin            IN BOOLEAN := TRUE,
        id_diet_schedule_in  IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        id_diet_schedule_nin IN BOOLEAN := TRUE,
        dt_diet_schedule_in  IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_nin IN BOOLEAN := TRUE,
        id_diet_in           IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        id_diet_nin          IN BOOLEAN := TRUE,
        quantity_in          IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        quantity_nin         IN BOOLEAN := TRUE,
        id_unit_measure_in   IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        id_unit_measure_nin  IN BOOLEAN := TRUE,
        where_in             VARCHAR2 DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             IN OUT table_varchar
    ) IS
        l_sql                VARCHAR2(32767);
        l_rows_out           table_varchar;
        l_id_epis_diet_req_n NUMBER(1);
        l_notes_n            NUMBER(1);
        l_id_diet_schedule_n NUMBER(1);
        l_dt_diet_schedule_n NUMBER(1);
        l_id_diet_n          NUMBER(1);
        l_quantity_n         NUMBER(1);
        l_id_unit_measure_n  NUMBER(1);
        id_epis_diet_det_in  epis_diet_det.id_epis_diet_det%TYPE;
    BEGIN
    
        l_id_epis_diet_req_n := sys.diutil.bool_to_int(id_epis_diet_req_nin);
        l_notes_n            := sys.diutil.bool_to_int(notes_nin);
        l_id_diet_schedule_n := sys.diutil.bool_to_int(id_diet_schedule_nin);
        l_dt_diet_schedule_n := sys.diutil.bool_to_int(dt_diet_schedule_nin);
        l_id_diet_n          := sys.diutil.bool_to_int(id_diet_nin);
        l_quantity_n         := sys.diutil.bool_to_int(quantity_nin);
        l_id_unit_measure_n  := sys.diutil.bool_to_int(id_unit_measure_nin);
    
        l_sql := 'UPDATE EPIS_DIET_DET SET ' || ' ID_EPIS_DIET_REQ = decode (' || l_id_epis_diet_req_n ||
                 ',0,:id_epis_diet_req_in, NVL (:id_epis_diet_req_in, ID_EPIS_DIET_REQ)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' ID_DIET_SCHEDULE = decode (' || l_id_diet_schedule_n ||
                 ',0,:id_diet_schedule_in, NVL (:id_diet_schedule_in, ID_DIET_SCHEDULE)) ' || ',' ||
                 ' DT_DIET_SCHEDULE = decode (' || l_dt_diet_schedule_n ||
                 ',0,:dt_diet_schedule_in, NVL (:dt_diet_schedule_in, DT_DIET_SCHEDULE)) ' || ',' ||
                 ' ID_DIET = decode (' || l_id_diet_n || ',0,:id_diet_in, NVL (:id_diet_in, ID_DIET)) ' || ',' ||
                 ' QUANTITY = decode (' || l_quantity_n || ',0,:quantity_in, NVL (:quantity_in, QUANTITY)) ' || ',' ||
                 ' ID_UNIT_MEASURE = decode (' || l_id_unit_measure_n ||
                 ',0,:id_unit_measure_in, NVL (:id_unit_measure_in, ID_UNIT_MEASURE)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_epis_diet_req_in, notes_in, id_diet_schedule_in, dt_diet_schedule_in, id_diet_in, quantity_in, id_unit_measure_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_DIET_DET');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    IF l_name = 'EDD_DIT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DIET',
                                                        value_in           => id_diet_in);
                    END IF;
                    IF l_name = 'EDD_DSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DIET_SCHEDULE',
                                                        value_in           => id_diet_schedule_in);
                    END IF;
                    IF l_name = 'EDD_EDR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_DIET_REQ',
                                                        value_in           => id_epis_diet_req_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_epis_diet_req_in  IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        id_epis_diet_req_nin IN BOOLEAN := TRUE,
        notes_in             IN epis_diet_det.notes%TYPE DEFAULT NULL,
        notes_nin            IN BOOLEAN := TRUE,
        id_diet_schedule_in  IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        id_diet_schedule_nin IN BOOLEAN := TRUE,
        dt_diet_schedule_in  IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_nin IN BOOLEAN := TRUE,
        id_diet_in           IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        id_diet_nin          IN BOOLEAN := TRUE,
        quantity_in          IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        quantity_nin         IN BOOLEAN := TRUE,
        id_unit_measure_in   IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        id_unit_measure_nin  IN BOOLEAN := TRUE,
        where_in             VARCHAR2 DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_diet_req_in  => id_epis_diet_req_in,
            id_epis_diet_req_nin => id_epis_diet_req_nin,
            notes_in             => notes_in,
            notes_nin            => notes_nin,
            id_diet_schedule_in  => id_diet_schedule_in,
            id_diet_schedule_nin => id_diet_schedule_nin,
            dt_diet_schedule_in  => dt_diet_schedule_in,
            dt_diet_schedule_nin => dt_diet_schedule_nin,
            id_diet_in           => id_diet_in,
            id_diet_nin          => id_diet_nin,
            quantity_in          => quantity_in,
            quantity_nin         => quantity_nin,
            id_unit_measure_in   => id_unit_measure_in,
            id_unit_measure_nin  => id_unit_measure_nin,
            where_in             => where_in,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_diet_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_diet_det_in => rec_in.id_epis_diet_det,
            id_epis_diet_req_in => rec_in.id_epis_diet_req,
            notes_in            => rec_in.notes,
            id_diet_schedule_in => rec_in.id_diet_schedule,
            dt_diet_schedule_in => rec_in.dt_diet_schedule,
            id_diet_in          => rec_in.id_diet,
            quantity_in         => rec_in.quantity,
            id_unit_measure_in  => rec_in.id_unit_measure
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_diet_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_diet_det_in => rec_in.id_epis_diet_det,
            id_epis_diet_req_in => rec_in.id_epis_diet_req,
            notes_in            => rec_in.notes,
            id_diet_schedule_in => rec_in.id_diet_schedule,
            dt_diet_schedule_in => rec_in.dt_diet_schedule,
            id_diet_in          => rec_in.id_diet,
            quantity_in         => rec_in.quantity,
            id_unit_measure_in  => rec_in.id_unit_measure
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_diet_det_in => id_epis_diet_det_in,
            id_epis_diet_req_in => id_epis_diet_req_in,
            notes_in            => notes_in,
            id_diet_schedule_in => id_diet_schedule_in,
            dt_diet_schedule_in => dt_diet_schedule_in,
            id_diet_in          => id_diet_in,
            quantity_in         => quantity_in,
            id_unit_measure_in  => id_unit_measure_in,
            handle_error_in     => handle_error_in,
            rows_out            => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_diet_det_in => id_epis_diet_det_in,
                id_epis_diet_req_in => id_epis_diet_req_in,
                notes_in            => notes_in,
                id_diet_schedule_in => id_diet_schedule_in,
                dt_diet_schedule_in => dt_diet_schedule_in,
                id_diet_in          => id_diet_in,
                quantity_in         => quantity_in,
                id_unit_measure_in  => id_unit_measure_in,
                handle_error_in     => handle_error_in,
                rows_out            => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE DEFAULT NULL,
        notes_in            IN epis_diet_det.notes%TYPE DEFAULT NULL,
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE DEFAULT NULL,
        dt_diet_schedule_in IN epis_diet_det.dt_diet_schedule%TYPE DEFAULT NULL,
        id_diet_in          IN epis_diet_det.id_diet%TYPE DEFAULT NULL,
        quantity_in         IN epis_diet_det.quantity%TYPE DEFAULT NULL,
        id_unit_measure_in  IN epis_diet_det.id_unit_measure%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_diet_det_in,
                id_epis_diet_req_in,
                notes_in,
                id_diet_schedule_in,
                dt_diet_schedule_in,
                id_diet_in,
                quantity_in,
                id_unit_measure_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN epis_diet_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_diet_det id_epis_diet_det_cc;
        l_id_epis_diet_req id_epis_diet_req_cc;
        l_notes            notes_cc;
        l_id_diet_schedule id_diet_schedule_cc;
        l_dt_diet_schedule dt_diet_schedule_cc;
        l_id_diet          id_diet_cc;
        l_quantity         quantity_cc;
        l_id_unit_measure  id_unit_measure_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_epis_diet_det(i) := col_in(i).id_epis_diet_det;
            l_id_epis_diet_req(i) := col_in(i).id_epis_diet_req;
            l_notes(i) := col_in(i).notes;
            l_id_diet_schedule(i) := col_in(i).id_diet_schedule;
            l_dt_diet_schedule(i) := col_in(i).dt_diet_schedule;
            l_id_diet(i) := col_in(i).id_diet;
            l_quantity(i) := col_in(i).quantity;
            l_id_unit_measure(i) := col_in(i).id_unit_measure;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE epis_diet_det
                   SET id_epis_diet_req = nvl(l_id_epis_diet_req(i), id_epis_diet_req),
                       notes            = nvl(l_notes(i), notes),
                       id_diet_schedule = nvl(l_id_diet_schedule(i), id_diet_schedule),
                       dt_diet_schedule = nvl(l_dt_diet_schedule(i), dt_diet_schedule),
                       id_diet          = nvl(l_id_diet(i), id_diet),
                       quantity         = nvl(l_quantity(i), quantity),
                       id_unit_measure  = nvl(l_id_unit_measure(i), id_unit_measure)
                 WHERE id_epis_diet_det = l_id_epis_diet_det(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE epis_diet_det
                   SET id_epis_diet_req = l_id_epis_diet_req(i),
                       notes            = l_notes(i),
                       id_diet_schedule = l_id_diet_schedule(i),
                       dt_diet_schedule = l_dt_diet_schedule(i),
                       id_diet          = l_id_diet(i),
                       quantity         = l_quantity(i),
                       id_unit_measure  = l_id_unit_measure(i)
                 WHERE id_epis_diet_det = l_id_epis_diet_det(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN epis_diet_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE EPIS_DIET_DET
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE EPIS_DIET_DET
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE EPIS_DIET_DET set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE EPIS_DIET_DET set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diet_det
         WHERE id_epis_diet_det = id_epis_diet_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_epis_diet_det_in => id_epis_diet_det_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_EPIS_DIET_DET
    PROCEDURE del_id_epis_diet_det
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diet_det
         WHERE id_epis_diet_det = id_epis_diet_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_epis_diet_det;

    -- Delete all rows for primary key column ID_EPIS_DIET_DET
    PROCEDURE del_id_epis_diet_det
    (
        id_epis_diet_det_in IN epis_diet_det.id_epis_diet_det%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_epis_diet_det(id_epis_diet_det_in => id_epis_diet_det_in,
                             handle_error_in     => handle_error_in,
                             rows_out            => rows_out);
    END del_id_epis_diet_det;

    PROCEDURE del_edd_dit_fk
    (
        id_diet_in      IN epis_diet_det.id_diet%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diet_det
         WHERE id_diet = del_edd_dit_fk.id_diet_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edd_dit_fk;

    PROCEDURE del_edd_dit_fk
    (
        id_diet_in      IN epis_diet_det.id_diet%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edd_dit_fk(id_diet_in => id_diet_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_edd_dit_fk;

    PROCEDURE del_edd_dse_fk
    (
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diet_det
         WHERE id_diet_schedule = del_edd_dse_fk.id_diet_schedule_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edd_dse_fk;

    PROCEDURE del_edd_dse_fk
    (
        id_diet_schedule_in IN epis_diet_det.id_diet_schedule%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edd_dse_fk(id_diet_schedule_in => id_diet_schedule_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_edd_dse_fk;

    PROCEDURE del_edd_edr_fk
    (
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diet_det
         WHERE id_epis_diet_req = del_edd_edr_fk.id_epis_diet_req_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_edd_edr_fk;

    PROCEDURE del_edd_edr_fk
    (
        id_epis_diet_req_in IN epis_diet_det.id_epis_diet_req%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_edd_edr_fk(id_epis_diet_req_in => id_epis_diet_req_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_edd_edr_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM EPIS_DIET_DET';
        ELSE
            RETURN 'DELETE FROM EPIS_DIET_DET WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_DIET_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_DIET_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(epis_diet_det_inout IN OUT epis_diet_det%ROWTYPE) IS
    BEGIN
        epis_diet_det_inout.id_epis_diet_det := NULL;
        epis_diet_det_inout.id_epis_diet_req := NULL;
        epis_diet_det_inout.notes            := NULL;
        epis_diet_det_inout.id_diet_schedule := NULL;
        epis_diet_det_inout.dt_diet_schedule := NULL;
        epis_diet_det_inout.id_diet          := NULL;
        epis_diet_det_inout.quantity         := NULL;
        epis_diet_det_inout.id_unit_measure  := NULL;
    END initrec;

    FUNCTION initrec RETURN epis_diet_det%ROWTYPE IS
        l_epis_diet_det epis_diet_det%ROWTYPE;
    BEGIN
        RETURN l_epis_diet_det;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_diet_det_tc IS
        data epis_diet_det_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM epis_diet_det
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_diet_det_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data epis_diet_det_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_diet_det;
/
