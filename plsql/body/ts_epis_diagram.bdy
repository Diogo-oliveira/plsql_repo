/*-- Last Change Revision: $Rev: 2028045 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:02 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_diagram
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2017-11-07 14:40:02
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_diagram.id_epis_diagram%TYPE IS
        retval epis_diagram.id_epis_diagram%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_epis_diagram.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_diagram.id_epis_diagram%TYPE := next_key;
    BEGIN
        ins(id_epis_diagram_in     => l_pky,
            flg_status_in          => flg_status_in,
            adw_last_update_in     => adw_last_update_in,
            id_episode_in          => id_episode_in,
            diagram_order_in       => diagram_order_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            id_patient_in          => id_patient_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            dt_last_update_tstz_in => dt_last_update_tstz_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(flg_status_in          => flg_status_in,
            adw_last_update_in     => adw_last_update_in,
            id_episode_in          => id_episode_in,
            diagram_order_in       => diagram_order_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            id_patient_in          => id_patient_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            dt_last_update_tstz_in => dt_last_update_tstz_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_epis_diagram_out    IN OUT epis_diagram.id_epis_diagram%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_diagram.id_epis_diagram%TYPE := next_key;
    BEGIN
        ins(id_epis_diagram_in     => l_pky,
            flg_status_in          => flg_status_in,
            adw_last_update_in     => adw_last_update_in,
            id_episode_in          => id_episode_in,
            diagram_order_in       => diagram_order_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            id_patient_in          => id_patient_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            dt_last_update_tstz_in => dt_last_update_tstz_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_epis_diagram_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_epis_diagram_out    IN OUT epis_diagram.id_epis_diagram%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(flg_status_in          => flg_status_in,
            adw_last_update_in     => adw_last_update_in,
            id_episode_in          => id_episode_in,
            diagram_order_in       => diagram_order_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            id_patient_in          => id_patient_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            dt_last_update_tstz_in => dt_last_update_tstz_in,
            id_epis_diagram_out    => id_epis_diagram_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN epis_diagram.id_epis_diagram%TYPE IS
        l_pky epis_diagram.id_epis_diagram%TYPE := next_key;
    BEGIN
        ins(id_epis_diagram_in     => l_pky,
            flg_status_in          => flg_status_in,
            adw_last_update_in     => adw_last_update_in,
            id_episode_in          => id_episode_in,
            diagram_order_in       => diagram_order_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            id_patient_in          => id_patient_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            dt_last_update_tstz_in => dt_last_update_tstz_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN epis_diagram.id_epis_diagram%TYPE IS
        l_pky    epis_diagram.id_epis_diagram%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_epis_diagram_in     => l_pky,
            flg_status_in          => flg_status_in,
            adw_last_update_in     => adw_last_update_in,
            id_episode_in          => id_episode_in,
            diagram_order_in       => diagram_order_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            id_patient_in          => id_patient_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            dt_last_update_tstz_in => dt_last_update_tstz_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_epis_diagram_in     IN epis_diagram.id_epis_diagram%TYPE,
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO epis_diagram
            (id_epis_diagram,
             flg_status,
             adw_last_update,
             id_episode,
             diagram_order,
             dt_creation_tstz,
             id_patient,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             dt_last_update_tstz)
        VALUES
            (id_epis_diagram_in,
             flg_status_in,
             adw_last_update_in,
             id_episode_in,
             diagram_order_in,
             dt_creation_tstz_in,
             id_patient_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             dt_last_update_tstz_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_epis_diagram_in     IN epis_diagram.id_epis_diagram%TYPE,
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT SYSDATE,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_diagram_in     => id_epis_diagram_in,
            flg_status_in          => flg_status_in,
            adw_last_update_in     => adw_last_update_in,
            id_episode_in          => id_episode_in,
            diagram_order_in       => diagram_order_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            id_patient_in          => id_patient_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            dt_last_update_tstz_in => dt_last_update_tstz_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_diagram%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_diagram%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_epis_diagram := next_key(sequence_in);
        END IF;
    
        ins(id_epis_diagram_in     => l_rec.id_epis_diagram,
            flg_status_in          => l_rec.flg_status,
            adw_last_update_in     => l_rec.adw_last_update,
            id_episode_in          => l_rec.id_episode,
            diagram_order_in       => l_rec.diagram_order,
            dt_creation_tstz_in    => l_rec.dt_creation_tstz,
            id_patient_in          => l_rec.id_patient,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            dt_last_update_tstz_in => l_rec.dt_last_update_tstz,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_diagram%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_diagram_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_diagram
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_diagram_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_diagram_in      IN epis_diagram.id_epis_diagram%TYPE,
        flg_status_in           IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        adw_last_update_in      IN epis_diagram.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        id_episode_in           IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        diagram_order_in        IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        diagram_order_nin       IN BOOLEAN := TRUE,
        dt_creation_tstz_in     IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin    IN BOOLEAN := TRUE,
        id_patient_in           IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        create_user_in          IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        dt_last_update_tstz_in  IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_flg_status_n          NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_adw_last_update_n     NUMBER(1) := sys.diutil.bool_to_int(adw_last_update_nin);
        l_id_episode_n          NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_diagram_order_n       NUMBER(1) := sys.diutil.bool_to_int(diagram_order_nin);
        l_dt_creation_tstz_n    NUMBER(1) := sys.diutil.bool_to_int(dt_creation_tstz_nin);
        l_id_patient_n          NUMBER(1) := sys.diutil.bool_to_int(id_patient_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_last_update_tstz_n NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
    BEGIN
    
        UPDATE epis_diagram
           SET flg_status          = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               adw_last_update     = decode(l_adw_last_update_n,
                                            0,
                                            adw_last_update_in,
                                            nvl(adw_last_update_in, adw_last_update)),
               id_episode          = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               diagram_order       = decode(l_diagram_order_n, 0, diagram_order_in, nvl(diagram_order_in, diagram_order)),
               dt_creation_tstz    = decode(l_dt_creation_tstz_n,
                                            0,
                                            dt_creation_tstz_in,
                                            nvl(dt_creation_tstz_in, dt_creation_tstz)),
               id_patient          = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution)),
               dt_last_update_tstz = decode(l_dt_last_update_tstz_n,
                                            0,
                                            dt_last_update_tstz_in,
                                            nvl(dt_last_update_tstz_in, dt_last_update_tstz))
         WHERE id_epis_diagram = id_epis_diagram_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_diagram_in      IN epis_diagram.id_epis_diagram%TYPE,
        flg_status_in           IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        adw_last_update_in      IN epis_diagram.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        id_episode_in           IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        diagram_order_in        IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        diagram_order_nin       IN BOOLEAN := TRUE,
        dt_creation_tstz_in     IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin    IN BOOLEAN := TRUE,
        id_patient_in           IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        create_user_in          IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        dt_last_update_tstz_in  IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_diagram_in      => id_epis_diagram_in,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            adw_last_update_in      => adw_last_update_in,
            adw_last_update_nin     => adw_last_update_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            diagram_order_in        => diagram_order_in,
            diagram_order_nin       => diagram_order_nin,
            dt_creation_tstz_in     => dt_creation_tstz_in,
            dt_creation_tstz_nin    => dt_creation_tstz_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            dt_last_update_tstz_in  => dt_last_update_tstz_in,
            dt_last_update_tstz_nin => dt_last_update_tstz_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        flg_status_in           IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        adw_last_update_in      IN epis_diagram.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        id_episode_in           IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        diagram_order_in        IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        diagram_order_nin       IN BOOLEAN := TRUE,
        dt_creation_tstz_in     IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin    IN BOOLEAN := TRUE,
        id_patient_in           IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        create_user_in          IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        dt_last_update_tstz_in  IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_flg_status_n          NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_adw_last_update_n     NUMBER(1) := sys.diutil.bool_to_int(adw_last_update_nin);
        l_id_episode_n          NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_diagram_order_n       NUMBER(1) := sys.diutil.bool_to_int(diagram_order_nin);
        l_dt_creation_tstz_n    NUMBER(1) := sys.diutil.bool_to_int(dt_creation_tstz_nin);
        l_id_patient_n          NUMBER(1) := sys.diutil.bool_to_int(id_patient_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_last_update_tstz_n NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
    BEGIN
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_adw_last_update_n     := sys.diutil.bool_to_int(adw_last_update_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_diagram_order_n       := sys.diutil.bool_to_int(diagram_order_nin);
        l_dt_creation_tstz_n    := sys.diutil.bool_to_int(dt_creation_tstz_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_last_update_tstz_n := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
        l_sql                   := 'UPDATE epis_diagram SET' || ' FLG_STATUS = decode (' || l_flg_status_n ||
                                   ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                   ' ADW_LAST_UPDATE = decode (' || l_adw_last_update_n ||
                                   ',0,:ADW_LAST_UPDATE_in, NVL (:ADW_LAST_UPDATE_in, ADW_LAST_UPDATE)) ' || ',' ||
                                   ' ID_EPISODE = decode (' || l_id_episode_n ||
                                   ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ',' ||
                                   ' DIAGRAM_ORDER = decode (' || l_diagram_order_n ||
                                   ',0,:DIAGRAM_ORDER_in, NVL (:DIAGRAM_ORDER_in, DIAGRAM_ORDER)) ' || ',' ||
                                   ' DT_CREATION_TSTZ = decode (' || l_dt_creation_tstz_n ||
                                   ',0,:DT_CREATION_TSTZ_in, NVL (:DT_CREATION_TSTZ_in, DT_CREATION_TSTZ)) ' || ',' ||
                                   ' ID_PATIENT = decode (' || l_id_patient_n ||
                                   ',0,:ID_PATIENT_in, NVL (:ID_PATIENT_in, ID_PATIENT)) ' || ',' ||
                                   ' CREATE_USER = decode (' || l_create_user_n ||
                                   ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                   ' CREATE_TIME = decode (' || l_create_time_n ||
                                   ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                   ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                   ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                   ' UPDATE_USER = decode (' || l_update_user_n ||
                                   ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                   ' UPDATE_TIME = decode (' || l_update_time_n ||
                                   ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                   ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                   ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                   ' DT_LAST_UPDATE_TSTZ = decode (' || l_dt_last_update_tstz_n ||
                                   ',0,:DT_LAST_UPDATE_TSTZ_in, NVL (:DT_LAST_UPDATE_TSTZ_in, DT_LAST_UPDATE_TSTZ)) ' ||
                                   ' where ' || nvl(where_in, '(1=1)') ||
                                   ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN flg_status_in, adw_last_update_in, id_episode_in, diagram_order_in, dt_creation_tstz_in, id_patient_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, dt_last_update_tstz_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        flg_status_in           IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        adw_last_update_in      IN epis_diagram.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        id_episode_in           IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        diagram_order_in        IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        diagram_order_nin       IN BOOLEAN := TRUE,
        dt_creation_tstz_in     IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin    IN BOOLEAN := TRUE,
        id_patient_in           IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        create_user_in          IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        dt_last_update_tstz_in  IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            adw_last_update_in      => adw_last_update_in,
            adw_last_update_nin     => adw_last_update_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            diagram_order_in        => diagram_order_in,
            diagram_order_nin       => diagram_order_nin,
            dt_creation_tstz_in     => dt_creation_tstz_in,
            dt_creation_tstz_nin    => dt_creation_tstz_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            dt_last_update_tstz_in  => dt_last_update_tstz_in,
            dt_last_update_tstz_nin => dt_last_update_tstz_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_epis_diagram_in     IN epis_diagram.id_epis_diagram%TYPE,
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT NULL,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_diagram_in     => id_epis_diagram_in,
            flg_status_in          => flg_status_in,
            adw_last_update_in     => adw_last_update_in,
            id_episode_in          => id_episode_in,
            diagram_order_in       => diagram_order_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            id_patient_in          => id_patient_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            dt_last_update_tstz_in => dt_last_update_tstz_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_diagram_in     => id_epis_diagram_in,
                flg_status_in          => flg_status_in,
                adw_last_update_in     => adw_last_update_in,
                id_episode_in          => id_episode_in,
                diagram_order_in       => diagram_order_in,
                dt_creation_tstz_in    => dt_creation_tstz_in,
                id_patient_in          => id_patient_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                dt_last_update_tstz_in => dt_last_update_tstz_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_epis_diagram_in     IN epis_diagram.id_epis_diagram%TYPE,
        flg_status_in          IN epis_diagram.flg_status%TYPE DEFAULT NULL,
        adw_last_update_in     IN epis_diagram.adw_last_update%TYPE DEFAULT NULL,
        id_episode_in          IN epis_diagram.id_episode%TYPE DEFAULT NULL,
        diagram_order_in       IN epis_diagram.diagram_order%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_diagram.dt_creation_tstz%TYPE DEFAULT NULL,
        id_patient_in          IN epis_diagram.id_patient%TYPE DEFAULT NULL,
        create_user_in         IN epis_diagram.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_diagram.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_diagram.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_diagram.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_diagram.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_diagram.update_institution%TYPE DEFAULT NULL,
        dt_last_update_tstz_in IN epis_diagram.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_diagram_in,
                flg_status_in,
                adw_last_update_in,
                id_episode_in,
                diagram_order_in,
                dt_creation_tstz_in,
                id_patient_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                dt_last_update_tstz_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_diagram%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_diagram_in     => rec_in.id_epis_diagram,
            flg_status_in          => rec_in.flg_status,
            adw_last_update_in     => rec_in.adw_last_update,
            id_episode_in          => rec_in.id_episode,
            diagram_order_in       => rec_in.diagram_order,
            dt_creation_tstz_in    => rec_in.dt_creation_tstz,
            id_patient_in          => rec_in.id_patient,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            dt_last_update_tstz_in => rec_in.dt_last_update_tstz,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_diagram%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_diagram_in     => rec_in.id_epis_diagram,
            flg_status_in          => rec_in.flg_status,
            adw_last_update_in     => rec_in.adw_last_update,
            id_episode_in          => rec_in.id_episode,
            diagram_order_in       => rec_in.diagram_order,
            dt_creation_tstz_in    => rec_in.dt_creation_tstz,
            id_patient_in          => rec_in.id_patient,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            dt_last_update_tstz_in => rec_in.dt_last_update_tstz,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_diagram_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_diagram     id_epis_diagram_cc;
        l_flg_status          flg_status_cc;
        l_adw_last_update     adw_last_update_cc;
        l_id_episode          id_episode_cc;
        l_diagram_order       diagram_order_cc;
        l_dt_creation_tstz    dt_creation_tstz_cc;
        l_id_patient          id_patient_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
        l_dt_last_update_tstz dt_last_update_tstz_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_diagram(i) := col_in(i).id_epis_diagram;
            l_flg_status(i) := col_in(i).flg_status;
            l_adw_last_update(i) := col_in(i).adw_last_update;
            l_id_episode(i) := col_in(i).id_episode;
            l_diagram_order(i) := col_in(i).diagram_order;
            l_dt_creation_tstz(i) := col_in(i).dt_creation_tstz;
            l_id_patient(i) := col_in(i).id_patient;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_dt_last_update_tstz(i) := col_in(i).dt_last_update_tstz;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_diagram
                   SET flg_status          = nvl(l_flg_status(i), flg_status),
                       adw_last_update     = nvl(l_adw_last_update(i), adw_last_update),
                       id_episode          = nvl(l_id_episode(i), id_episode),
                       diagram_order       = nvl(l_diagram_order(i), diagram_order),
                       dt_creation_tstz    = nvl(l_dt_creation_tstz(i), dt_creation_tstz),
                       id_patient          = nvl(l_id_patient(i), id_patient),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution),
                       dt_last_update_tstz = nvl(l_dt_last_update_tstz(i), dt_last_update_tstz)
                 WHERE id_epis_diagram = l_id_epis_diagram(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_diagram
                   SET flg_status          = l_flg_status(i),
                       adw_last_update     = l_adw_last_update(i),
                       id_episode          = l_id_episode(i),
                       diagram_order       = l_diagram_order(i),
                       dt_creation_tstz    = l_dt_creation_tstz(i),
                       id_patient          = l_id_patient(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i),
                       dt_last_update_tstz = l_dt_last_update_tstz(i)
                 WHERE id_epis_diagram = l_id_epis_diagram(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_diagram_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE epis_diagram
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE epis_diagram
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE epis_diagram
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_diagram_in IN epis_diagram.id_epis_diagram%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diagram
         WHERE id_epis_diagram = id_epis_diagram_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_diagram_in IN epis_diagram.id_epis_diagram%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_epis_diagram_in => id_epis_diagram_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this EPD_EPIS_FK foreign key value
    PROCEDURE del_epd_epis_fk
    (
        id_episode_in   IN epis_diagram.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diagram
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epd_epis_fk;

    -- Delete all rows for this EPD_PAT_FK foreign key value
    PROCEDURE del_epd_pat_fk
    (
        id_patient_in   IN epis_diagram.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_diagram
         WHERE id_patient = id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epd_pat_fk;

    -- Delete all rows for this EPD_EPIS_FK foreign key value
    PROCEDURE del_epd_epis_fk
    (
        id_episode_in   IN epis_diagram.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epd_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_epd_epis_fk;

    -- Delete all rows for this EPD_PAT_FK foreign key value
    PROCEDURE del_epd_pat_fk
    (
        id_patient_in   IN epis_diagram.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epd_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_epd_pat_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM epis_diagram';
        ELSE
            RETURN 'DELETE FROM epis_diagram WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(epis_diagram_inout IN OUT epis_diagram%ROWTYPE) IS
    BEGIN
        epis_diagram_inout.id_epis_diagram     := NULL;
        epis_diagram_inout.flg_status          := NULL;
        epis_diagram_inout.adw_last_update     := NULL;
        epis_diagram_inout.id_episode          := NULL;
        epis_diagram_inout.diagram_order       := NULL;
        epis_diagram_inout.dt_creation_tstz    := NULL;
        epis_diagram_inout.id_patient          := NULL;
        epis_diagram_inout.create_user         := NULL;
        epis_diagram_inout.create_time         := NULL;
        epis_diagram_inout.create_institution  := NULL;
        epis_diagram_inout.update_user         := NULL;
        epis_diagram_inout.update_time         := NULL;
        epis_diagram_inout.update_institution  := NULL;
        epis_diagram_inout.dt_last_update_tstz := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN epis_diagram%ROWTYPE IS
        l_epis_diagram epis_diagram%ROWTYPE;
    BEGIN
        RETURN l_epis_diagram;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_diagram_tc IS
        data epis_diagram_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM epis_diagram
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_diagram_tc IS
        data epis_diagram_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_diagram;
/
