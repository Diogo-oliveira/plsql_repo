/*-- Last Change Revision: $Rev: 2028323 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:06 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_pat_soc_attributes
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 21, 2008 18:25:58
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_pat_soc_attributes_in IN pat_soc_attributes.id_pat_soc_attributes%TYPE,
        id_patient_in            IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        marital_status_in        IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        address_in               IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        location_in              IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        district_in              IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        zip_code_in              IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in      IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in           IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in        IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in     IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_address_in    IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_scholarship_in        IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_religion_in           IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        mother_name_in           IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        father_name_in           IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        id_isencao_in            IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_institution_in        IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        dt_isencao_in            IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        ine_location_in          IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        id_language_in           IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        notes_in                 IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        contact_number_3_in      IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_4_in      IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        birth_place_in           IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        pension_in               IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        net_wage_in              IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        unemployment_subsidy_in  IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        id_geo_state_in          IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in           IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        id_currency_pension_in   IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_net_wage_in  IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_unemp_sub_in IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        flg_migrator_in          IN pat_soc_attributes.flg_migrator%TYPE DEFAULT 'N',
        desc_geo_state_in        IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        id_episode_in            IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pat_soc_attributes
            (id_pat_soc_attributes,
             id_patient,
             marital_status,
             address,
             location,
             district,
             zip_code,
             num_main_contact,
             num_contact,
             flg_job_status,
             id_country_nation,
             id_country_address,
             id_scholarship,
             id_religion,
             mother_name,
             father_name,
             id_isencao,
             id_institution,
             dt_isencao,
             ine_location,
             id_language,
             notes,
             contact_number_3,
             contact_number_4,
             birth_place,
             pension,
             net_wage,
             unemployment_subsidy,
             id_geo_state,
             num_contrib,
             id_currency_pension,
             id_currency_net_wage,
             id_currency_unemp_sub,
             flg_migrator,
             desc_geo_state,
             id_episode)
        VALUES
            (id_pat_soc_attributes_in,
             id_patient_in,
             marital_status_in,
             address_in,
             location_in,
             district_in,
             zip_code_in,
             num_main_contact_in,
             num_contact_in,
             flg_job_status_in,
             id_country_nation_in,
             id_country_address_in,
             id_scholarship_in,
             id_religion_in,
             mother_name_in,
             father_name_in,
             id_isencao_in,
             id_institution_in,
             dt_isencao_in,
             ine_location_in,
             id_language_in,
             notes_in,
             contact_number_3_in,
             contact_number_4_in,
             birth_place_in,
             pension_in,
             net_wage_in,
             unemployment_subsidy_in,
             id_geo_state_in,
             num_contrib_in,
             id_currency_pension_in,
             id_currency_net_wage_in,
             id_currency_unemp_sub_in,
             flg_migrator_in,
             desc_geo_state_in,
             id_episode_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'PTSAT_PAT_INST_I'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "PTSAT_PAT_INST_I"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'PAT_SOC_ATTRIBUTES',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_SOC_ATTRIBUTES');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    IF l_name = 'PSE_CUY_FK1'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CURRENCY_PENSION',
                                                        value_in           => id_currency_pension_in);
                    END IF;
                    IF l_name = 'PSE_CUY_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CURRENCY_NET_WAGE',
                                                        value_in           => id_currency_net_wage_in);
                    END IF;
                    IF l_name = 'PSE_CUY_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CURRENCY_UNEMP_SUB',
                                                        value_in           => id_currency_unemp_sub_in);
                    END IF;
                    IF l_name = 'PTSAT_CTR_ADDRESS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COUNTRY_ADDRESS',
                                                        value_in           => id_country_address_in);
                    END IF;
                    IF l_name = 'PTSAT_CTR_NATION_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COUNTRY_NATION',
                                                        value_in           => id_country_nation_in);
                    END IF;
                    IF l_name = 'PTSAT_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PTSAT_GSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_GEO_STATE',
                                                        value_in           => id_geo_state_in);
                    END IF;
                    IF l_name = 'PTSAT_I_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ISENCAO',
                                                        value_in           => id_isencao_in);
                    END IF;
                    IF l_name = 'PTSAT_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PTSAT_LANG_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LANGUAGE',
                                                        value_in           => id_language_in);
                    END IF;
                    IF l_name = 'PTSAT_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PTSAT_REL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RELIGION',
                                                        value_in           => id_religion_in);
                    END IF;
                    IF l_name = 'PTSAT_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHOLARSHIP',
                                                        value_in           => id_scholarship_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_pat_soc_attributes_in IN pat_soc_attributes.id_pat_soc_attributes%TYPE,
        id_patient_in            IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        marital_status_in        IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        address_in               IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        location_in              IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        district_in              IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        zip_code_in              IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in      IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in           IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in        IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in     IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_address_in    IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_scholarship_in        IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_religion_in           IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        mother_name_in           IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        father_name_in           IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        id_isencao_in            IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_institution_in        IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        dt_isencao_in            IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        ine_location_in          IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        id_language_in           IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        notes_in                 IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        contact_number_3_in      IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_4_in      IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        birth_place_in           IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        pension_in               IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        net_wage_in              IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        unemployment_subsidy_in  IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        id_geo_state_in          IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in           IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        id_currency_pension_in   IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_net_wage_in  IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_unemp_sub_in IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        flg_migrator_in          IN pat_soc_attributes.flg_migrator%TYPE DEFAULT 'N',
        desc_geo_state_in        IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        id_episode_in            IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_pat_soc_attributes_in => id_pat_soc_attributes_in,
            id_patient_in            => id_patient_in,
            marital_status_in        => marital_status_in,
            address_in               => address_in,
            location_in              => location_in,
            district_in              => district_in,
            zip_code_in              => zip_code_in,
            num_main_contact_in      => num_main_contact_in,
            num_contact_in           => num_contact_in,
            flg_job_status_in        => flg_job_status_in,
            id_country_nation_in     => id_country_nation_in,
            id_country_address_in    => id_country_address_in,
            id_scholarship_in        => id_scholarship_in,
            id_religion_in           => id_religion_in,
            mother_name_in           => mother_name_in,
            father_name_in           => father_name_in,
            id_isencao_in            => id_isencao_in,
            id_institution_in        => id_institution_in,
            dt_isencao_in            => dt_isencao_in,
            ine_location_in          => ine_location_in,
            id_language_in           => id_language_in,
            notes_in                 => notes_in,
            contact_number_3_in      => contact_number_3_in,
            contact_number_4_in      => contact_number_4_in,
            birth_place_in           => birth_place_in,
            pension_in               => pension_in,
            net_wage_in              => net_wage_in,
            unemployment_subsidy_in  => unemployment_subsidy_in,
            id_geo_state_in          => id_geo_state_in,
            num_contrib_in           => num_contrib_in,
            id_currency_pension_in   => id_currency_pension_in,
            id_currency_net_wage_in  => id_currency_net_wage_in,
            id_currency_unemp_sub_in => id_currency_unemp_sub_in,
            flg_migrator_in          => flg_migrator_in,
            desc_geo_state_in        => desc_geo_state_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_soc_attributes%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pat_soc_attributes%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_pat_soc_attributes := next_key(sequence_in);
        END IF;
        ins(id_pat_soc_attributes_in => l_rec.id_pat_soc_attributes,
            id_patient_in            => l_rec.id_patient,
            marital_status_in        => l_rec.marital_status,
            address_in               => l_rec.address,
            location_in              => l_rec.location,
            district_in              => l_rec.district,
            zip_code_in              => l_rec.zip_code,
            num_main_contact_in      => l_rec.num_main_contact,
            num_contact_in           => l_rec.num_contact,
            flg_job_status_in        => l_rec.flg_job_status,
            id_country_nation_in     => l_rec.id_country_nation,
            id_country_address_in    => l_rec.id_country_address,
            id_scholarship_in        => l_rec.id_scholarship,
            id_religion_in           => l_rec.id_religion,
            mother_name_in           => l_rec.mother_name,
            father_name_in           => l_rec.father_name,
            id_isencao_in            => l_rec.id_isencao,
            id_institution_in        => l_rec.id_institution,
            dt_isencao_in            => l_rec.dt_isencao,
            ine_location_in          => l_rec.ine_location,
            id_language_in           => l_rec.id_language,
            notes_in                 => l_rec.notes,
            contact_number_3_in      => l_rec.contact_number_3,
            contact_number_4_in      => l_rec.contact_number_4,
            birth_place_in           => l_rec.birth_place,
            pension_in               => l_rec.pension,
            net_wage_in              => l_rec.net_wage,
            unemployment_subsidy_in  => l_rec.unemployment_subsidy,
            id_geo_state_in          => l_rec.id_geo_state,
            num_contrib_in           => l_rec.num_contrib,
            id_currency_pension_in   => l_rec.id_currency_pension,
            id_currency_net_wage_in  => l_rec.id_currency_net_wage,
            id_currency_unemp_sub_in => l_rec.id_currency_unemp_sub,
            flg_migrator_in          => l_rec.flg_migrator,
            desc_geo_state_in        => l_rec.desc_geo_state,
            id_episode_in            => l_rec.id_episode,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_soc_attributes%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN pat_soc_attributes.id_pat_soc_attributes%TYPE
    
     IS
        retval pat_soc_attributes.id_pat_soc_attributes%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_pat_soc_attributes.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PAT_SOC_ATTRIBUTES'));
    END next_key;

    PROCEDURE ins
    (
        id_patient_in             IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        marital_status_in         IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        address_in                IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        location_in               IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        district_in               IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        zip_code_in               IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in       IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in            IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in         IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in      IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_address_in     IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_scholarship_in         IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_religion_in            IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        mother_name_in            IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        father_name_in            IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        id_isencao_in             IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_institution_in         IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        dt_isencao_in             IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        ine_location_in           IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        id_language_in            IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        notes_in                  IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        contact_number_3_in       IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_4_in       IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        birth_place_in            IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        pension_in                IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        net_wage_in               IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        unemployment_subsidy_in   IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        id_geo_state_in           IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in            IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        id_currency_pension_in    IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_net_wage_in   IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_unemp_sub_in  IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        flg_migrator_in           IN pat_soc_attributes.flg_migrator%TYPE DEFAULT 'N',
        desc_geo_state_in         IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        id_episode_in             IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        id_pat_soc_attributes_out IN OUT pat_soc_attributes.id_pat_soc_attributes%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
        l_pky pat_soc_attributes.id_pat_soc_attributes%TYPE := next_key;
    BEGIN
        ins(id_pat_soc_attributes_in => l_pky,
            id_patient_in            => id_patient_in,
            marital_status_in        => marital_status_in,
            address_in               => address_in,
            location_in              => location_in,
            district_in              => district_in,
            zip_code_in              => zip_code_in,
            num_main_contact_in      => num_main_contact_in,
            num_contact_in           => num_contact_in,
            flg_job_status_in        => flg_job_status_in,
            id_country_nation_in     => id_country_nation_in,
            id_country_address_in    => id_country_address_in,
            id_scholarship_in        => id_scholarship_in,
            id_religion_in           => id_religion_in,
            mother_name_in           => mother_name_in,
            father_name_in           => father_name_in,
            id_isencao_in            => id_isencao_in,
            id_institution_in        => id_institution_in,
            dt_isencao_in            => dt_isencao_in,
            ine_location_in          => ine_location_in,
            id_language_in           => id_language_in,
            notes_in                 => notes_in,
            contact_number_3_in      => contact_number_3_in,
            contact_number_4_in      => contact_number_4_in,
            birth_place_in           => birth_place_in,
            pension_in               => pension_in,
            net_wage_in              => net_wage_in,
            unemployment_subsidy_in  => unemployment_subsidy_in,
            id_geo_state_in          => id_geo_state_in,
            num_contrib_in           => num_contrib_in,
            id_currency_pension_in   => id_currency_pension_in,
            id_currency_net_wage_in  => id_currency_net_wage_in,
            id_currency_unemp_sub_in => id_currency_unemp_sub_in,
            flg_migrator_in          => flg_migrator_in,
            desc_geo_state_in        => desc_geo_state_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        id_pat_soc_attributes_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_patient_in             IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        marital_status_in         IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        address_in                IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        location_in               IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        district_in               IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        zip_code_in               IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in       IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in            IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in         IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in      IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_address_in     IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_scholarship_in         IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_religion_in            IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        mother_name_in            IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        father_name_in            IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        id_isencao_in             IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_institution_in         IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        dt_isencao_in             IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        ine_location_in           IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        id_language_in            IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        notes_in                  IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        contact_number_3_in       IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_4_in       IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        birth_place_in            IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        pension_in                IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        net_wage_in               IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        unemployment_subsidy_in   IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        id_geo_state_in           IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in            IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        id_currency_pension_in    IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_net_wage_in   IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_unemp_sub_in  IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        flg_migrator_in           IN pat_soc_attributes.flg_migrator%TYPE DEFAULT 'N',
        desc_geo_state_in         IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        id_episode_in             IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        id_pat_soc_attributes_out IN OUT pat_soc_attributes.id_pat_soc_attributes%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_patient_in             => id_patient_in,
            marital_status_in         => marital_status_in,
            address_in                => address_in,
            location_in               => location_in,
            district_in               => district_in,
            zip_code_in               => zip_code_in,
            num_main_contact_in       => num_main_contact_in,
            num_contact_in            => num_contact_in,
            flg_job_status_in         => flg_job_status_in,
            id_country_nation_in      => id_country_nation_in,
            id_country_address_in     => id_country_address_in,
            id_scholarship_in         => id_scholarship_in,
            id_religion_in            => id_religion_in,
            mother_name_in            => mother_name_in,
            father_name_in            => father_name_in,
            id_isencao_in             => id_isencao_in,
            id_institution_in         => id_institution_in,
            dt_isencao_in             => dt_isencao_in,
            ine_location_in           => ine_location_in,
            id_language_in            => id_language_in,
            notes_in                  => notes_in,
            contact_number_3_in       => contact_number_3_in,
            contact_number_4_in       => contact_number_4_in,
            birth_place_in            => birth_place_in,
            pension_in                => pension_in,
            net_wage_in               => net_wage_in,
            unemployment_subsidy_in   => unemployment_subsidy_in,
            id_geo_state_in           => id_geo_state_in,
            num_contrib_in            => num_contrib_in,
            id_currency_pension_in    => id_currency_pension_in,
            id_currency_net_wage_in   => id_currency_net_wage_in,
            id_currency_unemp_sub_in  => id_currency_unemp_sub_in,
            flg_migrator_in           => flg_migrator_in,
            desc_geo_state_in         => desc_geo_state_in,
            id_episode_in             => id_episode_in,
            id_pat_soc_attributes_out => id_pat_soc_attributes_out,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    FUNCTION ins
    (
        id_patient_in            IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        marital_status_in        IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        address_in               IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        location_in              IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        district_in              IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        zip_code_in              IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in      IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in           IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in        IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in     IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_address_in    IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_scholarship_in        IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_religion_in           IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        mother_name_in           IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        father_name_in           IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        id_isencao_in            IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_institution_in        IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        dt_isencao_in            IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        ine_location_in          IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        id_language_in           IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        notes_in                 IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        contact_number_3_in      IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_4_in      IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        birth_place_in           IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        pension_in               IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        net_wage_in              IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        unemployment_subsidy_in  IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        id_geo_state_in          IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in           IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        id_currency_pension_in   IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_net_wage_in  IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_unemp_sub_in IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        flg_migrator_in          IN pat_soc_attributes.flg_migrator%TYPE DEFAULT 'N',
        desc_geo_state_in        IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        id_episode_in            IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) RETURN pat_soc_attributes.id_pat_soc_attributes%TYPE IS
        l_pky pat_soc_attributes.id_pat_soc_attributes%TYPE := next_key;
    BEGIN
        ins(id_pat_soc_attributes_in => l_pky,
            id_patient_in            => id_patient_in,
            marital_status_in        => marital_status_in,
            address_in               => address_in,
            location_in              => location_in,
            district_in              => district_in,
            zip_code_in              => zip_code_in,
            num_main_contact_in      => num_main_contact_in,
            num_contact_in           => num_contact_in,
            flg_job_status_in        => flg_job_status_in,
            id_country_nation_in     => id_country_nation_in,
            id_country_address_in    => id_country_address_in,
            id_scholarship_in        => id_scholarship_in,
            id_religion_in           => id_religion_in,
            mother_name_in           => mother_name_in,
            father_name_in           => father_name_in,
            id_isencao_in            => id_isencao_in,
            id_institution_in        => id_institution_in,
            dt_isencao_in            => dt_isencao_in,
            ine_location_in          => ine_location_in,
            id_language_in           => id_language_in,
            notes_in                 => notes_in,
            contact_number_3_in      => contact_number_3_in,
            contact_number_4_in      => contact_number_4_in,
            birth_place_in           => birth_place_in,
            pension_in               => pension_in,
            net_wage_in              => net_wage_in,
            unemployment_subsidy_in  => unemployment_subsidy_in,
            id_geo_state_in          => id_geo_state_in,
            num_contrib_in           => num_contrib_in,
            id_currency_pension_in   => id_currency_pension_in,
            id_currency_net_wage_in  => id_currency_net_wage_in,
            id_currency_unemp_sub_in => id_currency_unemp_sub_in,
            flg_migrator_in          => flg_migrator_in,
            desc_geo_state_in        => desc_geo_state_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_patient_in            IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        marital_status_in        IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        address_in               IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        location_in              IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        district_in              IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        zip_code_in              IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in      IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in           IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in        IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in     IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_address_in    IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_scholarship_in        IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_religion_in           IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        mother_name_in           IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        father_name_in           IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        id_isencao_in            IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_institution_in        IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        dt_isencao_in            IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        ine_location_in          IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        id_language_in           IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        notes_in                 IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        contact_number_3_in      IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_4_in      IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        birth_place_in           IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        pension_in               IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        net_wage_in              IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        unemployment_subsidy_in  IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        id_geo_state_in          IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in           IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        id_currency_pension_in   IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_net_wage_in  IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_unemp_sub_in IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        flg_migrator_in          IN pat_soc_attributes.flg_migrator%TYPE DEFAULT 'N',
        desc_geo_state_in        IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        id_episode_in            IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) RETURN pat_soc_attributes.id_pat_soc_attributes%TYPE IS
        l_pky    pat_soc_attributes.id_pat_soc_attributes%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_soc_attributes_in => l_pky,
            id_patient_in            => id_patient_in,
            marital_status_in        => marital_status_in,
            address_in               => address_in,
            location_in              => location_in,
            district_in              => district_in,
            zip_code_in              => zip_code_in,
            num_main_contact_in      => num_main_contact_in,
            num_contact_in           => num_contact_in,
            flg_job_status_in        => flg_job_status_in,
            id_country_nation_in     => id_country_nation_in,
            id_country_address_in    => id_country_address_in,
            id_scholarship_in        => id_scholarship_in,
            id_religion_in           => id_religion_in,
            mother_name_in           => mother_name_in,
            father_name_in           => father_name_in,
            id_isencao_in            => id_isencao_in,
            id_institution_in        => id_institution_in,
            dt_isencao_in            => dt_isencao_in,
            ine_location_in          => ine_location_in,
            id_language_in           => id_language_in,
            notes_in                 => notes_in,
            contact_number_3_in      => contact_number_3_in,
            contact_number_4_in      => contact_number_4_in,
            birth_place_in           => birth_place_in,
            pension_in               => pension_in,
            net_wage_in              => net_wage_in,
            unemployment_subsidy_in  => unemployment_subsidy_in,
            id_geo_state_in          => id_geo_state_in,
            num_contrib_in           => num_contrib_in,
            id_currency_pension_in   => id_currency_pension_in,
            id_currency_net_wage_in  => id_currency_net_wage_in,
            id_currency_unemp_sub_in => id_currency_unemp_sub_in,
            flg_migrator_in          => flg_migrator_in,
            desc_geo_state_in        => desc_geo_state_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_patient_in            IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        marital_status_in        IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        address_in               IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        location_in              IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        district_in              IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        zip_code_in              IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in      IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in           IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in        IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in     IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_address_in    IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_scholarship_in        IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_religion_in           IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        mother_name_in           IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        father_name_in           IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        id_isencao_in            IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_institution_in        IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        dt_isencao_in            IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        ine_location_in          IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        id_language_in           IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        notes_in                 IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        contact_number_3_in      IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_4_in      IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        birth_place_in           IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        pension_in               IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        net_wage_in              IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        unemployment_subsidy_in  IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        id_geo_state_in          IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in           IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        id_currency_pension_in   IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_net_wage_in  IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_unemp_sub_in IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        flg_migrator_in          IN pat_soc_attributes.flg_migrator%TYPE DEFAULT 'N',
        desc_geo_state_in        IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        id_episode_in            IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
        l_pky pat_soc_attributes.id_pat_soc_attributes%TYPE := next_key;
    BEGIN
        ins(id_pat_soc_attributes_in => l_pky,
            id_patient_in            => id_patient_in,
            marital_status_in        => marital_status_in,
            address_in               => address_in,
            location_in              => location_in,
            district_in              => district_in,
            zip_code_in              => zip_code_in,
            num_main_contact_in      => num_main_contact_in,
            num_contact_in           => num_contact_in,
            flg_job_status_in        => flg_job_status_in,
            id_country_nation_in     => id_country_nation_in,
            id_country_address_in    => id_country_address_in,
            id_scholarship_in        => id_scholarship_in,
            id_religion_in           => id_religion_in,
            mother_name_in           => mother_name_in,
            father_name_in           => father_name_in,
            id_isencao_in            => id_isencao_in,
            id_institution_in        => id_institution_in,
            dt_isencao_in            => dt_isencao_in,
            ine_location_in          => ine_location_in,
            id_language_in           => id_language_in,
            notes_in                 => notes_in,
            contact_number_3_in      => contact_number_3_in,
            contact_number_4_in      => contact_number_4_in,
            birth_place_in           => birth_place_in,
            pension_in               => pension_in,
            net_wage_in              => net_wage_in,
            unemployment_subsidy_in  => unemployment_subsidy_in,
            id_geo_state_in          => id_geo_state_in,
            num_contrib_in           => num_contrib_in,
            id_currency_pension_in   => id_currency_pension_in,
            id_currency_net_wage_in  => id_currency_net_wage_in,
            id_currency_unemp_sub_in => id_currency_unemp_sub_in,
            flg_migrator_in          => flg_migrator_in,
            desc_geo_state_in        => desc_geo_state_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_patient_in            IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        marital_status_in        IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        address_in               IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        location_in              IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        district_in              IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        zip_code_in              IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in      IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in           IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in        IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in     IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_address_in    IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_scholarship_in        IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_religion_in           IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        mother_name_in           IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        father_name_in           IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        id_isencao_in            IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_institution_in        IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        dt_isencao_in            IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        ine_location_in          IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        id_language_in           IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        notes_in                 IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        contact_number_3_in      IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_4_in      IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        birth_place_in           IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        pension_in               IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        net_wage_in              IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        unemployment_subsidy_in  IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        id_geo_state_in          IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in           IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        id_currency_pension_in   IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_net_wage_in  IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_unemp_sub_in IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        flg_migrator_in          IN pat_soc_attributes.flg_migrator%TYPE DEFAULT 'N',
        desc_geo_state_in        IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        id_episode_in            IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        l_pky    pat_soc_attributes.id_pat_soc_attributes%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_soc_attributes_in => l_pky,
            id_patient_in            => id_patient_in,
            marital_status_in        => marital_status_in,
            address_in               => address_in,
            location_in              => location_in,
            district_in              => district_in,
            zip_code_in              => zip_code_in,
            num_main_contact_in      => num_main_contact_in,
            num_contact_in           => num_contact_in,
            flg_job_status_in        => flg_job_status_in,
            id_country_nation_in     => id_country_nation_in,
            id_country_address_in    => id_country_address_in,
            id_scholarship_in        => id_scholarship_in,
            id_religion_in           => id_religion_in,
            mother_name_in           => mother_name_in,
            father_name_in           => father_name_in,
            id_isencao_in            => id_isencao_in,
            id_institution_in        => id_institution_in,
            dt_isencao_in            => dt_isencao_in,
            ine_location_in          => ine_location_in,
            id_language_in           => id_language_in,
            notes_in                 => notes_in,
            contact_number_3_in      => contact_number_3_in,
            contact_number_4_in      => contact_number_4_in,
            birth_place_in           => birth_place_in,
            pension_in               => pension_in,
            net_wage_in              => net_wage_in,
            unemployment_subsidy_in  => unemployment_subsidy_in,
            id_geo_state_in          => id_geo_state_in,
            num_contrib_in           => num_contrib_in,
            id_currency_pension_in   => id_currency_pension_in,
            id_currency_net_wage_in  => id_currency_net_wage_in,
            id_currency_unemp_sub_in => id_currency_unemp_sub_in,
            flg_migrator_in          => flg_migrator_in,
            desc_geo_state_in        => desc_geo_state_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_soc_attributes_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO pat_soc_attributes
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_SOC_ATTRIBUTES _' || indx,
                                                        value_in           => rows_in(indx).id_pat_soc_attributes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MARITAL_STATUS _' || indx,
                                                        value_in           => rows_in(indx).marital_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ADDRESS _' || indx,
                                                        value_in           => rows_in(indx).address,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LOCATION _' || indx,
                                                        value_in           => rows_in(indx).location,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DISTRICT _' || indx,
                                                        value_in           => rows_in(indx).district,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ZIP_CODE _' || indx,
                                                        value_in           => rows_in(indx).zip_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_MAIN_CONTACT _' || indx,
                                                        value_in           => rows_in(indx).num_main_contact,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_CONTACT _' || indx,
                                                        value_in           => rows_in(indx).num_contact,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_JOB_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_job_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COUNTRY_NATION _' || indx,
                                                        value_in           => rows_in(indx).id_country_nation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COUNTRY_ADDRESS _' || indx,
                                                        value_in           => rows_in(indx).id_country_address,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHOLARSHIP _' || indx,
                                                        value_in           => rows_in(indx).id_scholarship,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RELIGION _' || indx,
                                                        value_in           => rows_in(indx).id_religion,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MOTHER_NAME _' || indx,
                                                        value_in           => rows_in(indx).mother_name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FATHER_NAME _' || indx,
                                                        value_in           => rows_in(indx).father_name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ISENCAO _' || indx,
                                                        value_in           => rows_in(indx).id_isencao,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ISENCAO _' || indx,
                                                        value_in           => rows_in(indx).dt_isencao,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'INE_LOCATION _' || indx,
                                                        value_in           => rows_in(indx).ine_location,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_LANGUAGE _' || indx,
                                                        value_in           => rows_in(indx).id_language,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONTACT_NUMBER_3 _' || indx,
                                                        value_in           => rows_in(indx).contact_number_3,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONTACT_NUMBER_4 _' || indx,
                                                        value_in           => rows_in(indx).contact_number_4,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BIRTH_PLACE _' || indx,
                                                        value_in           => rows_in(indx).birth_place,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PENSION _' || indx,
                                                        value_in           => rows_in(indx).pension,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NET_WAGE _' || indx,
                                                        value_in           => rows_in(indx).net_wage,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UNEMPLOYMENT_SUBSIDY _' || indx,
                                                        value_in           => rows_in(indx).unemployment_subsidy,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_GEO_STATE _' || indx,
                                                        value_in           => rows_in(indx).id_geo_state,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_CONTRIB _' || indx,
                                                        value_in           => rows_in(indx).num_contrib,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CURRENCY_PENSION _' || indx,
                                                        value_in           => rows_in(indx).id_currency_pension,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CURRENCY_NET_WAGE _' || indx,
                                                        value_in           => rows_in(indx).id_currency_net_wage,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CURRENCY_UNEMP_SUB _' || indx,
                                                        value_in           => rows_in(indx).id_currency_unemp_sub,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_MIGRATOR _' || indx,
                                                        value_in           => rows_in(indx).flg_migrator,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DESC_GEO_STATE _' || indx,
                                                        value_in           => rows_in(indx).desc_geo_state,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PAT_SOC_ATTRIBUTES',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_soc_attributes_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_pat_soc_attributes_in  IN pat_soc_attributes.id_pat_soc_attributes%TYPE,
        id_patient_in             IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        marital_status_in         IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        marital_status_nin        IN BOOLEAN := TRUE,
        address_in                IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        address_nin               IN BOOLEAN := TRUE,
        location_in               IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        location_nin              IN BOOLEAN := TRUE,
        district_in               IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        district_nin              IN BOOLEAN := TRUE,
        zip_code_in               IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        zip_code_nin              IN BOOLEAN := TRUE,
        num_main_contact_in       IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_main_contact_nin      IN BOOLEAN := TRUE,
        num_contact_in            IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        num_contact_nin           IN BOOLEAN := TRUE,
        flg_job_status_in         IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        flg_job_status_nin        IN BOOLEAN := TRUE,
        id_country_nation_in      IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_nation_nin     IN BOOLEAN := TRUE,
        id_country_address_in     IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_country_address_nin    IN BOOLEAN := TRUE,
        id_scholarship_in         IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_scholarship_nin        IN BOOLEAN := TRUE,
        id_religion_in            IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        id_religion_nin           IN BOOLEAN := TRUE,
        mother_name_in            IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        mother_name_nin           IN BOOLEAN := TRUE,
        father_name_in            IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        father_name_nin           IN BOOLEAN := TRUE,
        id_isencao_in             IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_isencao_nin            IN BOOLEAN := TRUE,
        id_institution_in         IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        dt_isencao_in             IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        dt_isencao_nin            IN BOOLEAN := TRUE,
        ine_location_in           IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        ine_location_nin          IN BOOLEAN := TRUE,
        id_language_in            IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        id_language_nin           IN BOOLEAN := TRUE,
        notes_in                  IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        contact_number_3_in       IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_3_nin      IN BOOLEAN := TRUE,
        contact_number_4_in       IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        contact_number_4_nin      IN BOOLEAN := TRUE,
        birth_place_in            IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        birth_place_nin           IN BOOLEAN := TRUE,
        pension_in                IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        pension_nin               IN BOOLEAN := TRUE,
        net_wage_in               IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        net_wage_nin              IN BOOLEAN := TRUE,
        unemployment_subsidy_in   IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        unemployment_subsidy_nin  IN BOOLEAN := TRUE,
        id_geo_state_in           IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        id_geo_state_nin          IN BOOLEAN := TRUE,
        num_contrib_in            IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        num_contrib_nin           IN BOOLEAN := TRUE,
        id_currency_pension_in    IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_pension_nin   IN BOOLEAN := TRUE,
        id_currency_net_wage_in   IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_net_wage_nin  IN BOOLEAN := TRUE,
        id_currency_unemp_sub_in  IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        id_currency_unemp_sub_nin IN BOOLEAN := TRUE,
        flg_migrator_in           IN pat_soc_attributes.flg_migrator%TYPE DEFAULT NULL,
        flg_migrator_nin          IN BOOLEAN := TRUE,
        desc_geo_state_in         IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        desc_geo_state_nin        IN BOOLEAN := TRUE,
        id_episode_in             IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out                table_varchar;
        l_id_patient_n            NUMBER(1);
        l_marital_status_n        NUMBER(1);
        l_address_n               NUMBER(1);
        l_location_n              NUMBER(1);
        l_district_n              NUMBER(1);
        l_zip_code_n              NUMBER(1);
        l_num_main_contact_n      NUMBER(1);
        l_num_contact_n           NUMBER(1);
        l_flg_job_status_n        NUMBER(1);
        l_id_country_nation_n     NUMBER(1);
        l_id_country_address_n    NUMBER(1);
        l_id_scholarship_n        NUMBER(1);
        l_id_religion_n           NUMBER(1);
        l_mother_name_n           NUMBER(1);
        l_father_name_n           NUMBER(1);
        l_id_isencao_n            NUMBER(1);
        l_id_institution_n        NUMBER(1);
        l_dt_isencao_n            NUMBER(1);
        l_ine_location_n          NUMBER(1);
        l_id_language_n           NUMBER(1);
        l_notes_n                 NUMBER(1);
        l_contact_number_3_n      NUMBER(1);
        l_contact_number_4_n      NUMBER(1);
        l_birth_place_n           NUMBER(1);
        l_pension_n               NUMBER(1);
        l_net_wage_n              NUMBER(1);
        l_unemployment_subsidy_n  NUMBER(1);
        l_id_geo_state_n          NUMBER(1);
        l_num_contrib_n           NUMBER(1);
        l_id_currency_pension_n   NUMBER(1);
        l_id_currency_net_wage_n  NUMBER(1);
        l_id_currency_unemp_sub_n NUMBER(1);
        l_flg_migrator_n          NUMBER(1);
        l_desc_geo_state_n        NUMBER(1);
        l_id_episode_n            NUMBER(1);
    BEGIN
    
        l_id_patient_n            := sys.diutil.bool_to_int(id_patient_nin);
        l_marital_status_n        := sys.diutil.bool_to_int(marital_status_nin);
        l_address_n               := sys.diutil.bool_to_int(address_nin);
        l_location_n              := sys.diutil.bool_to_int(location_nin);
        l_district_n              := sys.diutil.bool_to_int(district_nin);
        l_zip_code_n              := sys.diutil.bool_to_int(zip_code_nin);
        l_num_main_contact_n      := sys.diutil.bool_to_int(num_main_contact_nin);
        l_num_contact_n           := sys.diutil.bool_to_int(num_contact_nin);
        l_flg_job_status_n        := sys.diutil.bool_to_int(flg_job_status_nin);
        l_id_country_nation_n     := sys.diutil.bool_to_int(id_country_nation_nin);
        l_id_country_address_n    := sys.diutil.bool_to_int(id_country_address_nin);
        l_id_scholarship_n        := sys.diutil.bool_to_int(id_scholarship_nin);
        l_id_religion_n           := sys.diutil.bool_to_int(id_religion_nin);
        l_mother_name_n           := sys.diutil.bool_to_int(mother_name_nin);
        l_father_name_n           := sys.diutil.bool_to_int(father_name_nin);
        l_id_isencao_n            := sys.diutil.bool_to_int(id_isencao_nin);
        l_id_institution_n        := sys.diutil.bool_to_int(id_institution_nin);
        l_dt_isencao_n            := sys.diutil.bool_to_int(dt_isencao_nin);
        l_ine_location_n          := sys.diutil.bool_to_int(ine_location_nin);
        l_id_language_n           := sys.diutil.bool_to_int(id_language_nin);
        l_notes_n                 := sys.diutil.bool_to_int(notes_nin);
        l_contact_number_3_n      := sys.diutil.bool_to_int(contact_number_3_nin);
        l_contact_number_4_n      := sys.diutil.bool_to_int(contact_number_4_nin);
        l_birth_place_n           := sys.diutil.bool_to_int(birth_place_nin);
        l_pension_n               := sys.diutil.bool_to_int(pension_nin);
        l_net_wage_n              := sys.diutil.bool_to_int(net_wage_nin);
        l_unemployment_subsidy_n  := sys.diutil.bool_to_int(unemployment_subsidy_nin);
        l_id_geo_state_n          := sys.diutil.bool_to_int(id_geo_state_nin);
        l_num_contrib_n           := sys.diutil.bool_to_int(num_contrib_nin);
        l_id_currency_pension_n   := sys.diutil.bool_to_int(id_currency_pension_nin);
        l_id_currency_net_wage_n  := sys.diutil.bool_to_int(id_currency_net_wage_nin);
        l_id_currency_unemp_sub_n := sys.diutil.bool_to_int(id_currency_unemp_sub_nin);
        l_flg_migrator_n          := sys.diutil.bool_to_int(flg_migrator_nin);
        l_desc_geo_state_n        := sys.diutil.bool_to_int(desc_geo_state_nin);
        l_id_episode_n            := sys.diutil.bool_to_int(id_episode_nin);
    
        UPDATE pat_soc_attributes
           SET id_patient            = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               marital_status        = decode(l_marital_status_n,
                                              0,
                                              marital_status_in,
                                              nvl(marital_status_in, marital_status)),
               address               = decode(l_address_n, 0, address_in, nvl(address_in, address)),
               location              = decode(l_location_n, 0, location_in, nvl(location_in, location)),
               district              = decode(l_district_n, 0, district_in, nvl(district_in, district)),
               zip_code              = decode(l_zip_code_n, 0, zip_code_in, nvl(zip_code_in, zip_code)),
               num_main_contact      = decode(l_num_main_contact_n,
                                              0,
                                              num_main_contact_in,
                                              nvl(num_main_contact_in, num_main_contact)),
               num_contact           = decode(l_num_contact_n, 0, num_contact_in, nvl(num_contact_in, num_contact)),
               flg_job_status        = decode(l_flg_job_status_n,
                                              0,
                                              flg_job_status_in,
                                              nvl(flg_job_status_in, flg_job_status)),
               id_country_nation     = decode(l_id_country_nation_n,
                                              0,
                                              id_country_nation_in,
                                              nvl(id_country_nation_in, id_country_nation)),
               id_country_address    = decode(l_id_country_address_n,
                                              0,
                                              id_country_address_in,
                                              nvl(id_country_address_in, id_country_address)),
               id_scholarship        = decode(l_id_scholarship_n,
                                              0,
                                              id_scholarship_in,
                                              nvl(id_scholarship_in, id_scholarship)),
               id_religion           = decode(l_id_religion_n, 0, id_religion_in, nvl(id_religion_in, id_religion)),
               mother_name           = decode(l_mother_name_n, 0, mother_name_in, nvl(mother_name_in, mother_name)),
               father_name           = decode(l_father_name_n, 0, father_name_in, nvl(father_name_in, father_name)),
               id_isencao            = decode(l_id_isencao_n, 0, id_isencao_in, nvl(id_isencao_in, id_isencao)),
               id_institution        = decode(l_id_institution_n,
                                              0,
                                              id_institution_in,
                                              nvl(id_institution_in, id_institution)),
               dt_isencao            = decode(l_dt_isencao_n, 0, dt_isencao_in, nvl(dt_isencao_in, dt_isencao)),
               ine_location          = decode(l_ine_location_n, 0, ine_location_in, nvl(ine_location_in, ine_location)),
               id_language           = decode(l_id_language_n, 0, id_language_in, nvl(id_language_in, id_language)),
               notes                 = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               contact_number_3      = decode(l_contact_number_3_n,
                                              0,
                                              contact_number_3_in,
                                              nvl(contact_number_3_in, contact_number_3)),
               contact_number_4      = decode(l_contact_number_4_n,
                                              0,
                                              contact_number_4_in,
                                              nvl(contact_number_4_in, contact_number_4)),
               birth_place           = decode(l_birth_place_n, 0, birth_place_in, nvl(birth_place_in, birth_place)),
               pension               = decode(l_pension_n, 0, pension_in, nvl(pension_in, pension)),
               net_wage              = decode(l_net_wage_n, 0, net_wage_in, nvl(net_wage_in, net_wage)),
               unemployment_subsidy  = decode(l_unemployment_subsidy_n,
                                              0,
                                              unemployment_subsidy_in,
                                              nvl(unemployment_subsidy_in, unemployment_subsidy)),
               id_geo_state          = decode(l_id_geo_state_n, 0, id_geo_state_in, nvl(id_geo_state_in, id_geo_state)),
               num_contrib           = decode(l_num_contrib_n, 0, num_contrib_in, nvl(num_contrib_in, num_contrib)),
               id_currency_pension   = decode(l_id_currency_pension_n,
                                              0,
                                              id_currency_pension_in,
                                              nvl(id_currency_pension_in, id_currency_pension)),
               id_currency_net_wage  = decode(l_id_currency_net_wage_n,
                                              0,
                                              id_currency_net_wage_in,
                                              nvl(id_currency_net_wage_in, id_currency_net_wage)),
               id_currency_unemp_sub = decode(l_id_currency_unemp_sub_n,
                                              0,
                                              id_currency_unemp_sub_in,
                                              nvl(id_currency_unemp_sub_in, id_currency_unemp_sub)),
               flg_migrator          = decode(l_flg_migrator_n, 0, flg_migrator_in, nvl(flg_migrator_in, flg_migrator)),
               desc_geo_state        = decode(l_desc_geo_state_n,
                                              0,
                                              desc_geo_state_in,
                                              nvl(desc_geo_state_in, desc_geo_state)),
               id_episode            = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode))
         WHERE id_pat_soc_attributes = id_pat_soc_attributes_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'PTSAT_PAT_INST_I'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "PTSAT_PAT_INST_I"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'PAT_SOC_ATTRIBUTES',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_SOC_ATTRIBUTES');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    IF l_name = 'PSE_CUY_FK1'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CURRENCY_PENSION',
                                                        value_in           => id_currency_pension_in);
                    END IF;
                    IF l_name = 'PSE_CUY_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CURRENCY_NET_WAGE',
                                                        value_in           => id_currency_net_wage_in);
                    END IF;
                    IF l_name = 'PSE_CUY_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CURRENCY_UNEMP_SUB',
                                                        value_in           => id_currency_unemp_sub_in);
                    END IF;
                    IF l_name = 'PTSAT_CTR_ADDRESS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COUNTRY_ADDRESS',
                                                        value_in           => id_country_address_in);
                    END IF;
                    IF l_name = 'PTSAT_CTR_NATION_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COUNTRY_NATION',
                                                        value_in           => id_country_nation_in);
                    END IF;
                    IF l_name = 'PTSAT_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PTSAT_GSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_GEO_STATE',
                                                        value_in           => id_geo_state_in);
                    END IF;
                    IF l_name = 'PTSAT_I_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ISENCAO',
                                                        value_in           => id_isencao_in);
                    END IF;
                    IF l_name = 'PTSAT_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PTSAT_LANG_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LANGUAGE',
                                                        value_in           => id_language_in);
                    END IF;
                    IF l_name = 'PTSAT_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PTSAT_REL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RELIGION',
                                                        value_in           => id_religion_in);
                    END IF;
                    IF l_name = 'PTSAT_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHOLARSHIP',
                                                        value_in           => id_scholarship_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pat_soc_attributes_in  IN pat_soc_attributes.id_pat_soc_attributes%TYPE,
        id_patient_in             IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        marital_status_in         IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        marital_status_nin        IN BOOLEAN := TRUE,
        address_in                IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        address_nin               IN BOOLEAN := TRUE,
        location_in               IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        location_nin              IN BOOLEAN := TRUE,
        district_in               IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        district_nin              IN BOOLEAN := TRUE,
        zip_code_in               IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        zip_code_nin              IN BOOLEAN := TRUE,
        num_main_contact_in       IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_main_contact_nin      IN BOOLEAN := TRUE,
        num_contact_in            IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        num_contact_nin           IN BOOLEAN := TRUE,
        flg_job_status_in         IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        flg_job_status_nin        IN BOOLEAN := TRUE,
        id_country_nation_in      IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_nation_nin     IN BOOLEAN := TRUE,
        id_country_address_in     IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_country_address_nin    IN BOOLEAN := TRUE,
        id_scholarship_in         IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_scholarship_nin        IN BOOLEAN := TRUE,
        id_religion_in            IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        id_religion_nin           IN BOOLEAN := TRUE,
        mother_name_in            IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        mother_name_nin           IN BOOLEAN := TRUE,
        father_name_in            IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        father_name_nin           IN BOOLEAN := TRUE,
        id_isencao_in             IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_isencao_nin            IN BOOLEAN := TRUE,
        id_institution_in         IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        dt_isencao_in             IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        dt_isencao_nin            IN BOOLEAN := TRUE,
        ine_location_in           IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        ine_location_nin          IN BOOLEAN := TRUE,
        id_language_in            IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        id_language_nin           IN BOOLEAN := TRUE,
        notes_in                  IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        contact_number_3_in       IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_3_nin      IN BOOLEAN := TRUE,
        contact_number_4_in       IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        contact_number_4_nin      IN BOOLEAN := TRUE,
        birth_place_in            IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        birth_place_nin           IN BOOLEAN := TRUE,
        pension_in                IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        pension_nin               IN BOOLEAN := TRUE,
        net_wage_in               IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        net_wage_nin              IN BOOLEAN := TRUE,
        unemployment_subsidy_in   IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        unemployment_subsidy_nin  IN BOOLEAN := TRUE,
        id_geo_state_in           IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        id_geo_state_nin          IN BOOLEAN := TRUE,
        num_contrib_in            IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        num_contrib_nin           IN BOOLEAN := TRUE,
        id_currency_pension_in    IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_pension_nin   IN BOOLEAN := TRUE,
        id_currency_net_wage_in   IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_net_wage_nin  IN BOOLEAN := TRUE,
        id_currency_unemp_sub_in  IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        id_currency_unemp_sub_nin IN BOOLEAN := TRUE,
        flg_migrator_in           IN pat_soc_attributes.flg_migrator%TYPE DEFAULT NULL,
        flg_migrator_nin          IN BOOLEAN := TRUE,
        desc_geo_state_in         IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        desc_geo_state_nin        IN BOOLEAN := TRUE,
        id_episode_in             IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_soc_attributes_in  => id_pat_soc_attributes_in,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            marital_status_in         => marital_status_in,
            marital_status_nin        => marital_status_nin,
            address_in                => address_in,
            address_nin               => address_nin,
            location_in               => location_in,
            location_nin              => location_nin,
            district_in               => district_in,
            district_nin              => district_nin,
            zip_code_in               => zip_code_in,
            zip_code_nin              => zip_code_nin,
            num_main_contact_in       => num_main_contact_in,
            num_main_contact_nin      => num_main_contact_nin,
            num_contact_in            => num_contact_in,
            num_contact_nin           => num_contact_nin,
            flg_job_status_in         => flg_job_status_in,
            flg_job_status_nin        => flg_job_status_nin,
            id_country_nation_in      => id_country_nation_in,
            id_country_nation_nin     => id_country_nation_nin,
            id_country_address_in     => id_country_address_in,
            id_country_address_nin    => id_country_address_nin,
            id_scholarship_in         => id_scholarship_in,
            id_scholarship_nin        => id_scholarship_nin,
            id_religion_in            => id_religion_in,
            id_religion_nin           => id_religion_nin,
            mother_name_in            => mother_name_in,
            mother_name_nin           => mother_name_nin,
            father_name_in            => father_name_in,
            father_name_nin           => father_name_nin,
            id_isencao_in             => id_isencao_in,
            id_isencao_nin            => id_isencao_nin,
            id_institution_in         => id_institution_in,
            id_institution_nin        => id_institution_nin,
            dt_isencao_in             => dt_isencao_in,
            dt_isencao_nin            => dt_isencao_nin,
            ine_location_in           => ine_location_in,
            ine_location_nin          => ine_location_nin,
            id_language_in            => id_language_in,
            id_language_nin           => id_language_nin,
            notes_in                  => notes_in,
            notes_nin                 => notes_nin,
            contact_number_3_in       => contact_number_3_in,
            contact_number_3_nin      => contact_number_3_nin,
            contact_number_4_in       => contact_number_4_in,
            contact_number_4_nin      => contact_number_4_nin,
            birth_place_in            => birth_place_in,
            birth_place_nin           => birth_place_nin,
            pension_in                => pension_in,
            pension_nin               => pension_nin,
            net_wage_in               => net_wage_in,
            net_wage_nin              => net_wage_nin,
            unemployment_subsidy_in   => unemployment_subsidy_in,
            unemployment_subsidy_nin  => unemployment_subsidy_nin,
            id_geo_state_in           => id_geo_state_in,
            id_geo_state_nin          => id_geo_state_nin,
            num_contrib_in            => num_contrib_in,
            num_contrib_nin           => num_contrib_nin,
            id_currency_pension_in    => id_currency_pension_in,
            id_currency_pension_nin   => id_currency_pension_nin,
            id_currency_net_wage_in   => id_currency_net_wage_in,
            id_currency_net_wage_nin  => id_currency_net_wage_nin,
            id_currency_unemp_sub_in  => id_currency_unemp_sub_in,
            id_currency_unemp_sub_nin => id_currency_unemp_sub_nin,
            flg_migrator_in           => flg_migrator_in,
            flg_migrator_nin          => flg_migrator_nin,
            desc_geo_state_in         => desc_geo_state_in,
            desc_geo_state_nin        => desc_geo_state_nin,
            id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_patient_in             IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        marital_status_in         IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        marital_status_nin        IN BOOLEAN := TRUE,
        address_in                IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        address_nin               IN BOOLEAN := TRUE,
        location_in               IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        location_nin              IN BOOLEAN := TRUE,
        district_in               IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        district_nin              IN BOOLEAN := TRUE,
        zip_code_in               IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        zip_code_nin              IN BOOLEAN := TRUE,
        num_main_contact_in       IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_main_contact_nin      IN BOOLEAN := TRUE,
        num_contact_in            IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        num_contact_nin           IN BOOLEAN := TRUE,
        flg_job_status_in         IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        flg_job_status_nin        IN BOOLEAN := TRUE,
        id_country_nation_in      IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_nation_nin     IN BOOLEAN := TRUE,
        id_country_address_in     IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_country_address_nin    IN BOOLEAN := TRUE,
        id_scholarship_in         IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_scholarship_nin        IN BOOLEAN := TRUE,
        id_religion_in            IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        id_religion_nin           IN BOOLEAN := TRUE,
        mother_name_in            IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        mother_name_nin           IN BOOLEAN := TRUE,
        father_name_in            IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        father_name_nin           IN BOOLEAN := TRUE,
        id_isencao_in             IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_isencao_nin            IN BOOLEAN := TRUE,
        id_institution_in         IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        dt_isencao_in             IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        dt_isencao_nin            IN BOOLEAN := TRUE,
        ine_location_in           IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        ine_location_nin          IN BOOLEAN := TRUE,
        id_language_in            IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        id_language_nin           IN BOOLEAN := TRUE,
        notes_in                  IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        contact_number_3_in       IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_3_nin      IN BOOLEAN := TRUE,
        contact_number_4_in       IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        contact_number_4_nin      IN BOOLEAN := TRUE,
        birth_place_in            IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        birth_place_nin           IN BOOLEAN := TRUE,
        pension_in                IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        pension_nin               IN BOOLEAN := TRUE,
        net_wage_in               IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        net_wage_nin              IN BOOLEAN := TRUE,
        unemployment_subsidy_in   IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        unemployment_subsidy_nin  IN BOOLEAN := TRUE,
        id_geo_state_in           IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        id_geo_state_nin          IN BOOLEAN := TRUE,
        num_contrib_in            IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        num_contrib_nin           IN BOOLEAN := TRUE,
        id_currency_pension_in    IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_pension_nin   IN BOOLEAN := TRUE,
        id_currency_net_wage_in   IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_net_wage_nin  IN BOOLEAN := TRUE,
        id_currency_unemp_sub_in  IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        id_currency_unemp_sub_nin IN BOOLEAN := TRUE,
        flg_migrator_in           IN pat_soc_attributes.flg_migrator%TYPE DEFAULT NULL,
        flg_migrator_nin          IN BOOLEAN := TRUE,
        desc_geo_state_in         IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        desc_geo_state_nin        IN BOOLEAN := TRUE,
        id_episode_in             IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_patient_n            NUMBER(1);
        l_marital_status_n        NUMBER(1);
        l_address_n               NUMBER(1);
        l_location_n              NUMBER(1);
        l_district_n              NUMBER(1);
        l_zip_code_n              NUMBER(1);
        l_num_main_contact_n      NUMBER(1);
        l_num_contact_n           NUMBER(1);
        l_flg_job_status_n        NUMBER(1);
        l_id_country_nation_n     NUMBER(1);
        l_id_country_address_n    NUMBER(1);
        l_id_scholarship_n        NUMBER(1);
        l_id_religion_n           NUMBER(1);
        l_mother_name_n           NUMBER(1);
        l_father_name_n           NUMBER(1);
        l_id_isencao_n            NUMBER(1);
        l_id_institution_n        NUMBER(1);
        l_dt_isencao_n            NUMBER(1);
        l_ine_location_n          NUMBER(1);
        l_id_language_n           NUMBER(1);
        l_notes_n                 NUMBER(1);
        l_contact_number_3_n      NUMBER(1);
        l_contact_number_4_n      NUMBER(1);
        l_birth_place_n           NUMBER(1);
        l_pension_n               NUMBER(1);
        l_net_wage_n              NUMBER(1);
        l_unemployment_subsidy_n  NUMBER(1);
        l_id_geo_state_n          NUMBER(1);
        l_num_contrib_n           NUMBER(1);
        l_id_currency_pension_n   NUMBER(1);
        l_id_currency_net_wage_n  NUMBER(1);
        l_id_currency_unemp_sub_n NUMBER(1);
        l_flg_migrator_n          NUMBER(1);
        l_desc_geo_state_n        NUMBER(1);
        l_id_episode_n            NUMBER(1);
        id_pat_soc_attributes_in  pat_soc_attributes.id_pat_soc_attributes%TYPE;
    BEGIN
    
        l_id_patient_n            := sys.diutil.bool_to_int(id_patient_nin);
        l_marital_status_n        := sys.diutil.bool_to_int(marital_status_nin);
        l_address_n               := sys.diutil.bool_to_int(address_nin);
        l_location_n              := sys.diutil.bool_to_int(location_nin);
        l_district_n              := sys.diutil.bool_to_int(district_nin);
        l_zip_code_n              := sys.diutil.bool_to_int(zip_code_nin);
        l_num_main_contact_n      := sys.diutil.bool_to_int(num_main_contact_nin);
        l_num_contact_n           := sys.diutil.bool_to_int(num_contact_nin);
        l_flg_job_status_n        := sys.diutil.bool_to_int(flg_job_status_nin);
        l_id_country_nation_n     := sys.diutil.bool_to_int(id_country_nation_nin);
        l_id_country_address_n    := sys.diutil.bool_to_int(id_country_address_nin);
        l_id_scholarship_n        := sys.diutil.bool_to_int(id_scholarship_nin);
        l_id_religion_n           := sys.diutil.bool_to_int(id_religion_nin);
        l_mother_name_n           := sys.diutil.bool_to_int(mother_name_nin);
        l_father_name_n           := sys.diutil.bool_to_int(father_name_nin);
        l_id_isencao_n            := sys.diutil.bool_to_int(id_isencao_nin);
        l_id_institution_n        := sys.diutil.bool_to_int(id_institution_nin);
        l_dt_isencao_n            := sys.diutil.bool_to_int(dt_isencao_nin);
        l_ine_location_n          := sys.diutil.bool_to_int(ine_location_nin);
        l_id_language_n           := sys.diutil.bool_to_int(id_language_nin);
        l_notes_n                 := sys.diutil.bool_to_int(notes_nin);
        l_contact_number_3_n      := sys.diutil.bool_to_int(contact_number_3_nin);
        l_contact_number_4_n      := sys.diutil.bool_to_int(contact_number_4_nin);
        l_birth_place_n           := sys.diutil.bool_to_int(birth_place_nin);
        l_pension_n               := sys.diutil.bool_to_int(pension_nin);
        l_net_wage_n              := sys.diutil.bool_to_int(net_wage_nin);
        l_unemployment_subsidy_n  := sys.diutil.bool_to_int(unemployment_subsidy_nin);
        l_id_geo_state_n          := sys.diutil.bool_to_int(id_geo_state_nin);
        l_num_contrib_n           := sys.diutil.bool_to_int(num_contrib_nin);
        l_id_currency_pension_n   := sys.diutil.bool_to_int(id_currency_pension_nin);
        l_id_currency_net_wage_n  := sys.diutil.bool_to_int(id_currency_net_wage_nin);
        l_id_currency_unemp_sub_n := sys.diutil.bool_to_int(id_currency_unemp_sub_nin);
        l_flg_migrator_n          := sys.diutil.bool_to_int(flg_migrator_nin);
        l_desc_geo_state_n        := sys.diutil.bool_to_int(desc_geo_state_nin);
        l_id_episode_n            := sys.diutil.bool_to_int(id_episode_nin);
    
        l_sql := 'UPDATE PAT_SOC_ATTRIBUTES SET ' || ' ID_PATIENT = decode (' || l_id_patient_n ||
                 ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' || ' MARITAL_STATUS = decode (' ||
                 l_marital_status_n || ',0,:marital_status_in, NVL (:marital_status_in, MARITAL_STATUS)) ' || ',' ||
                 ' ADDRESS = decode (' || l_address_n || ',0,:address_in, NVL (:address_in, ADDRESS)) ' || ',' ||
                 ' LOCATION = decode (' || l_location_n || ',0,:location_in, NVL (:location_in, LOCATION)) ' || ',' ||
                 ' DISTRICT = decode (' || l_district_n || ',0,:district_in, NVL (:district_in, DISTRICT)) ' || ',' ||
                 ' ZIP_CODE = decode (' || l_zip_code_n || ',0,:zip_code_in, NVL (:zip_code_in, ZIP_CODE)) ' || ',' ||
                 ' NUM_MAIN_CONTACT = decode (' || l_num_main_contact_n ||
                 ',0,:num_main_contact_in, NVL (:num_main_contact_in, NUM_MAIN_CONTACT)) ' || ',' ||
                 ' NUM_CONTACT = decode (' || l_num_contact_n ||
                 ',0,:num_contact_in, NVL (:num_contact_in, NUM_CONTACT)) ' || ',' || ' FLG_JOB_STATUS = decode (' ||
                 l_flg_job_status_n || ',0,:flg_job_status_in, NVL (:flg_job_status_in, FLG_JOB_STATUS)) ' || ',' ||
                 ' ID_COUNTRY_NATION = decode (' || l_id_country_nation_n ||
                 ',0,:id_country_nation_in, NVL (:id_country_nation_in, ID_COUNTRY_NATION)) ' || ',' ||
                 ' ID_COUNTRY_ADDRESS = decode (' || l_id_country_address_n ||
                 ',0,:id_country_address_in, NVL (:id_country_address_in, ID_COUNTRY_ADDRESS)) ' || ',' ||
                 ' ID_SCHOLARSHIP = decode (' || l_id_scholarship_n ||
                 ',0,:id_scholarship_in, NVL (:id_scholarship_in, ID_SCHOLARSHIP)) ' || ',' ||
                 ' ID_RELIGION = decode (' || l_id_religion_n ||
                 ',0,:id_religion_in, NVL (:id_religion_in, ID_RELIGION)) ' || ',' || ' MOTHER_NAME = decode (' ||
                 l_mother_name_n || ',0,:mother_name_in, NVL (:mother_name_in, MOTHER_NAME)) ' || ',' ||
                 ' FATHER_NAME = decode (' || l_father_name_n ||
                 ',0,:father_name_in, NVL (:father_name_in, FATHER_NAME)) ' || ',' || ' ID_ISENCAO = decode (' ||
                 l_id_isencao_n || ',0,:id_isencao_in, NVL (:id_isencao_in, ID_ISENCAO)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' || ' DT_ISENCAO = decode (' ||
                 l_dt_isencao_n || ',0,:dt_isencao_in, NVL (:dt_isencao_in, DT_ISENCAO)) ' || ',' ||
                 ' INE_LOCATION = decode (' || l_ine_location_n ||
                 ',0,:ine_location_in, NVL (:ine_location_in, INE_LOCATION)) ' || ',' || ' ID_LANGUAGE = decode (' ||
                 l_id_language_n || ',0,:id_language_in, NVL (:id_language_in, ID_LANGUAGE)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' CONTACT_NUMBER_3 = decode (' || l_contact_number_3_n ||
                 ',0,:contact_number_3_in, NVL (:contact_number_3_in, CONTACT_NUMBER_3)) ' || ',' ||
                 ' CONTACT_NUMBER_4 = decode (' || l_contact_number_4_n ||
                 ',0,:contact_number_4_in, NVL (:contact_number_4_in, CONTACT_NUMBER_4)) ' || ',' ||
                 ' BIRTH_PLACE = decode (' || l_birth_place_n ||
                 ',0,:birth_place_in, NVL (:birth_place_in, BIRTH_PLACE)) ' || ',' || ' PENSION = decode (' ||
                 l_pension_n || ',0,:pension_in, NVL (:pension_in, PENSION)) ' || ',' || ' NET_WAGE = decode (' ||
                 l_net_wage_n || ',0,:net_wage_in, NVL (:net_wage_in, NET_WAGE)) ' || ',' ||
                 ' UNEMPLOYMENT_SUBSIDY = decode (' || l_unemployment_subsidy_n ||
                 ',0,:unemployment_subsidy_in, NVL (:unemployment_subsidy_in, UNEMPLOYMENT_SUBSIDY)) ' || ',' ||
                 ' ID_GEO_STATE = decode (' || l_id_geo_state_n ||
                 ',0,:id_geo_state_in, NVL (:id_geo_state_in, ID_GEO_STATE)) ' || ',' || ' NUM_CONTRIB = decode (' ||
                 l_num_contrib_n || ',0,:num_contrib_in, NVL (:num_contrib_in, NUM_CONTRIB)) ' || ',' ||
                 ' ID_CURRENCY_PENSION = decode (' || l_id_currency_pension_n ||
                 ',0,:id_currency_pension_in, NVL (:id_currency_pension_in, ID_CURRENCY_PENSION)) ' || ',' ||
                 ' ID_CURRENCY_NET_WAGE = decode (' || l_id_currency_net_wage_n ||
                 ',0,:id_currency_net_wage_in, NVL (:id_currency_net_wage_in, ID_CURRENCY_NET_WAGE)) ' || ',' ||
                 ' ID_CURRENCY_UNEMP_SUB = decode (' || l_id_currency_unemp_sub_n ||
                 ',0,:id_currency_unemp_sub_in, NVL (:id_currency_unemp_sub_in, ID_CURRENCY_UNEMP_SUB)) ' || ',' ||
                 ' FLG_MIGRATOR = decode (' || l_flg_migrator_n ||
                 ',0,:flg_migrator_in, NVL (:flg_migrator_in, FLG_MIGRATOR)) ' || ',' || ' DESC_GEO_STATE = decode (' ||
                 l_desc_geo_state_n || ',0,:desc_geo_state_in, NVL (:desc_geo_state_in, DESC_GEO_STATE)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_patient_in, marital_status_in, address_in, location_in, district_in, zip_code_in, num_main_contact_in, num_contact_in, flg_job_status_in, id_country_nation_in, id_country_address_in, id_scholarship_in, id_religion_in, mother_name_in, father_name_in, id_isencao_in, id_institution_in, dt_isencao_in, ine_location_in, id_language_in, notes_in, contact_number_3_in, contact_number_4_in, birth_place_in, pension_in, net_wage_in, unemployment_subsidy_in, id_geo_state_in, num_contrib_in, id_currency_pension_in, id_currency_net_wage_in, id_currency_unemp_sub_in, flg_migrator_in, desc_geo_state_in, id_episode_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'PTSAT_PAT_INST_I'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "PTSAT_PAT_INST_I"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'PAT_SOC_ATTRIBUTES',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_SOC_ATTRIBUTES');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    IF l_name = 'PSE_CUY_FK1'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CURRENCY_PENSION',
                                                        value_in           => id_currency_pension_in);
                    END IF;
                    IF l_name = 'PSE_CUY_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CURRENCY_NET_WAGE',
                                                        value_in           => id_currency_net_wage_in);
                    END IF;
                    IF l_name = 'PSE_CUY_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CURRENCY_UNEMP_SUB',
                                                        value_in           => id_currency_unemp_sub_in);
                    END IF;
                    IF l_name = 'PTSAT_CTR_ADDRESS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COUNTRY_ADDRESS',
                                                        value_in           => id_country_address_in);
                    END IF;
                    IF l_name = 'PTSAT_CTR_NATION_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COUNTRY_NATION',
                                                        value_in           => id_country_nation_in);
                    END IF;
                    IF l_name = 'PTSAT_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PTSAT_GSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_GEO_STATE',
                                                        value_in           => id_geo_state_in);
                    END IF;
                    IF l_name = 'PTSAT_I_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ISENCAO',
                                                        value_in           => id_isencao_in);
                    END IF;
                    IF l_name = 'PTSAT_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PTSAT_LANG_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LANGUAGE',
                                                        value_in           => id_language_in);
                    END IF;
                    IF l_name = 'PTSAT_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PTSAT_REL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RELIGION',
                                                        value_in           => id_religion_in);
                    END IF;
                    IF l_name = 'PTSAT_SCH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHOLARSHIP',
                                                        value_in           => id_scholarship_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_patient_in             IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        marital_status_in         IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        marital_status_nin        IN BOOLEAN := TRUE,
        address_in                IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        address_nin               IN BOOLEAN := TRUE,
        location_in               IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        location_nin              IN BOOLEAN := TRUE,
        district_in               IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        district_nin              IN BOOLEAN := TRUE,
        zip_code_in               IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        zip_code_nin              IN BOOLEAN := TRUE,
        num_main_contact_in       IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_main_contact_nin      IN BOOLEAN := TRUE,
        num_contact_in            IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        num_contact_nin           IN BOOLEAN := TRUE,
        flg_job_status_in         IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        flg_job_status_nin        IN BOOLEAN := TRUE,
        id_country_nation_in      IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_nation_nin     IN BOOLEAN := TRUE,
        id_country_address_in     IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_country_address_nin    IN BOOLEAN := TRUE,
        id_scholarship_in         IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_scholarship_nin        IN BOOLEAN := TRUE,
        id_religion_in            IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        id_religion_nin           IN BOOLEAN := TRUE,
        mother_name_in            IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        mother_name_nin           IN BOOLEAN := TRUE,
        father_name_in            IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        father_name_nin           IN BOOLEAN := TRUE,
        id_isencao_in             IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_isencao_nin            IN BOOLEAN := TRUE,
        id_institution_in         IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        dt_isencao_in             IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        dt_isencao_nin            IN BOOLEAN := TRUE,
        ine_location_in           IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        ine_location_nin          IN BOOLEAN := TRUE,
        id_language_in            IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        id_language_nin           IN BOOLEAN := TRUE,
        notes_in                  IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        contact_number_3_in       IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_3_nin      IN BOOLEAN := TRUE,
        contact_number_4_in       IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        contact_number_4_nin      IN BOOLEAN := TRUE,
        birth_place_in            IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        birth_place_nin           IN BOOLEAN := TRUE,
        pension_in                IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        pension_nin               IN BOOLEAN := TRUE,
        net_wage_in               IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        net_wage_nin              IN BOOLEAN := TRUE,
        unemployment_subsidy_in   IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        unemployment_subsidy_nin  IN BOOLEAN := TRUE,
        id_geo_state_in           IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        id_geo_state_nin          IN BOOLEAN := TRUE,
        num_contrib_in            IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        num_contrib_nin           IN BOOLEAN := TRUE,
        id_currency_pension_in    IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_pension_nin   IN BOOLEAN := TRUE,
        id_currency_net_wage_in   IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_net_wage_nin  IN BOOLEAN := TRUE,
        id_currency_unemp_sub_in  IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        id_currency_unemp_sub_nin IN BOOLEAN := TRUE,
        flg_migrator_in           IN pat_soc_attributes.flg_migrator%TYPE DEFAULT NULL,
        flg_migrator_nin          IN BOOLEAN := TRUE,
        desc_geo_state_in         IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        desc_geo_state_nin        IN BOOLEAN := TRUE,
        id_episode_in             IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            marital_status_in         => marital_status_in,
            marital_status_nin        => marital_status_nin,
            address_in                => address_in,
            address_nin               => address_nin,
            location_in               => location_in,
            location_nin              => location_nin,
            district_in               => district_in,
            district_nin              => district_nin,
            zip_code_in               => zip_code_in,
            zip_code_nin              => zip_code_nin,
            num_main_contact_in       => num_main_contact_in,
            num_main_contact_nin      => num_main_contact_nin,
            num_contact_in            => num_contact_in,
            num_contact_nin           => num_contact_nin,
            flg_job_status_in         => flg_job_status_in,
            flg_job_status_nin        => flg_job_status_nin,
            id_country_nation_in      => id_country_nation_in,
            id_country_nation_nin     => id_country_nation_nin,
            id_country_address_in     => id_country_address_in,
            id_country_address_nin    => id_country_address_nin,
            id_scholarship_in         => id_scholarship_in,
            id_scholarship_nin        => id_scholarship_nin,
            id_religion_in            => id_religion_in,
            id_religion_nin           => id_religion_nin,
            mother_name_in            => mother_name_in,
            mother_name_nin           => mother_name_nin,
            father_name_in            => father_name_in,
            father_name_nin           => father_name_nin,
            id_isencao_in             => id_isencao_in,
            id_isencao_nin            => id_isencao_nin,
            id_institution_in         => id_institution_in,
            id_institution_nin        => id_institution_nin,
            dt_isencao_in             => dt_isencao_in,
            dt_isencao_nin            => dt_isencao_nin,
            ine_location_in           => ine_location_in,
            ine_location_nin          => ine_location_nin,
            id_language_in            => id_language_in,
            id_language_nin           => id_language_nin,
            notes_in                  => notes_in,
            notes_nin                 => notes_nin,
            contact_number_3_in       => contact_number_3_in,
            contact_number_3_nin      => contact_number_3_nin,
            contact_number_4_in       => contact_number_4_in,
            contact_number_4_nin      => contact_number_4_nin,
            birth_place_in            => birth_place_in,
            birth_place_nin           => birth_place_nin,
            pension_in                => pension_in,
            pension_nin               => pension_nin,
            net_wage_in               => net_wage_in,
            net_wage_nin              => net_wage_nin,
            unemployment_subsidy_in   => unemployment_subsidy_in,
            unemployment_subsidy_nin  => unemployment_subsidy_nin,
            id_geo_state_in           => id_geo_state_in,
            id_geo_state_nin          => id_geo_state_nin,
            num_contrib_in            => num_contrib_in,
            num_contrib_nin           => num_contrib_nin,
            id_currency_pension_in    => id_currency_pension_in,
            id_currency_pension_nin   => id_currency_pension_nin,
            id_currency_net_wage_in   => id_currency_net_wage_in,
            id_currency_net_wage_nin  => id_currency_net_wage_nin,
            id_currency_unemp_sub_in  => id_currency_unemp_sub_in,
            id_currency_unemp_sub_nin => id_currency_unemp_sub_nin,
            flg_migrator_in           => flg_migrator_in,
            flg_migrator_nin          => flg_migrator_nin,
            desc_geo_state_in         => desc_geo_state_in,
            desc_geo_state_nin        => desc_geo_state_nin,
            id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            where_in                  => where_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_soc_attributes%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_soc_attributes_in => rec_in.id_pat_soc_attributes,
            id_patient_in            => rec_in.id_patient,
            marital_status_in        => rec_in.marital_status,
            address_in               => rec_in.address,
            location_in              => rec_in.location,
            district_in              => rec_in.district,
            zip_code_in              => rec_in.zip_code,
            num_main_contact_in      => rec_in.num_main_contact,
            num_contact_in           => rec_in.num_contact,
            flg_job_status_in        => rec_in.flg_job_status,
            id_country_nation_in     => rec_in.id_country_nation,
            id_country_address_in    => rec_in.id_country_address,
            id_scholarship_in        => rec_in.id_scholarship,
            id_religion_in           => rec_in.id_religion,
            mother_name_in           => rec_in.mother_name,
            father_name_in           => rec_in.father_name,
            id_isencao_in            => rec_in.id_isencao,
            id_institution_in        => rec_in.id_institution,
            dt_isencao_in            => rec_in.dt_isencao,
            ine_location_in          => rec_in.ine_location,
            id_language_in           => rec_in.id_language,
            notes_in                 => rec_in.notes,
            contact_number_3_in      => rec_in.contact_number_3,
            contact_number_4_in      => rec_in.contact_number_4,
            birth_place_in           => rec_in.birth_place,
            pension_in               => rec_in.pension,
            net_wage_in              => rec_in.net_wage,
            unemployment_subsidy_in  => rec_in.unemployment_subsidy,
            id_geo_state_in          => rec_in.id_geo_state,
            num_contrib_in           => rec_in.num_contrib,
            id_currency_pension_in   => rec_in.id_currency_pension,
            id_currency_net_wage_in  => rec_in.id_currency_net_wage,
            id_currency_unemp_sub_in => rec_in.id_currency_unemp_sub,
            flg_migrator_in          => rec_in.flg_migrator,
            desc_geo_state_in        => rec_in.desc_geo_state,
            id_episode_in            => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_soc_attributes%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_soc_attributes_in => rec_in.id_pat_soc_attributes,
            id_patient_in            => rec_in.id_patient,
            marital_status_in        => rec_in.marital_status,
            address_in               => rec_in.address,
            location_in              => rec_in.location,
            district_in              => rec_in.district,
            zip_code_in              => rec_in.zip_code,
            num_main_contact_in      => rec_in.num_main_contact,
            num_contact_in           => rec_in.num_contact,
            flg_job_status_in        => rec_in.flg_job_status,
            id_country_nation_in     => rec_in.id_country_nation,
            id_country_address_in    => rec_in.id_country_address,
            id_scholarship_in        => rec_in.id_scholarship,
            id_religion_in           => rec_in.id_religion,
            mother_name_in           => rec_in.mother_name,
            father_name_in           => rec_in.father_name,
            id_isencao_in            => rec_in.id_isencao,
            id_institution_in        => rec_in.id_institution,
            dt_isencao_in            => rec_in.dt_isencao,
            ine_location_in          => rec_in.ine_location,
            id_language_in           => rec_in.id_language,
            notes_in                 => rec_in.notes,
            contact_number_3_in      => rec_in.contact_number_3,
            contact_number_4_in      => rec_in.contact_number_4,
            birth_place_in           => rec_in.birth_place,
            pension_in               => rec_in.pension,
            net_wage_in              => rec_in.net_wage,
            unemployment_subsidy_in  => rec_in.unemployment_subsidy,
            id_geo_state_in          => rec_in.id_geo_state,
            num_contrib_in           => rec_in.num_contrib,
            id_currency_pension_in   => rec_in.id_currency_pension,
            id_currency_net_wage_in  => rec_in.id_currency_net_wage,
            id_currency_unemp_sub_in => rec_in.id_currency_unemp_sub,
            flg_migrator_in          => rec_in.flg_migrator,
            desc_geo_state_in        => rec_in.desc_geo_state,
            id_episode_in            => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_pat_soc_attributes_in IN pat_soc_attributes.id_pat_soc_attributes%TYPE,
        id_patient_in            IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        marital_status_in        IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        address_in               IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        location_in              IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        district_in              IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        zip_code_in              IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in      IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in           IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in        IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in     IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_address_in    IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_scholarship_in        IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_religion_in           IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        mother_name_in           IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        father_name_in           IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        id_isencao_in            IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_institution_in        IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        dt_isencao_in            IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        ine_location_in          IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        id_language_in           IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        notes_in                 IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        contact_number_3_in      IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_4_in      IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        birth_place_in           IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        pension_in               IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        net_wage_in              IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        unemployment_subsidy_in  IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        id_geo_state_in          IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in           IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        id_currency_pension_in   IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_net_wage_in  IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_unemp_sub_in IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        flg_migrator_in          IN pat_soc_attributes.flg_migrator%TYPE DEFAULT NULL,
        desc_geo_state_in        IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        id_episode_in            IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_soc_attributes_in => id_pat_soc_attributes_in,
            id_patient_in            => id_patient_in,
            marital_status_in        => marital_status_in,
            address_in               => address_in,
            location_in              => location_in,
            district_in              => district_in,
            zip_code_in              => zip_code_in,
            num_main_contact_in      => num_main_contact_in,
            num_contact_in           => num_contact_in,
            flg_job_status_in        => flg_job_status_in,
            id_country_nation_in     => id_country_nation_in,
            id_country_address_in    => id_country_address_in,
            id_scholarship_in        => id_scholarship_in,
            id_religion_in           => id_religion_in,
            mother_name_in           => mother_name_in,
            father_name_in           => father_name_in,
            id_isencao_in            => id_isencao_in,
            id_institution_in        => id_institution_in,
            dt_isencao_in            => dt_isencao_in,
            ine_location_in          => ine_location_in,
            id_language_in           => id_language_in,
            notes_in                 => notes_in,
            contact_number_3_in      => contact_number_3_in,
            contact_number_4_in      => contact_number_4_in,
            birth_place_in           => birth_place_in,
            pension_in               => pension_in,
            net_wage_in              => net_wage_in,
            unemployment_subsidy_in  => unemployment_subsidy_in,
            id_geo_state_in          => id_geo_state_in,
            num_contrib_in           => num_contrib_in,
            id_currency_pension_in   => id_currency_pension_in,
            id_currency_net_wage_in  => id_currency_net_wage_in,
            id_currency_unemp_sub_in => id_currency_unemp_sub_in,
            flg_migrator_in          => flg_migrator_in,
            desc_geo_state_in        => desc_geo_state_in,
            id_episode_in            => id_episode_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_pat_soc_attributes_in => id_pat_soc_attributes_in,
                id_patient_in            => id_patient_in,
                marital_status_in        => marital_status_in,
                address_in               => address_in,
                location_in              => location_in,
                district_in              => district_in,
                zip_code_in              => zip_code_in,
                num_main_contact_in      => num_main_contact_in,
                num_contact_in           => num_contact_in,
                flg_job_status_in        => flg_job_status_in,
                id_country_nation_in     => id_country_nation_in,
                id_country_address_in    => id_country_address_in,
                id_scholarship_in        => id_scholarship_in,
                id_religion_in           => id_religion_in,
                mother_name_in           => mother_name_in,
                father_name_in           => father_name_in,
                id_isencao_in            => id_isencao_in,
                id_institution_in        => id_institution_in,
                dt_isencao_in            => dt_isencao_in,
                ine_location_in          => ine_location_in,
                id_language_in           => id_language_in,
                notes_in                 => notes_in,
                contact_number_3_in      => contact_number_3_in,
                contact_number_4_in      => contact_number_4_in,
                birth_place_in           => birth_place_in,
                pension_in               => pension_in,
                net_wage_in              => net_wage_in,
                unemployment_subsidy_in  => unemployment_subsidy_in,
                id_geo_state_in          => id_geo_state_in,
                num_contrib_in           => num_contrib_in,
                id_currency_pension_in   => id_currency_pension_in,
                id_currency_net_wage_in  => id_currency_net_wage_in,
                id_currency_unemp_sub_in => id_currency_unemp_sub_in,
                flg_migrator_in          => flg_migrator_in,
                desc_geo_state_in        => desc_geo_state_in,
                id_episode_in            => id_episode_in,
                handle_error_in          => handle_error_in,
                rows_out                 => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_pat_soc_attributes_in IN pat_soc_attributes.id_pat_soc_attributes%TYPE,
        id_patient_in            IN pat_soc_attributes.id_patient%TYPE DEFAULT NULL,
        marital_status_in        IN pat_soc_attributes.marital_status%TYPE DEFAULT NULL,
        address_in               IN pat_soc_attributes.address%TYPE DEFAULT NULL,
        location_in              IN pat_soc_attributes.location%TYPE DEFAULT NULL,
        district_in              IN pat_soc_attributes.district%TYPE DEFAULT NULL,
        zip_code_in              IN pat_soc_attributes.zip_code%TYPE DEFAULT NULL,
        num_main_contact_in      IN pat_soc_attributes.num_main_contact%TYPE DEFAULT NULL,
        num_contact_in           IN pat_soc_attributes.num_contact%TYPE DEFAULT NULL,
        flg_job_status_in        IN pat_soc_attributes.flg_job_status%TYPE DEFAULT NULL,
        id_country_nation_in     IN pat_soc_attributes.id_country_nation%TYPE DEFAULT NULL,
        id_country_address_in    IN pat_soc_attributes.id_country_address%TYPE DEFAULT NULL,
        id_scholarship_in        IN pat_soc_attributes.id_scholarship%TYPE DEFAULT NULL,
        id_religion_in           IN pat_soc_attributes.id_religion%TYPE DEFAULT NULL,
        mother_name_in           IN pat_soc_attributes.mother_name%TYPE DEFAULT NULL,
        father_name_in           IN pat_soc_attributes.father_name%TYPE DEFAULT NULL,
        id_isencao_in            IN pat_soc_attributes.id_isencao%TYPE DEFAULT NULL,
        id_institution_in        IN pat_soc_attributes.id_institution%TYPE DEFAULT NULL,
        dt_isencao_in            IN pat_soc_attributes.dt_isencao%TYPE DEFAULT NULL,
        ine_location_in          IN pat_soc_attributes.ine_location%TYPE DEFAULT NULL,
        id_language_in           IN pat_soc_attributes.id_language%TYPE DEFAULT NULL,
        notes_in                 IN pat_soc_attributes.notes%TYPE DEFAULT NULL,
        contact_number_3_in      IN pat_soc_attributes.contact_number_3%TYPE DEFAULT NULL,
        contact_number_4_in      IN pat_soc_attributes.contact_number_4%TYPE DEFAULT NULL,
        birth_place_in           IN pat_soc_attributes.birth_place%TYPE DEFAULT NULL,
        pension_in               IN pat_soc_attributes.pension%TYPE DEFAULT NULL,
        net_wage_in              IN pat_soc_attributes.net_wage%TYPE DEFAULT NULL,
        unemployment_subsidy_in  IN pat_soc_attributes.unemployment_subsidy%TYPE DEFAULT NULL,
        id_geo_state_in          IN pat_soc_attributes.id_geo_state%TYPE DEFAULT NULL,
        num_contrib_in           IN pat_soc_attributes.num_contrib%TYPE DEFAULT NULL,
        id_currency_pension_in   IN pat_soc_attributes.id_currency_pension%TYPE DEFAULT NULL,
        id_currency_net_wage_in  IN pat_soc_attributes.id_currency_net_wage%TYPE DEFAULT NULL,
        id_currency_unemp_sub_in IN pat_soc_attributes.id_currency_unemp_sub%TYPE DEFAULT NULL,
        flg_migrator_in          IN pat_soc_attributes.flg_migrator%TYPE DEFAULT NULL,
        desc_geo_state_in        IN pat_soc_attributes.desc_geo_state%TYPE DEFAULT NULL,
        id_episode_in            IN pat_soc_attributes.id_episode%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_pat_soc_attributes_in,
                id_patient_in,
                marital_status_in,
                address_in,
                location_in,
                district_in,
                zip_code_in,
                num_main_contact_in,
                num_contact_in,
                flg_job_status_in,
                id_country_nation_in,
                id_country_address_in,
                id_scholarship_in,
                id_religion_in,
                mother_name_in,
                father_name_in,
                id_isencao_in,
                id_institution_in,
                dt_isencao_in,
                ine_location_in,
                id_language_in,
                notes_in,
                contact_number_3_in,
                contact_number_4_in,
                birth_place_in,
                pension_in,
                net_wage_in,
                unemployment_subsidy_in,
                id_geo_state_in,
                num_contrib_in,
                id_currency_pension_in,
                id_currency_net_wage_in,
                id_currency_unemp_sub_in,
                flg_migrator_in,
                desc_geo_state_in,
                id_episode_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pat_soc_attributes_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_pat_soc_attributes id_pat_soc_attributes_cc;
        l_id_patient            id_patient_cc;
        l_marital_status        marital_status_cc;
        l_address               address_cc;
        l_location              location_cc;
        l_district              district_cc;
        l_zip_code              zip_code_cc;
        l_num_main_contact      num_main_contact_cc;
        l_num_contact           num_contact_cc;
        l_flg_job_status        flg_job_status_cc;
        l_id_country_nation     id_country_nation_cc;
        l_id_country_address    id_country_address_cc;
        l_id_scholarship        id_scholarship_cc;
        l_id_religion           id_religion_cc;
        l_mother_name           mother_name_cc;
        l_father_name           father_name_cc;
        l_id_isencao            id_isencao_cc;
        l_id_institution        id_institution_cc;
        l_dt_isencao            dt_isencao_cc;
        l_ine_location          ine_location_cc;
        l_id_language           id_language_cc;
        l_notes                 notes_cc;
        l_contact_number_3      contact_number_3_cc;
        l_contact_number_4      contact_number_4_cc;
        l_birth_place           birth_place_cc;
        l_pension               pension_cc;
        l_net_wage              net_wage_cc;
        l_unemployment_subsidy  unemployment_subsidy_cc;
        l_id_geo_state          id_geo_state_cc;
        l_num_contrib           num_contrib_cc;
        l_id_currency_pension   id_currency_pension_cc;
        l_id_currency_net_wage  id_currency_net_wage_cc;
        l_id_currency_unemp_sub id_currency_unemp_sub_cc;
        l_flg_migrator          flg_migrator_cc;
        l_desc_geo_state        desc_geo_state_cc;
        l_id_episode            id_episode_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_pat_soc_attributes(i) := col_in(i).id_pat_soc_attributes;
            l_id_patient(i) := col_in(i).id_patient;
            l_marital_status(i) := col_in(i).marital_status;
            l_address(i) := col_in(i).address;
            l_location(i) := col_in(i).location;
            l_district(i) := col_in(i).district;
            l_zip_code(i) := col_in(i).zip_code;
            l_num_main_contact(i) := col_in(i).num_main_contact;
            l_num_contact(i) := col_in(i).num_contact;
            l_flg_job_status(i) := col_in(i).flg_job_status;
            l_id_country_nation(i) := col_in(i).id_country_nation;
            l_id_country_address(i) := col_in(i).id_country_address;
            l_id_scholarship(i) := col_in(i).id_scholarship;
            l_id_religion(i) := col_in(i).id_religion;
            l_mother_name(i) := col_in(i).mother_name;
            l_father_name(i) := col_in(i).father_name;
            l_id_isencao(i) := col_in(i).id_isencao;
            l_id_institution(i) := col_in(i).id_institution;
            l_dt_isencao(i) := col_in(i).dt_isencao;
            l_ine_location(i) := col_in(i).ine_location;
            l_id_language(i) := col_in(i).id_language;
            l_notes(i) := col_in(i).notes;
            l_contact_number_3(i) := col_in(i).contact_number_3;
            l_contact_number_4(i) := col_in(i).contact_number_4;
            l_birth_place(i) := col_in(i).birth_place;
            l_pension(i) := col_in(i).pension;
            l_net_wage(i) := col_in(i).net_wage;
            l_unemployment_subsidy(i) := col_in(i).unemployment_subsidy;
            l_id_geo_state(i) := col_in(i).id_geo_state;
            l_num_contrib(i) := col_in(i).num_contrib;
            l_id_currency_pension(i) := col_in(i).id_currency_pension;
            l_id_currency_net_wage(i) := col_in(i).id_currency_net_wage;
            l_id_currency_unemp_sub(i) := col_in(i).id_currency_unemp_sub;
            l_flg_migrator(i) := col_in(i).flg_migrator;
            l_desc_geo_state(i) := col_in(i).desc_geo_state;
            l_id_episode(i) := col_in(i).id_episode;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_soc_attributes
                   SET id_patient            = nvl(l_id_patient(i), id_patient),
                       marital_status        = nvl(l_marital_status(i), marital_status),
                       address               = nvl(l_address(i), address),
                       location              = nvl(l_location(i), location),
                       district              = nvl(l_district(i), district),
                       zip_code              = nvl(l_zip_code(i), zip_code),
                       num_main_contact      = nvl(l_num_main_contact(i), num_main_contact),
                       num_contact           = nvl(l_num_contact(i), num_contact),
                       flg_job_status        = nvl(l_flg_job_status(i), flg_job_status),
                       id_country_nation     = nvl(l_id_country_nation(i), id_country_nation),
                       id_country_address    = nvl(l_id_country_address(i), id_country_address),
                       id_scholarship        = nvl(l_id_scholarship(i), id_scholarship),
                       id_religion           = nvl(l_id_religion(i), id_religion),
                       mother_name           = nvl(l_mother_name(i), mother_name),
                       father_name           = nvl(l_father_name(i), father_name),
                       id_isencao            = nvl(l_id_isencao(i), id_isencao),
                       id_institution        = nvl(l_id_institution(i), id_institution),
                       dt_isencao            = nvl(l_dt_isencao(i), dt_isencao),
                       ine_location          = nvl(l_ine_location(i), ine_location),
                       id_language           = nvl(l_id_language(i), id_language),
                       notes                 = nvl(l_notes(i), notes),
                       contact_number_3      = nvl(l_contact_number_3(i), contact_number_3),
                       contact_number_4      = nvl(l_contact_number_4(i), contact_number_4),
                       birth_place           = nvl(l_birth_place(i), birth_place),
                       pension               = nvl(l_pension(i), pension),
                       net_wage              = nvl(l_net_wage(i), net_wage),
                       unemployment_subsidy  = nvl(l_unemployment_subsidy(i), unemployment_subsidy),
                       id_geo_state          = nvl(l_id_geo_state(i), id_geo_state),
                       num_contrib           = nvl(l_num_contrib(i), num_contrib),
                       id_currency_pension   = nvl(l_id_currency_pension(i), id_currency_pension),
                       id_currency_net_wage  = nvl(l_id_currency_net_wage(i), id_currency_net_wage),
                       id_currency_unemp_sub = nvl(l_id_currency_unemp_sub(i), id_currency_unemp_sub),
                       flg_migrator          = nvl(l_flg_migrator(i), flg_migrator),
                       desc_geo_state        = nvl(l_desc_geo_state(i), desc_geo_state),
                       id_episode            = nvl(l_id_episode(i), id_episode)
                 WHERE id_pat_soc_attributes = l_id_pat_soc_attributes(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_soc_attributes
                   SET id_patient            = l_id_patient(i),
                       marital_status        = l_marital_status(i),
                       address               = l_address(i),
                       location              = l_location(i),
                       district              = l_district(i),
                       zip_code              = l_zip_code(i),
                       num_main_contact      = l_num_main_contact(i),
                       num_contact           = l_num_contact(i),
                       flg_job_status        = l_flg_job_status(i),
                       id_country_nation     = l_id_country_nation(i),
                       id_country_address    = l_id_country_address(i),
                       id_scholarship        = l_id_scholarship(i),
                       id_religion           = l_id_religion(i),
                       mother_name           = l_mother_name(i),
                       father_name           = l_father_name(i),
                       id_isencao            = l_id_isencao(i),
                       id_institution        = l_id_institution(i),
                       dt_isencao            = l_dt_isencao(i),
                       ine_location          = l_ine_location(i),
                       id_language           = l_id_language(i),
                       notes                 = l_notes(i),
                       contact_number_3      = l_contact_number_3(i),
                       contact_number_4      = l_contact_number_4(i),
                       birth_place           = l_birth_place(i),
                       pension               = l_pension(i),
                       net_wage              = l_net_wage(i),
                       unemployment_subsidy  = l_unemployment_subsidy(i),
                       id_geo_state          = l_id_geo_state(i),
                       num_contrib           = l_num_contrib(i),
                       id_currency_pension   = l_id_currency_pension(i),
                       id_currency_net_wage  = l_id_currency_net_wage(i),
                       id_currency_unemp_sub = l_id_currency_unemp_sub(i),
                       flg_migrator          = l_flg_migrator(i),
                       desc_geo_state        = l_desc_geo_state(i),
                       id_episode            = l_id_episode(i)
                 WHERE id_pat_soc_attributes = l_id_pat_soc_attributes(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pat_soc_attributes_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PAT_SOC_ATTRIBUTES
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PAT_SOC_ATTRIBUTES
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_SOC_ATTRIBUTES set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PAT_SOC_ATTRIBUTES set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_pat_soc_attributes_in IN pat_soc_attributes.id_pat_soc_attributes%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_pat_soc_attributes = id_pat_soc_attributes_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_pat_soc_attributes_in IN pat_soc_attributes.id_pat_soc_attributes%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_pat_soc_attributes_in => id_pat_soc_attributes_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PAT_SOC_ATTRIBUTES
    PROCEDURE del_id_pat_soc_attributes
    (
        id_pat_soc_attributes_in IN pat_soc_attributes.id_pat_soc_attributes%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_pat_soc_attributes = id_pat_soc_attributes_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_pat_soc_attributes;

    -- Delete all rows for primary key column ID_PAT_SOC_ATTRIBUTES
    PROCEDURE del_id_pat_soc_attributes
    (
        id_pat_soc_attributes_in IN pat_soc_attributes.id_pat_soc_attributes%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_pat_soc_attributes(id_pat_soc_attributes_in => id_pat_soc_attributes_in,
                                  handle_error_in          => handle_error_in,
                                  rows_out                 => rows_out);
    END del_id_pat_soc_attributes;

    -- Delete for unique value of PTSAT_PAT_INST_I
    PROCEDURE del_ptsat_pat_inst_i
    (
        id_patient_in     IN pat_soc_attributes.id_patient%TYPE,
        id_institution_in IN pat_soc_attributes.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_patient = id_patient_in
           AND id_institution = id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptsat_pat_inst_i;

    -- Delete for unique value of PTSAT_PAT_INST_I
    PROCEDURE del_ptsat_pat_inst_i
    (
        id_patient_in     IN pat_soc_attributes.id_patient%TYPE,
        id_institution_in IN pat_soc_attributes.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptsat_pat_inst_i(id_patient_in     => id_patient_in,
                             id_institution_in => id_institution_in,
                             handle_error_in   => handle_error_in,
                             rows_out          => rows_out);
    END del_ptsat_pat_inst_i;

    PROCEDURE del_pse_cuy_fk1
    (
        id_currency_pension_in IN pat_soc_attributes.id_currency_pension%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_currency_pension = del_pse_cuy_fk1.id_currency_pension_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pse_cuy_fk1;

    PROCEDURE del_pse_cuy_fk1
    (
        id_currency_pension_in IN pat_soc_attributes.id_currency_pension%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pse_cuy_fk1(id_currency_pension_in => id_currency_pension_in,
                        handle_error_in        => handle_error_in,
                        rows_out               => rows_out);
    END del_pse_cuy_fk1;

    PROCEDURE del_pse_cuy_fk2
    (
        id_currency_net_wage_in IN pat_soc_attributes.id_currency_net_wage%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_currency_net_wage = del_pse_cuy_fk2.id_currency_net_wage_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pse_cuy_fk2;

    PROCEDURE del_pse_cuy_fk2
    (
        id_currency_net_wage_in IN pat_soc_attributes.id_currency_net_wage%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pse_cuy_fk2(id_currency_net_wage_in => id_currency_net_wage_in,
                        handle_error_in         => handle_error_in,
                        rows_out                => rows_out);
    END del_pse_cuy_fk2;

    PROCEDURE del_pse_cuy_fk3
    (
        id_currency_unemp_sub_in IN pat_soc_attributes.id_currency_unemp_sub%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_currency_unemp_sub = del_pse_cuy_fk3.id_currency_unemp_sub_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pse_cuy_fk3;

    PROCEDURE del_pse_cuy_fk3
    (
        id_currency_unemp_sub_in IN pat_soc_attributes.id_currency_unemp_sub%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pse_cuy_fk3(id_currency_unemp_sub_in => id_currency_unemp_sub_in,
                        handle_error_in          => handle_error_in,
                        rows_out                 => rows_out);
    END del_pse_cuy_fk3;

    PROCEDURE del_ptsat_ctr_address_fk
    (
        id_country_address_in IN pat_soc_attributes.id_country_address%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_country_address = del_ptsat_ctr_address_fk.id_country_address_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptsat_ctr_address_fk;

    PROCEDURE del_ptsat_ctr_address_fk
    (
        id_country_address_in IN pat_soc_attributes.id_country_address%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptsat_ctr_address_fk(id_country_address_in => id_country_address_in,
                                 handle_error_in       => handle_error_in,
                                 rows_out              => rows_out);
    END del_ptsat_ctr_address_fk;

    PROCEDURE del_ptsat_ctr_nation_fk
    (
        id_country_nation_in IN pat_soc_attributes.id_country_nation%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_country_nation = del_ptsat_ctr_nation_fk.id_country_nation_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptsat_ctr_nation_fk;

    PROCEDURE del_ptsat_ctr_nation_fk
    (
        id_country_nation_in IN pat_soc_attributes.id_country_nation%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptsat_ctr_nation_fk(id_country_nation_in => id_country_nation_in,
                                handle_error_in      => handle_error_in,
                                rows_out             => rows_out);
    END del_ptsat_ctr_nation_fk;

    PROCEDURE del_ptsat_epis_fk
    (
        id_episode_in   IN pat_soc_attributes.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_episode = del_ptsat_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptsat_epis_fk;

    PROCEDURE del_ptsat_epis_fk
    (
        id_episode_in   IN pat_soc_attributes.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptsat_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptsat_epis_fk;

    PROCEDURE del_ptsat_gse_fk
    (
        id_geo_state_in IN pat_soc_attributes.id_geo_state%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_geo_state = del_ptsat_gse_fk.id_geo_state_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptsat_gse_fk;

    PROCEDURE del_ptsat_gse_fk
    (
        id_geo_state_in IN pat_soc_attributes.id_geo_state%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptsat_gse_fk(id_geo_state_in => id_geo_state_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptsat_gse_fk;

    PROCEDURE del_ptsat_i_fk
    (
        id_isencao_in   IN pat_soc_attributes.id_isencao%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_isencao = del_ptsat_i_fk.id_isencao_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptsat_i_fk;

    PROCEDURE del_ptsat_i_fk
    (
        id_isencao_in   IN pat_soc_attributes.id_isencao%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptsat_i_fk(id_isencao_in => id_isencao_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptsat_i_fk;

    PROCEDURE del_ptsat_inst_fk
    (
        id_institution_in IN pat_soc_attributes.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_institution = del_ptsat_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptsat_inst_fk;

    PROCEDURE del_ptsat_inst_fk
    (
        id_institution_in IN pat_soc_attributes.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptsat_inst_fk(id_institution_in => id_institution_in,
                          handle_error_in   => handle_error_in,
                          rows_out          => rows_out);
    END del_ptsat_inst_fk;

    PROCEDURE del_ptsat_lang_fk
    (
        id_language_in  IN pat_soc_attributes.id_language%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_language = del_ptsat_lang_fk.id_language_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptsat_lang_fk;

    PROCEDURE del_ptsat_lang_fk
    (
        id_language_in  IN pat_soc_attributes.id_language%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptsat_lang_fk(id_language_in => id_language_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptsat_lang_fk;

    PROCEDURE del_ptsat_pat_fk
    (
        id_patient_in   IN pat_soc_attributes.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_patient = del_ptsat_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptsat_pat_fk;

    PROCEDURE del_ptsat_pat_fk
    (
        id_patient_in   IN pat_soc_attributes.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptsat_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptsat_pat_fk;

    PROCEDURE del_ptsat_rel_fk
    (
        id_religion_in  IN pat_soc_attributes.id_religion%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_religion = del_ptsat_rel_fk.id_religion_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptsat_rel_fk;

    PROCEDURE del_ptsat_rel_fk
    (
        id_religion_in  IN pat_soc_attributes.id_religion%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptsat_rel_fk(id_religion_in => id_religion_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptsat_rel_fk;

    PROCEDURE del_ptsat_sch_fk
    (
        id_scholarship_in IN pat_soc_attributes.id_scholarship%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_soc_attributes
         WHERE id_scholarship = del_ptsat_sch_fk.id_scholarship_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptsat_sch_fk;

    PROCEDURE del_ptsat_sch_fk
    (
        id_scholarship_in IN pat_soc_attributes.id_scholarship%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptsat_sch_fk(id_scholarship_in => id_scholarship_in,
                         handle_error_in   => handle_error_in,
                         rows_out          => rows_out);
    END del_ptsat_sch_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PAT_SOC_ATTRIBUTES';
        ELSE
            RETURN 'DELETE FROM PAT_SOC_ATTRIBUTES WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_SOC_ATTRIBUTES');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_SOC_ATTRIBUTES');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pat_soc_attributes_inout IN OUT pat_soc_attributes%ROWTYPE) IS
    BEGIN
        pat_soc_attributes_inout.id_pat_soc_attributes := NULL;
        pat_soc_attributes_inout.id_patient            := NULL;
        pat_soc_attributes_inout.marital_status        := NULL;
        pat_soc_attributes_inout.address               := NULL;
        pat_soc_attributes_inout.location              := NULL;
        pat_soc_attributes_inout.district              := NULL;
        pat_soc_attributes_inout.zip_code              := NULL;
        pat_soc_attributes_inout.num_main_contact      := NULL;
        pat_soc_attributes_inout.num_contact           := NULL;
        pat_soc_attributes_inout.flg_job_status        := NULL;
        pat_soc_attributes_inout.id_country_nation     := NULL;
        pat_soc_attributes_inout.id_country_address    := NULL;
        pat_soc_attributes_inout.id_scholarship        := NULL;
        pat_soc_attributes_inout.id_religion           := NULL;
        pat_soc_attributes_inout.mother_name           := NULL;
        pat_soc_attributes_inout.father_name           := NULL;
        pat_soc_attributes_inout.id_isencao            := NULL;
        pat_soc_attributes_inout.id_institution        := NULL;
        pat_soc_attributes_inout.dt_isencao            := NULL;
        pat_soc_attributes_inout.ine_location          := NULL;
        pat_soc_attributes_inout.id_language           := NULL;
        pat_soc_attributes_inout.notes                 := NULL;
        pat_soc_attributes_inout.contact_number_3      := NULL;
        pat_soc_attributes_inout.contact_number_4      := NULL;
        pat_soc_attributes_inout.birth_place           := NULL;
        pat_soc_attributes_inout.pension               := NULL;
        pat_soc_attributes_inout.net_wage              := NULL;
        pat_soc_attributes_inout.unemployment_subsidy  := NULL;
        pat_soc_attributes_inout.id_geo_state          := NULL;
        pat_soc_attributes_inout.num_contrib           := NULL;
        pat_soc_attributes_inout.id_currency_pension   := NULL;
        pat_soc_attributes_inout.id_currency_net_wage  := NULL;
        pat_soc_attributes_inout.id_currency_unemp_sub := NULL;
        pat_soc_attributes_inout.flg_migrator          := 'N';
        pat_soc_attributes_inout.desc_geo_state        := NULL;
        pat_soc_attributes_inout.id_episode            := NULL;
    END initrec;

    FUNCTION initrec RETURN pat_soc_attributes%ROWTYPE IS
        l_pat_soc_attributes pat_soc_attributes%ROWTYPE;
    BEGIN
        l_pat_soc_attributes.flg_migrator := 'N';
        RETURN l_pat_soc_attributes;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pat_soc_attributes_tc IS
        data pat_soc_attributes_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pat_soc_attributes
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pat_soc_attributes_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pat_soc_attributes_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pat_soc_attributes;
/
