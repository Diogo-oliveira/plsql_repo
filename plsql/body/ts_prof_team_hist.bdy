/*-- Last Change Revision: $Rev: 2028348 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:16 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_prof_team_hist
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2020-01-28 12:01:39
| Created By: ALERT
*/
IS

e_null_column_value EXCEPTION;
PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

e_existing_fky_reference EXCEPTION;
PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

e_check_constraint_failure EXCEPTION;
PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

e_no_parent_key EXCEPTION;
PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

e_child_record_found EXCEPTION;
PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

e_forall_error EXCEPTION;
PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

-- Defined for backward compatibilty.
e_integ_constraint_failure EXCEPTION;
PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

PROCEDURE ins
(
ID_PROF_TEAM_HIST_in IN prof_team_hist.ID_PROF_TEAM_HIST%TYPE,
ID_PROF_TEAM_in IN PROF_TEAM_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
ID_PROF_TEAM_LEADER_in IN PROF_TEAM_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
PROF_TEAM_NAME_in IN PROF_TEAM_HIST.PROF_TEAM_NAME%TYPE DEFAULT NULL,
PROF_TEAM_DESC_in IN PROF_TEAM_HIST.PROF_TEAM_DESC%TYPE DEFAULT NULL,
FLG_AVAILABLE_in IN PROF_TEAM_HIST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_STATUS_in IN PROF_TEAM_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_SOFTWARE_in IN PROF_TEAM_HIST.ID_SOFTWARE%TYPE DEFAULT NULL,
ID_INSTITUTION_in IN PROF_TEAM_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN PROF_TEAM_HIST.FLG_TYPE%TYPE DEFAULT NULL,
DT_BEGIN_TSTZ_in IN PROF_TEAM_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
DT_END_TSTZ_in IN PROF_TEAM_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
ID_DEPARTMENT_in IN PROF_TEAM_HIST.ID_DEPARTMENT%TYPE DEFAULT NULL,
NOTES_in IN PROF_TEAM_HIST.NOTES%TYPE DEFAULT NULL,
CREATE_TIME_in IN PROF_TEAM_HIST.CREATE_TIME%TYPE DEFAULT NULL,
FLG_TYPE_REGISTER_in IN PROF_TEAM_HIST.FLG_TYPE_REGISTER%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN PROF_TEAM_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN PROF_TEAM_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN PROF_TEAM_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN PROF_TEAM_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_PROF_REGISTER_in IN PROF_TEAM_HIST.ID_PROF_REGISTER%TYPE DEFAULT NULL,
DT_REGISTER_in IN PROF_TEAM_HIST.DT_REGISTER%TYPE DEFAULT NULL,
ID_TEAM_TYPE_in IN PROF_TEAM_HIST.ID_TEAM_TYPE%TYPE DEFAULT NULL,
CREATE_USER_in IN PROF_TEAM_HIST.CREATE_USER%TYPE DEFAULT NULL,
ID_EPISODE_in IN PROF_TEAM_HIST.ID_EPISODE%TYPE DEFAULT NULL,
handle_error_in IN BOOLEAN := TRUE,
rows_out OUT table_varchar
) IS
BEGIN
INSERT INTO prof_team_hist
(
ID_PROF_TEAM_HIST,
ID_PROF_TEAM,
ID_PROF_TEAM_LEADER,
PROF_TEAM_NAME,
PROF_TEAM_DESC,
FLG_AVAILABLE,
FLG_STATUS,
ID_SOFTWARE,
ID_INSTITUTION,
FLG_TYPE,
DT_BEGIN_TSTZ,
DT_END_TSTZ,
ID_DEPARTMENT,
NOTES,
CREATE_TIME,
FLG_TYPE_REGISTER,
CREATE_INSTITUTION,
UPDATE_USER,
UPDATE_TIME,
UPDATE_INSTITUTION,
ID_PROF_REGISTER,
DT_REGISTER,
ID_TEAM_TYPE,
CREATE_USER,
ID_EPISODE
)
 VALUES
(
ID_PROF_TEAM_HIST_IN,
ID_PROF_TEAM_IN,
ID_PROF_TEAM_LEADER_IN,
PROF_TEAM_NAME_IN,
PROF_TEAM_DESC_IN,
FLG_AVAILABLE_IN,
FLG_STATUS_IN,
ID_SOFTWARE_IN,
ID_INSTITUTION_IN,
FLG_TYPE_IN,
DT_BEGIN_TSTZ_IN,
DT_END_TSTZ_IN,
ID_DEPARTMENT_IN,
NOTES_IN,
CREATE_TIME_IN,
FLG_TYPE_REGISTER_IN,
CREATE_INSTITUTION_IN,
UPDATE_USER_IN,
UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN,
ID_PROF_REGISTER_IN,
DT_REGISTER_IN,
ID_TEAM_TYPE_IN,
CREATE_USER_IN,
ID_EPISODE_IN
)
RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end ins;

PROCEDURE ins
(
ID_PROF_TEAM_HIST_in IN prof_team_hist.ID_PROF_TEAM_HIST%TYPE,
ID_PROF_TEAM_in IN PROF_TEAM_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
ID_PROF_TEAM_LEADER_in IN PROF_TEAM_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
PROF_TEAM_NAME_in IN PROF_TEAM_HIST.PROF_TEAM_NAME%TYPE DEFAULT NULL,
PROF_TEAM_DESC_in IN PROF_TEAM_HIST.PROF_TEAM_DESC%TYPE DEFAULT NULL,
FLG_AVAILABLE_in IN PROF_TEAM_HIST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_STATUS_in IN PROF_TEAM_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_SOFTWARE_in IN PROF_TEAM_HIST.ID_SOFTWARE%TYPE DEFAULT NULL,
ID_INSTITUTION_in IN PROF_TEAM_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN PROF_TEAM_HIST.FLG_TYPE%TYPE DEFAULT NULL,
DT_BEGIN_TSTZ_in IN PROF_TEAM_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
DT_END_TSTZ_in IN PROF_TEAM_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
ID_DEPARTMENT_in IN PROF_TEAM_HIST.ID_DEPARTMENT%TYPE DEFAULT NULL,
NOTES_in IN PROF_TEAM_HIST.NOTES%TYPE DEFAULT NULL,
CREATE_TIME_in IN PROF_TEAM_HIST.CREATE_TIME%TYPE DEFAULT NULL,
FLG_TYPE_REGISTER_in IN PROF_TEAM_HIST.FLG_TYPE_REGISTER%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN PROF_TEAM_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN PROF_TEAM_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN PROF_TEAM_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN PROF_TEAM_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_PROF_REGISTER_in IN PROF_TEAM_HIST.ID_PROF_REGISTER%TYPE DEFAULT NULL,
DT_REGISTER_in IN PROF_TEAM_HIST.DT_REGISTER%TYPE DEFAULT NULL,
ID_TEAM_TYPE_in IN PROF_TEAM_HIST.ID_TEAM_TYPE%TYPE DEFAULT NULL,
CREATE_USER_in IN PROF_TEAM_HIST.CREATE_USER%TYPE DEFAULT NULL,
ID_EPISODE_in IN PROF_TEAM_HIST.ID_EPISODE%TYPE DEFAULT NULL,
handle_error_in IN BOOLEAN := TRUE
) IS
rows_out table_varchar;
BEGIN
ins(
ID_PROF_TEAM_HIST_IN => ID_PROF_TEAM_HIST_IN,
ID_PROF_TEAM_IN => ID_PROF_TEAM_IN,
ID_PROF_TEAM_LEADER_IN => ID_PROF_TEAM_LEADER_IN,
PROF_TEAM_NAME_IN => PROF_TEAM_NAME_IN,
PROF_TEAM_DESC_IN => PROF_TEAM_DESC_IN,
FLG_AVAILABLE_IN => FLG_AVAILABLE_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
ID_SOFTWARE_IN => ID_SOFTWARE_IN,
ID_INSTITUTION_IN => ID_INSTITUTION_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
DT_BEGIN_TSTZ_IN => DT_BEGIN_TSTZ_IN,
DT_END_TSTZ_IN => DT_END_TSTZ_IN,
ID_DEPARTMENT_IN => ID_DEPARTMENT_IN,
NOTES_IN => NOTES_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
FLG_TYPE_REGISTER_IN => FLG_TYPE_REGISTER_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
ID_PROF_REGISTER_IN => ID_PROF_REGISTER_IN,
DT_REGISTER_IN => DT_REGISTER_IN,
ID_TEAM_TYPE_IN => ID_TEAM_TYPE_IN,
CREATE_USER_IN => CREATE_USER_IN,
ID_EPISODE_IN => ID_EPISODE_IN,
handle_error_in => handle_error_in,
rows_out => rows_out);
END ins;

PROCEDURE ins
(
rec_in          IN prof_team_hist%ROWTYPE,
gen_pky_in      IN BOOLEAN DEFAULT FALSE,
sequence_in     IN VARCHAR2 := NULL,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
) IS
l_rec prof_team_hist%ROWTYPE := rec_in;
BEGIN

ins(
ID_PROF_TEAM_HIST_IN => l_rec.ID_PROF_TEAM_HIST,
ID_PROF_TEAM_IN => l_rec.ID_PROF_TEAM,
ID_PROF_TEAM_LEADER_IN => l_rec.ID_PROF_TEAM_LEADER,
PROF_TEAM_NAME_IN => l_rec.PROF_TEAM_NAME,
PROF_TEAM_DESC_IN => l_rec.PROF_TEAM_DESC,
FLG_AVAILABLE_IN => l_rec.FLG_AVAILABLE,
FLG_STATUS_IN => l_rec.FLG_STATUS,
ID_SOFTWARE_IN => l_rec.ID_SOFTWARE,
ID_INSTITUTION_IN => l_rec.ID_INSTITUTION,
FLG_TYPE_IN => l_rec.FLG_TYPE,
DT_BEGIN_TSTZ_IN => l_rec.DT_BEGIN_TSTZ,
DT_END_TSTZ_IN => l_rec.DT_END_TSTZ,
ID_DEPARTMENT_IN => l_rec.ID_DEPARTMENT,
NOTES_IN => l_rec.NOTES,
CREATE_TIME_IN => l_rec.CREATE_TIME,
FLG_TYPE_REGISTER_IN => l_rec.FLG_TYPE_REGISTER,
CREATE_INSTITUTION_IN => l_rec.CREATE_INSTITUTION,
UPDATE_USER_IN => l_rec.UPDATE_USER,
UPDATE_TIME_IN => l_rec.UPDATE_TIME,
UPDATE_INSTITUTION_IN => l_rec.UPDATE_INSTITUTION,
ID_PROF_REGISTER_IN => l_rec.ID_PROF_REGISTER,
DT_REGISTER_IN => l_rec.DT_REGISTER,
ID_TEAM_TYPE_IN => l_rec.ID_TEAM_TYPE,
CREATE_USER_IN => l_rec.CREATE_USER,
ID_EPISODE_IN => l_rec.ID_EPISODE,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
END ins;

PROCEDURE ins
(
rec_in          IN prof_team_hist%ROWTYPE,
gen_pky_in      IN BOOLEAN DEFAULT FALSE,
sequence_in     IN VARCHAR2 := NULL,
handle_error_in IN BOOLEAN := TRUE
) IS
rows_out table_varchar;
BEGIN
ins(rec_in          => rec_in,
gen_pky_in      => gen_pky_in,
sequence_in     => sequence_in,
handle_error_in => handle_error_in,
rows_out        => rows_out);
END ins;

-- Insert a collection of rows using FORALL; all primary key values
-- must have already been generated, or are handled in triggers
PROCEDURE ins
(
rows_in         IN prof_team_hist_tc,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
IS
BEGIN
IF rows_in.COUNT = 0
THEN
NULL;
ELSE
FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
INSERT INTO prof_team_hist
(
ID_PROF_TEAM_HIST,
ID_PROF_TEAM,
ID_PROF_TEAM_LEADER,
PROF_TEAM_NAME,
PROF_TEAM_DESC,
FLG_AVAILABLE,
FLG_STATUS,
ID_SOFTWARE,
ID_INSTITUTION,
FLG_TYPE,
DT_BEGIN_TSTZ,
DT_END_TSTZ,
ID_DEPARTMENT,
NOTES,
FLG_TYPE_REGISTER,
ID_PROF_REGISTER,
DT_REGISTER,
ID_TEAM_TYPE,
ID_EPISODE
)
VALUES
(
rows_in(indx).ID_PROF_TEAM_HIST,
rows_in(indx).ID_PROF_TEAM,
rows_in(indx).ID_PROF_TEAM_LEADER,
rows_in(indx).PROF_TEAM_NAME,
rows_in(indx).PROF_TEAM_DESC,
rows_in(indx).FLG_AVAILABLE,
rows_in(indx).FLG_STATUS,
rows_in(indx).ID_SOFTWARE,
rows_in(indx).ID_INSTITUTION,
rows_in(indx).FLG_TYPE,
rows_in(indx).DT_BEGIN_TSTZ,
rows_in(indx).DT_END_TSTZ,
rows_in(indx).ID_DEPARTMENT,
rows_in(indx).NOTES,
rows_in(indx).FLG_TYPE_REGISTER,
rows_in(indx).ID_PROF_REGISTER,
rows_in(indx).DT_REGISTER,
rows_in(indx).ID_TEAM_TYPE,
rows_in(indx).ID_EPISODE
)
RETURNING ROWID BULK COLLECT INTO rows_out ;
END IF;

EXCEPTION
WHEN e_forall_error THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
LOOP
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END LOOP;
END IF;
WHEN OTHERS THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

END ins;

-- Insert a collection of rows using FORALL; all primary key values
-- must have already been generated, or are handled in triggers
PROCEDURE ins
(
rows_in         IN prof_team_hist_tc,
handle_error_in IN BOOLEAN := TRUE
)
IS
rows_out table_varchar;
BEGIN
ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
END ins;

-- Update any/all columns by primary key. If you pass NULL, then
-- the current column value is set to itself. If you need a more
-- selected UPDATE then use one of the onecol procedures below.
PROCEDURE upd
(
ID_PROF_TEAM_HIST_in IN prof_team_hist.ID_PROF_TEAM_HIST%TYPE,
ID_PROF_TEAM_in IN PROF_TEAM_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
ID_PROF_TEAM_nin IN BOOLEAN := TRUE,
ID_PROF_TEAM_LEADER_in IN PROF_TEAM_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
ID_PROF_TEAM_LEADER_nin IN BOOLEAN := TRUE,
PROF_TEAM_NAME_in IN PROF_TEAM_HIST.PROF_TEAM_NAME%TYPE DEFAULT NULL,
PROF_TEAM_NAME_nin IN BOOLEAN := TRUE,
PROF_TEAM_DESC_in IN PROF_TEAM_HIST.PROF_TEAM_DESC%TYPE DEFAULT NULL,
PROF_TEAM_DESC_nin IN BOOLEAN := TRUE,
FLG_AVAILABLE_in IN PROF_TEAM_HIST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_AVAILABLE_nin IN BOOLEAN := TRUE,
FLG_STATUS_in IN PROF_TEAM_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_STATUS_nin IN BOOLEAN := TRUE,
ID_SOFTWARE_in IN PROF_TEAM_HIST.ID_SOFTWARE%TYPE DEFAULT NULL,
ID_SOFTWARE_nin IN BOOLEAN := TRUE,
ID_INSTITUTION_in IN PROF_TEAM_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
ID_INSTITUTION_nin IN BOOLEAN := TRUE,
FLG_TYPE_in IN PROF_TEAM_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_TYPE_nin IN BOOLEAN := TRUE,
DT_BEGIN_TSTZ_in IN PROF_TEAM_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
DT_BEGIN_TSTZ_nin IN BOOLEAN := TRUE,
DT_END_TSTZ_in IN PROF_TEAM_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
DT_END_TSTZ_nin IN BOOLEAN := TRUE,
ID_DEPARTMENT_in IN PROF_TEAM_HIST.ID_DEPARTMENT%TYPE DEFAULT NULL,
ID_DEPARTMENT_nin IN BOOLEAN := TRUE,
NOTES_in IN PROF_TEAM_HIST.NOTES%TYPE DEFAULT NULL,
NOTES_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN PROF_TEAM_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
FLG_TYPE_REGISTER_in IN PROF_TEAM_HIST.FLG_TYPE_REGISTER%TYPE DEFAULT NULL,
FLG_TYPE_REGISTER_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN PROF_TEAM_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN PROF_TEAM_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN PROF_TEAM_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN PROF_TEAM_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
ID_PROF_REGISTER_in IN PROF_TEAM_HIST.ID_PROF_REGISTER%TYPE DEFAULT NULL,
ID_PROF_REGISTER_nin IN BOOLEAN := TRUE,
DT_REGISTER_in IN PROF_TEAM_HIST.DT_REGISTER%TYPE DEFAULT NULL,
DT_REGISTER_nin IN BOOLEAN := TRUE,
ID_TEAM_TYPE_in IN PROF_TEAM_HIST.ID_TEAM_TYPE%TYPE DEFAULT NULL,
ID_TEAM_TYPE_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN PROF_TEAM_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
ID_EPISODE_in IN PROF_TEAM_HIST.ID_EPISODE%TYPE DEFAULT NULL,
ID_EPISODE_nin IN BOOLEAN := TRUE,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
)
is
l_rows_out             table_varchar;
l_ID_PROF_TEAM_n number(1) := sys.diutil.bool_to_int(ID_PROF_TEAM_nin);
l_ID_PROF_TEAM_LEADER_n number(1) := sys.diutil.bool_to_int(ID_PROF_TEAM_LEADER_nin);
l_PROF_TEAM_NAME_n number(1) := sys.diutil.bool_to_int(PROF_TEAM_NAME_nin);
l_PROF_TEAM_DESC_n number(1) := sys.diutil.bool_to_int(PROF_TEAM_DESC_nin);
l_FLG_AVAILABLE_n number(1) := sys.diutil.bool_to_int(FLG_AVAILABLE_nin);
l_FLG_STATUS_n number(1) := sys.diutil.bool_to_int(FLG_STATUS_nin);
l_ID_SOFTWARE_n number(1) := sys.diutil.bool_to_int(ID_SOFTWARE_nin);
l_ID_INSTITUTION_n number(1) := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
l_FLG_TYPE_n number(1) := sys.diutil.bool_to_int(FLG_TYPE_nin);
l_DT_BEGIN_TSTZ_n number(1) := sys.diutil.bool_to_int(DT_BEGIN_TSTZ_nin);
l_DT_END_TSTZ_n number(1) := sys.diutil.bool_to_int(DT_END_TSTZ_nin);
l_ID_DEPARTMENT_n number(1) := sys.diutil.bool_to_int(ID_DEPARTMENT_nin);
l_NOTES_n number(1) := sys.diutil.bool_to_int(NOTES_nin);
l_CREATE_TIME_n number(1) := sys.diutil.bool_to_int(CREATE_TIME_nin);
l_FLG_TYPE_REGISTER_n number(1) := sys.diutil.bool_to_int(FLG_TYPE_REGISTER_nin);
l_CREATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
l_UPDATE_USER_n number(1) := sys.diutil.bool_to_int(UPDATE_USER_nin);
l_UPDATE_TIME_n number(1) := sys.diutil.bool_to_int(UPDATE_TIME_nin);
l_UPDATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
l_ID_PROF_REGISTER_n number(1) := sys.diutil.bool_to_int(ID_PROF_REGISTER_nin);
l_DT_REGISTER_n number(1) := sys.diutil.bool_to_int(DT_REGISTER_nin);
l_ID_TEAM_TYPE_n number(1) := sys.diutil.bool_to_int(ID_TEAM_TYPE_nin);
l_CREATE_USER_n number(1) := sys.diutil.bool_to_int(CREATE_USER_nin);
l_ID_EPISODE_n number(1) := sys.diutil.bool_to_int(ID_EPISODE_nin);
begin

UPDATE prof_team_hist
SET
ID_PROF_TEAM = decode(l_ID_PROF_TEAM_n, 0, ID_PROF_TEAM_in, nvl(ID_PROF_TEAM_in, ID_PROF_TEAM)),
ID_PROF_TEAM_LEADER = decode(l_ID_PROF_TEAM_LEADER_n, 0, ID_PROF_TEAM_LEADER_in, nvl(ID_PROF_TEAM_LEADER_in, ID_PROF_TEAM_LEADER)),
PROF_TEAM_NAME = decode(l_PROF_TEAM_NAME_n, 0, PROF_TEAM_NAME_in, nvl(PROF_TEAM_NAME_in, PROF_TEAM_NAME)),
PROF_TEAM_DESC = decode(l_PROF_TEAM_DESC_n, 0, PROF_TEAM_DESC_in, nvl(PROF_TEAM_DESC_in, PROF_TEAM_DESC)),
FLG_AVAILABLE = decode(l_FLG_AVAILABLE_n, 0, FLG_AVAILABLE_in, nvl(FLG_AVAILABLE_in, FLG_AVAILABLE)),
FLG_STATUS = decode(l_FLG_STATUS_n, 0, FLG_STATUS_in, nvl(FLG_STATUS_in, FLG_STATUS)),
ID_SOFTWARE = decode(l_ID_SOFTWARE_n, 0, ID_SOFTWARE_in, nvl(ID_SOFTWARE_in, ID_SOFTWARE)),
ID_INSTITUTION = decode(l_ID_INSTITUTION_n, 0, ID_INSTITUTION_in, nvl(ID_INSTITUTION_in, ID_INSTITUTION)),
FLG_TYPE = decode(l_FLG_TYPE_n, 0, FLG_TYPE_in, nvl(FLG_TYPE_in, FLG_TYPE)),
DT_BEGIN_TSTZ = decode(l_DT_BEGIN_TSTZ_n, 0, DT_BEGIN_TSTZ_in, nvl(DT_BEGIN_TSTZ_in, DT_BEGIN_TSTZ)),
DT_END_TSTZ = decode(l_DT_END_TSTZ_n, 0, DT_END_TSTZ_in, nvl(DT_END_TSTZ_in, DT_END_TSTZ)),
ID_DEPARTMENT = decode(l_ID_DEPARTMENT_n, 0, ID_DEPARTMENT_in, nvl(ID_DEPARTMENT_in, ID_DEPARTMENT)),
NOTES = decode(l_NOTES_n, 0, NOTES_in, nvl(NOTES_in, NOTES)),
CREATE_TIME = decode(l_CREATE_TIME_n, 0, CREATE_TIME_in, nvl(CREATE_TIME_in, CREATE_TIME)),
FLG_TYPE_REGISTER = decode(l_FLG_TYPE_REGISTER_n, 0, FLG_TYPE_REGISTER_in, nvl(FLG_TYPE_REGISTER_in, FLG_TYPE_REGISTER)),
CREATE_INSTITUTION = decode(l_CREATE_INSTITUTION_n, 0, CREATE_INSTITUTION_in, nvl(CREATE_INSTITUTION_in, CREATE_INSTITUTION)),
UPDATE_USER = decode(l_UPDATE_USER_n, 0, UPDATE_USER_in, nvl(UPDATE_USER_in, UPDATE_USER)),
UPDATE_TIME = decode(l_UPDATE_TIME_n, 0, UPDATE_TIME_in, nvl(UPDATE_TIME_in, UPDATE_TIME)),
UPDATE_INSTITUTION = decode(l_UPDATE_INSTITUTION_n, 0, UPDATE_INSTITUTION_in, nvl(UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)),
ID_PROF_REGISTER = decode(l_ID_PROF_REGISTER_n, 0, ID_PROF_REGISTER_in, nvl(ID_PROF_REGISTER_in, ID_PROF_REGISTER)),
DT_REGISTER = decode(l_DT_REGISTER_n, 0, DT_REGISTER_in, nvl(DT_REGISTER_in, DT_REGISTER)),
ID_TEAM_TYPE = decode(l_ID_TEAM_TYPE_n, 0, ID_TEAM_TYPE_in, nvl(ID_TEAM_TYPE_in, ID_TEAM_TYPE)),
CREATE_USER = decode(l_CREATE_USER_n, 0, CREATE_USER_in, nvl(CREATE_USER_in, CREATE_USER)),
ID_EPISODE = decode(l_ID_EPISODE_n, 0, ID_EPISODE_in, nvl(ID_EPISODE_in, ID_EPISODE))
 WHERE
ID_PROF_TEAM_HIST = ID_PROF_TEAM_HIST_IN
RETURNING ROWID BULK COLLECT INTO l_rows_out;
IF (rows_out IS NULL)
THEN
rows_out := table_varchar();
END IF;
rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end upd;

-- Update any/all columns by primary key. If you pass NULL, then
-- the current column value is set to itself. If you need a more
-- selected UPDATE then use one of the onecol procedures below.
PROCEDURE upd
(
ID_PROF_TEAM_HIST_in IN prof_team_hist.ID_PROF_TEAM_HIST%TYPE,
ID_PROF_TEAM_in IN PROF_TEAM_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
ID_PROF_TEAM_nin IN BOOLEAN := TRUE,
ID_PROF_TEAM_LEADER_in IN PROF_TEAM_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
ID_PROF_TEAM_LEADER_nin IN BOOLEAN := TRUE,
PROF_TEAM_NAME_in IN PROF_TEAM_HIST.PROF_TEAM_NAME%TYPE DEFAULT NULL,
PROF_TEAM_NAME_nin IN BOOLEAN := TRUE,
PROF_TEAM_DESC_in IN PROF_TEAM_HIST.PROF_TEAM_DESC%TYPE DEFAULT NULL,
PROF_TEAM_DESC_nin IN BOOLEAN := TRUE,
FLG_AVAILABLE_in IN PROF_TEAM_HIST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_AVAILABLE_nin IN BOOLEAN := TRUE,
FLG_STATUS_in IN PROF_TEAM_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_STATUS_nin IN BOOLEAN := TRUE,
ID_SOFTWARE_in IN PROF_TEAM_HIST.ID_SOFTWARE%TYPE DEFAULT NULL,
ID_SOFTWARE_nin IN BOOLEAN := TRUE,
ID_INSTITUTION_in IN PROF_TEAM_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
ID_INSTITUTION_nin IN BOOLEAN := TRUE,
FLG_TYPE_in IN PROF_TEAM_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_TYPE_nin IN BOOLEAN := TRUE,
DT_BEGIN_TSTZ_in IN PROF_TEAM_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
DT_BEGIN_TSTZ_nin IN BOOLEAN := TRUE,
DT_END_TSTZ_in IN PROF_TEAM_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
DT_END_TSTZ_nin IN BOOLEAN := TRUE,
ID_DEPARTMENT_in IN PROF_TEAM_HIST.ID_DEPARTMENT%TYPE DEFAULT NULL,
ID_DEPARTMENT_nin IN BOOLEAN := TRUE,
NOTES_in IN PROF_TEAM_HIST.NOTES%TYPE DEFAULT NULL,
NOTES_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN PROF_TEAM_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
FLG_TYPE_REGISTER_in IN PROF_TEAM_HIST.FLG_TYPE_REGISTER%TYPE DEFAULT NULL,
FLG_TYPE_REGISTER_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN PROF_TEAM_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN PROF_TEAM_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN PROF_TEAM_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN PROF_TEAM_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
ID_PROF_REGISTER_in IN PROF_TEAM_HIST.ID_PROF_REGISTER%TYPE DEFAULT NULL,
ID_PROF_REGISTER_nin IN BOOLEAN := TRUE,
DT_REGISTER_in IN PROF_TEAM_HIST.DT_REGISTER%TYPE DEFAULT NULL,
DT_REGISTER_nin IN BOOLEAN := TRUE,
ID_TEAM_TYPE_in IN PROF_TEAM_HIST.ID_TEAM_TYPE%TYPE DEFAULT NULL,
ID_TEAM_TYPE_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN PROF_TEAM_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
ID_EPISODE_in IN PROF_TEAM_HIST.ID_EPISODE%TYPE DEFAULT NULL,
ID_EPISODE_nin IN BOOLEAN := TRUE,
handle_error_in        IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd(
ID_PROF_TEAM_HIST_IN => ID_PROF_TEAM_HIST_IN,
ID_PROF_TEAM_IN => ID_PROF_TEAM_IN,
ID_PROF_TEAM_NIN => ID_PROF_TEAM_NIN,
ID_PROF_TEAM_LEADER_IN => ID_PROF_TEAM_LEADER_IN,
ID_PROF_TEAM_LEADER_NIN => ID_PROF_TEAM_LEADER_NIN,
PROF_TEAM_NAME_IN => PROF_TEAM_NAME_IN,
PROF_TEAM_NAME_NIN => PROF_TEAM_NAME_NIN,
PROF_TEAM_DESC_IN => PROF_TEAM_DESC_IN,
PROF_TEAM_DESC_NIN => PROF_TEAM_DESC_NIN,
FLG_AVAILABLE_IN => FLG_AVAILABLE_IN,
FLG_AVAILABLE_NIN => FLG_AVAILABLE_NIN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_STATUS_NIN => FLG_STATUS_NIN,
ID_SOFTWARE_IN => ID_SOFTWARE_IN,
ID_SOFTWARE_NIN => ID_SOFTWARE_NIN,
ID_INSTITUTION_IN => ID_INSTITUTION_IN,
ID_INSTITUTION_NIN => ID_INSTITUTION_NIN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_TYPE_NIN => FLG_TYPE_NIN,
DT_BEGIN_TSTZ_IN => DT_BEGIN_TSTZ_IN,
DT_BEGIN_TSTZ_NIN => DT_BEGIN_TSTZ_NIN,
DT_END_TSTZ_IN => DT_END_TSTZ_IN,
DT_END_TSTZ_NIN => DT_END_TSTZ_NIN,
ID_DEPARTMENT_IN => ID_DEPARTMENT_IN,
ID_DEPARTMENT_NIN => ID_DEPARTMENT_NIN,
NOTES_IN => NOTES_IN,
NOTES_NIN => NOTES_NIN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_TIME_NIN => CREATE_TIME_NIN,
FLG_TYPE_REGISTER_IN => FLG_TYPE_REGISTER_IN,
FLG_TYPE_REGISTER_NIN => FLG_TYPE_REGISTER_NIN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
CREATE_INSTITUTION_NIN => CREATE_INSTITUTION_NIN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_USER_NIN => UPDATE_USER_NIN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_TIME_NIN => UPDATE_TIME_NIN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
UPDATE_INSTITUTION_NIN => UPDATE_INSTITUTION_NIN,
ID_PROF_REGISTER_IN => ID_PROF_REGISTER_IN,
ID_PROF_REGISTER_NIN => ID_PROF_REGISTER_NIN,
DT_REGISTER_IN => DT_REGISTER_IN,
DT_REGISTER_NIN => DT_REGISTER_NIN,
ID_TEAM_TYPE_IN => ID_TEAM_TYPE_IN,
ID_TEAM_TYPE_NIN => ID_TEAM_TYPE_NIN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_USER_NIN => CREATE_USER_NIN,
ID_EPISODE_IN => ID_EPISODE_IN,
ID_EPISODE_NIN => ID_EPISODE_NIN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update any/all columns by dynamic WHERE
-- If you pass NULL, then the current column value is set to itself
PROCEDURE upd
(
ID_PROF_TEAM_in IN PROF_TEAM_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
ID_PROF_TEAM_nin IN BOOLEAN := TRUE,
ID_PROF_TEAM_LEADER_in IN PROF_TEAM_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
ID_PROF_TEAM_LEADER_nin IN BOOLEAN := TRUE,
PROF_TEAM_NAME_in IN PROF_TEAM_HIST.PROF_TEAM_NAME%TYPE DEFAULT NULL,
PROF_TEAM_NAME_nin IN BOOLEAN := TRUE,
PROF_TEAM_DESC_in IN PROF_TEAM_HIST.PROF_TEAM_DESC%TYPE DEFAULT NULL,
PROF_TEAM_DESC_nin IN BOOLEAN := TRUE,
FLG_AVAILABLE_in IN PROF_TEAM_HIST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_AVAILABLE_nin IN BOOLEAN := TRUE,
FLG_STATUS_in IN PROF_TEAM_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_STATUS_nin IN BOOLEAN := TRUE,
ID_SOFTWARE_in IN PROF_TEAM_HIST.ID_SOFTWARE%TYPE DEFAULT NULL,
ID_SOFTWARE_nin IN BOOLEAN := TRUE,
ID_INSTITUTION_in IN PROF_TEAM_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
ID_INSTITUTION_nin IN BOOLEAN := TRUE,
FLG_TYPE_in IN PROF_TEAM_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_TYPE_nin IN BOOLEAN := TRUE,
DT_BEGIN_TSTZ_in IN PROF_TEAM_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
DT_BEGIN_TSTZ_nin IN BOOLEAN := TRUE,
DT_END_TSTZ_in IN PROF_TEAM_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
DT_END_TSTZ_nin IN BOOLEAN := TRUE,
ID_DEPARTMENT_in IN PROF_TEAM_HIST.ID_DEPARTMENT%TYPE DEFAULT NULL,
ID_DEPARTMENT_nin IN BOOLEAN := TRUE,
NOTES_in IN PROF_TEAM_HIST.NOTES%TYPE DEFAULT NULL,
NOTES_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN PROF_TEAM_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
FLG_TYPE_REGISTER_in IN PROF_TEAM_HIST.FLG_TYPE_REGISTER%TYPE DEFAULT NULL,
FLG_TYPE_REGISTER_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN PROF_TEAM_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN PROF_TEAM_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN PROF_TEAM_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN PROF_TEAM_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
ID_PROF_REGISTER_in IN PROF_TEAM_HIST.ID_PROF_REGISTER%TYPE DEFAULT NULL,
ID_PROF_REGISTER_nin IN BOOLEAN := TRUE,
DT_REGISTER_in IN PROF_TEAM_HIST.DT_REGISTER%TYPE DEFAULT NULL,
DT_REGISTER_nin IN BOOLEAN := TRUE,
ID_TEAM_TYPE_in IN PROF_TEAM_HIST.ID_TEAM_TYPE%TYPE DEFAULT NULL,
ID_TEAM_TYPE_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN PROF_TEAM_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
ID_EPISODE_in IN PROF_TEAM_HIST.ID_EPISODE%TYPE DEFAULT NULL,
ID_EPISODE_nin IN BOOLEAN := TRUE,
where_in               IN VARCHAR2,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
)
is
l_sql                  VARCHAR2(32767);
l_rows_out             table_varchar;
l_ID_PROF_TEAM_n number(1) := sys.diutil.bool_to_int(ID_PROF_TEAM_nin);
l_ID_PROF_TEAM_LEADER_n number(1) := sys.diutil.bool_to_int(ID_PROF_TEAM_LEADER_nin);
l_PROF_TEAM_NAME_n number(1) := sys.diutil.bool_to_int(PROF_TEAM_NAME_nin);
l_PROF_TEAM_DESC_n number(1) := sys.diutil.bool_to_int(PROF_TEAM_DESC_nin);
l_FLG_AVAILABLE_n number(1) := sys.diutil.bool_to_int(FLG_AVAILABLE_nin);
l_FLG_STATUS_n number(1) := sys.diutil.bool_to_int(FLG_STATUS_nin);
l_ID_SOFTWARE_n number(1) := sys.diutil.bool_to_int(ID_SOFTWARE_nin);
l_ID_INSTITUTION_n number(1) := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
l_FLG_TYPE_n number(1) := sys.diutil.bool_to_int(FLG_TYPE_nin);
l_DT_BEGIN_TSTZ_n number(1) := sys.diutil.bool_to_int(DT_BEGIN_TSTZ_nin);
l_DT_END_TSTZ_n number(1) := sys.diutil.bool_to_int(DT_END_TSTZ_nin);
l_ID_DEPARTMENT_n number(1) := sys.diutil.bool_to_int(ID_DEPARTMENT_nin);
l_NOTES_n number(1) := sys.diutil.bool_to_int(NOTES_nin);
l_CREATE_TIME_n number(1) := sys.diutil.bool_to_int(CREATE_TIME_nin);
l_FLG_TYPE_REGISTER_n number(1) := sys.diutil.bool_to_int(FLG_TYPE_REGISTER_nin);
l_CREATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
l_UPDATE_USER_n number(1) := sys.diutil.bool_to_int(UPDATE_USER_nin);
l_UPDATE_TIME_n number(1) := sys.diutil.bool_to_int(UPDATE_TIME_nin);
l_UPDATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
l_ID_PROF_REGISTER_n number(1) := sys.diutil.bool_to_int(ID_PROF_REGISTER_nin);
l_DT_REGISTER_n number(1) := sys.diutil.bool_to_int(DT_REGISTER_nin);
l_ID_TEAM_TYPE_n number(1) := sys.diutil.bool_to_int(ID_TEAM_TYPE_nin);
l_CREATE_USER_n number(1) := sys.diutil.bool_to_int(CREATE_USER_nin);
l_ID_EPISODE_n number(1) := sys.diutil.bool_to_int(ID_EPISODE_nin);
begin
l_ID_PROF_TEAM_n := sys.diutil.bool_to_int(ID_PROF_TEAM_nin);
l_ID_PROF_TEAM_LEADER_n := sys.diutil.bool_to_int(ID_PROF_TEAM_LEADER_nin);
l_PROF_TEAM_NAME_n := sys.diutil.bool_to_int(PROF_TEAM_NAME_nin);
l_PROF_TEAM_DESC_n := sys.diutil.bool_to_int(PROF_TEAM_DESC_nin);
l_FLG_AVAILABLE_n := sys.diutil.bool_to_int(FLG_AVAILABLE_nin);
l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
l_ID_SOFTWARE_n := sys.diutil.bool_to_int(ID_SOFTWARE_nin);
l_ID_INSTITUTION_n := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
l_FLG_TYPE_n := sys.diutil.bool_to_int(FLG_TYPE_nin);
l_DT_BEGIN_TSTZ_n := sys.diutil.bool_to_int(DT_BEGIN_TSTZ_nin);
l_DT_END_TSTZ_n := sys.diutil.bool_to_int(DT_END_TSTZ_nin);
l_ID_DEPARTMENT_n := sys.diutil.bool_to_int(ID_DEPARTMENT_nin);
l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
l_FLG_TYPE_REGISTER_n := sys.diutil.bool_to_int(FLG_TYPE_REGISTER_nin);
l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
l_ID_PROF_REGISTER_n := sys.diutil.bool_to_int(ID_PROF_REGISTER_nin);
l_DT_REGISTER_n := sys.diutil.bool_to_int(DT_REGISTER_nin);
l_ID_TEAM_TYPE_n := sys.diutil.bool_to_int(ID_TEAM_TYPE_nin);
l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
l_sql := 'UPDATE prof_team_hist SET' ||
' ID_PROF_TEAM = decode (' || l_ID_PROF_TEAM_n || ',0,:ID_PROF_TEAM_in, NVL (:ID_PROF_TEAM_in, ID_PROF_TEAM)) ' ||',' ||
' ID_PROF_TEAM_LEADER = decode (' || l_ID_PROF_TEAM_LEADER_n || ',0,:ID_PROF_TEAM_LEADER_in, NVL (:ID_PROF_TEAM_LEADER_in, ID_PROF_TEAM_LEADER)) ' ||',' ||
' PROF_TEAM_NAME = decode (' || l_PROF_TEAM_NAME_n || ',0,:PROF_TEAM_NAME_in, NVL (:PROF_TEAM_NAME_in, PROF_TEAM_NAME)) ' ||',' ||
' PROF_TEAM_DESC = decode (' || l_PROF_TEAM_DESC_n || ',0,:PROF_TEAM_DESC_in, NVL (:PROF_TEAM_DESC_in, PROF_TEAM_DESC)) ' ||',' ||
' FLG_AVAILABLE = decode (' || l_FLG_AVAILABLE_n || ',0,:FLG_AVAILABLE_in, NVL (:FLG_AVAILABLE_in, FLG_AVAILABLE)) ' ||',' ||
' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' ||',' ||
' ID_SOFTWARE = decode (' || l_ID_SOFTWARE_n || ',0,:ID_SOFTWARE_in, NVL (:ID_SOFTWARE_in, ID_SOFTWARE)) ' ||',' ||
' ID_INSTITUTION = decode (' || l_ID_INSTITUTION_n || ',0,:ID_INSTITUTION_in, NVL (:ID_INSTITUTION_in, ID_INSTITUTION)) ' ||',' ||
' FLG_TYPE = decode (' || l_FLG_TYPE_n || ',0,:FLG_TYPE_in, NVL (:FLG_TYPE_in, FLG_TYPE)) ' ||',' ||
' DT_BEGIN_TSTZ = decode (' || l_DT_BEGIN_TSTZ_n || ',0,:DT_BEGIN_TSTZ_in, NVL (:DT_BEGIN_TSTZ_in, DT_BEGIN_TSTZ)) ' ||',' ||
' DT_END_TSTZ = decode (' || l_DT_END_TSTZ_n || ',0,:DT_END_TSTZ_in, NVL (:DT_END_TSTZ_in, DT_END_TSTZ)) ' ||',' ||
' ID_DEPARTMENT = decode (' || l_ID_DEPARTMENT_n || ',0,:ID_DEPARTMENT_in, NVL (:ID_DEPARTMENT_in, ID_DEPARTMENT)) ' ||',' ||
' NOTES = decode (' || l_NOTES_n || ',0,:NOTES_in, NVL (:NOTES_in, NOTES)) ' ||',' ||
' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' ||',' ||
' FLG_TYPE_REGISTER = decode (' || l_FLG_TYPE_REGISTER_n || ',0,:FLG_TYPE_REGISTER_in, NVL (:FLG_TYPE_REGISTER_in, FLG_TYPE_REGISTER)) ' ||',' ||
' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' ||',' ||
' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' ||',' ||
' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' ||',' ||
' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' ||',' ||
' ID_PROF_REGISTER = decode (' || l_ID_PROF_REGISTER_n || ',0,:ID_PROF_REGISTER_in, NVL (:ID_PROF_REGISTER_in, ID_PROF_REGISTER)) ' ||',' ||
' DT_REGISTER = decode (' || l_DT_REGISTER_n || ',0,:DT_REGISTER_in, NVL (:DT_REGISTER_in, DT_REGISTER)) ' ||',' ||
' ID_TEAM_TYPE = decode (' || l_ID_TEAM_TYPE_n || ',0,:ID_TEAM_TYPE_in, NVL (:ID_TEAM_TYPE_in, ID_TEAM_TYPE)) ' ||',' ||
' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' ||',' ||
' ID_EPISODE = decode (' || l_ID_EPISODE_n || ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' ||
' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
USING IN
ID_PROF_TEAM_IN,
ID_PROF_TEAM_LEADER_IN,
PROF_TEAM_NAME_IN,
PROF_TEAM_DESC_IN,
FLG_AVAILABLE_IN,
FLG_STATUS_IN,
ID_SOFTWARE_IN,
ID_INSTITUTION_IN,
FLG_TYPE_IN,
DT_BEGIN_TSTZ_IN,
DT_END_TSTZ_IN,
ID_DEPARTMENT_IN,
NOTES_IN,
CREATE_TIME_IN,
FLG_TYPE_REGISTER_IN,
CREATE_INSTITUTION_IN,
UPDATE_USER_IN,
UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN,
ID_PROF_REGISTER_IN,
DT_REGISTER_IN,
ID_TEAM_TYPE_IN,
CREATE_USER_IN,
ID_EPISODE_IN,
OUT l_rows_out;
IF (rows_out IS NULL)
THEN
rows_out := table_varchar();
END IF;
rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end upd;

--Update any/all columns by dynamic WHERE
-- If you pass NULL, then the current column value is set to itself
PROCEDURE upd
(
ID_PROF_TEAM_in IN PROF_TEAM_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
ID_PROF_TEAM_nin IN BOOLEAN := TRUE,
ID_PROF_TEAM_LEADER_in IN PROF_TEAM_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
ID_PROF_TEAM_LEADER_nin IN BOOLEAN := TRUE,
PROF_TEAM_NAME_in IN PROF_TEAM_HIST.PROF_TEAM_NAME%TYPE DEFAULT NULL,
PROF_TEAM_NAME_nin IN BOOLEAN := TRUE,
PROF_TEAM_DESC_in IN PROF_TEAM_HIST.PROF_TEAM_DESC%TYPE DEFAULT NULL,
PROF_TEAM_DESC_nin IN BOOLEAN := TRUE,
FLG_AVAILABLE_in IN PROF_TEAM_HIST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_AVAILABLE_nin IN BOOLEAN := TRUE,
FLG_STATUS_in IN PROF_TEAM_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_STATUS_nin IN BOOLEAN := TRUE,
ID_SOFTWARE_in IN PROF_TEAM_HIST.ID_SOFTWARE%TYPE DEFAULT NULL,
ID_SOFTWARE_nin IN BOOLEAN := TRUE,
ID_INSTITUTION_in IN PROF_TEAM_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
ID_INSTITUTION_nin IN BOOLEAN := TRUE,
FLG_TYPE_in IN PROF_TEAM_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_TYPE_nin IN BOOLEAN := TRUE,
DT_BEGIN_TSTZ_in IN PROF_TEAM_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
DT_BEGIN_TSTZ_nin IN BOOLEAN := TRUE,
DT_END_TSTZ_in IN PROF_TEAM_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
DT_END_TSTZ_nin IN BOOLEAN := TRUE,
ID_DEPARTMENT_in IN PROF_TEAM_HIST.ID_DEPARTMENT%TYPE DEFAULT NULL,
ID_DEPARTMENT_nin IN BOOLEAN := TRUE,
NOTES_in IN PROF_TEAM_HIST.NOTES%TYPE DEFAULT NULL,
NOTES_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN PROF_TEAM_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
FLG_TYPE_REGISTER_in IN PROF_TEAM_HIST.FLG_TYPE_REGISTER%TYPE DEFAULT NULL,
FLG_TYPE_REGISTER_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN PROF_TEAM_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN PROF_TEAM_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN PROF_TEAM_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN PROF_TEAM_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
ID_PROF_REGISTER_in IN PROF_TEAM_HIST.ID_PROF_REGISTER%TYPE DEFAULT NULL,
ID_PROF_REGISTER_nin IN BOOLEAN := TRUE,
DT_REGISTER_in IN PROF_TEAM_HIST.DT_REGISTER%TYPE DEFAULT NULL,
DT_REGISTER_nin IN BOOLEAN := TRUE,
ID_TEAM_TYPE_in IN PROF_TEAM_HIST.ID_TEAM_TYPE%TYPE DEFAULT NULL,
ID_TEAM_TYPE_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN PROF_TEAM_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
ID_EPISODE_in IN PROF_TEAM_HIST.ID_EPISODE%TYPE DEFAULT NULL,
ID_EPISODE_nin IN BOOLEAN := TRUE,
where_in               IN VARCHAR2,
handle_error_in        IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd(
ID_PROF_TEAM_IN => ID_PROF_TEAM_IN,
ID_PROF_TEAM_NIN => ID_PROF_TEAM_NIN,
ID_PROF_TEAM_LEADER_IN => ID_PROF_TEAM_LEADER_IN,
ID_PROF_TEAM_LEADER_NIN => ID_PROF_TEAM_LEADER_NIN,
PROF_TEAM_NAME_IN => PROF_TEAM_NAME_IN,
PROF_TEAM_NAME_NIN => PROF_TEAM_NAME_NIN,
PROF_TEAM_DESC_IN => PROF_TEAM_DESC_IN,
PROF_TEAM_DESC_NIN => PROF_TEAM_DESC_NIN,
FLG_AVAILABLE_IN => FLG_AVAILABLE_IN,
FLG_AVAILABLE_NIN => FLG_AVAILABLE_NIN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_STATUS_NIN => FLG_STATUS_NIN,
ID_SOFTWARE_IN => ID_SOFTWARE_IN,
ID_SOFTWARE_NIN => ID_SOFTWARE_NIN,
ID_INSTITUTION_IN => ID_INSTITUTION_IN,
ID_INSTITUTION_NIN => ID_INSTITUTION_NIN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_TYPE_NIN => FLG_TYPE_NIN,
DT_BEGIN_TSTZ_IN => DT_BEGIN_TSTZ_IN,
DT_BEGIN_TSTZ_NIN => DT_BEGIN_TSTZ_NIN,
DT_END_TSTZ_IN => DT_END_TSTZ_IN,
DT_END_TSTZ_NIN => DT_END_TSTZ_NIN,
ID_DEPARTMENT_IN => ID_DEPARTMENT_IN,
ID_DEPARTMENT_NIN => ID_DEPARTMENT_NIN,
NOTES_IN => NOTES_IN,
NOTES_NIN => NOTES_NIN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_TIME_NIN => CREATE_TIME_NIN,
FLG_TYPE_REGISTER_IN => FLG_TYPE_REGISTER_IN,
FLG_TYPE_REGISTER_NIN => FLG_TYPE_REGISTER_NIN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
CREATE_INSTITUTION_NIN => CREATE_INSTITUTION_NIN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_USER_NIN => UPDATE_USER_NIN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_TIME_NIN => UPDATE_TIME_NIN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
UPDATE_INSTITUTION_NIN => UPDATE_INSTITUTION_NIN,
ID_PROF_REGISTER_IN => ID_PROF_REGISTER_IN,
ID_PROF_REGISTER_NIN => ID_PROF_REGISTER_NIN,
DT_REGISTER_IN => DT_REGISTER_IN,
DT_REGISTER_NIN => DT_REGISTER_NIN,
ID_TEAM_TYPE_IN => ID_TEAM_TYPE_IN,
ID_TEAM_TYPE_NIN => ID_TEAM_TYPE_NIN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_USER_NIN => CREATE_USER_NIN,
ID_EPISODE_IN => ID_EPISODE_IN,
ID_EPISODE_NIN => ID_EPISODE_NIN,
where_in               => where_in,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update/insert columns (with rows_out)
PROCEDURE upd_ins
(
ID_PROF_TEAM_HIST_in IN prof_team_hist.ID_PROF_TEAM_HIST%TYPE,
ID_PROF_TEAM_in IN PROF_TEAM_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
ID_PROF_TEAM_LEADER_in IN PROF_TEAM_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
PROF_TEAM_NAME_in IN PROF_TEAM_HIST.PROF_TEAM_NAME%TYPE DEFAULT NULL,
PROF_TEAM_DESC_in IN PROF_TEAM_HIST.PROF_TEAM_DESC%TYPE DEFAULT NULL,
FLG_AVAILABLE_in IN PROF_TEAM_HIST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_STATUS_in IN PROF_TEAM_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_SOFTWARE_in IN PROF_TEAM_HIST.ID_SOFTWARE%TYPE DEFAULT NULL,
ID_INSTITUTION_in IN PROF_TEAM_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN PROF_TEAM_HIST.FLG_TYPE%TYPE DEFAULT NULL,
DT_BEGIN_TSTZ_in IN PROF_TEAM_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
DT_END_TSTZ_in IN PROF_TEAM_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
ID_DEPARTMENT_in IN PROF_TEAM_HIST.ID_DEPARTMENT%TYPE DEFAULT NULL,
NOTES_in IN PROF_TEAM_HIST.NOTES%TYPE DEFAULT NULL,
CREATE_TIME_in IN PROF_TEAM_HIST.CREATE_TIME%TYPE DEFAULT NULL,
FLG_TYPE_REGISTER_in IN PROF_TEAM_HIST.FLG_TYPE_REGISTER%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN PROF_TEAM_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN PROF_TEAM_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN PROF_TEAM_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN PROF_TEAM_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_PROF_REGISTER_in IN PROF_TEAM_HIST.ID_PROF_REGISTER%TYPE DEFAULT NULL,
DT_REGISTER_in IN PROF_TEAM_HIST.DT_REGISTER%TYPE DEFAULT NULL,
ID_TEAM_TYPE_in IN PROF_TEAM_HIST.ID_TEAM_TYPE%TYPE DEFAULT NULL,
CREATE_USER_in IN PROF_TEAM_HIST.CREATE_USER%TYPE DEFAULT NULL,
ID_EPISODE_in IN PROF_TEAM_HIST.ID_EPISODE%TYPE DEFAULT NULL,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
)
is
begin
upd(
ID_PROF_TEAM_HIST_IN => ID_PROF_TEAM_HIST_IN,
ID_PROF_TEAM_IN => ID_PROF_TEAM_IN,
ID_PROF_TEAM_LEADER_IN => ID_PROF_TEAM_LEADER_IN,
PROF_TEAM_NAME_IN => PROF_TEAM_NAME_IN,
PROF_TEAM_DESC_IN => PROF_TEAM_DESC_IN,
FLG_AVAILABLE_IN => FLG_AVAILABLE_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
ID_SOFTWARE_IN => ID_SOFTWARE_IN,
ID_INSTITUTION_IN => ID_INSTITUTION_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
DT_BEGIN_TSTZ_IN => DT_BEGIN_TSTZ_IN,
DT_END_TSTZ_IN => DT_END_TSTZ_IN,
ID_DEPARTMENT_IN => ID_DEPARTMENT_IN,
NOTES_IN => NOTES_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
FLG_TYPE_REGISTER_IN => FLG_TYPE_REGISTER_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
ID_PROF_REGISTER_IN => ID_PROF_REGISTER_IN,
DT_REGISTER_IN => DT_REGISTER_IN,
ID_TEAM_TYPE_IN => ID_TEAM_TYPE_IN,
CREATE_USER_IN => CREATE_USER_IN,
ID_EPISODE_IN => ID_EPISODE_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
IF SQL%ROWCOUNT = 0
THEN
ins(
ID_PROF_TEAM_HIST_IN => ID_PROF_TEAM_HIST_IN,
ID_PROF_TEAM_IN => ID_PROF_TEAM_IN,
ID_PROF_TEAM_LEADER_IN => ID_PROF_TEAM_LEADER_IN,
PROF_TEAM_NAME_IN => PROF_TEAM_NAME_IN,
PROF_TEAM_DESC_IN => PROF_TEAM_DESC_IN,
FLG_AVAILABLE_IN => FLG_AVAILABLE_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
ID_SOFTWARE_IN => ID_SOFTWARE_IN,
ID_INSTITUTION_IN => ID_INSTITUTION_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
DT_BEGIN_TSTZ_IN => DT_BEGIN_TSTZ_IN,
DT_END_TSTZ_IN => DT_END_TSTZ_IN,
ID_DEPARTMENT_IN => ID_DEPARTMENT_IN,
NOTES_IN => NOTES_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
FLG_TYPE_REGISTER_IN => FLG_TYPE_REGISTER_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
ID_PROF_REGISTER_IN => ID_PROF_REGISTER_IN,
DT_REGISTER_IN => DT_REGISTER_IN,
ID_TEAM_TYPE_IN => ID_TEAM_TYPE_IN,
CREATE_USER_IN => CREATE_USER_IN,
ID_EPISODE_IN => ID_EPISODE_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
END IF;
end upd_ins;

--Update/insert columns (without rows_out)
PROCEDURE upd_ins
(
ID_PROF_TEAM_HIST_in IN prof_team_hist.ID_PROF_TEAM_HIST%TYPE,
ID_PROF_TEAM_in IN PROF_TEAM_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
ID_PROF_TEAM_LEADER_in IN PROF_TEAM_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
PROF_TEAM_NAME_in IN PROF_TEAM_HIST.PROF_TEAM_NAME%TYPE DEFAULT NULL,
PROF_TEAM_DESC_in IN PROF_TEAM_HIST.PROF_TEAM_DESC%TYPE DEFAULT NULL,
FLG_AVAILABLE_in IN PROF_TEAM_HIST.FLG_AVAILABLE%TYPE DEFAULT NULL,
FLG_STATUS_in IN PROF_TEAM_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_SOFTWARE_in IN PROF_TEAM_HIST.ID_SOFTWARE%TYPE DEFAULT NULL,
ID_INSTITUTION_in IN PROF_TEAM_HIST.ID_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN PROF_TEAM_HIST.FLG_TYPE%TYPE DEFAULT NULL,
DT_BEGIN_TSTZ_in IN PROF_TEAM_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
DT_END_TSTZ_in IN PROF_TEAM_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
ID_DEPARTMENT_in IN PROF_TEAM_HIST.ID_DEPARTMENT%TYPE DEFAULT NULL,
NOTES_in IN PROF_TEAM_HIST.NOTES%TYPE DEFAULT NULL,
CREATE_TIME_in IN PROF_TEAM_HIST.CREATE_TIME%TYPE DEFAULT NULL,
FLG_TYPE_REGISTER_in IN PROF_TEAM_HIST.FLG_TYPE_REGISTER%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN PROF_TEAM_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN PROF_TEAM_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN PROF_TEAM_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN PROF_TEAM_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_PROF_REGISTER_in IN PROF_TEAM_HIST.ID_PROF_REGISTER%TYPE DEFAULT NULL,
DT_REGISTER_in IN PROF_TEAM_HIST.DT_REGISTER%TYPE DEFAULT NULL,
ID_TEAM_TYPE_in IN PROF_TEAM_HIST.ID_TEAM_TYPE%TYPE DEFAULT NULL,
CREATE_USER_in IN PROF_TEAM_HIST.CREATE_USER%TYPE DEFAULT NULL,
ID_EPISODE_in IN PROF_TEAM_HIST.ID_EPISODE%TYPE DEFAULT NULL,
handle_error_in        IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd_ins(
ID_PROF_TEAM_HIST_IN,
ID_PROF_TEAM_IN,
ID_PROF_TEAM_LEADER_IN,
PROF_TEAM_NAME_IN,
PROF_TEAM_DESC_IN,
FLG_AVAILABLE_IN,
FLG_STATUS_IN,
ID_SOFTWARE_IN,
ID_INSTITUTION_IN,
FLG_TYPE_IN,
DT_BEGIN_TSTZ_IN,
DT_END_TSTZ_IN,
ID_DEPARTMENT_IN,
NOTES_IN,
CREATE_TIME_IN,
FLG_TYPE_REGISTER_IN,
CREATE_INSTITUTION_IN,
UPDATE_USER_IN,
UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN,
ID_PROF_REGISTER_IN,
DT_REGISTER_IN,
ID_TEAM_TYPE_IN,
CREATE_USER_IN,
ID_EPISODE_IN,
handle_error_in,
rows_out);
end upd_ins;

--Update by record (with rows_out)
PROCEDURE upd
(
rec_in          IN prof_team_hist%ROWTYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        IN OUT table_varchar
)
is
begin
upd(
ID_PROF_TEAM_HIST_IN => rec_in.ID_PROF_TEAM_HIST,
ID_PROF_TEAM_IN => rec_in.ID_PROF_TEAM,
ID_PROF_TEAM_LEADER_IN => rec_in.ID_PROF_TEAM_LEADER,
PROF_TEAM_NAME_IN => rec_in.PROF_TEAM_NAME,
PROF_TEAM_DESC_IN => rec_in.PROF_TEAM_DESC,
FLG_AVAILABLE_IN => rec_in.FLG_AVAILABLE,
FLG_STATUS_IN => rec_in.FLG_STATUS,
ID_SOFTWARE_IN => rec_in.ID_SOFTWARE,
ID_INSTITUTION_IN => rec_in.ID_INSTITUTION,
FLG_TYPE_IN => rec_in.FLG_TYPE,
DT_BEGIN_TSTZ_IN => rec_in.DT_BEGIN_TSTZ,
DT_END_TSTZ_IN => rec_in.DT_END_TSTZ,
ID_DEPARTMENT_IN => rec_in.ID_DEPARTMENT,
NOTES_IN => rec_in.NOTES,
CREATE_TIME_IN => rec_in.CREATE_TIME,
FLG_TYPE_REGISTER_IN => rec_in.FLG_TYPE_REGISTER,
CREATE_INSTITUTION_IN => rec_in.CREATE_INSTITUTION,
UPDATE_USER_IN => rec_in.UPDATE_USER,
UPDATE_TIME_IN => rec_in.UPDATE_TIME,
UPDATE_INSTITUTION_IN => rec_in.UPDATE_INSTITUTION,
ID_PROF_REGISTER_IN => rec_in.ID_PROF_REGISTER,
DT_REGISTER_IN => rec_in.DT_REGISTER,
ID_TEAM_TYPE_IN => rec_in.ID_TEAM_TYPE,
CREATE_USER_IN => rec_in.CREATE_USER,
ID_EPISODE_IN => rec_in.ID_EPISODE,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update by record (without rows_out)
PROCEDURE upd
(
rec_in          IN prof_team_hist%ROWTYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd(
ID_PROF_TEAM_HIST_IN => rec_in.ID_PROF_TEAM_HIST,
ID_PROF_TEAM_IN => rec_in.ID_PROF_TEAM,
ID_PROF_TEAM_LEADER_IN => rec_in.ID_PROF_TEAM_LEADER,
PROF_TEAM_NAME_IN => rec_in.PROF_TEAM_NAME,
PROF_TEAM_DESC_IN => rec_in.PROF_TEAM_DESC,
FLG_AVAILABLE_IN => rec_in.FLG_AVAILABLE,
FLG_STATUS_IN => rec_in.FLG_STATUS,
ID_SOFTWARE_IN => rec_in.ID_SOFTWARE,
ID_INSTITUTION_IN => rec_in.ID_INSTITUTION,
FLG_TYPE_IN => rec_in.FLG_TYPE,
DT_BEGIN_TSTZ_IN => rec_in.DT_BEGIN_TSTZ,
DT_END_TSTZ_IN => rec_in.DT_END_TSTZ,
ID_DEPARTMENT_IN => rec_in.ID_DEPARTMENT,
NOTES_IN => rec_in.NOTES,
CREATE_TIME_IN => rec_in.CREATE_TIME,
FLG_TYPE_REGISTER_IN => rec_in.FLG_TYPE_REGISTER,
CREATE_INSTITUTION_IN => rec_in.CREATE_INSTITUTION,
UPDATE_USER_IN => rec_in.UPDATE_USER,
UPDATE_TIME_IN => rec_in.UPDATE_TIME,
UPDATE_INSTITUTION_IN => rec_in.UPDATE_INSTITUTION,
ID_PROF_REGISTER_IN => rec_in.ID_PROF_REGISTER,
DT_REGISTER_IN => rec_in.DT_REGISTER,
ID_TEAM_TYPE_IN => rec_in.ID_TEAM_TYPE,
CREATE_USER_IN => rec_in.CREATE_USER,
ID_EPISODE_IN => rec_in.ID_EPISODE,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update with collection (with rows_out)
PROCEDURE upd
(
col_in            IN prof_team_hist_tc,
ignore_if_null_in IN BOOLEAN := TRUE,
handle_error_in   IN BOOLEAN := TRUE,
rows_out          IN OUT table_varchar
)
is
l_ID_PROF_TEAM_HIST ID_PROF_TEAM_HIST_CC;
l_ID_PROF_TEAM ID_PROF_TEAM_CC;
l_ID_PROF_TEAM_LEADER ID_PROF_TEAM_LEADER_CC;
l_PROF_TEAM_NAME PROF_TEAM_NAME_CC;
l_PROF_TEAM_DESC PROF_TEAM_DESC_CC;
l_FLG_AVAILABLE FLG_AVAILABLE_CC;
l_FLG_STATUS FLG_STATUS_CC;
l_ID_SOFTWARE ID_SOFTWARE_CC;
l_ID_INSTITUTION ID_INSTITUTION_CC;
l_FLG_TYPE FLG_TYPE_CC;
l_DT_BEGIN_TSTZ DT_BEGIN_TSTZ_CC;
l_DT_END_TSTZ DT_END_TSTZ_CC;
l_ID_DEPARTMENT ID_DEPARTMENT_CC;
l_NOTES NOTES_CC;
l_CREATE_TIME CREATE_TIME_CC;
l_FLG_TYPE_REGISTER FLG_TYPE_REGISTER_CC;
l_CREATE_INSTITUTION CREATE_INSTITUTION_CC;
l_UPDATE_USER UPDATE_USER_CC;
l_UPDATE_TIME UPDATE_TIME_CC;
l_UPDATE_INSTITUTION UPDATE_INSTITUTION_CC;
l_ID_PROF_REGISTER ID_PROF_REGISTER_CC;
l_DT_REGISTER DT_REGISTER_CC;
l_ID_TEAM_TYPE ID_TEAM_TYPE_CC;
l_CREATE_USER CREATE_USER_CC;
l_ID_EPISODE ID_EPISODE_CC;
begin
FOR i IN col_in.FIRST .. col_in.LAST
LOOP
l_ID_PROF_TEAM_HIST(i) := col_in(i).ID_PROF_TEAM_HIST;
l_ID_PROF_TEAM(i) := col_in(i).ID_PROF_TEAM;
l_ID_PROF_TEAM_LEADER(i) := col_in(i).ID_PROF_TEAM_LEADER;
l_PROF_TEAM_NAME(i) := col_in(i).PROF_TEAM_NAME;
l_PROF_TEAM_DESC(i) := col_in(i).PROF_TEAM_DESC;
l_FLG_AVAILABLE(i) := col_in(i).FLG_AVAILABLE;
l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
l_ID_SOFTWARE(i) := col_in(i).ID_SOFTWARE;
l_ID_INSTITUTION(i) := col_in(i).ID_INSTITUTION;
l_FLG_TYPE(i) := col_in(i).FLG_TYPE;
l_DT_BEGIN_TSTZ(i) := col_in(i).DT_BEGIN_TSTZ;
l_DT_END_TSTZ(i) := col_in(i).DT_END_TSTZ;
l_ID_DEPARTMENT(i) := col_in(i).ID_DEPARTMENT;
l_NOTES(i) := col_in(i).NOTES;
l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
l_FLG_TYPE_REGISTER(i) := col_in(i).FLG_TYPE_REGISTER;
l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
l_ID_PROF_REGISTER(i) := col_in(i).ID_PROF_REGISTER;
l_DT_REGISTER(i) := col_in(i).DT_REGISTER;
l_ID_TEAM_TYPE(i) := col_in(i).ID_TEAM_TYPE;
l_CREATE_USER(i) := col_in(i).CREATE_USER;
l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
END LOOP;
IF nvl(ignore_if_null_in, FALSE)
THEN
-- Set any columns to their current values
-- if incoming value is NULL.
-- Put WHEN clause on column-level triggers!
FORALL i IN col_in.FIRST .. col_in.LAST
UPDATE prof_team_hist
SET 
ID_PROF_TEAM = nvl(l_ID_PROF_TEAM(i), ID_PROF_TEAM),
ID_PROF_TEAM_LEADER = nvl(l_ID_PROF_TEAM_LEADER(i), ID_PROF_TEAM_LEADER),
PROF_TEAM_NAME = nvl(l_PROF_TEAM_NAME(i), PROF_TEAM_NAME),
PROF_TEAM_DESC = nvl(l_PROF_TEAM_DESC(i), PROF_TEAM_DESC),
FLG_AVAILABLE = nvl(l_FLG_AVAILABLE(i), FLG_AVAILABLE),
FLG_STATUS = nvl(l_FLG_STATUS(i), FLG_STATUS),
ID_SOFTWARE = nvl(l_ID_SOFTWARE(i), ID_SOFTWARE),
ID_INSTITUTION = nvl(l_ID_INSTITUTION(i), ID_INSTITUTION),
FLG_TYPE = nvl(l_FLG_TYPE(i), FLG_TYPE),
DT_BEGIN_TSTZ = nvl(l_DT_BEGIN_TSTZ(i), DT_BEGIN_TSTZ),
DT_END_TSTZ = nvl(l_DT_END_TSTZ(i), DT_END_TSTZ),
ID_DEPARTMENT = nvl(l_ID_DEPARTMENT(i), ID_DEPARTMENT),
NOTES = nvl(l_NOTES(i), NOTES),
CREATE_TIME = nvl(l_CREATE_TIME(i), CREATE_TIME),
FLG_TYPE_REGISTER = nvl(l_FLG_TYPE_REGISTER(i), FLG_TYPE_REGISTER),
CREATE_INSTITUTION = nvl(l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
UPDATE_USER = nvl(l_UPDATE_USER(i), UPDATE_USER),
UPDATE_TIME = nvl(l_UPDATE_TIME(i), UPDATE_TIME),
UPDATE_INSTITUTION = nvl(l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
ID_PROF_REGISTER = nvl(l_ID_PROF_REGISTER(i), ID_PROF_REGISTER),
DT_REGISTER = nvl(l_DT_REGISTER(i), DT_REGISTER),
ID_TEAM_TYPE = nvl(l_ID_TEAM_TYPE(i), ID_TEAM_TYPE),
CREATE_USER = nvl(l_CREATE_USER(i), CREATE_USER),
ID_EPISODE = nvl(l_ID_EPISODE(i), ID_EPISODE)
 WHERE 
ID_PROF_TEAM_HIST = l_ID_PROF_TEAM_HIST(i)
 returning rowid bulk collect into rows_out;
ELSE
FORALL i IN col_in.FIRST .. col_in.LAST
UPDATE prof_team_hist
SET 
ID_PROF_TEAM = l_ID_PROF_TEAM(i),
ID_PROF_TEAM_LEADER = l_ID_PROF_TEAM_LEADER(i),
PROF_TEAM_NAME = l_PROF_TEAM_NAME(i),
PROF_TEAM_DESC = l_PROF_TEAM_DESC(i),
FLG_AVAILABLE = l_FLG_AVAILABLE(i),
FLG_STATUS = l_FLG_STATUS(i),
ID_SOFTWARE = l_ID_SOFTWARE(i),
ID_INSTITUTION = l_ID_INSTITUTION(i),
FLG_TYPE = l_FLG_TYPE(i),
DT_BEGIN_TSTZ = l_DT_BEGIN_TSTZ(i),
DT_END_TSTZ = l_DT_END_TSTZ(i),
ID_DEPARTMENT = l_ID_DEPARTMENT(i),
NOTES = l_NOTES(i),
CREATE_TIME = l_CREATE_TIME(i),
FLG_TYPE_REGISTER = l_FLG_TYPE_REGISTER(i),
CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
UPDATE_USER = l_UPDATE_USER(i),
UPDATE_TIME = l_UPDATE_TIME(i),
UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
ID_PROF_REGISTER = l_ID_PROF_REGISTER(i),
DT_REGISTER = l_DT_REGISTER(i),
ID_TEAM_TYPE = l_ID_TEAM_TYPE(i),
CREATE_USER = l_CREATE_USER(i),
ID_EPISODE = l_ID_EPISODE(i)
 WHERE 
ID_PROF_TEAM_HIST = l_ID_PROF_TEAM_HIST(i)
 returning rowid bulk collect into rows_out;
END IF;

EXCEPTION
WHEN e_forall_error THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
LOOP
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END LOOP;
END IF;
WHEN OTHERS THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end upd;

--Update with collection (without rows_out)
PROCEDURE upd
(
col_in            IN prof_team_hist_tc,
ignore_if_null_in IN BOOLEAN := TRUE,
handle_error_in   IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
end upd;

--Dynamic update string
FUNCTION dynupdstr
(
colname_in IN all_tab_columns.column_name%TYPE,
where_in   IN VARCHAR2 := NULL
)
RETURN VARCHAR2 IS
BEGIN
RETURN 'BEGIN UPDATE prof_team_hist
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
END dynupdstr;

-- Use Native Dynamic SQL increment a single NUMBER column
-- for all rows specified by the dynamic WHERE clause (with rows_out)
PROCEDURE increment_onecol
(
colname_in         IN all_tab_columns.column_name%TYPE,
where_in           IN VARCHAR2,
increment_value_in IN NUMBER DEFAULT 1,
handle_error_in    IN BOOLEAN := TRUE,
rows_out           OUT table_varchar
)
is
begin
EXECUTE IMMEDIATE 'BEGIN UPDATE prof_team_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in,1) ||
' WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
USING OUT rows_out;
end increment_onecol;

-- Use Native Dynamic SQL increment a single NUMBER column
-- for all rows specified by the dynamic WHERE clause (without rows_out)
PROCEDURE increment_onecol
(
colname_in         IN all_tab_columns.column_name%TYPE,
where_in           IN VARCHAR2,
increment_value_in IN NUMBER DEFAULT 1,
handle_error_in    IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
EXECUTE IMMEDIATE 'UPDATE prof_team_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in,1) ||
' WHERE ' || nvl(where_in, '1=1');
end increment_onecol;

-- Delete one row by primary key
PROCEDURE del
(
ID_PROF_TEAM_HIST_in IN prof_team_hist.ID_PROF_TEAM_HIST%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM prof_team_hist
 WHERE
ID_PROF_TEAM_HIST = ID_PROF_TEAM_HIST_IN
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del;

-- Delete one row by primary key
PROCEDURE del
(
ID_PROF_TEAM_HIST_in IN prof_team_hist.ID_PROF_TEAM_HIST%TYPE,
handle_error_in        IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
del(
ID_PROF_TEAM_HIST_IN => ID_PROF_TEAM_HIST_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del;

-- Delete all rows for this PROF_TEAMH_DEP_FK foreign key value
PROCEDURE del_PROF_TEAMH_DEP_FK
(
ID_DEPARTMENT_in IN PROF_TEAM_HIST.ID_DEPARTMENT%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM prof_team_hist
 WHERE
ID_DEPARTMENT = ID_DEPARTMENT_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PROF_TEAMH_DEP_FK;

-- Delete all rows for this PROF_TEAMH_INST_FK foreign key value
PROCEDURE del_PROF_TEAMH_INST_FK
(
ID_INSTITUTION_in IN PROF_TEAM_HIST.ID_INSTITUTION%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM prof_team_hist
 WHERE
ID_INSTITUTION = ID_INSTITUTION_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PROF_TEAMH_INST_FK;

-- Delete all rows for this PROF_TEAMH_PROFRG_FK foreign key value
PROCEDURE del_PROF_TEAMH_PROFRG_FK
(
ID_PROF_REGISTER_in IN PROF_TEAM_HIST.ID_PROF_REGISTER%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM prof_team_hist
 WHERE
ID_PROF_REGISTER = ID_PROF_REGISTER_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PROF_TEAMH_PROFRG_FK;

-- Delete all rows for this PROF_TEAMH_PROF_FK foreign key value
PROCEDURE del_PROF_TEAMH_PROF_FK
(
ID_PROF_TEAM_LEADER_in IN PROF_TEAM_HIST.ID_PROF_TEAM_LEADER%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM prof_team_hist
 WHERE
ID_PROF_TEAM_LEADER = ID_PROF_TEAM_LEADER_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PROF_TEAMH_PROF_FK;

-- Delete all rows for this PROF_TEAMH_PTEAM_FK foreign key value
PROCEDURE del_PROF_TEAMH_PTEAM_FK
(
ID_PROF_TEAM_in IN PROF_TEAM_HIST.ID_PROF_TEAM%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM prof_team_hist
 WHERE
ID_PROF_TEAM = ID_PROF_TEAM_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PROF_TEAMH_PTEAM_FK;

-- Delete all rows for this PROF_TEAMH_SOFT_FK foreign key value
PROCEDURE del_PROF_TEAMH_SOFT_FK
(
ID_SOFTWARE_in IN PROF_TEAM_HIST.ID_SOFTWARE%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM prof_team_hist
 WHERE
ID_SOFTWARE = ID_SOFTWARE_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PROF_TEAMH_SOFT_FK;

-- Delete all rows for this PROF_TEAMH_TTYPE_FK foreign key value
PROCEDURE del_PROF_TEAMH_TTYPE_FK
(
ID_TEAM_TYPE_in IN PROF_TEAM_HIST.ID_TEAM_TYPE%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM prof_team_hist
 WHERE
ID_TEAM_TYPE = ID_TEAM_TYPE_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_PROF_TEAMH_TTYPE_FK;

-- Delete all rows for this PROF_TEAMH_DEP_FK foreign key value
PROCEDURE del_PROF_TEAMH_DEP_FK
(
ID_DEPARTMENT_in IN PROF_TEAM_HIST.ID_DEPARTMENT%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_PROF_TEAMH_DEP_FK(
ID_DEPARTMENT_IN => ID_DEPARTMENT_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_PROF_TEAMH_DEP_FK;

-- Delete all rows for this PROF_TEAMH_INST_FK foreign key value
PROCEDURE del_PROF_TEAMH_INST_FK
(
ID_INSTITUTION_in IN PROF_TEAM_HIST.ID_INSTITUTION%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_PROF_TEAMH_INST_FK(
ID_INSTITUTION_IN => ID_INSTITUTION_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_PROF_TEAMH_INST_FK;

-- Delete all rows for this PROF_TEAMH_PROFRG_FK foreign key value
PROCEDURE del_PROF_TEAMH_PROFRG_FK
(
ID_PROF_REGISTER_in IN PROF_TEAM_HIST.ID_PROF_REGISTER%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_PROF_TEAMH_PROFRG_FK(
ID_PROF_REGISTER_IN => ID_PROF_REGISTER_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_PROF_TEAMH_PROFRG_FK;

-- Delete all rows for this PROF_TEAMH_PROF_FK foreign key value
PROCEDURE del_PROF_TEAMH_PROF_FK
(
ID_PROF_TEAM_LEADER_in IN PROF_TEAM_HIST.ID_PROF_TEAM_LEADER%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_PROF_TEAMH_PROF_FK(
ID_PROF_TEAM_LEADER_IN => ID_PROF_TEAM_LEADER_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_PROF_TEAMH_PROF_FK;

-- Delete all rows for this PROF_TEAMH_PTEAM_FK foreign key value
PROCEDURE del_PROF_TEAMH_PTEAM_FK
(
ID_PROF_TEAM_in IN PROF_TEAM_HIST.ID_PROF_TEAM%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_PROF_TEAMH_PTEAM_FK(
ID_PROF_TEAM_IN => ID_PROF_TEAM_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_PROF_TEAMH_PTEAM_FK;

-- Delete all rows for this PROF_TEAMH_SOFT_FK foreign key value
PROCEDURE del_PROF_TEAMH_SOFT_FK
(
ID_SOFTWARE_in IN PROF_TEAM_HIST.ID_SOFTWARE%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_PROF_TEAMH_SOFT_FK(
ID_SOFTWARE_IN => ID_SOFTWARE_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_PROF_TEAMH_SOFT_FK;

-- Delete all rows for this PROF_TEAMH_TTYPE_FK foreign key value
PROCEDURE del_PROF_TEAMH_TTYPE_FK
(
ID_TEAM_TYPE_in IN PROF_TEAM_HIST.ID_TEAM_TYPE%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_PROF_TEAMH_TTYPE_FK(
ID_TEAM_TYPE_IN => ID_TEAM_TYPE_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_PROF_TEAMH_TTYPE_FK;

-- Deletions using dynamic SQL
FUNCTION dyndelstr
(
where_in IN VARCHAR2
)
 RETURN VARCHAR2 is 
begin
IF where_in IS NULL
THEN
RETURN 'DELETE FROM prof_team_hist';
ELSE
RETURN 'DELETE FROM prof_team_hist WHERE ' || where_in;
END IF;
end dyndelstr;
-- Delete all rows specified by dynamic WHERE clause
PROCEDURE del_by
(
where_clause_in IN VARCHAR2,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_by;

-- Delete all rows specified by dynamic WHERE clause
PROCEDURE del_by
(
where_clause_in IN VARCHAR2,
handle_error_in IN BOOLEAN := TRUE
)
is
begin
EXECUTE IMMEDIATE dyndelstr (where_clause_in);

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_by;

-- Initialize a record with default values for columns in the table (prc)
PROCEDURE initrec(prof_team_hist_inout IN OUT prof_team_hist%ROWTYPE)
is
begin
prof_team_hist_inout.ID_PROF_TEAM_HIST := NULL;
prof_team_hist_inout.ID_PROF_TEAM := NULL;
prof_team_hist_inout.ID_PROF_TEAM_LEADER := NULL;
prof_team_hist_inout.PROF_TEAM_NAME := NULL;
prof_team_hist_inout.PROF_TEAM_DESC := NULL;
prof_team_hist_inout.FLG_AVAILABLE := NULL;
prof_team_hist_inout.FLG_STATUS := NULL;
prof_team_hist_inout.ID_SOFTWARE := NULL;
prof_team_hist_inout.ID_INSTITUTION := NULL;
prof_team_hist_inout.FLG_TYPE := NULL;
prof_team_hist_inout.DT_BEGIN_TSTZ := NULL;
prof_team_hist_inout.DT_END_TSTZ := NULL;
prof_team_hist_inout.ID_DEPARTMENT := NULL;
prof_team_hist_inout.NOTES := NULL;
prof_team_hist_inout.CREATE_TIME := NULL;
prof_team_hist_inout.FLG_TYPE_REGISTER := NULL;
prof_team_hist_inout.CREATE_INSTITUTION := NULL;
prof_team_hist_inout.UPDATE_USER := NULL;
prof_team_hist_inout.UPDATE_TIME := NULL;
prof_team_hist_inout.UPDATE_INSTITUTION := NULL;
prof_team_hist_inout.ID_PROF_REGISTER := NULL;
prof_team_hist_inout.DT_REGISTER := NULL;
prof_team_hist_inout.ID_TEAM_TYPE := NULL;
prof_team_hist_inout.CREATE_USER := NULL;
prof_team_hist_inout.ID_EPISODE := NULL;
end initrec;

-- Initialize a record with default values for columns in the table (fnc)
FUNCTION initrec RETURN prof_team_hist%ROWTYPE
is
l_prof_team_hist prof_team_hist%ROWTYPE;
begin
return l_prof_team_hist;
end initrec;

--get data from rowid
FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN prof_team_hist_tc
is
data prof_team_hist_tc;
begin
select * bulk collect into data from prof_team_hist
 WHERE rowid in (select /*+ OPT_ESTIMATE(TABLE t ROWS=1) */ * from table(rows_in) t);
return data;
end get_data_rowid;

--get data from rowid (pragma autonomous transacion)
FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN prof_team_hist_tc
is
data prof_team_hist_tc;
PRAGMA AUTONOMOUS_TRANSACTION;
begin
data := get_data_rowid(rows_in);
commit;
return data;

EXCEPTION
WHEN others
THEN
pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
ROLLBACK;

end get_data_rowid_pat;

BEGIN
NULL;
END ts_prof_team_hist;
/