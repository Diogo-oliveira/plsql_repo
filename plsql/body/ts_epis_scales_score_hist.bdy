/*-- Last Change Revision: $Rev: 2028152 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:19 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_scales_score_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Agosto 25, 2011 9:7:18
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_epis_scales_score_in  IN epis_scales_score_hist.id_epis_scales_score%TYPE,
        dt_epis_scales_score_in  IN epis_scales_score_hist.dt_epis_scales_score%TYPE,
        id_episode_in            IN epis_scales_score_hist.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN epis_scales_score_hist.id_patient%TYPE DEFAULT NULL,
        id_epis_documentation_in IN epis_scales_score_hist.id_epis_documentation%TYPE DEFAULT NULL,
        flg_status_in            IN epis_scales_score_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in        IN epis_scales_score_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in             IN epis_scales_score_hist.dt_create%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN epis_scales_score_hist.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in          IN epis_scales_score_hist.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in             IN epis_scales_score_hist.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN epis_scales_score_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_scales_in             IN epis_scales_score_hist.id_scales%TYPE DEFAULT NULL,
        id_scales_group_in       IN epis_scales_score_hist.id_scales_group%TYPE DEFAULT NULL,
        id_documentation_in      IN epis_scales_score_hist.id_documentation%TYPE DEFAULT NULL,
        score_value_in           IN epis_scales_score_hist.score_value%TYPE DEFAULT NULL,
        id_scales_formula_in     IN epis_scales_score_hist.id_scales_formula%TYPE DEFAULT NULL,
        create_user_in           IN epis_scales_score_hist.create_user%TYPE DEFAULT NULL,
        create_time_in           IN epis_scales_score_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN epis_scales_score_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN epis_scales_score_hist.update_user%TYPE DEFAULT NULL,
        update_time_in           IN epis_scales_score_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN epis_scales_score_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO epis_scales_score_hist
            (id_epis_scales_score,
             dt_epis_scales_score,
             id_episode,
             id_patient,
             id_epis_documentation,
             flg_status,
             id_prof_create,
             dt_create,
             id_cancel_reason,
             notes_cancel,
             dt_cancel,
             id_prof_cancel,
             id_scales,
             id_scales_group,
             id_documentation,
             score_value,
             id_scales_formula,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_epis_scales_score_in,
             dt_epis_scales_score_in,
             id_episode_in,
             id_patient_in,
             id_epis_documentation_in,
             flg_status_in,
             id_prof_create_in,
             dt_create_in,
             id_cancel_reason_in,
             notes_cancel_in,
             dt_cancel_in,
             id_prof_cancel_in,
             id_scales_in,
             id_scales_group_in,
             id_documentation_in,
             score_value_in,
             id_scales_formula_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_SCALES_SCORE_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    IF l_name = 'ESSCH_ESSL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_SCALES_SCORE',
                                                        value_in           => id_epis_scales_score_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_epis_scales_score_in  IN epis_scales_score_hist.id_epis_scales_score%TYPE,
        dt_epis_scales_score_in  IN epis_scales_score_hist.dt_epis_scales_score%TYPE,
        id_episode_in            IN epis_scales_score_hist.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN epis_scales_score_hist.id_patient%TYPE DEFAULT NULL,
        id_epis_documentation_in IN epis_scales_score_hist.id_epis_documentation%TYPE DEFAULT NULL,
        flg_status_in            IN epis_scales_score_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in        IN epis_scales_score_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in             IN epis_scales_score_hist.dt_create%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN epis_scales_score_hist.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in          IN epis_scales_score_hist.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in             IN epis_scales_score_hist.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN epis_scales_score_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_scales_in             IN epis_scales_score_hist.id_scales%TYPE DEFAULT NULL,
        id_scales_group_in       IN epis_scales_score_hist.id_scales_group%TYPE DEFAULT NULL,
        id_documentation_in      IN epis_scales_score_hist.id_documentation%TYPE DEFAULT NULL,
        score_value_in           IN epis_scales_score_hist.score_value%TYPE DEFAULT NULL,
        id_scales_formula_in     IN epis_scales_score_hist.id_scales_formula%TYPE DEFAULT NULL,
        create_user_in           IN epis_scales_score_hist.create_user%TYPE DEFAULT NULL,
        create_time_in           IN epis_scales_score_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN epis_scales_score_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN epis_scales_score_hist.update_user%TYPE DEFAULT NULL,
        update_time_in           IN epis_scales_score_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN epis_scales_score_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_epis_scales_score_in  => id_epis_scales_score_in,
            dt_epis_scales_score_in  => dt_epis_scales_score_in,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            id_epis_documentation_in => id_epis_documentation_in,
            flg_status_in            => flg_status_in,
            id_prof_create_in        => id_prof_create_in,
            dt_create_in             => dt_create_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            notes_cancel_in          => notes_cancel_in,
            dt_cancel_in             => dt_cancel_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            id_scales_in             => id_scales_in,
            id_scales_group_in       => id_scales_group_in,
            id_documentation_in      => id_documentation_in,
            score_value_in           => score_value_in,
            id_scales_formula_in     => id_scales_formula_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_scales_score_hist%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_scales_score_hist%ROWTYPE := rec_in;
    BEGIN
        ins(id_epis_scales_score_in  => l_rec.id_epis_scales_score,
            dt_epis_scales_score_in  => l_rec.dt_epis_scales_score,
            id_episode_in            => l_rec.id_episode,
            id_patient_in            => l_rec.id_patient,
            id_epis_documentation_in => l_rec.id_epis_documentation,
            flg_status_in            => l_rec.flg_status,
            id_prof_create_in        => l_rec.id_prof_create,
            dt_create_in             => l_rec.dt_create,
            id_cancel_reason_in      => l_rec.id_cancel_reason,
            notes_cancel_in          => l_rec.notes_cancel,
            dt_cancel_in             => l_rec.dt_cancel,
            id_prof_cancel_in        => l_rec.id_prof_cancel,
            id_scales_in             => l_rec.id_scales,
            id_scales_group_in       => l_rec.id_scales_group,
            id_documentation_in      => l_rec.id_documentation,
            score_value_in           => l_rec.score_value,
            id_scales_formula_in     => l_rec.id_scales_formula,
            create_user_in           => l_rec.create_user,
            create_time_in           => l_rec.create_time,
            create_institution_in    => l_rec.create_institution,
            update_user_in           => l_rec.update_user,
            update_time_in           => l_rec.update_time,
            update_institution_in    => l_rec.update_institution,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_scales_score_hist%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_scales_score_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_scales_score_hist
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_SCALES_SCORE _' || indx,
                                                        value_in           => rows_in(indx).id_epis_scales_score,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_EPIS_SCALES_SCORE _' || indx,
                                                        value_in           => rows_in(indx).dt_epis_scales_score,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_DOCUMENTATION _' || indx,
                                                        value_in           => rows_in(indx).id_epis_documentation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CREATE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_create,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CREATE _' || indx,
                                                        value_in           => rows_in(indx).dt_create,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCALES _' || indx,
                                                        value_in           => rows_in(indx).id_scales,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCALES_GROUP _' || indx,
                                                        value_in           => rows_in(indx).id_scales_group,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DOCUMENTATION _' || indx,
                                                        value_in           => rows_in(indx).id_documentation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'SCORE_VALUE _' || indx,
                                                        value_in           => rows_in(indx).score_value,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCALES_FORMULA _' || indx,
                                                        value_in           => rows_in(indx).id_scales_formula,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'EPIS_SCALES_SCORE_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_scales_score_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_epis_scales_score_in   IN epis_scales_score_hist.id_epis_scales_score%TYPE,
        dt_epis_scales_score_in   IN epis_scales_score_hist.dt_epis_scales_score%TYPE,
        id_episode_in             IN epis_scales_score_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN epis_scales_score_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_epis_documentation_in  IN epis_scales_score_hist.id_epis_documentation%TYPE DEFAULT NULL,
        id_epis_documentation_nin IN BOOLEAN := TRUE,
        flg_status_in             IN epis_scales_score_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_create_in         IN epis_scales_score_hist.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin        IN BOOLEAN := TRUE,
        dt_create_in              IN epis_scales_score_hist.dt_create%TYPE DEFAULT NULL,
        dt_create_nin             IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN epis_scales_score_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        notes_cancel_in           IN epis_scales_score_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        dt_cancel_in              IN epis_scales_score_hist.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN epis_scales_score_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        id_scales_in              IN epis_scales_score_hist.id_scales%TYPE DEFAULT NULL,
        id_scales_nin             IN BOOLEAN := TRUE,
        id_scales_group_in        IN epis_scales_score_hist.id_scales_group%TYPE DEFAULT NULL,
        id_scales_group_nin       IN BOOLEAN := TRUE,
        id_documentation_in       IN epis_scales_score_hist.id_documentation%TYPE DEFAULT NULL,
        id_documentation_nin      IN BOOLEAN := TRUE,
        score_value_in            IN epis_scales_score_hist.score_value%TYPE DEFAULT NULL,
        score_value_nin           IN BOOLEAN := TRUE,
        id_scales_formula_in      IN epis_scales_score_hist.id_scales_formula%TYPE DEFAULT NULL,
        id_scales_formula_nin     IN BOOLEAN := TRUE,
        create_user_in            IN epis_scales_score_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN epis_scales_score_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN epis_scales_score_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN epis_scales_score_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN epis_scales_score_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN epis_scales_score_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out                table_varchar;
        l_id_episode_n            NUMBER(1);
        l_id_patient_n            NUMBER(1);
        l_id_epis_documentation_n NUMBER(1);
        l_flg_status_n            NUMBER(1);
        l_id_prof_create_n        NUMBER(1);
        l_dt_create_n             NUMBER(1);
        l_id_cancel_reason_n      NUMBER(1);
        l_notes_cancel_n          NUMBER(1);
        l_dt_cancel_n             NUMBER(1);
        l_id_prof_cancel_n        NUMBER(1);
        l_id_scales_n             NUMBER(1);
        l_id_scales_group_n       NUMBER(1);
        l_id_documentation_n      NUMBER(1);
        l_score_value_n           NUMBER(1);
        l_id_scales_formula_n     NUMBER(1);
        l_create_user_n           NUMBER(1);
        l_create_time_n           NUMBER(1);
        l_create_institution_n    NUMBER(1);
        l_update_user_n           NUMBER(1);
        l_update_time_n           NUMBER(1);
        l_update_institution_n    NUMBER(1);
    BEGIN
    
        l_id_episode_n            := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n            := sys.diutil.bool_to_int(id_patient_nin);
        l_id_epis_documentation_n := sys.diutil.bool_to_int(id_epis_documentation_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_create_n        := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n             := sys.diutil.bool_to_int(dt_create_nin);
        l_id_cancel_reason_n      := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n          := sys.diutil.bool_to_int(notes_cancel_nin);
        l_dt_cancel_n             := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_prof_cancel_n        := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_id_scales_n             := sys.diutil.bool_to_int(id_scales_nin);
        l_id_scales_group_n       := sys.diutil.bool_to_int(id_scales_group_nin);
        l_id_documentation_n      := sys.diutil.bool_to_int(id_documentation_nin);
        l_score_value_n           := sys.diutil.bool_to_int(score_value_nin);
        l_id_scales_formula_n     := sys.diutil.bool_to_int(id_scales_formula_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE epis_scales_score_hist
           SET id_episode            = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_patient            = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_epis_documentation = decode(l_id_epis_documentation_n,
                                              0,
                                              id_epis_documentation_in,
                                              nvl(id_epis_documentation_in, id_epis_documentation)),
               flg_status            = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_create        = decode(l_id_prof_create_n,
                                              0,
                                              id_prof_create_in,
                                              nvl(id_prof_create_in, id_prof_create)),
               dt_create             = decode(l_dt_create_n, 0, dt_create_in, nvl(dt_create_in, dt_create)),
               id_cancel_reason      = decode(l_id_cancel_reason_n,
                                              0,
                                              id_cancel_reason_in,
                                              nvl(id_cancel_reason_in, id_cancel_reason)),
               notes_cancel          = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               dt_cancel             = decode(l_dt_cancel_n, 0, dt_cancel_in, nvl(dt_cancel_in, dt_cancel)),
               id_prof_cancel        = decode(l_id_prof_cancel_n,
                                              0,
                                              id_prof_cancel_in,
                                              nvl(id_prof_cancel_in, id_prof_cancel)),
               id_scales             = decode(l_id_scales_n, 0, id_scales_in, nvl(id_scales_in, id_scales)),
               id_scales_group       = decode(l_id_scales_group_n,
                                              0,
                                              id_scales_group_in,
                                              nvl(id_scales_group_in, id_scales_group)),
               id_documentation      = decode(l_id_documentation_n,
                                              0,
                                              id_documentation_in,
                                              nvl(id_documentation_in, id_documentation)),
               score_value           = decode(l_score_value_n, 0, score_value_in, nvl(score_value_in, score_value)),
               id_scales_formula     = decode(l_id_scales_formula_n,
                                              0,
                                              id_scales_formula_in,
                                              nvl(id_scales_formula_in, id_scales_formula)),
               create_user           = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time           = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution    = decode(l_create_institution_n,
                                              0,
                                              create_institution_in,
                                              nvl(create_institution_in, create_institution)),
               update_user           = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time           = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution    = decode(l_update_institution_n,
                                              0,
                                              update_institution_in,
                                              nvl(update_institution_in, update_institution))
         WHERE id_epis_scales_score = id_epis_scales_score_in
           AND dt_epis_scales_score = dt_epis_scales_score_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_SCALES_SCORE_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    IF l_name = 'ESSCH_ESSL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_SCALES_SCORE',
                                                        value_in           => id_epis_scales_score_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_epis_scales_score_in   IN epis_scales_score_hist.id_epis_scales_score%TYPE,
        dt_epis_scales_score_in   IN epis_scales_score_hist.dt_epis_scales_score%TYPE,
        id_episode_in             IN epis_scales_score_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN epis_scales_score_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_epis_documentation_in  IN epis_scales_score_hist.id_epis_documentation%TYPE DEFAULT NULL,
        id_epis_documentation_nin IN BOOLEAN := TRUE,
        flg_status_in             IN epis_scales_score_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_create_in         IN epis_scales_score_hist.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin        IN BOOLEAN := TRUE,
        dt_create_in              IN epis_scales_score_hist.dt_create%TYPE DEFAULT NULL,
        dt_create_nin             IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN epis_scales_score_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        notes_cancel_in           IN epis_scales_score_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        dt_cancel_in              IN epis_scales_score_hist.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN epis_scales_score_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        id_scales_in              IN epis_scales_score_hist.id_scales%TYPE DEFAULT NULL,
        id_scales_nin             IN BOOLEAN := TRUE,
        id_scales_group_in        IN epis_scales_score_hist.id_scales_group%TYPE DEFAULT NULL,
        id_scales_group_nin       IN BOOLEAN := TRUE,
        id_documentation_in       IN epis_scales_score_hist.id_documentation%TYPE DEFAULT NULL,
        id_documentation_nin      IN BOOLEAN := TRUE,
        score_value_in            IN epis_scales_score_hist.score_value%TYPE DEFAULT NULL,
        score_value_nin           IN BOOLEAN := TRUE,
        id_scales_formula_in      IN epis_scales_score_hist.id_scales_formula%TYPE DEFAULT NULL,
        id_scales_formula_nin     IN BOOLEAN := TRUE,
        create_user_in            IN epis_scales_score_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN epis_scales_score_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN epis_scales_score_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN epis_scales_score_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN epis_scales_score_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN epis_scales_score_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_scales_score_in   => id_epis_scales_score_in,
            dt_epis_scales_score_in   => dt_epis_scales_score_in,
            id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            id_epis_documentation_in  => id_epis_documentation_in,
            id_epis_documentation_nin => id_epis_documentation_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            id_prof_create_in         => id_prof_create_in,
            id_prof_create_nin        => id_prof_create_nin,
            dt_create_in              => dt_create_in,
            dt_create_nin             => dt_create_nin,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_reason_nin      => id_cancel_reason_nin,
            notes_cancel_in           => notes_cancel_in,
            notes_cancel_nin          => notes_cancel_nin,
            dt_cancel_in              => dt_cancel_in,
            dt_cancel_nin             => dt_cancel_nin,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_prof_cancel_nin        => id_prof_cancel_nin,
            id_scales_in              => id_scales_in,
            id_scales_nin             => id_scales_nin,
            id_scales_group_in        => id_scales_group_in,
            id_scales_group_nin       => id_scales_group_nin,
            id_documentation_in       => id_documentation_in,
            id_documentation_nin      => id_documentation_nin,
            score_value_in            => score_value_in,
            score_value_nin           => score_value_nin,
            id_scales_formula_in      => id_scales_formula_in,
            id_scales_formula_nin     => id_scales_formula_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_episode_in             IN epis_scales_score_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN epis_scales_score_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_epis_documentation_in  IN epis_scales_score_hist.id_epis_documentation%TYPE DEFAULT NULL,
        id_epis_documentation_nin IN BOOLEAN := TRUE,
        flg_status_in             IN epis_scales_score_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_create_in         IN epis_scales_score_hist.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin        IN BOOLEAN := TRUE,
        dt_create_in              IN epis_scales_score_hist.dt_create%TYPE DEFAULT NULL,
        dt_create_nin             IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN epis_scales_score_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        notes_cancel_in           IN epis_scales_score_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        dt_cancel_in              IN epis_scales_score_hist.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN epis_scales_score_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        id_scales_in              IN epis_scales_score_hist.id_scales%TYPE DEFAULT NULL,
        id_scales_nin             IN BOOLEAN := TRUE,
        id_scales_group_in        IN epis_scales_score_hist.id_scales_group%TYPE DEFAULT NULL,
        id_scales_group_nin       IN BOOLEAN := TRUE,
        id_documentation_in       IN epis_scales_score_hist.id_documentation%TYPE DEFAULT NULL,
        id_documentation_nin      IN BOOLEAN := TRUE,
        score_value_in            IN epis_scales_score_hist.score_value%TYPE DEFAULT NULL,
        score_value_nin           IN BOOLEAN := TRUE,
        id_scales_formula_in      IN epis_scales_score_hist.id_scales_formula%TYPE DEFAULT NULL,
        id_scales_formula_nin     IN BOOLEAN := TRUE,
        create_user_in            IN epis_scales_score_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN epis_scales_score_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN epis_scales_score_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN epis_scales_score_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN epis_scales_score_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN epis_scales_score_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_episode_n            NUMBER(1);
        l_id_patient_n            NUMBER(1);
        l_id_epis_documentation_n NUMBER(1);
        l_flg_status_n            NUMBER(1);
        l_id_prof_create_n        NUMBER(1);
        l_dt_create_n             NUMBER(1);
        l_id_cancel_reason_n      NUMBER(1);
        l_notes_cancel_n          NUMBER(1);
        l_dt_cancel_n             NUMBER(1);
        l_id_prof_cancel_n        NUMBER(1);
        l_id_scales_n             NUMBER(1);
        l_id_scales_group_n       NUMBER(1);
        l_id_documentation_n      NUMBER(1);
        l_score_value_n           NUMBER(1);
        l_id_scales_formula_n     NUMBER(1);
        l_create_user_n           NUMBER(1);
        l_create_time_n           NUMBER(1);
        l_create_institution_n    NUMBER(1);
        l_update_user_n           NUMBER(1);
        l_update_time_n           NUMBER(1);
        l_update_institution_n    NUMBER(1);
        id_epis_scales_score_in   epis_scales_score_hist.id_epis_scales_score%TYPE;
        dt_epis_scales_score_in   epis_scales_score_hist.dt_epis_scales_score%TYPE;
    BEGIN
    
        l_id_episode_n            := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n            := sys.diutil.bool_to_int(id_patient_nin);
        l_id_epis_documentation_n := sys.diutil.bool_to_int(id_epis_documentation_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_create_n        := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n             := sys.diutil.bool_to_int(dt_create_nin);
        l_id_cancel_reason_n      := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n          := sys.diutil.bool_to_int(notes_cancel_nin);
        l_dt_cancel_n             := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_prof_cancel_n        := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_id_scales_n             := sys.diutil.bool_to_int(id_scales_nin);
        l_id_scales_group_n       := sys.diutil.bool_to_int(id_scales_group_nin);
        l_id_documentation_n      := sys.diutil.bool_to_int(id_documentation_nin);
        l_score_value_n           := sys.diutil.bool_to_int(score_value_nin);
        l_id_scales_formula_n     := sys.diutil.bool_to_int(id_scales_formula_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE EPIS_SCALES_SCORE_HIST SET ' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                 ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' || ' ID_PATIENT = decode (' ||
                 l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_EPIS_DOCUMENTATION = decode (' || l_id_epis_documentation_n ||
                 ',0,:id_epis_documentation_in, NVL (:id_epis_documentation_in, ID_EPIS_DOCUMENTATION)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_PROF_CREATE = decode (' || l_id_prof_create_n ||
                 ',0,:id_prof_create_in, NVL (:id_prof_create_in, ID_PROF_CREATE)) ' || ',' || ' DT_CREATE = decode (' ||
                 l_dt_create_n || ',0,:dt_create_in, NVL (:dt_create_in, DT_CREATE)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' DT_CANCEL = decode (' ||
                 l_dt_cancel_n || ',0,:dt_cancel_in, NVL (:dt_cancel_in, DT_CANCEL)) ' || ',' ||
                 ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                 ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' || ' ID_SCALES = decode (' ||
                 l_id_scales_n || ',0,:id_scales_in, NVL (:id_scales_in, ID_SCALES)) ' || ',' ||
                 ' ID_SCALES_GROUP = decode (' || l_id_scales_group_n ||
                 ',0,:id_scales_group_in, NVL (:id_scales_group_in, ID_SCALES_GROUP)) ' || ',' ||
                 ' ID_DOCUMENTATION = decode (' || l_id_documentation_n ||
                 ',0,:id_documentation_in, NVL (:id_documentation_in, ID_DOCUMENTATION)) ' || ',' ||
                 ' SCORE_VALUE = decode (' || l_score_value_n ||
                 ',0,:score_value_in, NVL (:score_value_in, SCORE_VALUE)) ' || ',' || ' ID_SCALES_FORMULA = decode (' ||
                 l_id_scales_formula_n || ',0,:id_scales_formula_in, NVL (:id_scales_formula_in, ID_SCALES_FORMULA)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, id_patient_in, id_epis_documentation_in, flg_status_in, id_prof_create_in, dt_create_in, id_cancel_reason_in, notes_cancel_in, dt_cancel_in, id_prof_cancel_in, id_scales_in, id_scales_group_in, id_documentation_in, score_value_in, id_scales_formula_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_SCALES_SCORE_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    IF l_name = 'ESSCH_ESSL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_SCALES_SCORE',
                                                        value_in           => id_epis_scales_score_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_episode_in             IN epis_scales_score_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN epis_scales_score_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_epis_documentation_in  IN epis_scales_score_hist.id_epis_documentation%TYPE DEFAULT NULL,
        id_epis_documentation_nin IN BOOLEAN := TRUE,
        flg_status_in             IN epis_scales_score_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_create_in         IN epis_scales_score_hist.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin        IN BOOLEAN := TRUE,
        dt_create_in              IN epis_scales_score_hist.dt_create%TYPE DEFAULT NULL,
        dt_create_nin             IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN epis_scales_score_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        notes_cancel_in           IN epis_scales_score_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        dt_cancel_in              IN epis_scales_score_hist.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin             IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN epis_scales_score_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        id_scales_in              IN epis_scales_score_hist.id_scales%TYPE DEFAULT NULL,
        id_scales_nin             IN BOOLEAN := TRUE,
        id_scales_group_in        IN epis_scales_score_hist.id_scales_group%TYPE DEFAULT NULL,
        id_scales_group_nin       IN BOOLEAN := TRUE,
        id_documentation_in       IN epis_scales_score_hist.id_documentation%TYPE DEFAULT NULL,
        id_documentation_nin      IN BOOLEAN := TRUE,
        score_value_in            IN epis_scales_score_hist.score_value%TYPE DEFAULT NULL,
        score_value_nin           IN BOOLEAN := TRUE,
        id_scales_formula_in      IN epis_scales_score_hist.id_scales_formula%TYPE DEFAULT NULL,
        id_scales_formula_nin     IN BOOLEAN := TRUE,
        create_user_in            IN epis_scales_score_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN epis_scales_score_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN epis_scales_score_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN epis_scales_score_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN epis_scales_score_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN epis_scales_score_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            id_epis_documentation_in  => id_epis_documentation_in,
            id_epis_documentation_nin => id_epis_documentation_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            id_prof_create_in         => id_prof_create_in,
            id_prof_create_nin        => id_prof_create_nin,
            dt_create_in              => dt_create_in,
            dt_create_nin             => dt_create_nin,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_reason_nin      => id_cancel_reason_nin,
            notes_cancel_in           => notes_cancel_in,
            notes_cancel_nin          => notes_cancel_nin,
            dt_cancel_in              => dt_cancel_in,
            dt_cancel_nin             => dt_cancel_nin,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_prof_cancel_nin        => id_prof_cancel_nin,
            id_scales_in              => id_scales_in,
            id_scales_nin             => id_scales_nin,
            id_scales_group_in        => id_scales_group_in,
            id_scales_group_nin       => id_scales_group_nin,
            id_documentation_in       => id_documentation_in,
            id_documentation_nin      => id_documentation_nin,
            score_value_in            => score_value_in,
            score_value_nin           => score_value_nin,
            id_scales_formula_in      => id_scales_formula_in,
            id_scales_formula_nin     => id_scales_formula_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            where_in                  => where_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_scales_score_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_scales_score_in  => rec_in.id_epis_scales_score,
            dt_epis_scales_score_in  => rec_in.dt_epis_scales_score,
            id_episode_in            => rec_in.id_episode,
            id_patient_in            => rec_in.id_patient,
            id_epis_documentation_in => rec_in.id_epis_documentation,
            flg_status_in            => rec_in.flg_status,
            id_prof_create_in        => rec_in.id_prof_create,
            dt_create_in             => rec_in.dt_create,
            id_cancel_reason_in      => rec_in.id_cancel_reason,
            notes_cancel_in          => rec_in.notes_cancel,
            dt_cancel_in             => rec_in.dt_cancel,
            id_prof_cancel_in        => rec_in.id_prof_cancel,
            id_scales_in             => rec_in.id_scales,
            id_scales_group_in       => rec_in.id_scales_group,
            id_documentation_in      => rec_in.id_documentation,
            score_value_in           => rec_in.score_value,
            id_scales_formula_in     => rec_in.id_scales_formula,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_scales_score_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_scales_score_in  => rec_in.id_epis_scales_score,
            dt_epis_scales_score_in  => rec_in.dt_epis_scales_score,
            id_episode_in            => rec_in.id_episode,
            id_patient_in            => rec_in.id_patient,
            id_epis_documentation_in => rec_in.id_epis_documentation,
            flg_status_in            => rec_in.flg_status,
            id_prof_create_in        => rec_in.id_prof_create,
            dt_create_in             => rec_in.dt_create,
            id_cancel_reason_in      => rec_in.id_cancel_reason,
            notes_cancel_in          => rec_in.notes_cancel,
            dt_cancel_in             => rec_in.dt_cancel,
            id_prof_cancel_in        => rec_in.id_prof_cancel,
            id_scales_in             => rec_in.id_scales,
            id_scales_group_in       => rec_in.id_scales_group,
            id_documentation_in      => rec_in.id_documentation,
            score_value_in           => rec_in.score_value,
            id_scales_formula_in     => rec_in.id_scales_formula,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_epis_scales_score_in  IN epis_scales_score_hist.id_epis_scales_score%TYPE,
        dt_epis_scales_score_in  IN epis_scales_score_hist.dt_epis_scales_score%TYPE,
        id_episode_in            IN epis_scales_score_hist.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN epis_scales_score_hist.id_patient%TYPE DEFAULT NULL,
        id_epis_documentation_in IN epis_scales_score_hist.id_epis_documentation%TYPE DEFAULT NULL,
        flg_status_in            IN epis_scales_score_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in        IN epis_scales_score_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in             IN epis_scales_score_hist.dt_create%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN epis_scales_score_hist.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in          IN epis_scales_score_hist.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in             IN epis_scales_score_hist.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN epis_scales_score_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_scales_in             IN epis_scales_score_hist.id_scales%TYPE DEFAULT NULL,
        id_scales_group_in       IN epis_scales_score_hist.id_scales_group%TYPE DEFAULT NULL,
        id_documentation_in      IN epis_scales_score_hist.id_documentation%TYPE DEFAULT NULL,
        score_value_in           IN epis_scales_score_hist.score_value%TYPE DEFAULT NULL,
        id_scales_formula_in     IN epis_scales_score_hist.id_scales_formula%TYPE DEFAULT NULL,
        create_user_in           IN epis_scales_score_hist.create_user%TYPE DEFAULT NULL,
        create_time_in           IN epis_scales_score_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN epis_scales_score_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN epis_scales_score_hist.update_user%TYPE DEFAULT NULL,
        update_time_in           IN epis_scales_score_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN epis_scales_score_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_scales_score_in  => id_epis_scales_score_in,
            dt_epis_scales_score_in  => dt_epis_scales_score_in,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            id_epis_documentation_in => id_epis_documentation_in,
            flg_status_in            => flg_status_in,
            id_prof_create_in        => id_prof_create_in,
            dt_create_in             => dt_create_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            notes_cancel_in          => notes_cancel_in,
            dt_cancel_in             => dt_cancel_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            id_scales_in             => id_scales_in,
            id_scales_group_in       => id_scales_group_in,
            id_documentation_in      => id_documentation_in,
            score_value_in           => score_value_in,
            id_scales_formula_in     => id_scales_formula_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_scales_score_in  => id_epis_scales_score_in,
                dt_epis_scales_score_in  => dt_epis_scales_score_in,
                id_episode_in            => id_episode_in,
                id_patient_in            => id_patient_in,
                id_epis_documentation_in => id_epis_documentation_in,
                flg_status_in            => flg_status_in,
                id_prof_create_in        => id_prof_create_in,
                dt_create_in             => dt_create_in,
                id_cancel_reason_in      => id_cancel_reason_in,
                notes_cancel_in          => notes_cancel_in,
                dt_cancel_in             => dt_cancel_in,
                id_prof_cancel_in        => id_prof_cancel_in,
                id_scales_in             => id_scales_in,
                id_scales_group_in       => id_scales_group_in,
                id_documentation_in      => id_documentation_in,
                score_value_in           => score_value_in,
                id_scales_formula_in     => id_scales_formula_in,
                create_user_in           => create_user_in,
                create_time_in           => create_time_in,
                create_institution_in    => create_institution_in,
                update_user_in           => update_user_in,
                update_time_in           => update_time_in,
                update_institution_in    => update_institution_in,
                handle_error_in          => handle_error_in,
                rows_out                 => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_epis_scales_score_in  IN epis_scales_score_hist.id_epis_scales_score%TYPE,
        dt_epis_scales_score_in  IN epis_scales_score_hist.dt_epis_scales_score%TYPE,
        id_episode_in            IN epis_scales_score_hist.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN epis_scales_score_hist.id_patient%TYPE DEFAULT NULL,
        id_epis_documentation_in IN epis_scales_score_hist.id_epis_documentation%TYPE DEFAULT NULL,
        flg_status_in            IN epis_scales_score_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in        IN epis_scales_score_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in             IN epis_scales_score_hist.dt_create%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN epis_scales_score_hist.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in          IN epis_scales_score_hist.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in             IN epis_scales_score_hist.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN epis_scales_score_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_scales_in             IN epis_scales_score_hist.id_scales%TYPE DEFAULT NULL,
        id_scales_group_in       IN epis_scales_score_hist.id_scales_group%TYPE DEFAULT NULL,
        id_documentation_in      IN epis_scales_score_hist.id_documentation%TYPE DEFAULT NULL,
        score_value_in           IN epis_scales_score_hist.score_value%TYPE DEFAULT NULL,
        id_scales_formula_in     IN epis_scales_score_hist.id_scales_formula%TYPE DEFAULT NULL,
        create_user_in           IN epis_scales_score_hist.create_user%TYPE DEFAULT NULL,
        create_time_in           IN epis_scales_score_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN epis_scales_score_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN epis_scales_score_hist.update_user%TYPE DEFAULT NULL,
        update_time_in           IN epis_scales_score_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN epis_scales_score_hist.update_institution%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_scales_score_in,
                dt_epis_scales_score_in,
                id_episode_in,
                id_patient_in,
                id_epis_documentation_in,
                flg_status_in,
                id_prof_create_in,
                dt_create_in,
                id_cancel_reason_in,
                notes_cancel_in,
                dt_cancel_in,
                id_prof_cancel_in,
                id_scales_in,
                id_scales_group_in,
                id_documentation_in,
                score_value_in,
                id_scales_formula_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN epis_scales_score_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_scales_score  id_epis_scales_score_cc;
        l_dt_epis_scales_score  dt_epis_scales_score_cc;
        l_id_episode            id_episode_cc;
        l_id_patient            id_patient_cc;
        l_id_epis_documentation id_epis_documentation_cc;
        l_flg_status            flg_status_cc;
        l_id_prof_create        id_prof_create_cc;
        l_dt_create             dt_create_cc;
        l_id_cancel_reason      id_cancel_reason_cc;
        l_notes_cancel          notes_cancel_cc;
        l_dt_cancel             dt_cancel_cc;
        l_id_prof_cancel        id_prof_cancel_cc;
        l_id_scales             id_scales_cc;
        l_id_scales_group       id_scales_group_cc;
        l_id_documentation      id_documentation_cc;
        l_score_value           score_value_cc;
        l_id_scales_formula     id_scales_formula_cc;
        l_create_user           create_user_cc;
        l_create_time           create_time_cc;
        l_create_institution    create_institution_cc;
        l_update_user           update_user_cc;
        l_update_time           update_time_cc;
        l_update_institution    update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_scales_score(i) := col_in(i).id_epis_scales_score;
            l_dt_epis_scales_score(i) := col_in(i).dt_epis_scales_score;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_epis_documentation(i) := col_in(i).id_epis_documentation;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_create(i) := col_in(i).id_prof_create;
            l_dt_create(i) := col_in(i).dt_create;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_dt_cancel(i) := col_in(i).dt_cancel;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_id_scales(i) := col_in(i).id_scales;
            l_id_scales_group(i) := col_in(i).id_scales_group;
            l_id_documentation(i) := col_in(i).id_documentation;
            l_score_value(i) := col_in(i).score_value;
            l_id_scales_formula(i) := col_in(i).id_scales_formula;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_scales_score_hist
                   SET id_episode            = nvl(l_id_episode(i), id_episode),
                       id_patient            = nvl(l_id_patient(i), id_patient),
                       id_epis_documentation = nvl(l_id_epis_documentation(i), id_epis_documentation),
                       flg_status            = nvl(l_flg_status(i), flg_status),
                       id_prof_create        = nvl(l_id_prof_create(i), id_prof_create),
                       dt_create             = nvl(l_dt_create(i), dt_create),
                       id_cancel_reason      = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       notes_cancel          = nvl(l_notes_cancel(i), notes_cancel),
                       dt_cancel             = nvl(l_dt_cancel(i), dt_cancel),
                       id_prof_cancel        = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       id_scales             = nvl(l_id_scales(i), id_scales),
                       id_scales_group       = nvl(l_id_scales_group(i), id_scales_group),
                       id_documentation      = nvl(l_id_documentation(i), id_documentation),
                       score_value           = nvl(l_score_value(i), score_value),
                       id_scales_formula     = nvl(l_id_scales_formula(i), id_scales_formula),
                       create_user           = nvl(l_create_user(i), create_user),
                       create_time           = nvl(l_create_time(i), create_time),
                       create_institution    = nvl(l_create_institution(i), create_institution),
                       update_user           = nvl(l_update_user(i), update_user),
                       update_time           = nvl(l_update_time(i), update_time),
                       update_institution    = nvl(l_update_institution(i), update_institution)
                 WHERE id_epis_scales_score = l_id_epis_scales_score(i)
                   AND dt_epis_scales_score = l_dt_epis_scales_score(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_scales_score_hist
                   SET id_episode            = l_id_episode(i),
                       id_patient            = l_id_patient(i),
                       id_epis_documentation = l_id_epis_documentation(i),
                       flg_status            = l_flg_status(i),
                       id_prof_create        = l_id_prof_create(i),
                       dt_create             = l_dt_create(i),
                       id_cancel_reason      = l_id_cancel_reason(i),
                       notes_cancel          = l_notes_cancel(i),
                       dt_cancel             = l_dt_cancel(i),
                       id_prof_cancel        = l_id_prof_cancel(i),
                       id_scales             = l_id_scales(i),
                       id_scales_group       = l_id_scales_group(i),
                       id_documentation      = l_id_documentation(i),
                       score_value           = l_score_value(i),
                       id_scales_formula     = l_id_scales_formula(i),
                       create_user           = l_create_user(i),
                       create_time           = l_create_time(i),
                       create_institution    = l_create_institution(i),
                       update_user           = l_update_user(i),
                       update_time           = l_update_time(i),
                       update_institution    = l_update_institution(i)
                 WHERE id_epis_scales_score = l_id_epis_scales_score(i)
                   AND dt_epis_scales_score = l_dt_epis_scales_score(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN epis_scales_score_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE EPIS_SCALES_SCORE_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE EPIS_SCALES_SCORE_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE EPIS_SCALES_SCORE_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE EPIS_SCALES_SCORE_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_epis_scales_score_in IN epis_scales_score_hist.id_epis_scales_score%TYPE,
        dt_epis_scales_score_in IN epis_scales_score_hist.dt_epis_scales_score%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_scales_score_hist
         WHERE id_epis_scales_score = id_epis_scales_score_in
           AND dt_epis_scales_score = dt_epis_scales_score_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_epis_scales_score_in IN epis_scales_score_hist.id_epis_scales_score%TYPE,
        dt_epis_scales_score_in IN epis_scales_score_hist.dt_epis_scales_score%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_epis_scales_score_in => id_epis_scales_score_in,
            dt_epis_scales_score_in => dt_epis_scales_score_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_EPIS_SCALES_SCORE
    PROCEDURE del_id_epis_scales_score
    (
        id_epis_scales_score_in IN epis_scales_score_hist.id_epis_scales_score%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_scales_score_hist
         WHERE id_epis_scales_score = id_epis_scales_score_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_epis_scales_score;

    -- Delete all rows for primary key column DT_EPIS_SCALES_SCORE
    PROCEDURE del_dt_epis_scales_score
    (
        dt_epis_scales_score_in IN epis_scales_score_hist.dt_epis_scales_score%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_scales_score_hist
         WHERE dt_epis_scales_score = dt_epis_scales_score_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_dt_epis_scales_score;

    -- Delete all rows for primary key column ID_EPIS_SCALES_SCORE
    PROCEDURE del_id_epis_scales_score
    (
        id_epis_scales_score_in IN epis_scales_score_hist.id_epis_scales_score%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_epis_scales_score(id_epis_scales_score_in => id_epis_scales_score_in,
                                 handle_error_in         => handle_error_in,
                                 rows_out                => rows_out);
    END del_id_epis_scales_score;

    -- Delete all rows for primary key column DT_EPIS_SCALES_SCORE
    PROCEDURE del_dt_epis_scales_score
    (
        dt_epis_scales_score_in IN epis_scales_score_hist.dt_epis_scales_score%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dt_epis_scales_score(dt_epis_scales_score_in => dt_epis_scales_score_in,
                                 handle_error_in         => handle_error_in,
                                 rows_out                => rows_out);
    END del_dt_epis_scales_score;

    PROCEDURE del_essch_essl_fk
    (
        id_epis_scales_score_in IN epis_scales_score_hist.id_epis_scales_score%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_scales_score_hist
         WHERE id_epis_scales_score = del_essch_essl_fk.id_epis_scales_score_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_essch_essl_fk;

    PROCEDURE del_essch_essl_fk
    (
        id_epis_scales_score_in IN epis_scales_score_hist.id_epis_scales_score%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_essch_essl_fk(id_epis_scales_score_in => id_epis_scales_score_in,
                          handle_error_in         => handle_error_in,
                          rows_out                => rows_out);
    END del_essch_essl_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM EPIS_SCALES_SCORE_HIST';
        ELSE
            RETURN 'DELETE FROM EPIS_SCALES_SCORE_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_SCALES_SCORE_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_SCALES_SCORE_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(epis_scales_score_hist_inout IN OUT epis_scales_score_hist%ROWTYPE) IS
    BEGIN
        epis_scales_score_hist_inout.id_epis_scales_score  := NULL;
        epis_scales_score_hist_inout.dt_epis_scales_score  := NULL;
        epis_scales_score_hist_inout.id_episode            := NULL;
        epis_scales_score_hist_inout.id_patient            := NULL;
        epis_scales_score_hist_inout.id_epis_documentation := NULL;
        epis_scales_score_hist_inout.flg_status            := NULL;
        epis_scales_score_hist_inout.id_prof_create        := NULL;
        epis_scales_score_hist_inout.dt_create             := NULL;
        epis_scales_score_hist_inout.id_cancel_reason      := NULL;
        epis_scales_score_hist_inout.notes_cancel          := NULL;
        epis_scales_score_hist_inout.dt_cancel             := NULL;
        epis_scales_score_hist_inout.id_prof_cancel        := NULL;
        epis_scales_score_hist_inout.id_scales             := NULL;
        epis_scales_score_hist_inout.id_scales_group       := NULL;
        epis_scales_score_hist_inout.id_documentation      := NULL;
        epis_scales_score_hist_inout.score_value           := NULL;
        epis_scales_score_hist_inout.id_scales_formula     := NULL;
        epis_scales_score_hist_inout.create_user           := NULL;
        epis_scales_score_hist_inout.create_time           := NULL;
        epis_scales_score_hist_inout.create_institution    := NULL;
        epis_scales_score_hist_inout.update_user           := NULL;
        epis_scales_score_hist_inout.update_time           := NULL;
        epis_scales_score_hist_inout.update_institution    := NULL;
    END initrec;

    FUNCTION initrec RETURN epis_scales_score_hist%ROWTYPE IS
        l_epis_scales_score_hist epis_scales_score_hist%ROWTYPE;
    BEGIN
        RETURN l_epis_scales_score_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_scales_score_hist_tc IS
        data epis_scales_score_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM epis_scales_score_hist
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_scales_score_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data epis_scales_score_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_scales_score_hist;
/
