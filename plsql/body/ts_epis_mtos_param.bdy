/*-- Last Change Revision: $Rev: 2028114 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:13 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_mtos_param
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2018-01-26 10:50:19
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    PROCEDURE ins
    (
        id_epis_mtos_param_in  IN epis_mtos_param.id_epis_mtos_param%TYPE,
        id_mtos_param_in       IN epis_mtos_param.id_mtos_param%TYPE,
        id_epis_mtos_score_in  IN epis_mtos_param.id_epis_mtos_score%TYPE,
        id_vital_sign_read_in  IN epis_mtos_param.id_vital_sign_read%TYPE DEFAULT NULL,
        id_prof_create_in      IN epis_mtos_param.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_mtos_param.dt_create%TYPE DEFAULT NULL,
        create_user_in         IN epis_mtos_param.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_mtos_param.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_mtos_param.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_mtos_param.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_mtos_param.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_mtos_param.update_institution%TYPE DEFAULT NULL,
        registered_value_in    IN epis_mtos_param.registered_value%TYPE DEFAULT NULL,
        extra_score_in         IN epis_mtos_param.extra_score%TYPE DEFAULT NULL,
        flg_param_task_type_in IN epis_mtos_param.flg_param_task_type%TYPE DEFAULT NULL,
        id_task_refid_in       IN epis_mtos_param.id_task_refid%TYPE DEFAULT NULL,
        notes_in               IN epis_mtos_param.notes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO epis_mtos_param
            (id_epis_mtos_param,
             id_mtos_param,
             id_epis_mtos_score,
             id_vital_sign_read,
             id_prof_create,
             dt_create,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             registered_value,
             extra_score,
             flg_param_task_type,
             id_task_refid,
             notes)
        VALUES
            (id_epis_mtos_param_in,
             id_mtos_param_in,
             id_epis_mtos_score_in,
             id_vital_sign_read_in,
             id_prof_create_in,
             dt_create_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             registered_value_in,
             extra_score_in,
             flg_param_task_type_in,
             id_task_refid_in,
             notes_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_epis_mtos_param_in  IN epis_mtos_param.id_epis_mtos_param%TYPE,
        id_mtos_param_in       IN epis_mtos_param.id_mtos_param%TYPE,
        id_epis_mtos_score_in  IN epis_mtos_param.id_epis_mtos_score%TYPE,
        id_vital_sign_read_in  IN epis_mtos_param.id_vital_sign_read%TYPE DEFAULT NULL,
        id_prof_create_in      IN epis_mtos_param.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_mtos_param.dt_create%TYPE DEFAULT NULL,
        create_user_in         IN epis_mtos_param.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_mtos_param.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_mtos_param.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_mtos_param.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_mtos_param.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_mtos_param.update_institution%TYPE DEFAULT NULL,
        registered_value_in    IN epis_mtos_param.registered_value%TYPE DEFAULT NULL,
        extra_score_in         IN epis_mtos_param.extra_score%TYPE DEFAULT NULL,
        flg_param_task_type_in IN epis_mtos_param.flg_param_task_type%TYPE DEFAULT NULL,
        id_task_refid_in       IN epis_mtos_param.id_task_refid%TYPE DEFAULT NULL,
        notes_in               IN epis_mtos_param.notes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_mtos_param_in  => id_epis_mtos_param_in,
            id_mtos_param_in       => id_mtos_param_in,
            id_epis_mtos_score_in  => id_epis_mtos_score_in,
            id_vital_sign_read_in  => id_vital_sign_read_in,
            id_prof_create_in      => id_prof_create_in,
            dt_create_in           => dt_create_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            registered_value_in    => registered_value_in,
            extra_score_in         => extra_score_in,
            flg_param_task_type_in => flg_param_task_type_in,
            id_task_refid_in       => id_task_refid_in,
            notes_in               => notes_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_mtos_param%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_mtos_param%ROWTYPE := rec_in;
    BEGIN
    
        ins(id_epis_mtos_param_in  => l_rec.id_epis_mtos_param,
            id_mtos_param_in       => l_rec.id_mtos_param,
            id_epis_mtos_score_in  => l_rec.id_epis_mtos_score,
            id_vital_sign_read_in  => l_rec.id_vital_sign_read,
            id_prof_create_in      => l_rec.id_prof_create,
            dt_create_in           => l_rec.dt_create,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            registered_value_in    => l_rec.registered_value,
            extra_score_in         => l_rec.extra_score,
            flg_param_task_type_in => l_rec.flg_param_task_type,
            id_task_refid_in       => l_rec.id_task_refid,
            notes_in               => l_rec.notes,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_mtos_param%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_mtos_param_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_mtos_param
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_mtos_param_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_mtos_param_in   IN epis_mtos_param.id_epis_mtos_param%TYPE,
        id_mtos_param_in        IN epis_mtos_param.id_mtos_param%TYPE,
        id_epis_mtos_score_in   IN epis_mtos_param.id_epis_mtos_score%TYPE,
        id_vital_sign_read_in   IN epis_mtos_param.id_vital_sign_read%TYPE DEFAULT NULL,
        id_vital_sign_read_nin  IN BOOLEAN := TRUE,
        id_prof_create_in       IN epis_mtos_param.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN epis_mtos_param.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        create_user_in          IN epis_mtos_param.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_mtos_param.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_mtos_param.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_mtos_param.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_mtos_param.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_mtos_param.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        registered_value_in     IN epis_mtos_param.registered_value%TYPE DEFAULT NULL,
        registered_value_nin    IN BOOLEAN := TRUE,
        extra_score_in          IN epis_mtos_param.extra_score%TYPE DEFAULT NULL,
        extra_score_nin         IN BOOLEAN := TRUE,
        flg_param_task_type_in  IN epis_mtos_param.flg_param_task_type%TYPE DEFAULT NULL,
        flg_param_task_type_nin IN BOOLEAN := TRUE,
        id_task_refid_in        IN epis_mtos_param.id_task_refid%TYPE DEFAULT NULL,
        id_task_refid_nin       IN BOOLEAN := TRUE,
        notes_in                IN epis_mtos_param.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_vital_sign_read_n  NUMBER(1) := sys.diutil.bool_to_int(id_vital_sign_read_nin);
        l_id_prof_create_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n           NUMBER(1) := sys.diutil.bool_to_int(dt_create_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_registered_value_n    NUMBER(1) := sys.diutil.bool_to_int(registered_value_nin);
        l_extra_score_n         NUMBER(1) := sys.diutil.bool_to_int(extra_score_nin);
        l_flg_param_task_type_n NUMBER(1) := sys.diutil.bool_to_int(flg_param_task_type_nin);
        l_id_task_refid_n       NUMBER(1) := sys.diutil.bool_to_int(id_task_refid_nin);
        l_notes_n               NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
    BEGIN
    
        UPDATE epis_mtos_param
           SET id_vital_sign_read  = decode(l_id_vital_sign_read_n,
                                            0,
                                            id_vital_sign_read_in,
                                            nvl(id_vital_sign_read_in, id_vital_sign_read)),
               id_prof_create      = decode(l_id_prof_create_n,
                                            0,
                                            id_prof_create_in,
                                            nvl(id_prof_create_in, id_prof_create)),
               dt_create           = decode(l_dt_create_n, 0, dt_create_in, nvl(dt_create_in, dt_create)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution)),
               registered_value    = decode(l_registered_value_n,
                                            0,
                                            registered_value_in,
                                            nvl(registered_value_in, registered_value)),
               extra_score         = decode(l_extra_score_n, 0, extra_score_in, nvl(extra_score_in, extra_score)),
               flg_param_task_type = decode(l_flg_param_task_type_n,
                                            0,
                                            flg_param_task_type_in,
                                            nvl(flg_param_task_type_in, flg_param_task_type)),
               id_task_refid       = decode(l_id_task_refid_n, 0, id_task_refid_in, nvl(id_task_refid_in, id_task_refid)),
               notes               = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes))
         WHERE id_epis_mtos_param = id_epis_mtos_param_in
           AND id_mtos_param = id_mtos_param_in
           AND id_epis_mtos_score = id_epis_mtos_score_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_mtos_param_in   IN epis_mtos_param.id_epis_mtos_param%TYPE,
        id_mtos_param_in        IN epis_mtos_param.id_mtos_param%TYPE,
        id_epis_mtos_score_in   IN epis_mtos_param.id_epis_mtos_score%TYPE,
        id_vital_sign_read_in   IN epis_mtos_param.id_vital_sign_read%TYPE DEFAULT NULL,
        id_vital_sign_read_nin  IN BOOLEAN := TRUE,
        id_prof_create_in       IN epis_mtos_param.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN epis_mtos_param.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        create_user_in          IN epis_mtos_param.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_mtos_param.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_mtos_param.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_mtos_param.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_mtos_param.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_mtos_param.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        registered_value_in     IN epis_mtos_param.registered_value%TYPE DEFAULT NULL,
        registered_value_nin    IN BOOLEAN := TRUE,
        extra_score_in          IN epis_mtos_param.extra_score%TYPE DEFAULT NULL,
        extra_score_nin         IN BOOLEAN := TRUE,
        flg_param_task_type_in  IN epis_mtos_param.flg_param_task_type%TYPE DEFAULT NULL,
        flg_param_task_type_nin IN BOOLEAN := TRUE,
        id_task_refid_in        IN epis_mtos_param.id_task_refid%TYPE DEFAULT NULL,
        id_task_refid_nin       IN BOOLEAN := TRUE,
        notes_in                IN epis_mtos_param.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_mtos_param_in   => id_epis_mtos_param_in,
            id_mtos_param_in        => id_mtos_param_in,
            id_epis_mtos_score_in   => id_epis_mtos_score_in,
            id_vital_sign_read_in   => id_vital_sign_read_in,
            id_vital_sign_read_nin  => id_vital_sign_read_nin,
            id_prof_create_in       => id_prof_create_in,
            id_prof_create_nin      => id_prof_create_nin,
            dt_create_in            => dt_create_in,
            dt_create_nin           => dt_create_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            registered_value_in     => registered_value_in,
            registered_value_nin    => registered_value_nin,
            extra_score_in          => extra_score_in,
            extra_score_nin         => extra_score_nin,
            flg_param_task_type_in  => flg_param_task_type_in,
            flg_param_task_type_nin => flg_param_task_type_nin,
            id_task_refid_in        => id_task_refid_in,
            id_task_refid_nin       => id_task_refid_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_vital_sign_read_in   IN epis_mtos_param.id_vital_sign_read%TYPE DEFAULT NULL,
        id_vital_sign_read_nin  IN BOOLEAN := TRUE,
        id_prof_create_in       IN epis_mtos_param.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN epis_mtos_param.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        create_user_in          IN epis_mtos_param.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_mtos_param.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_mtos_param.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_mtos_param.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_mtos_param.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_mtos_param.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        registered_value_in     IN epis_mtos_param.registered_value%TYPE DEFAULT NULL,
        registered_value_nin    IN BOOLEAN := TRUE,
        extra_score_in          IN epis_mtos_param.extra_score%TYPE DEFAULT NULL,
        extra_score_nin         IN BOOLEAN := TRUE,
        flg_param_task_type_in  IN epis_mtos_param.flg_param_task_type%TYPE DEFAULT NULL,
        flg_param_task_type_nin IN BOOLEAN := TRUE,
        id_task_refid_in        IN epis_mtos_param.id_task_refid%TYPE DEFAULT NULL,
        id_task_refid_nin       IN BOOLEAN := TRUE,
        notes_in                IN epis_mtos_param.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_vital_sign_read_n  NUMBER(1) := sys.diutil.bool_to_int(id_vital_sign_read_nin);
        l_id_prof_create_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n           NUMBER(1) := sys.diutil.bool_to_int(dt_create_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_registered_value_n    NUMBER(1) := sys.diutil.bool_to_int(registered_value_nin);
        l_extra_score_n         NUMBER(1) := sys.diutil.bool_to_int(extra_score_nin);
        l_flg_param_task_type_n NUMBER(1) := sys.diutil.bool_to_int(flg_param_task_type_nin);
        l_id_task_refid_n       NUMBER(1) := sys.diutil.bool_to_int(id_task_refid_nin);
        l_notes_n               NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
    BEGIN
        l_id_vital_sign_read_n  := sys.diutil.bool_to_int(id_vital_sign_read_nin);
        l_id_prof_create_n      := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n           := sys.diutil.bool_to_int(dt_create_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_registered_value_n    := sys.diutil.bool_to_int(registered_value_nin);
        l_extra_score_n         := sys.diutil.bool_to_int(extra_score_nin);
        l_flg_param_task_type_n := sys.diutil.bool_to_int(flg_param_task_type_nin);
        l_id_task_refid_n       := sys.diutil.bool_to_int(id_task_refid_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_sql                   := 'UPDATE epis_mtos_param SET' || ' ID_VITAL_SIGN_READ = decode (' ||
                                   l_id_vital_sign_read_n ||
                                   ',0,:ID_VITAL_SIGN_READ_in, NVL (:ID_VITAL_SIGN_READ_in, ID_VITAL_SIGN_READ)) ' || ',' ||
                                   ' ID_PROF_CREATE = decode (' || l_id_prof_create_n ||
                                   ',0,:ID_PROF_CREATE_in, NVL (:ID_PROF_CREATE_in, ID_PROF_CREATE)) ' || ',' ||
                                   ' DT_CREATE = decode (' || l_dt_create_n ||
                                   ',0,:DT_CREATE_in, NVL (:DT_CREATE_in, DT_CREATE)) ' || ',' ||
                                   ' CREATE_USER = decode (' || l_create_user_n ||
                                   ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                   ' CREATE_TIME = decode (' || l_create_time_n ||
                                   ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                   ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                   ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                   ' UPDATE_USER = decode (' || l_update_user_n ||
                                   ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                   ' UPDATE_TIME = decode (' || l_update_time_n ||
                                   ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                   ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                   ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                   ' REGISTERED_VALUE = decode (' || l_registered_value_n ||
                                   ',0,:REGISTERED_VALUE_in, NVL (:REGISTERED_VALUE_in, REGISTERED_VALUE)) ' || ',' ||
                                   ' EXTRA_SCORE = decode (' || l_extra_score_n ||
                                   ',0,:EXTRA_SCORE_in, NVL (:EXTRA_SCORE_in, EXTRA_SCORE)) ' || ',' ||
                                   ' FLG_PARAM_TASK_TYPE = decode (' || l_flg_param_task_type_n ||
                                   ',0,:FLG_PARAM_TASK_TYPE_in, NVL (:FLG_PARAM_TASK_TYPE_in, FLG_PARAM_TASK_TYPE)) ' || ',' ||
                                   ' ID_TASK_REFID = decode (' || l_id_task_refid_n ||
                                   ',0,:ID_TASK_REFID_in, NVL (:ID_TASK_REFID_in, ID_TASK_REFID)) ' || ',' ||
                                   ' NOTES = decode (' || l_notes_n || ',0,:NOTES_in, NVL (:NOTES_in, NOTES)) ' ||
                                   ' where ' || nvl(where_in, '(1=1)') ||
                                   ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_vital_sign_read_in, id_prof_create_in, dt_create_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, registered_value_in, extra_score_in, flg_param_task_type_in, id_task_refid_in, notes_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_vital_sign_read_in   IN epis_mtos_param.id_vital_sign_read%TYPE DEFAULT NULL,
        id_vital_sign_read_nin  IN BOOLEAN := TRUE,
        id_prof_create_in       IN epis_mtos_param.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN epis_mtos_param.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        create_user_in          IN epis_mtos_param.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_mtos_param.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_mtos_param.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_mtos_param.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_mtos_param.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_mtos_param.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        registered_value_in     IN epis_mtos_param.registered_value%TYPE DEFAULT NULL,
        registered_value_nin    IN BOOLEAN := TRUE,
        extra_score_in          IN epis_mtos_param.extra_score%TYPE DEFAULT NULL,
        extra_score_nin         IN BOOLEAN := TRUE,
        flg_param_task_type_in  IN epis_mtos_param.flg_param_task_type%TYPE DEFAULT NULL,
        flg_param_task_type_nin IN BOOLEAN := TRUE,
        id_task_refid_in        IN epis_mtos_param.id_task_refid%TYPE DEFAULT NULL,
        id_task_refid_nin       IN BOOLEAN := TRUE,
        notes_in                IN epis_mtos_param.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_vital_sign_read_in   => id_vital_sign_read_in,
            id_vital_sign_read_nin  => id_vital_sign_read_nin,
            id_prof_create_in       => id_prof_create_in,
            id_prof_create_nin      => id_prof_create_nin,
            dt_create_in            => dt_create_in,
            dt_create_nin           => dt_create_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            registered_value_in     => registered_value_in,
            registered_value_nin    => registered_value_nin,
            extra_score_in          => extra_score_in,
            extra_score_nin         => extra_score_nin,
            flg_param_task_type_in  => flg_param_task_type_in,
            flg_param_task_type_nin => flg_param_task_type_nin,
            id_task_refid_in        => id_task_refid_in,
            id_task_refid_nin       => id_task_refid_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_epis_mtos_param_in  IN epis_mtos_param.id_epis_mtos_param%TYPE,
        id_mtos_param_in       IN epis_mtos_param.id_mtos_param%TYPE,
        id_epis_mtos_score_in  IN epis_mtos_param.id_epis_mtos_score%TYPE,
        id_vital_sign_read_in  IN epis_mtos_param.id_vital_sign_read%TYPE DEFAULT NULL,
        id_prof_create_in      IN epis_mtos_param.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_mtos_param.dt_create%TYPE DEFAULT NULL,
        create_user_in         IN epis_mtos_param.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_mtos_param.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_mtos_param.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_mtos_param.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_mtos_param.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_mtos_param.update_institution%TYPE DEFAULT NULL,
        registered_value_in    IN epis_mtos_param.registered_value%TYPE DEFAULT NULL,
        extra_score_in         IN epis_mtos_param.extra_score%TYPE DEFAULT NULL,
        flg_param_task_type_in IN epis_mtos_param.flg_param_task_type%TYPE DEFAULT NULL,
        id_task_refid_in       IN epis_mtos_param.id_task_refid%TYPE DEFAULT NULL,
        notes_in               IN epis_mtos_param.notes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_mtos_param_in  => id_epis_mtos_param_in,
            id_mtos_param_in       => id_mtos_param_in,
            id_epis_mtos_score_in  => id_epis_mtos_score_in,
            id_vital_sign_read_in  => id_vital_sign_read_in,
            id_prof_create_in      => id_prof_create_in,
            dt_create_in           => dt_create_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            registered_value_in    => registered_value_in,
            extra_score_in         => extra_score_in,
            flg_param_task_type_in => flg_param_task_type_in,
            id_task_refid_in       => id_task_refid_in,
            notes_in               => notes_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_mtos_param_in  => id_epis_mtos_param_in,
                id_mtos_param_in       => id_mtos_param_in,
                id_epis_mtos_score_in  => id_epis_mtos_score_in,
                id_vital_sign_read_in  => id_vital_sign_read_in,
                id_prof_create_in      => id_prof_create_in,
                dt_create_in           => dt_create_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                registered_value_in    => registered_value_in,
                extra_score_in         => extra_score_in,
                flg_param_task_type_in => flg_param_task_type_in,
                id_task_refid_in       => id_task_refid_in,
                notes_in               => notes_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_epis_mtos_param_in  IN epis_mtos_param.id_epis_mtos_param%TYPE,
        id_mtos_param_in       IN epis_mtos_param.id_mtos_param%TYPE,
        id_epis_mtos_score_in  IN epis_mtos_param.id_epis_mtos_score%TYPE,
        id_vital_sign_read_in  IN epis_mtos_param.id_vital_sign_read%TYPE DEFAULT NULL,
        id_prof_create_in      IN epis_mtos_param.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_mtos_param.dt_create%TYPE DEFAULT NULL,
        create_user_in         IN epis_mtos_param.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_mtos_param.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_mtos_param.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_mtos_param.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_mtos_param.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_mtos_param.update_institution%TYPE DEFAULT NULL,
        registered_value_in    IN epis_mtos_param.registered_value%TYPE DEFAULT NULL,
        extra_score_in         IN epis_mtos_param.extra_score%TYPE DEFAULT NULL,
        flg_param_task_type_in IN epis_mtos_param.flg_param_task_type%TYPE DEFAULT NULL,
        id_task_refid_in       IN epis_mtos_param.id_task_refid%TYPE DEFAULT NULL,
        notes_in               IN epis_mtos_param.notes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_mtos_param_in,
                id_mtos_param_in,
                id_epis_mtos_score_in,
                id_vital_sign_read_in,
                id_prof_create_in,
                dt_create_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                registered_value_in,
                extra_score_in,
                flg_param_task_type_in,
                id_task_refid_in,
                notes_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_mtos_param%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_mtos_param_in  => rec_in.id_epis_mtos_param,
            id_mtos_param_in       => rec_in.id_mtos_param,
            id_epis_mtos_score_in  => rec_in.id_epis_mtos_score,
            id_vital_sign_read_in  => rec_in.id_vital_sign_read,
            id_prof_create_in      => rec_in.id_prof_create,
            dt_create_in           => rec_in.dt_create,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            registered_value_in    => rec_in.registered_value,
            extra_score_in         => rec_in.extra_score,
            flg_param_task_type_in => rec_in.flg_param_task_type,
            id_task_refid_in       => rec_in.id_task_refid,
            notes_in               => rec_in.notes,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_mtos_param%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_mtos_param_in  => rec_in.id_epis_mtos_param,
            id_mtos_param_in       => rec_in.id_mtos_param,
            id_epis_mtos_score_in  => rec_in.id_epis_mtos_score,
            id_vital_sign_read_in  => rec_in.id_vital_sign_read,
            id_prof_create_in      => rec_in.id_prof_create,
            dt_create_in           => rec_in.dt_create,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            registered_value_in    => rec_in.registered_value,
            extra_score_in         => rec_in.extra_score,
            flg_param_task_type_in => rec_in.flg_param_task_type,
            id_task_refid_in       => rec_in.id_task_refid,
            notes_in               => rec_in.notes,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_mtos_param_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_mtos_param  id_epis_mtos_param_cc;
        l_id_mtos_param       id_mtos_param_cc;
        l_id_epis_mtos_score  id_epis_mtos_score_cc;
        l_id_vital_sign_read  id_vital_sign_read_cc;
        l_id_prof_create      id_prof_create_cc;
        l_dt_create           dt_create_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
        l_registered_value    registered_value_cc;
        l_extra_score         extra_score_cc;
        l_flg_param_task_type flg_param_task_type_cc;
        l_id_task_refid       id_task_refid_cc;
        l_notes               notes_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_mtos_param(i) := col_in(i).id_epis_mtos_param;
            l_id_mtos_param(i) := col_in(i).id_mtos_param;
            l_id_epis_mtos_score(i) := col_in(i).id_epis_mtos_score;
            l_id_vital_sign_read(i) := col_in(i).id_vital_sign_read;
            l_id_prof_create(i) := col_in(i).id_prof_create;
            l_dt_create(i) := col_in(i).dt_create;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_registered_value(i) := col_in(i).registered_value;
            l_extra_score(i) := col_in(i).extra_score;
            l_flg_param_task_type(i) := col_in(i).flg_param_task_type;
            l_id_task_refid(i) := col_in(i).id_task_refid;
            l_notes(i) := col_in(i).notes;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_mtos_param
                   SET id_vital_sign_read  = nvl(l_id_vital_sign_read(i), id_vital_sign_read),
                       id_prof_create      = nvl(l_id_prof_create(i), id_prof_create),
                       dt_create           = nvl(l_dt_create(i), dt_create),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution),
                       registered_value    = nvl(l_registered_value(i), registered_value),
                       extra_score         = nvl(l_extra_score(i), extra_score),
                       flg_param_task_type = nvl(l_flg_param_task_type(i), flg_param_task_type),
                       id_task_refid       = nvl(l_id_task_refid(i), id_task_refid),
                       notes               = nvl(l_notes(i), notes)
                 WHERE id_epis_mtos_param = l_id_epis_mtos_param(i)
                   AND id_mtos_param = l_id_mtos_param(i)
                   AND id_epis_mtos_score = l_id_epis_mtos_score(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_mtos_param
                   SET id_vital_sign_read  = l_id_vital_sign_read(i),
                       id_prof_create      = l_id_prof_create(i),
                       dt_create           = l_dt_create(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i),
                       registered_value    = l_registered_value(i),
                       extra_score         = l_extra_score(i),
                       flg_param_task_type = l_flg_param_task_type(i),
                       id_task_refid       = l_id_task_refid(i),
                       notes               = l_notes(i)
                 WHERE id_epis_mtos_param = l_id_epis_mtos_param(i)
                   AND id_mtos_param = l_id_mtos_param(i)
                   AND id_epis_mtos_score = l_id_epis_mtos_score(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_mtos_param_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE epis_mtos_param
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE epis_mtos_param
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE epis_mtos_param
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_mtos_param_in IN epis_mtos_param.id_epis_mtos_param%TYPE,
        id_mtos_param_in      IN epis_mtos_param.id_mtos_param%TYPE,
        id_epis_mtos_score_in IN epis_mtos_param.id_epis_mtos_score%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_mtos_param
         WHERE id_epis_mtos_param = id_epis_mtos_param_in
           AND id_mtos_param = id_mtos_param_in
           AND id_epis_mtos_score = id_epis_mtos_score_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_mtos_param_in IN epis_mtos_param.id_epis_mtos_param%TYPE,
        id_mtos_param_in      IN epis_mtos_param.id_mtos_param%TYPE,
        id_epis_mtos_score_in IN epis_mtos_param.id_epis_mtos_score%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_epis_mtos_param_in => id_epis_mtos_param_in,
            id_mtos_param_in      => id_mtos_param_in,
            id_epis_mtos_score_in => id_epis_mtos_score_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END del;

    -- Delete all rows for this EMP_EMS_FK foreign key value
    PROCEDURE del_emp_ems_fk
    (
        id_epis_mtos_score_in IN epis_mtos_param.id_epis_mtos_score%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_mtos_param
         WHERE id_epis_mtos_score = id_epis_mtos_score_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_emp_ems_fk;

    -- Delete all rows for this EMP_MPM_FK foreign key value
    PROCEDURE del_emp_mpm_fk
    (
        id_mtos_param_in IN epis_mtos_param.id_mtos_param%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_mtos_param
         WHERE id_mtos_param = id_mtos_param_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_emp_mpm_fk;

    -- Delete all rows for this EMP_PFR_FK foreign key value
    PROCEDURE del_emp_pfr_fk
    (
        id_prof_create_in IN epis_mtos_param.id_prof_create%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_mtos_param
         WHERE id_prof_create = id_prof_create_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_emp_pfr_fk;

    -- Delete all rows for this EMP_VSR_FK foreign key value
    PROCEDURE del_emp_vsr_fk
    (
        id_vital_sign_read_in IN epis_mtos_param.id_vital_sign_read%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_mtos_param
         WHERE id_vital_sign_read = id_vital_sign_read_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_emp_vsr_fk;

    -- Delete all rows for this EMP_EMS_FK foreign key value
    PROCEDURE del_emp_ems_fk
    (
        id_epis_mtos_score_in IN epis_mtos_param.id_epis_mtos_score%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_emp_ems_fk(id_epis_mtos_score_in => id_epis_mtos_score_in,
                       handle_error_in       => handle_error_in,
                       rows_out              => rows_out);
    END del_emp_ems_fk;

    -- Delete all rows for this EMP_MPM_FK foreign key value
    PROCEDURE del_emp_mpm_fk
    (
        id_mtos_param_in IN epis_mtos_param.id_mtos_param%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_emp_mpm_fk(id_mtos_param_in => id_mtos_param_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_emp_mpm_fk;

    -- Delete all rows for this EMP_PFR_FK foreign key value
    PROCEDURE del_emp_pfr_fk
    (
        id_prof_create_in IN epis_mtos_param.id_prof_create%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_emp_pfr_fk(id_prof_create_in => id_prof_create_in,
                       handle_error_in   => handle_error_in,
                       rows_out          => rows_out);
    END del_emp_pfr_fk;

    -- Delete all rows for this EMP_VSR_FK foreign key value
    PROCEDURE del_emp_vsr_fk
    (
        id_vital_sign_read_in IN epis_mtos_param.id_vital_sign_read%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_emp_vsr_fk(id_vital_sign_read_in => id_vital_sign_read_in,
                       handle_error_in       => handle_error_in,
                       rows_out              => rows_out);
    END del_emp_vsr_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM epis_mtos_param';
        ELSE
            RETURN 'DELETE FROM epis_mtos_param WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(epis_mtos_param_inout IN OUT epis_mtos_param%ROWTYPE) IS
    BEGIN
        epis_mtos_param_inout.id_epis_mtos_param  := NULL;
        epis_mtos_param_inout.id_mtos_param       := NULL;
        epis_mtos_param_inout.id_epis_mtos_score  := NULL;
        epis_mtos_param_inout.id_vital_sign_read  := NULL;
        epis_mtos_param_inout.id_prof_create      := NULL;
        epis_mtos_param_inout.dt_create           := NULL;
        epis_mtos_param_inout.create_user         := NULL;
        epis_mtos_param_inout.create_time         := NULL;
        epis_mtos_param_inout.create_institution  := NULL;
        epis_mtos_param_inout.update_user         := NULL;
        epis_mtos_param_inout.update_time         := NULL;
        epis_mtos_param_inout.update_institution  := NULL;
        epis_mtos_param_inout.registered_value    := NULL;
        epis_mtos_param_inout.extra_score         := NULL;
        epis_mtos_param_inout.flg_param_task_type := NULL;
        epis_mtos_param_inout.id_task_refid       := NULL;
        epis_mtos_param_inout.notes               := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN epis_mtos_param%ROWTYPE IS
        l_epis_mtos_param epis_mtos_param%ROWTYPE;
    BEGIN
        RETURN l_epis_mtos_param;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_mtos_param_tc IS
        data epis_mtos_param_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM epis_mtos_param
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_mtos_param_tc IS
        data epis_mtos_param_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_mtos_param;
/
