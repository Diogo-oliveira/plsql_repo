/*-- Last Change Revision: $Rev: 2028196 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:27 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_hidrics_relation
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 17, 2009 11:45:43
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_hidrics_relation_in IN hidrics_relation.id_hidrics_relation%TYPE,
        id_hidrics_type_in     IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_in          IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        flg_state_in           IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_available_in       IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        id_software_in         IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_institution_in      IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        create_user_in         IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_time_in         IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_time_in         IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO hidrics_relation
            (id_hidrics_relation,
             id_hidrics_type,
             id_hidrics,
             flg_state,
             flg_available,
             id_software,
             id_institution,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_hidrics_relation_in,
             id_hidrics_type_in,
             id_hidrics_in,
             flg_state_in,
             flg_available_in,
             id_software_in,
             id_institution_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'HRN_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "HRN_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'HIDRICS_RELATION',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS_TYPE',
                                                        value_in           => id_hidrics_type_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS',
                                                        value_in           => id_hidrics_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'HIDRICS_RELATION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    IF l_name = 'HRN_HID_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS',
                                                        value_in           => id_hidrics_in);
                    END IF;
                    IF l_name = 'HRN_HIDT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_TYPE',
                                                        value_in           => id_hidrics_type_in);
                    END IF;
                    IF l_name = 'HRN_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'HRN_S_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_hidrics_relation_in IN hidrics_relation.id_hidrics_relation%TYPE,
        id_hidrics_type_in     IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_in          IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        flg_state_in           IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_available_in       IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        id_software_in         IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_institution_in      IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        create_user_in         IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_time_in         IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_time_in         IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_hidrics_relation_in => id_hidrics_relation_in,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_hidrics_in          => id_hidrics_in,
            flg_state_in           => flg_state_in,
            flg_available_in       => flg_available_in,
            id_software_in         => id_software_in,
            id_institution_in      => id_institution_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN hidrics_relation%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec hidrics_relation%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_hidrics_relation := next_key(sequence_in);
        END IF;
        ins(id_hidrics_relation_in => l_rec.id_hidrics_relation,
            id_hidrics_type_in     => l_rec.id_hidrics_type,
            id_hidrics_in          => l_rec.id_hidrics,
            flg_state_in           => l_rec.flg_state,
            flg_available_in       => l_rec.flg_available,
            id_software_in         => l_rec.id_software,
            id_institution_in      => l_rec.id_institution,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN hidrics_relation%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN hidrics_relation.id_hidrics_relation%TYPE
    
     IS
        retval hidrics_relation.id_hidrics_relation%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_hidrics_relation.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_HIDRICS_RELATION'));
    END next_key;

    PROCEDURE ins
    (
        id_hidrics_type_in      IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_in           IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        flg_state_in            IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_available_in        IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        id_software_in          IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_institution_in       IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        create_user_in          IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_time_in          IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_time_in          IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        id_hidrics_relation_out IN OUT hidrics_relation.id_hidrics_relation%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
        l_pky hidrics_relation.id_hidrics_relation%TYPE := next_key;
    BEGIN
        ins(id_hidrics_relation_in => l_pky,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_hidrics_in          => id_hidrics_in,
            flg_state_in           => flg_state_in,
            flg_available_in       => flg_available_in,
            id_software_in         => id_software_in,
            id_institution_in      => id_institution_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_hidrics_relation_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_hidrics_type_in      IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_in           IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        flg_state_in            IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_available_in        IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        id_software_in          IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_institution_in       IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        create_user_in          IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_time_in          IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_time_in          IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        id_hidrics_relation_out IN OUT hidrics_relation.id_hidrics_relation%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_hidrics_type_in      => id_hidrics_type_in,
            id_hidrics_in           => id_hidrics_in,
            flg_state_in            => flg_state_in,
            flg_available_in        => flg_available_in,
            id_software_in          => id_software_in,
            id_institution_in       => id_institution_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            id_hidrics_relation_out => id_hidrics_relation_out,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    FUNCTION ins
    (
        id_hidrics_type_in    IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_in         IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        flg_state_in          IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_available_in      IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        id_software_in        IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_institution_in     IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        create_user_in        IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_time_in        IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_institution_in IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_time_in        IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_institution_in IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) RETURN hidrics_relation.id_hidrics_relation%TYPE IS
        l_pky hidrics_relation.id_hidrics_relation%TYPE := next_key;
    BEGIN
        ins(id_hidrics_relation_in => l_pky,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_hidrics_in          => id_hidrics_in,
            flg_state_in           => flg_state_in,
            flg_available_in       => flg_available_in,
            id_software_in         => id_software_in,
            id_institution_in      => id_institution_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_hidrics_type_in    IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_in         IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        flg_state_in          IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_available_in      IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        id_software_in        IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_institution_in     IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        create_user_in        IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_time_in        IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_institution_in IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_time_in        IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_institution_in IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) RETURN hidrics_relation.id_hidrics_relation%TYPE IS
        l_pky    hidrics_relation.id_hidrics_relation%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_hidrics_relation_in => l_pky,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_hidrics_in          => id_hidrics_in,
            flg_state_in           => flg_state_in,
            flg_available_in       => flg_available_in,
            id_software_in         => id_software_in,
            id_institution_in      => id_institution_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_hidrics_type_in    IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_in         IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        flg_state_in          IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_available_in      IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        id_software_in        IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_institution_in     IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        create_user_in        IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_time_in        IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_institution_in IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_time_in        IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_institution_in IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky hidrics_relation.id_hidrics_relation%TYPE := next_key;
    BEGIN
        ins(id_hidrics_relation_in => l_pky,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_hidrics_in          => id_hidrics_in,
            flg_state_in           => flg_state_in,
            flg_available_in       => flg_available_in,
            id_software_in         => id_software_in,
            id_institution_in      => id_institution_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_hidrics_type_in    IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_in         IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        flg_state_in          IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_available_in      IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        id_software_in        IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_institution_in     IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        create_user_in        IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_time_in        IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_institution_in IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_time_in        IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_institution_in IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        l_pky    hidrics_relation.id_hidrics_relation%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_hidrics_relation_in => l_pky,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_hidrics_in          => id_hidrics_in,
            flg_state_in           => flg_state_in,
            flg_available_in       => flg_available_in,
            id_software_in         => id_software_in,
            id_institution_in      => id_institution_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN hidrics_relation_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO hidrics_relation
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS_RELATION _' || indx,
                                                        value_in           => rows_in(indx).id_hidrics_relation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_hidrics_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS _' || indx,
                                                        value_in           => rows_in(indx).id_hidrics,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATE _' || indx,
                                                        value_in           => rows_in(indx).flg_state,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE _' || indx,
                                                        value_in           => rows_in(indx).flg_available,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE _' || indx,
                                                        value_in           => rows_in(indx).id_software,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'HIDRICS_RELATION',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN hidrics_relation_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_hidrics_relation_in IN hidrics_relation.id_hidrics_relation%TYPE,
        id_hidrics_type_in     IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_type_nin    IN BOOLEAN := TRUE,
        id_hidrics_in          IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        id_hidrics_nin         IN BOOLEAN := TRUE,
        flg_state_in           IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_state_nin          IN BOOLEAN := TRUE,
        flg_available_in       IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        id_software_in         IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_software_nin        IN BOOLEAN := TRUE,
        id_institution_in      IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        create_user_in         IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_hidrics_type_n    NUMBER(1);
        l_id_hidrics_n         NUMBER(1);
        l_flg_state_n          NUMBER(1);
        l_flg_available_n      NUMBER(1);
        l_id_software_n        NUMBER(1);
        l_id_institution_n     NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
    BEGIN
    
        l_id_hidrics_type_n    := sys.diutil.bool_to_int(id_hidrics_type_nin);
        l_id_hidrics_n         := sys.diutil.bool_to_int(id_hidrics_nin);
        l_flg_state_n          := sys.diutil.bool_to_int(flg_state_nin);
        l_flg_available_n      := sys.diutil.bool_to_int(flg_available_nin);
        l_id_software_n        := sys.diutil.bool_to_int(id_software_nin);
        l_id_institution_n     := sys.diutil.bool_to_int(id_institution_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE hidrics_relation
           SET id_hidrics_type    = decode(l_id_hidrics_type_n,
                                           0,
                                           id_hidrics_type_in,
                                           nvl(id_hidrics_type_in, id_hidrics_type)),
               id_hidrics         = decode(l_id_hidrics_n, 0, id_hidrics_in, nvl(id_hidrics_in, id_hidrics)),
               flg_state          = decode(l_flg_state_n, 0, flg_state_in, nvl(flg_state_in, flg_state)),
               flg_available      = decode(l_flg_available_n, 0, flg_available_in, nvl(flg_available_in, flg_available)),
               id_software        = decode(l_id_software_n, 0, id_software_in, nvl(id_software_in, id_software)),
               id_institution     = decode(l_id_institution_n,
                                           0,
                                           id_institution_in,
                                           nvl(id_institution_in, id_institution)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution))
         WHERE id_hidrics_relation = id_hidrics_relation_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'HRN_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "HRN_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'HIDRICS_RELATION',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS_TYPE',
                                                        value_in           => id_hidrics_type_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS',
                                                        value_in           => id_hidrics_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'HIDRICS_RELATION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    IF l_name = 'HRN_HID_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS',
                                                        value_in           => id_hidrics_in);
                    END IF;
                    IF l_name = 'HRN_HIDT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_TYPE',
                                                        value_in           => id_hidrics_type_in);
                    END IF;
                    IF l_name = 'HRN_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'HRN_S_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_hidrics_relation_in IN hidrics_relation.id_hidrics_relation%TYPE,
        id_hidrics_type_in     IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_type_nin    IN BOOLEAN := TRUE,
        id_hidrics_in          IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        id_hidrics_nin         IN BOOLEAN := TRUE,
        flg_state_in           IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_state_nin          IN BOOLEAN := TRUE,
        flg_available_in       IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        id_software_in         IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_software_nin        IN BOOLEAN := TRUE,
        id_institution_in      IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        create_user_in         IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_hidrics_relation_in => id_hidrics_relation_in,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_hidrics_type_nin    => id_hidrics_type_nin,
            id_hidrics_in          => id_hidrics_in,
            id_hidrics_nin         => id_hidrics_nin,
            flg_state_in           => flg_state_in,
            flg_state_nin          => flg_state_nin,
            flg_available_in       => flg_available_in,
            flg_available_nin      => flg_available_nin,
            id_software_in         => id_software_in,
            id_software_nin        => id_software_nin,
            id_institution_in      => id_institution_in,
            id_institution_nin     => id_institution_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_hidrics_type_in     IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_type_nin    IN BOOLEAN := TRUE,
        id_hidrics_in          IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        id_hidrics_nin         IN BOOLEAN := TRUE,
        flg_state_in           IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_state_nin          IN BOOLEAN := TRUE,
        flg_available_in       IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        id_software_in         IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_software_nin        IN BOOLEAN := TRUE,
        id_institution_in      IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        create_user_in         IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_id_hidrics_type_n    NUMBER(1);
        l_id_hidrics_n         NUMBER(1);
        l_flg_state_n          NUMBER(1);
        l_flg_available_n      NUMBER(1);
        l_id_software_n        NUMBER(1);
        l_id_institution_n     NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        id_hidrics_relation_in hidrics_relation.id_hidrics_relation%TYPE;
    BEGIN
    
        l_id_hidrics_type_n    := sys.diutil.bool_to_int(id_hidrics_type_nin);
        l_id_hidrics_n         := sys.diutil.bool_to_int(id_hidrics_nin);
        l_flg_state_n          := sys.diutil.bool_to_int(flg_state_nin);
        l_flg_available_n      := sys.diutil.bool_to_int(flg_available_nin);
        l_id_software_n        := sys.diutil.bool_to_int(id_software_nin);
        l_id_institution_n     := sys.diutil.bool_to_int(id_institution_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE HIDRICS_RELATION SET ' || ' ID_HIDRICS_TYPE = decode (' || l_id_hidrics_type_n ||
                 ',0,:id_hidrics_type_in, NVL (:id_hidrics_type_in, ID_HIDRICS_TYPE)) ' || ',' ||
                 ' ID_HIDRICS = decode (' || l_id_hidrics_n || ',0,:id_hidrics_in, NVL (:id_hidrics_in, ID_HIDRICS)) ' || ',' ||
                 ' FLG_STATE = decode (' || l_flg_state_n || ',0,:flg_state_in, NVL (:flg_state_in, FLG_STATE)) ' || ',' ||
                 ' FLG_AVAILABLE = decode (' || l_flg_available_n ||
                 ',0,:flg_available_in, NVL (:flg_available_in, FLG_AVAILABLE)) ' || ',' || ' ID_SOFTWARE = decode (' ||
                 l_id_software_n || ',0,:id_software_in, NVL (:id_software_in, ID_SOFTWARE)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_hidrics_type_in, id_hidrics_in, flg_state_in, flg_available_in, id_software_in, id_institution_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'HRN_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "HRN_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'HIDRICS_RELATION',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS_TYPE',
                                                        value_in           => id_hidrics_type_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS',
                                                        value_in           => id_hidrics_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'HIDRICS_RELATION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    IF l_name = 'HRN_HID_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS',
                                                        value_in           => id_hidrics_in);
                    END IF;
                    IF l_name = 'HRN_HIDT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_TYPE',
                                                        value_in           => id_hidrics_type_in);
                    END IF;
                    IF l_name = 'HRN_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'HRN_S_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_hidrics_type_in     IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_type_nin    IN BOOLEAN := TRUE,
        id_hidrics_in          IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        id_hidrics_nin         IN BOOLEAN := TRUE,
        flg_state_in           IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_state_nin          IN BOOLEAN := TRUE,
        flg_available_in       IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        flg_available_nin      IN BOOLEAN := TRUE,
        id_software_in         IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_software_nin        IN BOOLEAN := TRUE,
        id_institution_in      IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        id_institution_nin     IN BOOLEAN := TRUE,
        create_user_in         IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_hidrics_type_in     => id_hidrics_type_in,
            id_hidrics_type_nin    => id_hidrics_type_nin,
            id_hidrics_in          => id_hidrics_in,
            id_hidrics_nin         => id_hidrics_nin,
            flg_state_in           => flg_state_in,
            flg_state_nin          => flg_state_nin,
            flg_available_in       => flg_available_in,
            flg_available_nin      => flg_available_nin,
            id_software_in         => id_software_in,
            id_software_nin        => id_software_nin,
            id_institution_in      => id_institution_in,
            id_institution_nin     => id_institution_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN hidrics_relation%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_hidrics_relation_in => rec_in.id_hidrics_relation,
            id_hidrics_type_in     => rec_in.id_hidrics_type,
            id_hidrics_in          => rec_in.id_hidrics,
            flg_state_in           => rec_in.flg_state,
            flg_available_in       => rec_in.flg_available,
            id_software_in         => rec_in.id_software,
            id_institution_in      => rec_in.id_institution,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN hidrics_relation%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_hidrics_relation_in => rec_in.id_hidrics_relation,
            id_hidrics_type_in     => rec_in.id_hidrics_type,
            id_hidrics_in          => rec_in.id_hidrics,
            flg_state_in           => rec_in.flg_state,
            flg_available_in       => rec_in.flg_available,
            id_software_in         => rec_in.id_software,
            id_institution_in      => rec_in.id_institution,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_hidrics_relation_in IN hidrics_relation.id_hidrics_relation%TYPE,
        id_hidrics_type_in     IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_in          IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        flg_state_in           IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_available_in       IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        id_software_in         IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_institution_in      IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        create_user_in         IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_time_in         IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_time_in         IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        upd(id_hidrics_relation_in => id_hidrics_relation_in,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_hidrics_in          => id_hidrics_in,
            flg_state_in           => flg_state_in,
            flg_available_in       => flg_available_in,
            id_software_in         => id_software_in,
            id_institution_in      => id_institution_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_hidrics_relation_in => id_hidrics_relation_in,
                id_hidrics_type_in     => id_hidrics_type_in,
                id_hidrics_in          => id_hidrics_in,
                flg_state_in           => flg_state_in,
                flg_available_in       => flg_available_in,
                id_software_in         => id_software_in,
                id_institution_in      => id_institution_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_hidrics_relation_in IN hidrics_relation.id_hidrics_relation%TYPE,
        id_hidrics_type_in     IN hidrics_relation.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_in          IN hidrics_relation.id_hidrics%TYPE DEFAULT NULL,
        flg_state_in           IN hidrics_relation.flg_state%TYPE DEFAULT NULL,
        flg_available_in       IN hidrics_relation.flg_available%TYPE DEFAULT NULL,
        id_software_in         IN hidrics_relation.id_software%TYPE DEFAULT NULL,
        id_institution_in      IN hidrics_relation.id_institution%TYPE DEFAULT NULL,
        create_user_in         IN hidrics_relation.create_user%TYPE DEFAULT NULL,
        create_time_in         IN hidrics_relation.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN hidrics_relation.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN hidrics_relation.update_user%TYPE DEFAULT NULL,
        update_time_in         IN hidrics_relation.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN hidrics_relation.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_hidrics_relation_in,
                id_hidrics_type_in,
                id_hidrics_in,
                flg_state_in,
                flg_available_in,
                id_software_in,
                id_institution_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN hidrics_relation_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_hidrics_relation id_hidrics_relation_cc;
        l_id_hidrics_type     id_hidrics_type_cc;
        l_id_hidrics          id_hidrics_cc;
        l_flg_state           flg_state_cc;
        l_flg_available       flg_available_cc;
        l_id_software         id_software_cc;
        l_id_institution      id_institution_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_hidrics_relation(i) := col_in(i).id_hidrics_relation;
            l_id_hidrics_type(i) := col_in(i).id_hidrics_type;
            l_id_hidrics(i) := col_in(i).id_hidrics;
            l_flg_state(i) := col_in(i).flg_state;
            l_flg_available(i) := col_in(i).flg_available;
            l_id_software(i) := col_in(i).id_software;
            l_id_institution(i) := col_in(i).id_institution;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE hidrics_relation
                   SET id_hidrics_type    = nvl(l_id_hidrics_type(i), id_hidrics_type),
                       id_hidrics         = nvl(l_id_hidrics(i), id_hidrics),
                       flg_state          = nvl(l_flg_state(i), flg_state),
                       flg_available      = nvl(l_flg_available(i), flg_available),
                       id_software        = nvl(l_id_software(i), id_software),
                       id_institution     = nvl(l_id_institution(i), id_institution),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution)
                 WHERE id_hidrics_relation = l_id_hidrics_relation(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE hidrics_relation
                   SET id_hidrics_type    = l_id_hidrics_type(i),
                       id_hidrics         = l_id_hidrics(i),
                       flg_state          = l_flg_state(i),
                       flg_available      = l_flg_available(i),
                       id_software        = l_id_software(i),
                       id_institution     = l_id_institution(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i)
                 WHERE id_hidrics_relation = l_id_hidrics_relation(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN hidrics_relation_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE HIDRICS_RELATION
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE HIDRICS_RELATION
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE HIDRICS_RELATION set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE HIDRICS_RELATION set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_hidrics_relation_in IN hidrics_relation.id_hidrics_relation%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM hidrics_relation
         WHERE id_hidrics_relation = id_hidrics_relation_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_hidrics_relation_in IN hidrics_relation.id_hidrics_relation%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_hidrics_relation_in => id_hidrics_relation_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_HIDRICS_RELATION
    PROCEDURE del_id_hidrics_relation
    (
        id_hidrics_relation_in IN hidrics_relation.id_hidrics_relation%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM hidrics_relation
         WHERE id_hidrics_relation = id_hidrics_relation_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_hidrics_relation;

    -- Delete all rows for primary key column ID_HIDRICS_RELATION
    PROCEDURE del_id_hidrics_relation
    (
        id_hidrics_relation_in IN hidrics_relation.id_hidrics_relation%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_hidrics_relation(id_hidrics_relation_in => id_hidrics_relation_in,
                                handle_error_in        => handle_error_in,
                                rows_out               => rows_out);
    END del_id_hidrics_relation;

    -- Delete for unique value of HRN_UK
    PROCEDURE del_hrn_uk
    (
        id_hidrics_type_in IN hidrics_relation.id_hidrics_type%TYPE,
        id_hidrics_in      IN hidrics_relation.id_hidrics%TYPE,
        id_software_in     IN hidrics_relation.id_software%TYPE,
        id_institution_in  IN hidrics_relation.id_institution%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM hidrics_relation
         WHERE id_hidrics_type = id_hidrics_type_in
           AND id_hidrics = id_hidrics_in
           AND id_software = id_software_in
           AND id_institution = id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_hrn_uk;

    -- Delete for unique value of HRN_UK
    PROCEDURE del_hrn_uk
    (
        id_hidrics_type_in IN hidrics_relation.id_hidrics_type%TYPE,
        id_hidrics_in      IN hidrics_relation.id_hidrics%TYPE,
        id_software_in     IN hidrics_relation.id_software%TYPE,
        id_institution_in  IN hidrics_relation.id_institution%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_hrn_uk(id_hidrics_type_in => id_hidrics_type_in,
                   id_hidrics_in      => id_hidrics_in,
                   id_software_in     => id_software_in,
                   id_institution_in  => id_institution_in,
                   handle_error_in    => handle_error_in,
                   rows_out           => rows_out);
    END del_hrn_uk;

    PROCEDURE del_hrn_hid_fk
    (
        id_hidrics_in   IN hidrics_relation.id_hidrics%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM hidrics_relation
         WHERE id_hidrics = del_hrn_hid_fk.id_hidrics_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_hrn_hid_fk;

    PROCEDURE del_hrn_hid_fk
    (
        id_hidrics_in   IN hidrics_relation.id_hidrics%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_hrn_hid_fk(id_hidrics_in => id_hidrics_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_hrn_hid_fk;

    PROCEDURE del_hrn_hidt_fk
    (
        id_hidrics_type_in IN hidrics_relation.id_hidrics_type%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM hidrics_relation
         WHERE id_hidrics_type = del_hrn_hidt_fk.id_hidrics_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_hrn_hidt_fk;

    PROCEDURE del_hrn_hidt_fk
    (
        id_hidrics_type_in IN hidrics_relation.id_hidrics_type%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_hrn_hidt_fk(id_hidrics_type_in => id_hidrics_type_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_hrn_hidt_fk;

    PROCEDURE del_hrn_inst_fk
    (
        id_institution_in IN hidrics_relation.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM hidrics_relation
         WHERE id_institution = del_hrn_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_hrn_inst_fk;

    PROCEDURE del_hrn_inst_fk
    (
        id_institution_in IN hidrics_relation.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_hrn_inst_fk(id_institution_in => id_institution_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_hrn_inst_fk;

    PROCEDURE del_hrn_s_fk
    (
        id_software_in  IN hidrics_relation.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM hidrics_relation
         WHERE id_software = del_hrn_s_fk.id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_hrn_s_fk;

    PROCEDURE del_hrn_s_fk
    (
        id_software_in  IN hidrics_relation.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_hrn_s_fk(id_software_in => id_software_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_hrn_s_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM HIDRICS_RELATION';
        ELSE
            RETURN 'DELETE FROM HIDRICS_RELATION WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'HIDRICS_RELATION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'HIDRICS_RELATION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(hidrics_relation_inout IN OUT hidrics_relation%ROWTYPE) IS
    BEGIN
        hidrics_relation_inout.id_hidrics_relation := NULL;
        hidrics_relation_inout.id_hidrics_type     := NULL;
        hidrics_relation_inout.id_hidrics          := NULL;
        hidrics_relation_inout.flg_state           := NULL;
        hidrics_relation_inout.flg_available       := NULL;
        hidrics_relation_inout.id_software         := NULL;
        hidrics_relation_inout.id_institution      := NULL;
        hidrics_relation_inout.create_user         := NULL;
        hidrics_relation_inout.create_time         := NULL;
        hidrics_relation_inout.create_institution  := NULL;
        hidrics_relation_inout.update_user         := NULL;
        hidrics_relation_inout.update_time         := NULL;
        hidrics_relation_inout.update_institution  := NULL;
    END initrec;

    FUNCTION initrec RETURN hidrics_relation%ROWTYPE IS
        l_hidrics_relation hidrics_relation%ROWTYPE;
    BEGIN
        RETURN l_hidrics_relation;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN hidrics_relation_tc IS
        data hidrics_relation_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM hidrics_relation
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN hidrics_relation_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data hidrics_relation_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_hidrics_relation;
/
