/*-- Last Change Revision: $Rev: 2028385 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:28 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_sr_epis_interv
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2022-05-24 09:55:09
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN sr_epis_interv.id_sr_epis_interv%TYPE IS
        retval sr_epis_interv.id_sr_epis_interv%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_sr_epis_interv.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in             IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_sr_intervention_in     IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_req_in            IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        flg_type_in               IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        notes_cancel_in           IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_sr_cancel_reason_in    IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_in   IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_in     IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_context_in     IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        name_interv_in            IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        id_prof_req_unc_in        IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        dt_req_unc_tstz_in        IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        flg_code_type_in          IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        create_user_in            IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_time_in            IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_time_in            IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        laterality_in             IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        flg_surg_request_in       IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        notes_in                  IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        id_cdr_call_in            IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_epis_diagnosis_in      IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        surgical_site_in          IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        id_interv_codification_in IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_pky sr_epis_interv.id_sr_epis_interv%TYPE := next_key;
    BEGIN
        ins(id_sr_epis_interv_in      => l_pky,
            id_episode_in             => id_episode_in,
            id_sr_intervention_in     => id_sr_intervention_in,
            id_prof_req_in            => id_prof_req_in,
            flg_type_in               => flg_type_in,
            flg_status_in             => flg_status_in,
            notes_cancel_in           => notes_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_sr_cancel_reason_in    => id_sr_cancel_reason_in,
            dt_req_tstz_in            => dt_req_tstz_in,
            dt_interv_start_tstz_in   => dt_interv_start_tstz_in,
            dt_interv_end_tstz_in     => dt_interv_end_tstz_in,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            id_episode_context_in     => id_episode_context_in,
            name_interv_in            => name_interv_in,
            id_prof_req_unc_in        => id_prof_req_unc_in,
            dt_req_unc_tstz_in        => dt_req_unc_tstz_in,
            flg_code_type_in          => flg_code_type_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            laterality_in             => laterality_in,
            flg_surg_request_in       => flg_surg_request_in,
            notes_in                  => notes_in,
            id_cdr_call_in            => id_cdr_call_in,
            id_epis_diagnosis_in      => id_epis_diagnosis_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            surgical_site_in          => surgical_site_in,
            id_interv_codification_in => id_interv_codification_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in             IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_sr_intervention_in     IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_req_in            IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        flg_type_in               IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        notes_cancel_in           IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_sr_cancel_reason_in    IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_in   IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_in     IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_context_in     IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        name_interv_in            IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        id_prof_req_unc_in        IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        dt_req_unc_tstz_in        IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        flg_code_type_in          IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        create_user_in            IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_time_in            IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_time_in            IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        laterality_in             IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        flg_surg_request_in       IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        notes_in                  IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        id_cdr_call_in            IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_epis_diagnosis_in      IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        surgical_site_in          IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        id_interv_codification_in IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in             => id_episode_in,
            id_sr_intervention_in     => id_sr_intervention_in,
            id_prof_req_in            => id_prof_req_in,
            flg_type_in               => flg_type_in,
            flg_status_in             => flg_status_in,
            notes_cancel_in           => notes_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_sr_cancel_reason_in    => id_sr_cancel_reason_in,
            dt_req_tstz_in            => dt_req_tstz_in,
            dt_interv_start_tstz_in   => dt_interv_start_tstz_in,
            dt_interv_end_tstz_in     => dt_interv_end_tstz_in,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            id_episode_context_in     => id_episode_context_in,
            name_interv_in            => name_interv_in,
            id_prof_req_unc_in        => id_prof_req_unc_in,
            dt_req_unc_tstz_in        => dt_req_unc_tstz_in,
            flg_code_type_in          => flg_code_type_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            laterality_in             => laterality_in,
            flg_surg_request_in       => flg_surg_request_in,
            notes_in                  => notes_in,
            id_cdr_call_in            => id_cdr_call_in,
            id_epis_diagnosis_in      => id_epis_diagnosis_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            surgical_site_in          => surgical_site_in,
            id_interv_codification_in => id_interv_codification_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in             IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_sr_intervention_in     IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_req_in            IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        flg_type_in               IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        notes_cancel_in           IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_sr_cancel_reason_in    IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_in   IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_in     IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_context_in     IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        name_interv_in            IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        id_prof_req_unc_in        IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        dt_req_unc_tstz_in        IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        flg_code_type_in          IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        create_user_in            IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_time_in            IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_time_in            IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        laterality_in             IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        flg_surg_request_in       IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        notes_in                  IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        id_cdr_call_in            IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_epis_diagnosis_in      IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        surgical_site_in          IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        id_interv_codification_in IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        id_sr_epis_interv_out     IN OUT sr_epis_interv.id_sr_epis_interv%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_pky sr_epis_interv.id_sr_epis_interv%TYPE := next_key;
    BEGIN
        ins(id_sr_epis_interv_in      => l_pky,
            id_episode_in             => id_episode_in,
            id_sr_intervention_in     => id_sr_intervention_in,
            id_prof_req_in            => id_prof_req_in,
            flg_type_in               => flg_type_in,
            flg_status_in             => flg_status_in,
            notes_cancel_in           => notes_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_sr_cancel_reason_in    => id_sr_cancel_reason_in,
            dt_req_tstz_in            => dt_req_tstz_in,
            dt_interv_start_tstz_in   => dt_interv_start_tstz_in,
            dt_interv_end_tstz_in     => dt_interv_end_tstz_in,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            id_episode_context_in     => id_episode_context_in,
            name_interv_in            => name_interv_in,
            id_prof_req_unc_in        => id_prof_req_unc_in,
            dt_req_unc_tstz_in        => dt_req_unc_tstz_in,
            flg_code_type_in          => flg_code_type_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            laterality_in             => laterality_in,
            flg_surg_request_in       => flg_surg_request_in,
            notes_in                  => notes_in,
            id_cdr_call_in            => id_cdr_call_in,
            id_epis_diagnosis_in      => id_epis_diagnosis_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            surgical_site_in          => surgical_site_in,
            id_interv_codification_in => id_interv_codification_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        id_sr_epis_interv_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in             IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_sr_intervention_in     IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_req_in            IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        flg_type_in               IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        notes_cancel_in           IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_sr_cancel_reason_in    IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_in   IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_in     IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_context_in     IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        name_interv_in            IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        id_prof_req_unc_in        IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        dt_req_unc_tstz_in        IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        flg_code_type_in          IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        create_user_in            IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_time_in            IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_time_in            IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        laterality_in             IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        flg_surg_request_in       IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        notes_in                  IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        id_cdr_call_in            IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_epis_diagnosis_in      IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        surgical_site_in          IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        id_interv_codification_in IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        id_sr_epis_interv_out     IN OUT sr_epis_interv.id_sr_epis_interv%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in             => id_episode_in,
            id_sr_intervention_in     => id_sr_intervention_in,
            id_prof_req_in            => id_prof_req_in,
            flg_type_in               => flg_type_in,
            flg_status_in             => flg_status_in,
            notes_cancel_in           => notes_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_sr_cancel_reason_in    => id_sr_cancel_reason_in,
            dt_req_tstz_in            => dt_req_tstz_in,
            dt_interv_start_tstz_in   => dt_interv_start_tstz_in,
            dt_interv_end_tstz_in     => dt_interv_end_tstz_in,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            id_episode_context_in     => id_episode_context_in,
            name_interv_in            => name_interv_in,
            id_prof_req_unc_in        => id_prof_req_unc_in,
            dt_req_unc_tstz_in        => dt_req_unc_tstz_in,
            flg_code_type_in          => flg_code_type_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            laterality_in             => laterality_in,
            flg_surg_request_in       => flg_surg_request_in,
            notes_in                  => notes_in,
            id_cdr_call_in            => id_cdr_call_in,
            id_epis_diagnosis_in      => id_epis_diagnosis_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            surgical_site_in          => surgical_site_in,
            id_interv_codification_in => id_interv_codification_in,
            id_sr_epis_interv_out     => id_sr_epis_interv_out,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in             IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_sr_intervention_in     IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_req_in            IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        flg_type_in               IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        notes_cancel_in           IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_sr_cancel_reason_in    IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_in   IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_in     IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_context_in     IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        name_interv_in            IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        id_prof_req_unc_in        IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        dt_req_unc_tstz_in        IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        flg_code_type_in          IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        create_user_in            IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_time_in            IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_time_in            IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        laterality_in             IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        flg_surg_request_in       IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        notes_in                  IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        id_cdr_call_in            IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_epis_diagnosis_in      IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        surgical_site_in          IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        id_interv_codification_in IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) RETURN sr_epis_interv.id_sr_epis_interv%TYPE IS
        l_pky sr_epis_interv.id_sr_epis_interv%TYPE := next_key;
    BEGIN
        ins(id_sr_epis_interv_in      => l_pky,
            id_episode_in             => id_episode_in,
            id_sr_intervention_in     => id_sr_intervention_in,
            id_prof_req_in            => id_prof_req_in,
            flg_type_in               => flg_type_in,
            flg_status_in             => flg_status_in,
            notes_cancel_in           => notes_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_sr_cancel_reason_in    => id_sr_cancel_reason_in,
            dt_req_tstz_in            => dt_req_tstz_in,
            dt_interv_start_tstz_in   => dt_interv_start_tstz_in,
            dt_interv_end_tstz_in     => dt_interv_end_tstz_in,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            id_episode_context_in     => id_episode_context_in,
            name_interv_in            => name_interv_in,
            id_prof_req_unc_in        => id_prof_req_unc_in,
            dt_req_unc_tstz_in        => dt_req_unc_tstz_in,
            flg_code_type_in          => flg_code_type_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            laterality_in             => laterality_in,
            flg_surg_request_in       => flg_surg_request_in,
            notes_in                  => notes_in,
            id_cdr_call_in            => id_cdr_call_in,
            id_epis_diagnosis_in      => id_epis_diagnosis_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            surgical_site_in          => surgical_site_in,
            id_interv_codification_in => id_interv_codification_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in             IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_sr_intervention_in     IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_req_in            IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        flg_type_in               IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        notes_cancel_in           IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_sr_cancel_reason_in    IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_in   IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_in     IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_context_in     IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        name_interv_in            IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        id_prof_req_unc_in        IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        dt_req_unc_tstz_in        IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        flg_code_type_in          IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        create_user_in            IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_time_in            IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_time_in            IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        laterality_in             IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        flg_surg_request_in       IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        notes_in                  IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        id_cdr_call_in            IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_epis_diagnosis_in      IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        surgical_site_in          IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        id_interv_codification_in IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) RETURN sr_epis_interv.id_sr_epis_interv%TYPE IS
        l_pky    sr_epis_interv.id_sr_epis_interv%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_sr_epis_interv_in      => l_pky,
            id_episode_in             => id_episode_in,
            id_sr_intervention_in     => id_sr_intervention_in,
            id_prof_req_in            => id_prof_req_in,
            flg_type_in               => flg_type_in,
            flg_status_in             => flg_status_in,
            notes_cancel_in           => notes_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_sr_cancel_reason_in    => id_sr_cancel_reason_in,
            dt_req_tstz_in            => dt_req_tstz_in,
            dt_interv_start_tstz_in   => dt_interv_start_tstz_in,
            dt_interv_end_tstz_in     => dt_interv_end_tstz_in,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            id_episode_context_in     => id_episode_context_in,
            name_interv_in            => name_interv_in,
            id_prof_req_unc_in        => id_prof_req_unc_in,
            dt_req_unc_tstz_in        => dt_req_unc_tstz_in,
            flg_code_type_in          => flg_code_type_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            laterality_in             => laterality_in,
            flg_surg_request_in       => flg_surg_request_in,
            notes_in                  => notes_in,
            id_cdr_call_in            => id_cdr_call_in,
            id_epis_diagnosis_in      => id_epis_diagnosis_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            surgical_site_in          => surgical_site_in,
            id_interv_codification_in => id_interv_codification_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_sr_epis_interv_in      IN sr_epis_interv.id_sr_epis_interv%TYPE,
        id_episode_in             IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_sr_intervention_in     IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_req_in            IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        flg_type_in               IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        notes_cancel_in           IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_sr_cancel_reason_in    IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_in   IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_in     IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_context_in     IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        name_interv_in            IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        id_prof_req_unc_in        IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        dt_req_unc_tstz_in        IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        flg_code_type_in          IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        create_user_in            IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_time_in            IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_time_in            IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        laterality_in             IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        flg_surg_request_in       IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        notes_in                  IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        id_cdr_call_in            IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_epis_diagnosis_in      IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        surgical_site_in          IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        id_interv_codification_in IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := FALSE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO sr_epis_interv
            (id_sr_epis_interv,
             id_episode,
             id_sr_intervention,
             id_prof_req,
             flg_type,
             flg_status,
             notes_cancel,
             id_prof_cancel,
             id_sr_cancel_reason,
             dt_req_tstz,
             dt_interv_start_tstz,
             dt_interv_end_tstz,
             dt_cancel_tstz,
             id_episode_context,
             name_interv,
             id_prof_req_unc,
             dt_req_unc_tstz,
             flg_code_type,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             laterality,
             flg_surg_request,
             notes,
             id_cdr_call,
             id_epis_diagnosis,
             id_not_order_reason,
             surgical_site,
             id_interv_codification)
        VALUES
            (id_sr_epis_interv_in,
             id_episode_in,
             id_sr_intervention_in,
             id_prof_req_in,
             flg_type_in,
             flg_status_in,
             notes_cancel_in,
             id_prof_cancel_in,
             id_sr_cancel_reason_in,
             dt_req_tstz_in,
             dt_interv_start_tstz_in,
             dt_interv_end_tstz_in,
             dt_cancel_tstz_in,
             id_episode_context_in,
             name_interv_in,
             id_prof_req_unc_in,
             dt_req_unc_tstz_in,
             flg_code_type_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             laterality_in,
             flg_surg_request_in,
             notes_in,
             id_cdr_call_in,
             id_epis_diagnosis_in,
             id_not_order_reason_in,
             surgical_site_in,
             id_interv_codification_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_sr_epis_interv_in      IN sr_epis_interv.id_sr_epis_interv%TYPE,
        id_episode_in             IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_sr_intervention_in     IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_req_in            IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        flg_type_in               IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        notes_cancel_in           IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_sr_cancel_reason_in    IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_in   IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_in     IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_context_in     IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        name_interv_in            IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        id_prof_req_unc_in        IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        dt_req_unc_tstz_in        IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        flg_code_type_in          IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        create_user_in            IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_time_in            IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_time_in            IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        laterality_in             IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        flg_surg_request_in       IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        notes_in                  IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        id_cdr_call_in            IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_epis_diagnosis_in      IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        surgical_site_in          IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        id_interv_codification_in IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_sr_epis_interv_in      => id_sr_epis_interv_in,
            id_episode_in             => id_episode_in,
            id_sr_intervention_in     => id_sr_intervention_in,
            id_prof_req_in            => id_prof_req_in,
            flg_type_in               => flg_type_in,
            flg_status_in             => flg_status_in,
            notes_cancel_in           => notes_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_sr_cancel_reason_in    => id_sr_cancel_reason_in,
            dt_req_tstz_in            => dt_req_tstz_in,
            dt_interv_start_tstz_in   => dt_interv_start_tstz_in,
            dt_interv_end_tstz_in     => dt_interv_end_tstz_in,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            id_episode_context_in     => id_episode_context_in,
            name_interv_in            => name_interv_in,
            id_prof_req_unc_in        => id_prof_req_unc_in,
            dt_req_unc_tstz_in        => dt_req_unc_tstz_in,
            flg_code_type_in          => flg_code_type_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            laterality_in             => laterality_in,
            flg_surg_request_in       => flg_surg_request_in,
            notes_in                  => notes_in,
            id_cdr_call_in            => id_cdr_call_in,
            id_epis_diagnosis_in      => id_epis_diagnosis_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            surgical_site_in          => surgical_site_in,
            id_interv_codification_in => id_interv_codification_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN sr_epis_interv%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_rec sr_epis_interv%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_sr_epis_interv := next_key(sequence_in);
        END IF;
    
        ins(id_sr_epis_interv_in      => l_rec.id_sr_epis_interv,
            id_episode_in             => l_rec.id_episode,
            id_sr_intervention_in     => l_rec.id_sr_intervention,
            id_prof_req_in            => l_rec.id_prof_req,
            flg_type_in               => l_rec.flg_type,
            flg_status_in             => l_rec.flg_status,
            notes_cancel_in           => l_rec.notes_cancel,
            id_prof_cancel_in         => l_rec.id_prof_cancel,
            id_sr_cancel_reason_in    => l_rec.id_sr_cancel_reason,
            dt_req_tstz_in            => l_rec.dt_req_tstz,
            dt_interv_start_tstz_in   => l_rec.dt_interv_start_tstz,
            dt_interv_end_tstz_in     => l_rec.dt_interv_end_tstz,
            dt_cancel_tstz_in         => l_rec.dt_cancel_tstz,
            id_episode_context_in     => l_rec.id_episode_context,
            name_interv_in            => l_rec.name_interv,
            id_prof_req_unc_in        => l_rec.id_prof_req_unc,
            dt_req_unc_tstz_in        => l_rec.dt_req_unc_tstz,
            flg_code_type_in          => l_rec.flg_code_type,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            laterality_in             => l_rec.laterality,
            flg_surg_request_in       => l_rec.flg_surg_request,
            notes_in                  => l_rec.notes,
            id_cdr_call_in            => l_rec.id_cdr_call,
            id_epis_diagnosis_in      => l_rec.id_epis_diagnosis,
            id_not_order_reason_in    => l_rec.id_not_order_reason,
            surgical_site_in          => l_rec.surgical_site,
            id_interv_codification_in => l_rec.id_interv_codification,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN sr_epis_interv%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN sr_epis_interv_tc,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO sr_epis_interv
                    (id_sr_epis_interv,
                     id_episode,
                     id_sr_intervention,
                     id_prof_req,
                     flg_type,
                     flg_status,
                     notes_cancel,
                     id_prof_cancel,
                     id_sr_cancel_reason,
                     dt_req_tstz,
                     dt_interv_start_tstz,
                     dt_interv_end_tstz,
                     dt_cancel_tstz,
                     id_episode_context,
                     name_interv,
                     id_prof_req_unc,
                     dt_req_unc_tstz,
                     flg_code_type,
                     laterality,
                     flg_surg_request,
                     notes,
                     id_cdr_call,
                     id_epis_diagnosis,
                     id_not_order_reason,
                     surgical_site,
                     id_interv_codification)
                VALUES
                    (rows_in(indx).id_sr_epis_interv,
                     rows_in(indx).id_episode,
                     rows_in(indx).id_sr_intervention,
                     rows_in(indx).id_prof_req,
                     rows_in(indx).flg_type,
                     rows_in(indx).flg_status,
                     rows_in(indx).notes_cancel,
                     rows_in(indx).id_prof_cancel,
                     rows_in(indx).id_sr_cancel_reason,
                     rows_in(indx).dt_req_tstz,
                     rows_in(indx).dt_interv_start_tstz,
                     rows_in(indx).dt_interv_end_tstz,
                     rows_in(indx).dt_cancel_tstz,
                     rows_in(indx).id_episode_context,
                     rows_in(indx).name_interv,
                     rows_in(indx).id_prof_req_unc,
                     rows_in(indx).dt_req_unc_tstz,
                     rows_in(indx).flg_code_type,
                     rows_in(indx).laterality,
                     rows_in(indx).flg_surg_request,
                     rows_in(indx).notes,
                     rows_in(indx).id_cdr_call,
                     rows_in(indx).id_epis_diagnosis,
                     rows_in(indx).id_not_order_reason,
                     rows_in(indx).surgical_site,
                     rows_in(indx).id_interv_codification)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN sr_epis_interv_tc,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_sr_epis_interv_in       IN sr_epis_interv.id_sr_epis_interv%TYPE,
        id_episode_in              IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        id_sr_intervention_in      IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_sr_intervention_nin     IN BOOLEAN := TRUE,
        id_prof_req_in             IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin            IN BOOLEAN := TRUE,
        flg_type_in                IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_type_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        notes_cancel_in            IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        id_sr_cancel_reason_in     IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        id_sr_cancel_reason_nin    IN BOOLEAN := TRUE,
        dt_req_tstz_in             IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin            IN BOOLEAN := TRUE,
        dt_interv_start_tstz_in    IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_nin   IN BOOLEAN := TRUE,
        dt_interv_end_tstz_in      IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_nin     IN BOOLEAN := TRUE,
        dt_cancel_tstz_in          IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin         IN BOOLEAN := TRUE,
        id_episode_context_in      IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        id_episode_context_nin     IN BOOLEAN := TRUE,
        name_interv_in             IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        name_interv_nin            IN BOOLEAN := TRUE,
        id_prof_req_unc_in         IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        id_prof_req_unc_nin        IN BOOLEAN := TRUE,
        dt_req_unc_tstz_in         IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        dt_req_unc_tstz_nin        IN BOOLEAN := TRUE,
        flg_code_type_in           IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        flg_code_type_nin          IN BOOLEAN := TRUE,
        create_user_in             IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        laterality_in              IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        laterality_nin             IN BOOLEAN := TRUE,
        flg_surg_request_in        IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        flg_surg_request_nin       IN BOOLEAN := TRUE,
        notes_in                   IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cdr_call_in             IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_cdr_call_nin            IN BOOLEAN := TRUE,
        id_epis_diagnosis_in       IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin      IN BOOLEAN := TRUE,
        id_not_order_reason_in     IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        id_not_order_reason_nin    IN BOOLEAN := TRUE,
        surgical_site_in           IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        surgical_site_nin          IN BOOLEAN := TRUE,
        id_interv_codification_in  IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        id_interv_codification_nin IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := FALSE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_id_episode_n             NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_id_sr_intervention_n     NUMBER(1) := sys.diutil.bool_to_int(id_sr_intervention_nin);
        l_id_prof_req_n            NUMBER(1) := sys.diutil.bool_to_int(id_prof_req_nin);
        l_flg_type_n               NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_status_n             NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_notes_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_prof_cancel_n         NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_id_sr_cancel_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_sr_cancel_reason_nin);
        l_dt_req_tstz_n            NUMBER(1) := sys.diutil.bool_to_int(dt_req_tstz_nin);
        l_dt_interv_start_tstz_n   NUMBER(1) := sys.diutil.bool_to_int(dt_interv_start_tstz_nin);
        l_dt_interv_end_tstz_n     NUMBER(1) := sys.diutil.bool_to_int(dt_interv_end_tstz_nin);
        l_dt_cancel_tstz_n         NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_episode_context_n     NUMBER(1) := sys.diutil.bool_to_int(id_episode_context_nin);
        l_name_interv_n            NUMBER(1) := sys.diutil.bool_to_int(name_interv_nin);
        l_id_prof_req_unc_n        NUMBER(1) := sys.diutil.bool_to_int(id_prof_req_unc_nin);
        l_dt_req_unc_tstz_n        NUMBER(1) := sys.diutil.bool_to_int(dt_req_unc_tstz_nin);
        l_flg_code_type_n          NUMBER(1) := sys.diutil.bool_to_int(flg_code_type_nin);
        l_create_user_n            NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_laterality_n             NUMBER(1) := sys.diutil.bool_to_int(laterality_nin);
        l_flg_surg_request_n       NUMBER(1) := sys.diutil.bool_to_int(flg_surg_request_nin);
        l_notes_n                  NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_id_cdr_call_n            NUMBER(1) := sys.diutil.bool_to_int(id_cdr_call_nin);
        l_id_epis_diagnosis_n      NUMBER(1) := sys.diutil.bool_to_int(id_epis_diagnosis_nin);
        l_id_not_order_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_not_order_reason_nin);
        l_surgical_site_n          NUMBER(1) := sys.diutil.bool_to_int(surgical_site_nin);
        l_id_interv_codification_n NUMBER(1) := sys.diutil.bool_to_int(id_interv_codification_nin);
    BEGIN
    
        UPDATE sr_epis_interv
           SET id_episode             = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_sr_intervention     = decode(l_id_sr_intervention_n,
                                               0,
                                               id_sr_intervention_in,
                                               nvl(id_sr_intervention_in, id_sr_intervention)),
               id_prof_req            = decode(l_id_prof_req_n, 0, id_prof_req_in, nvl(id_prof_req_in, id_prof_req)),
               flg_type               = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               flg_status             = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               notes_cancel           = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               id_prof_cancel         = decode(l_id_prof_cancel_n,
                                               0,
                                               id_prof_cancel_in,
                                               nvl(id_prof_cancel_in, id_prof_cancel)),
               id_sr_cancel_reason    = decode(l_id_sr_cancel_reason_n,
                                               0,
                                               id_sr_cancel_reason_in,
                                               nvl(id_sr_cancel_reason_in, id_sr_cancel_reason)),
               dt_req_tstz            = decode(l_dt_req_tstz_n, 0, dt_req_tstz_in, nvl(dt_req_tstz_in, dt_req_tstz)),
               dt_interv_start_tstz   = decode(l_dt_interv_start_tstz_n,
                                               0,
                                               dt_interv_start_tstz_in,
                                               nvl(dt_interv_start_tstz_in, dt_interv_start_tstz)),
               dt_interv_end_tstz     = decode(l_dt_interv_end_tstz_n,
                                               0,
                                               dt_interv_end_tstz_in,
                                               nvl(dt_interv_end_tstz_in, dt_interv_end_tstz)),
               dt_cancel_tstz         = decode(l_dt_cancel_tstz_n,
                                               0,
                                               dt_cancel_tstz_in,
                                               nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               id_episode_context     = decode(l_id_episode_context_n,
                                               0,
                                               id_episode_context_in,
                                               nvl(id_episode_context_in, id_episode_context)),
               name_interv            = decode(l_name_interv_n, 0, name_interv_in, nvl(name_interv_in, name_interv)),
               id_prof_req_unc        = decode(l_id_prof_req_unc_n,
                                               0,
                                               id_prof_req_unc_in,
                                               nvl(id_prof_req_unc_in, id_prof_req_unc)),
               dt_req_unc_tstz        = decode(l_dt_req_unc_tstz_n,
                                               0,
                                               dt_req_unc_tstz_in,
                                               nvl(dt_req_unc_tstz_in, dt_req_unc_tstz)),
               flg_code_type          = decode(l_flg_code_type_n,
                                               0,
                                               flg_code_type_in,
                                               nvl(flg_code_type_in, flg_code_type)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution)),
               laterality             = decode(l_laterality_n, 0, laterality_in, nvl(laterality_in, laterality)),
               flg_surg_request       = decode(l_flg_surg_request_n,
                                               0,
                                               flg_surg_request_in,
                                               nvl(flg_surg_request_in, flg_surg_request)),
               notes                  = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_cdr_call            = decode(l_id_cdr_call_n, 0, id_cdr_call_in, nvl(id_cdr_call_in, id_cdr_call)),
               id_epis_diagnosis      = decode(l_id_epis_diagnosis_n,
                                               0,
                                               id_epis_diagnosis_in,
                                               nvl(id_epis_diagnosis_in, id_epis_diagnosis)),
               id_not_order_reason    = decode(l_id_not_order_reason_n,
                                               0,
                                               id_not_order_reason_in,
                                               nvl(id_not_order_reason_in, id_not_order_reason)),
               surgical_site          = decode(l_surgical_site_n,
                                               0,
                                               surgical_site_in,
                                               nvl(surgical_site_in, surgical_site)),
               id_interv_codification = decode(l_id_interv_codification_n,
                                               0,
                                               id_interv_codification_in,
                                               nvl(id_interv_codification_in, id_interv_codification))
         WHERE id_sr_epis_interv = id_sr_epis_interv_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_sr_epis_interv_in       IN sr_epis_interv.id_sr_epis_interv%TYPE,
        id_episode_in              IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        id_sr_intervention_in      IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_sr_intervention_nin     IN BOOLEAN := TRUE,
        id_prof_req_in             IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin            IN BOOLEAN := TRUE,
        flg_type_in                IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_type_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        notes_cancel_in            IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        id_sr_cancel_reason_in     IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        id_sr_cancel_reason_nin    IN BOOLEAN := TRUE,
        dt_req_tstz_in             IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin            IN BOOLEAN := TRUE,
        dt_interv_start_tstz_in    IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_nin   IN BOOLEAN := TRUE,
        dt_interv_end_tstz_in      IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_nin     IN BOOLEAN := TRUE,
        dt_cancel_tstz_in          IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin         IN BOOLEAN := TRUE,
        id_episode_context_in      IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        id_episode_context_nin     IN BOOLEAN := TRUE,
        name_interv_in             IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        name_interv_nin            IN BOOLEAN := TRUE,
        id_prof_req_unc_in         IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        id_prof_req_unc_nin        IN BOOLEAN := TRUE,
        dt_req_unc_tstz_in         IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        dt_req_unc_tstz_nin        IN BOOLEAN := TRUE,
        flg_code_type_in           IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        flg_code_type_nin          IN BOOLEAN := TRUE,
        create_user_in             IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        laterality_in              IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        laterality_nin             IN BOOLEAN := TRUE,
        flg_surg_request_in        IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        flg_surg_request_nin       IN BOOLEAN := TRUE,
        notes_in                   IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cdr_call_in             IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_cdr_call_nin            IN BOOLEAN := TRUE,
        id_epis_diagnosis_in       IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin      IN BOOLEAN := TRUE,
        id_not_order_reason_in     IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        id_not_order_reason_nin    IN BOOLEAN := TRUE,
        surgical_site_in           IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        surgical_site_nin          IN BOOLEAN := TRUE,
        id_interv_codification_in  IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        id_interv_codification_nin IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_sr_epis_interv_in       => id_sr_epis_interv_in,
            id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            id_sr_intervention_in      => id_sr_intervention_in,
            id_sr_intervention_nin     => id_sr_intervention_nin,
            id_prof_req_in             => id_prof_req_in,
            id_prof_req_nin            => id_prof_req_nin,
            flg_type_in                => flg_type_in,
            flg_type_nin               => flg_type_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            notes_cancel_in            => notes_cancel_in,
            notes_cancel_nin           => notes_cancel_nin,
            id_prof_cancel_in          => id_prof_cancel_in,
            id_prof_cancel_nin         => id_prof_cancel_nin,
            id_sr_cancel_reason_in     => id_sr_cancel_reason_in,
            id_sr_cancel_reason_nin    => id_sr_cancel_reason_nin,
            dt_req_tstz_in             => dt_req_tstz_in,
            dt_req_tstz_nin            => dt_req_tstz_nin,
            dt_interv_start_tstz_in    => dt_interv_start_tstz_in,
            dt_interv_start_tstz_nin   => dt_interv_start_tstz_nin,
            dt_interv_end_tstz_in      => dt_interv_end_tstz_in,
            dt_interv_end_tstz_nin     => dt_interv_end_tstz_nin,
            dt_cancel_tstz_in          => dt_cancel_tstz_in,
            dt_cancel_tstz_nin         => dt_cancel_tstz_nin,
            id_episode_context_in      => id_episode_context_in,
            id_episode_context_nin     => id_episode_context_nin,
            name_interv_in             => name_interv_in,
            name_interv_nin            => name_interv_nin,
            id_prof_req_unc_in         => id_prof_req_unc_in,
            id_prof_req_unc_nin        => id_prof_req_unc_nin,
            dt_req_unc_tstz_in         => dt_req_unc_tstz_in,
            dt_req_unc_tstz_nin        => dt_req_unc_tstz_nin,
            flg_code_type_in           => flg_code_type_in,
            flg_code_type_nin          => flg_code_type_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            laterality_in              => laterality_in,
            laterality_nin             => laterality_nin,
            flg_surg_request_in        => flg_surg_request_in,
            flg_surg_request_nin       => flg_surg_request_nin,
            notes_in                   => notes_in,
            notes_nin                  => notes_nin,
            id_cdr_call_in             => id_cdr_call_in,
            id_cdr_call_nin            => id_cdr_call_nin,
            id_epis_diagnosis_in       => id_epis_diagnosis_in,
            id_epis_diagnosis_nin      => id_epis_diagnosis_nin,
            id_not_order_reason_in     => id_not_order_reason_in,
            id_not_order_reason_nin    => id_not_order_reason_nin,
            surgical_site_in           => surgical_site_in,
            surgical_site_nin          => surgical_site_nin,
            id_interv_codification_in  => id_interv_codification_in,
            id_interv_codification_nin => id_interv_codification_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in              IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        id_sr_intervention_in      IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_sr_intervention_nin     IN BOOLEAN := TRUE,
        id_prof_req_in             IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin            IN BOOLEAN := TRUE,
        flg_type_in                IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_type_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        notes_cancel_in            IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        id_sr_cancel_reason_in     IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        id_sr_cancel_reason_nin    IN BOOLEAN := TRUE,
        dt_req_tstz_in             IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin            IN BOOLEAN := TRUE,
        dt_interv_start_tstz_in    IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_nin   IN BOOLEAN := TRUE,
        dt_interv_end_tstz_in      IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_nin     IN BOOLEAN := TRUE,
        dt_cancel_tstz_in          IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin         IN BOOLEAN := TRUE,
        id_episode_context_in      IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        id_episode_context_nin     IN BOOLEAN := TRUE,
        name_interv_in             IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        name_interv_nin            IN BOOLEAN := TRUE,
        id_prof_req_unc_in         IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        id_prof_req_unc_nin        IN BOOLEAN := TRUE,
        dt_req_unc_tstz_in         IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        dt_req_unc_tstz_nin        IN BOOLEAN := TRUE,
        flg_code_type_in           IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        flg_code_type_nin          IN BOOLEAN := TRUE,
        create_user_in             IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        laterality_in              IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        laterality_nin             IN BOOLEAN := TRUE,
        flg_surg_request_in        IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        flg_surg_request_nin       IN BOOLEAN := TRUE,
        notes_in                   IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cdr_call_in             IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_cdr_call_nin            IN BOOLEAN := TRUE,
        id_epis_diagnosis_in       IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin      IN BOOLEAN := TRUE,
        id_not_order_reason_in     IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        id_not_order_reason_nin    IN BOOLEAN := TRUE,
        surgical_site_in           IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        surgical_site_nin          IN BOOLEAN := TRUE,
        id_interv_codification_in  IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        id_interv_codification_nin IN BOOLEAN := TRUE,
        where_in                   IN VARCHAR2,
        handle_error_in            IN BOOLEAN := FALSE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_id_episode_n             NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_id_sr_intervention_n     NUMBER(1) := sys.diutil.bool_to_int(id_sr_intervention_nin);
        l_id_prof_req_n            NUMBER(1) := sys.diutil.bool_to_int(id_prof_req_nin);
        l_flg_type_n               NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_status_n             NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_notes_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_prof_cancel_n         NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_id_sr_cancel_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_sr_cancel_reason_nin);
        l_dt_req_tstz_n            NUMBER(1) := sys.diutil.bool_to_int(dt_req_tstz_nin);
        l_dt_interv_start_tstz_n   NUMBER(1) := sys.diutil.bool_to_int(dt_interv_start_tstz_nin);
        l_dt_interv_end_tstz_n     NUMBER(1) := sys.diutil.bool_to_int(dt_interv_end_tstz_nin);
        l_dt_cancel_tstz_n         NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_episode_context_n     NUMBER(1) := sys.diutil.bool_to_int(id_episode_context_nin);
        l_name_interv_n            NUMBER(1) := sys.diutil.bool_to_int(name_interv_nin);
        l_id_prof_req_unc_n        NUMBER(1) := sys.diutil.bool_to_int(id_prof_req_unc_nin);
        l_dt_req_unc_tstz_n        NUMBER(1) := sys.diutil.bool_to_int(dt_req_unc_tstz_nin);
        l_flg_code_type_n          NUMBER(1) := sys.diutil.bool_to_int(flg_code_type_nin);
        l_create_user_n            NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_laterality_n             NUMBER(1) := sys.diutil.bool_to_int(laterality_nin);
        l_flg_surg_request_n       NUMBER(1) := sys.diutil.bool_to_int(flg_surg_request_nin);
        l_notes_n                  NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_id_cdr_call_n            NUMBER(1) := sys.diutil.bool_to_int(id_cdr_call_nin);
        l_id_epis_diagnosis_n      NUMBER(1) := sys.diutil.bool_to_int(id_epis_diagnosis_nin);
        l_id_not_order_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_not_order_reason_nin);
        l_surgical_site_n          NUMBER(1) := sys.diutil.bool_to_int(surgical_site_nin);
        l_id_interv_codification_n NUMBER(1) := sys.diutil.bool_to_int(id_interv_codification_nin);
    BEGIN
        l_id_episode_n             := sys.diutil.bool_to_int(id_episode_nin);
        l_id_sr_intervention_n     := sys.diutil.bool_to_int(id_sr_intervention_nin);
        l_id_prof_req_n            := sys.diutil.bool_to_int(id_prof_req_nin);
        l_flg_type_n               := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_notes_cancel_n           := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_prof_cancel_n         := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_id_sr_cancel_reason_n    := sys.diutil.bool_to_int(id_sr_cancel_reason_nin);
        l_dt_req_tstz_n            := sys.diutil.bool_to_int(dt_req_tstz_nin);
        l_dt_interv_start_tstz_n   := sys.diutil.bool_to_int(dt_interv_start_tstz_nin);
        l_dt_interv_end_tstz_n     := sys.diutil.bool_to_int(dt_interv_end_tstz_nin);
        l_dt_cancel_tstz_n         := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_episode_context_n     := sys.diutil.bool_to_int(id_episode_context_nin);
        l_name_interv_n            := sys.diutil.bool_to_int(name_interv_nin);
        l_id_prof_req_unc_n        := sys.diutil.bool_to_int(id_prof_req_unc_nin);
        l_dt_req_unc_tstz_n        := sys.diutil.bool_to_int(dt_req_unc_tstz_nin);
        l_flg_code_type_n          := sys.diutil.bool_to_int(flg_code_type_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_laterality_n             := sys.diutil.bool_to_int(laterality_nin);
        l_flg_surg_request_n       := sys.diutil.bool_to_int(flg_surg_request_nin);
        l_notes_n                  := sys.diutil.bool_to_int(notes_nin);
        l_id_cdr_call_n            := sys.diutil.bool_to_int(id_cdr_call_nin);
        l_id_epis_diagnosis_n      := sys.diutil.bool_to_int(id_epis_diagnosis_nin);
        l_id_not_order_reason_n    := sys.diutil.bool_to_int(id_not_order_reason_nin);
        l_surgical_site_n          := sys.diutil.bool_to_int(surgical_site_nin);
        l_id_interv_codification_n := sys.diutil.bool_to_int(id_interv_codification_nin);
        l_sql                      := 'UPDATE sr_epis_interv SET' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                                      ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ',' ||
                                      ' ID_SR_INTERVENTION = decode (' || l_id_sr_intervention_n ||
                                      ',0,:ID_SR_INTERVENTION_in, NVL (:ID_SR_INTERVENTION_in, ID_SR_INTERVENTION)) ' || ',' ||
                                      ' ID_PROF_REQ = decode (' || l_id_prof_req_n ||
                                      ',0,:ID_PROF_REQ_in, NVL (:ID_PROF_REQ_in, ID_PROF_REQ)) ' || ',' ||
                                      ' FLG_TYPE = decode (' || l_flg_type_n ||
                                      ',0,:FLG_TYPE_in, NVL (:FLG_TYPE_in, FLG_TYPE)) ' || ',' ||
                                      ' FLG_STATUS = decode (' || l_flg_status_n ||
                                      ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                      ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                                      ',0,:NOTES_CANCEL_in, NVL (:NOTES_CANCEL_in, NOTES_CANCEL)) ' || ',' ||
                                      ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                                      ',0,:ID_PROF_CANCEL_in, NVL (:ID_PROF_CANCEL_in, ID_PROF_CANCEL)) ' || ',' ||
                                      ' ID_SR_CANCEL_REASON = decode (' || l_id_sr_cancel_reason_n ||
                                      ',0,:ID_SR_CANCEL_REASON_in, NVL (:ID_SR_CANCEL_REASON_in, ID_SR_CANCEL_REASON)) ' || ',' ||
                                      ' DT_REQ_TSTZ = decode (' || l_dt_req_tstz_n ||
                                      ',0,:DT_REQ_TSTZ_in, NVL (:DT_REQ_TSTZ_in, DT_REQ_TSTZ)) ' || ',' ||
                                      ' DT_INTERV_START_TSTZ = decode (' || l_dt_interv_start_tstz_n ||
                                      ',0,:DT_INTERV_START_TSTZ_in, NVL (:DT_INTERV_START_TSTZ_in, DT_INTERV_START_TSTZ)) ' || ',' ||
                                      ' DT_INTERV_END_TSTZ = decode (' || l_dt_interv_end_tstz_n ||
                                      ',0,:DT_INTERV_END_TSTZ_in, NVL (:DT_INTERV_END_TSTZ_in, DT_INTERV_END_TSTZ)) ' || ',' ||
                                      ' DT_CANCEL_TSTZ = decode (' || l_dt_cancel_tstz_n ||
                                      ',0,:DT_CANCEL_TSTZ_in, NVL (:DT_CANCEL_TSTZ_in, DT_CANCEL_TSTZ)) ' || ',' ||
                                      ' ID_EPISODE_CONTEXT = decode (' || l_id_episode_context_n ||
                                      ',0,:ID_EPISODE_CONTEXT_in, NVL (:ID_EPISODE_CONTEXT_in, ID_EPISODE_CONTEXT)) ' || ',' ||
                                      ' NAME_INTERV = decode (' || l_name_interv_n ||
                                      ',0,:NAME_INTERV_in, NVL (:NAME_INTERV_in, NAME_INTERV)) ' || ',' ||
                                      ' ID_PROF_REQ_UNC = decode (' || l_id_prof_req_unc_n ||
                                      ',0,:ID_PROF_REQ_UNC_in, NVL (:ID_PROF_REQ_UNC_in, ID_PROF_REQ_UNC)) ' || ',' ||
                                      ' DT_REQ_UNC_TSTZ = decode (' || l_dt_req_unc_tstz_n ||
                                      ',0,:DT_REQ_UNC_TSTZ_in, NVL (:DT_REQ_UNC_TSTZ_in, DT_REQ_UNC_TSTZ)) ' || ',' ||
                                      ' FLG_CODE_TYPE = decode (' || l_flg_code_type_n ||
                                      ',0,:FLG_CODE_TYPE_in, NVL (:FLG_CODE_TYPE_in, FLG_CODE_TYPE)) ' || ',' ||
                                      ' CREATE_USER = decode (' || l_create_user_n ||
                                      ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                      ' CREATE_TIME = decode (' || l_create_time_n ||
                                      ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                      ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                      ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                      ' UPDATE_USER = decode (' || l_update_user_n ||
                                      ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                      ' UPDATE_TIME = decode (' || l_update_time_n ||
                                      ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                      ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                      ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                      ' LATERALITY = decode (' || l_laterality_n ||
                                      ',0,:LATERALITY_in, NVL (:LATERALITY_in, LATERALITY)) ' || ',' ||
                                      ' FLG_SURG_REQUEST = decode (' || l_flg_surg_request_n ||
                                      ',0,:FLG_SURG_REQUEST_in, NVL (:FLG_SURG_REQUEST_in, FLG_SURG_REQUEST)) ' || ',' ||
                                      ' NOTES = decode (' || l_notes_n || ',0,:NOTES_in, NVL (:NOTES_in, NOTES)) ' || ',' ||
                                      ' ID_CDR_CALL = decode (' || l_id_cdr_call_n ||
                                      ',0,:ID_CDR_CALL_in, NVL (:ID_CDR_CALL_in, ID_CDR_CALL)) ' || ',' ||
                                      ' ID_EPIS_DIAGNOSIS = decode (' || l_id_epis_diagnosis_n ||
                                      ',0,:ID_EPIS_DIAGNOSIS_in, NVL (:ID_EPIS_DIAGNOSIS_in, ID_EPIS_DIAGNOSIS)) ' || ',' ||
                                      ' ID_NOT_ORDER_REASON = decode (' || l_id_not_order_reason_n ||
                                      ',0,:ID_NOT_ORDER_REASON_in, NVL (:ID_NOT_ORDER_REASON_in, ID_NOT_ORDER_REASON)) ' || ',' ||
                                      ' SURGICAL_SITE = decode (' || l_surgical_site_n ||
                                      ',0,:SURGICAL_SITE_in, NVL (:SURGICAL_SITE_in, SURGICAL_SITE)) ' || ',' ||
                                      ' ID_INTERV_CODIFICATION = decode (' || l_id_interv_codification_n ||
                                      ',0,:ID_INTERV_CODIFICATION_in, NVL (:ID_INTERV_CODIFICATION_in, ID_INTERV_CODIFICATION)) ' ||
                                      ' where ' || nvl(where_in, '(1=1)') ||
                                      ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, id_sr_intervention_in, id_prof_req_in, flg_type_in, flg_status_in, notes_cancel_in, id_prof_cancel_in, id_sr_cancel_reason_in, dt_req_tstz_in, dt_interv_start_tstz_in, dt_interv_end_tstz_in, dt_cancel_tstz_in, id_episode_context_in, name_interv_in, id_prof_req_unc_in, dt_req_unc_tstz_in, flg_code_type_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, laterality_in, flg_surg_request_in, notes_in, id_cdr_call_in, id_epis_diagnosis_in, id_not_order_reason_in, surgical_site_in, id_interv_codification_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in              IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        id_sr_intervention_in      IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_sr_intervention_nin     IN BOOLEAN := TRUE,
        id_prof_req_in             IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin            IN BOOLEAN := TRUE,
        flg_type_in                IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_type_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        notes_cancel_in            IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        id_sr_cancel_reason_in     IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        id_sr_cancel_reason_nin    IN BOOLEAN := TRUE,
        dt_req_tstz_in             IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin            IN BOOLEAN := TRUE,
        dt_interv_start_tstz_in    IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_nin   IN BOOLEAN := TRUE,
        dt_interv_end_tstz_in      IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_nin     IN BOOLEAN := TRUE,
        dt_cancel_tstz_in          IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin         IN BOOLEAN := TRUE,
        id_episode_context_in      IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        id_episode_context_nin     IN BOOLEAN := TRUE,
        name_interv_in             IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        name_interv_nin            IN BOOLEAN := TRUE,
        id_prof_req_unc_in         IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        id_prof_req_unc_nin        IN BOOLEAN := TRUE,
        dt_req_unc_tstz_in         IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        dt_req_unc_tstz_nin        IN BOOLEAN := TRUE,
        flg_code_type_in           IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        flg_code_type_nin          IN BOOLEAN := TRUE,
        create_user_in             IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        laterality_in              IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        laterality_nin             IN BOOLEAN := TRUE,
        flg_surg_request_in        IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        flg_surg_request_nin       IN BOOLEAN := TRUE,
        notes_in                   IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cdr_call_in             IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_cdr_call_nin            IN BOOLEAN := TRUE,
        id_epis_diagnosis_in       IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin      IN BOOLEAN := TRUE,
        id_not_order_reason_in     IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        id_not_order_reason_nin    IN BOOLEAN := TRUE,
        surgical_site_in           IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        surgical_site_nin          IN BOOLEAN := TRUE,
        id_interv_codification_in  IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        id_interv_codification_nin IN BOOLEAN := TRUE,
        where_in                   IN VARCHAR2,
        handle_error_in            IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            id_sr_intervention_in      => id_sr_intervention_in,
            id_sr_intervention_nin     => id_sr_intervention_nin,
            id_prof_req_in             => id_prof_req_in,
            id_prof_req_nin            => id_prof_req_nin,
            flg_type_in                => flg_type_in,
            flg_type_nin               => flg_type_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            notes_cancel_in            => notes_cancel_in,
            notes_cancel_nin           => notes_cancel_nin,
            id_prof_cancel_in          => id_prof_cancel_in,
            id_prof_cancel_nin         => id_prof_cancel_nin,
            id_sr_cancel_reason_in     => id_sr_cancel_reason_in,
            id_sr_cancel_reason_nin    => id_sr_cancel_reason_nin,
            dt_req_tstz_in             => dt_req_tstz_in,
            dt_req_tstz_nin            => dt_req_tstz_nin,
            dt_interv_start_tstz_in    => dt_interv_start_tstz_in,
            dt_interv_start_tstz_nin   => dt_interv_start_tstz_nin,
            dt_interv_end_tstz_in      => dt_interv_end_tstz_in,
            dt_interv_end_tstz_nin     => dt_interv_end_tstz_nin,
            dt_cancel_tstz_in          => dt_cancel_tstz_in,
            dt_cancel_tstz_nin         => dt_cancel_tstz_nin,
            id_episode_context_in      => id_episode_context_in,
            id_episode_context_nin     => id_episode_context_nin,
            name_interv_in             => name_interv_in,
            name_interv_nin            => name_interv_nin,
            id_prof_req_unc_in         => id_prof_req_unc_in,
            id_prof_req_unc_nin        => id_prof_req_unc_nin,
            dt_req_unc_tstz_in         => dt_req_unc_tstz_in,
            dt_req_unc_tstz_nin        => dt_req_unc_tstz_nin,
            flg_code_type_in           => flg_code_type_in,
            flg_code_type_nin          => flg_code_type_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            laterality_in              => laterality_in,
            laterality_nin             => laterality_nin,
            flg_surg_request_in        => flg_surg_request_in,
            flg_surg_request_nin       => flg_surg_request_nin,
            notes_in                   => notes_in,
            notes_nin                  => notes_nin,
            id_cdr_call_in             => id_cdr_call_in,
            id_cdr_call_nin            => id_cdr_call_nin,
            id_epis_diagnosis_in       => id_epis_diagnosis_in,
            id_epis_diagnosis_nin      => id_epis_diagnosis_nin,
            id_not_order_reason_in     => id_not_order_reason_in,
            id_not_order_reason_nin    => id_not_order_reason_nin,
            surgical_site_in           => surgical_site_in,
            surgical_site_nin          => surgical_site_nin,
            id_interv_codification_in  => id_interv_codification_in,
            id_interv_codification_nin => id_interv_codification_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_sr_epis_interv_in      IN sr_epis_interv.id_sr_epis_interv%TYPE,
        id_episode_in             IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_sr_intervention_in     IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_req_in            IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        flg_type_in               IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        notes_cancel_in           IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_sr_cancel_reason_in    IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_in   IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_in     IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_context_in     IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        name_interv_in            IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        id_prof_req_unc_in        IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        dt_req_unc_tstz_in        IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        flg_code_type_in          IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        create_user_in            IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_time_in            IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_time_in            IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        laterality_in             IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        flg_surg_request_in       IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        notes_in                  IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        id_cdr_call_in            IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_epis_diagnosis_in      IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        surgical_site_in          IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        id_interv_codification_in IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := FALSE,
        rows_out                  IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_sr_epis_interv_in      => id_sr_epis_interv_in,
            id_episode_in             => id_episode_in,
            id_sr_intervention_in     => id_sr_intervention_in,
            id_prof_req_in            => id_prof_req_in,
            flg_type_in               => flg_type_in,
            flg_status_in             => flg_status_in,
            notes_cancel_in           => notes_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_sr_cancel_reason_in    => id_sr_cancel_reason_in,
            dt_req_tstz_in            => dt_req_tstz_in,
            dt_interv_start_tstz_in   => dt_interv_start_tstz_in,
            dt_interv_end_tstz_in     => dt_interv_end_tstz_in,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            id_episode_context_in     => id_episode_context_in,
            name_interv_in            => name_interv_in,
            id_prof_req_unc_in        => id_prof_req_unc_in,
            dt_req_unc_tstz_in        => dt_req_unc_tstz_in,
            flg_code_type_in          => flg_code_type_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            laterality_in             => laterality_in,
            flg_surg_request_in       => flg_surg_request_in,
            notes_in                  => notes_in,
            id_cdr_call_in            => id_cdr_call_in,
            id_epis_diagnosis_in      => id_epis_diagnosis_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            surgical_site_in          => surgical_site_in,
            id_interv_codification_in => id_interv_codification_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_sr_epis_interv_in      => id_sr_epis_interv_in,
                id_episode_in             => id_episode_in,
                id_sr_intervention_in     => id_sr_intervention_in,
                id_prof_req_in            => id_prof_req_in,
                flg_type_in               => flg_type_in,
                flg_status_in             => flg_status_in,
                notes_cancel_in           => notes_cancel_in,
                id_prof_cancel_in         => id_prof_cancel_in,
                id_sr_cancel_reason_in    => id_sr_cancel_reason_in,
                dt_req_tstz_in            => dt_req_tstz_in,
                dt_interv_start_tstz_in   => dt_interv_start_tstz_in,
                dt_interv_end_tstz_in     => dt_interv_end_tstz_in,
                dt_cancel_tstz_in         => dt_cancel_tstz_in,
                id_episode_context_in     => id_episode_context_in,
                name_interv_in            => name_interv_in,
                id_prof_req_unc_in        => id_prof_req_unc_in,
                dt_req_unc_tstz_in        => dt_req_unc_tstz_in,
                flg_code_type_in          => flg_code_type_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                laterality_in             => laterality_in,
                flg_surg_request_in       => flg_surg_request_in,
                notes_in                  => notes_in,
                id_cdr_call_in            => id_cdr_call_in,
                id_epis_diagnosis_in      => id_epis_diagnosis_in,
                id_not_order_reason_in    => id_not_order_reason_in,
                surgical_site_in          => surgical_site_in,
                id_interv_codification_in => id_interv_codification_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_sr_epis_interv_in      IN sr_epis_interv.id_sr_epis_interv%TYPE,
        id_episode_in             IN sr_epis_interv.id_episode%TYPE DEFAULT NULL,
        id_sr_intervention_in     IN sr_epis_interv.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_req_in            IN sr_epis_interv.id_prof_req%TYPE DEFAULT NULL,
        flg_type_in               IN sr_epis_interv.flg_type%TYPE DEFAULT NULL,
        flg_status_in             IN sr_epis_interv.flg_status%TYPE DEFAULT NULL,
        notes_cancel_in           IN sr_epis_interv.notes_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN sr_epis_interv.id_prof_cancel%TYPE DEFAULT NULL,
        id_sr_cancel_reason_in    IN sr_epis_interv.id_sr_cancel_reason%TYPE DEFAULT NULL,
        dt_req_tstz_in            IN sr_epis_interv.dt_req_tstz%TYPE DEFAULT NULL,
        dt_interv_start_tstz_in   IN sr_epis_interv.dt_interv_start_tstz%TYPE DEFAULT NULL,
        dt_interv_end_tstz_in     IN sr_epis_interv.dt_interv_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in         IN sr_epis_interv.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_context_in     IN sr_epis_interv.id_episode_context%TYPE DEFAULT NULL,
        name_interv_in            IN sr_epis_interv.name_interv%TYPE DEFAULT NULL,
        id_prof_req_unc_in        IN sr_epis_interv.id_prof_req_unc%TYPE DEFAULT NULL,
        dt_req_unc_tstz_in        IN sr_epis_interv.dt_req_unc_tstz%TYPE DEFAULT NULL,
        flg_code_type_in          IN sr_epis_interv.flg_code_type%TYPE DEFAULT NULL,
        create_user_in            IN sr_epis_interv.create_user%TYPE DEFAULT NULL,
        create_time_in            IN sr_epis_interv.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN sr_epis_interv.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN sr_epis_interv.update_user%TYPE DEFAULT NULL,
        update_time_in            IN sr_epis_interv.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN sr_epis_interv.update_institution%TYPE DEFAULT NULL,
        laterality_in             IN sr_epis_interv.laterality%TYPE DEFAULT NULL,
        flg_surg_request_in       IN sr_epis_interv.flg_surg_request%TYPE DEFAULT NULL,
        notes_in                  IN sr_epis_interv.notes%TYPE DEFAULT NULL,
        id_cdr_call_in            IN sr_epis_interv.id_cdr_call%TYPE DEFAULT NULL,
        id_epis_diagnosis_in      IN sr_epis_interv.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN sr_epis_interv.id_not_order_reason%TYPE DEFAULT NULL,
        surgical_site_in          IN sr_epis_interv.surgical_site%TYPE DEFAULT NULL,
        id_interv_codification_in IN sr_epis_interv.id_interv_codification%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_sr_epis_interv_in,
                id_episode_in,
                id_sr_intervention_in,
                id_prof_req_in,
                flg_type_in,
                flg_status_in,
                notes_cancel_in,
                id_prof_cancel_in,
                id_sr_cancel_reason_in,
                dt_req_tstz_in,
                dt_interv_start_tstz_in,
                dt_interv_end_tstz_in,
                dt_cancel_tstz_in,
                id_episode_context_in,
                name_interv_in,
                id_prof_req_unc_in,
                dt_req_unc_tstz_in,
                flg_code_type_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                laterality_in,
                flg_surg_request_in,
                notes_in,
                id_cdr_call_in,
                id_epis_diagnosis_in,
                id_not_order_reason_in,
                surgical_site_in,
                id_interv_codification_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN sr_epis_interv%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_sr_epis_interv_in      => rec_in.id_sr_epis_interv,
            id_episode_in             => rec_in.id_episode,
            id_sr_intervention_in     => rec_in.id_sr_intervention,
            id_prof_req_in            => rec_in.id_prof_req,
            flg_type_in               => rec_in.flg_type,
            flg_status_in             => rec_in.flg_status,
            notes_cancel_in           => rec_in.notes_cancel,
            id_prof_cancel_in         => rec_in.id_prof_cancel,
            id_sr_cancel_reason_in    => rec_in.id_sr_cancel_reason,
            dt_req_tstz_in            => rec_in.dt_req_tstz,
            dt_interv_start_tstz_in   => rec_in.dt_interv_start_tstz,
            dt_interv_end_tstz_in     => rec_in.dt_interv_end_tstz,
            dt_cancel_tstz_in         => rec_in.dt_cancel_tstz,
            id_episode_context_in     => rec_in.id_episode_context,
            name_interv_in            => rec_in.name_interv,
            id_prof_req_unc_in        => rec_in.id_prof_req_unc,
            dt_req_unc_tstz_in        => rec_in.dt_req_unc_tstz,
            flg_code_type_in          => rec_in.flg_code_type,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            laterality_in             => rec_in.laterality,
            flg_surg_request_in       => rec_in.flg_surg_request,
            notes_in                  => rec_in.notes,
            id_cdr_call_in            => rec_in.id_cdr_call,
            id_epis_diagnosis_in      => rec_in.id_epis_diagnosis,
            id_not_order_reason_in    => rec_in.id_not_order_reason,
            surgical_site_in          => rec_in.surgical_site,
            id_interv_codification_in => rec_in.id_interv_codification,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN sr_epis_interv%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_sr_epis_interv_in      => rec_in.id_sr_epis_interv,
            id_episode_in             => rec_in.id_episode,
            id_sr_intervention_in     => rec_in.id_sr_intervention,
            id_prof_req_in            => rec_in.id_prof_req,
            flg_type_in               => rec_in.flg_type,
            flg_status_in             => rec_in.flg_status,
            notes_cancel_in           => rec_in.notes_cancel,
            id_prof_cancel_in         => rec_in.id_prof_cancel,
            id_sr_cancel_reason_in    => rec_in.id_sr_cancel_reason,
            dt_req_tstz_in            => rec_in.dt_req_tstz,
            dt_interv_start_tstz_in   => rec_in.dt_interv_start_tstz,
            dt_interv_end_tstz_in     => rec_in.dt_interv_end_tstz,
            dt_cancel_tstz_in         => rec_in.dt_cancel_tstz,
            id_episode_context_in     => rec_in.id_episode_context,
            name_interv_in            => rec_in.name_interv,
            id_prof_req_unc_in        => rec_in.id_prof_req_unc,
            dt_req_unc_tstz_in        => rec_in.dt_req_unc_tstz,
            flg_code_type_in          => rec_in.flg_code_type,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            laterality_in             => rec_in.laterality,
            flg_surg_request_in       => rec_in.flg_surg_request,
            notes_in                  => rec_in.notes,
            id_cdr_call_in            => rec_in.id_cdr_call,
            id_epis_diagnosis_in      => rec_in.id_epis_diagnosis,
            id_not_order_reason_in    => rec_in.id_not_order_reason,
            surgical_site_in          => rec_in.surgical_site,
            id_interv_codification_in => rec_in.id_interv_codification,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN sr_epis_interv_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_sr_epis_interv      id_sr_epis_interv_cc;
        l_id_episode             id_episode_cc;
        l_id_sr_intervention     id_sr_intervention_cc;
        l_id_prof_req            id_prof_req_cc;
        l_flg_type               flg_type_cc;
        l_flg_status             flg_status_cc;
        l_notes_cancel           notes_cancel_cc;
        l_id_prof_cancel         id_prof_cancel_cc;
        l_id_sr_cancel_reason    id_sr_cancel_reason_cc;
        l_dt_req_tstz            dt_req_tstz_cc;
        l_dt_interv_start_tstz   dt_interv_start_tstz_cc;
        l_dt_interv_end_tstz     dt_interv_end_tstz_cc;
        l_dt_cancel_tstz         dt_cancel_tstz_cc;
        l_id_episode_context     id_episode_context_cc;
        l_name_interv            name_interv_cc;
        l_id_prof_req_unc        id_prof_req_unc_cc;
        l_dt_req_unc_tstz        dt_req_unc_tstz_cc;
        l_flg_code_type          flg_code_type_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
        l_laterality             laterality_cc;
        l_flg_surg_request       flg_surg_request_cc;
        l_notes                  notes_cc;
        l_id_cdr_call            id_cdr_call_cc;
        l_id_epis_diagnosis      id_epis_diagnosis_cc;
        l_id_not_order_reason    id_not_order_reason_cc;
        l_surgical_site          surgical_site_cc;
        l_id_interv_codification id_interv_codification_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_sr_epis_interv(i) := col_in(i).id_sr_epis_interv;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_sr_intervention(i) := col_in(i).id_sr_intervention;
            l_id_prof_req(i) := col_in(i).id_prof_req;
            l_flg_type(i) := col_in(i).flg_type;
            l_flg_status(i) := col_in(i).flg_status;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_id_sr_cancel_reason(i) := col_in(i).id_sr_cancel_reason;
            l_dt_req_tstz(i) := col_in(i).dt_req_tstz;
            l_dt_interv_start_tstz(i) := col_in(i).dt_interv_start_tstz;
            l_dt_interv_end_tstz(i) := col_in(i).dt_interv_end_tstz;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_id_episode_context(i) := col_in(i).id_episode_context;
            l_name_interv(i) := col_in(i).name_interv;
            l_id_prof_req_unc(i) := col_in(i).id_prof_req_unc;
            l_dt_req_unc_tstz(i) := col_in(i).dt_req_unc_tstz;
            l_flg_code_type(i) := col_in(i).flg_code_type;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_laterality(i) := col_in(i).laterality;
            l_flg_surg_request(i) := col_in(i).flg_surg_request;
            l_notes(i) := col_in(i).notes;
            l_id_cdr_call(i) := col_in(i).id_cdr_call;
            l_id_epis_diagnosis(i) := col_in(i).id_epis_diagnosis;
            l_id_not_order_reason(i) := col_in(i).id_not_order_reason;
            l_surgical_site(i) := col_in(i).surgical_site;
            l_id_interv_codification(i) := col_in(i).id_interv_codification;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE sr_epis_interv
                   SET id_episode             = nvl(l_id_episode(i), id_episode),
                       id_sr_intervention     = nvl(l_id_sr_intervention(i), id_sr_intervention),
                       id_prof_req            = nvl(l_id_prof_req(i), id_prof_req),
                       flg_type               = nvl(l_flg_type(i), flg_type),
                       flg_status             = nvl(l_flg_status(i), flg_status),
                       notes_cancel           = nvl(l_notes_cancel(i), notes_cancel),
                       id_prof_cancel         = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       id_sr_cancel_reason    = nvl(l_id_sr_cancel_reason(i), id_sr_cancel_reason),
                       dt_req_tstz            = nvl(l_dt_req_tstz(i), dt_req_tstz),
                       dt_interv_start_tstz   = nvl(l_dt_interv_start_tstz(i), dt_interv_start_tstz),
                       dt_interv_end_tstz     = nvl(l_dt_interv_end_tstz(i), dt_interv_end_tstz),
                       dt_cancel_tstz         = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       id_episode_context     = nvl(l_id_episode_context(i), id_episode_context),
                       name_interv            = nvl(l_name_interv(i), name_interv),
                       id_prof_req_unc        = nvl(l_id_prof_req_unc(i), id_prof_req_unc),
                       dt_req_unc_tstz        = nvl(l_dt_req_unc_tstz(i), dt_req_unc_tstz),
                       flg_code_type          = nvl(l_flg_code_type(i), flg_code_type),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution),
                       laterality             = nvl(l_laterality(i), laterality),
                       flg_surg_request       = nvl(l_flg_surg_request(i), flg_surg_request),
                       notes                  = nvl(l_notes(i), notes),
                       id_cdr_call            = nvl(l_id_cdr_call(i), id_cdr_call),
                       id_epis_diagnosis      = nvl(l_id_epis_diagnosis(i), id_epis_diagnosis),
                       id_not_order_reason    = nvl(l_id_not_order_reason(i), id_not_order_reason),
                       surgical_site          = nvl(l_surgical_site(i), surgical_site),
                       id_interv_codification = nvl(l_id_interv_codification(i), id_interv_codification)
                 WHERE id_sr_epis_interv = l_id_sr_epis_interv(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE sr_epis_interv
                   SET id_episode             = l_id_episode(i),
                       id_sr_intervention     = l_id_sr_intervention(i),
                       id_prof_req            = l_id_prof_req(i),
                       flg_type               = l_flg_type(i),
                       flg_status             = l_flg_status(i),
                       notes_cancel           = l_notes_cancel(i),
                       id_prof_cancel         = l_id_prof_cancel(i),
                       id_sr_cancel_reason    = l_id_sr_cancel_reason(i),
                       dt_req_tstz            = l_dt_req_tstz(i),
                       dt_interv_start_tstz   = l_dt_interv_start_tstz(i),
                       dt_interv_end_tstz     = l_dt_interv_end_tstz(i),
                       dt_cancel_tstz         = l_dt_cancel_tstz(i),
                       id_episode_context     = l_id_episode_context(i),
                       name_interv            = l_name_interv(i),
                       id_prof_req_unc        = l_id_prof_req_unc(i),
                       dt_req_unc_tstz        = l_dt_req_unc_tstz(i),
                       flg_code_type          = l_flg_code_type(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i),
                       laterality             = l_laterality(i),
                       flg_surg_request       = l_flg_surg_request(i),
                       notes                  = l_notes(i),
                       id_cdr_call            = l_id_cdr_call(i),
                       id_epis_diagnosis      = l_id_epis_diagnosis(i),
                       id_not_order_reason    = l_id_not_order_reason(i),
                       surgical_site          = l_surgical_site(i),
                       id_interv_codification = l_id_interv_codification(i)
                 WHERE id_sr_epis_interv = l_id_sr_epis_interv(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN sr_epis_interv_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE sr_epis_interv
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE sr_epis_interv
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE sr_epis_interv
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_sr_epis_interv_in IN sr_epis_interv.id_sr_epis_interv%TYPE,
        handle_error_in      IN BOOLEAN := FALSE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_epis_interv
         WHERE id_sr_epis_interv = id_sr_epis_interv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_sr_epis_interv_in IN sr_epis_interv.id_sr_epis_interv%TYPE,
        handle_error_in      IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_sr_epis_interv_in => id_sr_epis_interv_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this SEI_ICC_FK foreign key value
    PROCEDURE del_sei_icc_fk
    (
        id_cdr_call_in  IN sr_epis_interv.id_cdr_call%TYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_epis_interv
         WHERE id_cdr_call = id_cdr_call_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_sei_icc_fk;

    -- Delete all rows for this SEI_NOR_FK foreign key value
    PROCEDURE del_sei_nor_fk
    (
        id_not_order_reason_in IN sr_epis_interv.id_not_order_reason%TYPE,
        handle_error_in        IN BOOLEAN := FALSE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_epis_interv
         WHERE id_not_order_reason = id_not_order_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_sei_nor_fk;

    -- Delete all rows for this SEV_EPIS_CONTEXT_FK foreign key value
    PROCEDURE del_sev_epis_context_fk
    (
        id_episode_context_in IN sr_epis_interv.id_episode_context%TYPE,
        handle_error_in       IN BOOLEAN := FALSE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_epis_interv
         WHERE id_episode_context = id_episode_context_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_sev_epis_context_fk;

    -- Delete all rows for this SEV_EPIS_FK foreign key value
    PROCEDURE del_sev_epis_fk
    (
        id_episode_in   IN sr_epis_interv.id_episode%TYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_epis_interv
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_sev_epis_fk;

    -- Delete all rows for this SEV_PROF_FK foreign key value
    PROCEDURE del_sev_prof_fk
    (
        id_prof_req_in  IN sr_epis_interv.id_prof_req%TYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_epis_interv
         WHERE id_prof_req = id_prof_req_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_sev_prof_fk;

    -- Delete all rows for this SEV_PROF_FK2 foreign key value
    PROCEDURE del_sev_prof_fk2
    (
        id_prof_cancel_in IN sr_epis_interv.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := FALSE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_epis_interv
         WHERE id_prof_cancel = id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_sev_prof_fk2;

    -- Delete all rows for this SEV_PROF_FK3 foreign key value
    PROCEDURE del_sev_prof_fk3
    (
        id_prof_req_unc_in IN sr_epis_interv.id_prof_req_unc%TYPE,
        handle_error_in    IN BOOLEAN := FALSE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_epis_interv
         WHERE id_prof_req_unc = id_prof_req_unc_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_sev_prof_fk3;

    -- Delete all rows for this SEV_SR_CAN_REA_FK foreign key value
    PROCEDURE del_sev_sr_can_rea_fk
    (
        id_sr_cancel_reason_in IN sr_epis_interv.id_sr_cancel_reason%TYPE,
        handle_error_in        IN BOOLEAN := FALSE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_epis_interv
         WHERE id_sr_cancel_reason = id_sr_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_sev_sr_can_rea_fk;

    -- Delete all rows for this SEI_ICC_FK foreign key value
    PROCEDURE del_sei_icc_fk
    (
        id_cdr_call_in  IN sr_epis_interv.id_cdr_call%TYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sei_icc_fk(id_cdr_call_in => id_cdr_call_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_sei_icc_fk;

    -- Delete all rows for this SEI_NOR_FK foreign key value
    PROCEDURE del_sei_nor_fk
    (
        id_not_order_reason_in IN sr_epis_interv.id_not_order_reason%TYPE,
        handle_error_in        IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sei_nor_fk(id_not_order_reason_in => id_not_order_reason_in,
                       handle_error_in        => handle_error_in,
                       rows_out               => rows_out);
    END del_sei_nor_fk;

    -- Delete all rows for this SEV_EPIS_CONTEXT_FK foreign key value
    PROCEDURE del_sev_epis_context_fk
    (
        id_episode_context_in IN sr_epis_interv.id_episode_context%TYPE,
        handle_error_in       IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sev_epis_context_fk(id_episode_context_in => id_episode_context_in,
                                handle_error_in       => handle_error_in,
                                rows_out              => rows_out);
    END del_sev_epis_context_fk;

    -- Delete all rows for this SEV_EPIS_FK foreign key value
    PROCEDURE del_sev_epis_fk
    (
        id_episode_in   IN sr_epis_interv.id_episode%TYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sev_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_sev_epis_fk;

    -- Delete all rows for this SEV_PROF_FK foreign key value
    PROCEDURE del_sev_prof_fk
    (
        id_prof_req_in  IN sr_epis_interv.id_prof_req%TYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sev_prof_fk(id_prof_req_in => id_prof_req_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_sev_prof_fk;

    -- Delete all rows for this SEV_PROF_FK2 foreign key value
    PROCEDURE del_sev_prof_fk2
    (
        id_prof_cancel_in IN sr_epis_interv.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sev_prof_fk2(id_prof_cancel_in => id_prof_cancel_in,
                         handle_error_in   => handle_error_in,
                         rows_out          => rows_out);
    END del_sev_prof_fk2;

    -- Delete all rows for this SEV_PROF_FK3 foreign key value
    PROCEDURE del_sev_prof_fk3
    (
        id_prof_req_unc_in IN sr_epis_interv.id_prof_req_unc%TYPE,
        handle_error_in    IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sev_prof_fk3(id_prof_req_unc_in => id_prof_req_unc_in,
                         handle_error_in    => handle_error_in,
                         rows_out           => rows_out);
    END del_sev_prof_fk3;

    -- Delete all rows for this SEV_SR_CAN_REA_FK foreign key value
    PROCEDURE del_sev_sr_can_rea_fk
    (
        id_sr_cancel_reason_in IN sr_epis_interv.id_sr_cancel_reason%TYPE,
        handle_error_in        IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sev_sr_can_rea_fk(id_sr_cancel_reason_in => id_sr_cancel_reason_in,
                              handle_error_in        => handle_error_in,
                              rows_out               => rows_out);
    END del_sev_sr_can_rea_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM sr_epis_interv';
        ELSE
            RETURN 'DELETE FROM sr_epis_interv WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(sr_epis_interv_inout IN OUT sr_epis_interv%ROWTYPE) IS
    BEGIN
        sr_epis_interv_inout.id_sr_epis_interv      := NULL;
        sr_epis_interv_inout.id_episode             := NULL;
        sr_epis_interv_inout.id_sr_intervention     := NULL;
        sr_epis_interv_inout.id_prof_req            := NULL;
        sr_epis_interv_inout.flg_type               := NULL;
        sr_epis_interv_inout.flg_status             := NULL;
        sr_epis_interv_inout.notes_cancel           := NULL;
        sr_epis_interv_inout.id_prof_cancel         := NULL;
        sr_epis_interv_inout.id_sr_cancel_reason    := NULL;
        sr_epis_interv_inout.dt_req_tstz            := NULL;
        sr_epis_interv_inout.dt_interv_start_tstz   := NULL;
        sr_epis_interv_inout.dt_interv_end_tstz     := NULL;
        sr_epis_interv_inout.dt_cancel_tstz         := NULL;
        sr_epis_interv_inout.id_episode_context     := NULL;
        sr_epis_interv_inout.name_interv            := NULL;
        sr_epis_interv_inout.id_prof_req_unc        := NULL;
        sr_epis_interv_inout.dt_req_unc_tstz        := NULL;
        sr_epis_interv_inout.flg_code_type          := NULL;
        sr_epis_interv_inout.create_user            := NULL;
        sr_epis_interv_inout.create_time            := NULL;
        sr_epis_interv_inout.create_institution     := NULL;
        sr_epis_interv_inout.update_user            := NULL;
        sr_epis_interv_inout.update_time            := NULL;
        sr_epis_interv_inout.update_institution     := NULL;
        sr_epis_interv_inout.laterality             := NULL;
        sr_epis_interv_inout.flg_surg_request       := NULL;
        sr_epis_interv_inout.notes                  := NULL;
        sr_epis_interv_inout.id_cdr_call            := NULL;
        sr_epis_interv_inout.id_epis_diagnosis      := NULL;
        sr_epis_interv_inout.id_not_order_reason    := NULL;
        sr_epis_interv_inout.surgical_site          := NULL;
        sr_epis_interv_inout.id_interv_codification := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN sr_epis_interv%ROWTYPE IS
        l_sr_epis_interv sr_epis_interv%ROWTYPE;
    BEGIN
        RETURN l_sr_epis_interv;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN sr_epis_interv_tc IS
        data sr_epis_interv_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM sr_epis_interv
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN sr_epis_interv_tc IS
        data sr_epis_interv_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_sr_epis_interv;
/
