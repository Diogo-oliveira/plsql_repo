/*-- Last Change Revision: $Rev: 2027997 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:54 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_death_registry
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2017-08-31 17:04:30
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN death_registry.id_death_registry%TYPE IS
        retval death_registry.id_death_registry%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_death_registry.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in             IN death_registry.id_episode%TYPE DEFAULT NULL,
        dt_death_in               IN death_registry.dt_death%TYPE DEFAULT NULL,
        id_prof_verified_death_in IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_sl_natural_cause_in    IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_coroner_warned_in   IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_autopsy_in          IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_prof_death_registry_in IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_in      IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in             IN death_registry.flg_status%TYPE DEFAULT NULL,
        id_susp_action_in         IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        create_user_in            IN death_registry.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry.update_institution%TYPE DEFAULT NULL,
        flg_type_in               IN death_registry.flg_type%TYPE DEFAULT 'P',
        death_date_format_in      IN death_registry.death_date_format%TYPE DEFAULT 'FULL_DATE',
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky death_registry.id_death_registry%TYPE := next_key;
    BEGIN
        ins(id_death_registry_in      => l_pky,
            id_episode_in             => id_episode_in,
            dt_death_in               => dt_death_in,
            id_prof_verified_death_in => id_prof_verified_death_in,
            id_sl_natural_cause_in    => id_sl_natural_cause_in,
            id_sl_coroner_warned_in   => id_sl_coroner_warned_in,
            id_sl_autopsy_in          => id_sl_autopsy_in,
            id_prof_death_registry_in => id_prof_death_registry_in,
            dt_death_registry_in      => dt_death_registry_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            flg_status_in             => flg_status_in,
            id_susp_action_in         => id_susp_action_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_in               => flg_type_in,
            death_date_format_in      => death_date_format_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in             IN death_registry.id_episode%TYPE DEFAULT NULL,
        dt_death_in               IN death_registry.dt_death%TYPE DEFAULT NULL,
        id_prof_verified_death_in IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_sl_natural_cause_in    IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_coroner_warned_in   IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_autopsy_in          IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_prof_death_registry_in IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_in      IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in             IN death_registry.flg_status%TYPE DEFAULT NULL,
        id_susp_action_in         IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        create_user_in            IN death_registry.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry.update_institution%TYPE DEFAULT NULL,
        flg_type_in               IN death_registry.flg_type%TYPE DEFAULT 'P',
        death_date_format_in      IN death_registry.death_date_format%TYPE DEFAULT 'FULL_DATE',
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in             => id_episode_in,
            dt_death_in               => dt_death_in,
            id_prof_verified_death_in => id_prof_verified_death_in,
            id_sl_natural_cause_in    => id_sl_natural_cause_in,
            id_sl_coroner_warned_in   => id_sl_coroner_warned_in,
            id_sl_autopsy_in          => id_sl_autopsy_in,
            id_prof_death_registry_in => id_prof_death_registry_in,
            dt_death_registry_in      => dt_death_registry_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            flg_status_in             => flg_status_in,
            id_susp_action_in         => id_susp_action_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_in               => flg_type_in,
            death_date_format_in      => death_date_format_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in             IN death_registry.id_episode%TYPE DEFAULT NULL,
        dt_death_in               IN death_registry.dt_death%TYPE DEFAULT NULL,
        id_prof_verified_death_in IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_sl_natural_cause_in    IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_coroner_warned_in   IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_autopsy_in          IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_prof_death_registry_in IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_in      IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in             IN death_registry.flg_status%TYPE DEFAULT NULL,
        id_susp_action_in         IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        create_user_in            IN death_registry.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry.update_institution%TYPE DEFAULT NULL,
        flg_type_in               IN death_registry.flg_type%TYPE DEFAULT 'P',
        death_date_format_in      IN death_registry.death_date_format%TYPE DEFAULT 'FULL_DATE',
        id_death_registry_out     IN OUT death_registry.id_death_registry%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky death_registry.id_death_registry%TYPE := next_key;
    BEGIN
        ins(id_death_registry_in      => l_pky,
            id_episode_in             => id_episode_in,
            dt_death_in               => dt_death_in,
            id_prof_verified_death_in => id_prof_verified_death_in,
            id_sl_natural_cause_in    => id_sl_natural_cause_in,
            id_sl_coroner_warned_in   => id_sl_coroner_warned_in,
            id_sl_autopsy_in          => id_sl_autopsy_in,
            id_prof_death_registry_in => id_prof_death_registry_in,
            dt_death_registry_in      => dt_death_registry_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            flg_status_in             => flg_status_in,
            id_susp_action_in         => id_susp_action_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_in               => flg_type_in,
            death_date_format_in      => death_date_format_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        id_death_registry_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in             IN death_registry.id_episode%TYPE DEFAULT NULL,
        dt_death_in               IN death_registry.dt_death%TYPE DEFAULT NULL,
        id_prof_verified_death_in IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_sl_natural_cause_in    IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_coroner_warned_in   IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_autopsy_in          IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_prof_death_registry_in IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_in      IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in             IN death_registry.flg_status%TYPE DEFAULT NULL,
        id_susp_action_in         IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        create_user_in            IN death_registry.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry.update_institution%TYPE DEFAULT NULL,
        flg_type_in               IN death_registry.flg_type%TYPE DEFAULT 'P',
        death_date_format_in      IN death_registry.death_date_format%TYPE DEFAULT 'FULL_DATE',
        id_death_registry_out     IN OUT death_registry.id_death_registry%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in             => id_episode_in,
            dt_death_in               => dt_death_in,
            id_prof_verified_death_in => id_prof_verified_death_in,
            id_sl_natural_cause_in    => id_sl_natural_cause_in,
            id_sl_coroner_warned_in   => id_sl_coroner_warned_in,
            id_sl_autopsy_in          => id_sl_autopsy_in,
            id_prof_death_registry_in => id_prof_death_registry_in,
            dt_death_registry_in      => dt_death_registry_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            flg_status_in             => flg_status_in,
            id_susp_action_in         => id_susp_action_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_in               => flg_type_in,
            death_date_format_in      => death_date_format_in,
            id_death_registry_out     => id_death_registry_out,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in             IN death_registry.id_episode%TYPE DEFAULT NULL,
        dt_death_in               IN death_registry.dt_death%TYPE DEFAULT NULL,
        id_prof_verified_death_in IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_sl_natural_cause_in    IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_coroner_warned_in   IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_autopsy_in          IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_prof_death_registry_in IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_in      IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in             IN death_registry.flg_status%TYPE DEFAULT NULL,
        id_susp_action_in         IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        create_user_in            IN death_registry.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry.update_institution%TYPE DEFAULT NULL,
        flg_type_in               IN death_registry.flg_type%TYPE DEFAULT 'P',
        death_date_format_in      IN death_registry.death_date_format%TYPE DEFAULT 'FULL_DATE',
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN death_registry.id_death_registry%TYPE IS
        l_pky death_registry.id_death_registry%TYPE := next_key;
    BEGIN
        ins(id_death_registry_in      => l_pky,
            id_episode_in             => id_episode_in,
            dt_death_in               => dt_death_in,
            id_prof_verified_death_in => id_prof_verified_death_in,
            id_sl_natural_cause_in    => id_sl_natural_cause_in,
            id_sl_coroner_warned_in   => id_sl_coroner_warned_in,
            id_sl_autopsy_in          => id_sl_autopsy_in,
            id_prof_death_registry_in => id_prof_death_registry_in,
            dt_death_registry_in      => dt_death_registry_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            flg_status_in             => flg_status_in,
            id_susp_action_in         => id_susp_action_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_in               => flg_type_in,
            death_date_format_in      => death_date_format_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in             IN death_registry.id_episode%TYPE DEFAULT NULL,
        dt_death_in               IN death_registry.dt_death%TYPE DEFAULT NULL,
        id_prof_verified_death_in IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_sl_natural_cause_in    IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_coroner_warned_in   IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_autopsy_in          IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_prof_death_registry_in IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_in      IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in             IN death_registry.flg_status%TYPE DEFAULT NULL,
        id_susp_action_in         IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        create_user_in            IN death_registry.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry.update_institution%TYPE DEFAULT NULL,
        flg_type_in               IN death_registry.flg_type%TYPE DEFAULT 'P',
        death_date_format_in      IN death_registry.death_date_format%TYPE DEFAULT 'FULL_DATE',
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN death_registry.id_death_registry%TYPE IS
        l_pky    death_registry.id_death_registry%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_death_registry_in      => l_pky,
            id_episode_in             => id_episode_in,
            dt_death_in               => dt_death_in,
            id_prof_verified_death_in => id_prof_verified_death_in,
            id_sl_natural_cause_in    => id_sl_natural_cause_in,
            id_sl_coroner_warned_in   => id_sl_coroner_warned_in,
            id_sl_autopsy_in          => id_sl_autopsy_in,
            id_prof_death_registry_in => id_prof_death_registry_in,
            dt_death_registry_in      => dt_death_registry_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            flg_status_in             => flg_status_in,
            id_susp_action_in         => id_susp_action_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_in               => flg_type_in,
            death_date_format_in      => death_date_format_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_death_registry_in      IN death_registry.id_death_registry%TYPE,
        id_episode_in             IN death_registry.id_episode%TYPE DEFAULT NULL,
        dt_death_in               IN death_registry.dt_death%TYPE DEFAULT NULL,
        id_prof_verified_death_in IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_sl_natural_cause_in    IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_coroner_warned_in   IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_autopsy_in          IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_prof_death_registry_in IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_in      IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in             IN death_registry.flg_status%TYPE DEFAULT NULL,
        id_susp_action_in         IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        create_user_in            IN death_registry.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry.update_institution%TYPE DEFAULT NULL,
        flg_type_in               IN death_registry.flg_type%TYPE DEFAULT 'P',
        death_date_format_in      IN death_registry.death_date_format%TYPE DEFAULT 'FULL_DATE',
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO death_registry
            (id_death_registry,
             id_episode,
             dt_death,
             id_prof_verified_death,
             id_sl_natural_cause,
             id_sl_coroner_warned,
             id_sl_autopsy,
             id_prof_death_registry,
             dt_death_registry,
             id_cancel_reason,
             notes_cancel,
             flg_status,
             id_susp_action,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_type,
             death_date_format)
        VALUES
            (id_death_registry_in,
             id_episode_in,
             dt_death_in,
             id_prof_verified_death_in,
             id_sl_natural_cause_in,
             id_sl_coroner_warned_in,
             id_sl_autopsy_in,
             id_prof_death_registry_in,
             dt_death_registry_in,
             id_cancel_reason_in,
             notes_cancel_in,
             flg_status_in,
             id_susp_action_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_type_in,
             death_date_format_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_death_registry_in      IN death_registry.id_death_registry%TYPE,
        id_episode_in             IN death_registry.id_episode%TYPE DEFAULT NULL,
        dt_death_in               IN death_registry.dt_death%TYPE DEFAULT NULL,
        id_prof_verified_death_in IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_sl_natural_cause_in    IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_coroner_warned_in   IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_autopsy_in          IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_prof_death_registry_in IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_in      IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in             IN death_registry.flg_status%TYPE DEFAULT NULL,
        id_susp_action_in         IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        create_user_in            IN death_registry.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry.update_institution%TYPE DEFAULT NULL,
        flg_type_in               IN death_registry.flg_type%TYPE DEFAULT 'P',
        death_date_format_in      IN death_registry.death_date_format%TYPE DEFAULT 'FULL_DATE',
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_death_registry_in      => id_death_registry_in,
            id_episode_in             => id_episode_in,
            dt_death_in               => dt_death_in,
            id_prof_verified_death_in => id_prof_verified_death_in,
            id_sl_natural_cause_in    => id_sl_natural_cause_in,
            id_sl_coroner_warned_in   => id_sl_coroner_warned_in,
            id_sl_autopsy_in          => id_sl_autopsy_in,
            id_prof_death_registry_in => id_prof_death_registry_in,
            dt_death_registry_in      => dt_death_registry_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            flg_status_in             => flg_status_in,
            id_susp_action_in         => id_susp_action_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_in               => flg_type_in,
            death_date_format_in      => death_date_format_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN death_registry%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec death_registry%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_death_registry := next_key(sequence_in);
        END IF;
    
        ins(id_death_registry_in      => l_rec.id_death_registry,
            id_episode_in             => l_rec.id_episode,
            dt_death_in               => l_rec.dt_death,
            id_prof_verified_death_in => l_rec.id_prof_verified_death,
            id_sl_natural_cause_in    => l_rec.id_sl_natural_cause,
            id_sl_coroner_warned_in   => l_rec.id_sl_coroner_warned,
            id_sl_autopsy_in          => l_rec.id_sl_autopsy,
            id_prof_death_registry_in => l_rec.id_prof_death_registry,
            dt_death_registry_in      => l_rec.dt_death_registry,
            id_cancel_reason_in       => l_rec.id_cancel_reason,
            notes_cancel_in           => l_rec.notes_cancel,
            flg_status_in             => l_rec.flg_status,
            id_susp_action_in         => l_rec.id_susp_action,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            flg_type_in               => l_rec.flg_type,
            death_date_format_in      => l_rec.death_date_format,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN death_registry%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN death_registry_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO death_registry
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN death_registry_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_death_registry_in       IN death_registry.id_death_registry%TYPE,
        id_episode_in              IN death_registry.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        dt_death_in                IN death_registry.dt_death%TYPE DEFAULT NULL,
        dt_death_nin               IN BOOLEAN := TRUE,
        id_prof_verified_death_in  IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_prof_verified_death_nin IN BOOLEAN := TRUE,
        id_sl_natural_cause_in     IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_natural_cause_nin    IN BOOLEAN := TRUE,
        id_sl_coroner_warned_in    IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_coroner_warned_nin   IN BOOLEAN := TRUE,
        id_sl_autopsy_in           IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_sl_autopsy_nin          IN BOOLEAN := TRUE,
        id_prof_death_registry_in  IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        id_prof_death_registry_nin IN BOOLEAN := TRUE,
        dt_death_registry_in       IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_nin      IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        flg_status_in              IN death_registry.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_susp_action_in          IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        id_susp_action_nin         IN BOOLEAN := TRUE,
        create_user_in             IN death_registry.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN death_registry.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN death_registry.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN death_registry.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN death_registry.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN death_registry.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        flg_type_in                IN death_registry.flg_type%TYPE DEFAULT NULL,
        flg_type_nin               IN BOOLEAN := TRUE,
        death_date_format_in       IN death_registry.death_date_format%TYPE DEFAULT NULL,
        death_date_format_nin      IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_id_episode_n             NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_dt_death_n               NUMBER(1) := sys.diutil.bool_to_int(dt_death_nin);
        l_id_prof_verified_death_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_verified_death_nin);
        l_id_sl_natural_cause_n    NUMBER(1) := sys.diutil.bool_to_int(id_sl_natural_cause_nin);
        l_id_sl_coroner_warned_n   NUMBER(1) := sys.diutil.bool_to_int(id_sl_coroner_warned_nin);
        l_id_sl_autopsy_n          NUMBER(1) := sys.diutil.bool_to_int(id_sl_autopsy_nin);
        l_id_prof_death_registry_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_death_registry_nin);
        l_dt_death_registry_n      NUMBER(1) := sys.diutil.bool_to_int(dt_death_registry_nin);
        l_id_cancel_reason_n       NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_flg_status_n             NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_susp_action_n         NUMBER(1) := sys.diutil.bool_to_int(id_susp_action_nin);
        l_create_user_n            NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_type_n               NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_death_date_format_n      NUMBER(1) := sys.diutil.bool_to_int(death_date_format_nin);
    BEGIN
    
        UPDATE death_registry
           SET id_episode             = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               dt_death               = decode(l_dt_death_n, 0, dt_death_in, nvl(dt_death_in, dt_death)),
               id_prof_verified_death = decode(l_id_prof_verified_death_n,
                                               0,
                                               id_prof_verified_death_in,
                                               nvl(id_prof_verified_death_in, id_prof_verified_death)),
               id_sl_natural_cause    = decode(l_id_sl_natural_cause_n,
                                               0,
                                               id_sl_natural_cause_in,
                                               nvl(id_sl_natural_cause_in, id_sl_natural_cause)),
               id_sl_coroner_warned   = decode(l_id_sl_coroner_warned_n,
                                               0,
                                               id_sl_coroner_warned_in,
                                               nvl(id_sl_coroner_warned_in, id_sl_coroner_warned)),
               id_sl_autopsy          = decode(l_id_sl_autopsy_n,
                                               0,
                                               id_sl_autopsy_in,
                                               nvl(id_sl_autopsy_in, id_sl_autopsy)),
               id_prof_death_registry = decode(l_id_prof_death_registry_n,
                                               0,
                                               id_prof_death_registry_in,
                                               nvl(id_prof_death_registry_in, id_prof_death_registry)),
               dt_death_registry      = decode(l_dt_death_registry_n,
                                               0,
                                               dt_death_registry_in,
                                               nvl(dt_death_registry_in, dt_death_registry)),
               id_cancel_reason       = decode(l_id_cancel_reason_n,
                                               0,
                                               id_cancel_reason_in,
                                               nvl(id_cancel_reason_in, id_cancel_reason)),
               notes_cancel           = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               flg_status             = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_susp_action         = decode(l_id_susp_action_n,
                                               0,
                                               id_susp_action_in,
                                               nvl(id_susp_action_in, id_susp_action)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution)),
               flg_type               = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               death_date_format      = decode(l_death_date_format_n,
                                               0,
                                               death_date_format_in,
                                               nvl(death_date_format_in, death_date_format))
         WHERE id_death_registry = id_death_registry_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_death_registry_in       IN death_registry.id_death_registry%TYPE,
        id_episode_in              IN death_registry.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        dt_death_in                IN death_registry.dt_death%TYPE DEFAULT NULL,
        dt_death_nin               IN BOOLEAN := TRUE,
        id_prof_verified_death_in  IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_prof_verified_death_nin IN BOOLEAN := TRUE,
        id_sl_natural_cause_in     IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_natural_cause_nin    IN BOOLEAN := TRUE,
        id_sl_coroner_warned_in    IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_coroner_warned_nin   IN BOOLEAN := TRUE,
        id_sl_autopsy_in           IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_sl_autopsy_nin          IN BOOLEAN := TRUE,
        id_prof_death_registry_in  IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        id_prof_death_registry_nin IN BOOLEAN := TRUE,
        dt_death_registry_in       IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_nin      IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        flg_status_in              IN death_registry.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_susp_action_in          IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        id_susp_action_nin         IN BOOLEAN := TRUE,
        create_user_in             IN death_registry.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN death_registry.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN death_registry.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN death_registry.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN death_registry.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN death_registry.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        flg_type_in                IN death_registry.flg_type%TYPE DEFAULT NULL,
        flg_type_nin               IN BOOLEAN := TRUE,
        death_date_format_in       IN death_registry.death_date_format%TYPE DEFAULT NULL,
        death_date_format_nin      IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_death_registry_in       => id_death_registry_in,
            id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            dt_death_in                => dt_death_in,
            dt_death_nin               => dt_death_nin,
            id_prof_verified_death_in  => id_prof_verified_death_in,
            id_prof_verified_death_nin => id_prof_verified_death_nin,
            id_sl_natural_cause_in     => id_sl_natural_cause_in,
            id_sl_natural_cause_nin    => id_sl_natural_cause_nin,
            id_sl_coroner_warned_in    => id_sl_coroner_warned_in,
            id_sl_coroner_warned_nin   => id_sl_coroner_warned_nin,
            id_sl_autopsy_in           => id_sl_autopsy_in,
            id_sl_autopsy_nin          => id_sl_autopsy_nin,
            id_prof_death_registry_in  => id_prof_death_registry_in,
            id_prof_death_registry_nin => id_prof_death_registry_nin,
            dt_death_registry_in       => dt_death_registry_in,
            dt_death_registry_nin      => dt_death_registry_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            notes_cancel_in            => notes_cancel_in,
            notes_cancel_nin           => notes_cancel_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            id_susp_action_in          => id_susp_action_in,
            id_susp_action_nin         => id_susp_action_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            flg_type_in                => flg_type_in,
            flg_type_nin               => flg_type_nin,
            death_date_format_in       => death_date_format_in,
            death_date_format_nin      => death_date_format_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in              IN death_registry.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        dt_death_in                IN death_registry.dt_death%TYPE DEFAULT NULL,
        dt_death_nin               IN BOOLEAN := TRUE,
        id_prof_verified_death_in  IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_prof_verified_death_nin IN BOOLEAN := TRUE,
        id_sl_natural_cause_in     IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_natural_cause_nin    IN BOOLEAN := TRUE,
        id_sl_coroner_warned_in    IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_coroner_warned_nin   IN BOOLEAN := TRUE,
        id_sl_autopsy_in           IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_sl_autopsy_nin          IN BOOLEAN := TRUE,
        id_prof_death_registry_in  IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        id_prof_death_registry_nin IN BOOLEAN := TRUE,
        dt_death_registry_in       IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_nin      IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        flg_status_in              IN death_registry.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_susp_action_in          IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        id_susp_action_nin         IN BOOLEAN := TRUE,
        create_user_in             IN death_registry.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN death_registry.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN death_registry.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN death_registry.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN death_registry.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN death_registry.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        flg_type_in                IN death_registry.flg_type%TYPE DEFAULT NULL,
        flg_type_nin               IN BOOLEAN := TRUE,
        death_date_format_in       IN death_registry.death_date_format%TYPE DEFAULT NULL,
        death_date_format_nin      IN BOOLEAN := TRUE,
        where_in                   IN VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_id_episode_n             NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_dt_death_n               NUMBER(1) := sys.diutil.bool_to_int(dt_death_nin);
        l_id_prof_verified_death_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_verified_death_nin);
        l_id_sl_natural_cause_n    NUMBER(1) := sys.diutil.bool_to_int(id_sl_natural_cause_nin);
        l_id_sl_coroner_warned_n   NUMBER(1) := sys.diutil.bool_to_int(id_sl_coroner_warned_nin);
        l_id_sl_autopsy_n          NUMBER(1) := sys.diutil.bool_to_int(id_sl_autopsy_nin);
        l_id_prof_death_registry_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_death_registry_nin);
        l_dt_death_registry_n      NUMBER(1) := sys.diutil.bool_to_int(dt_death_registry_nin);
        l_id_cancel_reason_n       NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_flg_status_n             NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_susp_action_n         NUMBER(1) := sys.diutil.bool_to_int(id_susp_action_nin);
        l_create_user_n            NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_type_n               NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_death_date_format_n      NUMBER(1) := sys.diutil.bool_to_int(death_date_format_nin);
    BEGIN
        l_id_episode_n             := sys.diutil.bool_to_int(id_episode_nin);
        l_dt_death_n               := sys.diutil.bool_to_int(dt_death_nin);
        l_id_prof_verified_death_n := sys.diutil.bool_to_int(id_prof_verified_death_nin);
        l_id_sl_natural_cause_n    := sys.diutil.bool_to_int(id_sl_natural_cause_nin);
        l_id_sl_coroner_warned_n   := sys.diutil.bool_to_int(id_sl_coroner_warned_nin);
        l_id_sl_autopsy_n          := sys.diutil.bool_to_int(id_sl_autopsy_nin);
        l_id_prof_death_registry_n := sys.diutil.bool_to_int(id_prof_death_registry_nin);
        l_dt_death_registry_n      := sys.diutil.bool_to_int(dt_death_registry_nin);
        l_id_cancel_reason_n       := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n           := sys.diutil.bool_to_int(notes_cancel_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_id_susp_action_n         := sys.diutil.bool_to_int(id_susp_action_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_type_n               := sys.diutil.bool_to_int(flg_type_nin);
        l_death_date_format_n      := sys.diutil.bool_to_int(death_date_format_nin);
        l_sql                      := 'UPDATE death_registry SET' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                                      ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ',' ||
                                      ' DT_DEATH = decode (' || l_dt_death_n ||
                                      ',0,:DT_DEATH_in, NVL (:DT_DEATH_in, DT_DEATH)) ' || ',' ||
                                      ' ID_PROF_VERIFIED_DEATH = decode (' || l_id_prof_verified_death_n ||
                                      ',0,:ID_PROF_VERIFIED_DEATH_in, NVL (:ID_PROF_VERIFIED_DEATH_in, ID_PROF_VERIFIED_DEATH)) ' || ',' ||
                                      ' ID_SL_NATURAL_CAUSE = decode (' || l_id_sl_natural_cause_n ||
                                      ',0,:ID_SL_NATURAL_CAUSE_in, NVL (:ID_SL_NATURAL_CAUSE_in, ID_SL_NATURAL_CAUSE)) ' || ',' ||
                                      ' ID_SL_CORONER_WARNED = decode (' || l_id_sl_coroner_warned_n ||
                                      ',0,:ID_SL_CORONER_WARNED_in, NVL (:ID_SL_CORONER_WARNED_in, ID_SL_CORONER_WARNED)) ' || ',' ||
                                      ' ID_SL_AUTOPSY = decode (' || l_id_sl_autopsy_n ||
                                      ',0,:ID_SL_AUTOPSY_in, NVL (:ID_SL_AUTOPSY_in, ID_SL_AUTOPSY)) ' || ',' ||
                                      ' ID_PROF_DEATH_REGISTRY = decode (' || l_id_prof_death_registry_n ||
                                      ',0,:ID_PROF_DEATH_REGISTRY_in, NVL (:ID_PROF_DEATH_REGISTRY_in, ID_PROF_DEATH_REGISTRY)) ' || ',' ||
                                      ' DT_DEATH_REGISTRY = decode (' || l_dt_death_registry_n ||
                                      ',0,:DT_DEATH_REGISTRY_in, NVL (:DT_DEATH_REGISTRY_in, DT_DEATH_REGISTRY)) ' || ',' ||
                                      ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                                      ',0,:ID_CANCEL_REASON_in, NVL (:ID_CANCEL_REASON_in, ID_CANCEL_REASON)) ' || ',' ||
                                      ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                                      ',0,:NOTES_CANCEL_in, NVL (:NOTES_CANCEL_in, NOTES_CANCEL)) ' || ',' ||
                                      ' FLG_STATUS = decode (' || l_flg_status_n ||
                                      ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                      ' ID_SUSP_ACTION = decode (' || l_id_susp_action_n ||
                                      ',0,:ID_SUSP_ACTION_in, NVL (:ID_SUSP_ACTION_in, ID_SUSP_ACTION)) ' || ',' ||
                                      ' CREATE_USER = decode (' || l_create_user_n ||
                                      ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                      ' CREATE_TIME = decode (' || l_create_time_n ||
                                      ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                      ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                      ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                      ' UPDATE_USER = decode (' || l_update_user_n ||
                                      ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                      ' UPDATE_TIME = decode (' || l_update_time_n ||
                                      ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                      ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                      ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                      ' FLG_TYPE = decode (' || l_flg_type_n ||
                                      ',0,:FLG_TYPE_in, NVL (:FLG_TYPE_in, FLG_TYPE)) ' || ',' ||
                                      ' DEATH_DATE_FORMAT = decode (' || l_death_date_format_n ||
                                      ',0,:DEATH_DATE_FORMAT_in, NVL (:DEATH_DATE_FORMAT_in, DEATH_DATE_FORMAT)) ' ||
                                      ' where ' || nvl(where_in, '(1=1)') ||
                                      ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, dt_death_in, id_prof_verified_death_in, id_sl_natural_cause_in, id_sl_coroner_warned_in, id_sl_autopsy_in, id_prof_death_registry_in, dt_death_registry_in, id_cancel_reason_in, notes_cancel_in, flg_status_in, id_susp_action_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_type_in, death_date_format_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in              IN death_registry.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        dt_death_in                IN death_registry.dt_death%TYPE DEFAULT NULL,
        dt_death_nin               IN BOOLEAN := TRUE,
        id_prof_verified_death_in  IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_prof_verified_death_nin IN BOOLEAN := TRUE,
        id_sl_natural_cause_in     IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_natural_cause_nin    IN BOOLEAN := TRUE,
        id_sl_coroner_warned_in    IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_coroner_warned_nin   IN BOOLEAN := TRUE,
        id_sl_autopsy_in           IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_sl_autopsy_nin          IN BOOLEAN := TRUE,
        id_prof_death_registry_in  IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        id_prof_death_registry_nin IN BOOLEAN := TRUE,
        dt_death_registry_in       IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_nin      IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        flg_status_in              IN death_registry.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_susp_action_in          IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        id_susp_action_nin         IN BOOLEAN := TRUE,
        create_user_in             IN death_registry.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN death_registry.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN death_registry.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN death_registry.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN death_registry.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN death_registry.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        flg_type_in                IN death_registry.flg_type%TYPE DEFAULT NULL,
        flg_type_nin               IN BOOLEAN := TRUE,
        death_date_format_in       IN death_registry.death_date_format%TYPE DEFAULT NULL,
        death_date_format_nin      IN BOOLEAN := TRUE,
        where_in                   IN VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            dt_death_in                => dt_death_in,
            dt_death_nin               => dt_death_nin,
            id_prof_verified_death_in  => id_prof_verified_death_in,
            id_prof_verified_death_nin => id_prof_verified_death_nin,
            id_sl_natural_cause_in     => id_sl_natural_cause_in,
            id_sl_natural_cause_nin    => id_sl_natural_cause_nin,
            id_sl_coroner_warned_in    => id_sl_coroner_warned_in,
            id_sl_coroner_warned_nin   => id_sl_coroner_warned_nin,
            id_sl_autopsy_in           => id_sl_autopsy_in,
            id_sl_autopsy_nin          => id_sl_autopsy_nin,
            id_prof_death_registry_in  => id_prof_death_registry_in,
            id_prof_death_registry_nin => id_prof_death_registry_nin,
            dt_death_registry_in       => dt_death_registry_in,
            dt_death_registry_nin      => dt_death_registry_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            notes_cancel_in            => notes_cancel_in,
            notes_cancel_nin           => notes_cancel_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            id_susp_action_in          => id_susp_action_in,
            id_susp_action_nin         => id_susp_action_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            flg_type_in                => flg_type_in,
            flg_type_nin               => flg_type_nin,
            death_date_format_in       => death_date_format_in,
            death_date_format_nin      => death_date_format_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_death_registry_in      IN death_registry.id_death_registry%TYPE,
        id_episode_in             IN death_registry.id_episode%TYPE DEFAULT NULL,
        dt_death_in               IN death_registry.dt_death%TYPE DEFAULT NULL,
        id_prof_verified_death_in IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_sl_natural_cause_in    IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_coroner_warned_in   IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_autopsy_in          IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_prof_death_registry_in IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_in      IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in             IN death_registry.flg_status%TYPE DEFAULT NULL,
        id_susp_action_in         IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        create_user_in            IN death_registry.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry.update_institution%TYPE DEFAULT NULL,
        flg_type_in               IN death_registry.flg_type%TYPE DEFAULT NULL,
        death_date_format_in      IN death_registry.death_date_format%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_death_registry_in      => id_death_registry_in,
            id_episode_in             => id_episode_in,
            dt_death_in               => dt_death_in,
            id_prof_verified_death_in => id_prof_verified_death_in,
            id_sl_natural_cause_in    => id_sl_natural_cause_in,
            id_sl_coroner_warned_in   => id_sl_coroner_warned_in,
            id_sl_autopsy_in          => id_sl_autopsy_in,
            id_prof_death_registry_in => id_prof_death_registry_in,
            dt_death_registry_in      => dt_death_registry_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            flg_status_in             => flg_status_in,
            id_susp_action_in         => id_susp_action_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_in               => flg_type_in,
            death_date_format_in      => death_date_format_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_death_registry_in      => id_death_registry_in,
                id_episode_in             => id_episode_in,
                dt_death_in               => dt_death_in,
                id_prof_verified_death_in => id_prof_verified_death_in,
                id_sl_natural_cause_in    => id_sl_natural_cause_in,
                id_sl_coroner_warned_in   => id_sl_coroner_warned_in,
                id_sl_autopsy_in          => id_sl_autopsy_in,
                id_prof_death_registry_in => id_prof_death_registry_in,
                dt_death_registry_in      => dt_death_registry_in,
                id_cancel_reason_in       => id_cancel_reason_in,
                notes_cancel_in           => notes_cancel_in,
                flg_status_in             => flg_status_in,
                id_susp_action_in         => id_susp_action_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                flg_type_in               => flg_type_in,
                death_date_format_in      => death_date_format_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_death_registry_in      IN death_registry.id_death_registry%TYPE,
        id_episode_in             IN death_registry.id_episode%TYPE DEFAULT NULL,
        dt_death_in               IN death_registry.dt_death%TYPE DEFAULT NULL,
        id_prof_verified_death_in IN death_registry.id_prof_verified_death%TYPE DEFAULT NULL,
        id_sl_natural_cause_in    IN death_registry.id_sl_natural_cause%TYPE DEFAULT NULL,
        id_sl_coroner_warned_in   IN death_registry.id_sl_coroner_warned%TYPE DEFAULT NULL,
        id_sl_autopsy_in          IN death_registry.id_sl_autopsy%TYPE DEFAULT NULL,
        id_prof_death_registry_in IN death_registry.id_prof_death_registry%TYPE DEFAULT NULL,
        dt_death_registry_in      IN death_registry.dt_death_registry%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN death_registry.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN death_registry.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in             IN death_registry.flg_status%TYPE DEFAULT NULL,
        id_susp_action_in         IN death_registry.id_susp_action%TYPE DEFAULT NULL,
        create_user_in            IN death_registry.create_user%TYPE DEFAULT NULL,
        create_time_in            IN death_registry.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN death_registry.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN death_registry.update_user%TYPE DEFAULT NULL,
        update_time_in            IN death_registry.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN death_registry.update_institution%TYPE DEFAULT NULL,
        flg_type_in               IN death_registry.flg_type%TYPE DEFAULT NULL,
        death_date_format_in      IN death_registry.death_date_format%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_death_registry_in,
                id_episode_in,
                dt_death_in,
                id_prof_verified_death_in,
                id_sl_natural_cause_in,
                id_sl_coroner_warned_in,
                id_sl_autopsy_in,
                id_prof_death_registry_in,
                dt_death_registry_in,
                id_cancel_reason_in,
                notes_cancel_in,
                flg_status_in,
                id_susp_action_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_type_in,
                death_date_format_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN death_registry%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_death_registry_in      => rec_in.id_death_registry,
            id_episode_in             => rec_in.id_episode,
            dt_death_in               => rec_in.dt_death,
            id_prof_verified_death_in => rec_in.id_prof_verified_death,
            id_sl_natural_cause_in    => rec_in.id_sl_natural_cause,
            id_sl_coroner_warned_in   => rec_in.id_sl_coroner_warned,
            id_sl_autopsy_in          => rec_in.id_sl_autopsy,
            id_prof_death_registry_in => rec_in.id_prof_death_registry,
            dt_death_registry_in      => rec_in.dt_death_registry,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            notes_cancel_in           => rec_in.notes_cancel,
            flg_status_in             => rec_in.flg_status,
            id_susp_action_in         => rec_in.id_susp_action,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            flg_type_in               => rec_in.flg_type,
            death_date_format_in      => rec_in.death_date_format,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN death_registry%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_death_registry_in      => rec_in.id_death_registry,
            id_episode_in             => rec_in.id_episode,
            dt_death_in               => rec_in.dt_death,
            id_prof_verified_death_in => rec_in.id_prof_verified_death,
            id_sl_natural_cause_in    => rec_in.id_sl_natural_cause,
            id_sl_coroner_warned_in   => rec_in.id_sl_coroner_warned,
            id_sl_autopsy_in          => rec_in.id_sl_autopsy,
            id_prof_death_registry_in => rec_in.id_prof_death_registry,
            dt_death_registry_in      => rec_in.dt_death_registry,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            notes_cancel_in           => rec_in.notes_cancel,
            flg_status_in             => rec_in.flg_status,
            id_susp_action_in         => rec_in.id_susp_action,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            flg_type_in               => rec_in.flg_type,
            death_date_format_in      => rec_in.death_date_format,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN death_registry_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_death_registry      id_death_registry_cc;
        l_id_episode             id_episode_cc;
        l_dt_death               dt_death_cc;
        l_id_prof_verified_death id_prof_verified_death_cc;
        l_id_sl_natural_cause    id_sl_natural_cause_cc;
        l_id_sl_coroner_warned   id_sl_coroner_warned_cc;
        l_id_sl_autopsy          id_sl_autopsy_cc;
        l_id_prof_death_registry id_prof_death_registry_cc;
        l_dt_death_registry      dt_death_registry_cc;
        l_id_cancel_reason       id_cancel_reason_cc;
        l_notes_cancel           notes_cancel_cc;
        l_flg_status             flg_status_cc;
        l_id_susp_action         id_susp_action_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
        l_flg_type               flg_type_cc;
        l_death_date_format      death_date_format_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_death_registry(i) := col_in(i).id_death_registry;
            l_id_episode(i) := col_in(i).id_episode;
            l_dt_death(i) := col_in(i).dt_death;
            l_id_prof_verified_death(i) := col_in(i).id_prof_verified_death;
            l_id_sl_natural_cause(i) := col_in(i).id_sl_natural_cause;
            l_id_sl_coroner_warned(i) := col_in(i).id_sl_coroner_warned;
            l_id_sl_autopsy(i) := col_in(i).id_sl_autopsy;
            l_id_prof_death_registry(i) := col_in(i).id_prof_death_registry;
            l_dt_death_registry(i) := col_in(i).dt_death_registry;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_susp_action(i) := col_in(i).id_susp_action;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_type(i) := col_in(i).flg_type;
            l_death_date_format(i) := col_in(i).death_date_format;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE death_registry
                   SET id_episode             = nvl(l_id_episode(i), id_episode),
                       dt_death               = nvl(l_dt_death(i), dt_death),
                       id_prof_verified_death = nvl(l_id_prof_verified_death(i), id_prof_verified_death),
                       id_sl_natural_cause    = nvl(l_id_sl_natural_cause(i), id_sl_natural_cause),
                       id_sl_coroner_warned   = nvl(l_id_sl_coroner_warned(i), id_sl_coroner_warned),
                       id_sl_autopsy          = nvl(l_id_sl_autopsy(i), id_sl_autopsy),
                       id_prof_death_registry = nvl(l_id_prof_death_registry(i), id_prof_death_registry),
                       dt_death_registry      = nvl(l_dt_death_registry(i), dt_death_registry),
                       id_cancel_reason       = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       notes_cancel           = nvl(l_notes_cancel(i), notes_cancel),
                       flg_status             = nvl(l_flg_status(i), flg_status),
                       id_susp_action         = nvl(l_id_susp_action(i), id_susp_action),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution),
                       flg_type               = nvl(l_flg_type(i), flg_type),
                       death_date_format      = nvl(l_death_date_format(i), death_date_format)
                 WHERE id_death_registry = l_id_death_registry(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE death_registry
                   SET id_episode             = l_id_episode(i),
                       dt_death               = l_dt_death(i),
                       id_prof_verified_death = l_id_prof_verified_death(i),
                       id_sl_natural_cause    = l_id_sl_natural_cause(i),
                       id_sl_coroner_warned   = l_id_sl_coroner_warned(i),
                       id_sl_autopsy          = l_id_sl_autopsy(i),
                       id_prof_death_registry = l_id_prof_death_registry(i),
                       dt_death_registry      = l_dt_death_registry(i),
                       id_cancel_reason       = l_id_cancel_reason(i),
                       notes_cancel           = l_notes_cancel(i),
                       flg_status             = l_flg_status(i),
                       id_susp_action         = l_id_susp_action(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i),
                       flg_type               = l_flg_type(i),
                       death_date_format      = l_death_date_format(i)
                 WHERE id_death_registry = l_id_death_registry(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN death_registry_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE death_registry
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE death_registry
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE death_registry
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_death_registry_in IN death_registry.id_death_registry%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM death_registry
         WHERE id_death_registry = id_death_registry_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_death_registry_in IN death_registry.id_death_registry%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_death_registry_in => id_death_registry_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this DTHR_CR_FK foreign key value
    PROCEDURE del_dthr_cr_fk
    (
        id_cancel_reason_in IN death_registry.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM death_registry
         WHERE id_cancel_reason = id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_dthr_cr_fk;

    -- Delete all rows for this DTHR_E_FK foreign key value
    PROCEDURE del_dthr_e_fk
    (
        id_episode_in   IN death_registry.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM death_registry
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_dthr_e_fk;

    -- Delete all rows for this DTHR_P_DRY_FK foreign key value
    PROCEDURE del_dthr_p_dry_fk
    (
        id_prof_death_registry_in IN death_registry.id_prof_death_registry%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM death_registry
         WHERE id_prof_death_registry = id_prof_death_registry_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_dthr_p_dry_fk;

    -- Delete all rows for this DTHR_P_VD_FK foreign key value
    PROCEDURE del_dthr_p_vd_fk
    (
        id_prof_verified_death_in IN death_registry.id_prof_verified_death%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM death_registry
         WHERE id_prof_verified_death = id_prof_verified_death_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_dthr_p_vd_fk;

    -- Delete all rows for this DTHR_SA_FK foreign key value
    PROCEDURE del_dthr_sa_fk
    (
        id_susp_action_in IN death_registry.id_susp_action%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM death_registry
         WHERE id_susp_action = id_susp_action_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_dthr_sa_fk;

    -- Delete all rows for this DTHR_SLA_FK foreign key value
    PROCEDURE del_dthr_sla_fk
    (
        id_sl_autopsy_in IN death_registry.id_sl_autopsy%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM death_registry
         WHERE id_sl_autopsy = id_sl_autopsy_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_dthr_sla_fk;

    -- Delete all rows for this DTHR_SLCW_FK foreign key value
    PROCEDURE del_dthr_slcw_fk
    (
        id_sl_coroner_warned_in IN death_registry.id_sl_coroner_warned%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM death_registry
         WHERE id_sl_coroner_warned = id_sl_coroner_warned_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_dthr_slcw_fk;

    -- Delete all rows for this DTHR_SLNC_FK foreign key value
    PROCEDURE del_dthr_slnc_fk
    (
        id_sl_natural_cause_in IN death_registry.id_sl_natural_cause%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM death_registry
         WHERE id_sl_natural_cause = id_sl_natural_cause_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_dthr_slnc_fk;

    -- Delete all rows for this DTHR_CR_FK foreign key value
    PROCEDURE del_dthr_cr_fk
    (
        id_cancel_reason_in IN death_registry.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dthr_cr_fk(id_cancel_reason_in => id_cancel_reason_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_dthr_cr_fk;

    -- Delete all rows for this DTHR_E_FK foreign key value
    PROCEDURE del_dthr_e_fk
    (
        id_episode_in   IN death_registry.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dthr_e_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_dthr_e_fk;

    -- Delete all rows for this DTHR_P_DRY_FK foreign key value
    PROCEDURE del_dthr_p_dry_fk
    (
        id_prof_death_registry_in IN death_registry.id_prof_death_registry%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dthr_p_dry_fk(id_prof_death_registry_in => id_prof_death_registry_in,
                          handle_error_in           => handle_error_in,
                          rows_out                  => rows_out);
    END del_dthr_p_dry_fk;

    -- Delete all rows for this DTHR_P_VD_FK foreign key value
    PROCEDURE del_dthr_p_vd_fk
    (
        id_prof_verified_death_in IN death_registry.id_prof_verified_death%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dthr_p_vd_fk(id_prof_verified_death_in => id_prof_verified_death_in,
                         handle_error_in           => handle_error_in,
                         rows_out                  => rows_out);
    END del_dthr_p_vd_fk;

    -- Delete all rows for this DTHR_SA_FK foreign key value
    PROCEDURE del_dthr_sa_fk
    (
        id_susp_action_in IN death_registry.id_susp_action%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dthr_sa_fk(id_susp_action_in => id_susp_action_in,
                       handle_error_in   => handle_error_in,
                       rows_out          => rows_out);
    END del_dthr_sa_fk;

    -- Delete all rows for this DTHR_SLA_FK foreign key value
    PROCEDURE del_dthr_sla_fk
    (
        id_sl_autopsy_in IN death_registry.id_sl_autopsy%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dthr_sla_fk(id_sl_autopsy_in => id_sl_autopsy_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_dthr_sla_fk;

    -- Delete all rows for this DTHR_SLCW_FK foreign key value
    PROCEDURE del_dthr_slcw_fk
    (
        id_sl_coroner_warned_in IN death_registry.id_sl_coroner_warned%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dthr_slcw_fk(id_sl_coroner_warned_in => id_sl_coroner_warned_in,
                         handle_error_in         => handle_error_in,
                         rows_out                => rows_out);
    END del_dthr_slcw_fk;

    -- Delete all rows for this DTHR_SLNC_FK foreign key value
    PROCEDURE del_dthr_slnc_fk
    (
        id_sl_natural_cause_in IN death_registry.id_sl_natural_cause%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dthr_slnc_fk(id_sl_natural_cause_in => id_sl_natural_cause_in,
                         handle_error_in        => handle_error_in,
                         rows_out               => rows_out);
    END del_dthr_slnc_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM death_registry';
        ELSE
            RETURN 'DELETE FROM death_registry WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(death_registry_inout IN OUT death_registry%ROWTYPE) IS
    BEGIN
        death_registry_inout.id_death_registry      := NULL;
        death_registry_inout.id_episode             := NULL;
        death_registry_inout.dt_death               := NULL;
        death_registry_inout.id_prof_verified_death := NULL;
        death_registry_inout.id_sl_natural_cause    := NULL;
        death_registry_inout.id_sl_coroner_warned   := NULL;
        death_registry_inout.id_sl_autopsy          := NULL;
        death_registry_inout.id_prof_death_registry := NULL;
        death_registry_inout.dt_death_registry      := NULL;
        death_registry_inout.id_cancel_reason       := NULL;
        death_registry_inout.notes_cancel           := NULL;
        death_registry_inout.flg_status             := NULL;
        death_registry_inout.id_susp_action         := NULL;
        death_registry_inout.create_user            := NULL;
        death_registry_inout.create_time            := NULL;
        death_registry_inout.create_institution     := NULL;
        death_registry_inout.update_user            := NULL;
        death_registry_inout.update_time            := NULL;
        death_registry_inout.update_institution     := NULL;
        death_registry_inout.flg_type               := NULL;
        death_registry_inout.death_date_format      := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN death_registry%ROWTYPE IS
        l_death_registry death_registry%ROWTYPE;
    BEGIN
        RETURN l_death_registry;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN death_registry_tc IS
        data death_registry_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM death_registry
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN death_registry_tc IS
        data death_registry_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_death_registry;
