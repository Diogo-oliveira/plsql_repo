/*-- Last Change Revision: $Rev: 2027943 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:45 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY TS_AWARENESS
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 4, 2011 14:42:29
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_episode_in IN AWARENESS.ID_EPISODE%TYPE,
      id_patient_in IN AWARENESS.ID_PATIENT%TYPE
      ,
      flg_episode_in IN AWARENESS.FLG_EPISODE%TYPE DEFAULT NULL,
      flg_pat_allergy_in IN AWARENESS.FLG_PAT_ALLERGY%TYPE DEFAULT NULL,
      flg_pat_habit_in IN AWARENESS.FLG_PAT_HABIT%TYPE DEFAULT NULL,
      flg_pat_history_diagnosis_in IN AWARENESS.FLG_PAT_HISTORY_DIAGNOSIS%TYPE DEFAULT NULL,
      flg_vital_sign_read_in IN AWARENESS.FLG_VITAL_SIGN_READ%TYPE DEFAULT NULL,
      flg_epis_diagnosis_in IN AWARENESS.FLG_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      flg_analysis_req_in IN AWARENESS.FLG_ANALYSIS_REQ%TYPE DEFAULT NULL,
      flg_exam_req_in IN AWARENESS.FLG_EXAM_REQ%TYPE DEFAULT NULL,
      flg_drug_prescription_in IN AWARENESS.FLG_DRUG_PRESCRIPTION%TYPE DEFAULT NULL,
      flg_drug_req_in IN AWARENESS.FLG_DRUG_REQ%TYPE DEFAULT NULL,
      flg_interv_prescription_in IN AWARENESS.FLG_INTERV_PRESCRIPTION%TYPE DEFAULT NULL,
      flg_nurse_activity_req_in IN AWARENESS.FLG_NURSE_ACTIVITY_REQ%TYPE DEFAULT NULL,
      flg_monitorization_in IN AWARENESS.FLG_MONITORIZATION%TYPE DEFAULT NULL,
      flg_icnp_epis_diagnosis_in IN AWARENESS.FLG_ICNP_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      flg_icnp_epis_intervention_in IN AWARENESS.FLG_ICNP_EPIS_INTERVENTION%TYPE DEFAULT NULL,
      flg_pat_pregnancy_in IN AWARENESS.FLG_PAT_PREGNANCY%TYPE DEFAULT NULL,
      flg_sys_alert_det_in IN AWARENESS.FLG_SYS_ALERT_DET%TYPE DEFAULT NULL,
      create_user_in IN AWARENESS.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN AWARENESS.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN AWARENESS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN AWARENESS.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN AWARENESS.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN AWARENESS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_visit_in IN AWARENESS.ID_VISIT%TYPE DEFAULT NULL,
      flg_presc_med_in IN AWARENESS.FLG_PRESC_MED%TYPE DEFAULT NULL,
      flg_presc_med_e_in IN AWARENESS.FLG_PRESC_MED_E%TYPE DEFAULT NULL,
      flg_presc_med_iv_in IN AWARENESS.FLG_PRESC_MED_IV%TYPE DEFAULT NULL,
      flg_presc_med_l_in IN AWARENESS.FLG_PRESC_MED_L%TYPE DEFAULT NULL,
      flg_presc_med_r_in IN AWARENESS.FLG_PRESC_MED_R%TYPE DEFAULT NULL,
      flg_prescription_in IN AWARENESS.FLG_PRESCRIPTION%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO AWARENESS (
         ID_PATIENT,
         ID_EPISODE,
         FLG_EPISODE,
         FLG_PAT_ALLERGY,
         FLG_PAT_HABIT,
         FLG_PAT_HISTORY_DIAGNOSIS,
         FLG_VITAL_SIGN_READ,
         FLG_EPIS_DIAGNOSIS,
         FLG_ANALYSIS_REQ,
         FLG_EXAM_REQ,
         FLG_DRUG_PRESCRIPTION,
         FLG_DRUG_REQ,
         FLG_INTERV_PRESCRIPTION,
         FLG_NURSE_ACTIVITY_REQ,
         FLG_MONITORIZATION,
         FLG_ICNP_EPIS_DIAGNOSIS,
         FLG_ICNP_EPIS_INTERVENTION,
         FLG_PAT_PREGNANCY,
         FLG_SYS_ALERT_DET,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         ID_VISIT,
         FLG_PRESC_MED,
         FLG_PRESC_MED_E,
         FLG_PRESC_MED_IV,
         FLG_PRESC_MED_L,
         FLG_PRESC_MED_R,
         FLG_PRESCRIPTION
         )
      VALUES (
         id_patient_in,
         id_episode_in,
         flg_episode_in,
         flg_pat_allergy_in,
         flg_pat_habit_in,
         flg_pat_history_diagnosis_in,
         flg_vital_sign_read_in,
         flg_epis_diagnosis_in,
         flg_analysis_req_in,
         flg_exam_req_in,
         flg_drug_prescription_in,
         flg_drug_req_in,
         flg_interv_prescription_in,
         flg_nurse_activity_req_in,
         flg_monitorization_in,
         flg_icnp_epis_diagnosis_in,
         flg_icnp_epis_intervention_in,
         flg_pat_pregnancy_in,
         flg_sys_alert_det_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         id_visit_in,
         flg_presc_med_in,
         flg_presc_med_e_in,
         flg_presc_med_iv_in,
         flg_presc_med_l_in,
         flg_presc_med_r_in,
         flg_prescription_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'AWARENESS');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_episode_in IN AWARENESS.ID_EPISODE%TYPE,
      id_patient_in IN AWARENESS.ID_PATIENT%TYPE
      ,
      flg_episode_in IN AWARENESS.FLG_EPISODE%TYPE DEFAULT NULL,
      flg_pat_allergy_in IN AWARENESS.FLG_PAT_ALLERGY%TYPE DEFAULT NULL,
      flg_pat_habit_in IN AWARENESS.FLG_PAT_HABIT%TYPE DEFAULT NULL,
      flg_pat_history_diagnosis_in IN AWARENESS.FLG_PAT_HISTORY_DIAGNOSIS%TYPE DEFAULT NULL,
      flg_vital_sign_read_in IN AWARENESS.FLG_VITAL_SIGN_READ%TYPE DEFAULT NULL,
      flg_epis_diagnosis_in IN AWARENESS.FLG_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      flg_analysis_req_in IN AWARENESS.FLG_ANALYSIS_REQ%TYPE DEFAULT NULL,
      flg_exam_req_in IN AWARENESS.FLG_EXAM_REQ%TYPE DEFAULT NULL,
      flg_drug_prescription_in IN AWARENESS.FLG_DRUG_PRESCRIPTION%TYPE DEFAULT NULL,
      flg_drug_req_in IN AWARENESS.FLG_DRUG_REQ%TYPE DEFAULT NULL,
      flg_interv_prescription_in IN AWARENESS.FLG_INTERV_PRESCRIPTION%TYPE DEFAULT NULL,
      flg_nurse_activity_req_in IN AWARENESS.FLG_NURSE_ACTIVITY_REQ%TYPE DEFAULT NULL,
      flg_monitorization_in IN AWARENESS.FLG_MONITORIZATION%TYPE DEFAULT NULL,
      flg_icnp_epis_diagnosis_in IN AWARENESS.FLG_ICNP_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      flg_icnp_epis_intervention_in IN AWARENESS.FLG_ICNP_EPIS_INTERVENTION%TYPE DEFAULT NULL,
      flg_pat_pregnancy_in IN AWARENESS.FLG_PAT_PREGNANCY%TYPE DEFAULT NULL,
      flg_sys_alert_det_in IN AWARENESS.FLG_SYS_ALERT_DET%TYPE DEFAULT NULL,
      create_user_in IN AWARENESS.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN AWARENESS.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN AWARENESS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN AWARENESS.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN AWARENESS.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN AWARENESS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_visit_in IN AWARENESS.ID_VISIT%TYPE DEFAULT NULL,
      flg_presc_med_in IN AWARENESS.FLG_PRESC_MED%TYPE DEFAULT NULL,
      flg_presc_med_e_in IN AWARENESS.FLG_PRESC_MED_E%TYPE DEFAULT NULL,
      flg_presc_med_iv_in IN AWARENESS.FLG_PRESC_MED_IV%TYPE DEFAULT NULL,
      flg_presc_med_l_in IN AWARENESS.FLG_PRESC_MED_L%TYPE DEFAULT NULL,
      flg_presc_med_r_in IN AWARENESS.FLG_PRESC_MED_R%TYPE DEFAULT NULL,
      flg_prescription_in IN AWARENESS.FLG_PRESCRIPTION%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_episode_in => id_episode_in,
      id_patient_in => id_patient_in
      ,
      flg_episode_in => flg_episode_in,
      flg_pat_allergy_in => flg_pat_allergy_in,
      flg_pat_habit_in => flg_pat_habit_in,
      flg_pat_history_diagnosis_in => flg_pat_history_diagnosis_in,
      flg_vital_sign_read_in => flg_vital_sign_read_in,
      flg_epis_diagnosis_in => flg_epis_diagnosis_in,
      flg_analysis_req_in => flg_analysis_req_in,
      flg_exam_req_in => flg_exam_req_in,
      flg_drug_prescription_in => flg_drug_prescription_in,
      flg_drug_req_in => flg_drug_req_in,
      flg_interv_prescription_in => flg_interv_prescription_in,
      flg_nurse_activity_req_in => flg_nurse_activity_req_in,
      flg_monitorization_in => flg_monitorization_in,
      flg_icnp_epis_diagnosis_in => flg_icnp_epis_diagnosis_in,
      flg_icnp_epis_intervention_in => flg_icnp_epis_intervention_in,
      flg_pat_pregnancy_in => flg_pat_pregnancy_in,
      flg_sys_alert_det_in => flg_sys_alert_det_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_visit_in => id_visit_in,
      flg_presc_med_in => flg_presc_med_in,
      flg_presc_med_e_in => flg_presc_med_e_in,
      flg_presc_med_iv_in => flg_presc_med_iv_in,
      flg_presc_med_l_in => flg_presc_med_l_in,
      flg_presc_med_r_in => flg_presc_med_r_in,
      flg_prescription_in => flg_prescription_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN AWARENESS%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec AWARENESS%ROWTYPE := rec_in;
   BEGIN
      ins (
         id_episode_in => l_rec.ID_EPISODE,
         id_patient_in => l_rec.ID_PATIENT
         ,
         flg_episode_in => l_rec.FLG_EPISODE,
         flg_pat_allergy_in => l_rec.FLG_PAT_ALLERGY,
         flg_pat_habit_in => l_rec.FLG_PAT_HABIT,
         flg_pat_history_diagnosis_in => l_rec.FLG_PAT_HISTORY_DIAGNOSIS,
         flg_vital_sign_read_in => l_rec.FLG_VITAL_SIGN_READ,
         flg_epis_diagnosis_in => l_rec.FLG_EPIS_DIAGNOSIS,
         flg_analysis_req_in => l_rec.FLG_ANALYSIS_REQ,
         flg_exam_req_in => l_rec.FLG_EXAM_REQ,
         flg_drug_prescription_in => l_rec.FLG_DRUG_PRESCRIPTION,
         flg_drug_req_in => l_rec.FLG_DRUG_REQ,
         flg_interv_prescription_in => l_rec.FLG_INTERV_PRESCRIPTION,
         flg_nurse_activity_req_in => l_rec.FLG_NURSE_ACTIVITY_REQ,
         flg_monitorization_in => l_rec.FLG_MONITORIZATION,
         flg_icnp_epis_diagnosis_in => l_rec.FLG_ICNP_EPIS_DIAGNOSIS,
         flg_icnp_epis_intervention_in => l_rec.FLG_ICNP_EPIS_INTERVENTION,
         flg_pat_pregnancy_in => l_rec.FLG_PAT_PREGNANCY,
         flg_sys_alert_det_in => l_rec.FLG_SYS_ALERT_DET,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         id_visit_in => l_rec.ID_VISIT,
         flg_presc_med_in => l_rec.FLG_PRESC_MED,
         flg_presc_med_e_in => l_rec.FLG_PRESC_MED_E,
         flg_presc_med_iv_in => l_rec.FLG_PRESC_MED_IV,
         flg_presc_med_l_in => l_rec.FLG_PRESC_MED_L,
         flg_presc_med_r_in => l_rec.FLG_PRESC_MED_R,
         flg_prescription_in => l_rec.FLG_PRESCRIPTION
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN AWARENESS%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

    PROCEDURE ins (
      rows_in IN AWARENESS_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO AWARENESS VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PATIENT _' || indx
                  ,value_in => rows_in(indx).ID_PATIENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE _' || indx
                  ,value_in => rows_in(indx).ID_EPISODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_EPISODE _' || indx
                  ,value_in => rows_in(indx).FLG_EPISODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_PAT_ALLERGY _' || indx
                  ,value_in => rows_in(indx).FLG_PAT_ALLERGY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_PAT_HABIT _' || indx
                  ,value_in => rows_in(indx).FLG_PAT_HABIT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_PAT_HISTORY_DIAGNOSIS _' || indx
                  ,value_in => rows_in(indx).FLG_PAT_HISTORY_DIAGNOSIS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_VITAL_SIGN_READ _' || indx
                  ,value_in => rows_in(indx).FLG_VITAL_SIGN_READ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_EPIS_DIAGNOSIS _' || indx
                  ,value_in => rows_in(indx).FLG_EPIS_DIAGNOSIS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_ANALYSIS_REQ _' || indx
                  ,value_in => rows_in(indx).FLG_ANALYSIS_REQ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_EXAM_REQ _' || indx
                  ,value_in => rows_in(indx).FLG_EXAM_REQ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_DRUG_PRESCRIPTION _' || indx
                  ,value_in => rows_in(indx).FLG_DRUG_PRESCRIPTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_DRUG_REQ _' || indx
                  ,value_in => rows_in(indx).FLG_DRUG_REQ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_INTERV_PRESCRIPTION _' || indx
                  ,value_in => rows_in(indx).FLG_INTERV_PRESCRIPTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_NURSE_ACTIVITY_REQ _' || indx
                  ,value_in => rows_in(indx).FLG_NURSE_ACTIVITY_REQ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_MONITORIZATION _' || indx
                  ,value_in => rows_in(indx).FLG_MONITORIZATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_ICNP_EPIS_DIAGNOSIS _' || indx
                  ,value_in => rows_in(indx).FLG_ICNP_EPIS_DIAGNOSIS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_ICNP_EPIS_INTERVENTION _' || indx
                  ,value_in => rows_in(indx).FLG_ICNP_EPIS_INTERVENTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_PAT_PREGNANCY _' || indx
                  ,value_in => rows_in(indx).FLG_PAT_PREGNANCY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_SYS_ALERT_DET _' || indx
                  ,value_in => rows_in(indx).FLG_SYS_ALERT_DET
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(indx).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(indx).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(indx).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(indx).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VISIT _' || indx
                  ,value_in => rows_in(indx).ID_VISIT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_PRESC_MED _' || indx
                  ,value_in => rows_in(indx).FLG_PRESC_MED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_PRESC_MED_E _' || indx
                  ,value_in => rows_in(indx).FLG_PRESC_MED_E
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_PRESC_MED_IV _' || indx
                  ,value_in => rows_in(indx).FLG_PRESC_MED_IV
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_PRESC_MED_L _' || indx
                  ,value_in => rows_in(indx).FLG_PRESC_MED_L
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_PRESC_MED_R _' || indx
                  ,value_in => rows_in(indx).FLG_PRESC_MED_R
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_PRESCRIPTION _' || indx
                  ,value_in => rows_in(indx).FLG_PRESCRIPTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'AWARENESS'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN AWARENESS_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_episode_in IN AWARENESS.ID_EPISODE%TYPE,
      id_patient_in IN AWARENESS.ID_PATIENT%TYPE,
      flg_episode_in IN AWARENESS.FLG_EPISODE%TYPE DEFAULT NULL,
      FLG_EPISODE_nin IN BOOLEAN := TRUE,
      flg_pat_allergy_in IN AWARENESS.FLG_PAT_ALLERGY%TYPE DEFAULT NULL,
      FLG_PAT_ALLERGY_nin IN BOOLEAN := TRUE,
      flg_pat_habit_in IN AWARENESS.FLG_PAT_HABIT%TYPE DEFAULT NULL,
      FLG_PAT_HABIT_nin IN BOOLEAN := TRUE,
      flg_pat_history_diagnosis_in IN AWARENESS.FLG_PAT_HISTORY_DIAGNOSIS%TYPE DEFAULT NULL,
      FLG_PAT_HISTORY_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      flg_vital_sign_read_in IN AWARENESS.FLG_VITAL_SIGN_READ%TYPE DEFAULT NULL,
      FLG_VITAL_SIGN_READ_nin IN BOOLEAN := TRUE,
      flg_epis_diagnosis_in IN AWARENESS.FLG_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      FLG_EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      flg_analysis_req_in IN AWARENESS.FLG_ANALYSIS_REQ%TYPE DEFAULT NULL,
      FLG_ANALYSIS_REQ_nin IN BOOLEAN := TRUE,
      flg_exam_req_in IN AWARENESS.FLG_EXAM_REQ%TYPE DEFAULT NULL,
      FLG_EXAM_REQ_nin IN BOOLEAN := TRUE,
      flg_drug_prescription_in IN AWARENESS.FLG_DRUG_PRESCRIPTION%TYPE DEFAULT NULL,
      FLG_DRUG_PRESCRIPTION_nin IN BOOLEAN := TRUE,
      flg_drug_req_in IN AWARENESS.FLG_DRUG_REQ%TYPE DEFAULT NULL,
      FLG_DRUG_REQ_nin IN BOOLEAN := TRUE,
      flg_interv_prescription_in IN AWARENESS.FLG_INTERV_PRESCRIPTION%TYPE DEFAULT NULL,
      FLG_INTERV_PRESCRIPTION_nin IN BOOLEAN := TRUE,
      flg_nurse_activity_req_in IN AWARENESS.FLG_NURSE_ACTIVITY_REQ%TYPE DEFAULT NULL,
      FLG_NURSE_ACTIVITY_REQ_nin IN BOOLEAN := TRUE,
      flg_monitorization_in IN AWARENESS.FLG_MONITORIZATION%TYPE DEFAULT NULL,
      FLG_MONITORIZATION_nin IN BOOLEAN := TRUE,
      flg_icnp_epis_diagnosis_in IN AWARENESS.FLG_ICNP_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      FLG_ICNP_EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      flg_icnp_epis_intervention_in IN AWARENESS.FLG_ICNP_EPIS_INTERVENTION%TYPE DEFAULT NULL,
      FLG_ICNP_EPIS_INTERVENTION_nin IN BOOLEAN := TRUE,
      flg_pat_pregnancy_in IN AWARENESS.FLG_PAT_PREGNANCY%TYPE DEFAULT NULL,
      FLG_PAT_PREGNANCY_nin IN BOOLEAN := TRUE,
      flg_sys_alert_det_in IN AWARENESS.FLG_SYS_ALERT_DET%TYPE DEFAULT NULL,
      FLG_SYS_ALERT_DET_nin IN BOOLEAN := TRUE,
      create_user_in IN AWARENESS.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN AWARENESS.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN AWARENESS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN AWARENESS.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN AWARENESS.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN AWARENESS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_visit_in IN AWARENESS.ID_VISIT%TYPE DEFAULT NULL,
      ID_VISIT_nin IN BOOLEAN := TRUE,
      flg_presc_med_in IN AWARENESS.FLG_PRESC_MED%TYPE DEFAULT NULL,
      FLG_PRESC_MED_nin IN BOOLEAN := TRUE,
      flg_presc_med_e_in IN AWARENESS.FLG_PRESC_MED_E%TYPE DEFAULT NULL,
      FLG_PRESC_MED_E_nin IN BOOLEAN := TRUE,
      flg_presc_med_iv_in IN AWARENESS.FLG_PRESC_MED_IV%TYPE DEFAULT NULL,
      FLG_PRESC_MED_IV_nin IN BOOLEAN := TRUE,
      flg_presc_med_l_in IN AWARENESS.FLG_PRESC_MED_L%TYPE DEFAULT NULL,
      FLG_PRESC_MED_L_nin IN BOOLEAN := TRUE,
      flg_presc_med_r_in IN AWARENESS.FLG_PRESC_MED_R%TYPE DEFAULT NULL,
      FLG_PRESC_MED_R_nin IN BOOLEAN := TRUE,
      flg_prescription_in IN AWARENESS.FLG_PRESCRIPTION%TYPE DEFAULT NULL,
      FLG_PRESCRIPTION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_FLG_EPISODE_n NUMBER(1);
   l_FLG_PAT_ALLERGY_n NUMBER(1);
   l_FLG_PAT_HABIT_n NUMBER(1);
   l_FLG_PAT_HISTORY_DIAGNOSIS_n NUMBER(1);
   l_FLG_VITAL_SIGN_READ_n NUMBER(1);
   l_FLG_EPIS_DIAGNOSIS_n NUMBER(1);
   l_FLG_ANALYSIS_REQ_n NUMBER(1);
   l_FLG_EXAM_REQ_n NUMBER(1);
   l_FLG_DRUG_PRESCRIPTION_n NUMBER(1);
   l_FLG_DRUG_REQ_n NUMBER(1);
   l_FLG_INTERV_PRESCRIPTION_n NUMBER(1);
   l_FLG_NURSE_ACTIVITY_REQ_n NUMBER(1);
   l_FLG_MONITORIZATION_n NUMBER(1);
   l_FLG_ICNP_EPIS_DIAGNOSIS_n NUMBER(1);
   l_FLG_ICNP_EPIS_INTERVENTION_n NUMBER(1);
   l_FLG_PAT_PREGNANCY_n NUMBER(1);
   l_FLG_SYS_ALERT_DET_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_VISIT_n NUMBER(1);
   l_FLG_PRESC_MED_n NUMBER(1);
   l_FLG_PRESC_MED_E_n NUMBER(1);
   l_FLG_PRESC_MED_IV_n NUMBER(1);
   l_FLG_PRESC_MED_L_n NUMBER(1);
   l_FLG_PRESC_MED_R_n NUMBER(1);
   l_FLG_PRESCRIPTION_n NUMBER(1);
   BEGIN

   l_FLG_EPISODE_n := sys.diutil.bool_to_int(FLG_EPISODE_nin);
   l_FLG_PAT_ALLERGY_n := sys.diutil.bool_to_int(FLG_PAT_ALLERGY_nin);
   l_FLG_PAT_HABIT_n := sys.diutil.bool_to_int(FLG_PAT_HABIT_nin);
   l_FLG_PAT_HISTORY_DIAGNOSIS_n := sys.diutil.bool_to_int(FLG_PAT_HISTORY_DIAGNOSIS_nin);
   l_FLG_VITAL_SIGN_READ_n := sys.diutil.bool_to_int(FLG_VITAL_SIGN_READ_nin);
   l_FLG_EPIS_DIAGNOSIS_n := sys.diutil.bool_to_int(FLG_EPIS_DIAGNOSIS_nin);
   l_FLG_ANALYSIS_REQ_n := sys.diutil.bool_to_int(FLG_ANALYSIS_REQ_nin);
   l_FLG_EXAM_REQ_n := sys.diutil.bool_to_int(FLG_EXAM_REQ_nin);
   l_FLG_DRUG_PRESCRIPTION_n := sys.diutil.bool_to_int(FLG_DRUG_PRESCRIPTION_nin);
   l_FLG_DRUG_REQ_n := sys.diutil.bool_to_int(FLG_DRUG_REQ_nin);
   l_FLG_INTERV_PRESCRIPTION_n := sys.diutil.bool_to_int(FLG_INTERV_PRESCRIPTION_nin);
   l_FLG_NURSE_ACTIVITY_REQ_n := sys.diutil.bool_to_int(FLG_NURSE_ACTIVITY_REQ_nin);
   l_FLG_MONITORIZATION_n := sys.diutil.bool_to_int(FLG_MONITORIZATION_nin);
   l_FLG_ICNP_EPIS_DIAGNOSIS_n := sys.diutil.bool_to_int(FLG_ICNP_EPIS_DIAGNOSIS_nin);
   l_FLG_ICNP_EPIS_INTERVENTION_n := sys.diutil.bool_to_int(FLG_ICNP_EPIS_INTERVENTION_nin);
   l_FLG_PAT_PREGNANCY_n := sys.diutil.bool_to_int(FLG_PAT_PREGNANCY_nin);
   l_FLG_SYS_ALERT_DET_n := sys.diutil.bool_to_int(FLG_SYS_ALERT_DET_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_ID_VISIT_n := sys.diutil.bool_to_int(ID_VISIT_nin);
   l_FLG_PRESC_MED_n := sys.diutil.bool_to_int(FLG_PRESC_MED_nin);
   l_FLG_PRESC_MED_E_n := sys.diutil.bool_to_int(FLG_PRESC_MED_E_nin);
   l_FLG_PRESC_MED_IV_n := sys.diutil.bool_to_int(FLG_PRESC_MED_IV_nin);
   l_FLG_PRESC_MED_L_n := sys.diutil.bool_to_int(FLG_PRESC_MED_L_nin);
   l_FLG_PRESC_MED_R_n := sys.diutil.bool_to_int(FLG_PRESC_MED_R_nin);
   l_FLG_PRESCRIPTION_n := sys.diutil.bool_to_int(FLG_PRESCRIPTION_nin);


         UPDATE AWARENESS SET
     FLG_EPISODE = decode (l_FLG_EPISODE_n,0,flg_episode_in, NVL (flg_episode_in, FLG_EPISODE)),
     FLG_PAT_ALLERGY = decode (l_FLG_PAT_ALLERGY_n,0,flg_pat_allergy_in, NVL (flg_pat_allergy_in, FLG_PAT_ALLERGY)),
     FLG_PAT_HABIT = decode (l_FLG_PAT_HABIT_n,0,flg_pat_habit_in, NVL (flg_pat_habit_in, FLG_PAT_HABIT)),
     FLG_PAT_HISTORY_DIAGNOSIS = decode (l_FLG_PAT_HISTORY_DIAGNOSIS_n,0,flg_pat_history_diagnosis_in, NVL (flg_pat_history_diagnosis_in, FLG_PAT_HISTORY_DIAGNOSIS)),
     FLG_VITAL_SIGN_READ = decode (l_FLG_VITAL_SIGN_READ_n,0,flg_vital_sign_read_in, NVL (flg_vital_sign_read_in, FLG_VITAL_SIGN_READ)),
     FLG_EPIS_DIAGNOSIS = decode (l_FLG_EPIS_DIAGNOSIS_n,0,flg_epis_diagnosis_in, NVL (flg_epis_diagnosis_in, FLG_EPIS_DIAGNOSIS)),
     FLG_ANALYSIS_REQ = decode (l_FLG_ANALYSIS_REQ_n,0,flg_analysis_req_in, NVL (flg_analysis_req_in, FLG_ANALYSIS_REQ)),
     FLG_EXAM_REQ = decode (l_FLG_EXAM_REQ_n,0,flg_exam_req_in, NVL (flg_exam_req_in, FLG_EXAM_REQ)),
     FLG_DRUG_PRESCRIPTION = decode (l_FLG_DRUG_PRESCRIPTION_n,0,flg_drug_prescription_in, NVL (flg_drug_prescription_in, FLG_DRUG_PRESCRIPTION)),
     FLG_DRUG_REQ = decode (l_FLG_DRUG_REQ_n,0,flg_drug_req_in, NVL (flg_drug_req_in, FLG_DRUG_REQ)),
     FLG_INTERV_PRESCRIPTION = decode (l_FLG_INTERV_PRESCRIPTION_n,0,flg_interv_prescription_in, NVL (flg_interv_prescription_in, FLG_INTERV_PRESCRIPTION)),
     FLG_NURSE_ACTIVITY_REQ = decode (l_FLG_NURSE_ACTIVITY_REQ_n,0,flg_nurse_activity_req_in, NVL (flg_nurse_activity_req_in, FLG_NURSE_ACTIVITY_REQ)),
     FLG_MONITORIZATION = decode (l_FLG_MONITORIZATION_n,0,flg_monitorization_in, NVL (flg_monitorization_in, FLG_MONITORIZATION)),
     FLG_ICNP_EPIS_DIAGNOSIS = decode (l_FLG_ICNP_EPIS_DIAGNOSIS_n,0,flg_icnp_epis_diagnosis_in, NVL (flg_icnp_epis_diagnosis_in, FLG_ICNP_EPIS_DIAGNOSIS)),
     FLG_ICNP_EPIS_INTERVENTION = decode (l_FLG_ICNP_EPIS_INTERVENTION_n,0,flg_icnp_epis_intervention_in, NVL (flg_icnp_epis_intervention_in, FLG_ICNP_EPIS_INTERVENTION)),
     FLG_PAT_PREGNANCY = decode (l_FLG_PAT_PREGNANCY_n,0,flg_pat_pregnancy_in, NVL (flg_pat_pregnancy_in, FLG_PAT_PREGNANCY)),
     FLG_SYS_ALERT_DET = decode (l_FLG_SYS_ALERT_DET_n,0,flg_sys_alert_det_in, NVL (flg_sys_alert_det_in, FLG_SYS_ALERT_DET)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     ID_VISIT = decode (l_ID_VISIT_n,0,id_visit_in, NVL (id_visit_in, ID_VISIT)),
     FLG_PRESC_MED = decode (l_FLG_PRESC_MED_n,0,flg_presc_med_in, NVL (flg_presc_med_in, FLG_PRESC_MED)),
     FLG_PRESC_MED_E = decode (l_FLG_PRESC_MED_E_n,0,flg_presc_med_e_in, NVL (flg_presc_med_e_in, FLG_PRESC_MED_E)),
     FLG_PRESC_MED_IV = decode (l_FLG_PRESC_MED_IV_n,0,flg_presc_med_iv_in, NVL (flg_presc_med_iv_in, FLG_PRESC_MED_IV)),
     FLG_PRESC_MED_L = decode (l_FLG_PRESC_MED_L_n,0,flg_presc_med_l_in, NVL (flg_presc_med_l_in, FLG_PRESC_MED_L)),
     FLG_PRESC_MED_R = decode (l_FLG_PRESC_MED_R_n,0,flg_presc_med_r_in, NVL (flg_presc_med_r_in, FLG_PRESC_MED_R)),
     FLG_PRESCRIPTION = decode (l_FLG_PRESCRIPTION_n,0,flg_prescription_in, NVL (flg_prescription_in, FLG_PRESCRIPTION))
          WHERE
             ID_EPISODE = id_episode_in AND
             ID_PATIENT = id_patient_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'AWARENESS');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_episode_in IN AWARENESS.ID_EPISODE%TYPE,
      id_patient_in IN AWARENESS.ID_PATIENT%TYPE,
      flg_episode_in IN AWARENESS.FLG_EPISODE%TYPE DEFAULT NULL,
      FLG_EPISODE_nin IN BOOLEAN := TRUE,
      flg_pat_allergy_in IN AWARENESS.FLG_PAT_ALLERGY%TYPE DEFAULT NULL,
      FLG_PAT_ALLERGY_nin IN BOOLEAN := TRUE,
      flg_pat_habit_in IN AWARENESS.FLG_PAT_HABIT%TYPE DEFAULT NULL,
      FLG_PAT_HABIT_nin IN BOOLEAN := TRUE,
      flg_pat_history_diagnosis_in IN AWARENESS.FLG_PAT_HISTORY_DIAGNOSIS%TYPE DEFAULT NULL,
      FLG_PAT_HISTORY_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      flg_vital_sign_read_in IN AWARENESS.FLG_VITAL_SIGN_READ%TYPE DEFAULT NULL,
      FLG_VITAL_SIGN_READ_nin IN BOOLEAN := TRUE,
      flg_epis_diagnosis_in IN AWARENESS.FLG_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      FLG_EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      flg_analysis_req_in IN AWARENESS.FLG_ANALYSIS_REQ%TYPE DEFAULT NULL,
      FLG_ANALYSIS_REQ_nin IN BOOLEAN := TRUE,
      flg_exam_req_in IN AWARENESS.FLG_EXAM_REQ%TYPE DEFAULT NULL,
      FLG_EXAM_REQ_nin IN BOOLEAN := TRUE,
      flg_drug_prescription_in IN AWARENESS.FLG_DRUG_PRESCRIPTION%TYPE DEFAULT NULL,
      FLG_DRUG_PRESCRIPTION_nin IN BOOLEAN := TRUE,
      flg_drug_req_in IN AWARENESS.FLG_DRUG_REQ%TYPE DEFAULT NULL,
      FLG_DRUG_REQ_nin IN BOOLEAN := TRUE,
      flg_interv_prescription_in IN AWARENESS.FLG_INTERV_PRESCRIPTION%TYPE DEFAULT NULL,
      FLG_INTERV_PRESCRIPTION_nin IN BOOLEAN := TRUE,
      flg_nurse_activity_req_in IN AWARENESS.FLG_NURSE_ACTIVITY_REQ%TYPE DEFAULT NULL,
      FLG_NURSE_ACTIVITY_REQ_nin IN BOOLEAN := TRUE,
      flg_monitorization_in IN AWARENESS.FLG_MONITORIZATION%TYPE DEFAULT NULL,
      FLG_MONITORIZATION_nin IN BOOLEAN := TRUE,
      flg_icnp_epis_diagnosis_in IN AWARENESS.FLG_ICNP_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      FLG_ICNP_EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      flg_icnp_epis_intervention_in IN AWARENESS.FLG_ICNP_EPIS_INTERVENTION%TYPE DEFAULT NULL,
      FLG_ICNP_EPIS_INTERVENTION_nin IN BOOLEAN := TRUE,
      flg_pat_pregnancy_in IN AWARENESS.FLG_PAT_PREGNANCY%TYPE DEFAULT NULL,
      FLG_PAT_PREGNANCY_nin IN BOOLEAN := TRUE,
      flg_sys_alert_det_in IN AWARENESS.FLG_SYS_ALERT_DET%TYPE DEFAULT NULL,
      FLG_SYS_ALERT_DET_nin IN BOOLEAN := TRUE,
      create_user_in IN AWARENESS.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN AWARENESS.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN AWARENESS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN AWARENESS.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN AWARENESS.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN AWARENESS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_visit_in IN AWARENESS.ID_VISIT%TYPE DEFAULT NULL,
      ID_VISIT_nin IN BOOLEAN := TRUE,
      flg_presc_med_in IN AWARENESS.FLG_PRESC_MED%TYPE DEFAULT NULL,
      FLG_PRESC_MED_nin IN BOOLEAN := TRUE,
      flg_presc_med_e_in IN AWARENESS.FLG_PRESC_MED_E%TYPE DEFAULT NULL,
      FLG_PRESC_MED_E_nin IN BOOLEAN := TRUE,
      flg_presc_med_iv_in IN AWARENESS.FLG_PRESC_MED_IV%TYPE DEFAULT NULL,
      FLG_PRESC_MED_IV_nin IN BOOLEAN := TRUE,
      flg_presc_med_l_in IN AWARENESS.FLG_PRESC_MED_L%TYPE DEFAULT NULL,
      FLG_PRESC_MED_L_nin IN BOOLEAN := TRUE,
      flg_presc_med_r_in IN AWARENESS.FLG_PRESC_MED_R%TYPE DEFAULT NULL,
      FLG_PRESC_MED_R_nin IN BOOLEAN := TRUE,
      flg_prescription_in IN AWARENESS.FLG_PRESCRIPTION%TYPE DEFAULT NULL,
      FLG_PRESCRIPTION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_episode_in => id_episode_in,
      id_patient_in => id_patient_in,
      flg_episode_in => flg_episode_in,
      FLG_EPISODE_nin => FLG_EPISODE_nin,
      flg_pat_allergy_in => flg_pat_allergy_in,
      FLG_PAT_ALLERGY_nin => FLG_PAT_ALLERGY_nin,
      flg_pat_habit_in => flg_pat_habit_in,
      FLG_PAT_HABIT_nin => FLG_PAT_HABIT_nin,
      flg_pat_history_diagnosis_in => flg_pat_history_diagnosis_in,
      FLG_PAT_HISTORY_DIAGNOSIS_nin => FLG_PAT_HISTORY_DIAGNOSIS_nin,
      flg_vital_sign_read_in => flg_vital_sign_read_in,
      FLG_VITAL_SIGN_READ_nin => FLG_VITAL_SIGN_READ_nin,
      flg_epis_diagnosis_in => flg_epis_diagnosis_in,
      FLG_EPIS_DIAGNOSIS_nin => FLG_EPIS_DIAGNOSIS_nin,
      flg_analysis_req_in => flg_analysis_req_in,
      FLG_ANALYSIS_REQ_nin => FLG_ANALYSIS_REQ_nin,
      flg_exam_req_in => flg_exam_req_in,
      FLG_EXAM_REQ_nin => FLG_EXAM_REQ_nin,
      flg_drug_prescription_in => flg_drug_prescription_in,
      FLG_DRUG_PRESCRIPTION_nin => FLG_DRUG_PRESCRIPTION_nin,
      flg_drug_req_in => flg_drug_req_in,
      FLG_DRUG_REQ_nin => FLG_DRUG_REQ_nin,
      flg_interv_prescription_in => flg_interv_prescription_in,
      FLG_INTERV_PRESCRIPTION_nin => FLG_INTERV_PRESCRIPTION_nin,
      flg_nurse_activity_req_in => flg_nurse_activity_req_in,
      FLG_NURSE_ACTIVITY_REQ_nin => FLG_NURSE_ACTIVITY_REQ_nin,
      flg_monitorization_in => flg_monitorization_in,
      FLG_MONITORIZATION_nin => FLG_MONITORIZATION_nin,
      flg_icnp_epis_diagnosis_in => flg_icnp_epis_diagnosis_in,
      FLG_ICNP_EPIS_DIAGNOSIS_nin => FLG_ICNP_EPIS_DIAGNOSIS_nin,
      flg_icnp_epis_intervention_in => flg_icnp_epis_intervention_in,
      FLG_ICNP_EPIS_INTERVENTION_nin => FLG_ICNP_EPIS_INTERVENTION_nin,
      flg_pat_pregnancy_in => flg_pat_pregnancy_in,
      FLG_PAT_PREGNANCY_nin => FLG_PAT_PREGNANCY_nin,
      flg_sys_alert_det_in => flg_sys_alert_det_in,
      FLG_SYS_ALERT_DET_nin => FLG_SYS_ALERT_DET_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_visit_in => id_visit_in,
      ID_VISIT_nin => ID_VISIT_nin,
      flg_presc_med_in => flg_presc_med_in,
      FLG_PRESC_MED_nin => FLG_PRESC_MED_nin,
      flg_presc_med_e_in => flg_presc_med_e_in,
      FLG_PRESC_MED_E_nin => FLG_PRESC_MED_E_nin,
      flg_presc_med_iv_in => flg_presc_med_iv_in,
      FLG_PRESC_MED_IV_nin => FLG_PRESC_MED_IV_nin,
      flg_presc_med_l_in => flg_presc_med_l_in,
      FLG_PRESC_MED_L_nin => FLG_PRESC_MED_L_nin,
      flg_presc_med_r_in => flg_presc_med_r_in,
      FLG_PRESC_MED_R_nin => FLG_PRESC_MED_R_nin,
      flg_prescription_in => flg_prescription_in,
      FLG_PRESCRIPTION_nin => FLG_PRESCRIPTION_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      flg_episode_in IN AWARENESS.FLG_EPISODE%TYPE DEFAULT NULL,
      FLG_EPISODE_nin IN BOOLEAN := TRUE,
      flg_pat_allergy_in IN AWARENESS.FLG_PAT_ALLERGY%TYPE DEFAULT NULL,
      FLG_PAT_ALLERGY_nin IN BOOLEAN := TRUE,
      flg_pat_habit_in IN AWARENESS.FLG_PAT_HABIT%TYPE DEFAULT NULL,
      FLG_PAT_HABIT_nin IN BOOLEAN := TRUE,
      flg_pat_history_diagnosis_in IN AWARENESS.FLG_PAT_HISTORY_DIAGNOSIS%TYPE DEFAULT NULL,
      FLG_PAT_HISTORY_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      flg_vital_sign_read_in IN AWARENESS.FLG_VITAL_SIGN_READ%TYPE DEFAULT NULL,
      FLG_VITAL_SIGN_READ_nin IN BOOLEAN := TRUE,
      flg_epis_diagnosis_in IN AWARENESS.FLG_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      FLG_EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      flg_analysis_req_in IN AWARENESS.FLG_ANALYSIS_REQ%TYPE DEFAULT NULL,
      FLG_ANALYSIS_REQ_nin IN BOOLEAN := TRUE,
      flg_exam_req_in IN AWARENESS.FLG_EXAM_REQ%TYPE DEFAULT NULL,
      FLG_EXAM_REQ_nin IN BOOLEAN := TRUE,
      flg_drug_prescription_in IN AWARENESS.FLG_DRUG_PRESCRIPTION%TYPE DEFAULT NULL,
      FLG_DRUG_PRESCRIPTION_nin IN BOOLEAN := TRUE,
      flg_drug_req_in IN AWARENESS.FLG_DRUG_REQ%TYPE DEFAULT NULL,
      FLG_DRUG_REQ_nin IN BOOLEAN := TRUE,
      flg_interv_prescription_in IN AWARENESS.FLG_INTERV_PRESCRIPTION%TYPE DEFAULT NULL,
      FLG_INTERV_PRESCRIPTION_nin IN BOOLEAN := TRUE,
      flg_nurse_activity_req_in IN AWARENESS.FLG_NURSE_ACTIVITY_REQ%TYPE DEFAULT NULL,
      FLG_NURSE_ACTIVITY_REQ_nin IN BOOLEAN := TRUE,
      flg_monitorization_in IN AWARENESS.FLG_MONITORIZATION%TYPE DEFAULT NULL,
      FLG_MONITORIZATION_nin IN BOOLEAN := TRUE,
      flg_icnp_epis_diagnosis_in IN AWARENESS.FLG_ICNP_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      FLG_ICNP_EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      flg_icnp_epis_intervention_in IN AWARENESS.FLG_ICNP_EPIS_INTERVENTION%TYPE DEFAULT NULL,
      FLG_ICNP_EPIS_INTERVENTION_nin IN BOOLEAN := TRUE,
      flg_pat_pregnancy_in IN AWARENESS.FLG_PAT_PREGNANCY%TYPE DEFAULT NULL,
      FLG_PAT_PREGNANCY_nin IN BOOLEAN := TRUE,
      flg_sys_alert_det_in IN AWARENESS.FLG_SYS_ALERT_DET%TYPE DEFAULT NULL,
      FLG_SYS_ALERT_DET_nin IN BOOLEAN := TRUE,
      create_user_in IN AWARENESS.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN AWARENESS.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN AWARENESS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN AWARENESS.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN AWARENESS.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN AWARENESS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_visit_in IN AWARENESS.ID_VISIT%TYPE DEFAULT NULL,
      ID_VISIT_nin IN BOOLEAN := TRUE,
      flg_presc_med_in IN AWARENESS.FLG_PRESC_MED%TYPE DEFAULT NULL,
      FLG_PRESC_MED_nin IN BOOLEAN := TRUE,
      flg_presc_med_e_in IN AWARENESS.FLG_PRESC_MED_E%TYPE DEFAULT NULL,
      FLG_PRESC_MED_E_nin IN BOOLEAN := TRUE,
      flg_presc_med_iv_in IN AWARENESS.FLG_PRESC_MED_IV%TYPE DEFAULT NULL,
      FLG_PRESC_MED_IV_nin IN BOOLEAN := TRUE,
      flg_presc_med_l_in IN AWARENESS.FLG_PRESC_MED_L%TYPE DEFAULT NULL,
      FLG_PRESC_MED_L_nin IN BOOLEAN := TRUE,
      flg_presc_med_r_in IN AWARENESS.FLG_PRESC_MED_R%TYPE DEFAULT NULL,
      FLG_PRESC_MED_R_nin IN BOOLEAN := TRUE,
      flg_prescription_in IN AWARENESS.FLG_PRESCRIPTION%TYPE DEFAULT NULL,
      FLG_PRESCRIPTION_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_FLG_EPISODE_n NUMBER(1);
   l_FLG_PAT_ALLERGY_n NUMBER(1);
   l_FLG_PAT_HABIT_n NUMBER(1);
   l_FLG_PAT_HISTORY_DIAGNOSIS_n NUMBER(1);
   l_FLG_VITAL_SIGN_READ_n NUMBER(1);
   l_FLG_EPIS_DIAGNOSIS_n NUMBER(1);
   l_FLG_ANALYSIS_REQ_n NUMBER(1);
   l_FLG_EXAM_REQ_n NUMBER(1);
   l_FLG_DRUG_PRESCRIPTION_n NUMBER(1);
   l_FLG_DRUG_REQ_n NUMBER(1);
   l_FLG_INTERV_PRESCRIPTION_n NUMBER(1);
   l_FLG_NURSE_ACTIVITY_REQ_n NUMBER(1);
   l_FLG_MONITORIZATION_n NUMBER(1);
   l_FLG_ICNP_EPIS_DIAGNOSIS_n NUMBER(1);
   l_FLG_ICNP_EPIS_INTERVENTION_n NUMBER(1);
   l_FLG_PAT_PREGNANCY_n NUMBER(1);
   l_FLG_SYS_ALERT_DET_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_VISIT_n NUMBER(1);
   l_FLG_PRESC_MED_n NUMBER(1);
   l_FLG_PRESC_MED_E_n NUMBER(1);
   l_FLG_PRESC_MED_IV_n NUMBER(1);
   l_FLG_PRESC_MED_L_n NUMBER(1);
   l_FLG_PRESC_MED_R_n NUMBER(1);
   l_FLG_PRESCRIPTION_n NUMBER(1);
      id_episode_in AWARENESS.ID_EPISODE%TYPE;
      id_patient_in AWARENESS.ID_PATIENT%TYPE;
   BEGIN



      l_FLG_EPISODE_n := sys.diutil.bool_to_int(FLG_EPISODE_nin);
      l_FLG_PAT_ALLERGY_n := sys.diutil.bool_to_int(FLG_PAT_ALLERGY_nin);
      l_FLG_PAT_HABIT_n := sys.diutil.bool_to_int(FLG_PAT_HABIT_nin);
      l_FLG_PAT_HISTORY_DIAGNOSIS_n := sys.diutil.bool_to_int(FLG_PAT_HISTORY_DIAGNOSIS_nin);
      l_FLG_VITAL_SIGN_READ_n := sys.diutil.bool_to_int(FLG_VITAL_SIGN_READ_nin);
      l_FLG_EPIS_DIAGNOSIS_n := sys.diutil.bool_to_int(FLG_EPIS_DIAGNOSIS_nin);
      l_FLG_ANALYSIS_REQ_n := sys.diutil.bool_to_int(FLG_ANALYSIS_REQ_nin);
      l_FLG_EXAM_REQ_n := sys.diutil.bool_to_int(FLG_EXAM_REQ_nin);
      l_FLG_DRUG_PRESCRIPTION_n := sys.diutil.bool_to_int(FLG_DRUG_PRESCRIPTION_nin);
      l_FLG_DRUG_REQ_n := sys.diutil.bool_to_int(FLG_DRUG_REQ_nin);
      l_FLG_INTERV_PRESCRIPTION_n := sys.diutil.bool_to_int(FLG_INTERV_PRESCRIPTION_nin);
      l_FLG_NURSE_ACTIVITY_REQ_n := sys.diutil.bool_to_int(FLG_NURSE_ACTIVITY_REQ_nin);
      l_FLG_MONITORIZATION_n := sys.diutil.bool_to_int(FLG_MONITORIZATION_nin);
      l_FLG_ICNP_EPIS_DIAGNOSIS_n := sys.diutil.bool_to_int(FLG_ICNP_EPIS_DIAGNOSIS_nin);
      l_FLG_ICNP_EPIS_INTERVENTION_n := sys.diutil.bool_to_int(FLG_ICNP_EPIS_INTERVENTION_nin);
      l_FLG_PAT_PREGNANCY_n := sys.diutil.bool_to_int(FLG_PAT_PREGNANCY_nin);
      l_FLG_SYS_ALERT_DET_n := sys.diutil.bool_to_int(FLG_SYS_ALERT_DET_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_ID_VISIT_n := sys.diutil.bool_to_int(ID_VISIT_nin);
      l_FLG_PRESC_MED_n := sys.diutil.bool_to_int(FLG_PRESC_MED_nin);
      l_FLG_PRESC_MED_E_n := sys.diutil.bool_to_int(FLG_PRESC_MED_E_nin);
      l_FLG_PRESC_MED_IV_n := sys.diutil.bool_to_int(FLG_PRESC_MED_IV_nin);
      l_FLG_PRESC_MED_L_n := sys.diutil.bool_to_int(FLG_PRESC_MED_L_nin);
      l_FLG_PRESC_MED_R_n := sys.diutil.bool_to_int(FLG_PRESC_MED_R_nin);
      l_FLG_PRESCRIPTION_n := sys.diutil.bool_to_int(FLG_PRESCRIPTION_nin);



l_sql := 'UPDATE AWARENESS SET '
     || ' FLG_EPISODE = decode (' || l_FLG_EPISODE_n || ',0,:flg_episode_in, NVL (:flg_episode_in, FLG_EPISODE)) '|| ','
     || ' FLG_PAT_ALLERGY = decode (' || l_FLG_PAT_ALLERGY_n || ',0,:flg_pat_allergy_in, NVL (:flg_pat_allergy_in, FLG_PAT_ALLERGY)) '|| ','
     || ' FLG_PAT_HABIT = decode (' || l_FLG_PAT_HABIT_n || ',0,:flg_pat_habit_in, NVL (:flg_pat_habit_in, FLG_PAT_HABIT)) '|| ','
     || ' FLG_PAT_HISTORY_DIAGNOSIS = decode (' || l_FLG_PAT_HISTORY_DIAGNOSIS_n || ',0,:flg_pat_history_diagnosis_in, NVL (:flg_pat_history_diagnosis_in, FLG_PAT_HISTORY_DIAGNOSIS)) '|| ','
     || ' FLG_VITAL_SIGN_READ = decode (' || l_FLG_VITAL_SIGN_READ_n || ',0,:flg_vital_sign_read_in, NVL (:flg_vital_sign_read_in, FLG_VITAL_SIGN_READ)) '|| ','
     || ' FLG_EPIS_DIAGNOSIS = decode (' || l_FLG_EPIS_DIAGNOSIS_n || ',0,:flg_epis_diagnosis_in, NVL (:flg_epis_diagnosis_in, FLG_EPIS_DIAGNOSIS)) '|| ','
     || ' FLG_ANALYSIS_REQ = decode (' || l_FLG_ANALYSIS_REQ_n || ',0,:flg_analysis_req_in, NVL (:flg_analysis_req_in, FLG_ANALYSIS_REQ)) '|| ','
     || ' FLG_EXAM_REQ = decode (' || l_FLG_EXAM_REQ_n || ',0,:flg_exam_req_in, NVL (:flg_exam_req_in, FLG_EXAM_REQ)) '|| ','
     || ' FLG_DRUG_PRESCRIPTION = decode (' || l_FLG_DRUG_PRESCRIPTION_n || ',0,:flg_drug_prescription_in, NVL (:flg_drug_prescription_in, FLG_DRUG_PRESCRIPTION)) '|| ','
     || ' FLG_DRUG_REQ = decode (' || l_FLG_DRUG_REQ_n || ',0,:flg_drug_req_in, NVL (:flg_drug_req_in, FLG_DRUG_REQ)) '|| ','
     || ' FLG_INTERV_PRESCRIPTION = decode (' || l_FLG_INTERV_PRESCRIPTION_n || ',0,:flg_interv_prescription_in, NVL (:flg_interv_prescription_in, FLG_INTERV_PRESCRIPTION)) '|| ','
     || ' FLG_NURSE_ACTIVITY_REQ = decode (' || l_FLG_NURSE_ACTIVITY_REQ_n || ',0,:flg_nurse_activity_req_in, NVL (:flg_nurse_activity_req_in, FLG_NURSE_ACTIVITY_REQ)) '|| ','
     || ' FLG_MONITORIZATION = decode (' || l_FLG_MONITORIZATION_n || ',0,:flg_monitorization_in, NVL (:flg_monitorization_in, FLG_MONITORIZATION)) '|| ','
     || ' FLG_ICNP_EPIS_DIAGNOSIS = decode (' || l_FLG_ICNP_EPIS_DIAGNOSIS_n || ',0,:flg_icnp_epis_diagnosis_in, NVL (:flg_icnp_epis_diagnosis_in, FLG_ICNP_EPIS_DIAGNOSIS)) '|| ','
     || ' FLG_ICNP_EPIS_INTERVENTION = decode (' || l_FLG_ICNP_EPIS_INTERVENTION_n || ',0,:flg_icnp_epis_intervention_in, NVL (:flg_icnp_epis_intervention_in, FLG_ICNP_EPIS_INTERVENTION)) '|| ','
     || ' FLG_PAT_PREGNANCY = decode (' || l_FLG_PAT_PREGNANCY_n || ',0,:flg_pat_pregnancy_in, NVL (:flg_pat_pregnancy_in, FLG_PAT_PREGNANCY)) '|| ','
     || ' FLG_SYS_ALERT_DET = decode (' || l_FLG_SYS_ALERT_DET_n || ',0,:flg_sys_alert_det_in, NVL (:flg_sys_alert_det_in, FLG_SYS_ALERT_DET)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' ID_VISIT = decode (' || l_ID_VISIT_n || ',0,:id_visit_in, NVL (:id_visit_in, ID_VISIT)) '|| ','
     || ' FLG_PRESC_MED = decode (' || l_FLG_PRESC_MED_n || ',0,:flg_presc_med_in, NVL (:flg_presc_med_in, FLG_PRESC_MED)) '|| ','
     || ' FLG_PRESC_MED_E = decode (' || l_FLG_PRESC_MED_E_n || ',0,:flg_presc_med_e_in, NVL (:flg_presc_med_e_in, FLG_PRESC_MED_E)) '|| ','
     || ' FLG_PRESC_MED_IV = decode (' || l_FLG_PRESC_MED_IV_n || ',0,:flg_presc_med_iv_in, NVL (:flg_presc_med_iv_in, FLG_PRESC_MED_IV)) '|| ','
     || ' FLG_PRESC_MED_L = decode (' || l_FLG_PRESC_MED_L_n || ',0,:flg_presc_med_l_in, NVL (:flg_presc_med_l_in, FLG_PRESC_MED_L)) '|| ','
     || ' FLG_PRESC_MED_R = decode (' || l_FLG_PRESC_MED_R_n || ',0,:flg_presc_med_r_in, NVL (:flg_presc_med_r_in, FLG_PRESC_MED_R)) '|| ','
     || ' FLG_PRESCRIPTION = decode (' || l_FLG_PRESCRIPTION_n || ',0,:flg_prescription_in, NVL (:flg_prescription_in, FLG_PRESCRIPTION)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     flg_episode_in,
     flg_pat_allergy_in,
     flg_pat_habit_in,
     flg_pat_history_diagnosis_in,
     flg_vital_sign_read_in,
     flg_epis_diagnosis_in,
     flg_analysis_req_in,
     flg_exam_req_in,
     flg_drug_prescription_in,
     flg_drug_req_in,
     flg_interv_prescription_in,
     flg_nurse_activity_req_in,
     flg_monitorization_in,
     flg_icnp_epis_diagnosis_in,
     flg_icnp_epis_intervention_in,
     flg_pat_pregnancy_in,
     flg_sys_alert_det_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     id_visit_in,
     flg_presc_med_in,
     flg_presc_med_e_in,
     flg_presc_med_iv_in,
     flg_presc_med_l_in,
     flg_presc_med_r_in,
     flg_prescription_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'AWARENESS');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      flg_episode_in IN AWARENESS.FLG_EPISODE%TYPE DEFAULT NULL,
      FLG_EPISODE_nin IN BOOLEAN := TRUE,
      flg_pat_allergy_in IN AWARENESS.FLG_PAT_ALLERGY%TYPE DEFAULT NULL,
      FLG_PAT_ALLERGY_nin IN BOOLEAN := TRUE,
      flg_pat_habit_in IN AWARENESS.FLG_PAT_HABIT%TYPE DEFAULT NULL,
      FLG_PAT_HABIT_nin IN BOOLEAN := TRUE,
      flg_pat_history_diagnosis_in IN AWARENESS.FLG_PAT_HISTORY_DIAGNOSIS%TYPE DEFAULT NULL,
      FLG_PAT_HISTORY_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      flg_vital_sign_read_in IN AWARENESS.FLG_VITAL_SIGN_READ%TYPE DEFAULT NULL,
      FLG_VITAL_SIGN_READ_nin IN BOOLEAN := TRUE,
      flg_epis_diagnosis_in IN AWARENESS.FLG_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      FLG_EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      flg_analysis_req_in IN AWARENESS.FLG_ANALYSIS_REQ%TYPE DEFAULT NULL,
      FLG_ANALYSIS_REQ_nin IN BOOLEAN := TRUE,
      flg_exam_req_in IN AWARENESS.FLG_EXAM_REQ%TYPE DEFAULT NULL,
      FLG_EXAM_REQ_nin IN BOOLEAN := TRUE,
      flg_drug_prescription_in IN AWARENESS.FLG_DRUG_PRESCRIPTION%TYPE DEFAULT NULL,
      FLG_DRUG_PRESCRIPTION_nin IN BOOLEAN := TRUE,
      flg_drug_req_in IN AWARENESS.FLG_DRUG_REQ%TYPE DEFAULT NULL,
      FLG_DRUG_REQ_nin IN BOOLEAN := TRUE,
      flg_interv_prescription_in IN AWARENESS.FLG_INTERV_PRESCRIPTION%TYPE DEFAULT NULL,
      FLG_INTERV_PRESCRIPTION_nin IN BOOLEAN := TRUE,
      flg_nurse_activity_req_in IN AWARENESS.FLG_NURSE_ACTIVITY_REQ%TYPE DEFAULT NULL,
      FLG_NURSE_ACTIVITY_REQ_nin IN BOOLEAN := TRUE,
      flg_monitorization_in IN AWARENESS.FLG_MONITORIZATION%TYPE DEFAULT NULL,
      FLG_MONITORIZATION_nin IN BOOLEAN := TRUE,
      flg_icnp_epis_diagnosis_in IN AWARENESS.FLG_ICNP_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      FLG_ICNP_EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      flg_icnp_epis_intervention_in IN AWARENESS.FLG_ICNP_EPIS_INTERVENTION%TYPE DEFAULT NULL,
      FLG_ICNP_EPIS_INTERVENTION_nin IN BOOLEAN := TRUE,
      flg_pat_pregnancy_in IN AWARENESS.FLG_PAT_PREGNANCY%TYPE DEFAULT NULL,
      FLG_PAT_PREGNANCY_nin IN BOOLEAN := TRUE,
      flg_sys_alert_det_in IN AWARENESS.FLG_SYS_ALERT_DET%TYPE DEFAULT NULL,
      FLG_SYS_ALERT_DET_nin IN BOOLEAN := TRUE,
      create_user_in IN AWARENESS.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN AWARENESS.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN AWARENESS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN AWARENESS.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN AWARENESS.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN AWARENESS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_visit_in IN AWARENESS.ID_VISIT%TYPE DEFAULT NULL,
      ID_VISIT_nin IN BOOLEAN := TRUE,
      flg_presc_med_in IN AWARENESS.FLG_PRESC_MED%TYPE DEFAULT NULL,
      FLG_PRESC_MED_nin IN BOOLEAN := TRUE,
      flg_presc_med_e_in IN AWARENESS.FLG_PRESC_MED_E%TYPE DEFAULT NULL,
      FLG_PRESC_MED_E_nin IN BOOLEAN := TRUE,
      flg_presc_med_iv_in IN AWARENESS.FLG_PRESC_MED_IV%TYPE DEFAULT NULL,
      FLG_PRESC_MED_IV_nin IN BOOLEAN := TRUE,
      flg_presc_med_l_in IN AWARENESS.FLG_PRESC_MED_L%TYPE DEFAULT NULL,
      FLG_PRESC_MED_L_nin IN BOOLEAN := TRUE,
      flg_presc_med_r_in IN AWARENESS.FLG_PRESC_MED_R%TYPE DEFAULT NULL,
      FLG_PRESC_MED_R_nin IN BOOLEAN := TRUE,
      flg_prescription_in IN AWARENESS.FLG_PRESCRIPTION%TYPE DEFAULT NULL,
      FLG_PRESCRIPTION_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      flg_episode_in => flg_episode_in,
      FLG_EPISODE_nin => FLG_EPISODE_nin,
      flg_pat_allergy_in => flg_pat_allergy_in,
      FLG_PAT_ALLERGY_nin => FLG_PAT_ALLERGY_nin,
      flg_pat_habit_in => flg_pat_habit_in,
      FLG_PAT_HABIT_nin => FLG_PAT_HABIT_nin,
      flg_pat_history_diagnosis_in => flg_pat_history_diagnosis_in,
      FLG_PAT_HISTORY_DIAGNOSIS_nin => FLG_PAT_HISTORY_DIAGNOSIS_nin,
      flg_vital_sign_read_in => flg_vital_sign_read_in,
      FLG_VITAL_SIGN_READ_nin => FLG_VITAL_SIGN_READ_nin,
      flg_epis_diagnosis_in => flg_epis_diagnosis_in,
      FLG_EPIS_DIAGNOSIS_nin => FLG_EPIS_DIAGNOSIS_nin,
      flg_analysis_req_in => flg_analysis_req_in,
      FLG_ANALYSIS_REQ_nin => FLG_ANALYSIS_REQ_nin,
      flg_exam_req_in => flg_exam_req_in,
      FLG_EXAM_REQ_nin => FLG_EXAM_REQ_nin,
      flg_drug_prescription_in => flg_drug_prescription_in,
      FLG_DRUG_PRESCRIPTION_nin => FLG_DRUG_PRESCRIPTION_nin,
      flg_drug_req_in => flg_drug_req_in,
      FLG_DRUG_REQ_nin => FLG_DRUG_REQ_nin,
      flg_interv_prescription_in => flg_interv_prescription_in,
      FLG_INTERV_PRESCRIPTION_nin => FLG_INTERV_PRESCRIPTION_nin,
      flg_nurse_activity_req_in => flg_nurse_activity_req_in,
      FLG_NURSE_ACTIVITY_REQ_nin => FLG_NURSE_ACTIVITY_REQ_nin,
      flg_monitorization_in => flg_monitorization_in,
      FLG_MONITORIZATION_nin => FLG_MONITORIZATION_nin,
      flg_icnp_epis_diagnosis_in => flg_icnp_epis_diagnosis_in,
      FLG_ICNP_EPIS_DIAGNOSIS_nin => FLG_ICNP_EPIS_DIAGNOSIS_nin,
      flg_icnp_epis_intervention_in => flg_icnp_epis_intervention_in,
      FLG_ICNP_EPIS_INTERVENTION_nin => FLG_ICNP_EPIS_INTERVENTION_nin,
      flg_pat_pregnancy_in => flg_pat_pregnancy_in,
      FLG_PAT_PREGNANCY_nin => FLG_PAT_PREGNANCY_nin,
      flg_sys_alert_det_in => flg_sys_alert_det_in,
      FLG_SYS_ALERT_DET_nin => FLG_SYS_ALERT_DET_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_visit_in => id_visit_in,
      ID_VISIT_nin => ID_VISIT_nin,
      flg_presc_med_in => flg_presc_med_in,
      FLG_PRESC_MED_nin => FLG_PRESC_MED_nin,
      flg_presc_med_e_in => flg_presc_med_e_in,
      FLG_PRESC_MED_E_nin => FLG_PRESC_MED_E_nin,
      flg_presc_med_iv_in => flg_presc_med_iv_in,
      FLG_PRESC_MED_IV_nin => FLG_PRESC_MED_IV_nin,
      flg_presc_med_l_in => flg_presc_med_l_in,
      FLG_PRESC_MED_L_nin => FLG_PRESC_MED_L_nin,
      flg_presc_med_r_in => flg_presc_med_r_in,
      FLG_PRESC_MED_R_nin => FLG_PRESC_MED_R_nin,
      flg_prescription_in => flg_prescription_in,
      FLG_PRESCRIPTION_nin => FLG_PRESCRIPTION_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN AWARENESS%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_patient_in => rec_in.ID_PATIENT,
         id_episode_in => rec_in.ID_EPISODE,
         flg_episode_in => rec_in.FLG_EPISODE,
         flg_pat_allergy_in => rec_in.FLG_PAT_ALLERGY,
         flg_pat_habit_in => rec_in.FLG_PAT_HABIT,
         flg_pat_history_diagnosis_in => rec_in.FLG_PAT_HISTORY_DIAGNOSIS,
         flg_vital_sign_read_in => rec_in.FLG_VITAL_SIGN_READ,
         flg_epis_diagnosis_in => rec_in.FLG_EPIS_DIAGNOSIS,
         flg_analysis_req_in => rec_in.FLG_ANALYSIS_REQ,
         flg_exam_req_in => rec_in.FLG_EXAM_REQ,
         flg_drug_prescription_in => rec_in.FLG_DRUG_PRESCRIPTION,
         flg_drug_req_in => rec_in.FLG_DRUG_REQ,
         flg_interv_prescription_in => rec_in.FLG_INTERV_PRESCRIPTION,
         flg_nurse_activity_req_in => rec_in.FLG_NURSE_ACTIVITY_REQ,
         flg_monitorization_in => rec_in.FLG_MONITORIZATION,
         flg_icnp_epis_diagnosis_in => rec_in.FLG_ICNP_EPIS_DIAGNOSIS,
         flg_icnp_epis_intervention_in => rec_in.FLG_ICNP_EPIS_INTERVENTION,
         flg_pat_pregnancy_in => rec_in.FLG_PAT_PREGNANCY,
         flg_sys_alert_det_in => rec_in.FLG_SYS_ALERT_DET,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_visit_in => rec_in.ID_VISIT,
         flg_presc_med_in => rec_in.FLG_PRESC_MED,
         flg_presc_med_e_in => rec_in.FLG_PRESC_MED_E,
         flg_presc_med_iv_in => rec_in.FLG_PRESC_MED_IV,
         flg_presc_med_l_in => rec_in.FLG_PRESC_MED_L,
         flg_presc_med_r_in => rec_in.FLG_PRESC_MED_R,
         flg_prescription_in => rec_in.FLG_PRESCRIPTION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN AWARENESS%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_patient_in => rec_in.ID_PATIENT,
         id_episode_in => rec_in.ID_EPISODE,
         flg_episode_in => rec_in.FLG_EPISODE,
         flg_pat_allergy_in => rec_in.FLG_PAT_ALLERGY,
         flg_pat_habit_in => rec_in.FLG_PAT_HABIT,
         flg_pat_history_diagnosis_in => rec_in.FLG_PAT_HISTORY_DIAGNOSIS,
         flg_vital_sign_read_in => rec_in.FLG_VITAL_SIGN_READ,
         flg_epis_diagnosis_in => rec_in.FLG_EPIS_DIAGNOSIS,
         flg_analysis_req_in => rec_in.FLG_ANALYSIS_REQ,
         flg_exam_req_in => rec_in.FLG_EXAM_REQ,
         flg_drug_prescription_in => rec_in.FLG_DRUG_PRESCRIPTION,
         flg_drug_req_in => rec_in.FLG_DRUG_REQ,
         flg_interv_prescription_in => rec_in.FLG_INTERV_PRESCRIPTION,
         flg_nurse_activity_req_in => rec_in.FLG_NURSE_ACTIVITY_REQ,
         flg_monitorization_in => rec_in.FLG_MONITORIZATION,
         flg_icnp_epis_diagnosis_in => rec_in.FLG_ICNP_EPIS_DIAGNOSIS,
         flg_icnp_epis_intervention_in => rec_in.FLG_ICNP_EPIS_INTERVENTION,
         flg_pat_pregnancy_in => rec_in.FLG_PAT_PREGNANCY,
         flg_sys_alert_det_in => rec_in.FLG_SYS_ALERT_DET,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_visit_in => rec_in.ID_VISIT,
         flg_presc_med_in => rec_in.FLG_PRESC_MED,
         flg_presc_med_e_in => rec_in.FLG_PRESC_MED_E,
         flg_presc_med_iv_in => rec_in.FLG_PRESC_MED_IV,
         flg_presc_med_l_in => rec_in.FLG_PRESC_MED_L,
         flg_presc_med_r_in => rec_in.FLG_PRESC_MED_R,
         flg_prescription_in => rec_in.FLG_PRESCRIPTION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_episode_in IN AWARENESS.ID_EPISODE%TYPE,
      id_patient_in IN AWARENESS.ID_PATIENT%TYPE,
      flg_episode_in IN AWARENESS.FLG_EPISODE%TYPE DEFAULT NULL,
      flg_pat_allergy_in IN AWARENESS.FLG_PAT_ALLERGY%TYPE DEFAULT NULL,
      flg_pat_habit_in IN AWARENESS.FLG_PAT_HABIT%TYPE DEFAULT NULL,
      flg_pat_history_diagnosis_in IN AWARENESS.FLG_PAT_HISTORY_DIAGNOSIS%TYPE DEFAULT NULL,
      flg_vital_sign_read_in IN AWARENESS.FLG_VITAL_SIGN_READ%TYPE DEFAULT NULL,
      flg_epis_diagnosis_in IN AWARENESS.FLG_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      flg_analysis_req_in IN AWARENESS.FLG_ANALYSIS_REQ%TYPE DEFAULT NULL,
      flg_exam_req_in IN AWARENESS.FLG_EXAM_REQ%TYPE DEFAULT NULL,
      flg_drug_prescription_in IN AWARENESS.FLG_DRUG_PRESCRIPTION%TYPE DEFAULT NULL,
      flg_drug_req_in IN AWARENESS.FLG_DRUG_REQ%TYPE DEFAULT NULL,
      flg_interv_prescription_in IN AWARENESS.FLG_INTERV_PRESCRIPTION%TYPE DEFAULT NULL,
      flg_nurse_activity_req_in IN AWARENESS.FLG_NURSE_ACTIVITY_REQ%TYPE DEFAULT NULL,
      flg_monitorization_in IN AWARENESS.FLG_MONITORIZATION%TYPE DEFAULT NULL,
      flg_icnp_epis_diagnosis_in IN AWARENESS.FLG_ICNP_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      flg_icnp_epis_intervention_in IN AWARENESS.FLG_ICNP_EPIS_INTERVENTION%TYPE DEFAULT NULL,
      flg_pat_pregnancy_in IN AWARENESS.FLG_PAT_PREGNANCY%TYPE DEFAULT NULL,
      flg_sys_alert_det_in IN AWARENESS.FLG_SYS_ALERT_DET%TYPE DEFAULT NULL,
      create_user_in IN AWARENESS.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN AWARENESS.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN AWARENESS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN AWARENESS.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN AWARENESS.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN AWARENESS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_visit_in IN AWARENESS.ID_VISIT%TYPE DEFAULT NULL,
      flg_presc_med_in IN AWARENESS.FLG_PRESC_MED%TYPE DEFAULT NULL,
      flg_presc_med_e_in IN AWARENESS.FLG_PRESC_MED_E%TYPE DEFAULT NULL,
      flg_presc_med_iv_in IN AWARENESS.FLG_PRESC_MED_IV%TYPE DEFAULT NULL,
      flg_presc_med_l_in IN AWARENESS.FLG_PRESC_MED_L%TYPE DEFAULT NULL,
      flg_presc_med_r_in IN AWARENESS.FLG_PRESC_MED_R%TYPE DEFAULT NULL,
      flg_prescription_in IN AWARENESS.FLG_PRESCRIPTION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_episode_in => id_episode_in,
         id_patient_in => id_patient_in,
         flg_episode_in => flg_episode_in,
         flg_pat_allergy_in => flg_pat_allergy_in,
         flg_pat_habit_in => flg_pat_habit_in,
         flg_pat_history_diagnosis_in => flg_pat_history_diagnosis_in,
         flg_vital_sign_read_in => flg_vital_sign_read_in,
         flg_epis_diagnosis_in => flg_epis_diagnosis_in,
         flg_analysis_req_in => flg_analysis_req_in,
         flg_exam_req_in => flg_exam_req_in,
         flg_drug_prescription_in => flg_drug_prescription_in,
         flg_drug_req_in => flg_drug_req_in,
         flg_interv_prescription_in => flg_interv_prescription_in,
         flg_nurse_activity_req_in => flg_nurse_activity_req_in,
         flg_monitorization_in => flg_monitorization_in,
         flg_icnp_epis_diagnosis_in => flg_icnp_epis_diagnosis_in,
         flg_icnp_epis_intervention_in => flg_icnp_epis_intervention_in,
         flg_pat_pregnancy_in => flg_pat_pregnancy_in,
         flg_sys_alert_det_in => flg_sys_alert_det_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_visit_in => id_visit_in,
         flg_presc_med_in => flg_presc_med_in,
         flg_presc_med_e_in => flg_presc_med_e_in,
         flg_presc_med_iv_in => flg_presc_med_iv_in,
         flg_presc_med_l_in => flg_presc_med_l_in,
         flg_presc_med_r_in => flg_presc_med_r_in,
         flg_prescription_in => flg_prescription_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_episode_in => id_episode_in,
            id_patient_in => id_patient_in,
            flg_episode_in => flg_episode_in,
            flg_pat_allergy_in => flg_pat_allergy_in,
            flg_pat_habit_in => flg_pat_habit_in,
            flg_pat_history_diagnosis_in => flg_pat_history_diagnosis_in,
            flg_vital_sign_read_in => flg_vital_sign_read_in,
            flg_epis_diagnosis_in => flg_epis_diagnosis_in,
            flg_analysis_req_in => flg_analysis_req_in,
            flg_exam_req_in => flg_exam_req_in,
            flg_drug_prescription_in => flg_drug_prescription_in,
            flg_drug_req_in => flg_drug_req_in,
            flg_interv_prescription_in => flg_interv_prescription_in,
            flg_nurse_activity_req_in => flg_nurse_activity_req_in,
            flg_monitorization_in => flg_monitorization_in,
            flg_icnp_epis_diagnosis_in => flg_icnp_epis_diagnosis_in,
            flg_icnp_epis_intervention_in => flg_icnp_epis_intervention_in,
            flg_pat_pregnancy_in => flg_pat_pregnancy_in,
            flg_sys_alert_det_in => flg_sys_alert_det_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            id_visit_in => id_visit_in,
            flg_presc_med_in => flg_presc_med_in,
            flg_presc_med_e_in => flg_presc_med_e_in,
            flg_presc_med_iv_in => flg_presc_med_iv_in,
            flg_presc_med_l_in => flg_presc_med_l_in,
            flg_presc_med_r_in => flg_presc_med_r_in,
            flg_prescription_in => flg_prescription_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_episode_in IN AWARENESS.ID_EPISODE%TYPE,
      id_patient_in IN AWARENESS.ID_PATIENT%TYPE,
      flg_episode_in IN AWARENESS.FLG_EPISODE%TYPE DEFAULT NULL,
      flg_pat_allergy_in IN AWARENESS.FLG_PAT_ALLERGY%TYPE DEFAULT NULL,
      flg_pat_habit_in IN AWARENESS.FLG_PAT_HABIT%TYPE DEFAULT NULL,
      flg_pat_history_diagnosis_in IN AWARENESS.FLG_PAT_HISTORY_DIAGNOSIS%TYPE DEFAULT NULL,
      flg_vital_sign_read_in IN AWARENESS.FLG_VITAL_SIGN_READ%TYPE DEFAULT NULL,
      flg_epis_diagnosis_in IN AWARENESS.FLG_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      flg_analysis_req_in IN AWARENESS.FLG_ANALYSIS_REQ%TYPE DEFAULT NULL,
      flg_exam_req_in IN AWARENESS.FLG_EXAM_REQ%TYPE DEFAULT NULL,
      flg_drug_prescription_in IN AWARENESS.FLG_DRUG_PRESCRIPTION%TYPE DEFAULT NULL,
      flg_drug_req_in IN AWARENESS.FLG_DRUG_REQ%TYPE DEFAULT NULL,
      flg_interv_prescription_in IN AWARENESS.FLG_INTERV_PRESCRIPTION%TYPE DEFAULT NULL,
      flg_nurse_activity_req_in IN AWARENESS.FLG_NURSE_ACTIVITY_REQ%TYPE DEFAULT NULL,
      flg_monitorization_in IN AWARENESS.FLG_MONITORIZATION%TYPE DEFAULT NULL,
      flg_icnp_epis_diagnosis_in IN AWARENESS.FLG_ICNP_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      flg_icnp_epis_intervention_in IN AWARENESS.FLG_ICNP_EPIS_INTERVENTION%TYPE DEFAULT NULL,
      flg_pat_pregnancy_in IN AWARENESS.FLG_PAT_PREGNANCY%TYPE DEFAULT NULL,
      flg_sys_alert_det_in IN AWARENESS.FLG_SYS_ALERT_DET%TYPE DEFAULT NULL,
      create_user_in IN AWARENESS.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN AWARENESS.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN AWARENESS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN AWARENESS.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN AWARENESS.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN AWARENESS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_visit_in IN AWARENESS.ID_VISIT%TYPE DEFAULT NULL,
      flg_presc_med_in IN AWARENESS.FLG_PRESC_MED%TYPE DEFAULT NULL,
      flg_presc_med_e_in IN AWARENESS.FLG_PRESC_MED_E%TYPE DEFAULT NULL,
      flg_presc_med_iv_in IN AWARENESS.FLG_PRESC_MED_IV%TYPE DEFAULT NULL,
      flg_presc_med_l_in IN AWARENESS.FLG_PRESC_MED_L%TYPE DEFAULT NULL,
      flg_presc_med_r_in IN AWARENESS.FLG_PRESC_MED_R%TYPE DEFAULT NULL,
      flg_prescription_in IN AWARENESS.FLG_PRESCRIPTION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_episode_in,
      id_patient_in,
      flg_episode_in,
      flg_pat_allergy_in,
      flg_pat_habit_in,
      flg_pat_history_diagnosis_in,
      flg_vital_sign_read_in,
      flg_epis_diagnosis_in,
      flg_analysis_req_in,
      flg_exam_req_in,
      flg_drug_prescription_in,
      flg_drug_req_in,
      flg_interv_prescription_in,
      flg_nurse_activity_req_in,
      flg_monitorization_in,
      flg_icnp_epis_diagnosis_in,
      flg_icnp_epis_intervention_in,
      flg_pat_pregnancy_in,
      flg_sys_alert_det_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      id_visit_in,
      flg_presc_med_in,
      flg_presc_med_e_in,
      flg_presc_med_iv_in,
      flg_presc_med_l_in,
      flg_presc_med_r_in,
      flg_prescription_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN AWARENESS_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_PATIENT ID_PATIENT_cc;
      l_ID_EPISODE ID_EPISODE_cc;
      l_FLG_EPISODE FLG_EPISODE_cc;
      l_FLG_PAT_ALLERGY FLG_PAT_ALLERGY_cc;
      l_FLG_PAT_HABIT FLG_PAT_HABIT_cc;
      l_FLG_PAT_HISTORY_DIAGNOSIS FLG_PAT_HISTORY_DIAGNOSIS_cc;
      l_FLG_VITAL_SIGN_READ FLG_VITAL_SIGN_READ_cc;
      l_FLG_EPIS_DIAGNOSIS FLG_EPIS_DIAGNOSIS_cc;
      l_FLG_ANALYSIS_REQ FLG_ANALYSIS_REQ_cc;
      l_FLG_EXAM_REQ FLG_EXAM_REQ_cc;
      l_FLG_DRUG_PRESCRIPTION FLG_DRUG_PRESCRIPTION_cc;
      l_FLG_DRUG_REQ FLG_DRUG_REQ_cc;
      l_FLG_INTERV_PRESCRIPTION FLG_INTERV_PRESCRIPTION_cc;
      l_FLG_NURSE_ACTIVITY_REQ FLG_NURSE_ACTIVITY_REQ_cc;
      l_FLG_MONITORIZATION FLG_MONITORIZATION_cc;
      l_FLG_ICNP_EPIS_DIAGNOSIS FLG_ICNP_EPIS_DIAGNOSIS_cc;
      l_FLG_ICNP_EPIS_INTERVENTION FLG_ICNP_EPIS_INTERVENTION_cc;
      l_FLG_PAT_PREGNANCY FLG_PAT_PREGNANCY_cc;
      l_FLG_SYS_ALERT_DET FLG_SYS_ALERT_DET_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_ID_VISIT ID_VISIT_cc;
      l_FLG_PRESC_MED FLG_PRESC_MED_cc;
      l_FLG_PRESC_MED_E FLG_PRESC_MED_E_cc;
      l_FLG_PRESC_MED_IV FLG_PRESC_MED_IV_cc;
      l_FLG_PRESC_MED_L FLG_PRESC_MED_L_cc;
      l_FLG_PRESC_MED_R FLG_PRESC_MED_R_cc;
      l_FLG_PRESCRIPTION FLG_PRESCRIPTION_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_PATIENT(i) := col_in(i).ID_PATIENT;
         l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
         l_FLG_EPISODE(i) := col_in(i).FLG_EPISODE;
         l_FLG_PAT_ALLERGY(i) := col_in(i).FLG_PAT_ALLERGY;
         l_FLG_PAT_HABIT(i) := col_in(i).FLG_PAT_HABIT;
         l_FLG_PAT_HISTORY_DIAGNOSIS(i) := col_in(i).FLG_PAT_HISTORY_DIAGNOSIS;
         l_FLG_VITAL_SIGN_READ(i) := col_in(i).FLG_VITAL_SIGN_READ;
         l_FLG_EPIS_DIAGNOSIS(i) := col_in(i).FLG_EPIS_DIAGNOSIS;
         l_FLG_ANALYSIS_REQ(i) := col_in(i).FLG_ANALYSIS_REQ;
         l_FLG_EXAM_REQ(i) := col_in(i).FLG_EXAM_REQ;
         l_FLG_DRUG_PRESCRIPTION(i) := col_in(i).FLG_DRUG_PRESCRIPTION;
         l_FLG_DRUG_REQ(i) := col_in(i).FLG_DRUG_REQ;
         l_FLG_INTERV_PRESCRIPTION(i) := col_in(i).FLG_INTERV_PRESCRIPTION;
         l_FLG_NURSE_ACTIVITY_REQ(i) := col_in(i).FLG_NURSE_ACTIVITY_REQ;
         l_FLG_MONITORIZATION(i) := col_in(i).FLG_MONITORIZATION;
         l_FLG_ICNP_EPIS_DIAGNOSIS(i) := col_in(i).FLG_ICNP_EPIS_DIAGNOSIS;
         l_FLG_ICNP_EPIS_INTERVENTION(i) := col_in(i).FLG_ICNP_EPIS_INTERVENTION;
         l_FLG_PAT_PREGNANCY(i) := col_in(i).FLG_PAT_PREGNANCY;
         l_FLG_SYS_ALERT_DET(i) := col_in(i).FLG_SYS_ALERT_DET;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_ID_VISIT(i) := col_in(i).ID_VISIT;
         l_FLG_PRESC_MED(i) := col_in(i).FLG_PRESC_MED;
         l_FLG_PRESC_MED_E(i) := col_in(i).FLG_PRESC_MED_E;
         l_FLG_PRESC_MED_IV(i) := col_in(i).FLG_PRESC_MED_IV;
         l_FLG_PRESC_MED_L(i) := col_in(i).FLG_PRESC_MED_L;
         l_FLG_PRESC_MED_R(i) := col_in(i).FLG_PRESC_MED_R;
         l_FLG_PRESCRIPTION(i) := col_in(i).FLG_PRESCRIPTION;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE AWARENESS SET
               FLG_EPISODE = NVL (l_FLG_EPISODE(i), FLG_EPISODE),
               FLG_PAT_ALLERGY = NVL (l_FLG_PAT_ALLERGY(i), FLG_PAT_ALLERGY),
               FLG_PAT_HABIT = NVL (l_FLG_PAT_HABIT(i), FLG_PAT_HABIT),
               FLG_PAT_HISTORY_DIAGNOSIS = NVL (l_FLG_PAT_HISTORY_DIAGNOSIS(i), FLG_PAT_HISTORY_DIAGNOSIS),
               FLG_VITAL_SIGN_READ = NVL (l_FLG_VITAL_SIGN_READ(i), FLG_VITAL_SIGN_READ),
               FLG_EPIS_DIAGNOSIS = NVL (l_FLG_EPIS_DIAGNOSIS(i), FLG_EPIS_DIAGNOSIS),
               FLG_ANALYSIS_REQ = NVL (l_FLG_ANALYSIS_REQ(i), FLG_ANALYSIS_REQ),
               FLG_EXAM_REQ = NVL (l_FLG_EXAM_REQ(i), FLG_EXAM_REQ),
               FLG_DRUG_PRESCRIPTION = NVL (l_FLG_DRUG_PRESCRIPTION(i), FLG_DRUG_PRESCRIPTION),
               FLG_DRUG_REQ = NVL (l_FLG_DRUG_REQ(i), FLG_DRUG_REQ),
               FLG_INTERV_PRESCRIPTION = NVL (l_FLG_INTERV_PRESCRIPTION(i), FLG_INTERV_PRESCRIPTION),
               FLG_NURSE_ACTIVITY_REQ = NVL (l_FLG_NURSE_ACTIVITY_REQ(i), FLG_NURSE_ACTIVITY_REQ),
               FLG_MONITORIZATION = NVL (l_FLG_MONITORIZATION(i), FLG_MONITORIZATION),
               FLG_ICNP_EPIS_DIAGNOSIS = NVL (l_FLG_ICNP_EPIS_DIAGNOSIS(i), FLG_ICNP_EPIS_DIAGNOSIS),
               FLG_ICNP_EPIS_INTERVENTION = NVL (l_FLG_ICNP_EPIS_INTERVENTION(i), FLG_ICNP_EPIS_INTERVENTION),
               FLG_PAT_PREGNANCY = NVL (l_FLG_PAT_PREGNANCY(i), FLG_PAT_PREGNANCY),
               FLG_SYS_ALERT_DET = NVL (l_FLG_SYS_ALERT_DET(i), FLG_SYS_ALERT_DET),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               ID_VISIT = NVL (l_ID_VISIT(i), ID_VISIT),
               FLG_PRESC_MED = NVL (l_FLG_PRESC_MED(i), FLG_PRESC_MED),
               FLG_PRESC_MED_E = NVL (l_FLG_PRESC_MED_E(i), FLG_PRESC_MED_E),
               FLG_PRESC_MED_IV = NVL (l_FLG_PRESC_MED_IV(i), FLG_PRESC_MED_IV),
               FLG_PRESC_MED_L = NVL (l_FLG_PRESC_MED_L(i), FLG_PRESC_MED_L),
               FLG_PRESC_MED_R = NVL (l_FLG_PRESC_MED_R(i), FLG_PRESC_MED_R),
               FLG_PRESCRIPTION = NVL (l_FLG_PRESCRIPTION(i), FLG_PRESCRIPTION)
             WHERE
                ID_EPISODE = l_ID_EPISODE(i) AND
                ID_PATIENT = l_ID_PATIENT(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE AWARENESS SET
               FLG_EPISODE = l_FLG_EPISODE(i),
               FLG_PAT_ALLERGY = l_FLG_PAT_ALLERGY(i),
               FLG_PAT_HABIT = l_FLG_PAT_HABIT(i),
               FLG_PAT_HISTORY_DIAGNOSIS = l_FLG_PAT_HISTORY_DIAGNOSIS(i),
               FLG_VITAL_SIGN_READ = l_FLG_VITAL_SIGN_READ(i),
               FLG_EPIS_DIAGNOSIS = l_FLG_EPIS_DIAGNOSIS(i),
               FLG_ANALYSIS_REQ = l_FLG_ANALYSIS_REQ(i),
               FLG_EXAM_REQ = l_FLG_EXAM_REQ(i),
               FLG_DRUG_PRESCRIPTION = l_FLG_DRUG_PRESCRIPTION(i),
               FLG_DRUG_REQ = l_FLG_DRUG_REQ(i),
               FLG_INTERV_PRESCRIPTION = l_FLG_INTERV_PRESCRIPTION(i),
               FLG_NURSE_ACTIVITY_REQ = l_FLG_NURSE_ACTIVITY_REQ(i),
               FLG_MONITORIZATION = l_FLG_MONITORIZATION(i),
               FLG_ICNP_EPIS_DIAGNOSIS = l_FLG_ICNP_EPIS_DIAGNOSIS(i),
               FLG_ICNP_EPIS_INTERVENTION = l_FLG_ICNP_EPIS_INTERVENTION(i),
               FLG_PAT_PREGNANCY = l_FLG_PAT_PREGNANCY(i),
               FLG_SYS_ALERT_DET = l_FLG_SYS_ALERT_DET(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               ID_VISIT = l_ID_VISIT(i),
               FLG_PRESC_MED = l_FLG_PRESC_MED(i),
               FLG_PRESC_MED_E = l_FLG_PRESC_MED_E(i),
               FLG_PRESC_MED_IV = l_FLG_PRESC_MED_IV(i),
               FLG_PRESC_MED_L = l_FLG_PRESC_MED_L(i),
               FLG_PRESC_MED_R = l_FLG_PRESC_MED_R(i),
               FLG_PRESCRIPTION = l_FLG_PRESCRIPTION(i)
             WHERE
                ID_EPISODE = l_ID_EPISODE(i) AND
                ID_PATIENT = l_ID_PATIENT(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN AWARENESS_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE AWARENESS
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE AWARENESS
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE AWARENESS set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE AWARENESS set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_episode_in IN AWARENESS.ID_EPISODE%TYPE,
      id_patient_in IN AWARENESS.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM AWARENESS
       WHERE
          ID_EPISODE = id_episode_in AND
          ID_PATIENT = id_patient_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_episode_in IN AWARENESS.ID_EPISODE%TYPE,
      id_patient_in IN AWARENESS.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_episode_in => id_episode_in,
      id_patient_in => id_patient_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_EPISODE
   PROCEDURE del_ID_EPISODE (
      id_episode_in IN AWARENESS.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM AWARENESS
       WHERE ID_EPISODE = id_episode_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_EPISODE;

   -- Delete all rows for primary key column ID_PATIENT
   PROCEDURE del_ID_PATIENT (
      id_patient_in IN AWARENESS.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM AWARENESS
       WHERE ID_PATIENT = id_patient_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_PATIENT;






   -- Delete all rows for primary key column ID_EPISODE
   PROCEDURE del_ID_EPISODE (
      id_episode_in IN AWARENESS.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_EPISODE (
      id_episode_in => id_episode_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_EPISODE;

   -- Delete all rows for primary key column ID_PATIENT
   PROCEDURE del_ID_PATIENT (
      id_patient_in IN AWARENESS.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_PATIENT (
      id_patient_in => id_patient_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_PATIENT;






















   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM AWARENESS';
      ELSE
         RETURN
            'DELETE FROM AWARENESS WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'AWARENESS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'AWARENESS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      awareness_inout IN OUT AWARENESS%ROWTYPE
   )
   IS
   BEGIN
      awareness_inout.ID_PATIENT := NULL;
      awareness_inout.ID_EPISODE := NULL;
      awareness_inout.FLG_EPISODE := NULL;
      awareness_inout.FLG_PAT_ALLERGY := NULL;
      awareness_inout.FLG_PAT_HABIT := NULL;
      awareness_inout.FLG_PAT_HISTORY_DIAGNOSIS := NULL;
      awareness_inout.FLG_VITAL_SIGN_READ := NULL;
      awareness_inout.FLG_EPIS_DIAGNOSIS := NULL;
      awareness_inout.FLG_ANALYSIS_REQ := NULL;
      awareness_inout.FLG_EXAM_REQ := NULL;
      awareness_inout.FLG_DRUG_PRESCRIPTION := NULL;
      awareness_inout.FLG_DRUG_REQ := NULL;
      awareness_inout.FLG_INTERV_PRESCRIPTION := NULL;
      awareness_inout.FLG_NURSE_ACTIVITY_REQ := NULL;
      awareness_inout.FLG_MONITORIZATION := NULL;
      awareness_inout.FLG_ICNP_EPIS_DIAGNOSIS := NULL;
      awareness_inout.FLG_ICNP_EPIS_INTERVENTION := NULL;
      awareness_inout.FLG_PAT_PREGNANCY := NULL;
      awareness_inout.FLG_SYS_ALERT_DET := NULL;
      awareness_inout.CREATE_USER := NULL;
      awareness_inout.CREATE_TIME := NULL;
      awareness_inout.CREATE_INSTITUTION := NULL;
      awareness_inout.UPDATE_USER := NULL;
      awareness_inout.UPDATE_TIME := NULL;
      awareness_inout.UPDATE_INSTITUTION := NULL;
      awareness_inout.ID_VISIT := NULL;
      awareness_inout.FLG_PRESC_MED := NULL;
      awareness_inout.FLG_PRESC_MED_E := NULL;
      awareness_inout.FLG_PRESC_MED_IV := NULL;
      awareness_inout.FLG_PRESC_MED_L := NULL;
      awareness_inout.FLG_PRESC_MED_R := NULL;
      awareness_inout.FLG_PRESCRIPTION := NULL;
   END initrec;

   FUNCTION initrec RETURN AWARENESS%ROWTYPE
   IS
      l_awareness AWARENESS%ROWTYPE;
   BEGIN
      RETURN l_awareness;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN AWARENESS_tc
   IS
        data AWARENESS_tc;
   BEGIN
        select * bulk collect into data from AWARENESS where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN AWARENESS_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data AWARENESS_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_AWARENESS;
/
