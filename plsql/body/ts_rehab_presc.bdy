/*-- Last Change Revision: $Rev: 2028368 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:22 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_rehab_presc
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2021-09-16 17:07:44
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN rehab_presc.id_rehab_presc%TYPE IS
        retval rehab_presc.id_rehab_presc%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_rehab_presc.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        dt_rehab_presc_in         IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_institution_in         IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_rehab_area_interv_in   IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_sch_need_in      IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_exec_institution_in    IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        exec_per_session_in       IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        notes_in                  IN rehab_presc.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        flg_presc_status_in       IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        create_user_in            IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        notes_change_in           IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        id_codification_in        IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        flg_referral_in           IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_laterality_in         IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_pat_health_plan_in     IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_exemption_in       IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        diagnosis_notes_in        IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        id_clinical_purpose_in    IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        clinical_purpose_notes_in IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_pky rehab_presc.id_rehab_presc%TYPE := next_key;
    BEGIN
        ins(id_rehab_presc_in         => l_pky,
            dt_rehab_presc_in         => dt_rehab_presc_in,
            id_professional_in        => id_professional_in,
            id_institution_in         => id_institution_in,
            id_rehab_area_interv_in   => id_rehab_area_interv_in,
            id_rehab_sch_need_in      => id_rehab_sch_need_in,
            id_exec_institution_in    => id_exec_institution_in,
            exec_per_session_in       => exec_per_session_in,
            flg_status_in             => flg_status_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            flg_presc_status_in       => flg_presc_status_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            notes_change_in           => notes_change_in,
            id_codification_in        => id_codification_in,
            flg_referral_in           => flg_referral_in,
            flg_laterality_in         => flg_laterality_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            id_pat_health_plan_in     => id_pat_health_plan_in,
            id_pat_exemption_in       => id_pat_exemption_in,
            diagnosis_notes_in        => diagnosis_notes_in,
            id_clinical_purpose_in    => id_clinical_purpose_in,
            clinical_purpose_notes_in => clinical_purpose_notes_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        dt_rehab_presc_in         IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_institution_in         IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_rehab_area_interv_in   IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_sch_need_in      IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_exec_institution_in    IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        exec_per_session_in       IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        notes_in                  IN rehab_presc.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        flg_presc_status_in       IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        create_user_in            IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        notes_change_in           IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        id_codification_in        IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        flg_referral_in           IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_laterality_in         IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_pat_health_plan_in     IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_exemption_in       IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        diagnosis_notes_in        IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        id_clinical_purpose_in    IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        clinical_purpose_notes_in IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(dt_rehab_presc_in         => dt_rehab_presc_in,
            id_professional_in        => id_professional_in,
            id_institution_in         => id_institution_in,
            id_rehab_area_interv_in   => id_rehab_area_interv_in,
            id_rehab_sch_need_in      => id_rehab_sch_need_in,
            id_exec_institution_in    => id_exec_institution_in,
            exec_per_session_in       => exec_per_session_in,
            flg_status_in             => flg_status_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            flg_presc_status_in       => flg_presc_status_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            notes_change_in           => notes_change_in,
            id_codification_in        => id_codification_in,
            flg_referral_in           => flg_referral_in,
            flg_laterality_in         => flg_laterality_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            id_pat_health_plan_in     => id_pat_health_plan_in,
            id_pat_exemption_in       => id_pat_exemption_in,
            diagnosis_notes_in        => diagnosis_notes_in,
            id_clinical_purpose_in    => id_clinical_purpose_in,
            clinical_purpose_notes_in => clinical_purpose_notes_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        dt_rehab_presc_in         IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_institution_in         IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_rehab_area_interv_in   IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_sch_need_in      IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_exec_institution_in    IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        exec_per_session_in       IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        notes_in                  IN rehab_presc.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        flg_presc_status_in       IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        create_user_in            IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        notes_change_in           IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        id_codification_in        IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        flg_referral_in           IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_laterality_in         IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_pat_health_plan_in     IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_exemption_in       IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        diagnosis_notes_in        IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        id_clinical_purpose_in    IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        clinical_purpose_notes_in IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        id_rehab_presc_out        IN OUT rehab_presc.id_rehab_presc%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_pky rehab_presc.id_rehab_presc%TYPE := next_key;
    BEGIN
        ins(id_rehab_presc_in         => l_pky,
            dt_rehab_presc_in         => dt_rehab_presc_in,
            id_professional_in        => id_professional_in,
            id_institution_in         => id_institution_in,
            id_rehab_area_interv_in   => id_rehab_area_interv_in,
            id_rehab_sch_need_in      => id_rehab_sch_need_in,
            id_exec_institution_in    => id_exec_institution_in,
            exec_per_session_in       => exec_per_session_in,
            flg_status_in             => flg_status_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            flg_presc_status_in       => flg_presc_status_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            notes_change_in           => notes_change_in,
            id_codification_in        => id_codification_in,
            flg_referral_in           => flg_referral_in,
            flg_laterality_in         => flg_laterality_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            id_pat_health_plan_in     => id_pat_health_plan_in,
            id_pat_exemption_in       => id_pat_exemption_in,
            diagnosis_notes_in        => diagnosis_notes_in,
            id_clinical_purpose_in    => id_clinical_purpose_in,
            clinical_purpose_notes_in => clinical_purpose_notes_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        id_rehab_presc_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        dt_rehab_presc_in         IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_institution_in         IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_rehab_area_interv_in   IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_sch_need_in      IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_exec_institution_in    IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        exec_per_session_in       IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        notes_in                  IN rehab_presc.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        flg_presc_status_in       IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        create_user_in            IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        notes_change_in           IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        id_codification_in        IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        flg_referral_in           IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_laterality_in         IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_pat_health_plan_in     IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_exemption_in       IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        diagnosis_notes_in        IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        id_clinical_purpose_in    IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        clinical_purpose_notes_in IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        id_rehab_presc_out        IN OUT rehab_presc.id_rehab_presc%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(dt_rehab_presc_in         => dt_rehab_presc_in,
            id_professional_in        => id_professional_in,
            id_institution_in         => id_institution_in,
            id_rehab_area_interv_in   => id_rehab_area_interv_in,
            id_rehab_sch_need_in      => id_rehab_sch_need_in,
            id_exec_institution_in    => id_exec_institution_in,
            exec_per_session_in       => exec_per_session_in,
            flg_status_in             => flg_status_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            flg_presc_status_in       => flg_presc_status_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            notes_change_in           => notes_change_in,
            id_codification_in        => id_codification_in,
            flg_referral_in           => flg_referral_in,
            flg_laterality_in         => flg_laterality_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            id_pat_health_plan_in     => id_pat_health_plan_in,
            id_pat_exemption_in       => id_pat_exemption_in,
            diagnosis_notes_in        => diagnosis_notes_in,
            id_clinical_purpose_in    => id_clinical_purpose_in,
            clinical_purpose_notes_in => clinical_purpose_notes_in,
            id_rehab_presc_out        => id_rehab_presc_out,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        dt_rehab_presc_in         IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_institution_in         IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_rehab_area_interv_in   IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_sch_need_in      IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_exec_institution_in    IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        exec_per_session_in       IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        notes_in                  IN rehab_presc.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        flg_presc_status_in       IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        create_user_in            IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        notes_change_in           IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        id_codification_in        IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        flg_referral_in           IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_laterality_in         IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_pat_health_plan_in     IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_exemption_in       IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        diagnosis_notes_in        IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        id_clinical_purpose_in    IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        clinical_purpose_notes_in IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) RETURN rehab_presc.id_rehab_presc%TYPE IS
        l_pky rehab_presc.id_rehab_presc%TYPE := next_key;
    BEGIN
        ins(id_rehab_presc_in         => l_pky,
            dt_rehab_presc_in         => dt_rehab_presc_in,
            id_professional_in        => id_professional_in,
            id_institution_in         => id_institution_in,
            id_rehab_area_interv_in   => id_rehab_area_interv_in,
            id_rehab_sch_need_in      => id_rehab_sch_need_in,
            id_exec_institution_in    => id_exec_institution_in,
            exec_per_session_in       => exec_per_session_in,
            flg_status_in             => flg_status_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            flg_presc_status_in       => flg_presc_status_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            notes_change_in           => notes_change_in,
            id_codification_in        => id_codification_in,
            flg_referral_in           => flg_referral_in,
            flg_laterality_in         => flg_laterality_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            id_pat_health_plan_in     => id_pat_health_plan_in,
            id_pat_exemption_in       => id_pat_exemption_in,
            diagnosis_notes_in        => diagnosis_notes_in,
            id_clinical_purpose_in    => id_clinical_purpose_in,
            clinical_purpose_notes_in => clinical_purpose_notes_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        dt_rehab_presc_in         IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_institution_in         IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_rehab_area_interv_in   IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_sch_need_in      IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_exec_institution_in    IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        exec_per_session_in       IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        notes_in                  IN rehab_presc.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        flg_presc_status_in       IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        create_user_in            IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        notes_change_in           IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        id_codification_in        IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        flg_referral_in           IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_laterality_in         IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_pat_health_plan_in     IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_exemption_in       IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        diagnosis_notes_in        IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        id_clinical_purpose_in    IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        clinical_purpose_notes_in IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) RETURN rehab_presc.id_rehab_presc%TYPE IS
        l_pky    rehab_presc.id_rehab_presc%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_rehab_presc_in         => l_pky,
            dt_rehab_presc_in         => dt_rehab_presc_in,
            id_professional_in        => id_professional_in,
            id_institution_in         => id_institution_in,
            id_rehab_area_interv_in   => id_rehab_area_interv_in,
            id_rehab_sch_need_in      => id_rehab_sch_need_in,
            id_exec_institution_in    => id_exec_institution_in,
            exec_per_session_in       => exec_per_session_in,
            flg_status_in             => flg_status_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            flg_presc_status_in       => flg_presc_status_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            notes_change_in           => notes_change_in,
            id_codification_in        => id_codification_in,
            flg_referral_in           => flg_referral_in,
            flg_laterality_in         => flg_laterality_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            id_pat_health_plan_in     => id_pat_health_plan_in,
            id_pat_exemption_in       => id_pat_exemption_in,
            diagnosis_notes_in        => diagnosis_notes_in,
            id_clinical_purpose_in    => id_clinical_purpose_in,
            clinical_purpose_notes_in => clinical_purpose_notes_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_rehab_presc_in         IN rehab_presc.id_rehab_presc%TYPE,
        dt_rehab_presc_in         IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_institution_in         IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_rehab_area_interv_in   IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_sch_need_in      IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_exec_institution_in    IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        exec_per_session_in       IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        notes_in                  IN rehab_presc.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        flg_presc_status_in       IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        create_user_in            IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        notes_change_in           IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        id_codification_in        IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        flg_referral_in           IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_laterality_in         IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_pat_health_plan_in     IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_exemption_in       IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        diagnosis_notes_in        IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        id_clinical_purpose_in    IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        clinical_purpose_notes_in IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := FALSE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO rehab_presc
            (id_rehab_presc,
             dt_rehab_presc,
             id_professional,
             id_institution,
             id_rehab_area_interv,
             id_rehab_sch_need,
             id_exec_institution,
             exec_per_session,
             flg_status,
             notes,
             id_cancel_reason,
             notes_cancel,
             dt_cancel,
             id_cancel_professional,
             flg_presc_status,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             notes_change,
             id_codification,
             flg_referral,
             flg_laterality,
             id_not_order_reason,
             id_pat_health_plan,
             id_pat_exemption,
             diagnosis_notes,
             id_clinical_purpose,
             clinical_purpose_notes)
        VALUES
            (id_rehab_presc_in,
             dt_rehab_presc_in,
             id_professional_in,
             id_institution_in,
             id_rehab_area_interv_in,
             id_rehab_sch_need_in,
             id_exec_institution_in,
             exec_per_session_in,
             flg_status_in,
             notes_in,
             id_cancel_reason_in,
             notes_cancel_in,
             dt_cancel_in,
             id_cancel_professional_in,
             flg_presc_status_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             notes_change_in,
             id_codification_in,
             flg_referral_in,
             flg_laterality_in,
             id_not_order_reason_in,
             id_pat_health_plan_in,
             id_pat_exemption_in,
             diagnosis_notes_in,
             id_clinical_purpose_in,
             clinical_purpose_notes_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_rehab_presc_in         IN rehab_presc.id_rehab_presc%TYPE,
        dt_rehab_presc_in         IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_institution_in         IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_rehab_area_interv_in   IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_sch_need_in      IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_exec_institution_in    IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        exec_per_session_in       IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        notes_in                  IN rehab_presc.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        flg_presc_status_in       IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        create_user_in            IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        notes_change_in           IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        id_codification_in        IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        flg_referral_in           IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_laterality_in         IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_pat_health_plan_in     IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_exemption_in       IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        diagnosis_notes_in        IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        id_clinical_purpose_in    IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        clinical_purpose_notes_in IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_rehab_presc_in         => id_rehab_presc_in,
            dt_rehab_presc_in         => dt_rehab_presc_in,
            id_professional_in        => id_professional_in,
            id_institution_in         => id_institution_in,
            id_rehab_area_interv_in   => id_rehab_area_interv_in,
            id_rehab_sch_need_in      => id_rehab_sch_need_in,
            id_exec_institution_in    => id_exec_institution_in,
            exec_per_session_in       => exec_per_session_in,
            flg_status_in             => flg_status_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            flg_presc_status_in       => flg_presc_status_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            notes_change_in           => notes_change_in,
            id_codification_in        => id_codification_in,
            flg_referral_in           => flg_referral_in,
            flg_laterality_in         => flg_laterality_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            id_pat_health_plan_in     => id_pat_health_plan_in,
            id_pat_exemption_in       => id_pat_exemption_in,
            diagnosis_notes_in        => diagnosis_notes_in,
            id_clinical_purpose_in    => id_clinical_purpose_in,
            clinical_purpose_notes_in => clinical_purpose_notes_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN rehab_presc%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_rec rehab_presc%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_rehab_presc := next_key(sequence_in);
        END IF;
    
        ins(id_rehab_presc_in         => l_rec.id_rehab_presc,
            dt_rehab_presc_in         => l_rec.dt_rehab_presc,
            id_professional_in        => l_rec.id_professional,
            id_institution_in         => l_rec.id_institution,
            id_rehab_area_interv_in   => l_rec.id_rehab_area_interv,
            id_rehab_sch_need_in      => l_rec.id_rehab_sch_need,
            id_exec_institution_in    => l_rec.id_exec_institution,
            exec_per_session_in       => l_rec.exec_per_session,
            flg_status_in             => l_rec.flg_status,
            notes_in                  => l_rec.notes,
            id_cancel_reason_in       => l_rec.id_cancel_reason,
            notes_cancel_in           => l_rec.notes_cancel,
            dt_cancel_in              => l_rec.dt_cancel,
            id_cancel_professional_in => l_rec.id_cancel_professional,
            flg_presc_status_in       => l_rec.flg_presc_status,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            notes_change_in           => l_rec.notes_change,
            id_codification_in        => l_rec.id_codification,
            flg_referral_in           => l_rec.flg_referral,
            flg_laterality_in         => l_rec.flg_laterality,
            id_not_order_reason_in    => l_rec.id_not_order_reason,
            id_pat_health_plan_in     => l_rec.id_pat_health_plan,
            id_pat_exemption_in       => l_rec.id_pat_exemption,
            diagnosis_notes_in        => l_rec.diagnosis_notes,
            id_clinical_purpose_in    => l_rec.id_clinical_purpose,
            clinical_purpose_notes_in => l_rec.clinical_purpose_notes,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN rehab_presc%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN rehab_presc_tc,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO rehab_presc
                    (id_rehab_presc,
                     dt_rehab_presc,
                     id_professional,
                     id_institution,
                     id_rehab_area_interv,
                     id_rehab_sch_need,
                     id_exec_institution,
                     exec_per_session,
                     flg_status,
                     notes,
                     id_cancel_reason,
                     notes_cancel,
                     dt_cancel,
                     id_cancel_professional,
                     flg_presc_status,
                     notes_change,
                     id_codification,
                     flg_referral,
                     flg_laterality,
                     id_not_order_reason,
                     id_pat_health_plan,
                     id_pat_exemption,
                     diagnosis_notes,
                     id_clinical_purpose,
                     clinical_purpose_notes)
                VALUES
                    (rows_in(indx).id_rehab_presc,
                     rows_in(indx).dt_rehab_presc,
                     rows_in(indx).id_professional,
                     rows_in(indx).id_institution,
                     rows_in(indx).id_rehab_area_interv,
                     rows_in(indx).id_rehab_sch_need,
                     rows_in(indx).id_exec_institution,
                     rows_in(indx).exec_per_session,
                     rows_in(indx).flg_status,
                     rows_in(indx).notes,
                     rows_in(indx).id_cancel_reason,
                     rows_in(indx).notes_cancel,
                     rows_in(indx).dt_cancel,
                     rows_in(indx).id_cancel_professional,
                     rows_in(indx).flg_presc_status,
                     rows_in(indx).notes_change,
                     rows_in(indx).id_codification,
                     rows_in(indx).flg_referral,
                     rows_in(indx).flg_laterality,
                     rows_in(indx).id_not_order_reason,
                     rows_in(indx).id_pat_health_plan,
                     rows_in(indx).id_pat_exemption,
                     rows_in(indx).diagnosis_notes,
                     rows_in(indx).id_clinical_purpose,
                     rows_in(indx).clinical_purpose_notes)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN rehab_presc_tc,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_rehab_presc_in          IN rehab_presc.id_rehab_presc%TYPE,
        dt_rehab_presc_in          IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        dt_rehab_presc_nin         IN BOOLEAN := TRUE,
        id_professional_in         IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        id_institution_in          IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        id_rehab_area_interv_in    IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_area_interv_nin   IN BOOLEAN := TRUE,
        id_rehab_sch_need_in       IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_rehab_sch_need_nin      IN BOOLEAN := TRUE,
        id_exec_institution_in     IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        id_exec_institution_nin    IN BOOLEAN := TRUE,
        exec_per_session_in        IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        exec_per_session_nin       IN BOOLEAN := TRUE,
        flg_status_in              IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        notes_in                   IN rehab_presc.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        dt_cancel_in               IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        id_cancel_professional_in  IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        id_cancel_professional_nin IN BOOLEAN := TRUE,
        flg_presc_status_in        IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        flg_presc_status_nin       IN BOOLEAN := TRUE,
        create_user_in             IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        notes_change_in            IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        notes_change_nin           IN BOOLEAN := TRUE,
        id_codification_in         IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        id_codification_nin        IN BOOLEAN := TRUE,
        flg_referral_in            IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_referral_nin           IN BOOLEAN := TRUE,
        flg_laterality_in          IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        flg_laterality_nin         IN BOOLEAN := TRUE,
        id_not_order_reason_in     IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_not_order_reason_nin    IN BOOLEAN := TRUE,
        id_pat_health_plan_in      IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_health_plan_nin     IN BOOLEAN := TRUE,
        id_pat_exemption_in        IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        id_pat_exemption_nin       IN BOOLEAN := TRUE,
        diagnosis_notes_in         IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        diagnosis_notes_nin        IN BOOLEAN := TRUE,
        id_clinical_purpose_in     IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        id_clinical_purpose_nin    IN BOOLEAN := TRUE,
        clinical_purpose_notes_in  IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        clinical_purpose_notes_nin IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := FALSE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_dt_rehab_presc_n         NUMBER(1) := sys.diutil.bool_to_int(dt_rehab_presc_nin);
        l_id_professional_n        NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_id_institution_n         NUMBER(1) := sys.diutil.bool_to_int(id_institution_nin);
        l_id_rehab_area_interv_n   NUMBER(1) := sys.diutil.bool_to_int(id_rehab_area_interv_nin);
        l_id_rehab_sch_need_n      NUMBER(1) := sys.diutil.bool_to_int(id_rehab_sch_need_nin);
        l_id_exec_institution_n    NUMBER(1) := sys.diutil.bool_to_int(id_exec_institution_nin);
        l_exec_per_session_n       NUMBER(1) := sys.diutil.bool_to_int(exec_per_session_nin);
        l_flg_status_n             NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_notes_n                  NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n       NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_dt_cancel_n              NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_cancel_professional_n NUMBER(1) := sys.diutil.bool_to_int(id_cancel_professional_nin);
        l_flg_presc_status_n       NUMBER(1) := sys.diutil.bool_to_int(flg_presc_status_nin);
        l_create_user_n            NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_notes_change_n           NUMBER(1) := sys.diutil.bool_to_int(notes_change_nin);
        l_id_codification_n        NUMBER(1) := sys.diutil.bool_to_int(id_codification_nin);
        l_flg_referral_n           NUMBER(1) := sys.diutil.bool_to_int(flg_referral_nin);
        l_flg_laterality_n         NUMBER(1) := sys.diutil.bool_to_int(flg_laterality_nin);
        l_id_not_order_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_not_order_reason_nin);
        l_id_pat_health_plan_n     NUMBER(1) := sys.diutil.bool_to_int(id_pat_health_plan_nin);
        l_id_pat_exemption_n       NUMBER(1) := sys.diutil.bool_to_int(id_pat_exemption_nin);
        l_diagnosis_notes_n        NUMBER(1) := sys.diutil.bool_to_int(diagnosis_notes_nin);
        l_id_clinical_purpose_n    NUMBER(1) := sys.diutil.bool_to_int(id_clinical_purpose_nin);
        l_clinical_purpose_notes_n NUMBER(1) := sys.diutil.bool_to_int(clinical_purpose_notes_nin);
    BEGIN
    
        UPDATE rehab_presc
           SET dt_rehab_presc         = decode(l_dt_rehab_presc_n,
                                               0,
                                               dt_rehab_presc_in,
                                               nvl(dt_rehab_presc_in, dt_rehab_presc)),
               id_professional        = decode(l_id_professional_n,
                                               0,
                                               id_professional_in,
                                               nvl(id_professional_in, id_professional)),
               id_institution         = decode(l_id_institution_n,
                                               0,
                                               id_institution_in,
                                               nvl(id_institution_in, id_institution)),
               id_rehab_area_interv   = decode(l_id_rehab_area_interv_n,
                                               0,
                                               id_rehab_area_interv_in,
                                               nvl(id_rehab_area_interv_in, id_rehab_area_interv)),
               id_rehab_sch_need      = decode(l_id_rehab_sch_need_n,
                                               0,
                                               id_rehab_sch_need_in,
                                               nvl(id_rehab_sch_need_in, id_rehab_sch_need)),
               id_exec_institution    = decode(l_id_exec_institution_n,
                                               0,
                                               id_exec_institution_in,
                                               nvl(id_exec_institution_in, id_exec_institution)),
               exec_per_session       = decode(l_exec_per_session_n,
                                               0,
                                               exec_per_session_in,
                                               nvl(exec_per_session_in, exec_per_session)),
               flg_status             = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               notes                  = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_cancel_reason       = decode(l_id_cancel_reason_n,
                                               0,
                                               id_cancel_reason_in,
                                               nvl(id_cancel_reason_in, id_cancel_reason)),
               notes_cancel           = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               dt_cancel              = decode(l_dt_cancel_n, 0, dt_cancel_in, nvl(dt_cancel_in, dt_cancel)),
               id_cancel_professional = decode(l_id_cancel_professional_n,
                                               0,
                                               id_cancel_professional_in,
                                               nvl(id_cancel_professional_in, id_cancel_professional)),
               flg_presc_status       = decode(l_flg_presc_status_n,
                                               0,
                                               flg_presc_status_in,
                                               nvl(flg_presc_status_in, flg_presc_status)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution)),
               notes_change           = decode(l_notes_change_n, 0, notes_change_in, nvl(notes_change_in, notes_change)),
               id_codification        = decode(l_id_codification_n,
                                               0,
                                               id_codification_in,
                                               nvl(id_codification_in, id_codification)),
               flg_referral           = decode(l_flg_referral_n, 0, flg_referral_in, nvl(flg_referral_in, flg_referral)),
               flg_laterality         = decode(l_flg_laterality_n,
                                               0,
                                               flg_laterality_in,
                                               nvl(flg_laterality_in, flg_laterality)),
               id_not_order_reason    = decode(l_id_not_order_reason_n,
                                               0,
                                               id_not_order_reason_in,
                                               nvl(id_not_order_reason_in, id_not_order_reason)),
               id_pat_health_plan     = decode(l_id_pat_health_plan_n,
                                               0,
                                               id_pat_health_plan_in,
                                               nvl(id_pat_health_plan_in, id_pat_health_plan)),
               id_pat_exemption       = decode(l_id_pat_exemption_n,
                                               0,
                                               id_pat_exemption_in,
                                               nvl(id_pat_exemption_in, id_pat_exemption)),
               diagnosis_notes        = decode(l_diagnosis_notes_n,
                                               0,
                                               diagnosis_notes_in,
                                               nvl(diagnosis_notes_in, diagnosis_notes)),
               id_clinical_purpose    = decode(l_id_clinical_purpose_n,
                                               0,
                                               id_clinical_purpose_in,
                                               nvl(id_clinical_purpose_in, id_clinical_purpose)),
               clinical_purpose_notes = decode(l_clinical_purpose_notes_n,
                                               0,
                                               clinical_purpose_notes_in,
                                               nvl(clinical_purpose_notes_in, clinical_purpose_notes))
         WHERE id_rehab_presc = id_rehab_presc_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_rehab_presc_in          IN rehab_presc.id_rehab_presc%TYPE,
        dt_rehab_presc_in          IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        dt_rehab_presc_nin         IN BOOLEAN := TRUE,
        id_professional_in         IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        id_institution_in          IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        id_rehab_area_interv_in    IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_area_interv_nin   IN BOOLEAN := TRUE,
        id_rehab_sch_need_in       IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_rehab_sch_need_nin      IN BOOLEAN := TRUE,
        id_exec_institution_in     IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        id_exec_institution_nin    IN BOOLEAN := TRUE,
        exec_per_session_in        IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        exec_per_session_nin       IN BOOLEAN := TRUE,
        flg_status_in              IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        notes_in                   IN rehab_presc.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        dt_cancel_in               IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        id_cancel_professional_in  IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        id_cancel_professional_nin IN BOOLEAN := TRUE,
        flg_presc_status_in        IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        flg_presc_status_nin       IN BOOLEAN := TRUE,
        create_user_in             IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        notes_change_in            IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        notes_change_nin           IN BOOLEAN := TRUE,
        id_codification_in         IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        id_codification_nin        IN BOOLEAN := TRUE,
        flg_referral_in            IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_referral_nin           IN BOOLEAN := TRUE,
        flg_laterality_in          IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        flg_laterality_nin         IN BOOLEAN := TRUE,
        id_not_order_reason_in     IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_not_order_reason_nin    IN BOOLEAN := TRUE,
        id_pat_health_plan_in      IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_health_plan_nin     IN BOOLEAN := TRUE,
        id_pat_exemption_in        IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        id_pat_exemption_nin       IN BOOLEAN := TRUE,
        diagnosis_notes_in         IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        diagnosis_notes_nin        IN BOOLEAN := TRUE,
        id_clinical_purpose_in     IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        id_clinical_purpose_nin    IN BOOLEAN := TRUE,
        clinical_purpose_notes_in  IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        clinical_purpose_notes_nin IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_rehab_presc_in          => id_rehab_presc_in,
            dt_rehab_presc_in          => dt_rehab_presc_in,
            dt_rehab_presc_nin         => dt_rehab_presc_nin,
            id_professional_in         => id_professional_in,
            id_professional_nin        => id_professional_nin,
            id_institution_in          => id_institution_in,
            id_institution_nin         => id_institution_nin,
            id_rehab_area_interv_in    => id_rehab_area_interv_in,
            id_rehab_area_interv_nin   => id_rehab_area_interv_nin,
            id_rehab_sch_need_in       => id_rehab_sch_need_in,
            id_rehab_sch_need_nin      => id_rehab_sch_need_nin,
            id_exec_institution_in     => id_exec_institution_in,
            id_exec_institution_nin    => id_exec_institution_nin,
            exec_per_session_in        => exec_per_session_in,
            exec_per_session_nin       => exec_per_session_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            notes_in                   => notes_in,
            notes_nin                  => notes_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            notes_cancel_in            => notes_cancel_in,
            notes_cancel_nin           => notes_cancel_nin,
            dt_cancel_in               => dt_cancel_in,
            dt_cancel_nin              => dt_cancel_nin,
            id_cancel_professional_in  => id_cancel_professional_in,
            id_cancel_professional_nin => id_cancel_professional_nin,
            flg_presc_status_in        => flg_presc_status_in,
            flg_presc_status_nin       => flg_presc_status_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            notes_change_in            => notes_change_in,
            notes_change_nin           => notes_change_nin,
            id_codification_in         => id_codification_in,
            id_codification_nin        => id_codification_nin,
            flg_referral_in            => flg_referral_in,
            flg_referral_nin           => flg_referral_nin,
            flg_laterality_in          => flg_laterality_in,
            flg_laterality_nin         => flg_laterality_nin,
            id_not_order_reason_in     => id_not_order_reason_in,
            id_not_order_reason_nin    => id_not_order_reason_nin,
            id_pat_health_plan_in      => id_pat_health_plan_in,
            id_pat_health_plan_nin     => id_pat_health_plan_nin,
            id_pat_exemption_in        => id_pat_exemption_in,
            id_pat_exemption_nin       => id_pat_exemption_nin,
            diagnosis_notes_in         => diagnosis_notes_in,
            diagnosis_notes_nin        => diagnosis_notes_nin,
            id_clinical_purpose_in     => id_clinical_purpose_in,
            id_clinical_purpose_nin    => id_clinical_purpose_nin,
            clinical_purpose_notes_in  => clinical_purpose_notes_in,
            clinical_purpose_notes_nin => clinical_purpose_notes_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        dt_rehab_presc_in          IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        dt_rehab_presc_nin         IN BOOLEAN := TRUE,
        id_professional_in         IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        id_institution_in          IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        id_rehab_area_interv_in    IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_area_interv_nin   IN BOOLEAN := TRUE,
        id_rehab_sch_need_in       IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_rehab_sch_need_nin      IN BOOLEAN := TRUE,
        id_exec_institution_in     IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        id_exec_institution_nin    IN BOOLEAN := TRUE,
        exec_per_session_in        IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        exec_per_session_nin       IN BOOLEAN := TRUE,
        flg_status_in              IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        notes_in                   IN rehab_presc.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        dt_cancel_in               IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        id_cancel_professional_in  IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        id_cancel_professional_nin IN BOOLEAN := TRUE,
        flg_presc_status_in        IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        flg_presc_status_nin       IN BOOLEAN := TRUE,
        create_user_in             IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        notes_change_in            IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        notes_change_nin           IN BOOLEAN := TRUE,
        id_codification_in         IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        id_codification_nin        IN BOOLEAN := TRUE,
        flg_referral_in            IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_referral_nin           IN BOOLEAN := TRUE,
        flg_laterality_in          IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        flg_laterality_nin         IN BOOLEAN := TRUE,
        id_not_order_reason_in     IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_not_order_reason_nin    IN BOOLEAN := TRUE,
        id_pat_health_plan_in      IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_health_plan_nin     IN BOOLEAN := TRUE,
        id_pat_exemption_in        IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        id_pat_exemption_nin       IN BOOLEAN := TRUE,
        diagnosis_notes_in         IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        diagnosis_notes_nin        IN BOOLEAN := TRUE,
        id_clinical_purpose_in     IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        id_clinical_purpose_nin    IN BOOLEAN := TRUE,
        clinical_purpose_notes_in  IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        clinical_purpose_notes_nin IN BOOLEAN := TRUE,
        where_in                   IN VARCHAR2,
        handle_error_in            IN BOOLEAN := FALSE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_dt_rehab_presc_n         NUMBER(1) := sys.diutil.bool_to_int(dt_rehab_presc_nin);
        l_id_professional_n        NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_id_institution_n         NUMBER(1) := sys.diutil.bool_to_int(id_institution_nin);
        l_id_rehab_area_interv_n   NUMBER(1) := sys.diutil.bool_to_int(id_rehab_area_interv_nin);
        l_id_rehab_sch_need_n      NUMBER(1) := sys.diutil.bool_to_int(id_rehab_sch_need_nin);
        l_id_exec_institution_n    NUMBER(1) := sys.diutil.bool_to_int(id_exec_institution_nin);
        l_exec_per_session_n       NUMBER(1) := sys.diutil.bool_to_int(exec_per_session_nin);
        l_flg_status_n             NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_notes_n                  NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n       NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_dt_cancel_n              NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_cancel_professional_n NUMBER(1) := sys.diutil.bool_to_int(id_cancel_professional_nin);
        l_flg_presc_status_n       NUMBER(1) := sys.diutil.bool_to_int(flg_presc_status_nin);
        l_create_user_n            NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_notes_change_n           NUMBER(1) := sys.diutil.bool_to_int(notes_change_nin);
        l_id_codification_n        NUMBER(1) := sys.diutil.bool_to_int(id_codification_nin);
        l_flg_referral_n           NUMBER(1) := sys.diutil.bool_to_int(flg_referral_nin);
        l_flg_laterality_n         NUMBER(1) := sys.diutil.bool_to_int(flg_laterality_nin);
        l_id_not_order_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_not_order_reason_nin);
        l_id_pat_health_plan_n     NUMBER(1) := sys.diutil.bool_to_int(id_pat_health_plan_nin);
        l_id_pat_exemption_n       NUMBER(1) := sys.diutil.bool_to_int(id_pat_exemption_nin);
        l_diagnosis_notes_n        NUMBER(1) := sys.diutil.bool_to_int(diagnosis_notes_nin);
        l_id_clinical_purpose_n    NUMBER(1) := sys.diutil.bool_to_int(id_clinical_purpose_nin);
        l_clinical_purpose_notes_n NUMBER(1) := sys.diutil.bool_to_int(clinical_purpose_notes_nin);
    BEGIN
        l_dt_rehab_presc_n         := sys.diutil.bool_to_int(dt_rehab_presc_nin);
        l_id_professional_n        := sys.diutil.bool_to_int(id_professional_nin);
        l_id_institution_n         := sys.diutil.bool_to_int(id_institution_nin);
        l_id_rehab_area_interv_n   := sys.diutil.bool_to_int(id_rehab_area_interv_nin);
        l_id_rehab_sch_need_n      := sys.diutil.bool_to_int(id_rehab_sch_need_nin);
        l_id_exec_institution_n    := sys.diutil.bool_to_int(id_exec_institution_nin);
        l_exec_per_session_n       := sys.diutil.bool_to_int(exec_per_session_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_notes_n                  := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n       := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n           := sys.diutil.bool_to_int(notes_cancel_nin);
        l_dt_cancel_n              := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_cancel_professional_n := sys.diutil.bool_to_int(id_cancel_professional_nin);
        l_flg_presc_status_n       := sys.diutil.bool_to_int(flg_presc_status_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_notes_change_n           := sys.diutil.bool_to_int(notes_change_nin);
        l_id_codification_n        := sys.diutil.bool_to_int(id_codification_nin);
        l_flg_referral_n           := sys.diutil.bool_to_int(flg_referral_nin);
        l_flg_laterality_n         := sys.diutil.bool_to_int(flg_laterality_nin);
        l_id_not_order_reason_n    := sys.diutil.bool_to_int(id_not_order_reason_nin);
        l_id_pat_health_plan_n     := sys.diutil.bool_to_int(id_pat_health_plan_nin);
        l_id_pat_exemption_n       := sys.diutil.bool_to_int(id_pat_exemption_nin);
        l_diagnosis_notes_n        := sys.diutil.bool_to_int(diagnosis_notes_nin);
        l_id_clinical_purpose_n    := sys.diutil.bool_to_int(id_clinical_purpose_nin);
        l_clinical_purpose_notes_n := sys.diutil.bool_to_int(clinical_purpose_notes_nin);
        l_sql                      := 'UPDATE rehab_presc SET' || ' DT_REHAB_PRESC = decode (' || l_dt_rehab_presc_n ||
                                      ',0,:DT_REHAB_PRESC_in, NVL (:DT_REHAB_PRESC_in, DT_REHAB_PRESC)) ' || ',' ||
                                      ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                                      ',0,:ID_PROFESSIONAL_in, NVL (:ID_PROFESSIONAL_in, ID_PROFESSIONAL)) ' || ',' ||
                                      ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                                      ',0,:ID_INSTITUTION_in, NVL (:ID_INSTITUTION_in, ID_INSTITUTION)) ' || ',' ||
                                      ' ID_REHAB_AREA_INTERV = decode (' || l_id_rehab_area_interv_n ||
                                      ',0,:ID_REHAB_AREA_INTERV_in, NVL (:ID_REHAB_AREA_INTERV_in, ID_REHAB_AREA_INTERV)) ' || ',' ||
                                      ' ID_REHAB_SCH_NEED = decode (' || l_id_rehab_sch_need_n ||
                                      ',0,:ID_REHAB_SCH_NEED_in, NVL (:ID_REHAB_SCH_NEED_in, ID_REHAB_SCH_NEED)) ' || ',' ||
                                      ' ID_EXEC_INSTITUTION = decode (' || l_id_exec_institution_n ||
                                      ',0,:ID_EXEC_INSTITUTION_in, NVL (:ID_EXEC_INSTITUTION_in, ID_EXEC_INSTITUTION)) ' || ',' ||
                                      ' EXEC_PER_SESSION = decode (' || l_exec_per_session_n ||
                                      ',0,:EXEC_PER_SESSION_in, NVL (:EXEC_PER_SESSION_in, EXEC_PER_SESSION)) ' || ',' ||
                                      ' FLG_STATUS = decode (' || l_flg_status_n ||
                                      ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                      ' NOTES = decode (' || l_notes_n || ',0,:NOTES_in, NVL (:NOTES_in, NOTES)) ' || ',' ||
                                      ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                                      ',0,:ID_CANCEL_REASON_in, NVL (:ID_CANCEL_REASON_in, ID_CANCEL_REASON)) ' || ',' ||
                                      ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                                      ',0,:NOTES_CANCEL_in, NVL (:NOTES_CANCEL_in, NOTES_CANCEL)) ' || ',' ||
                                      ' DT_CANCEL = decode (' || l_dt_cancel_n ||
                                      ',0,:DT_CANCEL_in, NVL (:DT_CANCEL_in, DT_CANCEL)) ' || ',' ||
                                      ' ID_CANCEL_PROFESSIONAL = decode (' || l_id_cancel_professional_n ||
                                      ',0,:ID_CANCEL_PROFESSIONAL_in, NVL (:ID_CANCEL_PROFESSIONAL_in, ID_CANCEL_PROFESSIONAL)) ' || ',' ||
                                      ' FLG_PRESC_STATUS = decode (' || l_flg_presc_status_n ||
                                      ',0,:FLG_PRESC_STATUS_in, NVL (:FLG_PRESC_STATUS_in, FLG_PRESC_STATUS)) ' || ',' ||
                                      ' CREATE_USER = decode (' || l_create_user_n ||
                                      ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                      ' CREATE_TIME = decode (' || l_create_time_n ||
                                      ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                      ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                      ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                      ' UPDATE_USER = decode (' || l_update_user_n ||
                                      ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                      ' UPDATE_TIME = decode (' || l_update_time_n ||
                                      ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                      ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                      ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                      ' NOTES_CHANGE = decode (' || l_notes_change_n ||
                                      ',0,:NOTES_CHANGE_in, NVL (:NOTES_CHANGE_in, NOTES_CHANGE)) ' || ',' ||
                                      ' ID_CODIFICATION = decode (' || l_id_codification_n ||
                                      ',0,:ID_CODIFICATION_in, NVL (:ID_CODIFICATION_in, ID_CODIFICATION)) ' || ',' ||
                                      ' FLG_REFERRAL = decode (' || l_flg_referral_n ||
                                      ',0,:FLG_REFERRAL_in, NVL (:FLG_REFERRAL_in, FLG_REFERRAL)) ' || ',' ||
                                      ' FLG_LATERALITY = decode (' || l_flg_laterality_n ||
                                      ',0,:FLG_LATERALITY_in, NVL (:FLG_LATERALITY_in, FLG_LATERALITY)) ' || ',' ||
                                      ' ID_NOT_ORDER_REASON = decode (' || l_id_not_order_reason_n ||
                                      ',0,:ID_NOT_ORDER_REASON_in, NVL (:ID_NOT_ORDER_REASON_in, ID_NOT_ORDER_REASON)) ' || ',' ||
                                      ' ID_PAT_HEALTH_PLAN = decode (' || l_id_pat_health_plan_n ||
                                      ',0,:ID_PAT_HEALTH_PLAN_in, NVL (:ID_PAT_HEALTH_PLAN_in, ID_PAT_HEALTH_PLAN)) ' || ',' ||
                                      ' ID_PAT_EXEMPTION = decode (' || l_id_pat_exemption_n ||
                                      ',0,:ID_PAT_EXEMPTION_in, NVL (:ID_PAT_EXEMPTION_in, ID_PAT_EXEMPTION)) ' || ',' ||
                                      ' DIAGNOSIS_NOTES = decode (' || l_diagnosis_notes_n ||
                                      ',0,:DIAGNOSIS_NOTES_in, NVL (:DIAGNOSIS_NOTES_in, DIAGNOSIS_NOTES)) ' || ',' ||
                                      ' ID_CLINICAL_PURPOSE = decode (' || l_id_clinical_purpose_n ||
                                      ',0,:ID_CLINICAL_PURPOSE_in, NVL (:ID_CLINICAL_PURPOSE_in, ID_CLINICAL_PURPOSE)) ' || ',' ||
                                      ' CLINICAL_PURPOSE_NOTES = decode (' || l_clinical_purpose_notes_n ||
                                      ',0,:CLINICAL_PURPOSE_NOTES_in, NVL (:CLINICAL_PURPOSE_NOTES_in, CLINICAL_PURPOSE_NOTES)) ' ||
                                      ' where ' || nvl(where_in, '(1=1)') ||
                                      ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN dt_rehab_presc_in, id_professional_in, id_institution_in, id_rehab_area_interv_in, id_rehab_sch_need_in, id_exec_institution_in, exec_per_session_in, flg_status_in, notes_in, id_cancel_reason_in, notes_cancel_in, dt_cancel_in, id_cancel_professional_in, flg_presc_status_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, notes_change_in, id_codification_in, flg_referral_in, flg_laterality_in, id_not_order_reason_in, id_pat_health_plan_in, id_pat_exemption_in, diagnosis_notes_in, id_clinical_purpose_in, clinical_purpose_notes_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        dt_rehab_presc_in          IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        dt_rehab_presc_nin         IN BOOLEAN := TRUE,
        id_professional_in         IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        id_institution_in          IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_institution_nin         IN BOOLEAN := TRUE,
        id_rehab_area_interv_in    IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_area_interv_nin   IN BOOLEAN := TRUE,
        id_rehab_sch_need_in       IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_rehab_sch_need_nin      IN BOOLEAN := TRUE,
        id_exec_institution_in     IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        id_exec_institution_nin    IN BOOLEAN := TRUE,
        exec_per_session_in        IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        exec_per_session_nin       IN BOOLEAN := TRUE,
        flg_status_in              IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        notes_in                   IN rehab_presc.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        notes_cancel_in            IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        dt_cancel_in               IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        id_cancel_professional_in  IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        id_cancel_professional_nin IN BOOLEAN := TRUE,
        flg_presc_status_in        IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        flg_presc_status_nin       IN BOOLEAN := TRUE,
        create_user_in             IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        notes_change_in            IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        notes_change_nin           IN BOOLEAN := TRUE,
        id_codification_in         IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        id_codification_nin        IN BOOLEAN := TRUE,
        flg_referral_in            IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_referral_nin           IN BOOLEAN := TRUE,
        flg_laterality_in          IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        flg_laterality_nin         IN BOOLEAN := TRUE,
        id_not_order_reason_in     IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_not_order_reason_nin    IN BOOLEAN := TRUE,
        id_pat_health_plan_in      IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_health_plan_nin     IN BOOLEAN := TRUE,
        id_pat_exemption_in        IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        id_pat_exemption_nin       IN BOOLEAN := TRUE,
        diagnosis_notes_in         IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        diagnosis_notes_nin        IN BOOLEAN := TRUE,
        id_clinical_purpose_in     IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        id_clinical_purpose_nin    IN BOOLEAN := TRUE,
        clinical_purpose_notes_in  IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        clinical_purpose_notes_nin IN BOOLEAN := TRUE,
        where_in                   IN VARCHAR2,
        handle_error_in            IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(dt_rehab_presc_in          => dt_rehab_presc_in,
            dt_rehab_presc_nin         => dt_rehab_presc_nin,
            id_professional_in         => id_professional_in,
            id_professional_nin        => id_professional_nin,
            id_institution_in          => id_institution_in,
            id_institution_nin         => id_institution_nin,
            id_rehab_area_interv_in    => id_rehab_area_interv_in,
            id_rehab_area_interv_nin   => id_rehab_area_interv_nin,
            id_rehab_sch_need_in       => id_rehab_sch_need_in,
            id_rehab_sch_need_nin      => id_rehab_sch_need_nin,
            id_exec_institution_in     => id_exec_institution_in,
            id_exec_institution_nin    => id_exec_institution_nin,
            exec_per_session_in        => exec_per_session_in,
            exec_per_session_nin       => exec_per_session_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            notes_in                   => notes_in,
            notes_nin                  => notes_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            notes_cancel_in            => notes_cancel_in,
            notes_cancel_nin           => notes_cancel_nin,
            dt_cancel_in               => dt_cancel_in,
            dt_cancel_nin              => dt_cancel_nin,
            id_cancel_professional_in  => id_cancel_professional_in,
            id_cancel_professional_nin => id_cancel_professional_nin,
            flg_presc_status_in        => flg_presc_status_in,
            flg_presc_status_nin       => flg_presc_status_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            notes_change_in            => notes_change_in,
            notes_change_nin           => notes_change_nin,
            id_codification_in         => id_codification_in,
            id_codification_nin        => id_codification_nin,
            flg_referral_in            => flg_referral_in,
            flg_referral_nin           => flg_referral_nin,
            flg_laterality_in          => flg_laterality_in,
            flg_laterality_nin         => flg_laterality_nin,
            id_not_order_reason_in     => id_not_order_reason_in,
            id_not_order_reason_nin    => id_not_order_reason_nin,
            id_pat_health_plan_in      => id_pat_health_plan_in,
            id_pat_health_plan_nin     => id_pat_health_plan_nin,
            id_pat_exemption_in        => id_pat_exemption_in,
            id_pat_exemption_nin       => id_pat_exemption_nin,
            diagnosis_notes_in         => diagnosis_notes_in,
            diagnosis_notes_nin        => diagnosis_notes_nin,
            id_clinical_purpose_in     => id_clinical_purpose_in,
            id_clinical_purpose_nin    => id_clinical_purpose_nin,
            clinical_purpose_notes_in  => clinical_purpose_notes_in,
            clinical_purpose_notes_nin => clinical_purpose_notes_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_rehab_presc_in         IN rehab_presc.id_rehab_presc%TYPE,
        dt_rehab_presc_in         IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_institution_in         IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_rehab_area_interv_in   IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_sch_need_in      IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_exec_institution_in    IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        exec_per_session_in       IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        notes_in                  IN rehab_presc.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        flg_presc_status_in       IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        create_user_in            IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        notes_change_in           IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        id_codification_in        IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        flg_referral_in           IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_laterality_in         IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_pat_health_plan_in     IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_exemption_in       IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        diagnosis_notes_in        IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        id_clinical_purpose_in    IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        clinical_purpose_notes_in IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := FALSE,
        rows_out                  IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_rehab_presc_in         => id_rehab_presc_in,
            dt_rehab_presc_in         => dt_rehab_presc_in,
            id_professional_in        => id_professional_in,
            id_institution_in         => id_institution_in,
            id_rehab_area_interv_in   => id_rehab_area_interv_in,
            id_rehab_sch_need_in      => id_rehab_sch_need_in,
            id_exec_institution_in    => id_exec_institution_in,
            exec_per_session_in       => exec_per_session_in,
            flg_status_in             => flg_status_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            notes_cancel_in           => notes_cancel_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            flg_presc_status_in       => flg_presc_status_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            notes_change_in           => notes_change_in,
            id_codification_in        => id_codification_in,
            flg_referral_in           => flg_referral_in,
            flg_laterality_in         => flg_laterality_in,
            id_not_order_reason_in    => id_not_order_reason_in,
            id_pat_health_plan_in     => id_pat_health_plan_in,
            id_pat_exemption_in       => id_pat_exemption_in,
            diagnosis_notes_in        => diagnosis_notes_in,
            id_clinical_purpose_in    => id_clinical_purpose_in,
            clinical_purpose_notes_in => clinical_purpose_notes_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_rehab_presc_in         => id_rehab_presc_in,
                dt_rehab_presc_in         => dt_rehab_presc_in,
                id_professional_in        => id_professional_in,
                id_institution_in         => id_institution_in,
                id_rehab_area_interv_in   => id_rehab_area_interv_in,
                id_rehab_sch_need_in      => id_rehab_sch_need_in,
                id_exec_institution_in    => id_exec_institution_in,
                exec_per_session_in       => exec_per_session_in,
                flg_status_in             => flg_status_in,
                notes_in                  => notes_in,
                id_cancel_reason_in       => id_cancel_reason_in,
                notes_cancel_in           => notes_cancel_in,
                dt_cancel_in              => dt_cancel_in,
                id_cancel_professional_in => id_cancel_professional_in,
                flg_presc_status_in       => flg_presc_status_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                notes_change_in           => notes_change_in,
                id_codification_in        => id_codification_in,
                flg_referral_in           => flg_referral_in,
                flg_laterality_in         => flg_laterality_in,
                id_not_order_reason_in    => id_not_order_reason_in,
                id_pat_health_plan_in     => id_pat_health_plan_in,
                id_pat_exemption_in       => id_pat_exemption_in,
                diagnosis_notes_in        => diagnosis_notes_in,
                id_clinical_purpose_in    => id_clinical_purpose_in,
                clinical_purpose_notes_in => clinical_purpose_notes_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_rehab_presc_in         IN rehab_presc.id_rehab_presc%TYPE,
        dt_rehab_presc_in         IN rehab_presc.dt_rehab_presc%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_presc.id_professional%TYPE DEFAULT NULL,
        id_institution_in         IN rehab_presc.id_institution%TYPE DEFAULT NULL,
        id_rehab_area_interv_in   IN rehab_presc.id_rehab_area_interv%TYPE DEFAULT NULL,
        id_rehab_sch_need_in      IN rehab_presc.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_exec_institution_in    IN rehab_presc.id_exec_institution%TYPE DEFAULT NULL,
        exec_per_session_in       IN rehab_presc.exec_per_session%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_presc.flg_status%TYPE DEFAULT NULL,
        notes_in                  IN rehab_presc.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_presc.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_presc.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_presc.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_presc.id_cancel_professional%TYPE DEFAULT NULL,
        flg_presc_status_in       IN rehab_presc.flg_presc_status%TYPE DEFAULT NULL,
        create_user_in            IN rehab_presc.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_presc.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_presc.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_presc.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_presc.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_presc.update_institution%TYPE DEFAULT NULL,
        notes_change_in           IN rehab_presc.notes_change%TYPE DEFAULT NULL,
        id_codification_in        IN rehab_presc.id_codification%TYPE DEFAULT NULL,
        flg_referral_in           IN rehab_presc.flg_referral%TYPE DEFAULT NULL,
        flg_laterality_in         IN rehab_presc.flg_laterality%TYPE DEFAULT NULL,
        id_not_order_reason_in    IN rehab_presc.id_not_order_reason%TYPE DEFAULT NULL,
        id_pat_health_plan_in     IN rehab_presc.id_pat_health_plan%TYPE DEFAULT NULL,
        id_pat_exemption_in       IN rehab_presc.id_pat_exemption%TYPE DEFAULT NULL,
        diagnosis_notes_in        IN rehab_presc.diagnosis_notes%TYPE DEFAULT NULL,
        id_clinical_purpose_in    IN rehab_presc.id_clinical_purpose%TYPE DEFAULT NULL,
        clinical_purpose_notes_in IN rehab_presc.clinical_purpose_notes%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_rehab_presc_in,
                dt_rehab_presc_in,
                id_professional_in,
                id_institution_in,
                id_rehab_area_interv_in,
                id_rehab_sch_need_in,
                id_exec_institution_in,
                exec_per_session_in,
                flg_status_in,
                notes_in,
                id_cancel_reason_in,
                notes_cancel_in,
                dt_cancel_in,
                id_cancel_professional_in,
                flg_presc_status_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                notes_change_in,
                id_codification_in,
                flg_referral_in,
                flg_laterality_in,
                id_not_order_reason_in,
                id_pat_health_plan_in,
                id_pat_exemption_in,
                diagnosis_notes_in,
                id_clinical_purpose_in,
                clinical_purpose_notes_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN rehab_presc%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_rehab_presc_in         => rec_in.id_rehab_presc,
            dt_rehab_presc_in         => rec_in.dt_rehab_presc,
            id_professional_in        => rec_in.id_professional,
            id_institution_in         => rec_in.id_institution,
            id_rehab_area_interv_in   => rec_in.id_rehab_area_interv,
            id_rehab_sch_need_in      => rec_in.id_rehab_sch_need,
            id_exec_institution_in    => rec_in.id_exec_institution,
            exec_per_session_in       => rec_in.exec_per_session,
            flg_status_in             => rec_in.flg_status,
            notes_in                  => rec_in.notes,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            notes_cancel_in           => rec_in.notes_cancel,
            dt_cancel_in              => rec_in.dt_cancel,
            id_cancel_professional_in => rec_in.id_cancel_professional,
            flg_presc_status_in       => rec_in.flg_presc_status,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            notes_change_in           => rec_in.notes_change,
            id_codification_in        => rec_in.id_codification,
            flg_referral_in           => rec_in.flg_referral,
            flg_laterality_in         => rec_in.flg_laterality,
            id_not_order_reason_in    => rec_in.id_not_order_reason,
            id_pat_health_plan_in     => rec_in.id_pat_health_plan,
            id_pat_exemption_in       => rec_in.id_pat_exemption,
            diagnosis_notes_in        => rec_in.diagnosis_notes,
            id_clinical_purpose_in    => rec_in.id_clinical_purpose,
            clinical_purpose_notes_in => rec_in.clinical_purpose_notes,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN rehab_presc%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_rehab_presc_in         => rec_in.id_rehab_presc,
            dt_rehab_presc_in         => rec_in.dt_rehab_presc,
            id_professional_in        => rec_in.id_professional,
            id_institution_in         => rec_in.id_institution,
            id_rehab_area_interv_in   => rec_in.id_rehab_area_interv,
            id_rehab_sch_need_in      => rec_in.id_rehab_sch_need,
            id_exec_institution_in    => rec_in.id_exec_institution,
            exec_per_session_in       => rec_in.exec_per_session,
            flg_status_in             => rec_in.flg_status,
            notes_in                  => rec_in.notes,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            notes_cancel_in           => rec_in.notes_cancel,
            dt_cancel_in              => rec_in.dt_cancel,
            id_cancel_professional_in => rec_in.id_cancel_professional,
            flg_presc_status_in       => rec_in.flg_presc_status,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            notes_change_in           => rec_in.notes_change,
            id_codification_in        => rec_in.id_codification,
            flg_referral_in           => rec_in.flg_referral,
            flg_laterality_in         => rec_in.flg_laterality,
            id_not_order_reason_in    => rec_in.id_not_order_reason,
            id_pat_health_plan_in     => rec_in.id_pat_health_plan,
            id_pat_exemption_in       => rec_in.id_pat_exemption,
            diagnosis_notes_in        => rec_in.diagnosis_notes,
            id_clinical_purpose_in    => rec_in.id_clinical_purpose,
            clinical_purpose_notes_in => rec_in.clinical_purpose_notes,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN rehab_presc_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_rehab_presc         id_rehab_presc_cc;
        l_dt_rehab_presc         dt_rehab_presc_cc;
        l_id_professional        id_professional_cc;
        l_id_institution         id_institution_cc;
        l_id_rehab_area_interv   id_rehab_area_interv_cc;
        l_id_rehab_sch_need      id_rehab_sch_need_cc;
        l_id_exec_institution    id_exec_institution_cc;
        l_exec_per_session       exec_per_session_cc;
        l_flg_status             flg_status_cc;
        l_notes                  notes_cc;
        l_id_cancel_reason       id_cancel_reason_cc;
        l_notes_cancel           notes_cancel_cc;
        l_dt_cancel              dt_cancel_cc;
        l_id_cancel_professional id_cancel_professional_cc;
        l_flg_presc_status       flg_presc_status_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
        l_notes_change           notes_change_cc;
        l_id_codification        id_codification_cc;
        l_flg_referral           flg_referral_cc;
        l_flg_laterality         flg_laterality_cc;
        l_id_not_order_reason    id_not_order_reason_cc;
        l_id_pat_health_plan     id_pat_health_plan_cc;
        l_id_pat_exemption       id_pat_exemption_cc;
        l_diagnosis_notes        diagnosis_notes_cc;
        l_id_clinical_purpose    id_clinical_purpose_cc;
        l_clinical_purpose_notes clinical_purpose_notes_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_rehab_presc(i) := col_in(i).id_rehab_presc;
            l_dt_rehab_presc(i) := col_in(i).dt_rehab_presc;
            l_id_professional(i) := col_in(i).id_professional;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_rehab_area_interv(i) := col_in(i).id_rehab_area_interv;
            l_id_rehab_sch_need(i) := col_in(i).id_rehab_sch_need;
            l_id_exec_institution(i) := col_in(i).id_exec_institution;
            l_exec_per_session(i) := col_in(i).exec_per_session;
            l_flg_status(i) := col_in(i).flg_status;
            l_notes(i) := col_in(i).notes;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_dt_cancel(i) := col_in(i).dt_cancel;
            l_id_cancel_professional(i) := col_in(i).id_cancel_professional;
            l_flg_presc_status(i) := col_in(i).flg_presc_status;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_notes_change(i) := col_in(i).notes_change;
            l_id_codification(i) := col_in(i).id_codification;
            l_flg_referral(i) := col_in(i).flg_referral;
            l_flg_laterality(i) := col_in(i).flg_laterality;
            l_id_not_order_reason(i) := col_in(i).id_not_order_reason;
            l_id_pat_health_plan(i) := col_in(i).id_pat_health_plan;
            l_id_pat_exemption(i) := col_in(i).id_pat_exemption;
            l_diagnosis_notes(i) := col_in(i).diagnosis_notes;
            l_id_clinical_purpose(i) := col_in(i).id_clinical_purpose;
            l_clinical_purpose_notes(i) := col_in(i).clinical_purpose_notes;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE rehab_presc
                   SET dt_rehab_presc         = nvl(l_dt_rehab_presc(i), dt_rehab_presc),
                       id_professional        = nvl(l_id_professional(i), id_professional),
                       id_institution         = nvl(l_id_institution(i), id_institution),
                       id_rehab_area_interv   = nvl(l_id_rehab_area_interv(i), id_rehab_area_interv),
                       id_rehab_sch_need      = nvl(l_id_rehab_sch_need(i), id_rehab_sch_need),
                       id_exec_institution    = nvl(l_id_exec_institution(i), id_exec_institution),
                       exec_per_session       = nvl(l_exec_per_session(i), exec_per_session),
                       flg_status             = nvl(l_flg_status(i), flg_status),
                       notes                  = nvl(l_notes(i), notes),
                       id_cancel_reason       = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       notes_cancel           = nvl(l_notes_cancel(i), notes_cancel),
                       dt_cancel              = nvl(l_dt_cancel(i), dt_cancel),
                       id_cancel_professional = nvl(l_id_cancel_professional(i), id_cancel_professional),
                       flg_presc_status       = nvl(l_flg_presc_status(i), flg_presc_status),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution),
                       notes_change           = nvl(l_notes_change(i), notes_change),
                       id_codification        = nvl(l_id_codification(i), id_codification),
                       flg_referral           = nvl(l_flg_referral(i), flg_referral),
                       flg_laterality         = nvl(l_flg_laterality(i), flg_laterality),
                       id_not_order_reason    = nvl(l_id_not_order_reason(i), id_not_order_reason),
                       id_pat_health_plan     = nvl(l_id_pat_health_plan(i), id_pat_health_plan),
                       id_pat_exemption       = nvl(l_id_pat_exemption(i), id_pat_exemption),
                       diagnosis_notes        = nvl(l_diagnosis_notes(i), diagnosis_notes),
                       id_clinical_purpose    = nvl(l_id_clinical_purpose(i), id_clinical_purpose),
                       clinical_purpose_notes = nvl(l_clinical_purpose_notes(i), clinical_purpose_notes)
                 WHERE id_rehab_presc = l_id_rehab_presc(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE rehab_presc
                   SET dt_rehab_presc         = l_dt_rehab_presc(i),
                       id_professional        = l_id_professional(i),
                       id_institution         = l_id_institution(i),
                       id_rehab_area_interv   = l_id_rehab_area_interv(i),
                       id_rehab_sch_need      = l_id_rehab_sch_need(i),
                       id_exec_institution    = l_id_exec_institution(i),
                       exec_per_session       = l_exec_per_session(i),
                       flg_status             = l_flg_status(i),
                       notes                  = l_notes(i),
                       id_cancel_reason       = l_id_cancel_reason(i),
                       notes_cancel           = l_notes_cancel(i),
                       dt_cancel              = l_dt_cancel(i),
                       id_cancel_professional = l_id_cancel_professional(i),
                       flg_presc_status       = l_flg_presc_status(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i),
                       notes_change           = l_notes_change(i),
                       id_codification        = l_id_codification(i),
                       flg_referral           = l_flg_referral(i),
                       flg_laterality         = l_flg_laterality(i),
                       id_not_order_reason    = l_id_not_order_reason(i),
                       id_pat_health_plan     = l_id_pat_health_plan(i),
                       id_pat_exemption       = l_id_pat_exemption(i),
                       diagnosis_notes        = l_diagnosis_notes(i),
                       id_clinical_purpose    = l_id_clinical_purpose(i),
                       clinical_purpose_notes = l_clinical_purpose_notes(i)
                 WHERE id_rehab_presc = l_id_rehab_presc(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN rehab_presc_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE rehab_presc
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE rehab_presc
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE rehab_presc
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_rehab_presc_in IN rehab_presc.id_rehab_presc%TYPE,
        handle_error_in   IN BOOLEAN := FALSE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_presc
         WHERE id_rehab_presc = id_rehab_presc_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_rehab_presc_in IN rehab_presc.id_rehab_presc%TYPE,
        handle_error_in   IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_rehab_presc_in => id_rehab_presc_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this RPC_ID_CANCEL_REASON_FK foreign key value
    PROCEDURE del_rpc_id_cancel_reason_fk
    (
        id_cancel_reason_in IN rehab_presc.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := FALSE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_presc
         WHERE id_cancel_reason = id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_rpc_id_cancel_reason_fk;

    -- Delete all rows for this RPC_INN_FK foreign key value
    PROCEDURE del_rpc_inn_fk
    (
        id_exec_institution_in IN rehab_presc.id_exec_institution%TYPE,
        handle_error_in        IN BOOLEAN := FALSE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_presc
         WHERE id_exec_institution = id_exec_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_rpc_inn_fk;

    -- Delete all rows for this RPC_INN_FK2 foreign key value
    PROCEDURE del_rpc_inn_fk2
    (
        id_institution_in IN rehab_presc.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := FALSE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_presc
         WHERE id_institution = id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_rpc_inn_fk2;

    -- Delete all rows for this RPC_PROF_FK foreign key value
    PROCEDURE del_rpc_prof_fk
    (
        id_professional_in IN rehab_presc.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := FALSE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_presc
         WHERE id_professional = id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_rpc_prof_fk;

    -- Delete all rows for this RPC_PROF_FK2 foreign key value
    PROCEDURE del_rpc_prof_fk2
    (
        id_cancel_professional_in IN rehab_presc.id_cancel_professional%TYPE,
        handle_error_in           IN BOOLEAN := FALSE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_presc
         WHERE id_cancel_professional = id_cancel_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_rpc_prof_fk2;

    -- Delete all rows for this RPC_RAV_FK foreign key value
    PROCEDURE del_rpc_rav_fk
    (
        id_rehab_area_interv_in IN rehab_presc.id_rehab_area_interv%TYPE,
        handle_error_in         IN BOOLEAN := FALSE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_presc
         WHERE id_rehab_area_interv = id_rehab_area_interv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_rpc_rav_fk;

    -- Delete all rows for this RPC_RSD_FK foreign key value
    PROCEDURE del_rpc_rsd_fk
    (
        id_rehab_sch_need_in IN rehab_presc.id_rehab_sch_need%TYPE,
        handle_error_in      IN BOOLEAN := FALSE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_presc
         WHERE id_rehab_sch_need = id_rehab_sch_need_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_rpc_rsd_fk;

    -- Delete all rows for this RP_NOR_FK foreign key value
    PROCEDURE del_rp_nor_fk
    (
        id_not_order_reason_in IN rehab_presc.id_not_order_reason%TYPE,
        handle_error_in        IN BOOLEAN := FALSE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_presc
         WHERE id_not_order_reason = id_not_order_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_rp_nor_fk;

    -- Delete all rows for this RP_PHN_FK foreign key value
    PROCEDURE del_rp_phn_fk
    (
        id_pat_health_plan_in IN rehab_presc.id_pat_health_plan%TYPE,
        handle_error_in       IN BOOLEAN := FALSE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_presc
         WHERE id_pat_health_plan = id_pat_health_plan_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_rp_phn_fk;

    -- Delete all rows for this RP_PIO_FK foreign key value
    PROCEDURE del_rp_pio_fk
    (
        id_pat_exemption_in IN rehab_presc.id_pat_exemption%TYPE,
        handle_error_in     IN BOOLEAN := FALSE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_presc
         WHERE id_pat_exemption = id_pat_exemption_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_rp_pio_fk;

    -- Delete all rows for this RPC_ID_CANCEL_REASON_FK foreign key value
    PROCEDURE del_rpc_id_cancel_reason_fk
    (
        id_cancel_reason_in IN rehab_presc.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rpc_id_cancel_reason_fk(id_cancel_reason_in => id_cancel_reason_in,
                                    handle_error_in     => handle_error_in,
                                    rows_out            => rows_out);
    END del_rpc_id_cancel_reason_fk;

    -- Delete all rows for this RPC_INN_FK foreign key value
    PROCEDURE del_rpc_inn_fk
    (
        id_exec_institution_in IN rehab_presc.id_exec_institution%TYPE,
        handle_error_in        IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rpc_inn_fk(id_exec_institution_in => id_exec_institution_in,
                       handle_error_in        => handle_error_in,
                       rows_out               => rows_out);
    END del_rpc_inn_fk;

    -- Delete all rows for this RPC_INN_FK2 foreign key value
    PROCEDURE del_rpc_inn_fk2
    (
        id_institution_in IN rehab_presc.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rpc_inn_fk2(id_institution_in => id_institution_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_rpc_inn_fk2;

    -- Delete all rows for this RPC_PROF_FK foreign key value
    PROCEDURE del_rpc_prof_fk
    (
        id_professional_in IN rehab_presc.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rpc_prof_fk(id_professional_in => id_professional_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_rpc_prof_fk;

    -- Delete all rows for this RPC_PROF_FK2 foreign key value
    PROCEDURE del_rpc_prof_fk2
    (
        id_cancel_professional_in IN rehab_presc.id_cancel_professional%TYPE,
        handle_error_in           IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rpc_prof_fk2(id_cancel_professional_in => id_cancel_professional_in,
                         handle_error_in           => handle_error_in,
                         rows_out                  => rows_out);
    END del_rpc_prof_fk2;

    -- Delete all rows for this RPC_RAV_FK foreign key value
    PROCEDURE del_rpc_rav_fk
    (
        id_rehab_area_interv_in IN rehab_presc.id_rehab_area_interv%TYPE,
        handle_error_in         IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rpc_rav_fk(id_rehab_area_interv_in => id_rehab_area_interv_in,
                       handle_error_in         => handle_error_in,
                       rows_out                => rows_out);
    END del_rpc_rav_fk;

    -- Delete all rows for this RPC_RSD_FK foreign key value
    PROCEDURE del_rpc_rsd_fk
    (
        id_rehab_sch_need_in IN rehab_presc.id_rehab_sch_need%TYPE,
        handle_error_in      IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rpc_rsd_fk(id_rehab_sch_need_in => id_rehab_sch_need_in,
                       handle_error_in      => handle_error_in,
                       rows_out             => rows_out);
    END del_rpc_rsd_fk;

    -- Delete all rows for this RP_NOR_FK foreign key value
    PROCEDURE del_rp_nor_fk
    (
        id_not_order_reason_in IN rehab_presc.id_not_order_reason%TYPE,
        handle_error_in        IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rp_nor_fk(id_not_order_reason_in => id_not_order_reason_in,
                      handle_error_in        => handle_error_in,
                      rows_out               => rows_out);
    END del_rp_nor_fk;

    -- Delete all rows for this RP_PHN_FK foreign key value
    PROCEDURE del_rp_phn_fk
    (
        id_pat_health_plan_in IN rehab_presc.id_pat_health_plan%TYPE,
        handle_error_in       IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rp_phn_fk(id_pat_health_plan_in => id_pat_health_plan_in,
                      handle_error_in       => handle_error_in,
                      rows_out              => rows_out);
    END del_rp_phn_fk;

    -- Delete all rows for this RP_PIO_FK foreign key value
    PROCEDURE del_rp_pio_fk
    (
        id_pat_exemption_in IN rehab_presc.id_pat_exemption%TYPE,
        handle_error_in     IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rp_pio_fk(id_pat_exemption_in => id_pat_exemption_in,
                      handle_error_in     => handle_error_in,
                      rows_out            => rows_out);
    END del_rp_pio_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM rehab_presc';
        ELSE
            RETURN 'DELETE FROM rehab_presc WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(rehab_presc_inout IN OUT rehab_presc%ROWTYPE) IS
    BEGIN
        rehab_presc_inout.id_rehab_presc         := NULL;
        rehab_presc_inout.dt_rehab_presc         := NULL;
        rehab_presc_inout.id_professional        := NULL;
        rehab_presc_inout.id_institution         := NULL;
        rehab_presc_inout.id_rehab_area_interv   := NULL;
        rehab_presc_inout.id_rehab_sch_need      := NULL;
        rehab_presc_inout.id_exec_institution    := NULL;
        rehab_presc_inout.exec_per_session       := NULL;
        rehab_presc_inout.flg_status             := NULL;
        rehab_presc_inout.notes                  := NULL;
        rehab_presc_inout.id_cancel_reason       := NULL;
        rehab_presc_inout.notes_cancel           := NULL;
        rehab_presc_inout.dt_cancel              := NULL;
        rehab_presc_inout.id_cancel_professional := NULL;
        rehab_presc_inout.flg_presc_status       := NULL;
        rehab_presc_inout.create_user            := NULL;
        rehab_presc_inout.create_time            := NULL;
        rehab_presc_inout.create_institution     := NULL;
        rehab_presc_inout.update_user            := NULL;
        rehab_presc_inout.update_time            := NULL;
        rehab_presc_inout.update_institution     := NULL;
        rehab_presc_inout.notes_change           := NULL;
        rehab_presc_inout.id_codification        := NULL;
        rehab_presc_inout.flg_referral           := NULL;
        rehab_presc_inout.flg_laterality         := NULL;
        rehab_presc_inout.id_not_order_reason    := NULL;
        rehab_presc_inout.id_pat_health_plan     := NULL;
        rehab_presc_inout.id_pat_exemption       := NULL;
        rehab_presc_inout.diagnosis_notes        := NULL;
        rehab_presc_inout.id_clinical_purpose    := NULL;
        rehab_presc_inout.clinical_purpose_notes := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN rehab_presc%ROWTYPE IS
        l_rehab_presc rehab_presc%ROWTYPE;
    BEGIN
        RETURN l_rehab_presc;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN rehab_presc_tc IS
        data rehab_presc_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM rehab_presc
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN rehab_presc_tc IS
        data rehab_presc_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_rehab_presc;
/
