/*-- Last Change Revision: $Rev: 2027974 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:50 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_care_plan
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Fevereiro 21, 2011 15:15:56
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_care_plan_in        IN care_plan.id_care_plan%TYPE,
        id_prof_in             IN care_plan.id_prof%TYPE DEFAULT NULL,
        dt_care_plan_in        IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        id_patient_in          IN care_plan.id_patient%TYPE DEFAULT NULL,
        flg_status_in          IN care_plan.flg_status%TYPE DEFAULT NULL,
        str_status_in          IN care_plan.str_status%TYPE DEFAULT NULL,
        name_in                IN care_plan.name%TYPE DEFAULT NULL,
        id_care_plan_type_in   IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        dt_begin_in            IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_end_in              IN care_plan.dt_end%TYPE DEFAULT NULL,
        subject_type_in        IN care_plan.subject_type%TYPE DEFAULT NULL,
        id_subject_in          IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_prof_coordinator_in IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        goals_in               IN care_plan.goals%TYPE DEFAULT NULL,
        notes_in               IN care_plan.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in          IN care_plan.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN care_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN care_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN care_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN care_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN care_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN care_plan.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO care_plan
            (id_care_plan,
             id_prof,
             dt_care_plan,
             id_patient,
             flg_status,
             str_status,
             name,
             id_care_plan_type,
             dt_begin,
             dt_end,
             subject_type,
             id_subject,
             id_prof_coordinator,
             goals,
             notes,
             id_prof_cancel,
             dt_cancel,
             notes_cancel,
             id_episode,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_cancel_reason)
        VALUES
            (id_care_plan_in,
             id_prof_in,
             dt_care_plan_in,
             id_patient_in,
             flg_status_in,
             str_status_in,
             name_in,
             id_care_plan_type_in,
             dt_begin_in,
             dt_end_in,
             subject_type_in,
             id_subject_in,
             id_prof_coordinator_in,
             goals_in,
             notes_in,
             id_prof_cancel_in,
             dt_cancel_in,
             notes_cancel_in,
             id_episode_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_cancel_reason_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'CARE_PLAN');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    IF l_name = 'CPN_CPY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CARE_PLAN_TYPE',
                                                        value_in           => id_care_plan_type_in);
                    END IF;
                    IF l_name = 'CPN_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'CPN_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'CPN_PRL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF',
                                                        value_in           => id_prof_in);
                    END IF;
                    IF l_name = 'CPN_PRL_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_COORDINATOR',
                                                        value_in           => id_prof_coordinator_in);
                    END IF;
                    IF l_name = 'CPN_PRL_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_care_plan_in        IN care_plan.id_care_plan%TYPE,
        id_prof_in             IN care_plan.id_prof%TYPE DEFAULT NULL,
        dt_care_plan_in        IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        id_patient_in          IN care_plan.id_patient%TYPE DEFAULT NULL,
        flg_status_in          IN care_plan.flg_status%TYPE DEFAULT NULL,
        str_status_in          IN care_plan.str_status%TYPE DEFAULT NULL,
        name_in                IN care_plan.name%TYPE DEFAULT NULL,
        id_care_plan_type_in   IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        dt_begin_in            IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_end_in              IN care_plan.dt_end%TYPE DEFAULT NULL,
        subject_type_in        IN care_plan.subject_type%TYPE DEFAULT NULL,
        id_subject_in          IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_prof_coordinator_in IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        goals_in               IN care_plan.goals%TYPE DEFAULT NULL,
        notes_in               IN care_plan.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in          IN care_plan.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN care_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN care_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN care_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN care_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN care_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN care_plan.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_care_plan_in        => id_care_plan_in,
            id_prof_in             => id_prof_in,
            dt_care_plan_in        => dt_care_plan_in,
            id_patient_in          => id_patient_in,
            flg_status_in          => flg_status_in,
            str_status_in          => str_status_in,
            name_in                => name_in,
            id_care_plan_type_in   => id_care_plan_type_in,
            dt_begin_in            => dt_begin_in,
            dt_end_in              => dt_end_in,
            subject_type_in        => subject_type_in,
            id_subject_in          => id_subject_in,
            id_prof_coordinator_in => id_prof_coordinator_in,
            goals_in               => goals_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN care_plan%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec care_plan%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_care_plan := next_key(sequence_in);
        END IF;
        ins(id_care_plan_in        => l_rec.id_care_plan,
            id_prof_in             => l_rec.id_prof,
            dt_care_plan_in        => l_rec.dt_care_plan,
            id_patient_in          => l_rec.id_patient,
            flg_status_in          => l_rec.flg_status,
            str_status_in          => l_rec.str_status,
            name_in                => l_rec.name,
            id_care_plan_type_in   => l_rec.id_care_plan_type,
            dt_begin_in            => l_rec.dt_begin,
            dt_end_in              => l_rec.dt_end,
            subject_type_in        => l_rec.subject_type,
            id_subject_in          => l_rec.id_subject,
            id_prof_coordinator_in => l_rec.id_prof_coordinator,
            goals_in               => l_rec.goals,
            notes_in               => l_rec.notes,
            id_prof_cancel_in      => l_rec.id_prof_cancel,
            dt_cancel_in           => l_rec.dt_cancel,
            notes_cancel_in        => l_rec.notes_cancel,
            id_episode_in          => l_rec.id_episode,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            id_cancel_reason_in    => l_rec.id_cancel_reason,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN care_plan%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN care_plan.id_care_plan%TYPE
    
     IS
        retval care_plan.id_care_plan%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_care_plan.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_CARE_PLAN'));
    END next_key;

    PROCEDURE ins
    (
        id_prof_in             IN care_plan.id_prof%TYPE DEFAULT NULL,
        dt_care_plan_in        IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        id_patient_in          IN care_plan.id_patient%TYPE DEFAULT NULL,
        flg_status_in          IN care_plan.flg_status%TYPE DEFAULT NULL,
        str_status_in          IN care_plan.str_status%TYPE DEFAULT NULL,
        name_in                IN care_plan.name%TYPE DEFAULT NULL,
        id_care_plan_type_in   IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        dt_begin_in            IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_end_in              IN care_plan.dt_end%TYPE DEFAULT NULL,
        subject_type_in        IN care_plan.subject_type%TYPE DEFAULT NULL,
        id_subject_in          IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_prof_coordinator_in IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        goals_in               IN care_plan.goals%TYPE DEFAULT NULL,
        notes_in               IN care_plan.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in          IN care_plan.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN care_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN care_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN care_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN care_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN care_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN care_plan.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_care_plan_out       IN OUT care_plan.id_care_plan%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky care_plan.id_care_plan%TYPE := next_key;
    BEGIN
        ins(id_care_plan_in        => l_pky,
            id_prof_in             => id_prof_in,
            dt_care_plan_in        => dt_care_plan_in,
            id_patient_in          => id_patient_in,
            flg_status_in          => flg_status_in,
            str_status_in          => str_status_in,
            name_in                => name_in,
            id_care_plan_type_in   => id_care_plan_type_in,
            dt_begin_in            => dt_begin_in,
            dt_end_in              => dt_end_in,
            subject_type_in        => subject_type_in,
            id_subject_in          => id_subject_in,
            id_prof_coordinator_in => id_prof_coordinator_in,
            goals_in               => goals_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_care_plan_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_prof_in             IN care_plan.id_prof%TYPE DEFAULT NULL,
        dt_care_plan_in        IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        id_patient_in          IN care_plan.id_patient%TYPE DEFAULT NULL,
        flg_status_in          IN care_plan.flg_status%TYPE DEFAULT NULL,
        str_status_in          IN care_plan.str_status%TYPE DEFAULT NULL,
        name_in                IN care_plan.name%TYPE DEFAULT NULL,
        id_care_plan_type_in   IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        dt_begin_in            IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_end_in              IN care_plan.dt_end%TYPE DEFAULT NULL,
        subject_type_in        IN care_plan.subject_type%TYPE DEFAULT NULL,
        id_subject_in          IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_prof_coordinator_in IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        goals_in               IN care_plan.goals%TYPE DEFAULT NULL,
        notes_in               IN care_plan.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in          IN care_plan.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN care_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN care_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN care_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN care_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN care_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN care_plan.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_care_plan_out       IN OUT care_plan.id_care_plan%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_prof_in             => id_prof_in,
            dt_care_plan_in        => dt_care_plan_in,
            id_patient_in          => id_patient_in,
            flg_status_in          => flg_status_in,
            str_status_in          => str_status_in,
            name_in                => name_in,
            id_care_plan_type_in   => id_care_plan_type_in,
            dt_begin_in            => dt_begin_in,
            dt_end_in              => dt_end_in,
            subject_type_in        => subject_type_in,
            id_subject_in          => id_subject_in,
            id_prof_coordinator_in => id_prof_coordinator_in,
            goals_in               => goals_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_care_plan_out       => id_care_plan_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    FUNCTION ins
    (
        id_prof_in             IN care_plan.id_prof%TYPE DEFAULT NULL,
        dt_care_plan_in        IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        id_patient_in          IN care_plan.id_patient%TYPE DEFAULT NULL,
        flg_status_in          IN care_plan.flg_status%TYPE DEFAULT NULL,
        str_status_in          IN care_plan.str_status%TYPE DEFAULT NULL,
        name_in                IN care_plan.name%TYPE DEFAULT NULL,
        id_care_plan_type_in   IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        dt_begin_in            IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_end_in              IN care_plan.dt_end%TYPE DEFAULT NULL,
        subject_type_in        IN care_plan.subject_type%TYPE DEFAULT NULL,
        id_subject_in          IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_prof_coordinator_in IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        goals_in               IN care_plan.goals%TYPE DEFAULT NULL,
        notes_in               IN care_plan.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in          IN care_plan.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN care_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN care_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN care_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN care_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN care_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN care_plan.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) RETURN care_plan.id_care_plan%TYPE IS
        l_pky care_plan.id_care_plan%TYPE := next_key;
    BEGIN
        ins(id_care_plan_in        => l_pky,
            id_prof_in             => id_prof_in,
            dt_care_plan_in        => dt_care_plan_in,
            id_patient_in          => id_patient_in,
            flg_status_in          => flg_status_in,
            str_status_in          => str_status_in,
            name_in                => name_in,
            id_care_plan_type_in   => id_care_plan_type_in,
            dt_begin_in            => dt_begin_in,
            dt_end_in              => dt_end_in,
            subject_type_in        => subject_type_in,
            id_subject_in          => id_subject_in,
            id_prof_coordinator_in => id_prof_coordinator_in,
            goals_in               => goals_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_prof_in             IN care_plan.id_prof%TYPE DEFAULT NULL,
        dt_care_plan_in        IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        id_patient_in          IN care_plan.id_patient%TYPE DEFAULT NULL,
        flg_status_in          IN care_plan.flg_status%TYPE DEFAULT NULL,
        str_status_in          IN care_plan.str_status%TYPE DEFAULT NULL,
        name_in                IN care_plan.name%TYPE DEFAULT NULL,
        id_care_plan_type_in   IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        dt_begin_in            IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_end_in              IN care_plan.dt_end%TYPE DEFAULT NULL,
        subject_type_in        IN care_plan.subject_type%TYPE DEFAULT NULL,
        id_subject_in          IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_prof_coordinator_in IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        goals_in               IN care_plan.goals%TYPE DEFAULT NULL,
        notes_in               IN care_plan.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in          IN care_plan.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN care_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN care_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN care_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN care_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN care_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN care_plan.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) RETURN care_plan.id_care_plan%TYPE IS
        l_pky    care_plan.id_care_plan%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_care_plan_in        => l_pky,
            id_prof_in             => id_prof_in,
            dt_care_plan_in        => dt_care_plan_in,
            id_patient_in          => id_patient_in,
            flg_status_in          => flg_status_in,
            str_status_in          => str_status_in,
            name_in                => name_in,
            id_care_plan_type_in   => id_care_plan_type_in,
            dt_begin_in            => dt_begin_in,
            dt_end_in              => dt_end_in,
            subject_type_in        => subject_type_in,
            id_subject_in          => id_subject_in,
            id_prof_coordinator_in => id_prof_coordinator_in,
            goals_in               => goals_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_prof_in             IN care_plan.id_prof%TYPE DEFAULT NULL,
        dt_care_plan_in        IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        id_patient_in          IN care_plan.id_patient%TYPE DEFAULT NULL,
        flg_status_in          IN care_plan.flg_status%TYPE DEFAULT NULL,
        str_status_in          IN care_plan.str_status%TYPE DEFAULT NULL,
        name_in                IN care_plan.name%TYPE DEFAULT NULL,
        id_care_plan_type_in   IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        dt_begin_in            IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_end_in              IN care_plan.dt_end%TYPE DEFAULT NULL,
        subject_type_in        IN care_plan.subject_type%TYPE DEFAULT NULL,
        id_subject_in          IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_prof_coordinator_in IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        goals_in               IN care_plan.goals%TYPE DEFAULT NULL,
        notes_in               IN care_plan.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in          IN care_plan.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN care_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN care_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN care_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN care_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN care_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN care_plan.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky care_plan.id_care_plan%TYPE := next_key;
    BEGIN
        ins(id_care_plan_in        => l_pky,
            id_prof_in             => id_prof_in,
            dt_care_plan_in        => dt_care_plan_in,
            id_patient_in          => id_patient_in,
            flg_status_in          => flg_status_in,
            str_status_in          => str_status_in,
            name_in                => name_in,
            id_care_plan_type_in   => id_care_plan_type_in,
            dt_begin_in            => dt_begin_in,
            dt_end_in              => dt_end_in,
            subject_type_in        => subject_type_in,
            id_subject_in          => id_subject_in,
            id_prof_coordinator_in => id_prof_coordinator_in,
            goals_in               => goals_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_prof_in             IN care_plan.id_prof%TYPE DEFAULT NULL,
        dt_care_plan_in        IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        id_patient_in          IN care_plan.id_patient%TYPE DEFAULT NULL,
        flg_status_in          IN care_plan.flg_status%TYPE DEFAULT NULL,
        str_status_in          IN care_plan.str_status%TYPE DEFAULT NULL,
        name_in                IN care_plan.name%TYPE DEFAULT NULL,
        id_care_plan_type_in   IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        dt_begin_in            IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_end_in              IN care_plan.dt_end%TYPE DEFAULT NULL,
        subject_type_in        IN care_plan.subject_type%TYPE DEFAULT NULL,
        id_subject_in          IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_prof_coordinator_in IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        goals_in               IN care_plan.goals%TYPE DEFAULT NULL,
        notes_in               IN care_plan.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in          IN care_plan.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN care_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN care_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN care_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN care_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN care_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN care_plan.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        l_pky    care_plan.id_care_plan%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_care_plan_in        => l_pky,
            id_prof_in             => id_prof_in,
            dt_care_plan_in        => dt_care_plan_in,
            id_patient_in          => id_patient_in,
            flg_status_in          => flg_status_in,
            str_status_in          => str_status_in,
            name_in                => name_in,
            id_care_plan_type_in   => id_care_plan_type_in,
            dt_begin_in            => dt_begin_in,
            dt_end_in              => dt_end_in,
            subject_type_in        => subject_type_in,
            id_subject_in          => id_subject_in,
            id_prof_coordinator_in => id_prof_coordinator_in,
            goals_in               => goals_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN care_plan_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO care_plan
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CARE_PLAN _' || indx,
                                                        value_in           => rows_in(indx).id_care_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF _' || indx,
                                                        value_in           => rows_in(indx).id_prof,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CARE_PLAN _' || indx,
                                                        value_in           => rows_in(indx).dt_care_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STR_STATUS _' || indx,
                                                        value_in           => rows_in(indx).str_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NAME _' || indx,
                                                        value_in           => rows_in(indx).name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CARE_PLAN_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_care_plan_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BEGIN _' || indx,
                                                        value_in           => rows_in(indx).dt_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_END _' || indx,
                                                        value_in           => rows_in(indx).dt_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'SUBJECT_TYPE _' || indx,
                                                        value_in           => rows_in(indx).subject_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SUBJECT _' || indx,
                                                        value_in           => rows_in(indx).id_subject,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_COORDINATOR _' || indx,
                                                        value_in           => rows_in(indx).id_prof_coordinator,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'GOALS _' || indx,
                                                        value_in           => rows_in(indx).goals,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'CARE_PLAN',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN care_plan_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_care_plan_in         IN care_plan.id_care_plan%TYPE,
        id_prof_in              IN care_plan.id_prof%TYPE DEFAULT NULL,
        id_prof_nin             IN BOOLEAN := TRUE,
        dt_care_plan_in         IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        dt_care_plan_nin        IN BOOLEAN := TRUE,
        id_patient_in           IN care_plan.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        flg_status_in           IN care_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        str_status_in           IN care_plan.str_status%TYPE DEFAULT NULL,
        str_status_nin          IN BOOLEAN := TRUE,
        name_in                 IN care_plan.name%TYPE DEFAULT NULL,
        name_nin                IN BOOLEAN := TRUE,
        id_care_plan_type_in    IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        id_care_plan_type_nin   IN BOOLEAN := TRUE,
        dt_begin_in             IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin            IN BOOLEAN := TRUE,
        dt_end_in               IN care_plan.dt_end%TYPE DEFAULT NULL,
        dt_end_nin              IN BOOLEAN := TRUE,
        subject_type_in         IN care_plan.subject_type%TYPE DEFAULT NULL,
        subject_type_nin        IN BOOLEAN := TRUE,
        id_subject_in           IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_subject_nin          IN BOOLEAN := TRUE,
        id_prof_coordinator_in  IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        id_prof_coordinator_nin IN BOOLEAN := TRUE,
        goals_in                IN care_plan.goals%TYPE DEFAULT NULL,
        goals_nin               IN BOOLEAN := TRUE,
        notes_in                IN care_plan.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        dt_cancel_in            IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        notes_cancel_in         IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_episode_in           IN care_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        create_user_in          IN care_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN care_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN care_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN care_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN care_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN care_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_prof_n             NUMBER(1);
        l_dt_care_plan_n        NUMBER(1);
        l_id_patient_n          NUMBER(1);
        l_flg_status_n          NUMBER(1);
        l_str_status_n          NUMBER(1);
        l_name_n                NUMBER(1);
        l_id_care_plan_type_n   NUMBER(1);
        l_dt_begin_n            NUMBER(1);
        l_dt_end_n              NUMBER(1);
        l_subject_type_n        NUMBER(1);
        l_id_subject_n          NUMBER(1);
        l_id_prof_coordinator_n NUMBER(1);
        l_goals_n               NUMBER(1);
        l_notes_n               NUMBER(1);
        l_id_prof_cancel_n      NUMBER(1);
        l_dt_cancel_n           NUMBER(1);
        l_notes_cancel_n        NUMBER(1);
        l_id_episode_n          NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_id_cancel_reason_n    NUMBER(1);
    BEGIN
    
        l_id_prof_n             := sys.diutil.bool_to_int(id_prof_nin);
        l_dt_care_plan_n        := sys.diutil.bool_to_int(dt_care_plan_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_str_status_n          := sys.diutil.bool_to_int(str_status_nin);
        l_name_n                := sys.diutil.bool_to_int(name_nin);
        l_id_care_plan_type_n   := sys.diutil.bool_to_int(id_care_plan_type_nin);
        l_dt_begin_n            := sys.diutil.bool_to_int(dt_begin_nin);
        l_dt_end_n              := sys.diutil.bool_to_int(dt_end_nin);
        l_subject_type_n        := sys.diutil.bool_to_int(subject_type_nin);
        l_id_subject_n          := sys.diutil.bool_to_int(id_subject_nin);
        l_id_prof_coordinator_n := sys.diutil.bool_to_int(id_prof_coordinator_nin);
        l_goals_n               := sys.diutil.bool_to_int(goals_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_id_prof_cancel_n      := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_n           := sys.diutil.bool_to_int(dt_cancel_nin);
        l_notes_cancel_n        := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_id_cancel_reason_n    := sys.diutil.bool_to_int(id_cancel_reason_nin);
    
        UPDATE care_plan
           SET id_prof             = decode(l_id_prof_n, 0, id_prof_in, nvl(id_prof_in, id_prof)),
               dt_care_plan        = decode(l_dt_care_plan_n, 0, dt_care_plan_in, nvl(dt_care_plan_in, dt_care_plan)),
               id_patient          = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               flg_status          = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               str_status          = decode(l_str_status_n, 0, str_status_in, nvl(str_status_in, str_status)),
               name                = decode(l_name_n, 0, name_in, nvl(name_in, name)),
               id_care_plan_type   = decode(l_id_care_plan_type_n,
                                            0,
                                            id_care_plan_type_in,
                                            nvl(id_care_plan_type_in, id_care_plan_type)),
               dt_begin            = decode(l_dt_begin_n, 0, dt_begin_in, nvl(dt_begin_in, dt_begin)),
               dt_end              = decode(l_dt_end_n, 0, dt_end_in, nvl(dt_end_in, dt_end)),
               subject_type        = decode(l_subject_type_n, 0, subject_type_in, nvl(subject_type_in, subject_type)),
               id_subject          = decode(l_id_subject_n, 0, id_subject_in, nvl(id_subject_in, id_subject)),
               id_prof_coordinator = decode(l_id_prof_coordinator_n,
                                            0,
                                            id_prof_coordinator_in,
                                            nvl(id_prof_coordinator_in, id_prof_coordinator)),
               goals               = decode(l_goals_n, 0, goals_in, nvl(goals_in, goals)),
               notes               = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_prof_cancel      = decode(l_id_prof_cancel_n,
                                            0,
                                            id_prof_cancel_in,
                                            nvl(id_prof_cancel_in, id_prof_cancel)),
               dt_cancel           = decode(l_dt_cancel_n, 0, dt_cancel_in, nvl(dt_cancel_in, dt_cancel)),
               notes_cancel        = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               id_episode          = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution)),
               id_cancel_reason    = decode(l_id_cancel_reason_n,
                                            0,
                                            id_cancel_reason_in,
                                            nvl(id_cancel_reason_in, id_cancel_reason))
         WHERE id_care_plan = id_care_plan_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'CARE_PLAN');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    IF l_name = 'CPN_CPY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CARE_PLAN_TYPE',
                                                        value_in           => id_care_plan_type_in);
                    END IF;
                    IF l_name = 'CPN_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'CPN_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'CPN_PRL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF',
                                                        value_in           => id_prof_in);
                    END IF;
                    IF l_name = 'CPN_PRL_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_COORDINATOR',
                                                        value_in           => id_prof_coordinator_in);
                    END IF;
                    IF l_name = 'CPN_PRL_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_care_plan_in         IN care_plan.id_care_plan%TYPE,
        id_prof_in              IN care_plan.id_prof%TYPE DEFAULT NULL,
        id_prof_nin             IN BOOLEAN := TRUE,
        dt_care_plan_in         IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        dt_care_plan_nin        IN BOOLEAN := TRUE,
        id_patient_in           IN care_plan.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        flg_status_in           IN care_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        str_status_in           IN care_plan.str_status%TYPE DEFAULT NULL,
        str_status_nin          IN BOOLEAN := TRUE,
        name_in                 IN care_plan.name%TYPE DEFAULT NULL,
        name_nin                IN BOOLEAN := TRUE,
        id_care_plan_type_in    IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        id_care_plan_type_nin   IN BOOLEAN := TRUE,
        dt_begin_in             IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin            IN BOOLEAN := TRUE,
        dt_end_in               IN care_plan.dt_end%TYPE DEFAULT NULL,
        dt_end_nin              IN BOOLEAN := TRUE,
        subject_type_in         IN care_plan.subject_type%TYPE DEFAULT NULL,
        subject_type_nin        IN BOOLEAN := TRUE,
        id_subject_in           IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_subject_nin          IN BOOLEAN := TRUE,
        id_prof_coordinator_in  IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        id_prof_coordinator_nin IN BOOLEAN := TRUE,
        goals_in                IN care_plan.goals%TYPE DEFAULT NULL,
        goals_nin               IN BOOLEAN := TRUE,
        notes_in                IN care_plan.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        dt_cancel_in            IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        notes_cancel_in         IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_episode_in           IN care_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        create_user_in          IN care_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN care_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN care_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN care_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN care_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN care_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_care_plan_in         => id_care_plan_in,
            id_prof_in              => id_prof_in,
            id_prof_nin             => id_prof_nin,
            dt_care_plan_in         => dt_care_plan_in,
            dt_care_plan_nin        => dt_care_plan_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            str_status_in           => str_status_in,
            str_status_nin          => str_status_nin,
            name_in                 => name_in,
            name_nin                => name_nin,
            id_care_plan_type_in    => id_care_plan_type_in,
            id_care_plan_type_nin   => id_care_plan_type_nin,
            dt_begin_in             => dt_begin_in,
            dt_begin_nin            => dt_begin_nin,
            dt_end_in               => dt_end_in,
            dt_end_nin              => dt_end_nin,
            subject_type_in         => subject_type_in,
            subject_type_nin        => subject_type_nin,
            id_subject_in           => id_subject_in,
            id_subject_nin          => id_subject_nin,
            id_prof_coordinator_in  => id_prof_coordinator_in,
            id_prof_coordinator_nin => id_prof_coordinator_nin,
            goals_in                => goals_in,
            goals_nin               => goals_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            dt_cancel_in            => dt_cancel_in,
            dt_cancel_nin           => dt_cancel_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            id_cancel_reason_in     => id_cancel_reason_in,
            id_cancel_reason_nin    => id_cancel_reason_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_prof_in              IN care_plan.id_prof%TYPE DEFAULT NULL,
        id_prof_nin             IN BOOLEAN := TRUE,
        dt_care_plan_in         IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        dt_care_plan_nin        IN BOOLEAN := TRUE,
        id_patient_in           IN care_plan.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        flg_status_in           IN care_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        str_status_in           IN care_plan.str_status%TYPE DEFAULT NULL,
        str_status_nin          IN BOOLEAN := TRUE,
        name_in                 IN care_plan.name%TYPE DEFAULT NULL,
        name_nin                IN BOOLEAN := TRUE,
        id_care_plan_type_in    IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        id_care_plan_type_nin   IN BOOLEAN := TRUE,
        dt_begin_in             IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin            IN BOOLEAN := TRUE,
        dt_end_in               IN care_plan.dt_end%TYPE DEFAULT NULL,
        dt_end_nin              IN BOOLEAN := TRUE,
        subject_type_in         IN care_plan.subject_type%TYPE DEFAULT NULL,
        subject_type_nin        IN BOOLEAN := TRUE,
        id_subject_in           IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_subject_nin          IN BOOLEAN := TRUE,
        id_prof_coordinator_in  IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        id_prof_coordinator_nin IN BOOLEAN := TRUE,
        goals_in                IN care_plan.goals%TYPE DEFAULT NULL,
        goals_nin               IN BOOLEAN := TRUE,
        notes_in                IN care_plan.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        dt_cancel_in            IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        notes_cancel_in         IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_episode_in           IN care_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        create_user_in          IN care_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN care_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN care_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN care_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN care_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN care_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_prof_n             NUMBER(1);
        l_dt_care_plan_n        NUMBER(1);
        l_id_patient_n          NUMBER(1);
        l_flg_status_n          NUMBER(1);
        l_str_status_n          NUMBER(1);
        l_name_n                NUMBER(1);
        l_id_care_plan_type_n   NUMBER(1);
        l_dt_begin_n            NUMBER(1);
        l_dt_end_n              NUMBER(1);
        l_subject_type_n        NUMBER(1);
        l_id_subject_n          NUMBER(1);
        l_id_prof_coordinator_n NUMBER(1);
        l_goals_n               NUMBER(1);
        l_notes_n               NUMBER(1);
        l_id_prof_cancel_n      NUMBER(1);
        l_dt_cancel_n           NUMBER(1);
        l_notes_cancel_n        NUMBER(1);
        l_id_episode_n          NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_id_cancel_reason_n    NUMBER(1);
        id_care_plan_in         care_plan.id_care_plan%TYPE;
    BEGIN
    
        l_id_prof_n             := sys.diutil.bool_to_int(id_prof_nin);
        l_dt_care_plan_n        := sys.diutil.bool_to_int(dt_care_plan_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_str_status_n          := sys.diutil.bool_to_int(str_status_nin);
        l_name_n                := sys.diutil.bool_to_int(name_nin);
        l_id_care_plan_type_n   := sys.diutil.bool_to_int(id_care_plan_type_nin);
        l_dt_begin_n            := sys.diutil.bool_to_int(dt_begin_nin);
        l_dt_end_n              := sys.diutil.bool_to_int(dt_end_nin);
        l_subject_type_n        := sys.diutil.bool_to_int(subject_type_nin);
        l_id_subject_n          := sys.diutil.bool_to_int(id_subject_nin);
        l_id_prof_coordinator_n := sys.diutil.bool_to_int(id_prof_coordinator_nin);
        l_goals_n               := sys.diutil.bool_to_int(goals_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_id_prof_cancel_n      := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_n           := sys.diutil.bool_to_int(dt_cancel_nin);
        l_notes_cancel_n        := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_id_cancel_reason_n    := sys.diutil.bool_to_int(id_cancel_reason_nin);
    
        l_sql := 'UPDATE CARE_PLAN SET ' || ' ID_PROF = decode (' || l_id_prof_n ||
                 ',0,:id_prof_in, NVL (:id_prof_in, ID_PROF)) ' || ',' || ' DT_CARE_PLAN = decode (' ||
                 l_dt_care_plan_n || ',0,:dt_care_plan_in, NVL (:dt_care_plan_in, DT_CARE_PLAN)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' STR_STATUS = decode (' || l_str_status_n || ',0,:str_status_in, NVL (:str_status_in, STR_STATUS)) ' || ',' ||
                 ' NAME = decode (' || l_name_n || ',0,:name_in, NVL (:name_in, NAME)) ' || ',' ||
                 ' ID_CARE_PLAN_TYPE = decode (' || l_id_care_plan_type_n ||
                 ',0,:id_care_plan_type_in, NVL (:id_care_plan_type_in, ID_CARE_PLAN_TYPE)) ' || ',' ||
                 ' DT_BEGIN = decode (' || l_dt_begin_n || ',0,:dt_begin_in, NVL (:dt_begin_in, DT_BEGIN)) ' || ',' ||
                 ' DT_END = decode (' || l_dt_end_n || ',0,:dt_end_in, NVL (:dt_end_in, DT_END)) ' || ',' ||
                 ' SUBJECT_TYPE = decode (' || l_subject_type_n ||
                 ',0,:subject_type_in, NVL (:subject_type_in, SUBJECT_TYPE)) ' || ',' || ' ID_SUBJECT = decode (' ||
                 l_id_subject_n || ',0,:id_subject_in, NVL (:id_subject_in, ID_SUBJECT)) ' || ',' ||
                 ' ID_PROF_COORDINATOR = decode (' || l_id_prof_coordinator_n ||
                 ',0,:id_prof_coordinator_in, NVL (:id_prof_coordinator_in, ID_PROF_COORDINATOR)) ' || ',' ||
                 ' GOALS = decode (' || l_goals_n || ',0,:goals_in, NVL (:goals_in, GOALS)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                 ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' || ' DT_CANCEL = decode (' ||
                 l_dt_cancel_n || ',0,:dt_cancel_in, NVL (:dt_cancel_in, DT_CANCEL)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' ID_EPISODE = decode (' ||
                 l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_prof_in, dt_care_plan_in, id_patient_in, flg_status_in, str_status_in, name_in, id_care_plan_type_in, dt_begin_in, dt_end_in, subject_type_in, id_subject_in, id_prof_coordinator_in, goals_in, notes_in, id_prof_cancel_in, dt_cancel_in, notes_cancel_in, id_episode_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_cancel_reason_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'CARE_PLAN');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    IF l_name = 'CPN_CPY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CARE_PLAN_TYPE',
                                                        value_in           => id_care_plan_type_in);
                    END IF;
                    IF l_name = 'CPN_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'CPN_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'CPN_PRL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF',
                                                        value_in           => id_prof_in);
                    END IF;
                    IF l_name = 'CPN_PRL_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_COORDINATOR',
                                                        value_in           => id_prof_coordinator_in);
                    END IF;
                    IF l_name = 'CPN_PRL_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_prof_in              IN care_plan.id_prof%TYPE DEFAULT NULL,
        id_prof_nin             IN BOOLEAN := TRUE,
        dt_care_plan_in         IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        dt_care_plan_nin        IN BOOLEAN := TRUE,
        id_patient_in           IN care_plan.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        flg_status_in           IN care_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        str_status_in           IN care_plan.str_status%TYPE DEFAULT NULL,
        str_status_nin          IN BOOLEAN := TRUE,
        name_in                 IN care_plan.name%TYPE DEFAULT NULL,
        name_nin                IN BOOLEAN := TRUE,
        id_care_plan_type_in    IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        id_care_plan_type_nin   IN BOOLEAN := TRUE,
        dt_begin_in             IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin            IN BOOLEAN := TRUE,
        dt_end_in               IN care_plan.dt_end%TYPE DEFAULT NULL,
        dt_end_nin              IN BOOLEAN := TRUE,
        subject_type_in         IN care_plan.subject_type%TYPE DEFAULT NULL,
        subject_type_nin        IN BOOLEAN := TRUE,
        id_subject_in           IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_subject_nin          IN BOOLEAN := TRUE,
        id_prof_coordinator_in  IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        id_prof_coordinator_nin IN BOOLEAN := TRUE,
        goals_in                IN care_plan.goals%TYPE DEFAULT NULL,
        goals_nin               IN BOOLEAN := TRUE,
        notes_in                IN care_plan.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        dt_cancel_in            IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        notes_cancel_in         IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_episode_in           IN care_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        create_user_in          IN care_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN care_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN care_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN care_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN care_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN care_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_prof_in              => id_prof_in,
            id_prof_nin             => id_prof_nin,
            dt_care_plan_in         => dt_care_plan_in,
            dt_care_plan_nin        => dt_care_plan_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            str_status_in           => str_status_in,
            str_status_nin          => str_status_nin,
            name_in                 => name_in,
            name_nin                => name_nin,
            id_care_plan_type_in    => id_care_plan_type_in,
            id_care_plan_type_nin   => id_care_plan_type_nin,
            dt_begin_in             => dt_begin_in,
            dt_begin_nin            => dt_begin_nin,
            dt_end_in               => dt_end_in,
            dt_end_nin              => dt_end_nin,
            subject_type_in         => subject_type_in,
            subject_type_nin        => subject_type_nin,
            id_subject_in           => id_subject_in,
            id_subject_nin          => id_subject_nin,
            id_prof_coordinator_in  => id_prof_coordinator_in,
            id_prof_coordinator_nin => id_prof_coordinator_nin,
            goals_in                => goals_in,
            goals_nin               => goals_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            dt_cancel_in            => dt_cancel_in,
            dt_cancel_nin           => dt_cancel_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            id_cancel_reason_in     => id_cancel_reason_in,
            id_cancel_reason_nin    => id_cancel_reason_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN care_plan%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_care_plan_in        => rec_in.id_care_plan,
            id_prof_in             => rec_in.id_prof,
            dt_care_plan_in        => rec_in.dt_care_plan,
            id_patient_in          => rec_in.id_patient,
            flg_status_in          => rec_in.flg_status,
            str_status_in          => rec_in.str_status,
            name_in                => rec_in.name,
            id_care_plan_type_in   => rec_in.id_care_plan_type,
            dt_begin_in            => rec_in.dt_begin,
            dt_end_in              => rec_in.dt_end,
            subject_type_in        => rec_in.subject_type,
            id_subject_in          => rec_in.id_subject,
            id_prof_coordinator_in => rec_in.id_prof_coordinator,
            goals_in               => rec_in.goals,
            notes_in               => rec_in.notes,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            dt_cancel_in           => rec_in.dt_cancel,
            notes_cancel_in        => rec_in.notes_cancel,
            id_episode_in          => rec_in.id_episode,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            id_cancel_reason_in    => rec_in.id_cancel_reason
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN care_plan%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_care_plan_in        => rec_in.id_care_plan,
            id_prof_in             => rec_in.id_prof,
            dt_care_plan_in        => rec_in.dt_care_plan,
            id_patient_in          => rec_in.id_patient,
            flg_status_in          => rec_in.flg_status,
            str_status_in          => rec_in.str_status,
            name_in                => rec_in.name,
            id_care_plan_type_in   => rec_in.id_care_plan_type,
            dt_begin_in            => rec_in.dt_begin,
            dt_end_in              => rec_in.dt_end,
            subject_type_in        => rec_in.subject_type,
            id_subject_in          => rec_in.id_subject,
            id_prof_coordinator_in => rec_in.id_prof_coordinator,
            goals_in               => rec_in.goals,
            notes_in               => rec_in.notes,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            dt_cancel_in           => rec_in.dt_cancel,
            notes_cancel_in        => rec_in.notes_cancel,
            id_episode_in          => rec_in.id_episode,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            id_cancel_reason_in    => rec_in.id_cancel_reason
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_care_plan_in        IN care_plan.id_care_plan%TYPE,
        id_prof_in             IN care_plan.id_prof%TYPE DEFAULT NULL,
        dt_care_plan_in        IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        id_patient_in          IN care_plan.id_patient%TYPE DEFAULT NULL,
        flg_status_in          IN care_plan.flg_status%TYPE DEFAULT NULL,
        str_status_in          IN care_plan.str_status%TYPE DEFAULT NULL,
        name_in                IN care_plan.name%TYPE DEFAULT NULL,
        id_care_plan_type_in   IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        dt_begin_in            IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_end_in              IN care_plan.dt_end%TYPE DEFAULT NULL,
        subject_type_in        IN care_plan.subject_type%TYPE DEFAULT NULL,
        id_subject_in          IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_prof_coordinator_in IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        goals_in               IN care_plan.goals%TYPE DEFAULT NULL,
        notes_in               IN care_plan.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in          IN care_plan.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN care_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN care_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN care_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN care_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN care_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN care_plan.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        upd(id_care_plan_in        => id_care_plan_in,
            id_prof_in             => id_prof_in,
            dt_care_plan_in        => dt_care_plan_in,
            id_patient_in          => id_patient_in,
            flg_status_in          => flg_status_in,
            str_status_in          => str_status_in,
            name_in                => name_in,
            id_care_plan_type_in   => id_care_plan_type_in,
            dt_begin_in            => dt_begin_in,
            dt_end_in              => dt_end_in,
            subject_type_in        => subject_type_in,
            id_subject_in          => id_subject_in,
            id_prof_coordinator_in => id_prof_coordinator_in,
            goals_in               => goals_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_care_plan_in        => id_care_plan_in,
                id_prof_in             => id_prof_in,
                dt_care_plan_in        => dt_care_plan_in,
                id_patient_in          => id_patient_in,
                flg_status_in          => flg_status_in,
                str_status_in          => str_status_in,
                name_in                => name_in,
                id_care_plan_type_in   => id_care_plan_type_in,
                dt_begin_in            => dt_begin_in,
                dt_end_in              => dt_end_in,
                subject_type_in        => subject_type_in,
                id_subject_in          => id_subject_in,
                id_prof_coordinator_in => id_prof_coordinator_in,
                goals_in               => goals_in,
                notes_in               => notes_in,
                id_prof_cancel_in      => id_prof_cancel_in,
                dt_cancel_in           => dt_cancel_in,
                notes_cancel_in        => notes_cancel_in,
                id_episode_in          => id_episode_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                id_cancel_reason_in    => id_cancel_reason_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_care_plan_in        IN care_plan.id_care_plan%TYPE,
        id_prof_in             IN care_plan.id_prof%TYPE DEFAULT NULL,
        dt_care_plan_in        IN care_plan.dt_care_plan%TYPE DEFAULT NULL,
        id_patient_in          IN care_plan.id_patient%TYPE DEFAULT NULL,
        flg_status_in          IN care_plan.flg_status%TYPE DEFAULT NULL,
        str_status_in          IN care_plan.str_status%TYPE DEFAULT NULL,
        name_in                IN care_plan.name%TYPE DEFAULT NULL,
        id_care_plan_type_in   IN care_plan.id_care_plan_type%TYPE DEFAULT NULL,
        dt_begin_in            IN care_plan.dt_begin%TYPE DEFAULT NULL,
        dt_end_in              IN care_plan.dt_end%TYPE DEFAULT NULL,
        subject_type_in        IN care_plan.subject_type%TYPE DEFAULT NULL,
        id_subject_in          IN care_plan.id_subject%TYPE DEFAULT NULL,
        id_prof_coordinator_in IN care_plan.id_prof_coordinator%TYPE DEFAULT NULL,
        goals_in               IN care_plan.goals%TYPE DEFAULT NULL,
        notes_in               IN care_plan.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN care_plan.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN care_plan.dt_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN care_plan.notes_cancel%TYPE DEFAULT NULL,
        id_episode_in          IN care_plan.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN care_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN care_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN care_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN care_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN care_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN care_plan.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN care_plan.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_care_plan_in,
                id_prof_in,
                dt_care_plan_in,
                id_patient_in,
                flg_status_in,
                str_status_in,
                name_in,
                id_care_plan_type_in,
                dt_begin_in,
                dt_end_in,
                subject_type_in,
                id_subject_in,
                id_prof_coordinator_in,
                goals_in,
                notes_in,
                id_prof_cancel_in,
                dt_cancel_in,
                notes_cancel_in,
                id_episode_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_cancel_reason_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN care_plan_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_care_plan        id_care_plan_cc;
        l_id_prof             id_prof_cc;
        l_dt_care_plan        dt_care_plan_cc;
        l_id_patient          id_patient_cc;
        l_flg_status          flg_status_cc;
        l_str_status          str_status_cc;
        l_name                name_cc;
        l_id_care_plan_type   id_care_plan_type_cc;
        l_dt_begin            dt_begin_cc;
        l_dt_end              dt_end_cc;
        l_subject_type        subject_type_cc;
        l_id_subject          id_subject_cc;
        l_id_prof_coordinator id_prof_coordinator_cc;
        l_goals               goals_cc;
        l_notes               notes_cc;
        l_id_prof_cancel      id_prof_cancel_cc;
        l_dt_cancel           dt_cancel_cc;
        l_notes_cancel        notes_cancel_cc;
        l_id_episode          id_episode_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
        l_id_cancel_reason    id_cancel_reason_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_care_plan(i) := col_in(i).id_care_plan;
            l_id_prof(i) := col_in(i).id_prof;
            l_dt_care_plan(i) := col_in(i).dt_care_plan;
            l_id_patient(i) := col_in(i).id_patient;
            l_flg_status(i) := col_in(i).flg_status;
            l_str_status(i) := col_in(i).str_status;
            l_name(i) := col_in(i).name;
            l_id_care_plan_type(i) := col_in(i).id_care_plan_type;
            l_dt_begin(i) := col_in(i).dt_begin;
            l_dt_end(i) := col_in(i).dt_end;
            l_subject_type(i) := col_in(i).subject_type;
            l_id_subject(i) := col_in(i).id_subject;
            l_id_prof_coordinator(i) := col_in(i).id_prof_coordinator;
            l_goals(i) := col_in(i).goals;
            l_notes(i) := col_in(i).notes;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_dt_cancel(i) := col_in(i).dt_cancel;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_episode(i) := col_in(i).id_episode;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE care_plan
                   SET id_prof             = nvl(l_id_prof(i), id_prof),
                       dt_care_plan        = nvl(l_dt_care_plan(i), dt_care_plan),
                       id_patient          = nvl(l_id_patient(i), id_patient),
                       flg_status          = nvl(l_flg_status(i), flg_status),
                       str_status          = nvl(l_str_status(i), str_status),
                       name                = nvl(l_name(i), name),
                       id_care_plan_type   = nvl(l_id_care_plan_type(i), id_care_plan_type),
                       dt_begin            = nvl(l_dt_begin(i), dt_begin),
                       dt_end              = nvl(l_dt_end(i), dt_end),
                       subject_type        = nvl(l_subject_type(i), subject_type),
                       id_subject          = nvl(l_id_subject(i), id_subject),
                       id_prof_coordinator = nvl(l_id_prof_coordinator(i), id_prof_coordinator),
                       goals               = nvl(l_goals(i), goals),
                       notes               = nvl(l_notes(i), notes),
                       id_prof_cancel      = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       dt_cancel           = nvl(l_dt_cancel(i), dt_cancel),
                       notes_cancel        = nvl(l_notes_cancel(i), notes_cancel),
                       id_episode          = nvl(l_id_episode(i), id_episode),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution),
                       id_cancel_reason    = nvl(l_id_cancel_reason(i), id_cancel_reason)
                 WHERE id_care_plan = l_id_care_plan(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE care_plan
                   SET id_prof             = l_id_prof(i),
                       dt_care_plan        = l_dt_care_plan(i),
                       id_patient          = l_id_patient(i),
                       flg_status          = l_flg_status(i),
                       str_status          = l_str_status(i),
                       name                = l_name(i),
                       id_care_plan_type   = l_id_care_plan_type(i),
                       dt_begin            = l_dt_begin(i),
                       dt_end              = l_dt_end(i),
                       subject_type        = l_subject_type(i),
                       id_subject          = l_id_subject(i),
                       id_prof_coordinator = l_id_prof_coordinator(i),
                       goals               = l_goals(i),
                       notes               = l_notes(i),
                       id_prof_cancel      = l_id_prof_cancel(i),
                       dt_cancel           = l_dt_cancel(i),
                       notes_cancel        = l_notes_cancel(i),
                       id_episode          = l_id_episode(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i),
                       id_cancel_reason    = l_id_cancel_reason(i)
                 WHERE id_care_plan = l_id_care_plan(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN care_plan_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE CARE_PLAN
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE CARE_PLAN
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE CARE_PLAN set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE CARE_PLAN set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_care_plan_in IN care_plan.id_care_plan%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM care_plan
         WHERE id_care_plan = id_care_plan_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_care_plan_in IN care_plan.id_care_plan%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_care_plan_in => id_care_plan_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_CARE_PLAN
    PROCEDURE del_id_care_plan
    (
        id_care_plan_in IN care_plan.id_care_plan%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM care_plan
         WHERE id_care_plan = id_care_plan_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_care_plan;

    -- Delete all rows for primary key column ID_CARE_PLAN
    PROCEDURE del_id_care_plan
    (
        id_care_plan_in IN care_plan.id_care_plan%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_care_plan(id_care_plan_in => id_care_plan_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_care_plan;

    PROCEDURE del_cpn_cpy_fk
    (
        id_care_plan_type_in IN care_plan.id_care_plan_type%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM care_plan
         WHERE id_care_plan_type = del_cpn_cpy_fk.id_care_plan_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cpn_cpy_fk;

    PROCEDURE del_cpn_cpy_fk
    (
        id_care_plan_type_in IN care_plan.id_care_plan_type%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cpn_cpy_fk(id_care_plan_type_in => id_care_plan_type_in,
                       handle_error_in      => handle_error_in,
                       rows_out             => rows_out);
    END del_cpn_cpy_fk;

    PROCEDURE del_cpn_epis_fk
    (
        id_episode_in   IN care_plan.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM care_plan
         WHERE id_episode = del_cpn_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cpn_epis_fk;

    PROCEDURE del_cpn_epis_fk
    (
        id_episode_in   IN care_plan.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cpn_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_cpn_epis_fk;

    PROCEDURE del_cpn_pat_fk
    (
        id_patient_in   IN care_plan.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM care_plan
         WHERE id_patient = del_cpn_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cpn_pat_fk;

    PROCEDURE del_cpn_pat_fk
    (
        id_patient_in   IN care_plan.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cpn_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_cpn_pat_fk;

    PROCEDURE del_cpn_prl_fk
    (
        id_prof_in      IN care_plan.id_prof%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM care_plan
         WHERE id_prof = del_cpn_prl_fk.id_prof_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cpn_prl_fk;

    PROCEDURE del_cpn_prl_fk
    (
        id_prof_in      IN care_plan.id_prof%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cpn_prl_fk(id_prof_in => id_prof_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_cpn_prl_fk;

    PROCEDURE del_cpn_prl_fk2
    (
        id_prof_coordinator_in IN care_plan.id_prof_coordinator%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM care_plan
         WHERE id_prof_coordinator = del_cpn_prl_fk2.id_prof_coordinator_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cpn_prl_fk2;

    PROCEDURE del_cpn_prl_fk2
    (
        id_prof_coordinator_in IN care_plan.id_prof_coordinator%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cpn_prl_fk2(id_prof_coordinator_in => id_prof_coordinator_in,
                        handle_error_in        => handle_error_in,
                        rows_out               => rows_out);
    END del_cpn_prl_fk2;

    PROCEDURE del_cpn_prl_fk3
    (
        id_prof_cancel_in IN care_plan.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM care_plan
         WHERE id_prof_cancel = del_cpn_prl_fk3.id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cpn_prl_fk3;

    PROCEDURE del_cpn_prl_fk3
    (
        id_prof_cancel_in IN care_plan.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cpn_prl_fk3(id_prof_cancel_in => id_prof_cancel_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_cpn_prl_fk3;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM CARE_PLAN';
        ELSE
            RETURN 'DELETE FROM CARE_PLAN WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CARE_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CARE_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(care_plan_inout IN OUT care_plan%ROWTYPE) IS
    BEGIN
        care_plan_inout.id_care_plan        := NULL;
        care_plan_inout.id_prof             := NULL;
        care_plan_inout.dt_care_plan        := NULL;
        care_plan_inout.id_patient          := NULL;
        care_plan_inout.flg_status          := NULL;
        care_plan_inout.str_status          := NULL;
        care_plan_inout.name                := NULL;
        care_plan_inout.id_care_plan_type   := NULL;
        care_plan_inout.dt_begin            := NULL;
        care_plan_inout.dt_end              := NULL;
        care_plan_inout.subject_type        := NULL;
        care_plan_inout.id_subject          := NULL;
        care_plan_inout.id_prof_coordinator := NULL;
        care_plan_inout.goals               := NULL;
        care_plan_inout.notes               := NULL;
        care_plan_inout.id_prof_cancel      := NULL;
        care_plan_inout.dt_cancel           := NULL;
        care_plan_inout.notes_cancel        := NULL;
        care_plan_inout.id_episode          := NULL;
        care_plan_inout.create_user         := NULL;
        care_plan_inout.create_time         := NULL;
        care_plan_inout.create_institution  := NULL;
        care_plan_inout.update_user         := NULL;
        care_plan_inout.update_time         := NULL;
        care_plan_inout.update_institution  := NULL;
        care_plan_inout.id_cancel_reason    := NULL;
    END initrec;

    FUNCTION initrec RETURN care_plan%ROWTYPE IS
        l_care_plan care_plan%ROWTYPE;
    BEGIN
        RETURN l_care_plan;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN care_plan_tc IS
        data care_plan_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM care_plan
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN care_plan_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data care_plan_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_care_plan;
/
