/*-- Last Change Revision: $Rev: 2028253 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:41 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_lens_presc_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: January 22, 2009 20:1:45
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_lens_presc_hist_in IN lens_presc_hist.id_lens_presc_hist%TYPE,
        id_lens_presc_in      IN lens_presc_hist.id_lens_presc%TYPE DEFAULT NULL,
        id_lens_in            IN lens_presc_hist.id_lens%TYPE DEFAULT NULL,
        id_episode_in         IN lens_presc_hist.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN lens_presc_hist.id_patient%TYPE DEFAULT NULL,
        id_prof_presc_in      IN lens_presc_hist.id_prof_presc%TYPE DEFAULT NULL,
        dt_lens_presc_tstz_in IN lens_presc_hist.dt_lens_presc_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN lens_presc_hist.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN lens_presc_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_print_in      IN lens_presc_hist.id_prof_print%TYPE DEFAULT NULL,
        dt_print_tstz_in      IN lens_presc_hist.dt_print_tstz%TYPE DEFAULT NULL,
        flg_status_in         IN lens_presc_hist.flg_status%TYPE DEFAULT NULL,
        notes_in              IN lens_presc_hist.notes%TYPE DEFAULT NULL,
        notes_cancel_in       IN lens_presc_hist.notes_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN lens_presc_hist.id_cancel_reason%TYPE DEFAULT NULL,
        create_user_in        IN lens_presc_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN lens_presc_hist.create_time%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO lens_presc_hist
            (id_lens_presc_hist,
             id_lens_presc,
             id_lens,
             id_episode,
             id_patient,
             id_prof_presc,
             dt_lens_presc_tstz,
             id_prof_cancel,
             dt_cancel_tstz,
             id_prof_print,
             dt_print_tstz,
             flg_status,
             notes,
             notes_cancel,
             id_cancel_reason,
             create_user,
             create_time)
        VALUES
            (id_lens_presc_hist_in,
             id_lens_presc_in,
             id_lens_in,
             id_episode_in,
             id_patient_in,
             id_prof_presc_in,
             dt_lens_presc_tstz_in,
             id_prof_cancel_in,
             dt_cancel_tstz_in,
             id_prof_print_in,
             dt_print_tstz_in,
             flg_status_in,
             notes_in,
             notes_cancel_in,
             id_cancel_reason_in,
             create_user_in,
             create_time_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'LENS_PRESC_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    IF l_name = 'LPH_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'LPH_EPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'LPH_LEN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LENS',
                                                        value_in           => id_lens_in);
                    END IF;
                    IF l_name = 'LPH_LPC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LENS_PRESC',
                                                        value_in           => id_lens_presc_in);
                    END IF;
                    IF l_name = 'LPH_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'LPH_PRL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_PRESC',
                                                        value_in           => id_prof_presc_in);
                    END IF;
                    IF l_name = 'LPH_PRL_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_PRINT',
                                                        value_in           => id_prof_print_in);
                    END IF;
                    IF l_name = 'LPH_PRL_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'LPH_PRL_FK4'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'CREATE_USER',
                                                        value_in           => create_user_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_lens_presc_hist_in IN lens_presc_hist.id_lens_presc_hist%TYPE,
        id_lens_presc_in      IN lens_presc_hist.id_lens_presc%TYPE DEFAULT NULL,
        id_lens_in            IN lens_presc_hist.id_lens%TYPE DEFAULT NULL,
        id_episode_in         IN lens_presc_hist.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN lens_presc_hist.id_patient%TYPE DEFAULT NULL,
        id_prof_presc_in      IN lens_presc_hist.id_prof_presc%TYPE DEFAULT NULL,
        dt_lens_presc_tstz_in IN lens_presc_hist.dt_lens_presc_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN lens_presc_hist.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN lens_presc_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_print_in      IN lens_presc_hist.id_prof_print%TYPE DEFAULT NULL,
        dt_print_tstz_in      IN lens_presc_hist.dt_print_tstz%TYPE DEFAULT NULL,
        flg_status_in         IN lens_presc_hist.flg_status%TYPE DEFAULT NULL,
        notes_in              IN lens_presc_hist.notes%TYPE DEFAULT NULL,
        notes_cancel_in       IN lens_presc_hist.notes_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN lens_presc_hist.id_cancel_reason%TYPE DEFAULT NULL,
        create_user_in        IN lens_presc_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN lens_presc_hist.create_time%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_lens_presc_hist_in => id_lens_presc_hist_in,
            id_lens_presc_in      => id_lens_presc_in,
            id_lens_in            => id_lens_in,
            id_episode_in         => id_episode_in,
            id_patient_in         => id_patient_in,
            id_prof_presc_in      => id_prof_presc_in,
            dt_lens_presc_tstz_in => dt_lens_presc_tstz_in,
            id_prof_cancel_in     => id_prof_cancel_in,
            dt_cancel_tstz_in     => dt_cancel_tstz_in,
            id_prof_print_in      => id_prof_print_in,
            dt_print_tstz_in      => dt_print_tstz_in,
            flg_status_in         => flg_status_in,
            notes_in              => notes_in,
            notes_cancel_in       => notes_cancel_in,
            id_cancel_reason_in   => id_cancel_reason_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN lens_presc_hist%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec lens_presc_hist%ROWTYPE := rec_in;
    BEGIN
        ins(id_lens_presc_hist_in => l_rec.id_lens_presc_hist,
            id_lens_presc_in      => l_rec.id_lens_presc,
            id_lens_in            => l_rec.id_lens,
            id_episode_in         => l_rec.id_episode,
            id_patient_in         => l_rec.id_patient,
            id_prof_presc_in      => l_rec.id_prof_presc,
            dt_lens_presc_tstz_in => l_rec.dt_lens_presc_tstz,
            id_prof_cancel_in     => l_rec.id_prof_cancel,
            dt_cancel_tstz_in     => l_rec.dt_cancel_tstz,
            id_prof_print_in      => l_rec.id_prof_print,
            dt_print_tstz_in      => l_rec.dt_print_tstz,
            flg_status_in         => l_rec.flg_status,
            notes_in              => l_rec.notes,
            notes_cancel_in       => l_rec.notes_cancel,
            id_cancel_reason_in   => l_rec.id_cancel_reason,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN lens_presc_hist%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN lens_presc_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO lens_presc_hist
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_LENS_PRESC_HIST _' || indx,
                                                        value_in           => rows_in(indx).id_lens_presc_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_LENS_PRESC _' || indx,
                                                        value_in           => rows_in(indx).id_lens_presc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_LENS _' || indx,
                                                        value_in           => rows_in(indx).id_lens,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_PRESC _' || indx,
                                                        value_in           => rows_in(indx).id_prof_presc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_LENS_PRESC_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_lens_presc_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_PRINT _' || indx,
                                                        value_in           => rows_in(indx).id_prof_print,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PRINT_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_print_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'LENS_PRESC_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN lens_presc_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_lens_presc_hist_in  IN lens_presc_hist.id_lens_presc_hist%TYPE,
        id_lens_presc_in       IN lens_presc_hist.id_lens_presc%TYPE DEFAULT NULL,
        id_lens_presc_nin      IN BOOLEAN := TRUE,
        id_lens_in             IN lens_presc_hist.id_lens%TYPE DEFAULT NULL,
        id_lens_nin            IN BOOLEAN := TRUE,
        id_episode_in          IN lens_presc_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_patient_in          IN lens_presc_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_prof_presc_in       IN lens_presc_hist.id_prof_presc%TYPE DEFAULT NULL,
        id_prof_presc_nin      IN BOOLEAN := TRUE,
        dt_lens_presc_tstz_in  IN lens_presc_hist.dt_lens_presc_tstz%TYPE DEFAULT NULL,
        dt_lens_presc_tstz_nin IN BOOLEAN := TRUE,
        id_prof_cancel_in      IN lens_presc_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin     IN BOOLEAN := TRUE,
        dt_cancel_tstz_in      IN lens_presc_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin     IN BOOLEAN := TRUE,
        id_prof_print_in       IN lens_presc_hist.id_prof_print%TYPE DEFAULT NULL,
        id_prof_print_nin      IN BOOLEAN := TRUE,
        dt_print_tstz_in       IN lens_presc_hist.dt_print_tstz%TYPE DEFAULT NULL,
        dt_print_tstz_nin      IN BOOLEAN := TRUE,
        flg_status_in          IN lens_presc_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        notes_in               IN lens_presc_hist.notes%TYPE DEFAULT NULL,
        notes_nin              IN BOOLEAN := TRUE,
        notes_cancel_in        IN lens_presc_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin       IN BOOLEAN := TRUE,
        id_cancel_reason_in    IN lens_presc_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin   IN BOOLEAN := TRUE,
        create_user_in         IN lens_presc_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN lens_presc_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_lens_presc_n      NUMBER(1);
        l_id_lens_n            NUMBER(1);
        l_id_episode_n         NUMBER(1);
        l_id_patient_n         NUMBER(1);
        l_id_prof_presc_n      NUMBER(1);
        l_dt_lens_presc_tstz_n NUMBER(1);
        l_id_prof_cancel_n     NUMBER(1);
        l_dt_cancel_tstz_n     NUMBER(1);
        l_id_prof_print_n      NUMBER(1);
        l_dt_print_tstz_n      NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_notes_n              NUMBER(1);
        l_notes_cancel_n       NUMBER(1);
        l_id_cancel_reason_n   NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
    BEGIN
    
        l_id_lens_presc_n      := sys.diutil.bool_to_int(id_lens_presc_nin);
        l_id_lens_n            := sys.diutil.bool_to_int(id_lens_nin);
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n         := sys.diutil.bool_to_int(id_patient_nin);
        l_id_prof_presc_n      := sys.diutil.bool_to_int(id_prof_presc_nin);
        l_dt_lens_presc_tstz_n := sys.diutil.bool_to_int(dt_lens_presc_tstz_nin);
        l_id_prof_cancel_n     := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_tstz_n     := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_prof_print_n      := sys.diutil.bool_to_int(id_prof_print_nin);
        l_dt_print_tstz_n      := sys.diutil.bool_to_int(dt_print_tstz_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_notes_n              := sys.diutil.bool_to_int(notes_nin);
        l_notes_cancel_n       := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_cancel_reason_n   := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
    
        UPDATE lens_presc_hist
           SET id_lens_presc      = decode(l_id_lens_presc_n, 0, id_lens_presc_in, nvl(id_lens_presc_in, id_lens_presc)),
               id_lens            = decode(l_id_lens_n, 0, id_lens_in, nvl(id_lens_in, id_lens)),
               id_episode         = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_patient         = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_prof_presc      = decode(l_id_prof_presc_n, 0, id_prof_presc_in, nvl(id_prof_presc_in, id_prof_presc)),
               dt_lens_presc_tstz = decode(l_dt_lens_presc_tstz_n,
                                           0,
                                           dt_lens_presc_tstz_in,
                                           nvl(dt_lens_presc_tstz_in, dt_lens_presc_tstz)),
               id_prof_cancel     = decode(l_id_prof_cancel_n,
                                           0,
                                           id_prof_cancel_in,
                                           nvl(id_prof_cancel_in, id_prof_cancel)),
               dt_cancel_tstz     = decode(l_dt_cancel_tstz_n,
                                           0,
                                           dt_cancel_tstz_in,
                                           nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               id_prof_print      = decode(l_id_prof_print_n, 0, id_prof_print_in, nvl(id_prof_print_in, id_prof_print)),
               dt_print_tstz      = decode(l_dt_print_tstz_n, 0, dt_print_tstz_in, nvl(dt_print_tstz_in, dt_print_tstz)),
               flg_status         = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               notes              = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               notes_cancel       = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               id_cancel_reason   = decode(l_id_cancel_reason_n,
                                           0,
                                           id_cancel_reason_in,
                                           nvl(id_cancel_reason_in, id_cancel_reason)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time))
         WHERE id_lens_presc_hist = id_lens_presc_hist_in RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'LENS_PRESC_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    IF l_name = 'LPH_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'LPH_EPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'LPH_LEN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LENS',
                                                        value_in           => id_lens_in);
                    END IF;
                    IF l_name = 'LPH_LPC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LENS_PRESC',
                                                        value_in           => id_lens_presc_in);
                    END IF;
                    IF l_name = 'LPH_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'LPH_PRL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_PRESC',
                                                        value_in           => id_prof_presc_in);
                    END IF;
                    IF l_name = 'LPH_PRL_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_PRINT',
                                                        value_in           => id_prof_print_in);
                    END IF;
                    IF l_name = 'LPH_PRL_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'LPH_PRL_FK4'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'CREATE_USER',
                                                        value_in           => create_user_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_lens_presc_hist_in  IN lens_presc_hist.id_lens_presc_hist%TYPE,
        id_lens_presc_in       IN lens_presc_hist.id_lens_presc%TYPE DEFAULT NULL,
        id_lens_presc_nin      IN BOOLEAN := TRUE,
        id_lens_in             IN lens_presc_hist.id_lens%TYPE DEFAULT NULL,
        id_lens_nin            IN BOOLEAN := TRUE,
        id_episode_in          IN lens_presc_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_patient_in          IN lens_presc_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_prof_presc_in       IN lens_presc_hist.id_prof_presc%TYPE DEFAULT NULL,
        id_prof_presc_nin      IN BOOLEAN := TRUE,
        dt_lens_presc_tstz_in  IN lens_presc_hist.dt_lens_presc_tstz%TYPE DEFAULT NULL,
        dt_lens_presc_tstz_nin IN BOOLEAN := TRUE,
        id_prof_cancel_in      IN lens_presc_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin     IN BOOLEAN := TRUE,
        dt_cancel_tstz_in      IN lens_presc_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin     IN BOOLEAN := TRUE,
        id_prof_print_in       IN lens_presc_hist.id_prof_print%TYPE DEFAULT NULL,
        id_prof_print_nin      IN BOOLEAN := TRUE,
        dt_print_tstz_in       IN lens_presc_hist.dt_print_tstz%TYPE DEFAULT NULL,
        dt_print_tstz_nin      IN BOOLEAN := TRUE,
        flg_status_in          IN lens_presc_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        notes_in               IN lens_presc_hist.notes%TYPE DEFAULT NULL,
        notes_nin              IN BOOLEAN := TRUE,
        notes_cancel_in        IN lens_presc_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin       IN BOOLEAN := TRUE,
        id_cancel_reason_in    IN lens_presc_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin   IN BOOLEAN := TRUE,
        create_user_in         IN lens_presc_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN lens_presc_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_lens_presc_hist_in  => id_lens_presc_hist_in,
            id_lens_presc_in       => id_lens_presc_in,
            id_lens_presc_nin      => id_lens_presc_nin,
            id_lens_in             => id_lens_in,
            id_lens_nin            => id_lens_nin,
            id_episode_in          => id_episode_in,
            id_episode_nin         => id_episode_nin,
            id_patient_in          => id_patient_in,
            id_patient_nin         => id_patient_nin,
            id_prof_presc_in       => id_prof_presc_in,
            id_prof_presc_nin      => id_prof_presc_nin,
            dt_lens_presc_tstz_in  => dt_lens_presc_tstz_in,
            dt_lens_presc_tstz_nin => dt_lens_presc_tstz_nin,
            id_prof_cancel_in      => id_prof_cancel_in,
            id_prof_cancel_nin     => id_prof_cancel_nin,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_cancel_tstz_nin     => dt_cancel_tstz_nin,
            id_prof_print_in       => id_prof_print_in,
            id_prof_print_nin      => id_prof_print_nin,
            dt_print_tstz_in       => dt_print_tstz_in,
            dt_print_tstz_nin      => dt_print_tstz_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            notes_in               => notes_in,
            notes_nin              => notes_nin,
            notes_cancel_in        => notes_cancel_in,
            notes_cancel_nin       => notes_cancel_nin,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_cancel_reason_nin   => id_cancel_reason_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_lens_presc_in       IN lens_presc_hist.id_lens_presc%TYPE DEFAULT NULL,
        id_lens_presc_nin      IN BOOLEAN := TRUE,
        id_lens_in             IN lens_presc_hist.id_lens%TYPE DEFAULT NULL,
        id_lens_nin            IN BOOLEAN := TRUE,
        id_episode_in          IN lens_presc_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_patient_in          IN lens_presc_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_prof_presc_in       IN lens_presc_hist.id_prof_presc%TYPE DEFAULT NULL,
        id_prof_presc_nin      IN BOOLEAN := TRUE,
        dt_lens_presc_tstz_in  IN lens_presc_hist.dt_lens_presc_tstz%TYPE DEFAULT NULL,
        dt_lens_presc_tstz_nin IN BOOLEAN := TRUE,
        id_prof_cancel_in      IN lens_presc_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin     IN BOOLEAN := TRUE,
        dt_cancel_tstz_in      IN lens_presc_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin     IN BOOLEAN := TRUE,
        id_prof_print_in       IN lens_presc_hist.id_prof_print%TYPE DEFAULT NULL,
        id_prof_print_nin      IN BOOLEAN := TRUE,
        dt_print_tstz_in       IN lens_presc_hist.dt_print_tstz%TYPE DEFAULT NULL,
        dt_print_tstz_nin      IN BOOLEAN := TRUE,
        flg_status_in          IN lens_presc_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        notes_in               IN lens_presc_hist.notes%TYPE DEFAULT NULL,
        notes_nin              IN BOOLEAN := TRUE,
        notes_cancel_in        IN lens_presc_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin       IN BOOLEAN := TRUE,
        id_cancel_reason_in    IN lens_presc_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin   IN BOOLEAN := TRUE,
        create_user_in         IN lens_presc_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN lens_presc_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_id_lens_presc_n      NUMBER(1);
        l_id_lens_n            NUMBER(1);
        l_id_episode_n         NUMBER(1);
        l_id_patient_n         NUMBER(1);
        l_id_prof_presc_n      NUMBER(1);
        l_dt_lens_presc_tstz_n NUMBER(1);
        l_id_prof_cancel_n     NUMBER(1);
        l_dt_cancel_tstz_n     NUMBER(1);
        l_id_prof_print_n      NUMBER(1);
        l_dt_print_tstz_n      NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_notes_n              NUMBER(1);
        l_notes_cancel_n       NUMBER(1);
        l_id_cancel_reason_n   NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        id_lens_presc_hist_in  lens_presc_hist.id_lens_presc_hist%TYPE;
    BEGIN
    
        l_id_lens_presc_n      := sys.diutil.bool_to_int(id_lens_presc_nin);
        l_id_lens_n            := sys.diutil.bool_to_int(id_lens_nin);
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n         := sys.diutil.bool_to_int(id_patient_nin);
        l_id_prof_presc_n      := sys.diutil.bool_to_int(id_prof_presc_nin);
        l_dt_lens_presc_tstz_n := sys.diutil.bool_to_int(dt_lens_presc_tstz_nin);
        l_id_prof_cancel_n     := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_tstz_n     := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_prof_print_n      := sys.diutil.bool_to_int(id_prof_print_nin);
        l_dt_print_tstz_n      := sys.diutil.bool_to_int(dt_print_tstz_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_notes_n              := sys.diutil.bool_to_int(notes_nin);
        l_notes_cancel_n       := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_cancel_reason_n   := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
    
        l_sql := 'UPDATE LENS_PRESC_HIST SET ' || ' ID_LENS_PRESC = decode (' || l_id_lens_presc_n ||
                 ',0,:id_lens_presc_in, NVL (:id_lens_presc_in, ID_LENS_PRESC)) ' || ',' || ' ID_LENS = decode (' ||
                 l_id_lens_n || ',0,:id_lens_in, NVL (:id_lens_in, ID_LENS)) ' || ',' || ' ID_EPISODE = decode (' ||
                 l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_PROF_PRESC = decode (' || l_id_prof_presc_n ||
                 ',0,:id_prof_presc_in, NVL (:id_prof_presc_in, ID_PROF_PRESC)) ' || ',' ||
                 ' DT_LENS_PRESC_TSTZ = decode (' || l_dt_lens_presc_tstz_n ||
                 ',0,:dt_lens_presc_tstz_in, NVL (:dt_lens_presc_tstz_in, DT_LENS_PRESC_TSTZ)) ' || ',' ||
                 ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                 ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' ||
                 ' DT_CANCEL_TSTZ = decode (' || l_dt_cancel_tstz_n ||
                 ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) ' || ',' ||
                 ' ID_PROF_PRINT = decode (' || l_id_prof_print_n ||
                 ',0,:id_prof_print_in, NVL (:id_prof_print_in, ID_PROF_PRINT)) ' || ',' || ' DT_PRINT_TSTZ = decode (' ||
                 l_dt_print_tstz_n || ',0,:dt_print_tstz_in, NVL (:dt_print_tstz_in, DT_PRINT_TSTZ)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' ID_CANCEL_REASON = decode (' ||
                 l_id_cancel_reason_n || ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_lens_presc_in, id_lens_in, id_episode_in, id_patient_in, id_prof_presc_in, dt_lens_presc_tstz_in, id_prof_cancel_in, dt_cancel_tstz_in, id_prof_print_in, dt_print_tstz_in, flg_status_in, notes_in, notes_cancel_in, id_cancel_reason_in, create_user_in, create_time_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'LENS_PRESC_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    IF l_name = 'LPH_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'LPH_EPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'LPH_LEN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LENS',
                                                        value_in           => id_lens_in);
                    END IF;
                    IF l_name = 'LPH_LPC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_LENS_PRESC',
                                                        value_in           => id_lens_presc_in);
                    END IF;
                    IF l_name = 'LPH_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'LPH_PRL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_PRESC',
                                                        value_in           => id_prof_presc_in);
                    END IF;
                    IF l_name = 'LPH_PRL_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_PRINT',
                                                        value_in           => id_prof_print_in);
                    END IF;
                    IF l_name = 'LPH_PRL_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'LPH_PRL_FK4'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'CREATE_USER',
                                                        value_in           => create_user_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_lens_presc_in       IN lens_presc_hist.id_lens_presc%TYPE DEFAULT NULL,
        id_lens_presc_nin      IN BOOLEAN := TRUE,
        id_lens_in             IN lens_presc_hist.id_lens%TYPE DEFAULT NULL,
        id_lens_nin            IN BOOLEAN := TRUE,
        id_episode_in          IN lens_presc_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_patient_in          IN lens_presc_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_prof_presc_in       IN lens_presc_hist.id_prof_presc%TYPE DEFAULT NULL,
        id_prof_presc_nin      IN BOOLEAN := TRUE,
        dt_lens_presc_tstz_in  IN lens_presc_hist.dt_lens_presc_tstz%TYPE DEFAULT NULL,
        dt_lens_presc_tstz_nin IN BOOLEAN := TRUE,
        id_prof_cancel_in      IN lens_presc_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin     IN BOOLEAN := TRUE,
        dt_cancel_tstz_in      IN lens_presc_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin     IN BOOLEAN := TRUE,
        id_prof_print_in       IN lens_presc_hist.id_prof_print%TYPE DEFAULT NULL,
        id_prof_print_nin      IN BOOLEAN := TRUE,
        dt_print_tstz_in       IN lens_presc_hist.dt_print_tstz%TYPE DEFAULT NULL,
        dt_print_tstz_nin      IN BOOLEAN := TRUE,
        flg_status_in          IN lens_presc_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        notes_in               IN lens_presc_hist.notes%TYPE DEFAULT NULL,
        notes_nin              IN BOOLEAN := TRUE,
        notes_cancel_in        IN lens_presc_hist.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin       IN BOOLEAN := TRUE,
        id_cancel_reason_in    IN lens_presc_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin   IN BOOLEAN := TRUE,
        create_user_in         IN lens_presc_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN lens_presc_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_lens_presc_in       => id_lens_presc_in,
            id_lens_presc_nin      => id_lens_presc_nin,
            id_lens_in             => id_lens_in,
            id_lens_nin            => id_lens_nin,
            id_episode_in          => id_episode_in,
            id_episode_nin         => id_episode_nin,
            id_patient_in          => id_patient_in,
            id_patient_nin         => id_patient_nin,
            id_prof_presc_in       => id_prof_presc_in,
            id_prof_presc_nin      => id_prof_presc_nin,
            dt_lens_presc_tstz_in  => dt_lens_presc_tstz_in,
            dt_lens_presc_tstz_nin => dt_lens_presc_tstz_nin,
            id_prof_cancel_in      => id_prof_cancel_in,
            id_prof_cancel_nin     => id_prof_cancel_nin,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_cancel_tstz_nin     => dt_cancel_tstz_nin,
            id_prof_print_in       => id_prof_print_in,
            id_prof_print_nin      => id_prof_print_nin,
            dt_print_tstz_in       => dt_print_tstz_in,
            dt_print_tstz_nin      => dt_print_tstz_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            notes_in               => notes_in,
            notes_nin              => notes_nin,
            notes_cancel_in        => notes_cancel_in,
            notes_cancel_nin       => notes_cancel_nin,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_cancel_reason_nin   => id_cancel_reason_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN lens_presc_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_lens_presc_hist_in => rec_in.id_lens_presc_hist,
            id_lens_presc_in      => rec_in.id_lens_presc,
            id_lens_in            => rec_in.id_lens,
            id_episode_in         => rec_in.id_episode,
            id_patient_in         => rec_in.id_patient,
            id_prof_presc_in      => rec_in.id_prof_presc,
            dt_lens_presc_tstz_in => rec_in.dt_lens_presc_tstz,
            id_prof_cancel_in     => rec_in.id_prof_cancel,
            dt_cancel_tstz_in     => rec_in.dt_cancel_tstz,
            id_prof_print_in      => rec_in.id_prof_print,
            dt_print_tstz_in      => rec_in.dt_print_tstz,
            flg_status_in         => rec_in.flg_status,
            notes_in              => rec_in.notes,
            notes_cancel_in       => rec_in.notes_cancel,
            id_cancel_reason_in   => rec_in.id_cancel_reason,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN lens_presc_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_lens_presc_hist_in => rec_in.id_lens_presc_hist,
            id_lens_presc_in      => rec_in.id_lens_presc,
            id_lens_in            => rec_in.id_lens,
            id_episode_in         => rec_in.id_episode,
            id_patient_in         => rec_in.id_patient,
            id_prof_presc_in      => rec_in.id_prof_presc,
            dt_lens_presc_tstz_in => rec_in.dt_lens_presc_tstz,
            id_prof_cancel_in     => rec_in.id_prof_cancel,
            dt_cancel_tstz_in     => rec_in.dt_cancel_tstz,
            id_prof_print_in      => rec_in.id_prof_print,
            dt_print_tstz_in      => rec_in.dt_print_tstz,
            flg_status_in         => rec_in.flg_status,
            notes_in              => rec_in.notes,
            notes_cancel_in       => rec_in.notes_cancel,
            id_cancel_reason_in   => rec_in.id_cancel_reason,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_lens_presc_hist_in IN lens_presc_hist.id_lens_presc_hist%TYPE,
        id_lens_presc_in      IN lens_presc_hist.id_lens_presc%TYPE DEFAULT NULL,
        id_lens_in            IN lens_presc_hist.id_lens%TYPE DEFAULT NULL,
        id_episode_in         IN lens_presc_hist.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN lens_presc_hist.id_patient%TYPE DEFAULT NULL,
        id_prof_presc_in      IN lens_presc_hist.id_prof_presc%TYPE DEFAULT NULL,
        dt_lens_presc_tstz_in IN lens_presc_hist.dt_lens_presc_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN lens_presc_hist.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN lens_presc_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_print_in      IN lens_presc_hist.id_prof_print%TYPE DEFAULT NULL,
        dt_print_tstz_in      IN lens_presc_hist.dt_print_tstz%TYPE DEFAULT NULL,
        flg_status_in         IN lens_presc_hist.flg_status%TYPE DEFAULT NULL,
        notes_in              IN lens_presc_hist.notes%TYPE DEFAULT NULL,
        notes_cancel_in       IN lens_presc_hist.notes_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN lens_presc_hist.id_cancel_reason%TYPE DEFAULT NULL,
        create_user_in        IN lens_presc_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN lens_presc_hist.create_time%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        upd(id_lens_presc_hist_in => id_lens_presc_hist_in,
            id_lens_presc_in      => id_lens_presc_in,
            id_lens_in            => id_lens_in,
            id_episode_in         => id_episode_in,
            id_patient_in         => id_patient_in,
            id_prof_presc_in      => id_prof_presc_in,
            dt_lens_presc_tstz_in => dt_lens_presc_tstz_in,
            id_prof_cancel_in     => id_prof_cancel_in,
            dt_cancel_tstz_in     => dt_cancel_tstz_in,
            id_prof_print_in      => id_prof_print_in,
            dt_print_tstz_in      => dt_print_tstz_in,
            flg_status_in         => flg_status_in,
            notes_in              => notes_in,
            notes_cancel_in       => notes_cancel_in,
            id_cancel_reason_in   => id_cancel_reason_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_lens_presc_hist_in => id_lens_presc_hist_in,
                id_lens_presc_in      => id_lens_presc_in,
                id_lens_in            => id_lens_in,
                id_episode_in         => id_episode_in,
                id_patient_in         => id_patient_in,
                id_prof_presc_in      => id_prof_presc_in,
                dt_lens_presc_tstz_in => dt_lens_presc_tstz_in,
                id_prof_cancel_in     => id_prof_cancel_in,
                dt_cancel_tstz_in     => dt_cancel_tstz_in,
                id_prof_print_in      => id_prof_print_in,
                dt_print_tstz_in      => dt_print_tstz_in,
                flg_status_in         => flg_status_in,
                notes_in              => notes_in,
                notes_cancel_in       => notes_cancel_in,
                id_cancel_reason_in   => id_cancel_reason_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_lens_presc_hist_in IN lens_presc_hist.id_lens_presc_hist%TYPE,
        id_lens_presc_in      IN lens_presc_hist.id_lens_presc%TYPE DEFAULT NULL,
        id_lens_in            IN lens_presc_hist.id_lens%TYPE DEFAULT NULL,
        id_episode_in         IN lens_presc_hist.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN lens_presc_hist.id_patient%TYPE DEFAULT NULL,
        id_prof_presc_in      IN lens_presc_hist.id_prof_presc%TYPE DEFAULT NULL,
        dt_lens_presc_tstz_in IN lens_presc_hist.dt_lens_presc_tstz%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN lens_presc_hist.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN lens_presc_hist.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_print_in      IN lens_presc_hist.id_prof_print%TYPE DEFAULT NULL,
        dt_print_tstz_in      IN lens_presc_hist.dt_print_tstz%TYPE DEFAULT NULL,
        flg_status_in         IN lens_presc_hist.flg_status%TYPE DEFAULT NULL,
        notes_in              IN lens_presc_hist.notes%TYPE DEFAULT NULL,
        notes_cancel_in       IN lens_presc_hist.notes_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN lens_presc_hist.id_cancel_reason%TYPE DEFAULT NULL,
        create_user_in        IN lens_presc_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN lens_presc_hist.create_time%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_lens_presc_hist_in,
                id_lens_presc_in,
                id_lens_in,
                id_episode_in,
                id_patient_in,
                id_prof_presc_in,
                dt_lens_presc_tstz_in,
                id_prof_cancel_in,
                dt_cancel_tstz_in,
                id_prof_print_in,
                dt_print_tstz_in,
                flg_status_in,
                notes_in,
                notes_cancel_in,
                id_cancel_reason_in,
                create_user_in,
                create_time_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN lens_presc_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_lens_presc_hist id_lens_presc_hist_cc;
        l_id_lens_presc      id_lens_presc_cc;
        l_id_lens            id_lens_cc;
        l_id_episode         id_episode_cc;
        l_id_patient         id_patient_cc;
        l_id_prof_presc      id_prof_presc_cc;
        l_dt_lens_presc_tstz dt_lens_presc_tstz_cc;
        l_id_prof_cancel     id_prof_cancel_cc;
        l_dt_cancel_tstz     dt_cancel_tstz_cc;
        l_id_prof_print      id_prof_print_cc;
        l_dt_print_tstz      dt_print_tstz_cc;
        l_flg_status         flg_status_cc;
        l_notes              notes_cc;
        l_notes_cancel       notes_cancel_cc;
        l_id_cancel_reason   id_cancel_reason_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_lens_presc_hist(i) := col_in(i).id_lens_presc_hist;
            l_id_lens_presc(i) := col_in(i).id_lens_presc;
            l_id_lens(i) := col_in(i).id_lens;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_prof_presc(i) := col_in(i).id_prof_presc;
            l_dt_lens_presc_tstz(i) := col_in(i).dt_lens_presc_tstz;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_id_prof_print(i) := col_in(i).id_prof_print;
            l_dt_print_tstz(i) := col_in(i).dt_print_tstz;
            l_flg_status(i) := col_in(i).flg_status;
            l_notes(i) := col_in(i).notes;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE lens_presc_hist
                   SET id_lens_presc      = nvl(l_id_lens_presc(i), id_lens_presc),
                       id_lens            = nvl(l_id_lens(i), id_lens),
                       id_episode         = nvl(l_id_episode(i), id_episode),
                       id_patient         = nvl(l_id_patient(i), id_patient),
                       id_prof_presc      = nvl(l_id_prof_presc(i), id_prof_presc),
                       dt_lens_presc_tstz = nvl(l_dt_lens_presc_tstz(i), dt_lens_presc_tstz),
                       id_prof_cancel     = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       dt_cancel_tstz     = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       id_prof_print      = nvl(l_id_prof_print(i), id_prof_print),
                       dt_print_tstz      = nvl(l_dt_print_tstz(i), dt_print_tstz),
                       flg_status         = nvl(l_flg_status(i), flg_status),
                       notes              = nvl(l_notes(i), notes),
                       notes_cancel       = nvl(l_notes_cancel(i), notes_cancel),
                       id_cancel_reason   = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time)
                 WHERE id_lens_presc_hist = l_id_lens_presc_hist(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE lens_presc_hist
                   SET id_lens_presc      = l_id_lens_presc(i),
                       id_lens            = l_id_lens(i),
                       id_episode         = l_id_episode(i),
                       id_patient         = l_id_patient(i),
                       id_prof_presc      = l_id_prof_presc(i),
                       dt_lens_presc_tstz = l_dt_lens_presc_tstz(i),
                       id_prof_cancel     = l_id_prof_cancel(i),
                       dt_cancel_tstz     = l_dt_cancel_tstz(i),
                       id_prof_print      = l_id_prof_print(i),
                       dt_print_tstz      = l_dt_print_tstz(i),
                       flg_status         = l_flg_status(i),
                       notes              = l_notes(i),
                       notes_cancel       = l_notes_cancel(i),
                       id_cancel_reason   = l_id_cancel_reason(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i)
                 WHERE id_lens_presc_hist = l_id_lens_presc_hist(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN lens_presc_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE LENS_PRESC_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE LENS_PRESC_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE LENS_PRESC_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE LENS_PRESC_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_lens_presc_hist_in IN lens_presc_hist.id_lens_presc_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM lens_presc_hist
         WHERE id_lens_presc_hist = id_lens_presc_hist_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_lens_presc_hist_in IN lens_presc_hist.id_lens_presc_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_lens_presc_hist_in => id_lens_presc_hist_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_LENS_PRESC_HIST
    PROCEDURE del_id_lens_presc_hist
    (
        id_lens_presc_hist_in IN lens_presc_hist.id_lens_presc_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM lens_presc_hist
         WHERE id_lens_presc_hist = id_lens_presc_hist_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_lens_presc_hist;

    -- Delete all rows for primary key column ID_LENS_PRESC_HIST
    PROCEDURE del_id_lens_presc_hist
    (
        id_lens_presc_hist_in IN lens_presc_hist.id_lens_presc_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_lens_presc_hist(id_lens_presc_hist_in => id_lens_presc_hist_in,
                               handle_error_in       => handle_error_in,
                               rows_out              => rows_out);
    END del_id_lens_presc_hist;

    PROCEDURE del_lph_cre_fk
    (
        id_cancel_reason_in IN lens_presc_hist.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM lens_presc_hist
         WHERE id_cancel_reason = del_lph_cre_fk.id_cancel_reason_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_lph_cre_fk;

    PROCEDURE del_lph_cre_fk
    (
        id_cancel_reason_in IN lens_presc_hist.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_lph_cre_fk(id_cancel_reason_in => id_cancel_reason_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_lph_cre_fk;

    PROCEDURE del_lph_epe_fk
    (
        id_episode_in   IN lens_presc_hist.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM lens_presc_hist
         WHERE id_episode = del_lph_epe_fk.id_episode_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_lph_epe_fk;

    PROCEDURE del_lph_epe_fk
    (
        id_episode_in   IN lens_presc_hist.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_lph_epe_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_lph_epe_fk;

    PROCEDURE del_lph_len_fk
    (
        id_lens_in      IN lens_presc_hist.id_lens%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM lens_presc_hist
         WHERE id_lens = del_lph_len_fk.id_lens_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_lph_len_fk;

    PROCEDURE del_lph_len_fk
    (
        id_lens_in      IN lens_presc_hist.id_lens%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_lph_len_fk(id_lens_in => id_lens_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_lph_len_fk;

    PROCEDURE del_lph_lpc_fk
    (
        id_lens_presc_in IN lens_presc_hist.id_lens_presc%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM lens_presc_hist
         WHERE id_lens_presc = del_lph_lpc_fk.id_lens_presc_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_lph_lpc_fk;

    PROCEDURE del_lph_lpc_fk
    (
        id_lens_presc_in IN lens_presc_hist.id_lens_presc%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_lph_lpc_fk(id_lens_presc_in => id_lens_presc_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_lph_lpc_fk;

    PROCEDURE del_lph_pat_fk
    (
        id_patient_in   IN lens_presc_hist.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM lens_presc_hist
         WHERE id_patient = del_lph_pat_fk.id_patient_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_lph_pat_fk;

    PROCEDURE del_lph_pat_fk
    (
        id_patient_in   IN lens_presc_hist.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_lph_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_lph_pat_fk;

    PROCEDURE del_lph_prl_fk
    (
        id_prof_presc_in IN lens_presc_hist.id_prof_presc%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM lens_presc_hist
         WHERE id_prof_presc = del_lph_prl_fk.id_prof_presc_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_lph_prl_fk;

    PROCEDURE del_lph_prl_fk
    (
        id_prof_presc_in IN lens_presc_hist.id_prof_presc%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_lph_prl_fk(id_prof_presc_in => id_prof_presc_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_lph_prl_fk;

    PROCEDURE del_lph_prl_fk2
    (
        id_prof_print_in IN lens_presc_hist.id_prof_print%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM lens_presc_hist
         WHERE id_prof_print = del_lph_prl_fk2.id_prof_print_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_lph_prl_fk2;

    PROCEDURE del_lph_prl_fk2
    (
        id_prof_print_in IN lens_presc_hist.id_prof_print%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_lph_prl_fk2(id_prof_print_in => id_prof_print_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_lph_prl_fk2;

    PROCEDURE del_lph_prl_fk3
    (
        id_prof_cancel_in IN lens_presc_hist.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM lens_presc_hist
         WHERE id_prof_cancel = del_lph_prl_fk3.id_prof_cancel_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_lph_prl_fk3;

    PROCEDURE del_lph_prl_fk3
    (
        id_prof_cancel_in IN lens_presc_hist.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_lph_prl_fk3(id_prof_cancel_in => id_prof_cancel_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_lph_prl_fk3;

    PROCEDURE del_lph_prl_fk4
    (
        create_user_in  IN lens_presc_hist.create_user%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM lens_presc_hist
         WHERE create_user = del_lph_prl_fk4.create_user_in RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_lph_prl_fk4;

    PROCEDURE del_lph_prl_fk4
    (
        create_user_in  IN lens_presc_hist.create_user%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_lph_prl_fk4(create_user_in => create_user_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_lph_prl_fk4;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM LENS_PRESC_HIST';
        ELSE
            RETURN 'DELETE FROM LENS_PRESC_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'LENS_PRESC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'LENS_PRESC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(lens_presc_hist_inout IN OUT lens_presc_hist%ROWTYPE) IS
    BEGIN
        lens_presc_hist_inout.id_lens_presc_hist := NULL;
        lens_presc_hist_inout.id_lens_presc      := NULL;
        lens_presc_hist_inout.id_lens            := NULL;
        lens_presc_hist_inout.id_episode         := NULL;
        lens_presc_hist_inout.id_patient         := NULL;
        lens_presc_hist_inout.id_prof_presc      := NULL;
        lens_presc_hist_inout.dt_lens_presc_tstz := NULL;
        lens_presc_hist_inout.id_prof_cancel     := NULL;
        lens_presc_hist_inout.dt_cancel_tstz     := NULL;
        lens_presc_hist_inout.id_prof_print      := NULL;
        lens_presc_hist_inout.dt_print_tstz      := NULL;
        lens_presc_hist_inout.flg_status         := NULL;
        lens_presc_hist_inout.notes              := NULL;
        lens_presc_hist_inout.notes_cancel       := NULL;
        lens_presc_hist_inout.id_cancel_reason   := NULL;
        lens_presc_hist_inout.create_user        := NULL;
        lens_presc_hist_inout.create_time        := NULL;
    END initrec;

    FUNCTION initrec RETURN lens_presc_hist%ROWTYPE IS
        l_lens_presc_hist lens_presc_hist%ROWTYPE;
    BEGIN
        RETURN l_lens_presc_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN lens_presc_hist_tc IS
        data lens_presc_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM lens_presc_hist
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN lens_presc_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data lens_presc_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_lens_presc_hist;
/
