/*-- Last Change Revision: $Rev: 2028261 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:43 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY TS_MONITORIZATION
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Dezembro 19, 2014 17:27:54
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_monitorization_in IN MONITORIZATION.ID_MONITORIZATION%TYPE
      ,
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO MONITORIZATION (
         ID_MONITORIZATION,
         ID_EPISODE,
         ID_PROFESSIONAL,
         NOTES,
         FLG_TIME,
         INTERVAL,
         FLG_STATUS,
         ID_PROF_CANCEL,
         NOTES_CANCEL,
         ID_EPISODE_ORIGIN,
         ID_EPISODE_DESTINATION,
         ID_PREV_EPISODE,
         DT_MONITORIZATION_TSTZ,
         DT_BEGIN_TSTZ,
         DT_END_TSTZ,
         DT_CANCEL_TSTZ,
         ID_PATIENT,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         FLG_STATUS_PREV,
         ID_CO_SIGN_ORDER,
         ID_CO_SIGN_CANCEL
         )
      VALUES (
         id_monitorization_in,
         id_episode_in,
         id_professional_in,
         notes_in,
         flg_time_in,
         interval_in,
         flg_status_in,
         id_prof_cancel_in,
         notes_cancel_in,
         id_episode_origin_in,
         id_episode_destination_in,
         id_prev_episode_in,
         dt_monitorization_tstz_in,
         dt_begin_tstz_in,
         dt_end_tstz_in,
         dt_cancel_tstz_in,
         id_patient_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         flg_status_prev_in,
         id_co_sign_order_in,
         id_co_sign_cancel_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'MONITORIZATION');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           IF l_name = 'MON_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'MONT_CSC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CO_SIGN_CANCEL'
               , value_in => id_co_sign_cancel_in);
           END IF;
           IF l_name = 'MONT_CSO_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CO_SIGN_ORDER'
               , value_in => id_co_sign_order_in);
           END IF;
           IF l_name = 'MONT_EPIS_DEST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE_DESTINATION'
               , value_in => id_episode_destination_in);
           END IF;
           IF l_name = 'MONT_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'MONT_EPIS_FK1'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PREV_EPISODE'
               , value_in => id_prev_episode_in);
           END IF;
           IF l_name = 'MONT_EPIS_ORIGIN_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE_ORIGIN'
               , value_in => id_episode_origin_in);
           END IF;
           IF l_name = 'MONT_PROF_CANCEL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'MONT_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_monitorization_in IN MONITORIZATION.ID_MONITORIZATION%TYPE
      ,
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_monitorization_in => id_monitorization_in
      ,
      id_episode_in => id_episode_in,
      id_professional_in => id_professional_in,
      notes_in => notes_in,
      flg_time_in => flg_time_in,
      interval_in => interval_in,
      flg_status_in => flg_status_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      id_episode_origin_in => id_episode_origin_in,
      id_episode_destination_in => id_episode_destination_in,
      id_prev_episode_in => id_prev_episode_in,
      dt_monitorization_tstz_in => dt_monitorization_tstz_in,
      dt_begin_tstz_in => dt_begin_tstz_in,
      dt_end_tstz_in => dt_end_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      id_patient_in => id_patient_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      flg_status_prev_in => flg_status_prev_in,
      id_co_sign_order_in => id_co_sign_order_in,
      id_co_sign_cancel_in => id_co_sign_cancel_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN MONITORIZATION%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec MONITORIZATION%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_MONITORIZATION := next_key (sequence_in);
      END IF;
      ins (
         id_monitorization_in => l_rec.ID_MONITORIZATION
         ,
         id_episode_in => l_rec.ID_EPISODE,
         id_professional_in => l_rec.ID_PROFESSIONAL,
         notes_in => l_rec.NOTES,
         flg_time_in => l_rec.FLG_TIME,
         interval_in => l_rec.INTERVAL,
         flg_status_in => l_rec.FLG_STATUS,
         id_prof_cancel_in => l_rec.ID_PROF_CANCEL,
         notes_cancel_in => l_rec.NOTES_CANCEL,
         id_episode_origin_in => l_rec.ID_EPISODE_ORIGIN,
         id_episode_destination_in => l_rec.ID_EPISODE_DESTINATION,
         id_prev_episode_in => l_rec.ID_PREV_EPISODE,
         dt_monitorization_tstz_in => l_rec.DT_MONITORIZATION_TSTZ,
         dt_begin_tstz_in => l_rec.DT_BEGIN_TSTZ,
         dt_end_tstz_in => l_rec.DT_END_TSTZ,
         dt_cancel_tstz_in => l_rec.DT_CANCEL_TSTZ,
         id_patient_in => l_rec.ID_PATIENT,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         flg_status_prev_in => l_rec.FLG_STATUS_PREV,
         id_co_sign_order_in => l_rec.ID_CO_SIGN_ORDER,
         id_co_sign_cancel_in => l_rec.ID_CO_SIGN_CANCEL
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN MONITORIZATION%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN MONITORIZATION.ID_MONITORIZATION%TYPE

   IS
     retval MONITORIZATION.ID_MONITORIZATION%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_MONITORIZATION.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_MONITORIZATION')
           );
   END next_key;

   PROCEDURE ins (
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL,
      id_monitorization_out IN OUT MONITORIZATION.ID_MONITORIZATION%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky MONITORIZATION.ID_MONITORIZATION%TYPE := next_key;
   BEGIN
      ins (
         id_monitorization_in => l_pky,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         notes_in => notes_in,
         flg_time_in => flg_time_in,
         interval_in => interval_in,
         flg_status_in => flg_status_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_origin_in => id_episode_origin_in,
         id_episode_destination_in => id_episode_destination_in,
         id_prev_episode_in => id_prev_episode_in,
         dt_monitorization_tstz_in => dt_monitorization_tstz_in,
         dt_begin_tstz_in => dt_begin_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_status_prev_in => flg_status_prev_in,
         id_co_sign_order_in => id_co_sign_order_in,
         id_co_sign_cancel_in => id_co_sign_cancel_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_monitorization_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL,
      id_monitorization_out IN OUT MONITORIZATION.ID_MONITORIZATION%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_episode_in => id_episode_in,
      id_professional_in => id_professional_in,
      notes_in => notes_in,
      flg_time_in => flg_time_in,
      interval_in => interval_in,
      flg_status_in => flg_status_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      id_episode_origin_in => id_episode_origin_in,
      id_episode_destination_in => id_episode_destination_in,
      id_prev_episode_in => id_prev_episode_in,
      dt_monitorization_tstz_in => dt_monitorization_tstz_in,
      dt_begin_tstz_in => dt_begin_tstz_in,
      dt_end_tstz_in => dt_end_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      id_patient_in => id_patient_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      flg_status_prev_in => flg_status_prev_in,
      id_co_sign_order_in => id_co_sign_order_in,
      id_co_sign_cancel_in => id_co_sign_cancel_in,
      id_monitorization_out => id_monitorization_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         MONITORIZATION.ID_MONITORIZATION%TYPE
   IS
        l_pky MONITORIZATION.ID_MONITORIZATION%TYPE := next_key;
   BEGIN
      ins (
         id_monitorization_in => l_pky,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         notes_in => notes_in,
         flg_time_in => flg_time_in,
         interval_in => interval_in,
         flg_status_in => flg_status_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_origin_in => id_episode_origin_in,
         id_episode_destination_in => id_episode_destination_in,
         id_prev_episode_in => id_prev_episode_in,
         dt_monitorization_tstz_in => dt_monitorization_tstz_in,
         dt_begin_tstz_in => dt_begin_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_status_prev_in => flg_status_prev_in,
         id_co_sign_order_in => id_co_sign_order_in,
         id_co_sign_cancel_in => id_co_sign_cancel_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         MONITORIZATION.ID_MONITORIZATION%TYPE
   IS
        l_pky MONITORIZATION.ID_MONITORIZATION%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_monitorization_in => l_pky,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         notes_in => notes_in,
         flg_time_in => flg_time_in,
         interval_in => interval_in,
         flg_status_in => flg_status_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_origin_in => id_episode_origin_in,
         id_episode_destination_in => id_episode_destination_in,
         id_prev_episode_in => id_prev_episode_in,
         dt_monitorization_tstz_in => dt_monitorization_tstz_in,
         dt_begin_tstz_in => dt_begin_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_status_prev_in => flg_status_prev_in,
         id_co_sign_order_in => id_co_sign_order_in,
         id_co_sign_cancel_in => id_co_sign_cancel_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky MONITORIZATION.ID_MONITORIZATION%TYPE := next_key;
   BEGIN
      ins (
         id_monitorization_in => l_pky,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         notes_in => notes_in,
         flg_time_in => flg_time_in,
         interval_in => interval_in,
         flg_status_in => flg_status_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_origin_in => id_episode_origin_in,
         id_episode_destination_in => id_episode_destination_in,
         id_prev_episode_in => id_prev_episode_in,
         dt_monitorization_tstz_in => dt_monitorization_tstz_in,
         dt_begin_tstz_in => dt_begin_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_status_prev_in => flg_status_prev_in,
         id_co_sign_order_in => id_co_sign_order_in,
         id_co_sign_cancel_in => id_co_sign_cancel_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky MONITORIZATION.ID_MONITORIZATION%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_monitorization_in => l_pky,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         notes_in => notes_in,
         flg_time_in => flg_time_in,
         interval_in => interval_in,
         flg_status_in => flg_status_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_origin_in => id_episode_origin_in,
         id_episode_destination_in => id_episode_destination_in,
         id_prev_episode_in => id_prev_episode_in,
         dt_monitorization_tstz_in => dt_monitorization_tstz_in,
         dt_begin_tstz_in => dt_begin_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_status_prev_in => flg_status_prev_in,
         id_co_sign_order_in => id_co_sign_order_in,
         id_co_sign_cancel_in => id_co_sign_cancel_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN MONITORIZATION_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
       FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO MONITORIZATION (
               ID_MONITORIZATION,
               ID_EPISODE,
               ID_PROFESSIONAL,
               NOTES,
               FLG_TIME,
               INTERVAL,
               FLG_STATUS,
               ID_PROF_CANCEL,
               NOTES_CANCEL,
               ID_EPISODE_ORIGIN,
               ID_EPISODE_DESTINATION,
               ID_PREV_EPISODE,
               DT_MONITORIZATION_TSTZ,
               DT_BEGIN_TSTZ,
               DT_END_TSTZ,
               DT_CANCEL_TSTZ,
               ID_PATIENT,
               CREATE_USER,
               CREATE_TIME,
               CREATE_INSTITUTION,
               UPDATE_USER,
               UPDATE_TIME,
               UPDATE_INSTITUTION,
               FLG_STATUS_PREV,
               ID_CO_SIGN_ORDER,
               ID_CO_SIGN_CANCEL
               )
            VALUES (
               rows_in(indx).ID_MONITORIZATION,
               rows_in(indx).ID_EPISODE,
               rows_in(indx).ID_PROFESSIONAL,
               rows_in(indx).NOTES,
               rows_in(indx).FLG_TIME,
               rows_in(indx).INTERVAL,
               rows_in(indx).FLG_STATUS,
               rows_in(indx).ID_PROF_CANCEL,
               rows_in(indx).NOTES_CANCEL,
               rows_in(indx).ID_EPISODE_ORIGIN,
               rows_in(indx).ID_EPISODE_DESTINATION,
               rows_in(indx).ID_PREV_EPISODE,
               rows_in(indx).DT_MONITORIZATION_TSTZ,
               rows_in(indx).DT_BEGIN_TSTZ,
               rows_in(indx).DT_END_TSTZ,
               rows_in(indx).DT_CANCEL_TSTZ,
               rows_in(indx).ID_PATIENT,
               rows_in(indx).CREATE_USER,
               rows_in(indx).CREATE_TIME,
               rows_in(indx).CREATE_INSTITUTION,
               rows_in(indx).UPDATE_USER,
               rows_in(indx).UPDATE_TIME,
               rows_in(indx).UPDATE_INSTITUTION,
               rows_in(indx).FLG_STATUS_PREV,
               rows_in(indx).ID_CO_SIGN_ORDER,
               rows_in(indx).ID_CO_SIGN_CANCEL
               ) RETURNING ROWID BULK COLLECT INTO rows_out;

      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQLERRM (-SQL%BULK_EXCEPTIONS (indx).ERROR_CODE)
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_MONITORIZATION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_MONITORIZATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_EPISODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROFESSIONAL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROFESSIONAL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NOTES
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'INTERVAL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).INTERVAL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NOTES_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE_ORIGIN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_EPISODE_ORIGIN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE_DESTINATION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_EPISODE_DESTINATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PREV_EPISODE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PREV_EPISODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_MONITORIZATION_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_MONITORIZATION_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_BEGIN_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_BEGIN_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_END_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_END_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CANCEL_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_CANCEL_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PATIENT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PATIENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS_PREV _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_STATUS_PREV
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CO_SIGN_ORDER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CO_SIGN_ORDER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CO_SIGN_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CO_SIGN_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'MONITORIZATION'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN MONITORIZATION_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_monitorization_in IN MONITORIZATION.ID_MONITORIZATION%TYPE,
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      FLG_TIME_nin IN BOOLEAN := TRUE,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      INTERVAL_nin IN BOOLEAN := TRUE,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      ID_EPISODE_ORIGIN_nin IN BOOLEAN := TRUE,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      ID_EPISODE_DESTINATION_nin IN BOOLEAN := TRUE,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      ID_PREV_EPISODE_nin IN BOOLEAN := TRUE,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      DT_MONITORIZATION_TSTZ_nin IN BOOLEAN := TRUE,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      DT_BEGIN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      DT_END_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      FLG_STATUS_PREV_nin IN BOOLEAN := TRUE,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      ID_CO_SIGN_ORDER_nin IN BOOLEAN := TRUE,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL,
      ID_CO_SIGN_CANCEL_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_EPISODE_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_FLG_TIME_n NUMBER(1);
   l_INTERVAL_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_ID_EPISODE_ORIGIN_n NUMBER(1);
   l_ID_EPISODE_DESTINATION_n NUMBER(1);
   l_ID_PREV_EPISODE_n NUMBER(1);
   l_DT_MONITORIZATION_TSTZ_n NUMBER(1);
   l_DT_BEGIN_TSTZ_n NUMBER(1);
   l_DT_END_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_FLG_STATUS_PREV_n NUMBER(1);
   l_ID_CO_SIGN_ORDER_n NUMBER(1);
   l_ID_CO_SIGN_CANCEL_n NUMBER(1);
   BEGIN

   l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
   l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
   l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
   l_FLG_TIME_n := sys.diutil.bool_to_int(FLG_TIME_nin);
   l_INTERVAL_n := sys.diutil.bool_to_int(INTERVAL_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
   l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
   l_ID_EPISODE_ORIGIN_n := sys.diutil.bool_to_int(ID_EPISODE_ORIGIN_nin);
   l_ID_EPISODE_DESTINATION_n := sys.diutil.bool_to_int(ID_EPISODE_DESTINATION_nin);
   l_ID_PREV_EPISODE_n := sys.diutil.bool_to_int(ID_PREV_EPISODE_nin);
   l_DT_MONITORIZATION_TSTZ_n := sys.diutil.bool_to_int(DT_MONITORIZATION_TSTZ_nin);
   l_DT_BEGIN_TSTZ_n := sys.diutil.bool_to_int(DT_BEGIN_TSTZ_nin);
   l_DT_END_TSTZ_n := sys.diutil.bool_to_int(DT_END_TSTZ_nin);
   l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
   l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_FLG_STATUS_PREV_n := sys.diutil.bool_to_int(FLG_STATUS_PREV_nin);
   l_ID_CO_SIGN_ORDER_n := sys.diutil.bool_to_int(ID_CO_SIGN_ORDER_nin);
   l_ID_CO_SIGN_CANCEL_n := sys.diutil.bool_to_int(ID_CO_SIGN_CANCEL_nin);


         UPDATE MONITORIZATION SET
     ID_EPISODE = decode (l_ID_EPISODE_n,0,id_episode_in, NVL (id_episode_in, ID_EPISODE)),
     ID_PROFESSIONAL = decode (l_ID_PROFESSIONAL_n,0,id_professional_in, NVL (id_professional_in, ID_PROFESSIONAL)),
     NOTES = decode (l_NOTES_n,0,notes_in, NVL (notes_in, NOTES)),
     FLG_TIME = decode (l_FLG_TIME_n,0,flg_time_in, NVL (flg_time_in, FLG_TIME)),
     INTERVAL = decode (l_INTERVAL_n,0,interval_in, NVL (interval_in, INTERVAL)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     ID_PROF_CANCEL = decode (l_ID_PROF_CANCEL_n,0,id_prof_cancel_in, NVL (id_prof_cancel_in, ID_PROF_CANCEL)),
     NOTES_CANCEL = decode (l_NOTES_CANCEL_n,0,notes_cancel_in, NVL (notes_cancel_in, NOTES_CANCEL)),
     ID_EPISODE_ORIGIN = decode (l_ID_EPISODE_ORIGIN_n,0,id_episode_origin_in, NVL (id_episode_origin_in, ID_EPISODE_ORIGIN)),
     ID_EPISODE_DESTINATION = decode (l_ID_EPISODE_DESTINATION_n,0,id_episode_destination_in, NVL (id_episode_destination_in, ID_EPISODE_DESTINATION)),
     ID_PREV_EPISODE = decode (l_ID_PREV_EPISODE_n,0,id_prev_episode_in, NVL (id_prev_episode_in, ID_PREV_EPISODE)),
     DT_MONITORIZATION_TSTZ = decode (l_DT_MONITORIZATION_TSTZ_n,0,dt_monitorization_tstz_in, NVL (dt_monitorization_tstz_in, DT_MONITORIZATION_TSTZ)),
     DT_BEGIN_TSTZ = decode (l_DT_BEGIN_TSTZ_n,0,dt_begin_tstz_in, NVL (dt_begin_tstz_in, DT_BEGIN_TSTZ)),
     DT_END_TSTZ = decode (l_DT_END_TSTZ_n,0,dt_end_tstz_in, NVL (dt_end_tstz_in, DT_END_TSTZ)),
     DT_CANCEL_TSTZ = decode (l_DT_CANCEL_TSTZ_n,0,dt_cancel_tstz_in, NVL (dt_cancel_tstz_in, DT_CANCEL_TSTZ)),
     ID_PATIENT = decode (l_ID_PATIENT_n,0,id_patient_in, NVL (id_patient_in, ID_PATIENT)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     FLG_STATUS_PREV = decode (l_FLG_STATUS_PREV_n,0,flg_status_prev_in, NVL (flg_status_prev_in, FLG_STATUS_PREV)),
     ID_CO_SIGN_ORDER = decode (l_ID_CO_SIGN_ORDER_n,0,id_co_sign_order_in, NVL (id_co_sign_order_in, ID_CO_SIGN_ORDER)),
     ID_CO_SIGN_CANCEL = decode (l_ID_CO_SIGN_CANCEL_n,0,id_co_sign_cancel_in, NVL (id_co_sign_cancel_in, ID_CO_SIGN_CANCEL))
          WHERE
             ID_MONITORIZATION = id_monitorization_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'MONITORIZATION');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           IF l_name = 'MON_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'MONT_CSC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CO_SIGN_CANCEL'
               , value_in => id_co_sign_cancel_in);
           END IF;
           IF l_name = 'MONT_CSO_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CO_SIGN_ORDER'
               , value_in => id_co_sign_order_in);
           END IF;
           IF l_name = 'MONT_EPIS_DEST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE_DESTINATION'
               , value_in => id_episode_destination_in);
           END IF;
           IF l_name = 'MONT_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'MONT_EPIS_FK1'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PREV_EPISODE'
               , value_in => id_prev_episode_in);
           END IF;
           IF l_name = 'MONT_EPIS_ORIGIN_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE_ORIGIN'
               , value_in => id_episode_origin_in);
           END IF;
           IF l_name = 'MONT_PROF_CANCEL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'MONT_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_monitorization_in IN MONITORIZATION.ID_MONITORIZATION%TYPE,
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      FLG_TIME_nin IN BOOLEAN := TRUE,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      INTERVAL_nin IN BOOLEAN := TRUE,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      ID_EPISODE_ORIGIN_nin IN BOOLEAN := TRUE,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      ID_EPISODE_DESTINATION_nin IN BOOLEAN := TRUE,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      ID_PREV_EPISODE_nin IN BOOLEAN := TRUE,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      DT_MONITORIZATION_TSTZ_nin IN BOOLEAN := TRUE,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      DT_BEGIN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      DT_END_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      FLG_STATUS_PREV_nin IN BOOLEAN := TRUE,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      ID_CO_SIGN_ORDER_nin IN BOOLEAN := TRUE,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL,
      ID_CO_SIGN_CANCEL_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_monitorization_in => id_monitorization_in,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      flg_time_in => flg_time_in,
      FLG_TIME_nin => FLG_TIME_nin,
      interval_in => interval_in,
      INTERVAL_nin => INTERVAL_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      id_episode_origin_in => id_episode_origin_in,
      ID_EPISODE_ORIGIN_nin => ID_EPISODE_ORIGIN_nin,
      id_episode_destination_in => id_episode_destination_in,
      ID_EPISODE_DESTINATION_nin => ID_EPISODE_DESTINATION_nin,
      id_prev_episode_in => id_prev_episode_in,
      ID_PREV_EPISODE_nin => ID_PREV_EPISODE_nin,
      dt_monitorization_tstz_in => dt_monitorization_tstz_in,
      DT_MONITORIZATION_TSTZ_nin => DT_MONITORIZATION_TSTZ_nin,
      dt_begin_tstz_in => dt_begin_tstz_in,
      DT_BEGIN_TSTZ_nin => DT_BEGIN_TSTZ_nin,
      dt_end_tstz_in => dt_end_tstz_in,
      DT_END_TSTZ_nin => DT_END_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      flg_status_prev_in => flg_status_prev_in,
      FLG_STATUS_PREV_nin => FLG_STATUS_PREV_nin,
      id_co_sign_order_in => id_co_sign_order_in,
      ID_CO_SIGN_ORDER_nin => ID_CO_SIGN_ORDER_nin,
      id_co_sign_cancel_in => id_co_sign_cancel_in,
      ID_CO_SIGN_CANCEL_nin => ID_CO_SIGN_CANCEL_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      FLG_TIME_nin IN BOOLEAN := TRUE,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      INTERVAL_nin IN BOOLEAN := TRUE,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      ID_EPISODE_ORIGIN_nin IN BOOLEAN := TRUE,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      ID_EPISODE_DESTINATION_nin IN BOOLEAN := TRUE,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      ID_PREV_EPISODE_nin IN BOOLEAN := TRUE,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      DT_MONITORIZATION_TSTZ_nin IN BOOLEAN := TRUE,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      DT_BEGIN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      DT_END_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      FLG_STATUS_PREV_nin IN BOOLEAN := TRUE,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      ID_CO_SIGN_ORDER_nin IN BOOLEAN := TRUE,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL,
      ID_CO_SIGN_CANCEL_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_EPISODE_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_FLG_TIME_n NUMBER(1);
   l_INTERVAL_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_ID_EPISODE_ORIGIN_n NUMBER(1);
   l_ID_EPISODE_DESTINATION_n NUMBER(1);
   l_ID_PREV_EPISODE_n NUMBER(1);
   l_DT_MONITORIZATION_TSTZ_n NUMBER(1);
   l_DT_BEGIN_TSTZ_n NUMBER(1);
   l_DT_END_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_FLG_STATUS_PREV_n NUMBER(1);
   l_ID_CO_SIGN_ORDER_n NUMBER(1);
   l_ID_CO_SIGN_CANCEL_n NUMBER(1);
      id_monitorization_in MONITORIZATION.ID_MONITORIZATION%TYPE;
   BEGIN



      l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
      l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
      l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
      l_FLG_TIME_n := sys.diutil.bool_to_int(FLG_TIME_nin);
      l_INTERVAL_n := sys.diutil.bool_to_int(INTERVAL_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
      l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
      l_ID_EPISODE_ORIGIN_n := sys.diutil.bool_to_int(ID_EPISODE_ORIGIN_nin);
      l_ID_EPISODE_DESTINATION_n := sys.diutil.bool_to_int(ID_EPISODE_DESTINATION_nin);
      l_ID_PREV_EPISODE_n := sys.diutil.bool_to_int(ID_PREV_EPISODE_nin);
      l_DT_MONITORIZATION_TSTZ_n := sys.diutil.bool_to_int(DT_MONITORIZATION_TSTZ_nin);
      l_DT_BEGIN_TSTZ_n := sys.diutil.bool_to_int(DT_BEGIN_TSTZ_nin);
      l_DT_END_TSTZ_n := sys.diutil.bool_to_int(DT_END_TSTZ_nin);
      l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
      l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_FLG_STATUS_PREV_n := sys.diutil.bool_to_int(FLG_STATUS_PREV_nin);
      l_ID_CO_SIGN_ORDER_n := sys.diutil.bool_to_int(ID_CO_SIGN_ORDER_nin);
      l_ID_CO_SIGN_CANCEL_n := sys.diutil.bool_to_int(ID_CO_SIGN_CANCEL_nin);



l_sql := 'UPDATE MONITORIZATION SET '
     || ' ID_EPISODE = decode (' || l_ID_EPISODE_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) '|| ','
     || ' ID_PROFESSIONAL = decode (' || l_ID_PROFESSIONAL_n || ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) '|| ','
     || ' NOTES = decode (' || l_NOTES_n || ',0,:notes_in, NVL (:notes_in, NOTES)) '|| ','
     || ' FLG_TIME = decode (' || l_FLG_TIME_n || ',0,:flg_time_in, NVL (:flg_time_in, FLG_TIME)) '|| ','
     || ' INTERVAL = decode (' || l_INTERVAL_n || ',0,:interval_in, NVL (:interval_in, INTERVAL)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' ID_PROF_CANCEL = decode (' || l_ID_PROF_CANCEL_n || ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) '|| ','
     || ' NOTES_CANCEL = decode (' || l_NOTES_CANCEL_n || ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) '|| ','
     || ' ID_EPISODE_ORIGIN = decode (' || l_ID_EPISODE_ORIGIN_n || ',0,:id_episode_origin_in, NVL (:id_episode_origin_in, ID_EPISODE_ORIGIN)) '|| ','
     || ' ID_EPISODE_DESTINATION = decode (' || l_ID_EPISODE_DESTINATION_n || ',0,:id_episode_destination_in, NVL (:id_episode_destination_in, ID_EPISODE_DESTINATION)) '|| ','
     || ' ID_PREV_EPISODE = decode (' || l_ID_PREV_EPISODE_n || ',0,:id_prev_episode_in, NVL (:id_prev_episode_in, ID_PREV_EPISODE)) '|| ','
     || ' DT_MONITORIZATION_TSTZ = decode (' || l_DT_MONITORIZATION_TSTZ_n || ',0,:dt_monitorization_tstz_in, NVL (:dt_monitorization_tstz_in, DT_MONITORIZATION_TSTZ)) '|| ','
     || ' DT_BEGIN_TSTZ = decode (' || l_DT_BEGIN_TSTZ_n || ',0,:dt_begin_tstz_in, NVL (:dt_begin_tstz_in, DT_BEGIN_TSTZ)) '|| ','
     || ' DT_END_TSTZ = decode (' || l_DT_END_TSTZ_n || ',0,:dt_end_tstz_in, NVL (:dt_end_tstz_in, DT_END_TSTZ)) '|| ','
     || ' DT_CANCEL_TSTZ = decode (' || l_DT_CANCEL_TSTZ_n || ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) '|| ','
     || ' ID_PATIENT = decode (' || l_ID_PATIENT_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' FLG_STATUS_PREV = decode (' || l_FLG_STATUS_PREV_n || ',0,:flg_status_prev_in, NVL (:flg_status_prev_in, FLG_STATUS_PREV)) '|| ','
     || ' ID_CO_SIGN_ORDER = decode (' || l_ID_CO_SIGN_ORDER_n || ',0,:id_co_sign_order_in, NVL (:id_co_sign_order_in, ID_CO_SIGN_ORDER)) '|| ','
     || ' ID_CO_SIGN_CANCEL = decode (' || l_ID_CO_SIGN_CANCEL_n || ',0,:id_co_sign_cancel_in, NVL (:id_co_sign_cancel_in, ID_CO_SIGN_CANCEL)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_episode_in,
     id_professional_in,
     notes_in,
     flg_time_in,
     interval_in,
     flg_status_in,
     id_prof_cancel_in,
     notes_cancel_in,
     id_episode_origin_in,
     id_episode_destination_in,
     id_prev_episode_in,
     dt_monitorization_tstz_in,
     dt_begin_tstz_in,
     dt_end_tstz_in,
     dt_cancel_tstz_in,
     id_patient_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     flg_status_prev_in,
     id_co_sign_order_in,
     id_co_sign_cancel_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'MONITORIZATION');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           IF l_name = 'MON_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'MONT_CSC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CO_SIGN_CANCEL'
               , value_in => id_co_sign_cancel_in);
           END IF;
           IF l_name = 'MONT_CSO_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CO_SIGN_ORDER'
               , value_in => id_co_sign_order_in);
           END IF;
           IF l_name = 'MONT_EPIS_DEST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE_DESTINATION'
               , value_in => id_episode_destination_in);
           END IF;
           IF l_name = 'MONT_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'MONT_EPIS_FK1'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PREV_EPISODE'
               , value_in => id_prev_episode_in);
           END IF;
           IF l_name = 'MONT_EPIS_ORIGIN_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE_ORIGIN'
               , value_in => id_episode_origin_in);
           END IF;
           IF l_name = 'MONT_PROF_CANCEL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'MONT_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      FLG_TIME_nin IN BOOLEAN := TRUE,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      INTERVAL_nin IN BOOLEAN := TRUE,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      ID_EPISODE_ORIGIN_nin IN BOOLEAN := TRUE,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      ID_EPISODE_DESTINATION_nin IN BOOLEAN := TRUE,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      ID_PREV_EPISODE_nin IN BOOLEAN := TRUE,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      DT_MONITORIZATION_TSTZ_nin IN BOOLEAN := TRUE,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      DT_BEGIN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      DT_END_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      FLG_STATUS_PREV_nin IN BOOLEAN := TRUE,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      ID_CO_SIGN_ORDER_nin IN BOOLEAN := TRUE,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL,
      ID_CO_SIGN_CANCEL_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      flg_time_in => flg_time_in,
      FLG_TIME_nin => FLG_TIME_nin,
      interval_in => interval_in,
      INTERVAL_nin => INTERVAL_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      id_episode_origin_in => id_episode_origin_in,
      ID_EPISODE_ORIGIN_nin => ID_EPISODE_ORIGIN_nin,
      id_episode_destination_in => id_episode_destination_in,
      ID_EPISODE_DESTINATION_nin => ID_EPISODE_DESTINATION_nin,
      id_prev_episode_in => id_prev_episode_in,
      ID_PREV_EPISODE_nin => ID_PREV_EPISODE_nin,
      dt_monitorization_tstz_in => dt_monitorization_tstz_in,
      DT_MONITORIZATION_TSTZ_nin => DT_MONITORIZATION_TSTZ_nin,
      dt_begin_tstz_in => dt_begin_tstz_in,
      DT_BEGIN_TSTZ_nin => DT_BEGIN_TSTZ_nin,
      dt_end_tstz_in => dt_end_tstz_in,
      DT_END_TSTZ_nin => DT_END_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      flg_status_prev_in => flg_status_prev_in,
      FLG_STATUS_PREV_nin => FLG_STATUS_PREV_nin,
      id_co_sign_order_in => id_co_sign_order_in,
      ID_CO_SIGN_ORDER_nin => ID_CO_SIGN_ORDER_nin,
      id_co_sign_cancel_in => id_co_sign_cancel_in,
      ID_CO_SIGN_CANCEL_nin => ID_CO_SIGN_CANCEL_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN MONITORIZATION%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_monitorization_in => rec_in.ID_MONITORIZATION,
         id_episode_in => rec_in.ID_EPISODE,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         notes_in => rec_in.NOTES,
         flg_time_in => rec_in.FLG_TIME,
         interval_in => rec_in.INTERVAL,
         flg_status_in => rec_in.FLG_STATUS,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         id_episode_origin_in => rec_in.ID_EPISODE_ORIGIN,
         id_episode_destination_in => rec_in.ID_EPISODE_DESTINATION,
         id_prev_episode_in => rec_in.ID_PREV_EPISODE,
         dt_monitorization_tstz_in => rec_in.DT_MONITORIZATION_TSTZ,
         dt_begin_tstz_in => rec_in.DT_BEGIN_TSTZ,
         dt_end_tstz_in => rec_in.DT_END_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         id_patient_in => rec_in.ID_PATIENT,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         flg_status_prev_in => rec_in.FLG_STATUS_PREV,
         id_co_sign_order_in => rec_in.ID_CO_SIGN_ORDER,
         id_co_sign_cancel_in => rec_in.ID_CO_SIGN_CANCEL

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN MONITORIZATION%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_monitorization_in => rec_in.ID_MONITORIZATION,
         id_episode_in => rec_in.ID_EPISODE,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         notes_in => rec_in.NOTES,
         flg_time_in => rec_in.FLG_TIME,
         interval_in => rec_in.INTERVAL,
         flg_status_in => rec_in.FLG_STATUS,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         id_episode_origin_in => rec_in.ID_EPISODE_ORIGIN,
         id_episode_destination_in => rec_in.ID_EPISODE_DESTINATION,
         id_prev_episode_in => rec_in.ID_PREV_EPISODE,
         dt_monitorization_tstz_in => rec_in.DT_MONITORIZATION_TSTZ,
         dt_begin_tstz_in => rec_in.DT_BEGIN_TSTZ,
         dt_end_tstz_in => rec_in.DT_END_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         id_patient_in => rec_in.ID_PATIENT,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         flg_status_prev_in => rec_in.FLG_STATUS_PREV,
         id_co_sign_order_in => rec_in.ID_CO_SIGN_ORDER,
         id_co_sign_cancel_in => rec_in.ID_CO_SIGN_CANCEL

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_monitorization_in IN MONITORIZATION.ID_MONITORIZATION%TYPE,
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_monitorization_in => id_monitorization_in,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         notes_in => notes_in,
         flg_time_in => flg_time_in,
         interval_in => interval_in,
         flg_status_in => flg_status_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_episode_origin_in => id_episode_origin_in,
         id_episode_destination_in => id_episode_destination_in,
         id_prev_episode_in => id_prev_episode_in,
         dt_monitorization_tstz_in => dt_monitorization_tstz_in,
         dt_begin_tstz_in => dt_begin_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_patient_in => id_patient_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_status_prev_in => flg_status_prev_in,
         id_co_sign_order_in => id_co_sign_order_in,
         id_co_sign_cancel_in => id_co_sign_cancel_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_monitorization_in => id_monitorization_in,
            id_episode_in => id_episode_in,
            id_professional_in => id_professional_in,
            notes_in => notes_in,
            flg_time_in => flg_time_in,
            interval_in => interval_in,
            flg_status_in => flg_status_in,
            id_prof_cancel_in => id_prof_cancel_in,
            notes_cancel_in => notes_cancel_in,
            id_episode_origin_in => id_episode_origin_in,
            id_episode_destination_in => id_episode_destination_in,
            id_prev_episode_in => id_prev_episode_in,
            dt_monitorization_tstz_in => dt_monitorization_tstz_in,
            dt_begin_tstz_in => dt_begin_tstz_in,
            dt_end_tstz_in => dt_end_tstz_in,
            dt_cancel_tstz_in => dt_cancel_tstz_in,
            id_patient_in => id_patient_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            flg_status_prev_in => flg_status_prev_in,
            id_co_sign_order_in => id_co_sign_order_in,
            id_co_sign_cancel_in => id_co_sign_cancel_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_monitorization_in IN MONITORIZATION.ID_MONITORIZATION%TYPE,
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN MONITORIZATION.NOTES%TYPE DEFAULT NULL,
      flg_time_in IN MONITORIZATION.FLG_TIME%TYPE DEFAULT NULL,
      interval_in IN MONITORIZATION.INTERVAL%TYPE DEFAULT NULL,
      flg_status_in IN MONITORIZATION.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN MONITORIZATION.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE DEFAULT NULL,
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE DEFAULT NULL,
      dt_monitorization_tstz_in IN MONITORIZATION.DT_MONITORIZATION_TSTZ%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN MONITORIZATION.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN MONITORIZATION.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN MONITORIZATION.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE DEFAULT NULL,
      create_user_in IN MONITORIZATION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN MONITORIZATION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN MONITORIZATION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN MONITORIZATION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN MONITORIZATION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN MONITORIZATION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_prev_in IN MONITORIZATION.FLG_STATUS_PREV%TYPE DEFAULT NULL,
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE DEFAULT NULL,
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_monitorization_in,
      id_episode_in,
      id_professional_in,
      notes_in,
      flg_time_in,
      interval_in,
      flg_status_in,
      id_prof_cancel_in,
      notes_cancel_in,
      id_episode_origin_in,
      id_episode_destination_in,
      id_prev_episode_in,
      dt_monitorization_tstz_in,
      dt_begin_tstz_in,
      dt_end_tstz_in,
      dt_cancel_tstz_in,
      id_patient_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      flg_status_prev_in,
      id_co_sign_order_in,
      id_co_sign_cancel_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN MONITORIZATION_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_MONITORIZATION ID_MONITORIZATION_cc;
      l_ID_EPISODE ID_EPISODE_cc;
      l_ID_PROFESSIONAL ID_PROFESSIONAL_cc;
      l_NOTES NOTES_cc;
      l_FLG_TIME FLG_TIME_cc;
      l_INTERVAL INTERVAL_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_ID_PROF_CANCEL ID_PROF_CANCEL_cc;
      l_NOTES_CANCEL NOTES_CANCEL_cc;
      l_ID_EPISODE_ORIGIN ID_EPISODE_ORIGIN_cc;
      l_ID_EPISODE_DESTINATION ID_EPISODE_DESTINATION_cc;
      l_ID_PREV_EPISODE ID_PREV_EPISODE_cc;
      l_DT_MONITORIZATION_TSTZ DT_MONITORIZATION_TSTZ_cc;
      l_DT_BEGIN_TSTZ DT_BEGIN_TSTZ_cc;
      l_DT_END_TSTZ DT_END_TSTZ_cc;
      l_DT_CANCEL_TSTZ DT_CANCEL_TSTZ_cc;
      l_ID_PATIENT ID_PATIENT_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_FLG_STATUS_PREV FLG_STATUS_PREV_cc;
      l_ID_CO_SIGN_ORDER ID_CO_SIGN_ORDER_cc;
      l_ID_CO_SIGN_CANCEL ID_CO_SIGN_CANCEL_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_MONITORIZATION(i) := col_in(i).ID_MONITORIZATION;
         l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
         l_ID_PROFESSIONAL(i) := col_in(i).ID_PROFESSIONAL;
         l_NOTES(i) := col_in(i).NOTES;
         l_FLG_TIME(i) := col_in(i).FLG_TIME;
         l_INTERVAL(i) := col_in(i).INTERVAL;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_ID_PROF_CANCEL(i) := col_in(i).ID_PROF_CANCEL;
         l_NOTES_CANCEL(i) := col_in(i).NOTES_CANCEL;
         l_ID_EPISODE_ORIGIN(i) := col_in(i).ID_EPISODE_ORIGIN;
         l_ID_EPISODE_DESTINATION(i) := col_in(i).ID_EPISODE_DESTINATION;
         l_ID_PREV_EPISODE(i) := col_in(i).ID_PREV_EPISODE;
         l_DT_MONITORIZATION_TSTZ(i) := col_in(i).DT_MONITORIZATION_TSTZ;
         l_DT_BEGIN_TSTZ(i) := col_in(i).DT_BEGIN_TSTZ;
         l_DT_END_TSTZ(i) := col_in(i).DT_END_TSTZ;
         l_DT_CANCEL_TSTZ(i) := col_in(i).DT_CANCEL_TSTZ;
         l_ID_PATIENT(i) := col_in(i).ID_PATIENT;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_FLG_STATUS_PREV(i) := col_in(i).FLG_STATUS_PREV;
         l_ID_CO_SIGN_ORDER(i) := col_in(i).ID_CO_SIGN_ORDER;
         l_ID_CO_SIGN_CANCEL(i) := col_in(i).ID_CO_SIGN_CANCEL;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE MONITORIZATION SET
               ID_EPISODE = NVL (l_ID_EPISODE(i), ID_EPISODE),
               ID_PROFESSIONAL = NVL (l_ID_PROFESSIONAL(i), ID_PROFESSIONAL),
               NOTES = NVL (l_NOTES(i), NOTES),
               FLG_TIME = NVL (l_FLG_TIME(i), FLG_TIME),
               INTERVAL = NVL (l_INTERVAL(i), INTERVAL),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               ID_PROF_CANCEL = NVL (l_ID_PROF_CANCEL(i), ID_PROF_CANCEL),
               NOTES_CANCEL = NVL (l_NOTES_CANCEL(i), NOTES_CANCEL),
               ID_EPISODE_ORIGIN = NVL (l_ID_EPISODE_ORIGIN(i), ID_EPISODE_ORIGIN),
               ID_EPISODE_DESTINATION = NVL (l_ID_EPISODE_DESTINATION(i), ID_EPISODE_DESTINATION),
               ID_PREV_EPISODE = NVL (l_ID_PREV_EPISODE(i), ID_PREV_EPISODE),
               DT_MONITORIZATION_TSTZ = NVL (l_DT_MONITORIZATION_TSTZ(i), DT_MONITORIZATION_TSTZ),
               DT_BEGIN_TSTZ = NVL (l_DT_BEGIN_TSTZ(i), DT_BEGIN_TSTZ),
               DT_END_TSTZ = NVL (l_DT_END_TSTZ(i), DT_END_TSTZ),
               DT_CANCEL_TSTZ = NVL (l_DT_CANCEL_TSTZ(i), DT_CANCEL_TSTZ),
               ID_PATIENT = NVL (l_ID_PATIENT(i), ID_PATIENT),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               FLG_STATUS_PREV = NVL (l_FLG_STATUS_PREV(i), FLG_STATUS_PREV),
               ID_CO_SIGN_ORDER = NVL (l_ID_CO_SIGN_ORDER(i), ID_CO_SIGN_ORDER),
               ID_CO_SIGN_CANCEL = NVL (l_ID_CO_SIGN_CANCEL(i), ID_CO_SIGN_CANCEL)
             WHERE
                ID_MONITORIZATION = l_ID_MONITORIZATION(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE MONITORIZATION SET
               ID_EPISODE = l_ID_EPISODE(i),
               ID_PROFESSIONAL = l_ID_PROFESSIONAL(i),
               NOTES = l_NOTES(i),
               FLG_TIME = l_FLG_TIME(i),
               INTERVAL = l_INTERVAL(i),
               FLG_STATUS = l_FLG_STATUS(i),
               ID_PROF_CANCEL = l_ID_PROF_CANCEL(i),
               NOTES_CANCEL = l_NOTES_CANCEL(i),
               ID_EPISODE_ORIGIN = l_ID_EPISODE_ORIGIN(i),
               ID_EPISODE_DESTINATION = l_ID_EPISODE_DESTINATION(i),
               ID_PREV_EPISODE = l_ID_PREV_EPISODE(i),
               DT_MONITORIZATION_TSTZ = l_DT_MONITORIZATION_TSTZ(i),
               DT_BEGIN_TSTZ = l_DT_BEGIN_TSTZ(i),
               DT_END_TSTZ = l_DT_END_TSTZ(i),
               DT_CANCEL_TSTZ = l_DT_CANCEL_TSTZ(i),
               ID_PATIENT = l_ID_PATIENT(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               FLG_STATUS_PREV = l_FLG_STATUS_PREV(i),
               ID_CO_SIGN_ORDER = l_ID_CO_SIGN_ORDER(i),
               ID_CO_SIGN_CANCEL = l_ID_CO_SIGN_CANCEL(i)
             WHERE
                ID_MONITORIZATION = l_ID_MONITORIZATION(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN MONITORIZATION_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE MONITORIZATION
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE MONITORIZATION
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE MONITORIZATION set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE MONITORIZATION set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_monitorization_in IN MONITORIZATION.ID_MONITORIZATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM MONITORIZATION
       WHERE
          ID_MONITORIZATION = id_monitorization_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_monitorization_in IN MONITORIZATION.ID_MONITORIZATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_monitorization_in => id_monitorization_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_MONITORIZATION
   PROCEDURE del_ID_MONITORIZATION (
      id_monitorization_in IN MONITORIZATION.ID_MONITORIZATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM MONITORIZATION
       WHERE ID_MONITORIZATION = id_monitorization_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_MONITORIZATION;






   -- Delete all rows for primary key column ID_MONITORIZATION
   PROCEDURE del_ID_MONITORIZATION (
      id_monitorization_in IN MONITORIZATION.ID_MONITORIZATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_MONITORIZATION (
      id_monitorization_in => id_monitorization_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_MONITORIZATION;















   PROCEDURE del_MON_PAT_FK (
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM MONITORIZATION
       WHERE
          ID_PATIENT = del_MON_PAT_FK.id_patient_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_MON_PAT_FK;



PROCEDURE del_MON_PAT_FK (
      id_patient_in IN MONITORIZATION.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_MON_PAT_FK (
      id_patient_in => id_patient_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_MON_PAT_FK;





   PROCEDURE del_MONT_CSC_FK (
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM MONITORIZATION
       WHERE
          ID_CO_SIGN_CANCEL = del_MONT_CSC_FK.id_co_sign_cancel_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_MONT_CSC_FK;



PROCEDURE del_MONT_CSC_FK (
      id_co_sign_cancel_in IN MONITORIZATION.ID_CO_SIGN_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_MONT_CSC_FK (
      id_co_sign_cancel_in => id_co_sign_cancel_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_MONT_CSC_FK;





   PROCEDURE del_MONT_CSO_FK (
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM MONITORIZATION
       WHERE
          ID_CO_SIGN_ORDER = del_MONT_CSO_FK.id_co_sign_order_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_MONT_CSO_FK;



PROCEDURE del_MONT_CSO_FK (
      id_co_sign_order_in IN MONITORIZATION.ID_CO_SIGN_ORDER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_MONT_CSO_FK (
      id_co_sign_order_in => id_co_sign_order_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_MONT_CSO_FK;





   PROCEDURE del_MONT_EPIS_DEST_FK (
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM MONITORIZATION
       WHERE
          ID_EPISODE_DESTINATION = del_MONT_EPIS_DEST_FK.id_episode_destination_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_MONT_EPIS_DEST_FK;



PROCEDURE del_MONT_EPIS_DEST_FK (
      id_episode_destination_in IN MONITORIZATION.ID_EPISODE_DESTINATION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_MONT_EPIS_DEST_FK (
      id_episode_destination_in => id_episode_destination_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_MONT_EPIS_DEST_FK;





   PROCEDURE del_MONT_EPIS_FK (
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM MONITORIZATION
       WHERE
          ID_EPISODE = del_MONT_EPIS_FK.id_episode_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_MONT_EPIS_FK;



PROCEDURE del_MONT_EPIS_FK (
      id_episode_in IN MONITORIZATION.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_MONT_EPIS_FK (
      id_episode_in => id_episode_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_MONT_EPIS_FK;





   PROCEDURE del_MONT_EPIS_FK1 (
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM MONITORIZATION
       WHERE
          ID_PREV_EPISODE = del_MONT_EPIS_FK1.id_prev_episode_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_MONT_EPIS_FK1;



PROCEDURE del_MONT_EPIS_FK1 (
      id_prev_episode_in IN MONITORIZATION.ID_PREV_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_MONT_EPIS_FK1 (
      id_prev_episode_in => id_prev_episode_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_MONT_EPIS_FK1;





   PROCEDURE del_MONT_EPIS_ORIGIN_FK (
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM MONITORIZATION
       WHERE
          ID_EPISODE_ORIGIN = del_MONT_EPIS_ORIGIN_FK.id_episode_origin_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_MONT_EPIS_ORIGIN_FK;



PROCEDURE del_MONT_EPIS_ORIGIN_FK (
      id_episode_origin_in IN MONITORIZATION.ID_EPISODE_ORIGIN%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_MONT_EPIS_ORIGIN_FK (
      id_episode_origin_in => id_episode_origin_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_MONT_EPIS_ORIGIN_FK;





   PROCEDURE del_MONT_PROF_CANCEL_FK (
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM MONITORIZATION
       WHERE
          ID_PROF_CANCEL = del_MONT_PROF_CANCEL_FK.id_prof_cancel_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_MONT_PROF_CANCEL_FK;



PROCEDURE del_MONT_PROF_CANCEL_FK (
      id_prof_cancel_in IN MONITORIZATION.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_MONT_PROF_CANCEL_FK (
      id_prof_cancel_in => id_prof_cancel_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_MONT_PROF_CANCEL_FK;





   PROCEDURE del_MONT_PROF_FK (
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM MONITORIZATION
       WHERE
          ID_PROFESSIONAL = del_MONT_PROF_FK.id_professional_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_MONT_PROF_FK;



PROCEDURE del_MONT_PROF_FK (
      id_professional_in IN MONITORIZATION.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_MONT_PROF_FK (
      id_professional_in => id_professional_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_MONT_PROF_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM MONITORIZATION';
      ELSE
         RETURN
            'DELETE FROM MONITORIZATION WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'MONITORIZATION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'MONITORIZATION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      monitorization_inout IN OUT MONITORIZATION%ROWTYPE
   )
   IS
   BEGIN
      monitorization_inout.ID_MONITORIZATION := NULL;
      monitorization_inout.ID_EPISODE := NULL;
      monitorization_inout.ID_PROFESSIONAL := NULL;
      monitorization_inout.NOTES := NULL;
      monitorization_inout.FLG_TIME := NULL;
      monitorization_inout.INTERVAL := NULL;
      monitorization_inout.FLG_STATUS := NULL;
      monitorization_inout.ID_PROF_CANCEL := NULL;
      monitorization_inout.NOTES_CANCEL := NULL;
      monitorization_inout.ID_EPISODE_ORIGIN := NULL;
      monitorization_inout.ID_EPISODE_DESTINATION := NULL;
      monitorization_inout.ID_PREV_EPISODE := NULL;
      monitorization_inout.DT_MONITORIZATION_TSTZ := NULL;
      monitorization_inout.DT_BEGIN_TSTZ := NULL;
      monitorization_inout.DT_END_TSTZ := NULL;
      monitorization_inout.DT_CANCEL_TSTZ := NULL;
      monitorization_inout.ID_PATIENT := NULL;
      monitorization_inout.CREATE_USER := NULL;
      monitorization_inout.CREATE_TIME := NULL;
      monitorization_inout.CREATE_INSTITUTION := NULL;
      monitorization_inout.UPDATE_USER := NULL;
      monitorization_inout.UPDATE_TIME := NULL;
      monitorization_inout.UPDATE_INSTITUTION := NULL;
      monitorization_inout.FLG_STATUS_PREV := NULL;
      monitorization_inout.ID_CO_SIGN_ORDER := NULL;
      monitorization_inout.ID_CO_SIGN_CANCEL := NULL;
   END initrec;

   FUNCTION initrec RETURN MONITORIZATION%ROWTYPE
   IS
      l_monitorization MONITORIZATION%ROWTYPE;
   BEGIN
      RETURN l_monitorization;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN MONITORIZATION_tc
   IS
        data MONITORIZATION_tc;
   BEGIN
        select * bulk collect into data from MONITORIZATION where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN MONITORIZATION_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data MONITORIZATION_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_MONITORIZATION;
/
