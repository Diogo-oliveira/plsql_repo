/*-- Last Change Revision: $Rev: 2028268 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:46 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_nurse_tea_det
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2021-08-02 16:04:16
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN nurse_tea_det.id_nurse_tea_det%TYPE IS
        retval nurse_tea_det.id_nurse_tea_det%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_nurse_tea_det.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_nurse_tea_req_in      IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_prof_provider_in      IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        dt_start_in              IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_end_in                IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        notes_diagnosis_in       IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_education_in       IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_evaluation_in      IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        create_user_in           IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_time_in           IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_time_in           IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_in IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        duration_in              IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        flg_status_in            IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        num_order_in             IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        description_in           IN nurse_tea_det.description%TYPE DEFAULT NULL,
        id_unit_meas_duration_in IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        dt_planned_in            IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_pky nurse_tea_det.id_nurse_tea_det%TYPE := next_key;
    BEGIN
        ins(id_nurse_tea_det_in      => l_pky,
            id_nurse_tea_req_in      => id_nurse_tea_req_in,
            id_prof_provider_in      => id_prof_provider_in,
            dt_start_in              => dt_start_in,
            dt_end_in                => dt_end_in,
            notes_diagnosis_in       => notes_diagnosis_in,
            notes_education_in       => notes_education_in,
            notes_evaluation_in      => notes_evaluation_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            dt_nurse_tea_det_tstz_in => dt_nurse_tea_det_tstz_in,
            duration_in              => duration_in,
            flg_status_in            => flg_status_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            num_order_in             => num_order_in,
            description_in           => description_in,
            id_unit_meas_duration_in => id_unit_meas_duration_in,
            dt_planned_in            => dt_planned_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_nurse_tea_req_in      IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_prof_provider_in      IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        dt_start_in              IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_end_in                IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        notes_diagnosis_in       IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_education_in       IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_evaluation_in      IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        create_user_in           IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_time_in           IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_time_in           IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_in IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        duration_in              IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        flg_status_in            IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        num_order_in             IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        description_in           IN nurse_tea_det.description%TYPE DEFAULT NULL,
        id_unit_meas_duration_in IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        dt_planned_in            IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_nurse_tea_req_in      => id_nurse_tea_req_in,
            id_prof_provider_in      => id_prof_provider_in,
            dt_start_in              => dt_start_in,
            dt_end_in                => dt_end_in,
            notes_diagnosis_in       => notes_diagnosis_in,
            notes_education_in       => notes_education_in,
            notes_evaluation_in      => notes_evaluation_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            dt_nurse_tea_det_tstz_in => dt_nurse_tea_det_tstz_in,
            duration_in              => duration_in,
            flg_status_in            => flg_status_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            num_order_in             => num_order_in,
            description_in           => description_in,
            id_unit_meas_duration_in => id_unit_meas_duration_in,
            dt_planned_in            => dt_planned_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_nurse_tea_req_in      IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_prof_provider_in      IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        dt_start_in              IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_end_in                IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        notes_diagnosis_in       IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_education_in       IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_evaluation_in      IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        create_user_in           IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_time_in           IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_time_in           IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_in IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        duration_in              IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        flg_status_in            IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        num_order_in             IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        description_in           IN nurse_tea_det.description%TYPE DEFAULT NULL,
        id_unit_meas_duration_in IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        dt_planned_in            IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        id_nurse_tea_det_out     IN OUT nurse_tea_det.id_nurse_tea_det%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_pky nurse_tea_det.id_nurse_tea_det%TYPE := next_key;
    BEGIN
        ins(id_nurse_tea_det_in      => l_pky,
            id_nurse_tea_req_in      => id_nurse_tea_req_in,
            id_prof_provider_in      => id_prof_provider_in,
            dt_start_in              => dt_start_in,
            dt_end_in                => dt_end_in,
            notes_diagnosis_in       => notes_diagnosis_in,
            notes_education_in       => notes_education_in,
            notes_evaluation_in      => notes_evaluation_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            dt_nurse_tea_det_tstz_in => dt_nurse_tea_det_tstz_in,
            duration_in              => duration_in,
            flg_status_in            => flg_status_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            num_order_in             => num_order_in,
            description_in           => description_in,
            id_unit_meas_duration_in => id_unit_meas_duration_in,
            dt_planned_in            => dt_planned_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        id_nurse_tea_det_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_nurse_tea_req_in      IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_prof_provider_in      IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        dt_start_in              IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_end_in                IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        notes_diagnosis_in       IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_education_in       IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_evaluation_in      IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        create_user_in           IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_time_in           IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_time_in           IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_in IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        duration_in              IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        flg_status_in            IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        num_order_in             IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        description_in           IN nurse_tea_det.description%TYPE DEFAULT NULL,
        id_unit_meas_duration_in IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        dt_planned_in            IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        id_nurse_tea_det_out     IN OUT nurse_tea_det.id_nurse_tea_det%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_nurse_tea_req_in      => id_nurse_tea_req_in,
            id_prof_provider_in      => id_prof_provider_in,
            dt_start_in              => dt_start_in,
            dt_end_in                => dt_end_in,
            notes_diagnosis_in       => notes_diagnosis_in,
            notes_education_in       => notes_education_in,
            notes_evaluation_in      => notes_evaluation_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            dt_nurse_tea_det_tstz_in => dt_nurse_tea_det_tstz_in,
            duration_in              => duration_in,
            flg_status_in            => flg_status_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            num_order_in             => num_order_in,
            description_in           => description_in,
            id_unit_meas_duration_in => id_unit_meas_duration_in,
            dt_planned_in            => dt_planned_in,
            id_nurse_tea_det_out     => id_nurse_tea_det_out,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_nurse_tea_req_in      IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_prof_provider_in      IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        dt_start_in              IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_end_in                IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        notes_diagnosis_in       IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_education_in       IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_evaluation_in      IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        create_user_in           IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_time_in           IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_time_in           IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_in IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        duration_in              IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        flg_status_in            IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        num_order_in             IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        description_in           IN nurse_tea_det.description%TYPE DEFAULT NULL,
        id_unit_meas_duration_in IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        dt_planned_in            IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) RETURN nurse_tea_det.id_nurse_tea_det%TYPE IS
        l_pky nurse_tea_det.id_nurse_tea_det%TYPE := next_key;
    BEGIN
        ins(id_nurse_tea_det_in      => l_pky,
            id_nurse_tea_req_in      => id_nurse_tea_req_in,
            id_prof_provider_in      => id_prof_provider_in,
            dt_start_in              => dt_start_in,
            dt_end_in                => dt_end_in,
            notes_diagnosis_in       => notes_diagnosis_in,
            notes_education_in       => notes_education_in,
            notes_evaluation_in      => notes_evaluation_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            dt_nurse_tea_det_tstz_in => dt_nurse_tea_det_tstz_in,
            duration_in              => duration_in,
            flg_status_in            => flg_status_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            num_order_in             => num_order_in,
            description_in           => description_in,
            id_unit_meas_duration_in => id_unit_meas_duration_in,
            dt_planned_in            => dt_planned_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_nurse_tea_req_in      IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_prof_provider_in      IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        dt_start_in              IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_end_in                IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        notes_diagnosis_in       IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_education_in       IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_evaluation_in      IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        create_user_in           IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_time_in           IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_time_in           IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_in IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        duration_in              IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        flg_status_in            IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        num_order_in             IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        description_in           IN nurse_tea_det.description%TYPE DEFAULT NULL,
        id_unit_meas_duration_in IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        dt_planned_in            IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) RETURN nurse_tea_det.id_nurse_tea_det%TYPE IS
        l_pky    nurse_tea_det.id_nurse_tea_det%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_nurse_tea_det_in      => l_pky,
            id_nurse_tea_req_in      => id_nurse_tea_req_in,
            id_prof_provider_in      => id_prof_provider_in,
            dt_start_in              => dt_start_in,
            dt_end_in                => dt_end_in,
            notes_diagnosis_in       => notes_diagnosis_in,
            notes_education_in       => notes_education_in,
            notes_evaluation_in      => notes_evaluation_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            dt_nurse_tea_det_tstz_in => dt_nurse_tea_det_tstz_in,
            duration_in              => duration_in,
            flg_status_in            => flg_status_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            num_order_in             => num_order_in,
            description_in           => description_in,
            id_unit_meas_duration_in => id_unit_meas_duration_in,
            dt_planned_in            => dt_planned_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_nurse_tea_det_in      IN nurse_tea_det.id_nurse_tea_det%TYPE,
        id_nurse_tea_req_in      IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_prof_provider_in      IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        dt_start_in              IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_end_in                IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        notes_diagnosis_in       IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_education_in       IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_evaluation_in      IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        create_user_in           IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_time_in           IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_time_in           IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_in IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        duration_in              IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        flg_status_in            IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        num_order_in             IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        description_in           IN nurse_tea_det.description%TYPE DEFAULT NULL,
        id_unit_meas_duration_in IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        dt_planned_in            IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := FALSE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO nurse_tea_det
            (id_nurse_tea_det,
             id_nurse_tea_req,
             id_prof_provider,
             dt_start,
             dt_end,
             notes_diagnosis,
             notes_education,
             notes_evaluation,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             dt_nurse_tea_det_tstz,
             duration,
             flg_status,
             id_cancel_reason,
             num_order,
             description,
             id_unit_meas_duration,
             dt_planned)
        VALUES
            (id_nurse_tea_det_in,
             id_nurse_tea_req_in,
             id_prof_provider_in,
             dt_start_in,
             dt_end_in,
             notes_diagnosis_in,
             notes_education_in,
             notes_evaluation_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             dt_nurse_tea_det_tstz_in,
             duration_in,
             flg_status_in,
             id_cancel_reason_in,
             num_order_in,
             description_in,
             id_unit_meas_duration_in,
             dt_planned_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_nurse_tea_det_in      IN nurse_tea_det.id_nurse_tea_det%TYPE,
        id_nurse_tea_req_in      IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_prof_provider_in      IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        dt_start_in              IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_end_in                IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        notes_diagnosis_in       IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_education_in       IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_evaluation_in      IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        create_user_in           IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_time_in           IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_time_in           IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_in IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        duration_in              IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        flg_status_in            IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        num_order_in             IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        description_in           IN nurse_tea_det.description%TYPE DEFAULT NULL,
        id_unit_meas_duration_in IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        dt_planned_in            IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_nurse_tea_det_in      => id_nurse_tea_det_in,
            id_nurse_tea_req_in      => id_nurse_tea_req_in,
            id_prof_provider_in      => id_prof_provider_in,
            dt_start_in              => dt_start_in,
            dt_end_in                => dt_end_in,
            notes_diagnosis_in       => notes_diagnosis_in,
            notes_education_in       => notes_education_in,
            notes_evaluation_in      => notes_evaluation_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            dt_nurse_tea_det_tstz_in => dt_nurse_tea_det_tstz_in,
            duration_in              => duration_in,
            flg_status_in            => flg_status_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            num_order_in             => num_order_in,
            description_in           => description_in,
            id_unit_meas_duration_in => id_unit_meas_duration_in,
            dt_planned_in            => dt_planned_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN nurse_tea_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_rec nurse_tea_det%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_nurse_tea_det := next_key(sequence_in);
        END IF;
    
        ins(id_nurse_tea_det_in      => l_rec.id_nurse_tea_det,
            id_nurse_tea_req_in      => l_rec.id_nurse_tea_req,
            id_prof_provider_in      => l_rec.id_prof_provider,
            dt_start_in              => l_rec.dt_start,
            dt_end_in                => l_rec.dt_end,
            notes_diagnosis_in       => l_rec.notes_diagnosis,
            notes_education_in       => l_rec.notes_education,
            notes_evaluation_in      => l_rec.notes_evaluation,
            create_user_in           => l_rec.create_user,
            create_time_in           => l_rec.create_time,
            create_institution_in    => l_rec.create_institution,
            update_user_in           => l_rec.update_user,
            update_time_in           => l_rec.update_time,
            update_institution_in    => l_rec.update_institution,
            dt_nurse_tea_det_tstz_in => l_rec.dt_nurse_tea_det_tstz,
            duration_in              => l_rec.duration,
            flg_status_in            => l_rec.flg_status,
            id_cancel_reason_in      => l_rec.id_cancel_reason,
            num_order_in             => l_rec.num_order,
            description_in           => l_rec.description,
            id_unit_meas_duration_in => l_rec.id_unit_meas_duration,
            dt_planned_in            => l_rec.dt_planned,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN nurse_tea_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN nurse_tea_det_tc,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO nurse_tea_det
                    (id_nurse_tea_det,
                     id_nurse_tea_req,
                     id_prof_provider,
                     dt_start,
                     dt_end,
                     notes_diagnosis,
                     notes_education,
                     notes_evaluation,
                     dt_nurse_tea_det_tstz,
                     duration,
                     flg_status,
                     id_cancel_reason,
                     num_order,
                     description,
                     id_unit_meas_duration,
                     dt_planned)
                VALUES
                    (rows_in(indx).id_nurse_tea_det,
                     rows_in(indx).id_nurse_tea_req,
                     rows_in(indx).id_prof_provider,
                     rows_in(indx).dt_start,
                     rows_in(indx).dt_end,
                     rows_in(indx).notes_diagnosis,
                     rows_in(indx).notes_education,
                     rows_in(indx).notes_evaluation,
                     rows_in(indx).dt_nurse_tea_det_tstz,
                     rows_in(indx).duration,
                     rows_in(indx).flg_status,
                     rows_in(indx).id_cancel_reason,
                     rows_in(indx).num_order,
                     rows_in(indx).description,
                     rows_in(indx).id_unit_meas_duration,
                     rows_in(indx).dt_planned)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN nurse_tea_det_tc,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_nurse_tea_det_in       IN nurse_tea_det.id_nurse_tea_det%TYPE,
        id_nurse_tea_req_in       IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_nurse_tea_req_nin      IN BOOLEAN := TRUE,
        id_prof_provider_in       IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        id_prof_provider_nin      IN BOOLEAN := TRUE,
        dt_start_in               IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_start_nin              IN BOOLEAN := TRUE,
        dt_end_in                 IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                IN BOOLEAN := TRUE,
        notes_diagnosis_in        IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_diagnosis_nin       IN BOOLEAN := TRUE,
        notes_education_in        IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_education_nin       IN BOOLEAN := TRUE,
        notes_evaluation_in       IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        notes_evaluation_nin      IN BOOLEAN := TRUE,
        create_user_in            IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        dt_nurse_tea_det_tstz_in  IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_nin IN BOOLEAN := TRUE,
        duration_in               IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        duration_nin              IN BOOLEAN := TRUE,
        flg_status_in             IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        num_order_in              IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        num_order_nin             IN BOOLEAN := TRUE,
        description_in            IN nurse_tea_det.description%TYPE DEFAULT NULL,
        description_nin           IN BOOLEAN := TRUE,
        id_unit_meas_duration_in  IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        id_unit_meas_duration_nin IN BOOLEAN := TRUE,
        dt_planned_in             IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        dt_planned_nin            IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := FALSE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out                table_varchar;
        l_id_nurse_tea_req_n      NUMBER(1) := sys.diutil.bool_to_int(id_nurse_tea_req_nin);
        l_id_prof_provider_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_provider_nin);
        l_dt_start_n              NUMBER(1) := sys.diutil.bool_to_int(dt_start_nin);
        l_dt_end_n                NUMBER(1) := sys.diutil.bool_to_int(dt_end_nin);
        l_notes_diagnosis_n       NUMBER(1) := sys.diutil.bool_to_int(notes_diagnosis_nin);
        l_notes_education_n       NUMBER(1) := sys.diutil.bool_to_int(notes_education_nin);
        l_notes_evaluation_n      NUMBER(1) := sys.diutil.bool_to_int(notes_evaluation_nin);
        l_create_user_n           NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_nurse_tea_det_tstz_n NUMBER(1) := sys.diutil.bool_to_int(dt_nurse_tea_det_tstz_nin);
        l_duration_n              NUMBER(1) := sys.diutil.bool_to_int(duration_nin);
        l_flg_status_n            NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_cancel_reason_n      NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_num_order_n             NUMBER(1) := sys.diutil.bool_to_int(num_order_nin);
        l_description_n           NUMBER(1) := sys.diutil.bool_to_int(description_nin);
        l_id_unit_meas_duration_n NUMBER(1) := sys.diutil.bool_to_int(id_unit_meas_duration_nin);
        l_dt_planned_n            NUMBER(1) := sys.diutil.bool_to_int(dt_planned_nin);
    BEGIN
    
        UPDATE nurse_tea_det
           SET id_nurse_tea_req      = decode(l_id_nurse_tea_req_n,
                                              0,
                                              id_nurse_tea_req_in,
                                              nvl(id_nurse_tea_req_in, id_nurse_tea_req)),
               id_prof_provider      = decode(l_id_prof_provider_n,
                                              0,
                                              id_prof_provider_in,
                                              nvl(id_prof_provider_in, id_prof_provider)),
               dt_start              = decode(l_dt_start_n, 0, dt_start_in, nvl(dt_start_in, dt_start)),
               dt_end                = decode(l_dt_end_n, 0, dt_end_in, nvl(dt_end_in, dt_end)),
               notes_diagnosis       = decode(l_notes_diagnosis_n,
                                              0,
                                              notes_diagnosis_in,
                                              nvl(notes_diagnosis_in, notes_diagnosis)),
               notes_education       = decode(l_notes_education_n,
                                              0,
                                              notes_education_in,
                                              nvl(notes_education_in, notes_education)),
               notes_evaluation      = decode(l_notes_evaluation_n,
                                              0,
                                              notes_evaluation_in,
                                              nvl(notes_evaluation_in, notes_evaluation)),
               create_user           = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time           = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution    = decode(l_create_institution_n,
                                              0,
                                              create_institution_in,
                                              nvl(create_institution_in, create_institution)),
               update_user           = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time           = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution    = decode(l_update_institution_n,
                                              0,
                                              update_institution_in,
                                              nvl(update_institution_in, update_institution)),
               dt_nurse_tea_det_tstz = decode(l_dt_nurse_tea_det_tstz_n,
                                              0,
                                              dt_nurse_tea_det_tstz_in,
                                              nvl(dt_nurse_tea_det_tstz_in, dt_nurse_tea_det_tstz)),
               duration              = decode(l_duration_n, 0, duration_in, nvl(duration_in, duration)),
               flg_status            = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_cancel_reason      = decode(l_id_cancel_reason_n,
                                              0,
                                              id_cancel_reason_in,
                                              nvl(id_cancel_reason_in, id_cancel_reason)),
               num_order             = decode(l_num_order_n, 0, num_order_in, nvl(num_order_in, num_order)),
               description           = decode(l_description_n, 0, description_in, nvl(description_in, description)),
               id_unit_meas_duration = decode(l_id_unit_meas_duration_n,
                                              0,
                                              id_unit_meas_duration_in,
                                              nvl(id_unit_meas_duration_in, id_unit_meas_duration)),
               dt_planned            = decode(l_dt_planned_n, 0, dt_planned_in, nvl(dt_planned_in, dt_planned))
         WHERE id_nurse_tea_det = id_nurse_tea_det_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_nurse_tea_det_in       IN nurse_tea_det.id_nurse_tea_det%TYPE,
        id_nurse_tea_req_in       IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_nurse_tea_req_nin      IN BOOLEAN := TRUE,
        id_prof_provider_in       IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        id_prof_provider_nin      IN BOOLEAN := TRUE,
        dt_start_in               IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_start_nin              IN BOOLEAN := TRUE,
        dt_end_in                 IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                IN BOOLEAN := TRUE,
        notes_diagnosis_in        IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_diagnosis_nin       IN BOOLEAN := TRUE,
        notes_education_in        IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_education_nin       IN BOOLEAN := TRUE,
        notes_evaluation_in       IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        notes_evaluation_nin      IN BOOLEAN := TRUE,
        create_user_in            IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        dt_nurse_tea_det_tstz_in  IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_nin IN BOOLEAN := TRUE,
        duration_in               IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        duration_nin              IN BOOLEAN := TRUE,
        flg_status_in             IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        num_order_in              IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        num_order_nin             IN BOOLEAN := TRUE,
        description_in            IN nurse_tea_det.description%TYPE DEFAULT NULL,
        description_nin           IN BOOLEAN := TRUE,
        id_unit_meas_duration_in  IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        id_unit_meas_duration_nin IN BOOLEAN := TRUE,
        dt_planned_in             IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        dt_planned_nin            IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_nurse_tea_det_in       => id_nurse_tea_det_in,
            id_nurse_tea_req_in       => id_nurse_tea_req_in,
            id_nurse_tea_req_nin      => id_nurse_tea_req_nin,
            id_prof_provider_in       => id_prof_provider_in,
            id_prof_provider_nin      => id_prof_provider_nin,
            dt_start_in               => dt_start_in,
            dt_start_nin              => dt_start_nin,
            dt_end_in                 => dt_end_in,
            dt_end_nin                => dt_end_nin,
            notes_diagnosis_in        => notes_diagnosis_in,
            notes_diagnosis_nin       => notes_diagnosis_nin,
            notes_education_in        => notes_education_in,
            notes_education_nin       => notes_education_nin,
            notes_evaluation_in       => notes_evaluation_in,
            notes_evaluation_nin      => notes_evaluation_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            dt_nurse_tea_det_tstz_in  => dt_nurse_tea_det_tstz_in,
            dt_nurse_tea_det_tstz_nin => dt_nurse_tea_det_tstz_nin,
            duration_in               => duration_in,
            duration_nin              => duration_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_reason_nin      => id_cancel_reason_nin,
            num_order_in              => num_order_in,
            num_order_nin             => num_order_nin,
            description_in            => description_in,
            description_nin           => description_nin,
            id_unit_meas_duration_in  => id_unit_meas_duration_in,
            id_unit_meas_duration_nin => id_unit_meas_duration_nin,
            dt_planned_in             => dt_planned_in,
            dt_planned_nin            => dt_planned_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_nurse_tea_req_in       IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_nurse_tea_req_nin      IN BOOLEAN := TRUE,
        id_prof_provider_in       IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        id_prof_provider_nin      IN BOOLEAN := TRUE,
        dt_start_in               IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_start_nin              IN BOOLEAN := TRUE,
        dt_end_in                 IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                IN BOOLEAN := TRUE,
        notes_diagnosis_in        IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_diagnosis_nin       IN BOOLEAN := TRUE,
        notes_education_in        IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_education_nin       IN BOOLEAN := TRUE,
        notes_evaluation_in       IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        notes_evaluation_nin      IN BOOLEAN := TRUE,
        create_user_in            IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        dt_nurse_tea_det_tstz_in  IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_nin IN BOOLEAN := TRUE,
        duration_in               IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        duration_nin              IN BOOLEAN := TRUE,
        flg_status_in             IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        num_order_in              IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        num_order_nin             IN BOOLEAN := TRUE,
        description_in            IN nurse_tea_det.description%TYPE DEFAULT NULL,
        description_nin           IN BOOLEAN := TRUE,
        id_unit_meas_duration_in  IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        id_unit_meas_duration_nin IN BOOLEAN := TRUE,
        dt_planned_in             IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        dt_planned_nin            IN BOOLEAN := TRUE,
        where_in                  IN VARCHAR2,
        handle_error_in           IN BOOLEAN := FALSE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_nurse_tea_req_n      NUMBER(1) := sys.diutil.bool_to_int(id_nurse_tea_req_nin);
        l_id_prof_provider_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_provider_nin);
        l_dt_start_n              NUMBER(1) := sys.diutil.bool_to_int(dt_start_nin);
        l_dt_end_n                NUMBER(1) := sys.diutil.bool_to_int(dt_end_nin);
        l_notes_diagnosis_n       NUMBER(1) := sys.diutil.bool_to_int(notes_diagnosis_nin);
        l_notes_education_n       NUMBER(1) := sys.diutil.bool_to_int(notes_education_nin);
        l_notes_evaluation_n      NUMBER(1) := sys.diutil.bool_to_int(notes_evaluation_nin);
        l_create_user_n           NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_nurse_tea_det_tstz_n NUMBER(1) := sys.diutil.bool_to_int(dt_nurse_tea_det_tstz_nin);
        l_duration_n              NUMBER(1) := sys.diutil.bool_to_int(duration_nin);
        l_flg_status_n            NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_cancel_reason_n      NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_num_order_n             NUMBER(1) := sys.diutil.bool_to_int(num_order_nin);
        l_description_n           NUMBER(1) := sys.diutil.bool_to_int(description_nin);
        l_id_unit_meas_duration_n NUMBER(1) := sys.diutil.bool_to_int(id_unit_meas_duration_nin);
        l_dt_planned_n            NUMBER(1) := sys.diutil.bool_to_int(dt_planned_nin);
    BEGIN
        l_id_nurse_tea_req_n      := sys.diutil.bool_to_int(id_nurse_tea_req_nin);
        l_id_prof_provider_n      := sys.diutil.bool_to_int(id_prof_provider_nin);
        l_dt_start_n              := sys.diutil.bool_to_int(dt_start_nin);
        l_dt_end_n                := sys.diutil.bool_to_int(dt_end_nin);
        l_notes_diagnosis_n       := sys.diutil.bool_to_int(notes_diagnosis_nin);
        l_notes_education_n       := sys.diutil.bool_to_int(notes_education_nin);
        l_notes_evaluation_n      := sys.diutil.bool_to_int(notes_evaluation_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_nurse_tea_det_tstz_n := sys.diutil.bool_to_int(dt_nurse_tea_det_tstz_nin);
        l_duration_n              := sys.diutil.bool_to_int(duration_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_id_cancel_reason_n      := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_num_order_n             := sys.diutil.bool_to_int(num_order_nin);
        l_description_n           := sys.diutil.bool_to_int(description_nin);
        l_id_unit_meas_duration_n := sys.diutil.bool_to_int(id_unit_meas_duration_nin);
        l_dt_planned_n            := sys.diutil.bool_to_int(dt_planned_nin);
        l_sql                     := 'UPDATE nurse_tea_det SET' || ' ID_NURSE_TEA_REQ = decode (' ||
                                     l_id_nurse_tea_req_n ||
                                     ',0,:ID_NURSE_TEA_REQ_in, NVL (:ID_NURSE_TEA_REQ_in, ID_NURSE_TEA_REQ)) ' || ',' ||
                                     ' ID_PROF_PROVIDER = decode (' || l_id_prof_provider_n ||
                                     ',0,:ID_PROF_PROVIDER_in, NVL (:ID_PROF_PROVIDER_in, ID_PROF_PROVIDER)) ' || ',' ||
                                     ' DT_START = decode (' || l_dt_start_n ||
                                     ',0,:DT_START_in, NVL (:DT_START_in, DT_START)) ' || ',' || ' DT_END = decode (' ||
                                     l_dt_end_n || ',0,:DT_END_in, NVL (:DT_END_in, DT_END)) ' || ',' ||
                                     ' NOTES_DIAGNOSIS = decode (' || l_notes_diagnosis_n ||
                                     ',0,:NOTES_DIAGNOSIS_in, NVL (:NOTES_DIAGNOSIS_in, NOTES_DIAGNOSIS)) ' || ',' ||
                                     ' NOTES_EDUCATION = decode (' || l_notes_education_n ||
                                     ',0,:NOTES_EDUCATION_in, NVL (:NOTES_EDUCATION_in, NOTES_EDUCATION)) ' || ',' ||
                                     ' NOTES_EVALUATION = decode (' || l_notes_evaluation_n ||
                                     ',0,:NOTES_EVALUATION_in, NVL (:NOTES_EVALUATION_in, NOTES_EVALUATION)) ' || ',' ||
                                     ' CREATE_USER = decode (' || l_create_user_n ||
                                     ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                     ' CREATE_TIME = decode (' || l_create_time_n ||
                                     ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                     ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                     ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                     ' UPDATE_USER = decode (' || l_update_user_n ||
                                     ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                     ' UPDATE_TIME = decode (' || l_update_time_n ||
                                     ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                     ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                     ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                     ' DT_NURSE_TEA_DET_TSTZ = decode (' || l_dt_nurse_tea_det_tstz_n ||
                                     ',0,:DT_NURSE_TEA_DET_TSTZ_in, NVL (:DT_NURSE_TEA_DET_TSTZ_in, DT_NURSE_TEA_DET_TSTZ)) ' || ',' ||
                                     ' DURATION = decode (' || l_duration_n ||
                                     ',0,:DURATION_in, NVL (:DURATION_in, DURATION)) ' || ',' ||
                                     ' FLG_STATUS = decode (' || l_flg_status_n ||
                                     ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                     ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                                     ',0,:ID_CANCEL_REASON_in, NVL (:ID_CANCEL_REASON_in, ID_CANCEL_REASON)) ' || ',' ||
                                     ' NUM_ORDER = decode (' || l_num_order_n ||
                                     ',0,:NUM_ORDER_in, NVL (:NUM_ORDER_in, NUM_ORDER)) ' || ',' ||
                                     ' DESCRIPTION = decode (' || l_description_n ||
                                     ',0,:DESCRIPTION_in, NVL (:DESCRIPTION_in, DESCRIPTION)) ' || ',' ||
                                     ' ID_UNIT_MEAS_DURATION = decode (' || l_id_unit_meas_duration_n ||
                                     ',0,:ID_UNIT_MEAS_DURATION_in, NVL (:ID_UNIT_MEAS_DURATION_in, ID_UNIT_MEAS_DURATION)) ' || ',' ||
                                     ' DT_PLANNED = decode (' || l_dt_planned_n ||
                                     ',0,:DT_PLANNED_in, NVL (:DT_PLANNED_in, DT_PLANNED)) ' || ' where ' ||
                                     nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_nurse_tea_req_in, id_prof_provider_in, dt_start_in, dt_end_in, notes_diagnosis_in, notes_education_in, notes_evaluation_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, dt_nurse_tea_det_tstz_in, duration_in, flg_status_in, id_cancel_reason_in, num_order_in, description_in, id_unit_meas_duration_in, dt_planned_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_nurse_tea_req_in       IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_nurse_tea_req_nin      IN BOOLEAN := TRUE,
        id_prof_provider_in       IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        id_prof_provider_nin      IN BOOLEAN := TRUE,
        dt_start_in               IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_start_nin              IN BOOLEAN := TRUE,
        dt_end_in                 IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                IN BOOLEAN := TRUE,
        notes_diagnosis_in        IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_diagnosis_nin       IN BOOLEAN := TRUE,
        notes_education_in        IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_education_nin       IN BOOLEAN := TRUE,
        notes_evaluation_in       IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        notes_evaluation_nin      IN BOOLEAN := TRUE,
        create_user_in            IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        dt_nurse_tea_det_tstz_in  IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_nin IN BOOLEAN := TRUE,
        duration_in               IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        duration_nin              IN BOOLEAN := TRUE,
        flg_status_in             IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        num_order_in              IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        num_order_nin             IN BOOLEAN := TRUE,
        description_in            IN nurse_tea_det.description%TYPE DEFAULT NULL,
        description_nin           IN BOOLEAN := TRUE,
        id_unit_meas_duration_in  IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        id_unit_meas_duration_nin IN BOOLEAN := TRUE,
        dt_planned_in             IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        dt_planned_nin            IN BOOLEAN := TRUE,
        where_in                  IN VARCHAR2,
        handle_error_in           IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_nurse_tea_req_in       => id_nurse_tea_req_in,
            id_nurse_tea_req_nin      => id_nurse_tea_req_nin,
            id_prof_provider_in       => id_prof_provider_in,
            id_prof_provider_nin      => id_prof_provider_nin,
            dt_start_in               => dt_start_in,
            dt_start_nin              => dt_start_nin,
            dt_end_in                 => dt_end_in,
            dt_end_nin                => dt_end_nin,
            notes_diagnosis_in        => notes_diagnosis_in,
            notes_diagnosis_nin       => notes_diagnosis_nin,
            notes_education_in        => notes_education_in,
            notes_education_nin       => notes_education_nin,
            notes_evaluation_in       => notes_evaluation_in,
            notes_evaluation_nin      => notes_evaluation_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            dt_nurse_tea_det_tstz_in  => dt_nurse_tea_det_tstz_in,
            dt_nurse_tea_det_tstz_nin => dt_nurse_tea_det_tstz_nin,
            duration_in               => duration_in,
            duration_nin              => duration_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_reason_nin      => id_cancel_reason_nin,
            num_order_in              => num_order_in,
            num_order_nin             => num_order_nin,
            description_in            => description_in,
            description_nin           => description_nin,
            id_unit_meas_duration_in  => id_unit_meas_duration_in,
            id_unit_meas_duration_nin => id_unit_meas_duration_nin,
            dt_planned_in             => dt_planned_in,
            dt_planned_nin            => dt_planned_nin,
            where_in                  => where_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_nurse_tea_det_in      IN nurse_tea_det.id_nurse_tea_det%TYPE,
        id_nurse_tea_req_in      IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_prof_provider_in      IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        dt_start_in              IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_end_in                IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        notes_diagnosis_in       IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_education_in       IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_evaluation_in      IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        create_user_in           IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_time_in           IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_time_in           IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_in IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        duration_in              IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        flg_status_in            IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        num_order_in             IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        description_in           IN nurse_tea_det.description%TYPE DEFAULT NULL,
        id_unit_meas_duration_in IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        dt_planned_in            IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := FALSE,
        rows_out                 IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_nurse_tea_det_in      => id_nurse_tea_det_in,
            id_nurse_tea_req_in      => id_nurse_tea_req_in,
            id_prof_provider_in      => id_prof_provider_in,
            dt_start_in              => dt_start_in,
            dt_end_in                => dt_end_in,
            notes_diagnosis_in       => notes_diagnosis_in,
            notes_education_in       => notes_education_in,
            notes_evaluation_in      => notes_evaluation_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            dt_nurse_tea_det_tstz_in => dt_nurse_tea_det_tstz_in,
            duration_in              => duration_in,
            flg_status_in            => flg_status_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            num_order_in             => num_order_in,
            description_in           => description_in,
            id_unit_meas_duration_in => id_unit_meas_duration_in,
            dt_planned_in            => dt_planned_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_nurse_tea_det_in      => id_nurse_tea_det_in,
                id_nurse_tea_req_in      => id_nurse_tea_req_in,
                id_prof_provider_in      => id_prof_provider_in,
                dt_start_in              => dt_start_in,
                dt_end_in                => dt_end_in,
                notes_diagnosis_in       => notes_diagnosis_in,
                notes_education_in       => notes_education_in,
                notes_evaluation_in      => notes_evaluation_in,
                create_user_in           => create_user_in,
                create_time_in           => create_time_in,
                create_institution_in    => create_institution_in,
                update_user_in           => update_user_in,
                update_time_in           => update_time_in,
                update_institution_in    => update_institution_in,
                dt_nurse_tea_det_tstz_in => dt_nurse_tea_det_tstz_in,
                duration_in              => duration_in,
                flg_status_in            => flg_status_in,
                id_cancel_reason_in      => id_cancel_reason_in,
                num_order_in             => num_order_in,
                description_in           => description_in,
                id_unit_meas_duration_in => id_unit_meas_duration_in,
                dt_planned_in            => dt_planned_in,
                handle_error_in          => handle_error_in,
                rows_out                 => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_nurse_tea_det_in      IN nurse_tea_det.id_nurse_tea_det%TYPE,
        id_nurse_tea_req_in      IN nurse_tea_det.id_nurse_tea_req%TYPE DEFAULT NULL,
        id_prof_provider_in      IN nurse_tea_det.id_prof_provider%TYPE DEFAULT NULL,
        dt_start_in              IN nurse_tea_det.dt_start%TYPE DEFAULT NULL,
        dt_end_in                IN nurse_tea_det.dt_end%TYPE DEFAULT NULL,
        notes_diagnosis_in       IN nurse_tea_det.notes_diagnosis%TYPE DEFAULT NULL,
        notes_education_in       IN nurse_tea_det.notes_education%TYPE DEFAULT NULL,
        notes_evaluation_in      IN nurse_tea_det.notes_evaluation%TYPE DEFAULT NULL,
        create_user_in           IN nurse_tea_det.create_user%TYPE DEFAULT NULL,
        create_time_in           IN nurse_tea_det.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN nurse_tea_det.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN nurse_tea_det.update_user%TYPE DEFAULT NULL,
        update_time_in           IN nurse_tea_det.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN nurse_tea_det.update_institution%TYPE DEFAULT NULL,
        dt_nurse_tea_det_tstz_in IN nurse_tea_det.dt_nurse_tea_det_tstz%TYPE DEFAULT NULL,
        duration_in              IN nurse_tea_det.duration%TYPE DEFAULT NULL,
        flg_status_in            IN nurse_tea_det.flg_status%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN nurse_tea_det.id_cancel_reason%TYPE DEFAULT NULL,
        num_order_in             IN nurse_tea_det.num_order%TYPE DEFAULT NULL,
        description_in           IN nurse_tea_det.description%TYPE DEFAULT NULL,
        id_unit_meas_duration_in IN nurse_tea_det.id_unit_meas_duration%TYPE DEFAULT NULL,
        dt_planned_in            IN nurse_tea_det.dt_planned%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_nurse_tea_det_in,
                id_nurse_tea_req_in,
                id_prof_provider_in,
                dt_start_in,
                dt_end_in,
                notes_diagnosis_in,
                notes_education_in,
                notes_evaluation_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                dt_nurse_tea_det_tstz_in,
                duration_in,
                flg_status_in,
                id_cancel_reason_in,
                num_order_in,
                description_in,
                id_unit_meas_duration_in,
                dt_planned_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN nurse_tea_det%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_nurse_tea_det_in      => rec_in.id_nurse_tea_det,
            id_nurse_tea_req_in      => rec_in.id_nurse_tea_req,
            id_prof_provider_in      => rec_in.id_prof_provider,
            dt_start_in              => rec_in.dt_start,
            dt_end_in                => rec_in.dt_end,
            notes_diagnosis_in       => rec_in.notes_diagnosis,
            notes_education_in       => rec_in.notes_education,
            notes_evaluation_in      => rec_in.notes_evaluation,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            dt_nurse_tea_det_tstz_in => rec_in.dt_nurse_tea_det_tstz,
            duration_in              => rec_in.duration,
            flg_status_in            => rec_in.flg_status,
            id_cancel_reason_in      => rec_in.id_cancel_reason,
            num_order_in             => rec_in.num_order,
            description_in           => rec_in.description,
            id_unit_meas_duration_in => rec_in.id_unit_meas_duration,
            dt_planned_in            => rec_in.dt_planned,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN nurse_tea_det%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_nurse_tea_det_in      => rec_in.id_nurse_tea_det,
            id_nurse_tea_req_in      => rec_in.id_nurse_tea_req,
            id_prof_provider_in      => rec_in.id_prof_provider,
            dt_start_in              => rec_in.dt_start,
            dt_end_in                => rec_in.dt_end,
            notes_diagnosis_in       => rec_in.notes_diagnosis,
            notes_education_in       => rec_in.notes_education,
            notes_evaluation_in      => rec_in.notes_evaluation,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            dt_nurse_tea_det_tstz_in => rec_in.dt_nurse_tea_det_tstz,
            duration_in              => rec_in.duration,
            flg_status_in            => rec_in.flg_status,
            id_cancel_reason_in      => rec_in.id_cancel_reason,
            num_order_in             => rec_in.num_order,
            description_in           => rec_in.description,
            id_unit_meas_duration_in => rec_in.id_unit_meas_duration,
            dt_planned_in            => rec_in.dt_planned,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN nurse_tea_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_nurse_tea_det      id_nurse_tea_det_cc;
        l_id_nurse_tea_req      id_nurse_tea_req_cc;
        l_id_prof_provider      id_prof_provider_cc;
        l_dt_start              dt_start_cc;
        l_dt_end                dt_end_cc;
        l_notes_diagnosis       notes_diagnosis_cc;
        l_notes_education       notes_education_cc;
        l_notes_evaluation      notes_evaluation_cc;
        l_create_user           create_user_cc;
        l_create_time           create_time_cc;
        l_create_institution    create_institution_cc;
        l_update_user           update_user_cc;
        l_update_time           update_time_cc;
        l_update_institution    update_institution_cc;
        l_dt_nurse_tea_det_tstz dt_nurse_tea_det_tstz_cc;
        l_duration              duration_cc;
        l_flg_status            flg_status_cc;
        l_id_cancel_reason      id_cancel_reason_cc;
        l_num_order             num_order_cc;
        l_description           description_cc;
        l_id_unit_meas_duration id_unit_meas_duration_cc;
        l_dt_planned            dt_planned_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_nurse_tea_det(i) := col_in(i).id_nurse_tea_det;
            l_id_nurse_tea_req(i) := col_in(i).id_nurse_tea_req;
            l_id_prof_provider(i) := col_in(i).id_prof_provider;
            l_dt_start(i) := col_in(i).dt_start;
            l_dt_end(i) := col_in(i).dt_end;
            l_notes_diagnosis(i) := col_in(i).notes_diagnosis;
            l_notes_education(i) := col_in(i).notes_education;
            l_notes_evaluation(i) := col_in(i).notes_evaluation;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_dt_nurse_tea_det_tstz(i) := col_in(i).dt_nurse_tea_det_tstz;
            l_duration(i) := col_in(i).duration;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_num_order(i) := col_in(i).num_order;
            l_description(i) := col_in(i).description;
            l_id_unit_meas_duration(i) := col_in(i).id_unit_meas_duration;
            l_dt_planned(i) := col_in(i).dt_planned;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE nurse_tea_det
                   SET id_nurse_tea_req      = nvl(l_id_nurse_tea_req(i), id_nurse_tea_req),
                       id_prof_provider      = nvl(l_id_prof_provider(i), id_prof_provider),
                       dt_start              = nvl(l_dt_start(i), dt_start),
                       dt_end                = nvl(l_dt_end(i), dt_end),
                       notes_diagnosis       = nvl(l_notes_diagnosis(i), notes_diagnosis),
                       notes_education       = nvl(l_notes_education(i), notes_education),
                       notes_evaluation      = nvl(l_notes_evaluation(i), notes_evaluation),
                       create_user           = nvl(l_create_user(i), create_user),
                       create_time           = nvl(l_create_time(i), create_time),
                       create_institution    = nvl(l_create_institution(i), create_institution),
                       update_user           = nvl(l_update_user(i), update_user),
                       update_time           = nvl(l_update_time(i), update_time),
                       update_institution    = nvl(l_update_institution(i), update_institution),
                       dt_nurse_tea_det_tstz = nvl(l_dt_nurse_tea_det_tstz(i), dt_nurse_tea_det_tstz),
                       duration              = nvl(l_duration(i), duration),
                       flg_status            = nvl(l_flg_status(i), flg_status),
                       id_cancel_reason      = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       num_order             = nvl(l_num_order(i), num_order),
                       description           = nvl(l_description(i), description),
                       id_unit_meas_duration = nvl(l_id_unit_meas_duration(i), id_unit_meas_duration),
                       dt_planned            = nvl(l_dt_planned(i), dt_planned)
                 WHERE id_nurse_tea_det = l_id_nurse_tea_det(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE nurse_tea_det
                   SET id_nurse_tea_req      = l_id_nurse_tea_req(i),
                       id_prof_provider      = l_id_prof_provider(i),
                       dt_start              = l_dt_start(i),
                       dt_end                = l_dt_end(i),
                       notes_diagnosis       = l_notes_diagnosis(i),
                       notes_education       = l_notes_education(i),
                       notes_evaluation      = l_notes_evaluation(i),
                       create_user           = l_create_user(i),
                       create_time           = l_create_time(i),
                       create_institution    = l_create_institution(i),
                       update_user           = l_update_user(i),
                       update_time           = l_update_time(i),
                       update_institution    = l_update_institution(i),
                       dt_nurse_tea_det_tstz = l_dt_nurse_tea_det_tstz(i),
                       duration              = l_duration(i),
                       flg_status            = l_flg_status(i),
                       id_cancel_reason      = l_id_cancel_reason(i),
                       num_order             = l_num_order(i),
                       description           = l_description(i),
                       id_unit_meas_duration = l_id_unit_meas_duration(i),
                       dt_planned            = l_dt_planned(i)
                 WHERE id_nurse_tea_det = l_id_nurse_tea_det(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN nurse_tea_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE nurse_tea_det
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE nurse_tea_det
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE nurse_tea_det
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_nurse_tea_det_in IN nurse_tea_det.id_nurse_tea_det%TYPE,
        handle_error_in     IN BOOLEAN := FALSE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM nurse_tea_det
         WHERE id_nurse_tea_det = id_nurse_tea_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_nurse_tea_det_in IN nurse_tea_det.id_nurse_tea_det%TYPE,
        handle_error_in     IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_nurse_tea_det_in => id_nurse_tea_det_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this NTT_DUR_UNITM_FK foreign key value
    PROCEDURE del_ntt_dur_unitm_fk
    (
        id_unit_meas_duration_in IN nurse_tea_det.id_unit_meas_duration%TYPE,
        handle_error_in          IN BOOLEAN := FALSE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM nurse_tea_det
         WHERE id_unit_meas_duration = id_unit_meas_duration_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ntt_dur_unitm_fk;

    -- Delete all rows for this NTT_NTQ_FK foreign key value
    PROCEDURE del_ntt_ntq_fk
    (
        id_nurse_tea_req_in IN nurse_tea_det.id_nurse_tea_req%TYPE,
        handle_error_in     IN BOOLEAN := FALSE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM nurse_tea_det
         WHERE id_nurse_tea_req = id_nurse_tea_req_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ntt_ntq_fk;

    -- Delete all rows for this NTT_PROF_FK foreign key value
    PROCEDURE del_ntt_prof_fk
    (
        id_prof_provider_in IN nurse_tea_det.id_prof_provider%TYPE,
        handle_error_in     IN BOOLEAN := FALSE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM nurse_tea_det
         WHERE id_prof_provider = id_prof_provider_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_ntt_prof_fk;

    -- Delete all rows for this NTT_DUR_UNITM_FK foreign key value
    PROCEDURE del_ntt_dur_unitm_fk
    (
        id_unit_meas_duration_in IN nurse_tea_det.id_unit_meas_duration%TYPE,
        handle_error_in          IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ntt_dur_unitm_fk(id_unit_meas_duration_in => id_unit_meas_duration_in,
                             handle_error_in          => handle_error_in,
                             rows_out                 => rows_out);
    END del_ntt_dur_unitm_fk;

    -- Delete all rows for this NTT_NTQ_FK foreign key value
    PROCEDURE del_ntt_ntq_fk
    (
        id_nurse_tea_req_in IN nurse_tea_det.id_nurse_tea_req%TYPE,
        handle_error_in     IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ntt_ntq_fk(id_nurse_tea_req_in => id_nurse_tea_req_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_ntt_ntq_fk;

    -- Delete all rows for this NTT_PROF_FK foreign key value
    PROCEDURE del_ntt_prof_fk
    (
        id_prof_provider_in IN nurse_tea_det.id_prof_provider%TYPE,
        handle_error_in     IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ntt_prof_fk(id_prof_provider_in => id_prof_provider_in,
                        handle_error_in     => handle_error_in,
                        rows_out            => rows_out);
    END del_ntt_prof_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM nurse_tea_det';
        ELSE
            RETURN 'DELETE FROM nurse_tea_det WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(nurse_tea_det_inout IN OUT nurse_tea_det%ROWTYPE) IS
    BEGIN
        nurse_tea_det_inout.id_nurse_tea_det      := NULL;
        nurse_tea_det_inout.id_nurse_tea_req      := NULL;
        nurse_tea_det_inout.id_prof_provider      := NULL;
        nurse_tea_det_inout.dt_start              := NULL;
        nurse_tea_det_inout.dt_end                := NULL;
        nurse_tea_det_inout.notes_diagnosis       := NULL;
        nurse_tea_det_inout.notes_education       := NULL;
        nurse_tea_det_inout.notes_evaluation      := NULL;
        nurse_tea_det_inout.create_user           := NULL;
        nurse_tea_det_inout.create_time           := NULL;
        nurse_tea_det_inout.create_institution    := NULL;
        nurse_tea_det_inout.update_user           := NULL;
        nurse_tea_det_inout.update_time           := NULL;
        nurse_tea_det_inout.update_institution    := NULL;
        nurse_tea_det_inout.dt_nurse_tea_det_tstz := NULL;
        nurse_tea_det_inout.duration              := NULL;
        nurse_tea_det_inout.flg_status            := NULL;
        nurse_tea_det_inout.id_cancel_reason      := NULL;
        nurse_tea_det_inout.num_order             := NULL;
        nurse_tea_det_inout.description           := NULL;
        nurse_tea_det_inout.id_unit_meas_duration := NULL;
        nurse_tea_det_inout.dt_planned            := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN nurse_tea_det%ROWTYPE IS
        l_nurse_tea_det nurse_tea_det%ROWTYPE;
    BEGIN
        RETURN l_nurse_tea_det;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN nurse_tea_det_tc IS
        data nurse_tea_det_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM nurse_tea_det
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN nurse_tea_det_tc IS
        data nurse_tea_det_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_nurse_tea_det;
/
