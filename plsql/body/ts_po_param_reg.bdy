/*-- Last Change Revision: $Rev: 1496859 $*/
/*-- Last Change by: $Author: jorge.silva $*/
/*-- Date of last change: $Date: 2013-08-26 12:13:42 +0100 (seg, 26 ago 2013) $*/
CREATE OR REPLACE PACKAGE BODY TS_PO_PARAM_REG
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Agosto 16, 2013 16:12:10
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_po_param_reg_in IN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE
      ,
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO PO_PARAM_REG (
         ID_PO_PARAM_REG,
         ID_PO_PARAM,
         ID_INST_OWNER,
         ID_PATIENT,
         ID_EPISODE,
         DT_CREATION,
         DT_RESULT,
         FLG_ORIGIN,
         VALUE,
         ID_UNIT_MEASURE,
         ID_PROFESSIONAL,
         FLG_STATUS,
         ID_CANCEL_REASON,
         DT_CANCEL,
         ID_PROF_CANCEL,
         NOTES_CANCEL,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         ID_PAT_PREGN_FETUS,
         FLG_SCREEN,
         FREE_TEXT,
         FREE_DATE,
         FREE_DATE_MASK,
         FLG_REF_VALUE
         )
      VALUES (
         id_po_param_reg_in,
         id_po_param_in,
         id_inst_owner_in,
         id_patient_in,
         id_episode_in,
         dt_creation_in,
         dt_result_in,
         flg_origin_in,
         value_in,
         id_unit_measure_in,
         id_professional_in,
         flg_status_in,
         id_cancel_reason_in,
         dt_cancel_in,
         id_prof_cancel_in,
         notes_cancel_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         id_pat_pregn_fetus_in,
         flg_screen_in,
         free_text_in,
         free_date_in,
         free_date_mask_in,
         flg_ref_value_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PO_PARAM_REG');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           IF l_name = 'POPR_CRE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'POPR_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'POPR_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'POPR_POP_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PO_PARAM'
               , value_in => id_po_param_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INST_OWNER'
               , value_in => id_inst_owner_in);
           END IF;
           IF l_name = 'POPR_PPF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_PREGN_FETUS'
               , value_in => id_pat_pregn_fetus_in);
           END IF;
           IF l_name = 'POPR_PROF_CANC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'POPR_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'POPR_UNITM_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE'
               , value_in => id_unit_measure_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_po_param_reg_in IN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE
      ,
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_po_param_reg_in => id_po_param_reg_in
      ,
      id_po_param_in => id_po_param_in,
      id_inst_owner_in => id_inst_owner_in,
      id_patient_in => id_patient_in,
      id_episode_in => id_episode_in,
      dt_creation_in => dt_creation_in,
      dt_result_in => dt_result_in,
      flg_origin_in => flg_origin_in,
      value_in => value_in,
      id_unit_measure_in => id_unit_measure_in,
      id_professional_in => id_professional_in,
      flg_status_in => flg_status_in,
      id_cancel_reason_in => id_cancel_reason_in,
      dt_cancel_in => dt_cancel_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
      flg_screen_in => flg_screen_in,
      free_text_in => free_text_in,
      free_date_in => free_date_in,
      free_date_mask_in => free_date_mask_in,
      flg_ref_value_in => flg_ref_value_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;

   /*
   START Special logic for handling LOB columns....
   */

   PROCEDURE n_ins_clobs_in_chunks (
      id_po_param_reg_in IN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE,
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL,
      handle_error_in IN BOOLEAN := TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
   ) IS
        l_NOTES_CANCEL clob;
        l_FREE_TEXT clob;
      i                PLS_INTEGER;
      current_column varchar2(30) := '';
   BEGIN
      /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
         variables from pointing to the same temporary CLOB (it creates copies).
         Otherwise, the code could have been written a bit more compactly. */

      FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
      LOOP
         /* Even when all clobs are null, DOA must send 1 row so skip it. */
         IF clob_columns_in (i) IS NOT NULL
         THEN
            IF current_column <> clob_columns_in (i) OR current_column IS NULL
            THEN
               current_column := LOWER (clob_columns_in (i));

               CASE current_column
                  WHEN 'notes_cancel_in'
                  THEN
                     IF l_NOTES_CANCEL IS NULL
                     THEN
                       DBMS_LOB.createtemporary (
                         l_NOTES_CANCEL, TRUE, DBMS_LOB.CALL);
                     END IF;
                  WHEN 'free_text_in'
                  THEN
                     IF l_FREE_TEXT IS NULL
                     THEN
                       DBMS_LOB.createtemporary (
                         l_FREE_TEXT, TRUE, DBMS_LOB.CALL);
                     END IF;
               END CASE;
            END IF;

            CASE current_column
              WHEN 'notes_cancel_in'
              THEN
                  DBMS_LOB.writeappend (l_NOTES_CANCEL
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
              WHEN 'free_text_in'
              THEN
                  DBMS_LOB.writeappend (l_FREE_TEXT
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
            END CASE;
         END IF;
      END LOOP;

      ins (
         id_po_param_reg_in => id_po_param_reg_in,
         id_po_param_in => id_po_param_in,
         id_inst_owner_in => id_inst_owner_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         dt_creation_in => dt_creation_in,
         dt_result_in => dt_result_in,
         flg_origin_in => flg_origin_in,
         value_in => value_in,
         id_unit_measure_in => id_unit_measure_in,
         id_professional_in => id_professional_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => l_NOTES_CANCEL,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
         flg_screen_in => flg_screen_in,
         free_text_in => l_FREE_TEXT,
         free_date_in => free_date_in,
         free_date_mask_in => free_date_mask_in,
         flg_ref_value_in => flg_ref_value_in,
         handle_error_in => handle_error_in
         );

   END n_ins_clobs_in_chunks;

   PROCEDURE n_upd_clobs_in_chunks (
      id_po_param_reg_in IN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE,
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL,
      ignore_if_null_in IN BOOLEAN := TRUE,
      handle_error_in IN BOOLEAN := TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
      )
   IS
       l_NOTES_CANCEL clob;
       l_FREE_TEXT clob;
      i                PLS_INTEGER;
      current_column varchar2(30) := '';
      l_rows PLS_INTEGER;
   BEGIN

      /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
         variables from pointing to the same temporary CLOB (it creates copies).
         Otherwise, the code could have been written a bit more compactly. */

      FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
      LOOP
         /* Even when all clobs are null, DOA must send 1 row so skip it. */
         IF clob_columns_in (i) IS NOT NULL
         THEN
            IF current_column <> clob_columns_in (i) OR current_column IS NULL
            THEN
               current_column := LOWER (clob_columns_in (i));

               CASE current_column
                  WHEN 'notes_cancel_in'
                  THEN
                    IF l_NOTES_CANCEL IS NULL
                    THEN
                      DBMS_LOB.createtemporary (
                         l_NOTES_CANCEL, TRUE, DBMS_LOB.CALL);
                    END IF;
                  WHEN 'free_text_in'
                  THEN
                    IF l_FREE_TEXT IS NULL
                    THEN
                      DBMS_LOB.createtemporary (
                         l_FREE_TEXT, TRUE, DBMS_LOB.CALL);
                    END IF;
               END CASE;
            END IF;

            CASE current_column
              WHEN 'notes_cancel_in'
              THEN
                  DBMS_LOB.writeappend (l_NOTES_CANCEL
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
              WHEN 'free_text_in'
              THEN
                  DBMS_LOB.writeappend (l_FREE_TEXT
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
            END CASE;
         END IF;
      END LOOP;

      upd (
         id_po_param_reg_in => id_po_param_reg_in,
         id_po_param_in => id_po_param_in,
         id_inst_owner_in => id_inst_owner_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         dt_creation_in => dt_creation_in,
         dt_result_in => dt_result_in,
         flg_origin_in => flg_origin_in,
         value_in => value_in,
         id_unit_measure_in => id_unit_measure_in,
         id_professional_in => id_professional_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => l_NOTES_CANCEL,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
         flg_screen_in => flg_screen_in,
         free_text_in => l_FREE_TEXT,
         free_date_in => free_date_in,
         free_date_mask_in => free_date_mask_in,
         flg_ref_value_in => flg_ref_value_in,
         handle_error_in => handle_error_in
         );
   END n_upd_clobs_in_chunks;

   PROCEDURE n_upd_ins_clobs_in_chunks (
      id_po_param_reg_in IN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE,
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL,
      ignore_if_null_in IN BOOLEAN DEFAULT TRUE,
      handle_error_in IN BOOLEAN DEFAULT TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
      )
   IS
   BEGIN
      n_upd_clobs_in_chunks (
         id_po_param_reg_in => id_po_param_reg_in,
         id_po_param_in => id_po_param_in,
         id_inst_owner_in => id_inst_owner_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         dt_creation_in => dt_creation_in,
         dt_result_in => dt_result_in,
         flg_origin_in => flg_origin_in,
         value_in => value_in,
         id_unit_measure_in => id_unit_measure_in,
         id_professional_in => id_professional_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
         flg_screen_in => flg_screen_in,
         free_date_in => free_date_in,
         free_date_mask_in => free_date_mask_in,
         flg_ref_value_in => flg_ref_value_in,
         clob_columns_in => clob_columns_in ,
         clob_pieces_in => clob_pieces_in ,
         ignore_if_null_in => ignore_if_null_in,
         handle_error_in => handle_error_in
       );

      IF SQL%ROWCOUNT = 0
      THEN
         n_ins_clobs_in_chunks (
            id_po_param_reg_in => id_po_param_reg_in,
            id_po_param_in => id_po_param_in,
            id_inst_owner_in => id_inst_owner_in,
            id_patient_in => id_patient_in,
            id_episode_in => id_episode_in,
            dt_creation_in => dt_creation_in,
            dt_result_in => dt_result_in,
            flg_origin_in => flg_origin_in,
            value_in => value_in,
            id_unit_measure_in => id_unit_measure_in,
            id_professional_in => id_professional_in,
            flg_status_in => flg_status_in,
            id_cancel_reason_in => id_cancel_reason_in,
            dt_cancel_in => dt_cancel_in,
            id_prof_cancel_in => id_prof_cancel_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
            flg_screen_in => flg_screen_in,
            free_date_in => free_date_in,
            free_date_mask_in => free_date_mask_in,
            flg_ref_value_in => flg_ref_value_in,
            clob_columns_in => clob_columns_in ,
            clob_pieces_in => clob_pieces_in ,
            handle_error_in => handle_error_in
         );
      END IF;
   END n_upd_ins_clobs_in_chunks;

   /*
   END Special logic for handling LOB columns.
   */

   PROCEDURE ins (
      rec_in IN PO_PARAM_REG%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec PO_PARAM_REG%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_PO_PARAM_REG := next_key (sequence_in);
      END IF;
      ins (
         id_po_param_reg_in => l_rec.ID_PO_PARAM_REG
         ,
         id_po_param_in => l_rec.ID_PO_PARAM,
         id_inst_owner_in => l_rec.ID_INST_OWNER,
         id_patient_in => l_rec.ID_PATIENT,
         id_episode_in => l_rec.ID_EPISODE,
         dt_creation_in => l_rec.DT_CREATION,
         dt_result_in => l_rec.DT_RESULT,
         flg_origin_in => l_rec.FLG_ORIGIN,
         value_in => l_rec.VALUE,
         id_unit_measure_in => l_rec.ID_UNIT_MEASURE,
         id_professional_in => l_rec.ID_PROFESSIONAL,
         flg_status_in => l_rec.FLG_STATUS,
         id_cancel_reason_in => l_rec.ID_CANCEL_REASON,
         dt_cancel_in => l_rec.DT_CANCEL,
         id_prof_cancel_in => l_rec.ID_PROF_CANCEL,
         notes_cancel_in => l_rec.NOTES_CANCEL,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         id_pat_pregn_fetus_in => l_rec.ID_PAT_PREGN_FETUS,
         flg_screen_in => l_rec.FLG_SCREEN,
         free_text_in => l_rec.FREE_TEXT,
         free_date_in => l_rec.FREE_DATE,
         free_date_mask_in => l_rec.FREE_DATE_MASK,
         flg_ref_value_in => l_rec.FLG_REF_VALUE
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN PO_PARAM_REG%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE

   IS
     retval PO_PARAM_REG.ID_PO_PARAM_REG%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_PO_PARAM_REG.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_PO_PARAM_REG')
           );
   END next_key;

   PROCEDURE ins (
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL,
      id_po_param_reg_out IN OUT PO_PARAM_REG.ID_PO_PARAM_REG%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky PO_PARAM_REG.ID_PO_PARAM_REG%TYPE := next_key;
   BEGIN
      ins (
         id_po_param_reg_in => l_pky,
         id_po_param_in => id_po_param_in,
         id_inst_owner_in => id_inst_owner_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         dt_creation_in => dt_creation_in,
         dt_result_in => dt_result_in,
         flg_origin_in => flg_origin_in,
         value_in => value_in,
         id_unit_measure_in => id_unit_measure_in,
         id_professional_in => id_professional_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
         flg_screen_in => flg_screen_in,
         free_text_in => free_text_in,
         free_date_in => free_date_in,
         free_date_mask_in => free_date_mask_in,
         flg_ref_value_in => flg_ref_value_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_po_param_reg_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL,
      id_po_param_reg_out IN OUT PO_PARAM_REG.ID_PO_PARAM_REG%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_po_param_in => id_po_param_in,
      id_inst_owner_in => id_inst_owner_in,
      id_patient_in => id_patient_in,
      id_episode_in => id_episode_in,
      dt_creation_in => dt_creation_in,
      dt_result_in => dt_result_in,
      flg_origin_in => flg_origin_in,
      value_in => value_in,
      id_unit_measure_in => id_unit_measure_in,
      id_professional_in => id_professional_in,
      flg_status_in => flg_status_in,
      id_cancel_reason_in => id_cancel_reason_in,
      dt_cancel_in => dt_cancel_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
      flg_screen_in => flg_screen_in,
      free_text_in => free_text_in,
      free_date_in => free_date_in,
      free_date_mask_in => free_date_mask_in,
      flg_ref_value_in => flg_ref_value_in,
      id_po_param_reg_out => id_po_param_reg_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         PO_PARAM_REG.ID_PO_PARAM_REG%TYPE
   IS
        l_pky PO_PARAM_REG.ID_PO_PARAM_REG%TYPE := next_key;
   BEGIN
      ins (
         id_po_param_reg_in => l_pky,
         id_po_param_in => id_po_param_in,
         id_inst_owner_in => id_inst_owner_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         dt_creation_in => dt_creation_in,
         dt_result_in => dt_result_in,
         flg_origin_in => flg_origin_in,
         value_in => value_in,
         id_unit_measure_in => id_unit_measure_in,
         id_professional_in => id_professional_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
         flg_screen_in => flg_screen_in,
         free_text_in => free_text_in,
         free_date_in => free_date_in,
         free_date_mask_in => free_date_mask_in,
         flg_ref_value_in => flg_ref_value_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         PO_PARAM_REG.ID_PO_PARAM_REG%TYPE
   IS
        l_pky PO_PARAM_REG.ID_PO_PARAM_REG%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_po_param_reg_in => l_pky,
         id_po_param_in => id_po_param_in,
         id_inst_owner_in => id_inst_owner_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         dt_creation_in => dt_creation_in,
         dt_result_in => dt_result_in,
         flg_origin_in => flg_origin_in,
         value_in => value_in,
         id_unit_measure_in => id_unit_measure_in,
         id_professional_in => id_professional_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
         flg_screen_in => flg_screen_in,
         free_text_in => free_text_in,
         free_date_in => free_date_in,
         free_date_mask_in => free_date_mask_in,
         flg_ref_value_in => flg_ref_value_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky PO_PARAM_REG.ID_PO_PARAM_REG%TYPE := next_key;
   BEGIN
      ins (
         id_po_param_reg_in => l_pky,
         id_po_param_in => id_po_param_in,
         id_inst_owner_in => id_inst_owner_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         dt_creation_in => dt_creation_in,
         dt_result_in => dt_result_in,
         flg_origin_in => flg_origin_in,
         value_in => value_in,
         id_unit_measure_in => id_unit_measure_in,
         id_professional_in => id_professional_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
         flg_screen_in => flg_screen_in,
         free_text_in => free_text_in,
         free_date_in => free_date_in,
         free_date_mask_in => free_date_mask_in,
         flg_ref_value_in => flg_ref_value_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky PO_PARAM_REG.ID_PO_PARAM_REG%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_po_param_reg_in => l_pky,
         id_po_param_in => id_po_param_in,
         id_inst_owner_in => id_inst_owner_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         dt_creation_in => dt_creation_in,
         dt_result_in => dt_result_in,
         flg_origin_in => flg_origin_in,
         value_in => value_in,
         id_unit_measure_in => id_unit_measure_in,
         id_professional_in => id_professional_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
         flg_screen_in => flg_screen_in,
         free_text_in => free_text_in,
         free_date_in => free_date_in,
         free_date_mask_in => free_date_mask_in,
         flg_ref_value_in => flg_ref_value_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN PO_PARAM_REG_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO PO_PARAM_REG VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQLERRM (-SQL%BULK_EXCEPTIONS (indx).ERROR_CODE)
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PO_PARAM_REG _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PO_PARAM_REG
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PO_PARAM _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PO_PARAM
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_INST_OWNER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_INST_OWNER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PATIENT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PATIENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_EPISODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CREATION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_CREATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_RESULT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_RESULT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_ORIGIN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_ORIGIN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'VALUE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).VALUE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_UNIT_MEASURE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_UNIT_MEASURE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROFESSIONAL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROFESSIONAL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CANCEL_REASON _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CANCEL_REASON
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PAT_PREGN_FETUS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PAT_PREGN_FETUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_SCREEN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_SCREEN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FREE_DATE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FREE_DATE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FREE_DATE_MASK _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FREE_DATE_MASK
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_REF_VALUE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_REF_VALUE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'PO_PARAM_REG'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN PO_PARAM_REG_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_po_param_reg_in IN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE,
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      ID_PO_PARAM_nin IN BOOLEAN := TRUE,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      ID_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      DT_CREATION_nin IN BOOLEAN := TRUE,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      DT_RESULT_nin IN BOOLEAN := TRUE,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      FLG_ORIGIN_nin IN BOOLEAN := TRUE,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      VALUE_nin IN BOOLEAN := TRUE,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      ID_PAT_PREGN_FETUS_nin IN BOOLEAN := TRUE,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      FLG_SCREEN_nin IN BOOLEAN := TRUE,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      FREE_TEXT_nin IN BOOLEAN := TRUE,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      FREE_DATE_nin IN BOOLEAN := TRUE,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      FREE_DATE_MASK_nin IN BOOLEAN := TRUE,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL,
      FLG_REF_VALUE_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_PO_PARAM_n NUMBER(1);
   l_ID_INST_OWNER_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_DT_CREATION_n NUMBER(1);
   l_DT_RESULT_n NUMBER(1);
   l_FLG_ORIGIN_n NUMBER(1);
   l_VALUE_n NUMBER(1);
   l_ID_UNIT_MEASURE_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_DT_CANCEL_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_PAT_PREGN_FETUS_n NUMBER(1);
   l_FLG_SCREEN_n NUMBER(1);
   l_FREE_TEXT_n NUMBER(1);
   l_FREE_DATE_n NUMBER(1);
   l_FREE_DATE_MASK_n NUMBER(1);
   l_FLG_REF_VALUE_n NUMBER(1);
   BEGIN

   l_ID_PO_PARAM_n := sys.diutil.bool_to_int(ID_PO_PARAM_nin);
   l_ID_INST_OWNER_n := sys.diutil.bool_to_int(ID_INST_OWNER_nin);
   l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
   l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
   l_DT_CREATION_n := sys.diutil.bool_to_int(DT_CREATION_nin);
   l_DT_RESULT_n := sys.diutil.bool_to_int(DT_RESULT_nin);
   l_FLG_ORIGIN_n := sys.diutil.bool_to_int(FLG_ORIGIN_nin);
   l_VALUE_n := sys.diutil.bool_to_int(VALUE_nin);
   l_ID_UNIT_MEASURE_n := sys.diutil.bool_to_int(ID_UNIT_MEASURE_nin);
   l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
   l_DT_CANCEL_n := sys.diutil.bool_to_int(DT_CANCEL_nin);
   l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
   l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_ID_PAT_PREGN_FETUS_n := sys.diutil.bool_to_int(ID_PAT_PREGN_FETUS_nin);
   l_FLG_SCREEN_n := sys.diutil.bool_to_int(FLG_SCREEN_nin);
   l_FREE_TEXT_n := sys.diutil.bool_to_int(FREE_TEXT_nin);
   l_FREE_DATE_n := sys.diutil.bool_to_int(FREE_DATE_nin);
   l_FREE_DATE_MASK_n := sys.diutil.bool_to_int(FREE_DATE_MASK_nin);
   l_FLG_REF_VALUE_n := sys.diutil.bool_to_int(FLG_REF_VALUE_nin);


         UPDATE PO_PARAM_REG SET
     ID_PO_PARAM = decode (l_ID_PO_PARAM_n,0,id_po_param_in, NVL (id_po_param_in, ID_PO_PARAM)),
     ID_INST_OWNER = decode (l_ID_INST_OWNER_n,0,id_inst_owner_in, NVL (id_inst_owner_in, ID_INST_OWNER)),
     ID_PATIENT = decode (l_ID_PATIENT_n,0,id_patient_in, NVL (id_patient_in, ID_PATIENT)),
     ID_EPISODE = decode (l_ID_EPISODE_n,0,id_episode_in, NVL (id_episode_in, ID_EPISODE)),
     DT_CREATION = decode (l_DT_CREATION_n,0,dt_creation_in, NVL (dt_creation_in, DT_CREATION)),
     DT_RESULT = decode (l_DT_RESULT_n,0,dt_result_in, NVL (dt_result_in, DT_RESULT)),
     FLG_ORIGIN = decode (l_FLG_ORIGIN_n,0,flg_origin_in, NVL (flg_origin_in, FLG_ORIGIN)),
     VALUE = decode (l_VALUE_n,0,value_in, NVL (value_in, VALUE)),
     ID_UNIT_MEASURE = decode (l_ID_UNIT_MEASURE_n,0,id_unit_measure_in, NVL (id_unit_measure_in, ID_UNIT_MEASURE)),
     ID_PROFESSIONAL = decode (l_ID_PROFESSIONAL_n,0,id_professional_in, NVL (id_professional_in, ID_PROFESSIONAL)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     ID_CANCEL_REASON = decode (l_ID_CANCEL_REASON_n,0,id_cancel_reason_in, NVL (id_cancel_reason_in, ID_CANCEL_REASON)),
     DT_CANCEL = decode (l_DT_CANCEL_n,0,dt_cancel_in, NVL (dt_cancel_in, DT_CANCEL)),
     ID_PROF_CANCEL = decode (l_ID_PROF_CANCEL_n,0,id_prof_cancel_in, NVL (id_prof_cancel_in, ID_PROF_CANCEL)),
     NOTES_CANCEL = decode (l_NOTES_CANCEL_n,0,notes_cancel_in, NVL (notes_cancel_in, NOTES_CANCEL)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     ID_PAT_PREGN_FETUS = decode (l_ID_PAT_PREGN_FETUS_n,0,id_pat_pregn_fetus_in, NVL (id_pat_pregn_fetus_in, ID_PAT_PREGN_FETUS)),
     FLG_SCREEN = decode (l_FLG_SCREEN_n,0,flg_screen_in, NVL (flg_screen_in, FLG_SCREEN)),
     FREE_TEXT = decode (l_FREE_TEXT_n,0,free_text_in, NVL (free_text_in, FREE_TEXT)),
     FREE_DATE = decode (l_FREE_DATE_n,0,free_date_in, NVL (free_date_in, FREE_DATE)),
     FREE_DATE_MASK = decode (l_FREE_DATE_MASK_n,0,free_date_mask_in, NVL (free_date_mask_in, FREE_DATE_MASK)),
     FLG_REF_VALUE = decode (l_FLG_REF_VALUE_n,0,flg_ref_value_in, NVL (flg_ref_value_in, FLG_REF_VALUE))
          WHERE
             ID_PO_PARAM_REG = id_po_param_reg_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PO_PARAM_REG');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           IF l_name = 'POPR_CRE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'POPR_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'POPR_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'POPR_POP_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PO_PARAM'
               , value_in => id_po_param_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INST_OWNER'
               , value_in => id_inst_owner_in);
           END IF;
           IF l_name = 'POPR_PPF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_PREGN_FETUS'
               , value_in => id_pat_pregn_fetus_in);
           END IF;
           IF l_name = 'POPR_PROF_CANC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'POPR_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'POPR_UNITM_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE'
               , value_in => id_unit_measure_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_po_param_reg_in IN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE,
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      ID_PO_PARAM_nin IN BOOLEAN := TRUE,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      ID_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      DT_CREATION_nin IN BOOLEAN := TRUE,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      DT_RESULT_nin IN BOOLEAN := TRUE,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      FLG_ORIGIN_nin IN BOOLEAN := TRUE,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      VALUE_nin IN BOOLEAN := TRUE,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      ID_PAT_PREGN_FETUS_nin IN BOOLEAN := TRUE,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      FLG_SCREEN_nin IN BOOLEAN := TRUE,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      FREE_TEXT_nin IN BOOLEAN := TRUE,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      FREE_DATE_nin IN BOOLEAN := TRUE,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      FREE_DATE_MASK_nin IN BOOLEAN := TRUE,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL,
      FLG_REF_VALUE_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_po_param_reg_in => id_po_param_reg_in,
      id_po_param_in => id_po_param_in,
      ID_PO_PARAM_nin => ID_PO_PARAM_nin,
      id_inst_owner_in => id_inst_owner_in,
      ID_INST_OWNER_nin => ID_INST_OWNER_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      dt_creation_in => dt_creation_in,
      DT_CREATION_nin => DT_CREATION_nin,
      dt_result_in => dt_result_in,
      DT_RESULT_nin => DT_RESULT_nin,
      flg_origin_in => flg_origin_in,
      FLG_ORIGIN_nin => FLG_ORIGIN_nin,
      value_in => value_in,
      VALUE_nin => VALUE_nin,
      id_unit_measure_in => id_unit_measure_in,
      ID_UNIT_MEASURE_nin => ID_UNIT_MEASURE_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      dt_cancel_in => dt_cancel_in,
      DT_CANCEL_nin => DT_CANCEL_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
      ID_PAT_PREGN_FETUS_nin => ID_PAT_PREGN_FETUS_nin,
      flg_screen_in => flg_screen_in,
      FLG_SCREEN_nin => FLG_SCREEN_nin,
      free_text_in => free_text_in,
      FREE_TEXT_nin => FREE_TEXT_nin,
      free_date_in => free_date_in,
      FREE_DATE_nin => FREE_DATE_nin,
      free_date_mask_in => free_date_mask_in,
      FREE_DATE_MASK_nin => FREE_DATE_MASK_nin,
      flg_ref_value_in => flg_ref_value_in,
      FLG_REF_VALUE_nin => FLG_REF_VALUE_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      ID_PO_PARAM_nin IN BOOLEAN := TRUE,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      ID_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      DT_CREATION_nin IN BOOLEAN := TRUE,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      DT_RESULT_nin IN BOOLEAN := TRUE,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      FLG_ORIGIN_nin IN BOOLEAN := TRUE,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      VALUE_nin IN BOOLEAN := TRUE,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      ID_PAT_PREGN_FETUS_nin IN BOOLEAN := TRUE,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      FLG_SCREEN_nin IN BOOLEAN := TRUE,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      FREE_TEXT_nin IN BOOLEAN := TRUE,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      FREE_DATE_nin IN BOOLEAN := TRUE,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      FREE_DATE_MASK_nin IN BOOLEAN := TRUE,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL,
      FLG_REF_VALUE_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_PO_PARAM_n NUMBER(1);
   l_ID_INST_OWNER_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_DT_CREATION_n NUMBER(1);
   l_DT_RESULT_n NUMBER(1);
   l_FLG_ORIGIN_n NUMBER(1);
   l_VALUE_n NUMBER(1);
   l_ID_UNIT_MEASURE_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_DT_CANCEL_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_PAT_PREGN_FETUS_n NUMBER(1);
   l_FLG_SCREEN_n NUMBER(1);
   l_FREE_TEXT_n NUMBER(1);
   l_FREE_DATE_n NUMBER(1);
   l_FREE_DATE_MASK_n NUMBER(1);
   l_FLG_REF_VALUE_n NUMBER(1);
      id_po_param_reg_in PO_PARAM_REG.ID_PO_PARAM_REG%TYPE;
   BEGIN



      l_ID_PO_PARAM_n := sys.diutil.bool_to_int(ID_PO_PARAM_nin);
      l_ID_INST_OWNER_n := sys.diutil.bool_to_int(ID_INST_OWNER_nin);
      l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
      l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
      l_DT_CREATION_n := sys.diutil.bool_to_int(DT_CREATION_nin);
      l_DT_RESULT_n := sys.diutil.bool_to_int(DT_RESULT_nin);
      l_FLG_ORIGIN_n := sys.diutil.bool_to_int(FLG_ORIGIN_nin);
      l_VALUE_n := sys.diutil.bool_to_int(VALUE_nin);
      l_ID_UNIT_MEASURE_n := sys.diutil.bool_to_int(ID_UNIT_MEASURE_nin);
      l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
      l_DT_CANCEL_n := sys.diutil.bool_to_int(DT_CANCEL_nin);
      l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
      l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_ID_PAT_PREGN_FETUS_n := sys.diutil.bool_to_int(ID_PAT_PREGN_FETUS_nin);
      l_FLG_SCREEN_n := sys.diutil.bool_to_int(FLG_SCREEN_nin);
      l_FREE_TEXT_n := sys.diutil.bool_to_int(FREE_TEXT_nin);
      l_FREE_DATE_n := sys.diutil.bool_to_int(FREE_DATE_nin);
      l_FREE_DATE_MASK_n := sys.diutil.bool_to_int(FREE_DATE_MASK_nin);
      l_FLG_REF_VALUE_n := sys.diutil.bool_to_int(FLG_REF_VALUE_nin);



l_sql := 'UPDATE PO_PARAM_REG SET '
     || ' ID_PO_PARAM = decode (' || l_ID_PO_PARAM_n || ',0,:id_po_param_in, NVL (:id_po_param_in, ID_PO_PARAM)) '|| ','
     || ' ID_INST_OWNER = decode (' || l_ID_INST_OWNER_n || ',0,:id_inst_owner_in, NVL (:id_inst_owner_in, ID_INST_OWNER)) '|| ','
     || ' ID_PATIENT = decode (' || l_ID_PATIENT_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) '|| ','
     || ' ID_EPISODE = decode (' || l_ID_EPISODE_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) '|| ','
     || ' DT_CREATION = decode (' || l_DT_CREATION_n || ',0,:dt_creation_in, NVL (:dt_creation_in, DT_CREATION)) '|| ','
     || ' DT_RESULT = decode (' || l_DT_RESULT_n || ',0,:dt_result_in, NVL (:dt_result_in, DT_RESULT)) '|| ','
     || ' FLG_ORIGIN = decode (' || l_FLG_ORIGIN_n || ',0,:flg_origin_in, NVL (:flg_origin_in, FLG_ORIGIN)) '|| ','
     || ' VALUE = decode (' || l_VALUE_n || ',0,:value_in, NVL (:value_in, VALUE)) '|| ','
     || ' ID_UNIT_MEASURE = decode (' || l_ID_UNIT_MEASURE_n || ',0,:id_unit_measure_in, NVL (:id_unit_measure_in, ID_UNIT_MEASURE)) '|| ','
     || ' ID_PROFESSIONAL = decode (' || l_ID_PROFESSIONAL_n || ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' ID_CANCEL_REASON = decode (' || l_ID_CANCEL_REASON_n || ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) '|| ','
     || ' DT_CANCEL = decode (' || l_DT_CANCEL_n || ',0,:dt_cancel_in, NVL (:dt_cancel_in, DT_CANCEL)) '|| ','
     || ' ID_PROF_CANCEL = decode (' || l_ID_PROF_CANCEL_n || ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) '|| ','
     || ' NOTES_CANCEL = decode (' || l_NOTES_CANCEL_n || ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' ID_PAT_PREGN_FETUS = decode (' || l_ID_PAT_PREGN_FETUS_n || ',0,:id_pat_pregn_fetus_in, NVL (:id_pat_pregn_fetus_in, ID_PAT_PREGN_FETUS)) '|| ','
     || ' FLG_SCREEN = decode (' || l_FLG_SCREEN_n || ',0,:flg_screen_in, NVL (:flg_screen_in, FLG_SCREEN)) '|| ','
     || ' FREE_TEXT = decode (' || l_FREE_TEXT_n || ',0,:free_text_in, NVL (:free_text_in, FREE_TEXT)) '|| ','
     || ' FREE_DATE = decode (' || l_FREE_DATE_n || ',0,:free_date_in, NVL (:free_date_in, FREE_DATE)) '|| ','
     || ' FREE_DATE_MASK = decode (' || l_FREE_DATE_MASK_n || ',0,:free_date_mask_in, NVL (:free_date_mask_in, FREE_DATE_MASK)) '|| ','
     || ' FLG_REF_VALUE = decode (' || l_FLG_REF_VALUE_n || ',0,:flg_ref_value_in, NVL (:flg_ref_value_in, FLG_REF_VALUE)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_po_param_in,
     id_inst_owner_in,
     id_patient_in,
     id_episode_in,
     dt_creation_in,
     dt_result_in,
     flg_origin_in,
     value_in,
     id_unit_measure_in,
     id_professional_in,
     flg_status_in,
     id_cancel_reason_in,
     dt_cancel_in,
     id_prof_cancel_in,
     notes_cancel_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     id_pat_pregn_fetus_in,
     flg_screen_in,
     free_text_in,
     free_date_in,
     free_date_mask_in,
     flg_ref_value_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PO_PARAM_REG');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           IF l_name = 'POPR_CRE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'POPR_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'POPR_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'POPR_POP_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PO_PARAM'
               , value_in => id_po_param_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INST_OWNER'
               , value_in => id_inst_owner_in);
           END IF;
           IF l_name = 'POPR_PPF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_PREGN_FETUS'
               , value_in => id_pat_pregn_fetus_in);
           END IF;
           IF l_name = 'POPR_PROF_CANC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'POPR_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'POPR_UNITM_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE'
               , value_in => id_unit_measure_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      ID_PO_PARAM_nin IN BOOLEAN := TRUE,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      ID_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      DT_CREATION_nin IN BOOLEAN := TRUE,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      DT_RESULT_nin IN BOOLEAN := TRUE,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      FLG_ORIGIN_nin IN BOOLEAN := TRUE,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      VALUE_nin IN BOOLEAN := TRUE,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      DT_CANCEL_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      ID_PAT_PREGN_FETUS_nin IN BOOLEAN := TRUE,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      FLG_SCREEN_nin IN BOOLEAN := TRUE,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      FREE_TEXT_nin IN BOOLEAN := TRUE,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      FREE_DATE_nin IN BOOLEAN := TRUE,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      FREE_DATE_MASK_nin IN BOOLEAN := TRUE,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL,
      FLG_REF_VALUE_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_po_param_in => id_po_param_in,
      ID_PO_PARAM_nin => ID_PO_PARAM_nin,
      id_inst_owner_in => id_inst_owner_in,
      ID_INST_OWNER_nin => ID_INST_OWNER_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      dt_creation_in => dt_creation_in,
      DT_CREATION_nin => DT_CREATION_nin,
      dt_result_in => dt_result_in,
      DT_RESULT_nin => DT_RESULT_nin,
      flg_origin_in => flg_origin_in,
      FLG_ORIGIN_nin => FLG_ORIGIN_nin,
      value_in => value_in,
      VALUE_nin => VALUE_nin,
      id_unit_measure_in => id_unit_measure_in,
      ID_UNIT_MEASURE_nin => ID_UNIT_MEASURE_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      dt_cancel_in => dt_cancel_in,
      DT_CANCEL_nin => DT_CANCEL_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
      ID_PAT_PREGN_FETUS_nin => ID_PAT_PREGN_FETUS_nin,
      flg_screen_in => flg_screen_in,
      FLG_SCREEN_nin => FLG_SCREEN_nin,
      free_text_in => free_text_in,
      FREE_TEXT_nin => FREE_TEXT_nin,
      free_date_in => free_date_in,
      FREE_DATE_nin => FREE_DATE_nin,
      free_date_mask_in => free_date_mask_in,
      FREE_DATE_MASK_nin => FREE_DATE_MASK_nin,
      flg_ref_value_in => flg_ref_value_in,
      FLG_REF_VALUE_nin => FLG_REF_VALUE_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN PO_PARAM_REG%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_po_param_reg_in => rec_in.ID_PO_PARAM_REG,
         id_po_param_in => rec_in.ID_PO_PARAM,
         id_inst_owner_in => rec_in.ID_INST_OWNER,
         id_patient_in => rec_in.ID_PATIENT,
         id_episode_in => rec_in.ID_EPISODE,
         dt_creation_in => rec_in.DT_CREATION,
         dt_result_in => rec_in.DT_RESULT,
         flg_origin_in => rec_in.FLG_ORIGIN,
         value_in => rec_in.VALUE,
         id_unit_measure_in => rec_in.ID_UNIT_MEASURE,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         flg_status_in => rec_in.FLG_STATUS,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         dt_cancel_in => rec_in.DT_CANCEL,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_pat_pregn_fetus_in => rec_in.ID_PAT_PREGN_FETUS,
         flg_screen_in => rec_in.FLG_SCREEN,
         free_text_in => rec_in.FREE_TEXT,
         free_date_in => rec_in.FREE_DATE,
         free_date_mask_in => rec_in.FREE_DATE_MASK,
         flg_ref_value_in => rec_in.FLG_REF_VALUE

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN PO_PARAM_REG%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_po_param_reg_in => rec_in.ID_PO_PARAM_REG,
         id_po_param_in => rec_in.ID_PO_PARAM,
         id_inst_owner_in => rec_in.ID_INST_OWNER,
         id_patient_in => rec_in.ID_PATIENT,
         id_episode_in => rec_in.ID_EPISODE,
         dt_creation_in => rec_in.DT_CREATION,
         dt_result_in => rec_in.DT_RESULT,
         flg_origin_in => rec_in.FLG_ORIGIN,
         value_in => rec_in.VALUE,
         id_unit_measure_in => rec_in.ID_UNIT_MEASURE,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         flg_status_in => rec_in.FLG_STATUS,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         dt_cancel_in => rec_in.DT_CANCEL,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_pat_pregn_fetus_in => rec_in.ID_PAT_PREGN_FETUS,
         flg_screen_in => rec_in.FLG_SCREEN,
         free_text_in => rec_in.FREE_TEXT,
         free_date_in => rec_in.FREE_DATE,
         free_date_mask_in => rec_in.FREE_DATE_MASK,
         flg_ref_value_in => rec_in.FLG_REF_VALUE

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_po_param_reg_in IN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE,
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_po_param_reg_in => id_po_param_reg_in,
         id_po_param_in => id_po_param_in,
         id_inst_owner_in => id_inst_owner_in,
         id_patient_in => id_patient_in,
         id_episode_in => id_episode_in,
         dt_creation_in => dt_creation_in,
         dt_result_in => dt_result_in,
         flg_origin_in => flg_origin_in,
         value_in => value_in,
         id_unit_measure_in => id_unit_measure_in,
         id_professional_in => id_professional_in,
         flg_status_in => flg_status_in,
         id_cancel_reason_in => id_cancel_reason_in,
         dt_cancel_in => dt_cancel_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
         flg_screen_in => flg_screen_in,
         free_text_in => free_text_in,
         free_date_in => free_date_in,
         free_date_mask_in => free_date_mask_in,
         flg_ref_value_in => flg_ref_value_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_po_param_reg_in => id_po_param_reg_in,
            id_po_param_in => id_po_param_in,
            id_inst_owner_in => id_inst_owner_in,
            id_patient_in => id_patient_in,
            id_episode_in => id_episode_in,
            dt_creation_in => dt_creation_in,
            dt_result_in => dt_result_in,
            flg_origin_in => flg_origin_in,
            value_in => value_in,
            id_unit_measure_in => id_unit_measure_in,
            id_professional_in => id_professional_in,
            flg_status_in => flg_status_in,
            id_cancel_reason_in => id_cancel_reason_in,
            dt_cancel_in => dt_cancel_in,
            id_prof_cancel_in => id_prof_cancel_in,
            notes_cancel_in => notes_cancel_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            id_pat_pregn_fetus_in => id_pat_pregn_fetus_in,
            flg_screen_in => flg_screen_in,
            free_text_in => free_text_in,
            free_date_in => free_date_in,
            free_date_mask_in => free_date_mask_in,
            flg_ref_value_in => flg_ref_value_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_po_param_reg_in IN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE,
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE DEFAULT NULL,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE DEFAULT NULL,
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE DEFAULT NULL,
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE DEFAULT NULL,
      dt_creation_in IN PO_PARAM_REG.DT_CREATION%TYPE DEFAULT NULL,
      dt_result_in IN PO_PARAM_REG.DT_RESULT%TYPE DEFAULT NULL,
      flg_origin_in IN PO_PARAM_REG.FLG_ORIGIN%TYPE DEFAULT NULL,
      value_in IN PO_PARAM_REG.VALUE%TYPE DEFAULT NULL,
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      flg_status_in IN PO_PARAM_REG.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      dt_cancel_in IN PO_PARAM_REG.DT_CANCEL%TYPE DEFAULT NULL,
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN PO_PARAM_REG.NOTES_CANCEL%TYPE DEFAULT NULL,
      create_user_in IN PO_PARAM_REG.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PO_PARAM_REG.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PO_PARAM_REG.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PO_PARAM_REG.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PO_PARAM_REG.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PO_PARAM_REG.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE DEFAULT NULL,
      flg_screen_in IN PO_PARAM_REG.FLG_SCREEN%TYPE DEFAULT NULL,
      free_text_in IN PO_PARAM_REG.FREE_TEXT%TYPE DEFAULT NULL,
      free_date_in IN PO_PARAM_REG.FREE_DATE%TYPE DEFAULT NULL,
      free_date_mask_in IN PO_PARAM_REG.FREE_DATE_MASK%TYPE DEFAULT NULL,
      flg_ref_value_in IN PO_PARAM_REG.FLG_REF_VALUE%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_po_param_reg_in,
      id_po_param_in,
      id_inst_owner_in,
      id_patient_in,
      id_episode_in,
      dt_creation_in,
      dt_result_in,
      flg_origin_in,
      value_in,
      id_unit_measure_in,
      id_professional_in,
      flg_status_in,
      id_cancel_reason_in,
      dt_cancel_in,
      id_prof_cancel_in,
      notes_cancel_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      id_pat_pregn_fetus_in,
      flg_screen_in,
      free_text_in,
      free_date_in,
      free_date_mask_in,
      flg_ref_value_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN PO_PARAM_REG_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_PO_PARAM_REG ID_PO_PARAM_REG_cc;
      l_ID_PO_PARAM ID_PO_PARAM_cc;
      l_ID_INST_OWNER ID_INST_OWNER_cc;
      l_ID_PATIENT ID_PATIENT_cc;
      l_ID_EPISODE ID_EPISODE_cc;
      l_DT_CREATION DT_CREATION_cc;
      l_DT_RESULT DT_RESULT_cc;
      l_FLG_ORIGIN FLG_ORIGIN_cc;
      l_VALUE VALUE_cc;
      l_ID_UNIT_MEASURE ID_UNIT_MEASURE_cc;
      l_ID_PROFESSIONAL ID_PROFESSIONAL_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_ID_CANCEL_REASON ID_CANCEL_REASON_cc;
      l_DT_CANCEL DT_CANCEL_cc;
      l_ID_PROF_CANCEL ID_PROF_CANCEL_cc;
      l_NOTES_CANCEL NOTES_CANCEL_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_ID_PAT_PREGN_FETUS ID_PAT_PREGN_FETUS_cc;
      l_FLG_SCREEN FLG_SCREEN_cc;
      l_FREE_TEXT FREE_TEXT_cc;
      l_FREE_DATE FREE_DATE_cc;
      l_FREE_DATE_MASK FREE_DATE_MASK_cc;
      l_FLG_REF_VALUE FLG_REF_VALUE_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_PO_PARAM_REG(i) := col_in(i).ID_PO_PARAM_REG;
         l_ID_PO_PARAM(i) := col_in(i).ID_PO_PARAM;
         l_ID_INST_OWNER(i) := col_in(i).ID_INST_OWNER;
         l_ID_PATIENT(i) := col_in(i).ID_PATIENT;
         l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
         l_DT_CREATION(i) := col_in(i).DT_CREATION;
         l_DT_RESULT(i) := col_in(i).DT_RESULT;
         l_FLG_ORIGIN(i) := col_in(i).FLG_ORIGIN;
         l_VALUE(i) := col_in(i).VALUE;
         l_ID_UNIT_MEASURE(i) := col_in(i).ID_UNIT_MEASURE;
         l_ID_PROFESSIONAL(i) := col_in(i).ID_PROFESSIONAL;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_ID_CANCEL_REASON(i) := col_in(i).ID_CANCEL_REASON;
         l_DT_CANCEL(i) := col_in(i).DT_CANCEL;
         l_ID_PROF_CANCEL(i) := col_in(i).ID_PROF_CANCEL;
         l_NOTES_CANCEL(i) := col_in(i).NOTES_CANCEL;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_ID_PAT_PREGN_FETUS(i) := col_in(i).ID_PAT_PREGN_FETUS;
         l_FLG_SCREEN(i) := col_in(i).FLG_SCREEN;
         l_FREE_TEXT(i) := col_in(i).FREE_TEXT;
         l_FREE_DATE(i) := col_in(i).FREE_DATE;
         l_FREE_DATE_MASK(i) := col_in(i).FREE_DATE_MASK;
         l_FLG_REF_VALUE(i) := col_in(i).FLG_REF_VALUE;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PO_PARAM_REG SET
               ID_PO_PARAM = NVL (l_ID_PO_PARAM(i), ID_PO_PARAM),
               ID_INST_OWNER = NVL (l_ID_INST_OWNER(i), ID_INST_OWNER),
               ID_PATIENT = NVL (l_ID_PATIENT(i), ID_PATIENT),
               ID_EPISODE = NVL (l_ID_EPISODE(i), ID_EPISODE),
               DT_CREATION = NVL (l_DT_CREATION(i), DT_CREATION),
               DT_RESULT = NVL (l_DT_RESULT(i), DT_RESULT),
               FLG_ORIGIN = NVL (l_FLG_ORIGIN(i), FLG_ORIGIN),
               VALUE = NVL (l_VALUE(i), VALUE),
               ID_UNIT_MEASURE = NVL (l_ID_UNIT_MEASURE(i), ID_UNIT_MEASURE),
               ID_PROFESSIONAL = NVL (l_ID_PROFESSIONAL(i), ID_PROFESSIONAL),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               ID_CANCEL_REASON = NVL (l_ID_CANCEL_REASON(i), ID_CANCEL_REASON),
               DT_CANCEL = NVL (l_DT_CANCEL(i), DT_CANCEL),
               ID_PROF_CANCEL = NVL (l_ID_PROF_CANCEL(i), ID_PROF_CANCEL),
               NOTES_CANCEL = NVL (l_NOTES_CANCEL(i), NOTES_CANCEL),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               ID_PAT_PREGN_FETUS = NVL (l_ID_PAT_PREGN_FETUS(i), ID_PAT_PREGN_FETUS),
               FLG_SCREEN = NVL (l_FLG_SCREEN(i), FLG_SCREEN),
               FREE_TEXT = NVL (l_FREE_TEXT(i), FREE_TEXT),
               FREE_DATE = NVL (l_FREE_DATE(i), FREE_DATE),
               FREE_DATE_MASK = NVL (l_FREE_DATE_MASK(i), FREE_DATE_MASK),
               FLG_REF_VALUE = NVL (l_FLG_REF_VALUE(i), FLG_REF_VALUE)
             WHERE
                ID_PO_PARAM_REG = l_ID_PO_PARAM_REG(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PO_PARAM_REG SET
               ID_PO_PARAM = l_ID_PO_PARAM(i),
               ID_INST_OWNER = l_ID_INST_OWNER(i),
               ID_PATIENT = l_ID_PATIENT(i),
               ID_EPISODE = l_ID_EPISODE(i),
               DT_CREATION = l_DT_CREATION(i),
               DT_RESULT = l_DT_RESULT(i),
               FLG_ORIGIN = l_FLG_ORIGIN(i),
               VALUE = l_VALUE(i),
               ID_UNIT_MEASURE = l_ID_UNIT_MEASURE(i),
               ID_PROFESSIONAL = l_ID_PROFESSIONAL(i),
               FLG_STATUS = l_FLG_STATUS(i),
               ID_CANCEL_REASON = l_ID_CANCEL_REASON(i),
               DT_CANCEL = l_DT_CANCEL(i),
               ID_PROF_CANCEL = l_ID_PROF_CANCEL(i),
               NOTES_CANCEL = l_NOTES_CANCEL(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               ID_PAT_PREGN_FETUS = l_ID_PAT_PREGN_FETUS(i),
               FLG_SCREEN = l_FLG_SCREEN(i),
               FREE_TEXT = l_FREE_TEXT(i),
               FREE_DATE = l_FREE_DATE(i),
               FREE_DATE_MASK = l_FREE_DATE_MASK(i),
               FLG_REF_VALUE = l_FLG_REF_VALUE(i)
             WHERE
                ID_PO_PARAM_REG = l_ID_PO_PARAM_REG(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN PO_PARAM_REG_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE PO_PARAM_REG
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE PO_PARAM_REG
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE PO_PARAM_REG set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE PO_PARAM_REG set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_po_param_reg_in IN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PO_PARAM_REG
       WHERE
          ID_PO_PARAM_REG = id_po_param_reg_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_po_param_reg_in IN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_po_param_reg_in => id_po_param_reg_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_PO_PARAM_REG
   PROCEDURE del_ID_PO_PARAM_REG (
      id_po_param_reg_in IN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM PO_PARAM_REG
       WHERE ID_PO_PARAM_REG = id_po_param_reg_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_PO_PARAM_REG;






   -- Delete all rows for primary key column ID_PO_PARAM_REG
   PROCEDURE del_ID_PO_PARAM_REG (
      id_po_param_reg_in IN PO_PARAM_REG.ID_PO_PARAM_REG%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_PO_PARAM_REG (
      id_po_param_reg_in => id_po_param_reg_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_PO_PARAM_REG;















   PROCEDURE del_POPR_CRE_FK (
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PO_PARAM_REG
       WHERE
          ID_CANCEL_REASON = del_POPR_CRE_FK.id_cancel_reason_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_POPR_CRE_FK;



PROCEDURE del_POPR_CRE_FK (
      id_cancel_reason_in IN PO_PARAM_REG.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_POPR_CRE_FK (
      id_cancel_reason_in => id_cancel_reason_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_POPR_CRE_FK;





   PROCEDURE del_POPR_EPIS_FK (
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PO_PARAM_REG
       WHERE
          ID_EPISODE = del_POPR_EPIS_FK.id_episode_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_POPR_EPIS_FK;



PROCEDURE del_POPR_EPIS_FK (
      id_episode_in IN PO_PARAM_REG.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_POPR_EPIS_FK (
      id_episode_in => id_episode_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_POPR_EPIS_FK;





   PROCEDURE del_POPR_PAT_FK (
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PO_PARAM_REG
       WHERE
          ID_PATIENT = del_POPR_PAT_FK.id_patient_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_POPR_PAT_FK;



PROCEDURE del_POPR_PAT_FK (
      id_patient_in IN PO_PARAM_REG.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_POPR_PAT_FK (
      id_patient_in => id_patient_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_POPR_PAT_FK;





   PROCEDURE del_POPR_POP_FK (
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PO_PARAM_REG
       WHERE
          ID_PO_PARAM = del_POPR_POP_FK.id_po_param_in AND
          ID_INST_OWNER = del_POPR_POP_FK.id_inst_owner_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_POPR_POP_FK;



PROCEDURE del_POPR_POP_FK (
      id_po_param_in IN PO_PARAM_REG.ID_PO_PARAM%TYPE,
      id_inst_owner_in IN PO_PARAM_REG.ID_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_POPR_POP_FK (
      id_po_param_in => id_po_param_in,
      id_inst_owner_in => id_inst_owner_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_POPR_POP_FK;





   PROCEDURE del_POPR_PPF_FK (
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PO_PARAM_REG
       WHERE
          ID_PAT_PREGN_FETUS = del_POPR_PPF_FK.id_pat_pregn_fetus_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_POPR_PPF_FK;



PROCEDURE del_POPR_PPF_FK (
      id_pat_pregn_fetus_in IN PO_PARAM_REG.ID_PAT_PREGN_FETUS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_POPR_PPF_FK (
      id_pat_pregn_fetus_in => id_pat_pregn_fetus_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_POPR_PPF_FK;





   PROCEDURE del_POPR_PROF_CANC_FK (
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PO_PARAM_REG
       WHERE
          ID_PROF_CANCEL = del_POPR_PROF_CANC_FK.id_prof_cancel_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_POPR_PROF_CANC_FK;



PROCEDURE del_POPR_PROF_CANC_FK (
      id_prof_cancel_in IN PO_PARAM_REG.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_POPR_PROF_CANC_FK (
      id_prof_cancel_in => id_prof_cancel_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_POPR_PROF_CANC_FK;





   PROCEDURE del_POPR_PROF_FK (
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PO_PARAM_REG
       WHERE
          ID_PROFESSIONAL = del_POPR_PROF_FK.id_professional_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_POPR_PROF_FK;



PROCEDURE del_POPR_PROF_FK (
      id_professional_in IN PO_PARAM_REG.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_POPR_PROF_FK (
      id_professional_in => id_professional_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_POPR_PROF_FK;





   PROCEDURE del_POPR_UNITM_FK (
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PO_PARAM_REG
       WHERE
          ID_UNIT_MEASURE = del_POPR_UNITM_FK.id_unit_measure_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_POPR_UNITM_FK;



PROCEDURE del_POPR_UNITM_FK (
      id_unit_measure_in IN PO_PARAM_REG.ID_UNIT_MEASURE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_POPR_UNITM_FK (
      id_unit_measure_in => id_unit_measure_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_POPR_UNITM_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM PO_PARAM_REG';
      ELSE
         RETURN
            'DELETE FROM PO_PARAM_REG WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PO_PARAM_REG');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PO_PARAM_REG');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      po_param_reg_inout IN OUT PO_PARAM_REG%ROWTYPE
   )
   IS
   BEGIN
      po_param_reg_inout.ID_PO_PARAM_REG := NULL;
      po_param_reg_inout.ID_PO_PARAM := NULL;
      po_param_reg_inout.ID_INST_OWNER := NULL;
      po_param_reg_inout.ID_PATIENT := NULL;
      po_param_reg_inout.ID_EPISODE := NULL;
      po_param_reg_inout.DT_CREATION := NULL;
      po_param_reg_inout.DT_RESULT := NULL;
      po_param_reg_inout.FLG_ORIGIN := NULL;
      po_param_reg_inout.VALUE := NULL;
      po_param_reg_inout.ID_UNIT_MEASURE := NULL;
      po_param_reg_inout.ID_PROFESSIONAL := NULL;
      po_param_reg_inout.FLG_STATUS := NULL;
      po_param_reg_inout.ID_CANCEL_REASON := NULL;
      po_param_reg_inout.DT_CANCEL := NULL;
      po_param_reg_inout.ID_PROF_CANCEL := NULL;
      po_param_reg_inout.NOTES_CANCEL := NULL;
      po_param_reg_inout.CREATE_USER := NULL;
      po_param_reg_inout.CREATE_TIME := NULL;
      po_param_reg_inout.CREATE_INSTITUTION := NULL;
      po_param_reg_inout.UPDATE_USER := NULL;
      po_param_reg_inout.UPDATE_TIME := NULL;
      po_param_reg_inout.UPDATE_INSTITUTION := NULL;
      po_param_reg_inout.ID_PAT_PREGN_FETUS := NULL;
      po_param_reg_inout.FLG_SCREEN := NULL;
      po_param_reg_inout.FREE_TEXT := NULL;
      po_param_reg_inout.FREE_DATE := NULL;
      po_param_reg_inout.FREE_DATE_MASK := NULL;
      po_param_reg_inout.FLG_REF_VALUE := NULL;
   END initrec;

   FUNCTION initrec RETURN PO_PARAM_REG%ROWTYPE
   IS
      l_po_param_reg PO_PARAM_REG%ROWTYPE;
   BEGIN
      RETURN l_po_param_reg;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN PO_PARAM_REG_tc
   IS
        data PO_PARAM_REG_tc;
   BEGIN
        select * bulk collect into data from PO_PARAM_REG where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN PO_PARAM_REG_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data PO_PARAM_REG_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_PO_PARAM_REG;
/
