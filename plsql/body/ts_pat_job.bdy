/*-- Last Change Revision: $Rev: 2028314 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:03 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_pat_job
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 21, 2008 18:25:13
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_pat_job_in        IN pat_job.id_pat_job%TYPE,
        location_in          IN pat_job.location%TYPE DEFAULT NULL,
        id_patient_in        IN pat_job.id_patient%TYPE DEFAULT NULL,
        year_begin_in        IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_end_in          IN pat_job.year_end%TYPE DEFAULT NULL,
        activity_type_in     IN pat_job.activity_type%TYPE DEFAULT NULL,
        prof_disease_risk_in IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        notes_in             IN pat_job.notes%TYPE DEFAULT NULL,
        num_workers_in       IN pat_job.num_workers%TYPE DEFAULT NULL,
        company_in           IN pat_job.company%TYPE DEFAULT NULL,
        flg_status_in        IN pat_job.flg_status%TYPE DEFAULT NULL,
        id_occupation_in     IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_institution_in    IN pat_job.id_institution%TYPE DEFAULT NULL,
        occupation_desc_in   IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        dt_pat_job_tstz_in   IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        id_episode_in        IN pat_job.id_episode%TYPE DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pat_job
            (id_pat_job,
             location,
             id_patient,
             year_begin,
             year_end,
             activity_type,
             prof_disease_risk,
             notes,
             num_workers,
             company,
             flg_status,
             id_occupation,
             id_institution,
             occupation_desc,
             dt_pat_job_tstz,
             id_episode)
        VALUES
            (id_pat_job_in,
             location_in,
             id_patient_in,
             year_begin_in,
             year_end_in,
             activity_type_in,
             prof_disease_risk_in,
             notes_in,
             num_workers_in,
             company_in,
             flg_status_in,
             id_occupation_in,
             id_institution_in,
             occupation_desc_in,
             dt_pat_job_tstz_in,
             id_episode_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_JOB');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    IF l_name = 'PTJOB_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PTJOB_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PTJOB_OCC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OCCUPATION',
                                                        value_in           => id_occupation_in);
                    END IF;
                    IF l_name = 'PTJOB_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_pat_job_in        IN pat_job.id_pat_job%TYPE,
        location_in          IN pat_job.location%TYPE DEFAULT NULL,
        id_patient_in        IN pat_job.id_patient%TYPE DEFAULT NULL,
        year_begin_in        IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_end_in          IN pat_job.year_end%TYPE DEFAULT NULL,
        activity_type_in     IN pat_job.activity_type%TYPE DEFAULT NULL,
        prof_disease_risk_in IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        notes_in             IN pat_job.notes%TYPE DEFAULT NULL,
        num_workers_in       IN pat_job.num_workers%TYPE DEFAULT NULL,
        company_in           IN pat_job.company%TYPE DEFAULT NULL,
        flg_status_in        IN pat_job.flg_status%TYPE DEFAULT NULL,
        id_occupation_in     IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_institution_in    IN pat_job.id_institution%TYPE DEFAULT NULL,
        occupation_desc_in   IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        dt_pat_job_tstz_in   IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        id_episode_in        IN pat_job.id_episode%TYPE DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_pat_job_in        => id_pat_job_in,
            location_in          => location_in,
            id_patient_in        => id_patient_in,
            year_begin_in        => year_begin_in,
            year_end_in          => year_end_in,
            activity_type_in     => activity_type_in,
            prof_disease_risk_in => prof_disease_risk_in,
            notes_in             => notes_in,
            num_workers_in       => num_workers_in,
            company_in           => company_in,
            flg_status_in        => flg_status_in,
            id_occupation_in     => id_occupation_in,
            id_institution_in    => id_institution_in,
            occupation_desc_in   => occupation_desc_in,
            dt_pat_job_tstz_in   => dt_pat_job_tstz_in,
            id_episode_in        => id_episode_in,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_job%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pat_job%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_pat_job := next_key(sequence_in);
        END IF;
        ins(id_pat_job_in        => l_rec.id_pat_job,
            location_in          => l_rec.location,
            id_patient_in        => l_rec.id_patient,
            year_begin_in        => l_rec.year_begin,
            year_end_in          => l_rec.year_end,
            activity_type_in     => l_rec.activity_type,
            prof_disease_risk_in => l_rec.prof_disease_risk,
            notes_in             => l_rec.notes,
            num_workers_in       => l_rec.num_workers,
            company_in           => l_rec.company,
            flg_status_in        => l_rec.flg_status,
            id_occupation_in     => l_rec.id_occupation,
            id_institution_in    => l_rec.id_institution,
            occupation_desc_in   => l_rec.occupation_desc,
            dt_pat_job_tstz_in   => l_rec.dt_pat_job_tstz,
            id_episode_in        => l_rec.id_episode,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_job%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN pat_job.id_pat_job%TYPE
    
     IS
        retval pat_job.id_pat_job%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_pat_job.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PAT_JOB'));
    END next_key;

    PROCEDURE ins
    (
        location_in          IN pat_job.location%TYPE DEFAULT NULL,
        id_patient_in        IN pat_job.id_patient%TYPE DEFAULT NULL,
        year_begin_in        IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_end_in          IN pat_job.year_end%TYPE DEFAULT NULL,
        activity_type_in     IN pat_job.activity_type%TYPE DEFAULT NULL,
        prof_disease_risk_in IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        notes_in             IN pat_job.notes%TYPE DEFAULT NULL,
        num_workers_in       IN pat_job.num_workers%TYPE DEFAULT NULL,
        company_in           IN pat_job.company%TYPE DEFAULT NULL,
        flg_status_in        IN pat_job.flg_status%TYPE DEFAULT NULL,
        id_occupation_in     IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_institution_in    IN pat_job.id_institution%TYPE DEFAULT NULL,
        occupation_desc_in   IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        dt_pat_job_tstz_in   IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        id_episode_in        IN pat_job.id_episode%TYPE DEFAULT NULL,
        id_pat_job_out       IN OUT pat_job.id_pat_job%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
        l_pky pat_job.id_pat_job%TYPE := next_key;
    BEGIN
        ins(id_pat_job_in        => l_pky,
            location_in          => location_in,
            id_patient_in        => id_patient_in,
            year_begin_in        => year_begin_in,
            year_end_in          => year_end_in,
            activity_type_in     => activity_type_in,
            prof_disease_risk_in => prof_disease_risk_in,
            notes_in             => notes_in,
            num_workers_in       => num_workers_in,
            company_in           => company_in,
            flg_status_in        => flg_status_in,
            id_occupation_in     => id_occupation_in,
            id_institution_in    => id_institution_in,
            occupation_desc_in   => occupation_desc_in,
            dt_pat_job_tstz_in   => dt_pat_job_tstz_in,
            id_episode_in        => id_episode_in,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
        id_pat_job_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        location_in          IN pat_job.location%TYPE DEFAULT NULL,
        id_patient_in        IN pat_job.id_patient%TYPE DEFAULT NULL,
        year_begin_in        IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_end_in          IN pat_job.year_end%TYPE DEFAULT NULL,
        activity_type_in     IN pat_job.activity_type%TYPE DEFAULT NULL,
        prof_disease_risk_in IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        notes_in             IN pat_job.notes%TYPE DEFAULT NULL,
        num_workers_in       IN pat_job.num_workers%TYPE DEFAULT NULL,
        company_in           IN pat_job.company%TYPE DEFAULT NULL,
        flg_status_in        IN pat_job.flg_status%TYPE DEFAULT NULL,
        id_occupation_in     IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_institution_in    IN pat_job.id_institution%TYPE DEFAULT NULL,
        occupation_desc_in   IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        dt_pat_job_tstz_in   IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        id_episode_in        IN pat_job.id_episode%TYPE DEFAULT NULL,
        id_pat_job_out       IN OUT pat_job.id_pat_job%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(location_in          => location_in,
            id_patient_in        => id_patient_in,
            year_begin_in        => year_begin_in,
            year_end_in          => year_end_in,
            activity_type_in     => activity_type_in,
            prof_disease_risk_in => prof_disease_risk_in,
            notes_in             => notes_in,
            num_workers_in       => num_workers_in,
            company_in           => company_in,
            flg_status_in        => flg_status_in,
            id_occupation_in     => id_occupation_in,
            id_institution_in    => id_institution_in,
            occupation_desc_in   => occupation_desc_in,
            dt_pat_job_tstz_in   => dt_pat_job_tstz_in,
            id_episode_in        => id_episode_in,
            id_pat_job_out       => id_pat_job_out,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
    END ins;

    FUNCTION ins
    (
        location_in          IN pat_job.location%TYPE DEFAULT NULL,
        id_patient_in        IN pat_job.id_patient%TYPE DEFAULT NULL,
        year_begin_in        IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_end_in          IN pat_job.year_end%TYPE DEFAULT NULL,
        activity_type_in     IN pat_job.activity_type%TYPE DEFAULT NULL,
        prof_disease_risk_in IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        notes_in             IN pat_job.notes%TYPE DEFAULT NULL,
        num_workers_in       IN pat_job.num_workers%TYPE DEFAULT NULL,
        company_in           IN pat_job.company%TYPE DEFAULT NULL,
        flg_status_in        IN pat_job.flg_status%TYPE DEFAULT NULL,
        id_occupation_in     IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_institution_in    IN pat_job.id_institution%TYPE DEFAULT NULL,
        occupation_desc_in   IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        dt_pat_job_tstz_in   IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        id_episode_in        IN pat_job.id_episode%TYPE DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) RETURN pat_job.id_pat_job%TYPE IS
        l_pky pat_job.id_pat_job%TYPE := next_key;
    BEGIN
        ins(id_pat_job_in        => l_pky,
            location_in          => location_in,
            id_patient_in        => id_patient_in,
            year_begin_in        => year_begin_in,
            year_end_in          => year_end_in,
            activity_type_in     => activity_type_in,
            prof_disease_risk_in => prof_disease_risk_in,
            notes_in             => notes_in,
            num_workers_in       => num_workers_in,
            company_in           => company_in,
            flg_status_in        => flg_status_in,
            id_occupation_in     => id_occupation_in,
            id_institution_in    => id_institution_in,
            occupation_desc_in   => occupation_desc_in,
            dt_pat_job_tstz_in   => dt_pat_job_tstz_in,
            id_episode_in        => id_episode_in,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        location_in          IN pat_job.location%TYPE DEFAULT NULL,
        id_patient_in        IN pat_job.id_patient%TYPE DEFAULT NULL,
        year_begin_in        IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_end_in          IN pat_job.year_end%TYPE DEFAULT NULL,
        activity_type_in     IN pat_job.activity_type%TYPE DEFAULT NULL,
        prof_disease_risk_in IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        notes_in             IN pat_job.notes%TYPE DEFAULT NULL,
        num_workers_in       IN pat_job.num_workers%TYPE DEFAULT NULL,
        company_in           IN pat_job.company%TYPE DEFAULT NULL,
        flg_status_in        IN pat_job.flg_status%TYPE DEFAULT NULL,
        id_occupation_in     IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_institution_in    IN pat_job.id_institution%TYPE DEFAULT NULL,
        occupation_desc_in   IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        dt_pat_job_tstz_in   IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        id_episode_in        IN pat_job.id_episode%TYPE DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE
    ) RETURN pat_job.id_pat_job%TYPE IS
        l_pky    pat_job.id_pat_job%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_job_in        => l_pky,
            location_in          => location_in,
            id_patient_in        => id_patient_in,
            year_begin_in        => year_begin_in,
            year_end_in          => year_end_in,
            activity_type_in     => activity_type_in,
            prof_disease_risk_in => prof_disease_risk_in,
            notes_in             => notes_in,
            num_workers_in       => num_workers_in,
            company_in           => company_in,
            flg_status_in        => flg_status_in,
            id_occupation_in     => id_occupation_in,
            id_institution_in    => id_institution_in,
            occupation_desc_in   => occupation_desc_in,
            dt_pat_job_tstz_in   => dt_pat_job_tstz_in,
            id_episode_in        => id_episode_in,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        location_in          IN pat_job.location%TYPE DEFAULT NULL,
        id_patient_in        IN pat_job.id_patient%TYPE DEFAULT NULL,
        year_begin_in        IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_end_in          IN pat_job.year_end%TYPE DEFAULT NULL,
        activity_type_in     IN pat_job.activity_type%TYPE DEFAULT NULL,
        prof_disease_risk_in IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        notes_in             IN pat_job.notes%TYPE DEFAULT NULL,
        num_workers_in       IN pat_job.num_workers%TYPE DEFAULT NULL,
        company_in           IN pat_job.company%TYPE DEFAULT NULL,
        flg_status_in        IN pat_job.flg_status%TYPE DEFAULT NULL,
        id_occupation_in     IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_institution_in    IN pat_job.id_institution%TYPE DEFAULT NULL,
        occupation_desc_in   IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        dt_pat_job_tstz_in   IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        id_episode_in        IN pat_job.id_episode%TYPE DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
        l_pky pat_job.id_pat_job%TYPE := next_key;
    BEGIN
        ins(id_pat_job_in        => l_pky,
            location_in          => location_in,
            id_patient_in        => id_patient_in,
            year_begin_in        => year_begin_in,
            year_end_in          => year_end_in,
            activity_type_in     => activity_type_in,
            prof_disease_risk_in => prof_disease_risk_in,
            notes_in             => notes_in,
            num_workers_in       => num_workers_in,
            company_in           => company_in,
            flg_status_in        => flg_status_in,
            id_occupation_in     => id_occupation_in,
            id_institution_in    => id_institution_in,
            occupation_desc_in   => occupation_desc_in,
            dt_pat_job_tstz_in   => dt_pat_job_tstz_in,
            id_episode_in        => id_episode_in,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
    END ins;

    PROCEDURE ins
    (
        location_in          IN pat_job.location%TYPE DEFAULT NULL,
        id_patient_in        IN pat_job.id_patient%TYPE DEFAULT NULL,
        year_begin_in        IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_end_in          IN pat_job.year_end%TYPE DEFAULT NULL,
        activity_type_in     IN pat_job.activity_type%TYPE DEFAULT NULL,
        prof_disease_risk_in IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        notes_in             IN pat_job.notes%TYPE DEFAULT NULL,
        num_workers_in       IN pat_job.num_workers%TYPE DEFAULT NULL,
        company_in           IN pat_job.company%TYPE DEFAULT NULL,
        flg_status_in        IN pat_job.flg_status%TYPE DEFAULT NULL,
        id_occupation_in     IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_institution_in    IN pat_job.id_institution%TYPE DEFAULT NULL,
        occupation_desc_in   IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        dt_pat_job_tstz_in   IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        id_episode_in        IN pat_job.id_episode%TYPE DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        l_pky    pat_job.id_pat_job%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_job_in        => l_pky,
            location_in          => location_in,
            id_patient_in        => id_patient_in,
            year_begin_in        => year_begin_in,
            year_end_in          => year_end_in,
            activity_type_in     => activity_type_in,
            prof_disease_risk_in => prof_disease_risk_in,
            notes_in             => notes_in,
            num_workers_in       => num_workers_in,
            company_in           => company_in,
            flg_status_in        => flg_status_in,
            id_occupation_in     => id_occupation_in,
            id_institution_in    => id_institution_in,
            occupation_desc_in   => occupation_desc_in,
            dt_pat_job_tstz_in   => dt_pat_job_tstz_in,
            id_episode_in        => id_episode_in,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_job_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO pat_job
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_JOB _' || indx,
                                                        value_in           => rows_in(indx).id_pat_job,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LOCATION _' || indx,
                                                        value_in           => rows_in(indx).location,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'YEAR_BEGIN _' || indx,
                                                        value_in           => rows_in(indx).year_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'YEAR_END _' || indx,
                                                        value_in           => rows_in(indx).year_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ACTIVITY_TYPE _' || indx,
                                                        value_in           => rows_in(indx).activity_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PROF_DISEASE_RISK _' || indx,
                                                        value_in           => rows_in(indx).prof_disease_risk,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_WORKERS _' || indx,
                                                        value_in           => rows_in(indx).num_workers,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'COMPANY _' || indx,
                                                        value_in           => rows_in(indx).company,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_OCCUPATION _' || indx,
                                                        value_in           => rows_in(indx).id_occupation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OCCUPATION_DESC _' || indx,
                                                        value_in           => rows_in(indx).occupation_desc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PAT_JOB_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_pat_job_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PAT_JOB',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_job_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_pat_job_in         IN pat_job.id_pat_job%TYPE,
        location_in           IN pat_job.location%TYPE DEFAULT NULL,
        location_nin          IN BOOLEAN := TRUE,
        id_patient_in         IN pat_job.id_patient%TYPE DEFAULT NULL,
        id_patient_nin        IN BOOLEAN := TRUE,
        year_begin_in         IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_begin_nin        IN BOOLEAN := TRUE,
        year_end_in           IN pat_job.year_end%TYPE DEFAULT NULL,
        year_end_nin          IN BOOLEAN := TRUE,
        activity_type_in      IN pat_job.activity_type%TYPE DEFAULT NULL,
        activity_type_nin     IN BOOLEAN := TRUE,
        prof_disease_risk_in  IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        prof_disease_risk_nin IN BOOLEAN := TRUE,
        notes_in              IN pat_job.notes%TYPE DEFAULT NULL,
        notes_nin             IN BOOLEAN := TRUE,
        num_workers_in        IN pat_job.num_workers%TYPE DEFAULT NULL,
        num_workers_nin       IN BOOLEAN := TRUE,
        company_in            IN pat_job.company%TYPE DEFAULT NULL,
        company_nin           IN BOOLEAN := TRUE,
        flg_status_in         IN pat_job.flg_status%TYPE DEFAULT NULL,
        flg_status_nin        IN BOOLEAN := TRUE,
        id_occupation_in      IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_occupation_nin     IN BOOLEAN := TRUE,
        id_institution_in     IN pat_job.id_institution%TYPE DEFAULT NULL,
        id_institution_nin    IN BOOLEAN := TRUE,
        occupation_desc_in    IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        occupation_desc_nin   IN BOOLEAN := TRUE,
        dt_pat_job_tstz_in    IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        dt_pat_job_tstz_nin   IN BOOLEAN := TRUE,
        id_episode_in         IN pat_job.id_episode%TYPE DEFAULT NULL,
        id_episode_nin        IN BOOLEAN := TRUE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              IN OUT table_varchar
    ) IS
        l_rows_out            table_varchar;
        l_location_n          NUMBER(1);
        l_id_patient_n        NUMBER(1);
        l_year_begin_n        NUMBER(1);
        l_year_end_n          NUMBER(1);
        l_activity_type_n     NUMBER(1);
        l_prof_disease_risk_n NUMBER(1);
        l_notes_n             NUMBER(1);
        l_num_workers_n       NUMBER(1);
        l_company_n           NUMBER(1);
        l_flg_status_n        NUMBER(1);
        l_id_occupation_n     NUMBER(1);
        l_id_institution_n    NUMBER(1);
        l_occupation_desc_n   NUMBER(1);
        l_dt_pat_job_tstz_n   NUMBER(1);
        l_id_episode_n        NUMBER(1);
    BEGIN
    
        l_location_n          := sys.diutil.bool_to_int(location_nin);
        l_id_patient_n        := sys.diutil.bool_to_int(id_patient_nin);
        l_year_begin_n        := sys.diutil.bool_to_int(year_begin_nin);
        l_year_end_n          := sys.diutil.bool_to_int(year_end_nin);
        l_activity_type_n     := sys.diutil.bool_to_int(activity_type_nin);
        l_prof_disease_risk_n := sys.diutil.bool_to_int(prof_disease_risk_nin);
        l_notes_n             := sys.diutil.bool_to_int(notes_nin);
        l_num_workers_n       := sys.diutil.bool_to_int(num_workers_nin);
        l_company_n           := sys.diutil.bool_to_int(company_nin);
        l_flg_status_n        := sys.diutil.bool_to_int(flg_status_nin);
        l_id_occupation_n     := sys.diutil.bool_to_int(id_occupation_nin);
        l_id_institution_n    := sys.diutil.bool_to_int(id_institution_nin);
        l_occupation_desc_n   := sys.diutil.bool_to_int(occupation_desc_nin);
        l_dt_pat_job_tstz_n   := sys.diutil.bool_to_int(dt_pat_job_tstz_nin);
        l_id_episode_n        := sys.diutil.bool_to_int(id_episode_nin);
    
        UPDATE pat_job
           SET location          = decode(l_location_n, 0, location_in, nvl(location_in, location)),
               id_patient        = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               year_begin        = decode(l_year_begin_n, 0, year_begin_in, nvl(year_begin_in, year_begin)),
               year_end          = decode(l_year_end_n, 0, year_end_in, nvl(year_end_in, year_end)),
               activity_type     = decode(l_activity_type_n, 0, activity_type_in, nvl(activity_type_in, activity_type)),
               prof_disease_risk = decode(l_prof_disease_risk_n,
                                          0,
                                          prof_disease_risk_in,
                                          nvl(prof_disease_risk_in, prof_disease_risk)),
               notes             = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               num_workers       = decode(l_num_workers_n, 0, num_workers_in, nvl(num_workers_in, num_workers)),
               company           = decode(l_company_n, 0, company_in, nvl(company_in, company)),
               flg_status        = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_occupation     = decode(l_id_occupation_n, 0, id_occupation_in, nvl(id_occupation_in, id_occupation)),
               id_institution    = decode(l_id_institution_n,
                                          0,
                                          id_institution_in,
                                          nvl(id_institution_in, id_institution)),
               occupation_desc   = decode(l_occupation_desc_n,
                                          0,
                                          occupation_desc_in,
                                          nvl(occupation_desc_in, occupation_desc)),
               dt_pat_job_tstz   = decode(l_dt_pat_job_tstz_n,
                                          0,
                                          dt_pat_job_tstz_in,
                                          nvl(dt_pat_job_tstz_in, dt_pat_job_tstz)),
               id_episode        = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode))
         WHERE id_pat_job = id_pat_job_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_JOB');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    IF l_name = 'PTJOB_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PTJOB_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PTJOB_OCC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OCCUPATION',
                                                        value_in           => id_occupation_in);
                    END IF;
                    IF l_name = 'PTJOB_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pat_job_in         IN pat_job.id_pat_job%TYPE,
        location_in           IN pat_job.location%TYPE DEFAULT NULL,
        location_nin          IN BOOLEAN := TRUE,
        id_patient_in         IN pat_job.id_patient%TYPE DEFAULT NULL,
        id_patient_nin        IN BOOLEAN := TRUE,
        year_begin_in         IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_begin_nin        IN BOOLEAN := TRUE,
        year_end_in           IN pat_job.year_end%TYPE DEFAULT NULL,
        year_end_nin          IN BOOLEAN := TRUE,
        activity_type_in      IN pat_job.activity_type%TYPE DEFAULT NULL,
        activity_type_nin     IN BOOLEAN := TRUE,
        prof_disease_risk_in  IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        prof_disease_risk_nin IN BOOLEAN := TRUE,
        notes_in              IN pat_job.notes%TYPE DEFAULT NULL,
        notes_nin             IN BOOLEAN := TRUE,
        num_workers_in        IN pat_job.num_workers%TYPE DEFAULT NULL,
        num_workers_nin       IN BOOLEAN := TRUE,
        company_in            IN pat_job.company%TYPE DEFAULT NULL,
        company_nin           IN BOOLEAN := TRUE,
        flg_status_in         IN pat_job.flg_status%TYPE DEFAULT NULL,
        flg_status_nin        IN BOOLEAN := TRUE,
        id_occupation_in      IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_occupation_nin     IN BOOLEAN := TRUE,
        id_institution_in     IN pat_job.id_institution%TYPE DEFAULT NULL,
        id_institution_nin    IN BOOLEAN := TRUE,
        occupation_desc_in    IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        occupation_desc_nin   IN BOOLEAN := TRUE,
        dt_pat_job_tstz_in    IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        dt_pat_job_tstz_nin   IN BOOLEAN := TRUE,
        id_episode_in         IN pat_job.id_episode%TYPE DEFAULT NULL,
        id_episode_nin        IN BOOLEAN := TRUE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_job_in         => id_pat_job_in,
            location_in           => location_in,
            location_nin          => location_nin,
            id_patient_in         => id_patient_in,
            id_patient_nin        => id_patient_nin,
            year_begin_in         => year_begin_in,
            year_begin_nin        => year_begin_nin,
            year_end_in           => year_end_in,
            year_end_nin          => year_end_nin,
            activity_type_in      => activity_type_in,
            activity_type_nin     => activity_type_nin,
            prof_disease_risk_in  => prof_disease_risk_in,
            prof_disease_risk_nin => prof_disease_risk_nin,
            notes_in              => notes_in,
            notes_nin             => notes_nin,
            num_workers_in        => num_workers_in,
            num_workers_nin       => num_workers_nin,
            company_in            => company_in,
            company_nin           => company_nin,
            flg_status_in         => flg_status_in,
            flg_status_nin        => flg_status_nin,
            id_occupation_in      => id_occupation_in,
            id_occupation_nin     => id_occupation_nin,
            id_institution_in     => id_institution_in,
            id_institution_nin    => id_institution_nin,
            occupation_desc_in    => occupation_desc_in,
            occupation_desc_nin   => occupation_desc_nin,
            dt_pat_job_tstz_in    => dt_pat_job_tstz_in,
            dt_pat_job_tstz_nin   => dt_pat_job_tstz_nin,
            id_episode_in         => id_episode_in,
            id_episode_nin        => id_episode_nin,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    PROCEDURE upd
    (
        location_in           IN pat_job.location%TYPE DEFAULT NULL,
        location_nin          IN BOOLEAN := TRUE,
        id_patient_in         IN pat_job.id_patient%TYPE DEFAULT NULL,
        id_patient_nin        IN BOOLEAN := TRUE,
        year_begin_in         IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_begin_nin        IN BOOLEAN := TRUE,
        year_end_in           IN pat_job.year_end%TYPE DEFAULT NULL,
        year_end_nin          IN BOOLEAN := TRUE,
        activity_type_in      IN pat_job.activity_type%TYPE DEFAULT NULL,
        activity_type_nin     IN BOOLEAN := TRUE,
        prof_disease_risk_in  IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        prof_disease_risk_nin IN BOOLEAN := TRUE,
        notes_in              IN pat_job.notes%TYPE DEFAULT NULL,
        notes_nin             IN BOOLEAN := TRUE,
        num_workers_in        IN pat_job.num_workers%TYPE DEFAULT NULL,
        num_workers_nin       IN BOOLEAN := TRUE,
        company_in            IN pat_job.company%TYPE DEFAULT NULL,
        company_nin           IN BOOLEAN := TRUE,
        flg_status_in         IN pat_job.flg_status%TYPE DEFAULT NULL,
        flg_status_nin        IN BOOLEAN := TRUE,
        id_occupation_in      IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_occupation_nin     IN BOOLEAN := TRUE,
        id_institution_in     IN pat_job.id_institution%TYPE DEFAULT NULL,
        id_institution_nin    IN BOOLEAN := TRUE,
        occupation_desc_in    IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        occupation_desc_nin   IN BOOLEAN := TRUE,
        dt_pat_job_tstz_in    IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        dt_pat_job_tstz_nin   IN BOOLEAN := TRUE,
        id_episode_in         IN pat_job.id_episode%TYPE DEFAULT NULL,
        id_episode_nin        IN BOOLEAN := TRUE,
        where_in              VARCHAR2 DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              IN OUT table_varchar
    ) IS
        l_sql                 VARCHAR2(32767);
        l_rows_out            table_varchar;
        l_location_n          NUMBER(1);
        l_id_patient_n        NUMBER(1);
        l_year_begin_n        NUMBER(1);
        l_year_end_n          NUMBER(1);
        l_activity_type_n     NUMBER(1);
        l_prof_disease_risk_n NUMBER(1);
        l_notes_n             NUMBER(1);
        l_num_workers_n       NUMBER(1);
        l_company_n           NUMBER(1);
        l_flg_status_n        NUMBER(1);
        l_id_occupation_n     NUMBER(1);
        l_id_institution_n    NUMBER(1);
        l_occupation_desc_n   NUMBER(1);
        l_dt_pat_job_tstz_n   NUMBER(1);
        l_id_episode_n        NUMBER(1);
        id_pat_job_in         pat_job.id_pat_job%TYPE;
    BEGIN
    
        l_location_n          := sys.diutil.bool_to_int(location_nin);
        l_id_patient_n        := sys.diutil.bool_to_int(id_patient_nin);
        l_year_begin_n        := sys.diutil.bool_to_int(year_begin_nin);
        l_year_end_n          := sys.diutil.bool_to_int(year_end_nin);
        l_activity_type_n     := sys.diutil.bool_to_int(activity_type_nin);
        l_prof_disease_risk_n := sys.diutil.bool_to_int(prof_disease_risk_nin);
        l_notes_n             := sys.diutil.bool_to_int(notes_nin);
        l_num_workers_n       := sys.diutil.bool_to_int(num_workers_nin);
        l_company_n           := sys.diutil.bool_to_int(company_nin);
        l_flg_status_n        := sys.diutil.bool_to_int(flg_status_nin);
        l_id_occupation_n     := sys.diutil.bool_to_int(id_occupation_nin);
        l_id_institution_n    := sys.diutil.bool_to_int(id_institution_nin);
        l_occupation_desc_n   := sys.diutil.bool_to_int(occupation_desc_nin);
        l_dt_pat_job_tstz_n   := sys.diutil.bool_to_int(dt_pat_job_tstz_nin);
        l_id_episode_n        := sys.diutil.bool_to_int(id_episode_nin);
    
        l_sql := 'UPDATE PAT_JOB SET ' || ' LOCATION = decode (' || l_location_n ||
                 ',0,:location_in, NVL (:location_in, LOCATION)) ' || ',' || ' ID_PATIENT = decode (' || l_id_patient_n ||
                 ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' || ' YEAR_BEGIN = decode (' ||
                 l_year_begin_n || ',0,:year_begin_in, NVL (:year_begin_in, YEAR_BEGIN)) ' || ',' ||
                 ' YEAR_END = decode (' || l_year_end_n || ',0,:year_end_in, NVL (:year_end_in, YEAR_END)) ' || ',' ||
                 ' ACTIVITY_TYPE = decode (' || l_activity_type_n ||
                 ',0,:activity_type_in, NVL (:activity_type_in, ACTIVITY_TYPE)) ' || ',' ||
                 ' PROF_DISEASE_RISK = decode (' || l_prof_disease_risk_n ||
                 ',0,:prof_disease_risk_in, NVL (:prof_disease_risk_in, PROF_DISEASE_RISK)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' NUM_WORKERS = decode (' || l_num_workers_n ||
                 ',0,:num_workers_in, NVL (:num_workers_in, NUM_WORKERS)) ' || ',' || ' COMPANY = decode (' ||
                 l_company_n || ',0,:company_in, NVL (:company_in, COMPANY)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_OCCUPATION = decode (' || l_id_occupation_n ||
                 ',0,:id_occupation_in, NVL (:id_occupation_in, ID_OCCUPATION)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' OCCUPATION_DESC = decode (' || l_occupation_desc_n ||
                 ',0,:occupation_desc_in, NVL (:occupation_desc_in, OCCUPATION_DESC)) ' || ',' ||
                 ' DT_PAT_JOB_TSTZ = decode (' || l_dt_pat_job_tstz_n ||
                 ',0,:dt_pat_job_tstz_in, NVL (:dt_pat_job_tstz_in, DT_PAT_JOB_TSTZ)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN location_in, id_patient_in, year_begin_in, year_end_in, activity_type_in, prof_disease_risk_in, notes_in, num_workers_in, company_in, flg_status_in, id_occupation_in, id_institution_in, occupation_desc_in, dt_pat_job_tstz_in, id_episode_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_JOB');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    IF l_name = 'PTJOB_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PTJOB_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PTJOB_OCC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OCCUPATION',
                                                        value_in           => id_occupation_in);
                    END IF;
                    IF l_name = 'PTJOB_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        location_in           IN pat_job.location%TYPE DEFAULT NULL,
        location_nin          IN BOOLEAN := TRUE,
        id_patient_in         IN pat_job.id_patient%TYPE DEFAULT NULL,
        id_patient_nin        IN BOOLEAN := TRUE,
        year_begin_in         IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_begin_nin        IN BOOLEAN := TRUE,
        year_end_in           IN pat_job.year_end%TYPE DEFAULT NULL,
        year_end_nin          IN BOOLEAN := TRUE,
        activity_type_in      IN pat_job.activity_type%TYPE DEFAULT NULL,
        activity_type_nin     IN BOOLEAN := TRUE,
        prof_disease_risk_in  IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        prof_disease_risk_nin IN BOOLEAN := TRUE,
        notes_in              IN pat_job.notes%TYPE DEFAULT NULL,
        notes_nin             IN BOOLEAN := TRUE,
        num_workers_in        IN pat_job.num_workers%TYPE DEFAULT NULL,
        num_workers_nin       IN BOOLEAN := TRUE,
        company_in            IN pat_job.company%TYPE DEFAULT NULL,
        company_nin           IN BOOLEAN := TRUE,
        flg_status_in         IN pat_job.flg_status%TYPE DEFAULT NULL,
        flg_status_nin        IN BOOLEAN := TRUE,
        id_occupation_in      IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_occupation_nin     IN BOOLEAN := TRUE,
        id_institution_in     IN pat_job.id_institution%TYPE DEFAULT NULL,
        id_institution_nin    IN BOOLEAN := TRUE,
        occupation_desc_in    IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        occupation_desc_nin   IN BOOLEAN := TRUE,
        dt_pat_job_tstz_in    IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        dt_pat_job_tstz_nin   IN BOOLEAN := TRUE,
        id_episode_in         IN pat_job.id_episode%TYPE DEFAULT NULL,
        id_episode_nin        IN BOOLEAN := TRUE,
        where_in              VARCHAR2 DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(location_in           => location_in,
            location_nin          => location_nin,
            id_patient_in         => id_patient_in,
            id_patient_nin        => id_patient_nin,
            year_begin_in         => year_begin_in,
            year_begin_nin        => year_begin_nin,
            year_end_in           => year_end_in,
            year_end_nin          => year_end_nin,
            activity_type_in      => activity_type_in,
            activity_type_nin     => activity_type_nin,
            prof_disease_risk_in  => prof_disease_risk_in,
            prof_disease_risk_nin => prof_disease_risk_nin,
            notes_in              => notes_in,
            notes_nin             => notes_nin,
            num_workers_in        => num_workers_in,
            num_workers_nin       => num_workers_nin,
            company_in            => company_in,
            company_nin           => company_nin,
            flg_status_in         => flg_status_in,
            flg_status_nin        => flg_status_nin,
            id_occupation_in      => id_occupation_in,
            id_occupation_nin     => id_occupation_nin,
            id_institution_in     => id_institution_in,
            id_institution_nin    => id_institution_nin,
            occupation_desc_in    => occupation_desc_in,
            occupation_desc_nin   => occupation_desc_nin,
            dt_pat_job_tstz_in    => dt_pat_job_tstz_in,
            dt_pat_job_tstz_nin   => dt_pat_job_tstz_nin,
            id_episode_in         => id_episode_in,
            id_episode_nin        => id_episode_nin,
            where_in              => where_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_job%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_job_in        => rec_in.id_pat_job,
            location_in          => rec_in.location,
            id_patient_in        => rec_in.id_patient,
            year_begin_in        => rec_in.year_begin,
            year_end_in          => rec_in.year_end,
            activity_type_in     => rec_in.activity_type,
            prof_disease_risk_in => rec_in.prof_disease_risk,
            notes_in             => rec_in.notes,
            num_workers_in       => rec_in.num_workers,
            company_in           => rec_in.company,
            flg_status_in        => rec_in.flg_status,
            id_occupation_in     => rec_in.id_occupation,
            id_institution_in    => rec_in.id_institution,
            occupation_desc_in   => rec_in.occupation_desc,
            dt_pat_job_tstz_in   => rec_in.dt_pat_job_tstz,
            id_episode_in        => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_job%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_job_in        => rec_in.id_pat_job,
            location_in          => rec_in.location,
            id_patient_in        => rec_in.id_patient,
            year_begin_in        => rec_in.year_begin,
            year_end_in          => rec_in.year_end,
            activity_type_in     => rec_in.activity_type,
            prof_disease_risk_in => rec_in.prof_disease_risk,
            notes_in             => rec_in.notes,
            num_workers_in       => rec_in.num_workers,
            company_in           => rec_in.company,
            flg_status_in        => rec_in.flg_status,
            id_occupation_in     => rec_in.id_occupation,
            id_institution_in    => rec_in.id_institution,
            occupation_desc_in   => rec_in.occupation_desc,
            dt_pat_job_tstz_in   => rec_in.dt_pat_job_tstz,
            id_episode_in        => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_pat_job_in        IN pat_job.id_pat_job%TYPE,
        location_in          IN pat_job.location%TYPE DEFAULT NULL,
        id_patient_in        IN pat_job.id_patient%TYPE DEFAULT NULL,
        year_begin_in        IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_end_in          IN pat_job.year_end%TYPE DEFAULT NULL,
        activity_type_in     IN pat_job.activity_type%TYPE DEFAULT NULL,
        prof_disease_risk_in IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        notes_in             IN pat_job.notes%TYPE DEFAULT NULL,
        num_workers_in       IN pat_job.num_workers%TYPE DEFAULT NULL,
        company_in           IN pat_job.company%TYPE DEFAULT NULL,
        flg_status_in        IN pat_job.flg_status%TYPE DEFAULT NULL,
        id_occupation_in     IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_institution_in    IN pat_job.id_institution%TYPE DEFAULT NULL,
        occupation_desc_in   IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        dt_pat_job_tstz_in   IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        id_episode_in        IN pat_job.id_episode%TYPE DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_job_in        => id_pat_job_in,
            location_in          => location_in,
            id_patient_in        => id_patient_in,
            year_begin_in        => year_begin_in,
            year_end_in          => year_end_in,
            activity_type_in     => activity_type_in,
            prof_disease_risk_in => prof_disease_risk_in,
            notes_in             => notes_in,
            num_workers_in       => num_workers_in,
            company_in           => company_in,
            flg_status_in        => flg_status_in,
            id_occupation_in     => id_occupation_in,
            id_institution_in    => id_institution_in,
            occupation_desc_in   => occupation_desc_in,
            dt_pat_job_tstz_in   => dt_pat_job_tstz_in,
            id_episode_in        => id_episode_in,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_pat_job_in        => id_pat_job_in,
                location_in          => location_in,
                id_patient_in        => id_patient_in,
                year_begin_in        => year_begin_in,
                year_end_in          => year_end_in,
                activity_type_in     => activity_type_in,
                prof_disease_risk_in => prof_disease_risk_in,
                notes_in             => notes_in,
                num_workers_in       => num_workers_in,
                company_in           => company_in,
                flg_status_in        => flg_status_in,
                id_occupation_in     => id_occupation_in,
                id_institution_in    => id_institution_in,
                occupation_desc_in   => occupation_desc_in,
                dt_pat_job_tstz_in   => dt_pat_job_tstz_in,
                id_episode_in        => id_episode_in,
                handle_error_in      => handle_error_in,
                rows_out             => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_pat_job_in        IN pat_job.id_pat_job%TYPE,
        location_in          IN pat_job.location%TYPE DEFAULT NULL,
        id_patient_in        IN pat_job.id_patient%TYPE DEFAULT NULL,
        year_begin_in        IN pat_job.year_begin%TYPE DEFAULT NULL,
        year_end_in          IN pat_job.year_end%TYPE DEFAULT NULL,
        activity_type_in     IN pat_job.activity_type%TYPE DEFAULT NULL,
        prof_disease_risk_in IN pat_job.prof_disease_risk%TYPE DEFAULT NULL,
        notes_in             IN pat_job.notes%TYPE DEFAULT NULL,
        num_workers_in       IN pat_job.num_workers%TYPE DEFAULT NULL,
        company_in           IN pat_job.company%TYPE DEFAULT NULL,
        flg_status_in        IN pat_job.flg_status%TYPE DEFAULT NULL,
        id_occupation_in     IN pat_job.id_occupation%TYPE DEFAULT NULL,
        id_institution_in    IN pat_job.id_institution%TYPE DEFAULT NULL,
        occupation_desc_in   IN pat_job.occupation_desc%TYPE DEFAULT NULL,
        dt_pat_job_tstz_in   IN pat_job.dt_pat_job_tstz%TYPE DEFAULT NULL,
        id_episode_in        IN pat_job.id_episode%TYPE DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_pat_job_in,
                location_in,
                id_patient_in,
                year_begin_in,
                year_end_in,
                activity_type_in,
                prof_disease_risk_in,
                notes_in,
                num_workers_in,
                company_in,
                flg_status_in,
                id_occupation_in,
                id_institution_in,
                occupation_desc_in,
                dt_pat_job_tstz_in,
                id_episode_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pat_job_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_pat_job        id_pat_job_cc;
        l_location          location_cc;
        l_id_patient        id_patient_cc;
        l_year_begin        year_begin_cc;
        l_year_end          year_end_cc;
        l_activity_type     activity_type_cc;
        l_prof_disease_risk prof_disease_risk_cc;
        l_notes             notes_cc;
        l_num_workers       num_workers_cc;
        l_company           company_cc;
        l_flg_status        flg_status_cc;
        l_id_occupation     id_occupation_cc;
        l_id_institution    id_institution_cc;
        l_occupation_desc   occupation_desc_cc;
        l_dt_pat_job_tstz   dt_pat_job_tstz_cc;
        l_id_episode        id_episode_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_pat_job(i) := col_in(i).id_pat_job;
            l_location(i) := col_in(i).location;
            l_id_patient(i) := col_in(i).id_patient;
            l_year_begin(i) := col_in(i).year_begin;
            l_year_end(i) := col_in(i).year_end;
            l_activity_type(i) := col_in(i).activity_type;
            l_prof_disease_risk(i) := col_in(i).prof_disease_risk;
            l_notes(i) := col_in(i).notes;
            l_num_workers(i) := col_in(i).num_workers;
            l_company(i) := col_in(i).company;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_occupation(i) := col_in(i).id_occupation;
            l_id_institution(i) := col_in(i).id_institution;
            l_occupation_desc(i) := col_in(i).occupation_desc;
            l_dt_pat_job_tstz(i) := col_in(i).dt_pat_job_tstz;
            l_id_episode(i) := col_in(i).id_episode;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_job
                   SET location          = nvl(l_location(i), location),
                       id_patient        = nvl(l_id_patient(i), id_patient),
                       year_begin        = nvl(l_year_begin(i), year_begin),
                       year_end          = nvl(l_year_end(i), year_end),
                       activity_type     = nvl(l_activity_type(i), activity_type),
                       prof_disease_risk = nvl(l_prof_disease_risk(i), prof_disease_risk),
                       notes             = nvl(l_notes(i), notes),
                       num_workers       = nvl(l_num_workers(i), num_workers),
                       company           = nvl(l_company(i), company),
                       flg_status        = nvl(l_flg_status(i), flg_status),
                       id_occupation     = nvl(l_id_occupation(i), id_occupation),
                       id_institution    = nvl(l_id_institution(i), id_institution),
                       occupation_desc   = nvl(l_occupation_desc(i), occupation_desc),
                       dt_pat_job_tstz   = nvl(l_dt_pat_job_tstz(i), dt_pat_job_tstz),
                       id_episode        = nvl(l_id_episode(i), id_episode)
                 WHERE id_pat_job = l_id_pat_job(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_job
                   SET location          = l_location(i),
                       id_patient        = l_id_patient(i),
                       year_begin        = l_year_begin(i),
                       year_end          = l_year_end(i),
                       activity_type     = l_activity_type(i),
                       prof_disease_risk = l_prof_disease_risk(i),
                       notes             = l_notes(i),
                       num_workers       = l_num_workers(i),
                       company           = l_company(i),
                       flg_status        = l_flg_status(i),
                       id_occupation     = l_id_occupation(i),
                       id_institution    = l_id_institution(i),
                       occupation_desc   = l_occupation_desc(i),
                       dt_pat_job_tstz   = l_dt_pat_job_tstz(i),
                       id_episode        = l_id_episode(i)
                 WHERE id_pat_job = l_id_pat_job(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pat_job_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PAT_JOB
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PAT_JOB
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_JOB set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PAT_JOB set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_pat_job_in   IN pat_job.id_pat_job%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_job
         WHERE id_pat_job = id_pat_job_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_pat_job_in   IN pat_job.id_pat_job%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_pat_job_in => id_pat_job_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PAT_JOB
    PROCEDURE del_id_pat_job
    (
        id_pat_job_in   IN pat_job.id_pat_job%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_job
         WHERE id_pat_job = id_pat_job_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_pat_job;

    -- Delete all rows for primary key column ID_PAT_JOB
    PROCEDURE del_id_pat_job
    (
        id_pat_job_in   IN pat_job.id_pat_job%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_pat_job(id_pat_job_in => id_pat_job_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_pat_job;

    PROCEDURE del_ptjob_epis_fk
    (
        id_episode_in   IN pat_job.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_job
         WHERE id_episode = del_ptjob_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptjob_epis_fk;

    PROCEDURE del_ptjob_epis_fk
    (
        id_episode_in   IN pat_job.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptjob_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptjob_epis_fk;

    PROCEDURE del_ptjob_inst_fk
    (
        id_institution_in IN pat_job.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_job
         WHERE id_institution = del_ptjob_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptjob_inst_fk;

    PROCEDURE del_ptjob_inst_fk
    (
        id_institution_in IN pat_job.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptjob_inst_fk(id_institution_in => id_institution_in,
                          handle_error_in   => handle_error_in,
                          rows_out          => rows_out);
    END del_ptjob_inst_fk;

    PROCEDURE del_ptjob_occ_fk
    (
        id_occupation_in IN pat_job.id_occupation%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_job
         WHERE id_occupation = del_ptjob_occ_fk.id_occupation_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptjob_occ_fk;

    PROCEDURE del_ptjob_occ_fk
    (
        id_occupation_in IN pat_job.id_occupation%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptjob_occ_fk(id_occupation_in => id_occupation_in,
                         handle_error_in  => handle_error_in,
                         rows_out         => rows_out);
    END del_ptjob_occ_fk;

    PROCEDURE del_ptjob_pat_fk
    (
        id_patient_in   IN pat_job.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_job
         WHERE id_patient = del_ptjob_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptjob_pat_fk;

    PROCEDURE del_ptjob_pat_fk
    (
        id_patient_in   IN pat_job.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptjob_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptjob_pat_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PAT_JOB';
        ELSE
            RETURN 'DELETE FROM PAT_JOB WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_JOB');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_JOB');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pat_job_inout IN OUT pat_job%ROWTYPE) IS
    BEGIN
        pat_job_inout.id_pat_job        := NULL;
        pat_job_inout.location          := NULL;
        pat_job_inout.id_patient        := NULL;
        pat_job_inout.year_begin        := NULL;
        pat_job_inout.year_end          := NULL;
        pat_job_inout.activity_type     := NULL;
        pat_job_inout.prof_disease_risk := NULL;
        pat_job_inout.notes             := NULL;
        pat_job_inout.num_workers       := NULL;
        pat_job_inout.company           := NULL;
        pat_job_inout.flg_status        := NULL;
        pat_job_inout.id_occupation     := NULL;
        pat_job_inout.id_institution    := NULL;
        pat_job_inout.occupation_desc   := NULL;
        pat_job_inout.dt_pat_job_tstz   := NULL;
        pat_job_inout.id_episode        := NULL;
    END initrec;

    FUNCTION initrec RETURN pat_job%ROWTYPE IS
        l_pat_job pat_job%ROWTYPE;
    BEGIN
        RETURN l_pat_job;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pat_job_tc IS
        data pat_job_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pat_job
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pat_job_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pat_job_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pat_job;
/
