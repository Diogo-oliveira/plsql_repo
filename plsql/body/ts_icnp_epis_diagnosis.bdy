/*-- Last Change Revision: $Rev: 2028212 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:29 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_icnp_epis_diagnosis
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Setembro 28, 2010 16:55:44
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_icnp_epis_diag_in      IN icnp_epis_diagnosis.id_icnp_epis_diag%TYPE,
        id_composition_in         IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_professional_in        IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        flg_status_in             IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        id_episode_in             IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        notes_in                  IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        id_parent_in              IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_prof_close_in          IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        notes_close_in            IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        id_patient_in             IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_in IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_in          IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        id_visit_in               IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_epis_type_in           IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        flg_executions_in         IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        create_user_in            IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_time_in            IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_time_in            IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        icnp_compo_reeval_in      IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        id_suspend_reason_in      IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_prof_in        IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        suspend_notes_in          IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        dt_suspend_in             IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_prof_in         IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        cancel_notes_in           IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO icnp_epis_diagnosis
            (id_icnp_epis_diag,
             id_composition,
             id_professional,
             flg_status,
             id_episode,
             notes,
             id_parent,
             id_prof_close,
             notes_close,
             id_patient,
             dt_icnp_epis_diag_tstz,
             dt_close_tstz,
             id_visit,
             id_epis_type,
             flg_executions,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             icnp_compo_reeval,
             id_prof_last_update,
             dt_last_update,
             id_suspend_reason,
             id_suspend_prof,
             suspend_notes,
             dt_suspend,
             id_cancel_reason,
             id_cancel_prof,
             cancel_notes,
             dt_cancel)
        VALUES
            (id_icnp_epis_diag_in,
             id_composition_in,
             id_professional_in,
             flg_status_in,
             id_episode_in,
             notes_in,
             id_parent_in,
             id_prof_close_in,
             notes_close_in,
             id_patient_in,
             dt_icnp_epis_diag_tstz_in,
             dt_close_tstz_in,
             id_visit_in,
             id_epis_type_in,
             flg_executions_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             icnp_compo_reeval_in,
             id_prof_last_update_in,
             dt_last_update_in,
             id_suspend_reason_in,
             id_suspend_prof_in,
             suspend_notes_in,
             dt_suspend_in,
             id_cancel_reason_in,
             id_cancel_prof_in,
             cancel_notes_in,
             dt_cancel_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    IF l_name = 'EIPD_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'EIPD_CRE_SUSP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SUSPEND_REASON',
                                                        value_in           => id_suspend_reason_in);
                    END IF;
                    IF l_name = 'EIPD_EIPD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PARENT',
                                                        value_in           => id_parent_in);
                    END IF;
                    IF l_name = 'EIPD_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EIPD_EPTY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_TYPE',
                                                        value_in           => id_epis_type_in);
                    END IF;
                    IF l_name = 'EIPD_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_CANCELS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_PROF',
                                                        value_in           => id_cancel_prof_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_CANC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CLOSE',
                                                        value_in           => id_prof_close_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_SUSP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SUSPEND_PROF',
                                                        value_in           => id_suspend_prof_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_UPD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_LAST_UPDATE',
                                                        value_in           => id_prof_last_update_in);
                    END IF;
                    IF l_name = 'EIPD_VIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    IF l_name = 'IEIPD_ICN2_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ICNP_COMPO_REEVAL',
                                                        value_in           => icnp_compo_reeval_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_icnp_epis_diag_in      IN icnp_epis_diagnosis.id_icnp_epis_diag%TYPE,
        id_composition_in         IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_professional_in        IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        flg_status_in             IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        id_episode_in             IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        notes_in                  IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        id_parent_in              IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_prof_close_in          IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        notes_close_in            IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        id_patient_in             IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_in IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_in          IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        id_visit_in               IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_epis_type_in           IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        flg_executions_in         IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        create_user_in            IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_time_in            IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_time_in            IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        icnp_compo_reeval_in      IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        id_suspend_reason_in      IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_prof_in        IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        suspend_notes_in          IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        dt_suspend_in             IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_prof_in         IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        cancel_notes_in           IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_icnp_epis_diag_in      => id_icnp_epis_diag_in,
            id_composition_in         => id_composition_in,
            id_professional_in        => id_professional_in,
            flg_status_in             => flg_status_in,
            id_episode_in             => id_episode_in,
            notes_in                  => notes_in,
            id_parent_in              => id_parent_in,
            id_prof_close_in          => id_prof_close_in,
            notes_close_in            => notes_close_in,
            id_patient_in             => id_patient_in,
            dt_icnp_epis_diag_tstz_in => dt_icnp_epis_diag_tstz_in,
            dt_close_tstz_in          => dt_close_tstz_in,
            id_visit_in               => id_visit_in,
            id_epis_type_in           => id_epis_type_in,
            flg_executions_in         => flg_executions_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            icnp_compo_reeval_in      => icnp_compo_reeval_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_suspend_reason_in      => id_suspend_reason_in,
            id_suspend_prof_in        => id_suspend_prof_in,
            suspend_notes_in          => suspend_notes_in,
            dt_suspend_in             => dt_suspend_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_prof_in         => id_cancel_prof_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN icnp_epis_diagnosis%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec icnp_epis_diagnosis%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_icnp_epis_diag := next_key(sequence_in);
        END IF;
        ins(id_icnp_epis_diag_in      => l_rec.id_icnp_epis_diag,
            id_composition_in         => l_rec.id_composition,
            id_professional_in        => l_rec.id_professional,
            flg_status_in             => l_rec.flg_status,
            id_episode_in             => l_rec.id_episode,
            notes_in                  => l_rec.notes,
            id_parent_in              => l_rec.id_parent,
            id_prof_close_in          => l_rec.id_prof_close,
            notes_close_in            => l_rec.notes_close,
            id_patient_in             => l_rec.id_patient,
            dt_icnp_epis_diag_tstz_in => l_rec.dt_icnp_epis_diag_tstz,
            dt_close_tstz_in          => l_rec.dt_close_tstz,
            id_visit_in               => l_rec.id_visit,
            id_epis_type_in           => l_rec.id_epis_type,
            flg_executions_in         => l_rec.flg_executions,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            icnp_compo_reeval_in      => l_rec.icnp_compo_reeval,
            id_prof_last_update_in    => l_rec.id_prof_last_update,
            dt_last_update_in         => l_rec.dt_last_update,
            id_suspend_reason_in      => l_rec.id_suspend_reason,
            id_suspend_prof_in        => l_rec.id_suspend_prof,
            suspend_notes_in          => l_rec.suspend_notes,
            dt_suspend_in             => l_rec.dt_suspend,
            id_cancel_reason_in       => l_rec.id_cancel_reason,
            id_cancel_prof_in         => l_rec.id_cancel_prof,
            cancel_notes_in           => l_rec.cancel_notes,
            dt_cancel_in              => l_rec.dt_cancel,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN icnp_epis_diagnosis%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN icnp_epis_diagnosis.id_icnp_epis_diag%TYPE
    
     IS
        retval icnp_epis_diagnosis.id_icnp_epis_diag%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_icnp_epis_diagnosis.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_ICNP_EPIS_DIAGNOSIS'));
    END next_key;

    PROCEDURE ins
    (
        id_composition_in         IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_professional_in        IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        flg_status_in             IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        id_episode_in             IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        notes_in                  IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        id_parent_in              IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_prof_close_in          IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        notes_close_in            IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        id_patient_in             IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_in IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_in          IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        id_visit_in               IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_epis_type_in           IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        flg_executions_in         IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        create_user_in            IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_time_in            IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_time_in            IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        icnp_compo_reeval_in      IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        id_suspend_reason_in      IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_prof_in        IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        suspend_notes_in          IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        dt_suspend_in             IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_prof_in         IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        cancel_notes_in           IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        id_icnp_epis_diag_out     IN OUT icnp_epis_diagnosis.id_icnp_epis_diag%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
        l_pky icnp_epis_diagnosis.id_icnp_epis_diag%TYPE := next_key;
    BEGIN
        ins(id_icnp_epis_diag_in      => l_pky,
            id_composition_in         => id_composition_in,
            id_professional_in        => id_professional_in,
            flg_status_in             => flg_status_in,
            id_episode_in             => id_episode_in,
            notes_in                  => notes_in,
            id_parent_in              => id_parent_in,
            id_prof_close_in          => id_prof_close_in,
            notes_close_in            => notes_close_in,
            id_patient_in             => id_patient_in,
            dt_icnp_epis_diag_tstz_in => dt_icnp_epis_diag_tstz_in,
            dt_close_tstz_in          => dt_close_tstz_in,
            id_visit_in               => id_visit_in,
            id_epis_type_in           => id_epis_type_in,
            flg_executions_in         => flg_executions_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            icnp_compo_reeval_in      => icnp_compo_reeval_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_suspend_reason_in      => id_suspend_reason_in,
            id_suspend_prof_in        => id_suspend_prof_in,
            suspend_notes_in          => suspend_notes_in,
            dt_suspend_in             => dt_suspend_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_prof_in         => id_cancel_prof_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        id_icnp_epis_diag_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_composition_in         IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_professional_in        IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        flg_status_in             IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        id_episode_in             IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        notes_in                  IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        id_parent_in              IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_prof_close_in          IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        notes_close_in            IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        id_patient_in             IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_in IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_in          IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        id_visit_in               IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_epis_type_in           IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        flg_executions_in         IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        create_user_in            IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_time_in            IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_time_in            IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        icnp_compo_reeval_in      IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        id_suspend_reason_in      IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_prof_in        IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        suspend_notes_in          IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        dt_suspend_in             IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_prof_in         IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        cancel_notes_in           IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        id_icnp_epis_diag_out     IN OUT icnp_epis_diagnosis.id_icnp_epis_diag%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_composition_in         => id_composition_in,
            id_professional_in        => id_professional_in,
            flg_status_in             => flg_status_in,
            id_episode_in             => id_episode_in,
            notes_in                  => notes_in,
            id_parent_in              => id_parent_in,
            id_prof_close_in          => id_prof_close_in,
            notes_close_in            => notes_close_in,
            id_patient_in             => id_patient_in,
            dt_icnp_epis_diag_tstz_in => dt_icnp_epis_diag_tstz_in,
            dt_close_tstz_in          => dt_close_tstz_in,
            id_visit_in               => id_visit_in,
            id_epis_type_in           => id_epis_type_in,
            flg_executions_in         => flg_executions_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            icnp_compo_reeval_in      => icnp_compo_reeval_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_suspend_reason_in      => id_suspend_reason_in,
            id_suspend_prof_in        => id_suspend_prof_in,
            suspend_notes_in          => suspend_notes_in,
            dt_suspend_in             => dt_suspend_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_prof_in         => id_cancel_prof_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            id_icnp_epis_diag_out     => id_icnp_epis_diag_out,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    FUNCTION ins
    (
        id_composition_in         IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_professional_in        IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        flg_status_in             IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        id_episode_in             IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        notes_in                  IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        id_parent_in              IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_prof_close_in          IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        notes_close_in            IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        id_patient_in             IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_in IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_in          IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        id_visit_in               IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_epis_type_in           IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        flg_executions_in         IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        create_user_in            IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_time_in            IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_time_in            IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        icnp_compo_reeval_in      IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        id_suspend_reason_in      IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_prof_in        IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        suspend_notes_in          IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        dt_suspend_in             IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_prof_in         IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        cancel_notes_in           IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) RETURN icnp_epis_diagnosis.id_icnp_epis_diag%TYPE IS
        l_pky icnp_epis_diagnosis.id_icnp_epis_diag%TYPE := next_key;
    BEGIN
        ins(id_icnp_epis_diag_in      => l_pky,
            id_composition_in         => id_composition_in,
            id_professional_in        => id_professional_in,
            flg_status_in             => flg_status_in,
            id_episode_in             => id_episode_in,
            notes_in                  => notes_in,
            id_parent_in              => id_parent_in,
            id_prof_close_in          => id_prof_close_in,
            notes_close_in            => notes_close_in,
            id_patient_in             => id_patient_in,
            dt_icnp_epis_diag_tstz_in => dt_icnp_epis_diag_tstz_in,
            dt_close_tstz_in          => dt_close_tstz_in,
            id_visit_in               => id_visit_in,
            id_epis_type_in           => id_epis_type_in,
            flg_executions_in         => flg_executions_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            icnp_compo_reeval_in      => icnp_compo_reeval_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_suspend_reason_in      => id_suspend_reason_in,
            id_suspend_prof_in        => id_suspend_prof_in,
            suspend_notes_in          => suspend_notes_in,
            dt_suspend_in             => dt_suspend_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_prof_in         => id_cancel_prof_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_composition_in         IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_professional_in        IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        flg_status_in             IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        id_episode_in             IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        notes_in                  IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        id_parent_in              IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_prof_close_in          IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        notes_close_in            IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        id_patient_in             IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_in IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_in          IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        id_visit_in               IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_epis_type_in           IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        flg_executions_in         IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        create_user_in            IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_time_in            IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_time_in            IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        icnp_compo_reeval_in      IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        id_suspend_reason_in      IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_prof_in        IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        suspend_notes_in          IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        dt_suspend_in             IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_prof_in         IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        cancel_notes_in           IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) RETURN icnp_epis_diagnosis.id_icnp_epis_diag%TYPE IS
        l_pky    icnp_epis_diagnosis.id_icnp_epis_diag%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_icnp_epis_diag_in      => l_pky,
            id_composition_in         => id_composition_in,
            id_professional_in        => id_professional_in,
            flg_status_in             => flg_status_in,
            id_episode_in             => id_episode_in,
            notes_in                  => notes_in,
            id_parent_in              => id_parent_in,
            id_prof_close_in          => id_prof_close_in,
            notes_close_in            => notes_close_in,
            id_patient_in             => id_patient_in,
            dt_icnp_epis_diag_tstz_in => dt_icnp_epis_diag_tstz_in,
            dt_close_tstz_in          => dt_close_tstz_in,
            id_visit_in               => id_visit_in,
            id_epis_type_in           => id_epis_type_in,
            flg_executions_in         => flg_executions_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            icnp_compo_reeval_in      => icnp_compo_reeval_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_suspend_reason_in      => id_suspend_reason_in,
            id_suspend_prof_in        => id_suspend_prof_in,
            suspend_notes_in          => suspend_notes_in,
            dt_suspend_in             => dt_suspend_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_prof_in         => id_cancel_prof_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_composition_in         IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_professional_in        IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        flg_status_in             IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        id_episode_in             IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        notes_in                  IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        id_parent_in              IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_prof_close_in          IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        notes_close_in            IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        id_patient_in             IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_in IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_in          IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        id_visit_in               IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_epis_type_in           IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        flg_executions_in         IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        create_user_in            IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_time_in            IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_time_in            IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        icnp_compo_reeval_in      IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        id_suspend_reason_in      IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_prof_in        IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        suspend_notes_in          IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        dt_suspend_in             IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_prof_in         IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        cancel_notes_in           IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
        l_pky icnp_epis_diagnosis.id_icnp_epis_diag%TYPE := next_key;
    BEGIN
        ins(id_icnp_epis_diag_in      => l_pky,
            id_composition_in         => id_composition_in,
            id_professional_in        => id_professional_in,
            flg_status_in             => flg_status_in,
            id_episode_in             => id_episode_in,
            notes_in                  => notes_in,
            id_parent_in              => id_parent_in,
            id_prof_close_in          => id_prof_close_in,
            notes_close_in            => notes_close_in,
            id_patient_in             => id_patient_in,
            dt_icnp_epis_diag_tstz_in => dt_icnp_epis_diag_tstz_in,
            dt_close_tstz_in          => dt_close_tstz_in,
            id_visit_in               => id_visit_in,
            id_epis_type_in           => id_epis_type_in,
            flg_executions_in         => flg_executions_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            icnp_compo_reeval_in      => icnp_compo_reeval_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_suspend_reason_in      => id_suspend_reason_in,
            id_suspend_prof_in        => id_suspend_prof_in,
            suspend_notes_in          => suspend_notes_in,
            dt_suspend_in             => dt_suspend_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_prof_in         => id_cancel_prof_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_composition_in         IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_professional_in        IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        flg_status_in             IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        id_episode_in             IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        notes_in                  IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        id_parent_in              IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_prof_close_in          IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        notes_close_in            IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        id_patient_in             IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_in IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_in          IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        id_visit_in               IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_epis_type_in           IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        flg_executions_in         IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        create_user_in            IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_time_in            IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_time_in            IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        icnp_compo_reeval_in      IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        id_suspend_reason_in      IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_prof_in        IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        suspend_notes_in          IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        dt_suspend_in             IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_prof_in         IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        cancel_notes_in           IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        l_pky    icnp_epis_diagnosis.id_icnp_epis_diag%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_icnp_epis_diag_in      => l_pky,
            id_composition_in         => id_composition_in,
            id_professional_in        => id_professional_in,
            flg_status_in             => flg_status_in,
            id_episode_in             => id_episode_in,
            notes_in                  => notes_in,
            id_parent_in              => id_parent_in,
            id_prof_close_in          => id_prof_close_in,
            notes_close_in            => notes_close_in,
            id_patient_in             => id_patient_in,
            dt_icnp_epis_diag_tstz_in => dt_icnp_epis_diag_tstz_in,
            dt_close_tstz_in          => dt_close_tstz_in,
            id_visit_in               => id_visit_in,
            id_epis_type_in           => id_epis_type_in,
            flg_executions_in         => flg_executions_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            icnp_compo_reeval_in      => icnp_compo_reeval_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_suspend_reason_in      => id_suspend_reason_in,
            id_suspend_prof_in        => id_suspend_prof_in,
            suspend_notes_in          => suspend_notes_in,
            dt_suspend_in             => dt_suspend_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_prof_in         => id_cancel_prof_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN icnp_epis_diagnosis_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO icnp_epis_diagnosis
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ICNP_EPIS_DIAG _' || indx,
                                                        value_in           => rows_in(indx).id_icnp_epis_diag,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION _' || indx,
                                                        value_in           => rows_in(indx).id_composition,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PARENT _' || indx,
                                                        value_in           => rows_in(indx).id_parent,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CLOSE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_close,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CLOSE _' || indx,
                                                        value_in           => rows_in(indx).notes_close,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ICNP_EPIS_DIAG_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_icnp_epis_diag_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CLOSE_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_close_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VISIT _' || indx,
                                                        value_in           => rows_in(indx).id_visit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_epis_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_EXECUTIONS _' || indx,
                                                        value_in           => rows_in(indx).flg_executions,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ICNP_COMPO_REEVAL _' || indx,
                                                        value_in           => rows_in(indx).icnp_compo_reeval,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).dt_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SUSPEND_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_suspend_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SUSPEND_PROF _' || indx,
                                                        value_in           => rows_in(indx).id_suspend_prof,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'SUSPEND_NOTES _' || indx,
                                                        value_in           => rows_in(indx).suspend_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_SUSPEND _' || indx,
                                                        value_in           => rows_in(indx).dt_suspend,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_PROF _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_prof,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CANCEL_NOTES _' || indx,
                                                        value_in           => rows_in(indx).cancel_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'ICNP_EPIS_DIAGNOSIS',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN icnp_epis_diagnosis_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_icnp_epis_diag_in       IN icnp_epis_diagnosis.id_icnp_epis_diag%TYPE,
        id_composition_in          IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_composition_nin         IN BOOLEAN := TRUE,
        id_professional_in         IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        flg_status_in              IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_episode_in              IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        notes_in                   IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_parent_in               IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        id_prof_close_in           IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        id_prof_close_nin          IN BOOLEAN := TRUE,
        notes_close_in             IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        notes_close_nin            IN BOOLEAN := TRUE,
        id_patient_in              IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        dt_icnp_epis_diag_tstz_in  IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_nin IN BOOLEAN := TRUE,
        dt_close_tstz_in           IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_nin          IN BOOLEAN := TRUE,
        id_visit_in                IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_visit_nin               IN BOOLEAN := TRUE,
        id_epis_type_in            IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        id_epis_type_nin           IN BOOLEAN := TRUE,
        flg_executions_in          IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        flg_executions_nin         IN BOOLEAN := TRUE,
        create_user_in             IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        icnp_compo_reeval_in       IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        icnp_compo_reeval_nin      IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_in          IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin         IN BOOLEAN := TRUE,
        id_suspend_reason_in       IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_reason_nin      IN BOOLEAN := TRUE,
        id_suspend_prof_in         IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        id_suspend_prof_nin        IN BOOLEAN := TRUE,
        suspend_notes_in           IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        suspend_notes_nin          IN BOOLEAN := TRUE,
        dt_suspend_in              IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        dt_suspend_nin             IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        id_cancel_prof_in          IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        id_cancel_prof_nin         IN BOOLEAN := TRUE,
        cancel_notes_in            IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin           IN BOOLEAN := TRUE,
        dt_cancel_in               IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_id_composition_n         NUMBER(1);
        l_id_professional_n        NUMBER(1);
        l_flg_status_n             NUMBER(1);
        l_id_episode_n             NUMBER(1);
        l_notes_n                  NUMBER(1);
        l_id_parent_n              NUMBER(1);
        l_id_prof_close_n          NUMBER(1);
        l_notes_close_n            NUMBER(1);
        l_id_patient_n             NUMBER(1);
        l_dt_icnp_epis_diag_tstz_n NUMBER(1);
        l_dt_close_tstz_n          NUMBER(1);
        l_id_visit_n               NUMBER(1);
        l_id_epis_type_n           NUMBER(1);
        l_flg_executions_n         NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        l_icnp_compo_reeval_n      NUMBER(1);
        l_id_prof_last_update_n    NUMBER(1);
        l_dt_last_update_n         NUMBER(1);
        l_id_suspend_reason_n      NUMBER(1);
        l_id_suspend_prof_n        NUMBER(1);
        l_suspend_notes_n          NUMBER(1);
        l_dt_suspend_n             NUMBER(1);
        l_id_cancel_reason_n       NUMBER(1);
        l_id_cancel_prof_n         NUMBER(1);
        l_cancel_notes_n           NUMBER(1);
        l_dt_cancel_n              NUMBER(1);
    BEGIN
    
        l_id_composition_n         := sys.diutil.bool_to_int(id_composition_nin);
        l_id_professional_n        := sys.diutil.bool_to_int(id_professional_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_id_episode_n             := sys.diutil.bool_to_int(id_episode_nin);
        l_notes_n                  := sys.diutil.bool_to_int(notes_nin);
        l_id_parent_n              := sys.diutil.bool_to_int(id_parent_nin);
        l_id_prof_close_n          := sys.diutil.bool_to_int(id_prof_close_nin);
        l_notes_close_n            := sys.diutil.bool_to_int(notes_close_nin);
        l_id_patient_n             := sys.diutil.bool_to_int(id_patient_nin);
        l_dt_icnp_epis_diag_tstz_n := sys.diutil.bool_to_int(dt_icnp_epis_diag_tstz_nin);
        l_dt_close_tstz_n          := sys.diutil.bool_to_int(dt_close_tstz_nin);
        l_id_visit_n               := sys.diutil.bool_to_int(id_visit_nin);
        l_id_epis_type_n           := sys.diutil.bool_to_int(id_epis_type_nin);
        l_flg_executions_n         := sys.diutil.bool_to_int(flg_executions_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_icnp_compo_reeval_n      := sys.diutil.bool_to_int(icnp_compo_reeval_nin);
        l_id_prof_last_update_n    := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n         := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_suspend_reason_n      := sys.diutil.bool_to_int(id_suspend_reason_nin);
        l_id_suspend_prof_n        := sys.diutil.bool_to_int(id_suspend_prof_nin);
        l_suspend_notes_n          := sys.diutil.bool_to_int(suspend_notes_nin);
        l_dt_suspend_n             := sys.diutil.bool_to_int(dt_suspend_nin);
        l_id_cancel_reason_n       := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_id_cancel_prof_n         := sys.diutil.bool_to_int(id_cancel_prof_nin);
        l_cancel_notes_n           := sys.diutil.bool_to_int(cancel_notes_nin);
        l_dt_cancel_n              := sys.diutil.bool_to_int(dt_cancel_nin);
    
        UPDATE icnp_epis_diagnosis
           SET id_composition         = decode(l_id_composition_n,
                                               0,
                                               id_composition_in,
                                               nvl(id_composition_in, id_composition)),
               id_professional        = decode(l_id_professional_n,
                                               0,
                                               id_professional_in,
                                               nvl(id_professional_in, id_professional)),
               flg_status             = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_episode             = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               notes                  = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_parent              = decode(l_id_parent_n, 0, id_parent_in, nvl(id_parent_in, id_parent)),
               id_prof_close          = decode(l_id_prof_close_n,
                                               0,
                                               id_prof_close_in,
                                               nvl(id_prof_close_in, id_prof_close)),
               notes_close            = decode(l_notes_close_n, 0, notes_close_in, nvl(notes_close_in, notes_close)),
               id_patient             = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               dt_icnp_epis_diag_tstz = decode(l_dt_icnp_epis_diag_tstz_n,
                                               0,
                                               dt_icnp_epis_diag_tstz_in,
                                               nvl(dt_icnp_epis_diag_tstz_in, dt_icnp_epis_diag_tstz)),
               dt_close_tstz          = decode(l_dt_close_tstz_n,
                                               0,
                                               dt_close_tstz_in,
                                               nvl(dt_close_tstz_in, dt_close_tstz)),
               id_visit               = decode(l_id_visit_n, 0, id_visit_in, nvl(id_visit_in, id_visit)),
               id_epis_type           = decode(l_id_epis_type_n, 0, id_epis_type_in, nvl(id_epis_type_in, id_epis_type)),
               flg_executions         = decode(l_flg_executions_n,
                                               0,
                                               flg_executions_in,
                                               nvl(flg_executions_in, flg_executions)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution)),
               icnp_compo_reeval      = decode(l_icnp_compo_reeval_n,
                                               0,
                                               icnp_compo_reeval_in,
                                               nvl(icnp_compo_reeval_in, icnp_compo_reeval)),
               id_prof_last_update    = decode(l_id_prof_last_update_n,
                                               0,
                                               id_prof_last_update_in,
                                               nvl(id_prof_last_update_in, id_prof_last_update)),
               dt_last_update         = decode(l_dt_last_update_n,
                                               0,
                                               dt_last_update_in,
                                               nvl(dt_last_update_in, dt_last_update)),
               id_suspend_reason      = decode(l_id_suspend_reason_n,
                                               0,
                                               id_suspend_reason_in,
                                               nvl(id_suspend_reason_in, id_suspend_reason)),
               id_suspend_prof        = decode(l_id_suspend_prof_n,
                                               0,
                                               id_suspend_prof_in,
                                               nvl(id_suspend_prof_in, id_suspend_prof)),
               suspend_notes          = decode(l_suspend_notes_n,
                                               0,
                                               suspend_notes_in,
                                               nvl(suspend_notes_in, suspend_notes)),
               dt_suspend             = decode(l_dt_suspend_n, 0, dt_suspend_in, nvl(dt_suspend_in, dt_suspend)),
               id_cancel_reason       = decode(l_id_cancel_reason_n,
                                               0,
                                               id_cancel_reason_in,
                                               nvl(id_cancel_reason_in, id_cancel_reason)),
               id_cancel_prof         = decode(l_id_cancel_prof_n,
                                               0,
                                               id_cancel_prof_in,
                                               nvl(id_cancel_prof_in, id_cancel_prof)),
               cancel_notes           = decode(l_cancel_notes_n, 0, cancel_notes_in, nvl(cancel_notes_in, cancel_notes)),
               dt_cancel              = decode(l_dt_cancel_n, 0, dt_cancel_in, nvl(dt_cancel_in, dt_cancel))
         WHERE id_icnp_epis_diag = id_icnp_epis_diag_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    IF l_name = 'EIPD_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'EIPD_CRE_SUSP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SUSPEND_REASON',
                                                        value_in           => id_suspend_reason_in);
                    END IF;
                    IF l_name = 'EIPD_EIPD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PARENT',
                                                        value_in           => id_parent_in);
                    END IF;
                    IF l_name = 'EIPD_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EIPD_EPTY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_TYPE',
                                                        value_in           => id_epis_type_in);
                    END IF;
                    IF l_name = 'EIPD_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_CANCELS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_PROF',
                                                        value_in           => id_cancel_prof_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_CANC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CLOSE',
                                                        value_in           => id_prof_close_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_SUSP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SUSPEND_PROF',
                                                        value_in           => id_suspend_prof_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_UPD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_LAST_UPDATE',
                                                        value_in           => id_prof_last_update_in);
                    END IF;
                    IF l_name = 'EIPD_VIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    IF l_name = 'IEIPD_ICN2_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ICNP_COMPO_REEVAL',
                                                        value_in           => icnp_compo_reeval_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_icnp_epis_diag_in       IN icnp_epis_diagnosis.id_icnp_epis_diag%TYPE,
        id_composition_in          IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_composition_nin         IN BOOLEAN := TRUE,
        id_professional_in         IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        flg_status_in              IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_episode_in              IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        notes_in                   IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_parent_in               IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        id_prof_close_in           IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        id_prof_close_nin          IN BOOLEAN := TRUE,
        notes_close_in             IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        notes_close_nin            IN BOOLEAN := TRUE,
        id_patient_in              IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        dt_icnp_epis_diag_tstz_in  IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_nin IN BOOLEAN := TRUE,
        dt_close_tstz_in           IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_nin          IN BOOLEAN := TRUE,
        id_visit_in                IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_visit_nin               IN BOOLEAN := TRUE,
        id_epis_type_in            IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        id_epis_type_nin           IN BOOLEAN := TRUE,
        flg_executions_in          IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        flg_executions_nin         IN BOOLEAN := TRUE,
        create_user_in             IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        icnp_compo_reeval_in       IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        icnp_compo_reeval_nin      IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_in          IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin         IN BOOLEAN := TRUE,
        id_suspend_reason_in       IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_reason_nin      IN BOOLEAN := TRUE,
        id_suspend_prof_in         IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        id_suspend_prof_nin        IN BOOLEAN := TRUE,
        suspend_notes_in           IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        suspend_notes_nin          IN BOOLEAN := TRUE,
        dt_suspend_in              IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        dt_suspend_nin             IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        id_cancel_prof_in          IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        id_cancel_prof_nin         IN BOOLEAN := TRUE,
        cancel_notes_in            IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin           IN BOOLEAN := TRUE,
        dt_cancel_in               IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_icnp_epis_diag_in       => id_icnp_epis_diag_in,
            id_composition_in          => id_composition_in,
            id_composition_nin         => id_composition_nin,
            id_professional_in         => id_professional_in,
            id_professional_nin        => id_professional_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            notes_in                   => notes_in,
            notes_nin                  => notes_nin,
            id_parent_in               => id_parent_in,
            id_parent_nin              => id_parent_nin,
            id_prof_close_in           => id_prof_close_in,
            id_prof_close_nin          => id_prof_close_nin,
            notes_close_in             => notes_close_in,
            notes_close_nin            => notes_close_nin,
            id_patient_in              => id_patient_in,
            id_patient_nin             => id_patient_nin,
            dt_icnp_epis_diag_tstz_in  => dt_icnp_epis_diag_tstz_in,
            dt_icnp_epis_diag_tstz_nin => dt_icnp_epis_diag_tstz_nin,
            dt_close_tstz_in           => dt_close_tstz_in,
            dt_close_tstz_nin          => dt_close_tstz_nin,
            id_visit_in                => id_visit_in,
            id_visit_nin               => id_visit_nin,
            id_epis_type_in            => id_epis_type_in,
            id_epis_type_nin           => id_epis_type_nin,
            flg_executions_in          => flg_executions_in,
            flg_executions_nin         => flg_executions_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            icnp_compo_reeval_in       => icnp_compo_reeval_in,
            icnp_compo_reeval_nin      => icnp_compo_reeval_nin,
            id_prof_last_update_in     => id_prof_last_update_in,
            id_prof_last_update_nin    => id_prof_last_update_nin,
            dt_last_update_in          => dt_last_update_in,
            dt_last_update_nin         => dt_last_update_nin,
            id_suspend_reason_in       => id_suspend_reason_in,
            id_suspend_reason_nin      => id_suspend_reason_nin,
            id_suspend_prof_in         => id_suspend_prof_in,
            id_suspend_prof_nin        => id_suspend_prof_nin,
            suspend_notes_in           => suspend_notes_in,
            suspend_notes_nin          => suspend_notes_nin,
            dt_suspend_in              => dt_suspend_in,
            dt_suspend_nin             => dt_suspend_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            id_cancel_prof_in          => id_cancel_prof_in,
            id_cancel_prof_nin         => id_cancel_prof_nin,
            cancel_notes_in            => cancel_notes_in,
            cancel_notes_nin           => cancel_notes_nin,
            dt_cancel_in               => dt_cancel_in,
            dt_cancel_nin              => dt_cancel_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_composition_in          IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_composition_nin         IN BOOLEAN := TRUE,
        id_professional_in         IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        flg_status_in              IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_episode_in              IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        notes_in                   IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_parent_in               IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        id_prof_close_in           IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        id_prof_close_nin          IN BOOLEAN := TRUE,
        notes_close_in             IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        notes_close_nin            IN BOOLEAN := TRUE,
        id_patient_in              IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        dt_icnp_epis_diag_tstz_in  IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_nin IN BOOLEAN := TRUE,
        dt_close_tstz_in           IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_nin          IN BOOLEAN := TRUE,
        id_visit_in                IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_visit_nin               IN BOOLEAN := TRUE,
        id_epis_type_in            IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        id_epis_type_nin           IN BOOLEAN := TRUE,
        flg_executions_in          IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        flg_executions_nin         IN BOOLEAN := TRUE,
        create_user_in             IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        icnp_compo_reeval_in       IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        icnp_compo_reeval_nin      IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_in          IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin         IN BOOLEAN := TRUE,
        id_suspend_reason_in       IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_reason_nin      IN BOOLEAN := TRUE,
        id_suspend_prof_in         IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        id_suspend_prof_nin        IN BOOLEAN := TRUE,
        suspend_notes_in           IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        suspend_notes_nin          IN BOOLEAN := TRUE,
        dt_suspend_in              IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        dt_suspend_nin             IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        id_cancel_prof_in          IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        id_cancel_prof_nin         IN BOOLEAN := TRUE,
        cancel_notes_in            IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin           IN BOOLEAN := TRUE,
        dt_cancel_in               IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        where_in                   VARCHAR2 DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_id_composition_n         NUMBER(1);
        l_id_professional_n        NUMBER(1);
        l_flg_status_n             NUMBER(1);
        l_id_episode_n             NUMBER(1);
        l_notes_n                  NUMBER(1);
        l_id_parent_n              NUMBER(1);
        l_id_prof_close_n          NUMBER(1);
        l_notes_close_n            NUMBER(1);
        l_id_patient_n             NUMBER(1);
        l_dt_icnp_epis_diag_tstz_n NUMBER(1);
        l_dt_close_tstz_n          NUMBER(1);
        l_id_visit_n               NUMBER(1);
        l_id_epis_type_n           NUMBER(1);
        l_flg_executions_n         NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        l_icnp_compo_reeval_n      NUMBER(1);
        l_id_prof_last_update_n    NUMBER(1);
        l_dt_last_update_n         NUMBER(1);
        l_id_suspend_reason_n      NUMBER(1);
        l_id_suspend_prof_n        NUMBER(1);
        l_suspend_notes_n          NUMBER(1);
        l_dt_suspend_n             NUMBER(1);
        l_id_cancel_reason_n       NUMBER(1);
        l_id_cancel_prof_n         NUMBER(1);
        l_cancel_notes_n           NUMBER(1);
        l_dt_cancel_n              NUMBER(1);
        id_icnp_epis_diag_in       icnp_epis_diagnosis.id_icnp_epis_diag%TYPE;
    BEGIN
    
        l_id_composition_n         := sys.diutil.bool_to_int(id_composition_nin);
        l_id_professional_n        := sys.diutil.bool_to_int(id_professional_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_id_episode_n             := sys.diutil.bool_to_int(id_episode_nin);
        l_notes_n                  := sys.diutil.bool_to_int(notes_nin);
        l_id_parent_n              := sys.diutil.bool_to_int(id_parent_nin);
        l_id_prof_close_n          := sys.diutil.bool_to_int(id_prof_close_nin);
        l_notes_close_n            := sys.diutil.bool_to_int(notes_close_nin);
        l_id_patient_n             := sys.diutil.bool_to_int(id_patient_nin);
        l_dt_icnp_epis_diag_tstz_n := sys.diutil.bool_to_int(dt_icnp_epis_diag_tstz_nin);
        l_dt_close_tstz_n          := sys.diutil.bool_to_int(dt_close_tstz_nin);
        l_id_visit_n               := sys.diutil.bool_to_int(id_visit_nin);
        l_id_epis_type_n           := sys.diutil.bool_to_int(id_epis_type_nin);
        l_flg_executions_n         := sys.diutil.bool_to_int(flg_executions_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_icnp_compo_reeval_n      := sys.diutil.bool_to_int(icnp_compo_reeval_nin);
        l_id_prof_last_update_n    := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n         := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_suspend_reason_n      := sys.diutil.bool_to_int(id_suspend_reason_nin);
        l_id_suspend_prof_n        := sys.diutil.bool_to_int(id_suspend_prof_nin);
        l_suspend_notes_n          := sys.diutil.bool_to_int(suspend_notes_nin);
        l_dt_suspend_n             := sys.diutil.bool_to_int(dt_suspend_nin);
        l_id_cancel_reason_n       := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_id_cancel_prof_n         := sys.diutil.bool_to_int(id_cancel_prof_nin);
        l_cancel_notes_n           := sys.diutil.bool_to_int(cancel_notes_nin);
        l_dt_cancel_n              := sys.diutil.bool_to_int(dt_cancel_nin);
    
        l_sql := 'UPDATE ICNP_EPIS_DIAGNOSIS SET ' || ' ID_COMPOSITION = decode (' || l_id_composition_n ||
                 ',0,:id_composition_in, NVL (:id_composition_in, ID_COMPOSITION)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' ID_PARENT = decode (' || l_id_parent_n || ',0,:id_parent_in, NVL (:id_parent_in, ID_PARENT)) ' || ',' ||
                 ' ID_PROF_CLOSE = decode (' || l_id_prof_close_n ||
                 ',0,:id_prof_close_in, NVL (:id_prof_close_in, ID_PROF_CLOSE)) ' || ',' || ' NOTES_CLOSE = decode (' ||
                 l_notes_close_n || ',0,:notes_close_in, NVL (:notes_close_in, NOTES_CLOSE)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' DT_ICNP_EPIS_DIAG_TSTZ = decode (' || l_dt_icnp_epis_diag_tstz_n ||
                 ',0,:dt_icnp_epis_diag_tstz_in, NVL (:dt_icnp_epis_diag_tstz_in, DT_ICNP_EPIS_DIAG_TSTZ)) ' || ',' ||
                 ' DT_CLOSE_TSTZ = decode (' || l_dt_close_tstz_n ||
                 ',0,:dt_close_tstz_in, NVL (:dt_close_tstz_in, DT_CLOSE_TSTZ)) ' || ',' || ' ID_VISIT = decode (' ||
                 l_id_visit_n || ',0,:id_visit_in, NVL (:id_visit_in, ID_VISIT)) ' || ',' || ' ID_EPIS_TYPE = decode (' ||
                 l_id_epis_type_n || ',0,:id_epis_type_in, NVL (:id_epis_type_in, ID_EPIS_TYPE)) ' || ',' ||
                 ' FLG_EXECUTIONS = decode (' || l_flg_executions_n ||
                 ',0,:flg_executions_in, NVL (:flg_executions_in, FLG_EXECUTIONS)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ICNP_COMPO_REEVAL = decode (' || l_icnp_compo_reeval_n ||
                 ',0,:icnp_compo_reeval_in, NVL (:icnp_compo_reeval_in, ICNP_COMPO_REEVAL)) ' || ',' ||
                 ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                 ',0,:id_prof_last_update_in, NVL (:id_prof_last_update_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                 ' DT_LAST_UPDATE = decode (' || l_dt_last_update_n ||
                 ',0,:dt_last_update_in, NVL (:dt_last_update_in, DT_LAST_UPDATE)) ' || ',' ||
                 ' ID_SUSPEND_REASON = decode (' || l_id_suspend_reason_n ||
                 ',0,:id_suspend_reason_in, NVL (:id_suspend_reason_in, ID_SUSPEND_REASON)) ' || ',' ||
                 ' ID_SUSPEND_PROF = decode (' || l_id_suspend_prof_n ||
                 ',0,:id_suspend_prof_in, NVL (:id_suspend_prof_in, ID_SUSPEND_PROF)) ' || ',' ||
                 ' SUSPEND_NOTES = decode (' || l_suspend_notes_n ||
                 ',0,:suspend_notes_in, NVL (:suspend_notes_in, SUSPEND_NOTES)) ' || ',' || ' DT_SUSPEND = decode (' ||
                 l_dt_suspend_n || ',0,:dt_suspend_in, NVL (:dt_suspend_in, DT_SUSPEND)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' ID_CANCEL_PROF = decode (' || l_id_cancel_prof_n ||
                 ',0,:id_cancel_prof_in, NVL (:id_cancel_prof_in, ID_CANCEL_PROF)) ' || ',' ||
                 ' CANCEL_NOTES = decode (' || l_cancel_notes_n ||
                 ',0,:cancel_notes_in, NVL (:cancel_notes_in, CANCEL_NOTES)) ' || ',' || ' DT_CANCEL = decode (' ||
                 l_dt_cancel_n || ',0,:dt_cancel_in, NVL (:dt_cancel_in, DT_CANCEL)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_composition_in, id_professional_in, flg_status_in, id_episode_in, notes_in, id_parent_in, id_prof_close_in, notes_close_in, id_patient_in, dt_icnp_epis_diag_tstz_in, dt_close_tstz_in, id_visit_in, id_epis_type_in, flg_executions_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, icnp_compo_reeval_in, id_prof_last_update_in, dt_last_update_in, id_suspend_reason_in, id_suspend_prof_in, suspend_notes_in, dt_suspend_in, id_cancel_reason_in, id_cancel_prof_in, cancel_notes_in, dt_cancel_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    IF l_name = 'EIPD_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'EIPD_CRE_SUSP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SUSPEND_REASON',
                                                        value_in           => id_suspend_reason_in);
                    END IF;
                    IF l_name = 'EIPD_EIPD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PARENT',
                                                        value_in           => id_parent_in);
                    END IF;
                    IF l_name = 'EIPD_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EIPD_EPTY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_TYPE',
                                                        value_in           => id_epis_type_in);
                    END IF;
                    IF l_name = 'EIPD_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_CANCELS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_PROF',
                                                        value_in           => id_cancel_prof_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_CANC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CLOSE',
                                                        value_in           => id_prof_close_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_SUSP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SUSPEND_PROF',
                                                        value_in           => id_suspend_prof_in);
                    END IF;
                    IF l_name = 'EIPD_PROF_UPD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_LAST_UPDATE',
                                                        value_in           => id_prof_last_update_in);
                    END IF;
                    IF l_name = 'EIPD_VIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    IF l_name = 'IEIPD_ICN2_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ICNP_COMPO_REEVAL',
                                                        value_in           => icnp_compo_reeval_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_composition_in          IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_composition_nin         IN BOOLEAN := TRUE,
        id_professional_in         IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        flg_status_in              IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_episode_in              IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        notes_in                   IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_parent_in               IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        id_prof_close_in           IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        id_prof_close_nin          IN BOOLEAN := TRUE,
        notes_close_in             IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        notes_close_nin            IN BOOLEAN := TRUE,
        id_patient_in              IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        dt_icnp_epis_diag_tstz_in  IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_nin IN BOOLEAN := TRUE,
        dt_close_tstz_in           IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_nin          IN BOOLEAN := TRUE,
        id_visit_in                IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_visit_nin               IN BOOLEAN := TRUE,
        id_epis_type_in            IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        id_epis_type_nin           IN BOOLEAN := TRUE,
        flg_executions_in          IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        flg_executions_nin         IN BOOLEAN := TRUE,
        create_user_in             IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        icnp_compo_reeval_in       IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        icnp_compo_reeval_nin      IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_in          IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin         IN BOOLEAN := TRUE,
        id_suspend_reason_in       IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_reason_nin      IN BOOLEAN := TRUE,
        id_suspend_prof_in         IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        id_suspend_prof_nin        IN BOOLEAN := TRUE,
        suspend_notes_in           IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        suspend_notes_nin          IN BOOLEAN := TRUE,
        dt_suspend_in              IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        dt_suspend_nin             IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        id_cancel_prof_in          IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        id_cancel_prof_nin         IN BOOLEAN := TRUE,
        cancel_notes_in            IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin           IN BOOLEAN := TRUE,
        dt_cancel_in               IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        where_in                   VARCHAR2 DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_composition_in          => id_composition_in,
            id_composition_nin         => id_composition_nin,
            id_professional_in         => id_professional_in,
            id_professional_nin        => id_professional_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            notes_in                   => notes_in,
            notes_nin                  => notes_nin,
            id_parent_in               => id_parent_in,
            id_parent_nin              => id_parent_nin,
            id_prof_close_in           => id_prof_close_in,
            id_prof_close_nin          => id_prof_close_nin,
            notes_close_in             => notes_close_in,
            notes_close_nin            => notes_close_nin,
            id_patient_in              => id_patient_in,
            id_patient_nin             => id_patient_nin,
            dt_icnp_epis_diag_tstz_in  => dt_icnp_epis_diag_tstz_in,
            dt_icnp_epis_diag_tstz_nin => dt_icnp_epis_diag_tstz_nin,
            dt_close_tstz_in           => dt_close_tstz_in,
            dt_close_tstz_nin          => dt_close_tstz_nin,
            id_visit_in                => id_visit_in,
            id_visit_nin               => id_visit_nin,
            id_epis_type_in            => id_epis_type_in,
            id_epis_type_nin           => id_epis_type_nin,
            flg_executions_in          => flg_executions_in,
            flg_executions_nin         => flg_executions_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            icnp_compo_reeval_in       => icnp_compo_reeval_in,
            icnp_compo_reeval_nin      => icnp_compo_reeval_nin,
            id_prof_last_update_in     => id_prof_last_update_in,
            id_prof_last_update_nin    => id_prof_last_update_nin,
            dt_last_update_in          => dt_last_update_in,
            dt_last_update_nin         => dt_last_update_nin,
            id_suspend_reason_in       => id_suspend_reason_in,
            id_suspend_reason_nin      => id_suspend_reason_nin,
            id_suspend_prof_in         => id_suspend_prof_in,
            id_suspend_prof_nin        => id_suspend_prof_nin,
            suspend_notes_in           => suspend_notes_in,
            suspend_notes_nin          => suspend_notes_nin,
            dt_suspend_in              => dt_suspend_in,
            dt_suspend_nin             => dt_suspend_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            id_cancel_prof_in          => id_cancel_prof_in,
            id_cancel_prof_nin         => id_cancel_prof_nin,
            cancel_notes_in            => cancel_notes_in,
            cancel_notes_nin           => cancel_notes_nin,
            dt_cancel_in               => dt_cancel_in,
            dt_cancel_nin              => dt_cancel_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN icnp_epis_diagnosis%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_icnp_epis_diag_in      => rec_in.id_icnp_epis_diag,
            id_composition_in         => rec_in.id_composition,
            id_professional_in        => rec_in.id_professional,
            flg_status_in             => rec_in.flg_status,
            id_episode_in             => rec_in.id_episode,
            notes_in                  => rec_in.notes,
            id_parent_in              => rec_in.id_parent,
            id_prof_close_in          => rec_in.id_prof_close,
            notes_close_in            => rec_in.notes_close,
            id_patient_in             => rec_in.id_patient,
            dt_icnp_epis_diag_tstz_in => rec_in.dt_icnp_epis_diag_tstz,
            dt_close_tstz_in          => rec_in.dt_close_tstz,
            id_visit_in               => rec_in.id_visit,
            id_epis_type_in           => rec_in.id_epis_type,
            flg_executions_in         => rec_in.flg_executions,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            icnp_compo_reeval_in      => rec_in.icnp_compo_reeval,
            id_prof_last_update_in    => rec_in.id_prof_last_update,
            dt_last_update_in         => rec_in.dt_last_update,
            id_suspend_reason_in      => rec_in.id_suspend_reason,
            id_suspend_prof_in        => rec_in.id_suspend_prof,
            suspend_notes_in          => rec_in.suspend_notes,
            dt_suspend_in             => rec_in.dt_suspend,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            id_cancel_prof_in         => rec_in.id_cancel_prof,
            cancel_notes_in           => rec_in.cancel_notes,
            dt_cancel_in              => rec_in.dt_cancel
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN icnp_epis_diagnosis%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_icnp_epis_diag_in      => rec_in.id_icnp_epis_diag,
            id_composition_in         => rec_in.id_composition,
            id_professional_in        => rec_in.id_professional,
            flg_status_in             => rec_in.flg_status,
            id_episode_in             => rec_in.id_episode,
            notes_in                  => rec_in.notes,
            id_parent_in              => rec_in.id_parent,
            id_prof_close_in          => rec_in.id_prof_close,
            notes_close_in            => rec_in.notes_close,
            id_patient_in             => rec_in.id_patient,
            dt_icnp_epis_diag_tstz_in => rec_in.dt_icnp_epis_diag_tstz,
            dt_close_tstz_in          => rec_in.dt_close_tstz,
            id_visit_in               => rec_in.id_visit,
            id_epis_type_in           => rec_in.id_epis_type,
            flg_executions_in         => rec_in.flg_executions,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            icnp_compo_reeval_in      => rec_in.icnp_compo_reeval,
            id_prof_last_update_in    => rec_in.id_prof_last_update,
            dt_last_update_in         => rec_in.dt_last_update,
            id_suspend_reason_in      => rec_in.id_suspend_reason,
            id_suspend_prof_in        => rec_in.id_suspend_prof,
            suspend_notes_in          => rec_in.suspend_notes,
            dt_suspend_in             => rec_in.dt_suspend,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            id_cancel_prof_in         => rec_in.id_cancel_prof,
            cancel_notes_in           => rec_in.cancel_notes,
            dt_cancel_in              => rec_in.dt_cancel
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_icnp_epis_diag_in      IN icnp_epis_diagnosis.id_icnp_epis_diag%TYPE,
        id_composition_in         IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_professional_in        IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        flg_status_in             IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        id_episode_in             IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        notes_in                  IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        id_parent_in              IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_prof_close_in          IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        notes_close_in            IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        id_patient_in             IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_in IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_in          IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        id_visit_in               IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_epis_type_in           IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        flg_executions_in         IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        create_user_in            IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_time_in            IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_time_in            IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        icnp_compo_reeval_in      IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        id_suspend_reason_in      IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_prof_in        IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        suspend_notes_in          IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        dt_suspend_in             IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_prof_in         IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        cancel_notes_in           IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        upd(id_icnp_epis_diag_in      => id_icnp_epis_diag_in,
            id_composition_in         => id_composition_in,
            id_professional_in        => id_professional_in,
            flg_status_in             => flg_status_in,
            id_episode_in             => id_episode_in,
            notes_in                  => notes_in,
            id_parent_in              => id_parent_in,
            id_prof_close_in          => id_prof_close_in,
            notes_close_in            => notes_close_in,
            id_patient_in             => id_patient_in,
            dt_icnp_epis_diag_tstz_in => dt_icnp_epis_diag_tstz_in,
            dt_close_tstz_in          => dt_close_tstz_in,
            id_visit_in               => id_visit_in,
            id_epis_type_in           => id_epis_type_in,
            flg_executions_in         => flg_executions_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            icnp_compo_reeval_in      => icnp_compo_reeval_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_suspend_reason_in      => id_suspend_reason_in,
            id_suspend_prof_in        => id_suspend_prof_in,
            suspend_notes_in          => suspend_notes_in,
            dt_suspend_in             => dt_suspend_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_prof_in         => id_cancel_prof_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_icnp_epis_diag_in      => id_icnp_epis_diag_in,
                id_composition_in         => id_composition_in,
                id_professional_in        => id_professional_in,
                flg_status_in             => flg_status_in,
                id_episode_in             => id_episode_in,
                notes_in                  => notes_in,
                id_parent_in              => id_parent_in,
                id_prof_close_in          => id_prof_close_in,
                notes_close_in            => notes_close_in,
                id_patient_in             => id_patient_in,
                dt_icnp_epis_diag_tstz_in => dt_icnp_epis_diag_tstz_in,
                dt_close_tstz_in          => dt_close_tstz_in,
                id_visit_in               => id_visit_in,
                id_epis_type_in           => id_epis_type_in,
                flg_executions_in         => flg_executions_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                icnp_compo_reeval_in      => icnp_compo_reeval_in,
                id_prof_last_update_in    => id_prof_last_update_in,
                dt_last_update_in         => dt_last_update_in,
                id_suspend_reason_in      => id_suspend_reason_in,
                id_suspend_prof_in        => id_suspend_prof_in,
                suspend_notes_in          => suspend_notes_in,
                dt_suspend_in             => dt_suspend_in,
                id_cancel_reason_in       => id_cancel_reason_in,
                id_cancel_prof_in         => id_cancel_prof_in,
                cancel_notes_in           => cancel_notes_in,
                dt_cancel_in              => dt_cancel_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_icnp_epis_diag_in      IN icnp_epis_diagnosis.id_icnp_epis_diag%TYPE,
        id_composition_in         IN icnp_epis_diagnosis.id_composition%TYPE DEFAULT NULL,
        id_professional_in        IN icnp_epis_diagnosis.id_professional%TYPE DEFAULT NULL,
        flg_status_in             IN icnp_epis_diagnosis.flg_status%TYPE DEFAULT NULL,
        id_episode_in             IN icnp_epis_diagnosis.id_episode%TYPE DEFAULT NULL,
        notes_in                  IN icnp_epis_diagnosis.notes%TYPE DEFAULT NULL,
        id_parent_in              IN icnp_epis_diagnosis.id_parent%TYPE DEFAULT NULL,
        id_prof_close_in          IN icnp_epis_diagnosis.id_prof_close%TYPE DEFAULT NULL,
        notes_close_in            IN icnp_epis_diagnosis.notes_close%TYPE DEFAULT NULL,
        id_patient_in             IN icnp_epis_diagnosis.id_patient%TYPE DEFAULT NULL,
        dt_icnp_epis_diag_tstz_in IN icnp_epis_diagnosis.dt_icnp_epis_diag_tstz%TYPE DEFAULT NULL,
        dt_close_tstz_in          IN icnp_epis_diagnosis.dt_close_tstz%TYPE DEFAULT NULL,
        id_visit_in               IN icnp_epis_diagnosis.id_visit%TYPE DEFAULT NULL,
        id_epis_type_in           IN icnp_epis_diagnosis.id_epis_type%TYPE DEFAULT NULL,
        flg_executions_in         IN icnp_epis_diagnosis.flg_executions%TYPE DEFAULT NULL,
        create_user_in            IN icnp_epis_diagnosis.create_user%TYPE DEFAULT NULL,
        create_time_in            IN icnp_epis_diagnosis.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN icnp_epis_diagnosis.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN icnp_epis_diagnosis.update_user%TYPE DEFAULT NULL,
        update_time_in            IN icnp_epis_diagnosis.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN icnp_epis_diagnosis.update_institution%TYPE DEFAULT NULL,
        icnp_compo_reeval_in      IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN icnp_epis_diagnosis.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN icnp_epis_diagnosis.dt_last_update%TYPE DEFAULT NULL,
        id_suspend_reason_in      IN icnp_epis_diagnosis.id_suspend_reason%TYPE DEFAULT NULL,
        id_suspend_prof_in        IN icnp_epis_diagnosis.id_suspend_prof%TYPE DEFAULT NULL,
        suspend_notes_in          IN icnp_epis_diagnosis.suspend_notes%TYPE DEFAULT NULL,
        dt_suspend_in             IN icnp_epis_diagnosis.dt_suspend%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN icnp_epis_diagnosis.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_prof_in         IN icnp_epis_diagnosis.id_cancel_prof%TYPE DEFAULT NULL,
        cancel_notes_in           IN icnp_epis_diagnosis.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN icnp_epis_diagnosis.dt_cancel%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_icnp_epis_diag_in,
                id_composition_in,
                id_professional_in,
                flg_status_in,
                id_episode_in,
                notes_in,
                id_parent_in,
                id_prof_close_in,
                notes_close_in,
                id_patient_in,
                dt_icnp_epis_diag_tstz_in,
                dt_close_tstz_in,
                id_visit_in,
                id_epis_type_in,
                flg_executions_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                icnp_compo_reeval_in,
                id_prof_last_update_in,
                dt_last_update_in,
                id_suspend_reason_in,
                id_suspend_prof_in,
                suspend_notes_in,
                dt_suspend_in,
                id_cancel_reason_in,
                id_cancel_prof_in,
                cancel_notes_in,
                dt_cancel_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN icnp_epis_diagnosis_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_icnp_epis_diag      id_icnp_epis_diag_cc;
        l_id_composition         id_composition_cc;
        l_id_professional        id_professional_cc;
        l_flg_status             flg_status_cc;
        l_id_episode             id_episode_cc;
        l_notes                  notes_cc;
        l_id_parent              id_parent_cc;
        l_id_prof_close          id_prof_close_cc;
        l_notes_close            notes_close_cc;
        l_id_patient             id_patient_cc;
        l_dt_icnp_epis_diag_tstz dt_icnp_epis_diag_tstz_cc;
        l_dt_close_tstz          dt_close_tstz_cc;
        l_id_visit               id_visit_cc;
        l_id_epis_type           id_epis_type_cc;
        l_flg_executions         flg_executions_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
        l_icnp_compo_reeval      icnp_compo_reeval_cc;
        l_id_prof_last_update    id_prof_last_update_cc;
        l_dt_last_update         dt_last_update_cc;
        l_id_suspend_reason      id_suspend_reason_cc;
        l_id_suspend_prof        id_suspend_prof_cc;
        l_suspend_notes          suspend_notes_cc;
        l_dt_suspend             dt_suspend_cc;
        l_id_cancel_reason       id_cancel_reason_cc;
        l_id_cancel_prof         id_cancel_prof_cc;
        l_cancel_notes           cancel_notes_cc;
        l_dt_cancel              dt_cancel_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_icnp_epis_diag(i) := col_in(i).id_icnp_epis_diag;
            l_id_composition(i) := col_in(i).id_composition;
            l_id_professional(i) := col_in(i).id_professional;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_episode(i) := col_in(i).id_episode;
            l_notes(i) := col_in(i).notes;
            l_id_parent(i) := col_in(i).id_parent;
            l_id_prof_close(i) := col_in(i).id_prof_close;
            l_notes_close(i) := col_in(i).notes_close;
            l_id_patient(i) := col_in(i).id_patient;
            l_dt_icnp_epis_diag_tstz(i) := col_in(i).dt_icnp_epis_diag_tstz;
            l_dt_close_tstz(i) := col_in(i).dt_close_tstz;
            l_id_visit(i) := col_in(i).id_visit;
            l_id_epis_type(i) := col_in(i).id_epis_type;
            l_flg_executions(i) := col_in(i).flg_executions;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_icnp_compo_reeval(i) := col_in(i).icnp_compo_reeval;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_dt_last_update(i) := col_in(i).dt_last_update;
            l_id_suspend_reason(i) := col_in(i).id_suspend_reason;
            l_id_suspend_prof(i) := col_in(i).id_suspend_prof;
            l_suspend_notes(i) := col_in(i).suspend_notes;
            l_dt_suspend(i) := col_in(i).dt_suspend;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_id_cancel_prof(i) := col_in(i).id_cancel_prof;
            l_cancel_notes(i) := col_in(i).cancel_notes;
            l_dt_cancel(i) := col_in(i).dt_cancel;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE icnp_epis_diagnosis
                   SET id_composition         = nvl(l_id_composition(i), id_composition),
                       id_professional        = nvl(l_id_professional(i), id_professional),
                       flg_status             = nvl(l_flg_status(i), flg_status),
                       id_episode             = nvl(l_id_episode(i), id_episode),
                       notes                  = nvl(l_notes(i), notes),
                       id_parent              = nvl(l_id_parent(i), id_parent),
                       id_prof_close          = nvl(l_id_prof_close(i), id_prof_close),
                       notes_close            = nvl(l_notes_close(i), notes_close),
                       id_patient             = nvl(l_id_patient(i), id_patient),
                       dt_icnp_epis_diag_tstz = nvl(l_dt_icnp_epis_diag_tstz(i), dt_icnp_epis_diag_tstz),
                       dt_close_tstz          = nvl(l_dt_close_tstz(i), dt_close_tstz),
                       id_visit               = nvl(l_id_visit(i), id_visit),
                       id_epis_type           = nvl(l_id_epis_type(i), id_epis_type),
                       flg_executions         = nvl(l_flg_executions(i), flg_executions),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution),
                       icnp_compo_reeval      = nvl(l_icnp_compo_reeval(i), icnp_compo_reeval),
                       id_prof_last_update    = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       dt_last_update         = nvl(l_dt_last_update(i), dt_last_update),
                       id_suspend_reason      = nvl(l_id_suspend_reason(i), id_suspend_reason),
                       id_suspend_prof        = nvl(l_id_suspend_prof(i), id_suspend_prof),
                       suspend_notes          = nvl(l_suspend_notes(i), suspend_notes),
                       dt_suspend             = nvl(l_dt_suspend(i), dt_suspend),
                       id_cancel_reason       = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       id_cancel_prof         = nvl(l_id_cancel_prof(i), id_cancel_prof),
                       cancel_notes           = nvl(l_cancel_notes(i), cancel_notes),
                       dt_cancel              = nvl(l_dt_cancel(i), dt_cancel)
                 WHERE id_icnp_epis_diag = l_id_icnp_epis_diag(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE icnp_epis_diagnosis
                   SET id_composition         = l_id_composition(i),
                       id_professional        = l_id_professional(i),
                       flg_status             = l_flg_status(i),
                       id_episode             = l_id_episode(i),
                       notes                  = l_notes(i),
                       id_parent              = l_id_parent(i),
                       id_prof_close          = l_id_prof_close(i),
                       notes_close            = l_notes_close(i),
                       id_patient             = l_id_patient(i),
                       dt_icnp_epis_diag_tstz = l_dt_icnp_epis_diag_tstz(i),
                       dt_close_tstz          = l_dt_close_tstz(i),
                       id_visit               = l_id_visit(i),
                       id_epis_type           = l_id_epis_type(i),
                       flg_executions         = l_flg_executions(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i),
                       icnp_compo_reeval      = l_icnp_compo_reeval(i),
                       id_prof_last_update    = l_id_prof_last_update(i),
                       dt_last_update         = l_dt_last_update(i),
                       id_suspend_reason      = l_id_suspend_reason(i),
                       id_suspend_prof        = l_id_suspend_prof(i),
                       suspend_notes          = l_suspend_notes(i),
                       dt_suspend             = l_dt_suspend(i),
                       id_cancel_reason       = l_id_cancel_reason(i),
                       id_cancel_prof         = l_id_cancel_prof(i),
                       cancel_notes           = l_cancel_notes(i),
                       dt_cancel              = l_dt_cancel(i)
                 WHERE id_icnp_epis_diag = l_id_icnp_epis_diag(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN icnp_epis_diagnosis_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE ICNP_EPIS_DIAGNOSIS
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE ICNP_EPIS_DIAGNOSIS
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE ICNP_EPIS_DIAGNOSIS set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE ICNP_EPIS_DIAGNOSIS set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_icnp_epis_diag_in IN icnp_epis_diagnosis.id_icnp_epis_diag%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_icnp_epis_diag = id_icnp_epis_diag_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_icnp_epis_diag_in IN icnp_epis_diagnosis.id_icnp_epis_diag%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_icnp_epis_diag_in => id_icnp_epis_diag_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_ICNP_EPIS_DIAG
    PROCEDURE del_id_icnp_epis_diag
    (
        id_icnp_epis_diag_in IN icnp_epis_diagnosis.id_icnp_epis_diag%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_icnp_epis_diag = id_icnp_epis_diag_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_icnp_epis_diag;

    -- Delete all rows for primary key column ID_ICNP_EPIS_DIAG
    PROCEDURE del_id_icnp_epis_diag
    (
        id_icnp_epis_diag_in IN icnp_epis_diagnosis.id_icnp_epis_diag%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_icnp_epis_diag(id_icnp_epis_diag_in => id_icnp_epis_diag_in,
                              handle_error_in      => handle_error_in,
                              rows_out             => rows_out);
    END del_id_icnp_epis_diag;

    PROCEDURE del_eipd_cre_fk
    (
        id_cancel_reason_in IN icnp_epis_diagnosis.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_cancel_reason = del_eipd_cre_fk.id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eipd_cre_fk;

    PROCEDURE del_eipd_cre_fk
    (
        id_cancel_reason_in IN icnp_epis_diagnosis.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eipd_cre_fk(id_cancel_reason_in => id_cancel_reason_in,
                        handle_error_in     => handle_error_in,
                        rows_out            => rows_out);
    END del_eipd_cre_fk;

    PROCEDURE del_eipd_cre_susp_fk
    (
        id_suspend_reason_in IN icnp_epis_diagnosis.id_suspend_reason%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_suspend_reason = del_eipd_cre_susp_fk.id_suspend_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eipd_cre_susp_fk;

    PROCEDURE del_eipd_cre_susp_fk
    (
        id_suspend_reason_in IN icnp_epis_diagnosis.id_suspend_reason%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eipd_cre_susp_fk(id_suspend_reason_in => id_suspend_reason_in,
                             handle_error_in      => handle_error_in,
                             rows_out             => rows_out);
    END del_eipd_cre_susp_fk;

    PROCEDURE del_eipd_eipd_fk
    (
        id_parent_in    IN icnp_epis_diagnosis.id_parent%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_parent = del_eipd_eipd_fk.id_parent_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eipd_eipd_fk;

    PROCEDURE del_eipd_eipd_fk
    (
        id_parent_in    IN icnp_epis_diagnosis.id_parent%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eipd_eipd_fk(id_parent_in => id_parent_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eipd_eipd_fk;

    PROCEDURE del_eipd_epis_fk
    (
        id_episode_in   IN icnp_epis_diagnosis.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_episode = del_eipd_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eipd_epis_fk;

    PROCEDURE del_eipd_epis_fk
    (
        id_episode_in   IN icnp_epis_diagnosis.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eipd_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eipd_epis_fk;

    PROCEDURE del_eipd_epty_fk
    (
        id_epis_type_in IN icnp_epis_diagnosis.id_epis_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_epis_type = del_eipd_epty_fk.id_epis_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eipd_epty_fk;

    PROCEDURE del_eipd_epty_fk
    (
        id_epis_type_in IN icnp_epis_diagnosis.id_epis_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eipd_epty_fk(id_epis_type_in => id_epis_type_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eipd_epty_fk;

    PROCEDURE del_eipd_pat_fk
    (
        id_patient_in   IN icnp_epis_diagnosis.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_patient = del_eipd_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eipd_pat_fk;

    PROCEDURE del_eipd_pat_fk
    (
        id_patient_in   IN icnp_epis_diagnosis.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eipd_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eipd_pat_fk;

    PROCEDURE del_eipd_prof_cancels_fk
    (
        id_cancel_prof_in IN icnp_epis_diagnosis.id_cancel_prof%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_cancel_prof = del_eipd_prof_cancels_fk.id_cancel_prof_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eipd_prof_cancels_fk;

    PROCEDURE del_eipd_prof_cancels_fk
    (
        id_cancel_prof_in IN icnp_epis_diagnosis.id_cancel_prof%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eipd_prof_cancels_fk(id_cancel_prof_in => id_cancel_prof_in,
                                 handle_error_in   => handle_error_in,
                                 rows_out          => rows_out);
    END del_eipd_prof_cancels_fk;

    PROCEDURE del_eipd_prof_canc_fk
    (
        id_prof_close_in IN icnp_epis_diagnosis.id_prof_close%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_prof_close = del_eipd_prof_canc_fk.id_prof_close_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eipd_prof_canc_fk;

    PROCEDURE del_eipd_prof_canc_fk
    (
        id_prof_close_in IN icnp_epis_diagnosis.id_prof_close%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eipd_prof_canc_fk(id_prof_close_in => id_prof_close_in,
                              handle_error_in  => handle_error_in,
                              rows_out         => rows_out);
    END del_eipd_prof_canc_fk;

    PROCEDURE del_eipd_prof_fk
    (
        id_professional_in IN icnp_epis_diagnosis.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_professional = del_eipd_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eipd_prof_fk;

    PROCEDURE del_eipd_prof_fk
    (
        id_professional_in IN icnp_epis_diagnosis.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eipd_prof_fk(id_professional_in => id_professional_in,
                         handle_error_in    => handle_error_in,
                         rows_out           => rows_out);
    END del_eipd_prof_fk;

    PROCEDURE del_eipd_prof_susp_fk
    (
        id_suspend_prof_in IN icnp_epis_diagnosis.id_suspend_prof%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_suspend_prof = del_eipd_prof_susp_fk.id_suspend_prof_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eipd_prof_susp_fk;

    PROCEDURE del_eipd_prof_susp_fk
    (
        id_suspend_prof_in IN icnp_epis_diagnosis.id_suspend_prof%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eipd_prof_susp_fk(id_suspend_prof_in => id_suspend_prof_in,
                              handle_error_in    => handle_error_in,
                              rows_out           => rows_out);
    END del_eipd_prof_susp_fk;

    PROCEDURE del_eipd_prof_upd_fk
    (
        id_prof_last_update_in IN icnp_epis_diagnosis.id_prof_last_update%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_prof_last_update = del_eipd_prof_upd_fk.id_prof_last_update_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eipd_prof_upd_fk;

    PROCEDURE del_eipd_prof_upd_fk
    (
        id_prof_last_update_in IN icnp_epis_diagnosis.id_prof_last_update%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eipd_prof_upd_fk(id_prof_last_update_in => id_prof_last_update_in,
                             handle_error_in        => handle_error_in,
                             rows_out               => rows_out);
    END del_eipd_prof_upd_fk;

    PROCEDURE del_eipd_vis_fk
    (
        id_visit_in     IN icnp_epis_diagnosis.id_visit%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE id_visit = del_eipd_vis_fk.id_visit_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_eipd_vis_fk;

    PROCEDURE del_eipd_vis_fk
    (
        id_visit_in     IN icnp_epis_diagnosis.id_visit%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eipd_vis_fk(id_visit_in => id_visit_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eipd_vis_fk;

    PROCEDURE del_ieipd_icn2_fk
    (
        icnp_compo_reeval_in IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_epis_diagnosis
         WHERE icnp_compo_reeval = del_ieipd_icn2_fk.icnp_compo_reeval_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ieipd_icn2_fk;

    PROCEDURE del_ieipd_icn2_fk
    (
        icnp_compo_reeval_in IN icnp_epis_diagnosis.icnp_compo_reeval%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ieipd_icn2_fk(icnp_compo_reeval_in => icnp_compo_reeval_in,
                          handle_error_in      => handle_error_in,
                          rows_out             => rows_out);
    END del_ieipd_icn2_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM ICNP_EPIS_DIAGNOSIS';
        ELSE
            RETURN 'DELETE FROM ICNP_EPIS_DIAGNOSIS WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_EPIS_DIAGNOSIS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_EPIS_DIAGNOSIS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(icnp_epis_diagnosis_inout IN OUT icnp_epis_diagnosis%ROWTYPE) IS
    BEGIN
        icnp_epis_diagnosis_inout.id_icnp_epis_diag      := NULL;
        icnp_epis_diagnosis_inout.id_composition         := NULL;
        icnp_epis_diagnosis_inout.id_professional        := NULL;
        icnp_epis_diagnosis_inout.flg_status             := NULL;
        icnp_epis_diagnosis_inout.id_episode             := NULL;
        icnp_epis_diagnosis_inout.notes                  := NULL;
        icnp_epis_diagnosis_inout.id_parent              := NULL;
        icnp_epis_diagnosis_inout.id_prof_close          := NULL;
        icnp_epis_diagnosis_inout.notes_close            := NULL;
        icnp_epis_diagnosis_inout.id_patient             := NULL;
        icnp_epis_diagnosis_inout.dt_icnp_epis_diag_tstz := NULL;
        icnp_epis_diagnosis_inout.dt_close_tstz          := NULL;
        icnp_epis_diagnosis_inout.id_visit               := NULL;
        icnp_epis_diagnosis_inout.id_epis_type           := NULL;
        icnp_epis_diagnosis_inout.flg_executions         := NULL;
        icnp_epis_diagnosis_inout.create_user            := NULL;
        icnp_epis_diagnosis_inout.create_time            := NULL;
        icnp_epis_diagnosis_inout.create_institution     := NULL;
        icnp_epis_diagnosis_inout.update_user            := NULL;
        icnp_epis_diagnosis_inout.update_time            := NULL;
        icnp_epis_diagnosis_inout.update_institution     := NULL;
        icnp_epis_diagnosis_inout.icnp_compo_reeval      := NULL;
        icnp_epis_diagnosis_inout.id_prof_last_update    := NULL;
        icnp_epis_diagnosis_inout.dt_last_update         := NULL;
        icnp_epis_diagnosis_inout.id_suspend_reason      := NULL;
        icnp_epis_diagnosis_inout.id_suspend_prof        := NULL;
        icnp_epis_diagnosis_inout.suspend_notes          := NULL;
        icnp_epis_diagnosis_inout.dt_suspend             := NULL;
        icnp_epis_diagnosis_inout.id_cancel_reason       := NULL;
        icnp_epis_diagnosis_inout.id_cancel_prof         := NULL;
        icnp_epis_diagnosis_inout.cancel_notes           := NULL;
        icnp_epis_diagnosis_inout.dt_cancel              := NULL;
    END initrec;

    FUNCTION initrec RETURN icnp_epis_diagnosis%ROWTYPE IS
        l_icnp_epis_diagnosis icnp_epis_diagnosis%ROWTYPE;
    BEGIN
        RETURN l_icnp_epis_diagnosis;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN icnp_epis_diagnosis_tc IS
        data icnp_epis_diagnosis_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM icnp_epis_diagnosis
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN icnp_epis_diagnosis_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data icnp_epis_diagnosis_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_icnp_epis_diagnosis;
/
