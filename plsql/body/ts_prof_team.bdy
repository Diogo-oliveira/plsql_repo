/*-- Last Change Revision: $Rev: 2028342 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:14 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_prof_team
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2020-01-16 14:36:54
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    PROCEDURE ins
    (
        id_prof_team_in        IN prof_team.id_prof_team%TYPE,
        id_prof_team_leader_in IN prof_team.id_prof_team_leader%TYPE DEFAULT NULL,
        prof_team_name_in      IN prof_team.prof_team_name%TYPE DEFAULT NULL,
        prof_team_desc_in      IN prof_team.prof_team_desc%TYPE DEFAULT NULL,
        flg_available_in       IN prof_team.flg_available%TYPE DEFAULT NULL,
        flg_status_in          IN prof_team.flg_status%TYPE DEFAULT NULL,
        id_software_in         IN prof_team.id_software%TYPE DEFAULT NULL,
        id_institution_in      IN prof_team.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN prof_team.adw_last_update%TYPE DEFAULT NULL,
        flg_type_in            IN prof_team.flg_type%TYPE DEFAULT NULL,
        dt_begin_tstz_in       IN prof_team.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN prof_team.dt_end_tstz%TYPE DEFAULT NULL,
        id_prof_team_old_in    IN prof_team.id_prof_team_old%TYPE DEFAULT NULL,
        id_department_in       IN prof_team.id_department%TYPE DEFAULT NULL,
        notes_in               IN prof_team.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN prof_team.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN prof_team.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN prof_team.dt_cancel%TYPE DEFAULT NULL,
        num_members_in         IN prof_team.num_members%TYPE DEFAULT NULL,
        create_time_in         IN prof_team.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN prof_team.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN prof_team.update_user%TYPE DEFAULT NULL,
        update_time_in         IN prof_team.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN prof_team.update_institution%TYPE DEFAULT NULL,
        id_prof_register_in    IN prof_team.id_prof_register%TYPE DEFAULT NULL,
        dt_register_in         IN prof_team.dt_register%TYPE DEFAULT NULL,
        id_team_type_in        IN prof_team.id_team_type%TYPE DEFAULT NULL,
        create_user_in         IN prof_team.create_user%TYPE DEFAULT NULL,
        id_episode_in          IN prof_team.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO prof_team
            (id_prof_team,
             id_prof_team_leader,
             prof_team_name,
             prof_team_desc,
             flg_available,
             flg_status,
             id_software,
             id_institution,
             adw_last_update,
             flg_type,
             dt_begin_tstz,
             dt_end_tstz,
             id_prof_team_old,
             id_department,
             notes,
             id_cancel_reason,
             notes_cancel,
             dt_cancel,
             num_members,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_prof_register,
             dt_register,
             id_team_type,
             create_user,
             id_episode)
        VALUES
            (id_prof_team_in,
             id_prof_team_leader_in,
             prof_team_name_in,
             prof_team_desc_in,
             flg_available_in,
             flg_status_in,
             id_software_in,
             id_institution_in,
             adw_last_update_in,
             flg_type_in,
             dt_begin_tstz_in,
             dt_end_tstz_in,
             id_prof_team_old_in,
             id_department_in,
             notes_in,
             id_cancel_reason_in,
             notes_cancel_in,
             dt_cancel_in,
             num_members_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_prof_register_in,
             dt_register_in,
             id_team_type_in,
             create_user_in,
             id_episode_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END ins;

    PROCEDURE ins
    (
        id_prof_team_in        IN prof_team.id_prof_team%TYPE,
        id_prof_team_leader_in IN prof_team.id_prof_team_leader%TYPE DEFAULT NULL,
        prof_team_name_in      IN prof_team.prof_team_name%TYPE DEFAULT NULL,
        prof_team_desc_in      IN prof_team.prof_team_desc%TYPE DEFAULT NULL,
        flg_available_in       IN prof_team.flg_available%TYPE DEFAULT NULL,
        flg_status_in          IN prof_team.flg_status%TYPE DEFAULT NULL,
        id_software_in         IN prof_team.id_software%TYPE DEFAULT NULL,
        id_institution_in      IN prof_team.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN prof_team.adw_last_update%TYPE DEFAULT NULL,
        flg_type_in            IN prof_team.flg_type%TYPE DEFAULT NULL,
        dt_begin_tstz_in       IN prof_team.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN prof_team.dt_end_tstz%TYPE DEFAULT NULL,
        id_prof_team_old_in    IN prof_team.id_prof_team_old%TYPE DEFAULT NULL,
        id_department_in       IN prof_team.id_department%TYPE DEFAULT NULL,
        notes_in               IN prof_team.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN prof_team.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN prof_team.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN prof_team.dt_cancel%TYPE DEFAULT NULL,
        num_members_in         IN prof_team.num_members%TYPE DEFAULT NULL,
        create_time_in         IN prof_team.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN prof_team.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN prof_team.update_user%TYPE DEFAULT NULL,
        update_time_in         IN prof_team.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN prof_team.update_institution%TYPE DEFAULT NULL,
        id_prof_register_in    IN prof_team.id_prof_register%TYPE DEFAULT NULL,
        dt_register_in         IN prof_team.dt_register%TYPE DEFAULT NULL,
        id_team_type_in        IN prof_team.id_team_type%TYPE DEFAULT NULL,
        create_user_in         IN prof_team.create_user%TYPE DEFAULT NULL,
        id_episode_in          IN prof_team.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_prof_team_in        => id_prof_team_in,
            id_prof_team_leader_in => id_prof_team_leader_in,
            prof_team_name_in      => prof_team_name_in,
            prof_team_desc_in      => prof_team_desc_in,
            flg_available_in       => flg_available_in,
            flg_status_in          => flg_status_in,
            id_software_in         => id_software_in,
            id_institution_in      => id_institution_in,
            adw_last_update_in     => adw_last_update_in,
            flg_type_in            => flg_type_in,
            dt_begin_tstz_in       => dt_begin_tstz_in,
            dt_end_tstz_in         => dt_end_tstz_in,
            id_prof_team_old_in    => id_prof_team_old_in,
            id_department_in       => id_department_in,
            notes_in               => notes_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            num_members_in         => num_members_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_prof_register_in    => id_prof_register_in,
            dt_register_in         => dt_register_in,
            id_team_type_in        => id_team_type_in,
            create_user_in         => create_user_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN prof_team%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec prof_team%ROWTYPE := rec_in;
    BEGIN

        ins(id_prof_team_in        => l_rec.id_prof_team,
            id_prof_team_leader_in => l_rec.id_prof_team_leader,
            prof_team_name_in      => l_rec.prof_team_name,
            prof_team_desc_in      => l_rec.prof_team_desc,
            flg_available_in       => l_rec.flg_available,
            flg_status_in          => l_rec.flg_status,
            id_software_in         => l_rec.id_software,
            id_institution_in      => l_rec.id_institution,
            adw_last_update_in     => l_rec.adw_last_update,
            flg_type_in            => l_rec.flg_type,
            dt_begin_tstz_in       => l_rec.dt_begin_tstz,
            dt_end_tstz_in         => l_rec.dt_end_tstz,
            id_prof_team_old_in    => l_rec.id_prof_team_old,
            id_department_in       => l_rec.id_department,
            notes_in               => l_rec.notes,
            id_cancel_reason_in    => l_rec.id_cancel_reason,
            notes_cancel_in        => l_rec.notes_cancel,
            dt_cancel_in           => l_rec.dt_cancel,
            num_members_in         => l_rec.num_members,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            id_prof_register_in    => l_rec.id_prof_register,
            dt_register_in         => l_rec.dt_register,
            id_team_type_in        => l_rec.id_team_type,
            create_user_in         => l_rec.create_user,
            id_episode_in          => l_rec.id_episode,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN prof_team%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN prof_team_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO prof_team
                    (id_prof_team,
                     id_prof_team_leader,
                     prof_team_name,
                     prof_team_desc,
                     flg_available,
                     flg_status,
                     id_software,
                     id_institution,
                     adw_last_update,
                     flg_type,
                     dt_begin_tstz,
                     dt_end_tstz,
                     id_prof_team_old,
                     id_department,
                     notes,
                     id_cancel_reason,
                     notes_cancel,
                     dt_cancel,
                     num_members,
                     id_prof_register,
                     dt_register,
                     id_team_type,
                     id_episode)
                VALUES
                    (rows_in(indx).id_prof_team,
                     rows_in(indx).id_prof_team_leader,
                     rows_in(indx).prof_team_name,
                     rows_in(indx).prof_team_desc,
                     rows_in(indx).flg_available,
                     rows_in(indx).flg_status,
                     rows_in(indx).id_software,
                     rows_in(indx).id_institution,
                     rows_in(indx).adw_last_update,
                     rows_in(indx).flg_type,
                     rows_in(indx).dt_begin_tstz,
                     rows_in(indx).dt_end_tstz,
                     rows_in(indx).id_prof_team_old,
                     rows_in(indx).id_department,
                     rows_in(indx).notes,
                     rows_in(indx).id_cancel_reason,
                     rows_in(indx).notes_cancel,
                     rows_in(indx).dt_cancel,
                     rows_in(indx).num_members,
                     rows_in(indx).id_prof_register,
                     rows_in(indx).dt_register,
                     rows_in(indx).id_team_type,
                     rows_in(indx).id_episode)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;

    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN prof_team_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_prof_team_in         IN prof_team.id_prof_team%TYPE,
        id_prof_team_leader_in  IN prof_team.id_prof_team_leader%TYPE DEFAULT NULL,
        id_prof_team_leader_nin IN BOOLEAN := TRUE,
        prof_team_name_in       IN prof_team.prof_team_name%TYPE DEFAULT NULL,
        prof_team_name_nin      IN BOOLEAN := TRUE,
        prof_team_desc_in       IN prof_team.prof_team_desc%TYPE DEFAULT NULL,
        prof_team_desc_nin      IN BOOLEAN := TRUE,
        flg_available_in        IN prof_team.flg_available%TYPE DEFAULT NULL,
        flg_available_nin       IN BOOLEAN := TRUE,
        flg_status_in           IN prof_team.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_software_in          IN prof_team.id_software%TYPE DEFAULT NULL,
        id_software_nin         IN BOOLEAN := TRUE,
        id_institution_in       IN prof_team.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        adw_last_update_in      IN prof_team.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        flg_type_in             IN prof_team.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        dt_begin_tstz_in        IN prof_team.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin       IN BOOLEAN := TRUE,
        dt_end_tstz_in          IN prof_team.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin         IN BOOLEAN := TRUE,
        id_prof_team_old_in     IN prof_team.id_prof_team_old%TYPE DEFAULT NULL,
        id_prof_team_old_nin    IN BOOLEAN := TRUE,
        id_department_in        IN prof_team.id_department%TYPE DEFAULT NULL,
        id_department_nin       IN BOOLEAN := TRUE,
        notes_in                IN prof_team.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN prof_team.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN prof_team.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        dt_cancel_in            IN prof_team.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        num_members_in          IN prof_team.num_members%TYPE DEFAULT NULL,
        num_members_nin         IN BOOLEAN := TRUE,
        create_time_in          IN prof_team.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN prof_team.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN prof_team.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN prof_team.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN prof_team.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_prof_register_in     IN prof_team.id_prof_register%TYPE DEFAULT NULL,
        id_prof_register_nin    IN BOOLEAN := TRUE,
        dt_register_in          IN prof_team.dt_register%TYPE DEFAULT NULL,
        dt_register_nin         IN BOOLEAN := TRUE,
        id_team_type_in         IN prof_team.id_team_type%TYPE DEFAULT NULL,
        id_team_type_nin        IN BOOLEAN := TRUE,
        create_user_in          IN prof_team.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        id_episode_in           IN prof_team.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_prof_team_leader_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_team_leader_nin);
        l_prof_team_name_n      NUMBER(1) := sys.diutil.bool_to_int(prof_team_name_nin);
        l_prof_team_desc_n      NUMBER(1) := sys.diutil.bool_to_int(prof_team_desc_nin);
        l_flg_available_n       NUMBER(1) := sys.diutil.bool_to_int(flg_available_nin);
        l_flg_status_n          NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_software_n         NUMBER(1) := sys.diutil.bool_to_int(id_software_nin);
        l_id_institution_n      NUMBER(1) := sys.diutil.bool_to_int(id_institution_nin);
        l_adw_last_update_n     NUMBER(1) := sys.diutil.bool_to_int(adw_last_update_nin);
        l_flg_type_n            NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_dt_begin_tstz_n       NUMBER(1) := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_end_tstz_n         NUMBER(1) := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_id_prof_team_old_n    NUMBER(1) := sys.diutil.bool_to_int(id_prof_team_old_nin);
        l_id_department_n       NUMBER(1) := sys.diutil.bool_to_int(id_department_nin);
        l_notes_n               NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n        NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_dt_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_nin);
        l_num_members_n         NUMBER(1) := sys.diutil.bool_to_int(num_members_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prof_register_n    NUMBER(1) := sys.diutil.bool_to_int(id_prof_register_nin);
        l_dt_register_n         NUMBER(1) := sys.diutil.bool_to_int(dt_register_nin);
        l_id_team_type_n        NUMBER(1) := sys.diutil.bool_to_int(id_team_type_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_id_episode_n          NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
    BEGIN

        UPDATE prof_team
           SET id_prof_team_leader = decode(l_id_prof_team_leader_n,
                                            0,
                                            id_prof_team_leader_in,
                                            nvl(id_prof_team_leader_in, id_prof_team_leader)),
               prof_team_name      = decode(l_prof_team_name_n,
                                            0,
                                            prof_team_name_in,
                                            nvl(prof_team_name_in, prof_team_name)),
               prof_team_desc      = decode(l_prof_team_desc_n,
                                            0,
                                            prof_team_desc_in,
                                            nvl(prof_team_desc_in, prof_team_desc)),
               flg_available       = decode(l_flg_available_n, 0, flg_available_in, nvl(flg_available_in, flg_available)),
               flg_status          = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_software         = decode(l_id_software_n, 0, id_software_in, nvl(id_software_in, id_software)),
               id_institution      = decode(l_id_institution_n,
                                            0,
                                            id_institution_in,
                                            nvl(id_institution_in, id_institution)),
               adw_last_update     = decode(l_adw_last_update_n,
                                            0,
                                            adw_last_update_in,
                                            nvl(adw_last_update_in, adw_last_update)),
               flg_type            = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               dt_begin_tstz       = decode(l_dt_begin_tstz_n, 0, dt_begin_tstz_in, nvl(dt_begin_tstz_in, dt_begin_tstz)),
               dt_end_tstz         = decode(l_dt_end_tstz_n, 0, dt_end_tstz_in, nvl(dt_end_tstz_in, dt_end_tstz)),
               id_prof_team_old    = decode(l_id_prof_team_old_n,
                                            0,
                                            id_prof_team_old_in,
                                            nvl(id_prof_team_old_in, id_prof_team_old)),
               id_department       = decode(l_id_department_n, 0, id_department_in, nvl(id_department_in, id_department)),
               notes               = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_cancel_reason    = decode(l_id_cancel_reason_n,
                                            0,
                                            id_cancel_reason_in,
                                            nvl(id_cancel_reason_in, id_cancel_reason)),
               notes_cancel        = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               dt_cancel           = decode(l_dt_cancel_n, 0, dt_cancel_in, nvl(dt_cancel_in, dt_cancel)),
               num_members         = decode(l_num_members_n, 0, num_members_in, nvl(num_members_in, num_members)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution)),
               id_prof_register    = decode(l_id_prof_register_n,
                                            0,
                                            id_prof_register_in,
                                            nvl(id_prof_register_in, id_prof_register)),
               dt_register         = decode(l_dt_register_n, 0, dt_register_in, nvl(dt_register_in, dt_register)),
               id_team_type        = decode(l_id_team_type_n, 0, id_team_type_in, nvl(id_team_type_in, id_team_type)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               id_episode          = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode))
         WHERE id_prof_team = id_prof_team_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_prof_team_in         IN prof_team.id_prof_team%TYPE,
        id_prof_team_leader_in  IN prof_team.id_prof_team_leader%TYPE DEFAULT NULL,
        id_prof_team_leader_nin IN BOOLEAN := TRUE,
        prof_team_name_in       IN prof_team.prof_team_name%TYPE DEFAULT NULL,
        prof_team_name_nin      IN BOOLEAN := TRUE,
        prof_team_desc_in       IN prof_team.prof_team_desc%TYPE DEFAULT NULL,
        prof_team_desc_nin      IN BOOLEAN := TRUE,
        flg_available_in        IN prof_team.flg_available%TYPE DEFAULT NULL,
        flg_available_nin       IN BOOLEAN := TRUE,
        flg_status_in           IN prof_team.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_software_in          IN prof_team.id_software%TYPE DEFAULT NULL,
        id_software_nin         IN BOOLEAN := TRUE,
        id_institution_in       IN prof_team.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        adw_last_update_in      IN prof_team.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        flg_type_in             IN prof_team.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        dt_begin_tstz_in        IN prof_team.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin       IN BOOLEAN := TRUE,
        dt_end_tstz_in          IN prof_team.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin         IN BOOLEAN := TRUE,
        id_prof_team_old_in     IN prof_team.id_prof_team_old%TYPE DEFAULT NULL,
        id_prof_team_old_nin    IN BOOLEAN := TRUE,
        id_department_in        IN prof_team.id_department%TYPE DEFAULT NULL,
        id_department_nin       IN BOOLEAN := TRUE,
        notes_in                IN prof_team.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN prof_team.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN prof_team.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        dt_cancel_in            IN prof_team.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        num_members_in          IN prof_team.num_members%TYPE DEFAULT NULL,
        num_members_nin         IN BOOLEAN := TRUE,
        create_time_in          IN prof_team.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN prof_team.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN prof_team.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN prof_team.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN prof_team.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_prof_register_in     IN prof_team.id_prof_register%TYPE DEFAULT NULL,
        id_prof_register_nin    IN BOOLEAN := TRUE,
        dt_register_in          IN prof_team.dt_register%TYPE DEFAULT NULL,
        dt_register_nin         IN BOOLEAN := TRUE,
        id_team_type_in         IN prof_team.id_team_type%TYPE DEFAULT NULL,
        id_team_type_nin        IN BOOLEAN := TRUE,
        create_user_in          IN prof_team.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        id_episode_in           IN prof_team.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_prof_team_in         => id_prof_team_in,
            id_prof_team_leader_in  => id_prof_team_leader_in,
            id_prof_team_leader_nin => id_prof_team_leader_nin,
            prof_team_name_in       => prof_team_name_in,
            prof_team_name_nin      => prof_team_name_nin,
            prof_team_desc_in       => prof_team_desc_in,
            prof_team_desc_nin      => prof_team_desc_nin,
            flg_available_in        => flg_available_in,
            flg_available_nin       => flg_available_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            id_software_in          => id_software_in,
            id_software_nin         => id_software_nin,
            id_institution_in       => id_institution_in,
            id_institution_nin      => id_institution_nin,
            adw_last_update_in      => adw_last_update_in,
            adw_last_update_nin     => adw_last_update_nin,
            flg_type_in             => flg_type_in,
            flg_type_nin            => flg_type_nin,
            dt_begin_tstz_in        => dt_begin_tstz_in,
            dt_begin_tstz_nin       => dt_begin_tstz_nin,
            dt_end_tstz_in          => dt_end_tstz_in,
            dt_end_tstz_nin         => dt_end_tstz_nin,
            id_prof_team_old_in     => id_prof_team_old_in,
            id_prof_team_old_nin    => id_prof_team_old_nin,
            id_department_in        => id_department_in,
            id_department_nin       => id_department_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            id_cancel_reason_in     => id_cancel_reason_in,
            id_cancel_reason_nin    => id_cancel_reason_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            dt_cancel_in            => dt_cancel_in,
            dt_cancel_nin           => dt_cancel_nin,
            num_members_in          => num_members_in,
            num_members_nin         => num_members_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            id_prof_register_in     => id_prof_register_in,
            id_prof_register_nin    => id_prof_register_nin,
            dt_register_in          => dt_register_in,
            dt_register_nin         => dt_register_nin,
            id_team_type_in         => id_team_type_in,
            id_team_type_nin        => id_team_type_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_prof_team_leader_in  IN prof_team.id_prof_team_leader%TYPE DEFAULT NULL,
        id_prof_team_leader_nin IN BOOLEAN := TRUE,
        prof_team_name_in       IN prof_team.prof_team_name%TYPE DEFAULT NULL,
        prof_team_name_nin      IN BOOLEAN := TRUE,
        prof_team_desc_in       IN prof_team.prof_team_desc%TYPE DEFAULT NULL,
        prof_team_desc_nin      IN BOOLEAN := TRUE,
        flg_available_in        IN prof_team.flg_available%TYPE DEFAULT NULL,
        flg_available_nin       IN BOOLEAN := TRUE,
        flg_status_in           IN prof_team.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_software_in          IN prof_team.id_software%TYPE DEFAULT NULL,
        id_software_nin         IN BOOLEAN := TRUE,
        id_institution_in       IN prof_team.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        adw_last_update_in      IN prof_team.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        flg_type_in             IN prof_team.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        dt_begin_tstz_in        IN prof_team.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin       IN BOOLEAN := TRUE,
        dt_end_tstz_in          IN prof_team.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin         IN BOOLEAN := TRUE,
        id_prof_team_old_in     IN prof_team.id_prof_team_old%TYPE DEFAULT NULL,
        id_prof_team_old_nin    IN BOOLEAN := TRUE,
        id_department_in        IN prof_team.id_department%TYPE DEFAULT NULL,
        id_department_nin       IN BOOLEAN := TRUE,
        notes_in                IN prof_team.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN prof_team.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN prof_team.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        dt_cancel_in            IN prof_team.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        num_members_in          IN prof_team.num_members%TYPE DEFAULT NULL,
        num_members_nin         IN BOOLEAN := TRUE,
        create_time_in          IN prof_team.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN prof_team.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN prof_team.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN prof_team.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN prof_team.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_prof_register_in     IN prof_team.id_prof_register%TYPE DEFAULT NULL,
        id_prof_register_nin    IN BOOLEAN := TRUE,
        dt_register_in          IN prof_team.dt_register%TYPE DEFAULT NULL,
        dt_register_nin         IN BOOLEAN := TRUE,
        id_team_type_in         IN prof_team.id_team_type%TYPE DEFAULT NULL,
        id_team_type_nin        IN BOOLEAN := TRUE,
        create_user_in          IN prof_team.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        id_episode_in           IN prof_team.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_prof_team_leader_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_team_leader_nin);
        l_prof_team_name_n      NUMBER(1) := sys.diutil.bool_to_int(prof_team_name_nin);
        l_prof_team_desc_n      NUMBER(1) := sys.diutil.bool_to_int(prof_team_desc_nin);
        l_flg_available_n       NUMBER(1) := sys.diutil.bool_to_int(flg_available_nin);
        l_flg_status_n          NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_software_n         NUMBER(1) := sys.diutil.bool_to_int(id_software_nin);
        l_id_institution_n      NUMBER(1) := sys.diutil.bool_to_int(id_institution_nin);
        l_adw_last_update_n     NUMBER(1) := sys.diutil.bool_to_int(adw_last_update_nin);
        l_flg_type_n            NUMBER(1) := sys.diutil.bool_to_int(flg_type_nin);
        l_dt_begin_tstz_n       NUMBER(1) := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_end_tstz_n         NUMBER(1) := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_id_prof_team_old_n    NUMBER(1) := sys.diutil.bool_to_int(id_prof_team_old_nin);
        l_id_department_n       NUMBER(1) := sys.diutil.bool_to_int(id_department_nin);
        l_notes_n               NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n        NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_dt_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_nin);
        l_num_members_n         NUMBER(1) := sys.diutil.bool_to_int(num_members_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prof_register_n    NUMBER(1) := sys.diutil.bool_to_int(id_prof_register_nin);
        l_dt_register_n         NUMBER(1) := sys.diutil.bool_to_int(dt_register_nin);
        l_id_team_type_n        NUMBER(1) := sys.diutil.bool_to_int(id_team_type_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_id_episode_n          NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
    BEGIN
        l_id_prof_team_leader_n := sys.diutil.bool_to_int(id_prof_team_leader_nin);
        l_prof_team_name_n      := sys.diutil.bool_to_int(prof_team_name_nin);
        l_prof_team_desc_n      := sys.diutil.bool_to_int(prof_team_desc_nin);
        l_flg_available_n       := sys.diutil.bool_to_int(flg_available_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_id_software_n         := sys.diutil.bool_to_int(id_software_nin);
        l_id_institution_n      := sys.diutil.bool_to_int(id_institution_nin);
        l_adw_last_update_n     := sys.diutil.bool_to_int(adw_last_update_nin);
        l_flg_type_n            := sys.diutil.bool_to_int(flg_type_nin);
        l_dt_begin_tstz_n       := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_end_tstz_n         := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_id_prof_team_old_n    := sys.diutil.bool_to_int(id_prof_team_old_nin);
        l_id_department_n       := sys.diutil.bool_to_int(id_department_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n    := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n        := sys.diutil.bool_to_int(notes_cancel_nin);
        l_dt_cancel_n           := sys.diutil.bool_to_int(dt_cancel_nin);
        l_num_members_n         := sys.diutil.bool_to_int(num_members_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prof_register_n    := sys.diutil.bool_to_int(id_prof_register_nin);
        l_dt_register_n         := sys.diutil.bool_to_int(dt_register_nin);
        l_id_team_type_n        := sys.diutil.bool_to_int(id_team_type_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_sql                   := 'UPDATE prof_team SET' || ' ID_PROF_TEAM_LEADER = decode (' ||
                                   l_id_prof_team_leader_n ||
                                   ',0,:ID_PROF_TEAM_LEADER_in, NVL (:ID_PROF_TEAM_LEADER_in, ID_PROF_TEAM_LEADER)) ' || ',' ||
                                   ' PROF_TEAM_NAME = decode (' || l_prof_team_name_n ||
                                   ',0,:PROF_TEAM_NAME_in, NVL (:PROF_TEAM_NAME_in, PROF_TEAM_NAME)) ' || ',' ||
                                   ' PROF_TEAM_DESC = decode (' || l_prof_team_desc_n ||
                                   ',0,:PROF_TEAM_DESC_in, NVL (:PROF_TEAM_DESC_in, PROF_TEAM_DESC)) ' || ',' ||
                                   ' FLG_AVAILABLE = decode (' || l_flg_available_n ||
                                   ',0,:FLG_AVAILABLE_in, NVL (:FLG_AVAILABLE_in, FLG_AVAILABLE)) ' || ',' ||
                                   ' FLG_STATUS = decode (' || l_flg_status_n ||
                                   ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                   ' ID_SOFTWARE = decode (' || l_id_software_n ||
                                   ',0,:ID_SOFTWARE_in, NVL (:ID_SOFTWARE_in, ID_SOFTWARE)) ' || ',' ||
                                   ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                                   ',0,:ID_INSTITUTION_in, NVL (:ID_INSTITUTION_in, ID_INSTITUTION)) ' || ',' ||
                                   ' ADW_LAST_UPDATE = decode (' || l_adw_last_update_n ||
                                   ',0,:ADW_LAST_UPDATE_in, NVL (:ADW_LAST_UPDATE_in, ADW_LAST_UPDATE)) ' || ',' ||
                                   ' FLG_TYPE = decode (' || l_flg_type_n ||
                                   ',0,:FLG_TYPE_in, NVL (:FLG_TYPE_in, FLG_TYPE)) ' || ',' ||
                                   ' DT_BEGIN_TSTZ = decode (' || l_dt_begin_tstz_n ||
                                   ',0,:DT_BEGIN_TSTZ_in, NVL (:DT_BEGIN_TSTZ_in, DT_BEGIN_TSTZ)) ' || ',' ||
                                   ' DT_END_TSTZ = decode (' || l_dt_end_tstz_n ||
                                   ',0,:DT_END_TSTZ_in, NVL (:DT_END_TSTZ_in, DT_END_TSTZ)) ' || ',' ||
                                   ' ID_PROF_TEAM_OLD = decode (' || l_id_prof_team_old_n ||
                                   ',0,:ID_PROF_TEAM_OLD_in, NVL (:ID_PROF_TEAM_OLD_in, ID_PROF_TEAM_OLD)) ' || ',' ||
                                   ' ID_DEPARTMENT = decode (' || l_id_department_n ||
                                   ',0,:ID_DEPARTMENT_in, NVL (:ID_DEPARTMENT_in, ID_DEPARTMENT)) ' || ',' ||
                                   ' NOTES = decode (' || l_notes_n || ',0,:NOTES_in, NVL (:NOTES_in, NOTES)) ' || ',' ||
                                   ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                                   ',0,:ID_CANCEL_REASON_in, NVL (:ID_CANCEL_REASON_in, ID_CANCEL_REASON)) ' || ',' ||
                                   ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                                   ',0,:NOTES_CANCEL_in, NVL (:NOTES_CANCEL_in, NOTES_CANCEL)) ' || ',' ||
                                   ' DT_CANCEL = decode (' || l_dt_cancel_n ||
                                   ',0,:DT_CANCEL_in, NVL (:DT_CANCEL_in, DT_CANCEL)) ' || ',' ||
                                   ' NUM_MEMBERS = decode (' || l_num_members_n ||
                                   ',0,:NUM_MEMBERS_in, NVL (:NUM_MEMBERS_in, NUM_MEMBERS)) ' || ',' ||
                                   ' CREATE_TIME = decode (' || l_create_time_n ||
                                   ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                   ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                   ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                   ' UPDATE_USER = decode (' || l_update_user_n ||
                                   ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                   ' UPDATE_TIME = decode (' || l_update_time_n ||
                                   ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                   ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                   ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                   ' ID_PROF_REGISTER = decode (' || l_id_prof_register_n ||
                                   ',0,:ID_PROF_REGISTER_in, NVL (:ID_PROF_REGISTER_in, ID_PROF_REGISTER)) ' || ',' ||
                                   ' DT_REGISTER = decode (' || l_dt_register_n ||
                                   ',0,:DT_REGISTER_in, NVL (:DT_REGISTER_in, DT_REGISTER)) ' || ',' ||
                                   ' ID_TEAM_TYPE = decode (' || l_id_team_type_n ||
                                   ',0,:ID_TEAM_TYPE_in, NVL (:ID_TEAM_TYPE_in, ID_TEAM_TYPE)) ' || ',' ||
                                   ' CREATE_USER = decode (' || l_create_user_n ||
                                   ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                   ' ID_EPISODE = decode (' || l_id_episode_n ||
                                   ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ' where ' ||
                                   nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_prof_team_leader_in, prof_team_name_in, prof_team_desc_in, flg_available_in, flg_status_in, id_software_in, id_institution_in, adw_last_update_in, flg_type_in, dt_begin_tstz_in, dt_end_tstz_in, id_prof_team_old_in, id_department_in, notes_in, id_cancel_reason_in, notes_cancel_in, dt_cancel_in, num_members_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_prof_register_in, dt_register_in, id_team_type_in, create_user_in, id_episode_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_prof_team_leader_in  IN prof_team.id_prof_team_leader%TYPE DEFAULT NULL,
        id_prof_team_leader_nin IN BOOLEAN := TRUE,
        prof_team_name_in       IN prof_team.prof_team_name%TYPE DEFAULT NULL,
        prof_team_name_nin      IN BOOLEAN := TRUE,
        prof_team_desc_in       IN prof_team.prof_team_desc%TYPE DEFAULT NULL,
        prof_team_desc_nin      IN BOOLEAN := TRUE,
        flg_available_in        IN prof_team.flg_available%TYPE DEFAULT NULL,
        flg_available_nin       IN BOOLEAN := TRUE,
        flg_status_in           IN prof_team.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_software_in          IN prof_team.id_software%TYPE DEFAULT NULL,
        id_software_nin         IN BOOLEAN := TRUE,
        id_institution_in       IN prof_team.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        adw_last_update_in      IN prof_team.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        flg_type_in             IN prof_team.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        dt_begin_tstz_in        IN prof_team.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin       IN BOOLEAN := TRUE,
        dt_end_tstz_in          IN prof_team.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin         IN BOOLEAN := TRUE,
        id_prof_team_old_in     IN prof_team.id_prof_team_old%TYPE DEFAULT NULL,
        id_prof_team_old_nin    IN BOOLEAN := TRUE,
        id_department_in        IN prof_team.id_department%TYPE DEFAULT NULL,
        id_department_nin       IN BOOLEAN := TRUE,
        notes_in                IN prof_team.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN prof_team.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN prof_team.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        dt_cancel_in            IN prof_team.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        num_members_in          IN prof_team.num_members%TYPE DEFAULT NULL,
        num_members_nin         IN BOOLEAN := TRUE,
        create_time_in          IN prof_team.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN prof_team.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN prof_team.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN prof_team.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN prof_team.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_prof_register_in     IN prof_team.id_prof_register%TYPE DEFAULT NULL,
        id_prof_register_nin    IN BOOLEAN := TRUE,
        dt_register_in          IN prof_team.dt_register%TYPE DEFAULT NULL,
        dt_register_nin         IN BOOLEAN := TRUE,
        id_team_type_in         IN prof_team.id_team_type%TYPE DEFAULT NULL,
        id_team_type_nin        IN BOOLEAN := TRUE,
        create_user_in          IN prof_team.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        id_episode_in           IN prof_team.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_prof_team_leader_in  => id_prof_team_leader_in,
            id_prof_team_leader_nin => id_prof_team_leader_nin,
            prof_team_name_in       => prof_team_name_in,
            prof_team_name_nin      => prof_team_name_nin,
            prof_team_desc_in       => prof_team_desc_in,
            prof_team_desc_nin      => prof_team_desc_nin,
            flg_available_in        => flg_available_in,
            flg_available_nin       => flg_available_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            id_software_in          => id_software_in,
            id_software_nin         => id_software_nin,
            id_institution_in       => id_institution_in,
            id_institution_nin      => id_institution_nin,
            adw_last_update_in      => adw_last_update_in,
            adw_last_update_nin     => adw_last_update_nin,
            flg_type_in             => flg_type_in,
            flg_type_nin            => flg_type_nin,
            dt_begin_tstz_in        => dt_begin_tstz_in,
            dt_begin_tstz_nin       => dt_begin_tstz_nin,
            dt_end_tstz_in          => dt_end_tstz_in,
            dt_end_tstz_nin         => dt_end_tstz_nin,
            id_prof_team_old_in     => id_prof_team_old_in,
            id_prof_team_old_nin    => id_prof_team_old_nin,
            id_department_in        => id_department_in,
            id_department_nin       => id_department_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            id_cancel_reason_in     => id_cancel_reason_in,
            id_cancel_reason_nin    => id_cancel_reason_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            dt_cancel_in            => dt_cancel_in,
            dt_cancel_nin           => dt_cancel_nin,
            num_members_in          => num_members_in,
            num_members_nin         => num_members_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            id_prof_register_in     => id_prof_register_in,
            id_prof_register_nin    => id_prof_register_nin,
            dt_register_in          => dt_register_in,
            dt_register_nin         => dt_register_nin,
            id_team_type_in         => id_team_type_in,
            id_team_type_nin        => id_team_type_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_prof_team_in        IN prof_team.id_prof_team%TYPE,
        id_prof_team_leader_in IN prof_team.id_prof_team_leader%TYPE DEFAULT NULL,
        prof_team_name_in      IN prof_team.prof_team_name%TYPE DEFAULT NULL,
        prof_team_desc_in      IN prof_team.prof_team_desc%TYPE DEFAULT NULL,
        flg_available_in       IN prof_team.flg_available%TYPE DEFAULT NULL,
        flg_status_in          IN prof_team.flg_status%TYPE DEFAULT NULL,
        id_software_in         IN prof_team.id_software%TYPE DEFAULT NULL,
        id_institution_in      IN prof_team.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN prof_team.adw_last_update%TYPE DEFAULT NULL,
        flg_type_in            IN prof_team.flg_type%TYPE DEFAULT NULL,
        dt_begin_tstz_in       IN prof_team.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN prof_team.dt_end_tstz%TYPE DEFAULT NULL,
        id_prof_team_old_in    IN prof_team.id_prof_team_old%TYPE DEFAULT NULL,
        id_department_in       IN prof_team.id_department%TYPE DEFAULT NULL,
        notes_in               IN prof_team.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN prof_team.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN prof_team.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN prof_team.dt_cancel%TYPE DEFAULT NULL,
        num_members_in         IN prof_team.num_members%TYPE DEFAULT NULL,
        create_time_in         IN prof_team.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN prof_team.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN prof_team.update_user%TYPE DEFAULT NULL,
        update_time_in         IN prof_team.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN prof_team.update_institution%TYPE DEFAULT NULL,
        id_prof_register_in    IN prof_team.id_prof_register%TYPE DEFAULT NULL,
        dt_register_in         IN prof_team.dt_register%TYPE DEFAULT NULL,
        id_team_type_in        IN prof_team.id_team_type%TYPE DEFAULT NULL,
        create_user_in         IN prof_team.create_user%TYPE DEFAULT NULL,
        id_episode_in          IN prof_team.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_prof_team_in        => id_prof_team_in,
            id_prof_team_leader_in => id_prof_team_leader_in,
            prof_team_name_in      => prof_team_name_in,
            prof_team_desc_in      => prof_team_desc_in,
            flg_available_in       => flg_available_in,
            flg_status_in          => flg_status_in,
            id_software_in         => id_software_in,
            id_institution_in      => id_institution_in,
            adw_last_update_in     => adw_last_update_in,
            flg_type_in            => flg_type_in,
            dt_begin_tstz_in       => dt_begin_tstz_in,
            dt_end_tstz_in         => dt_end_tstz_in,
            id_prof_team_old_in    => id_prof_team_old_in,
            id_department_in       => id_department_in,
            notes_in               => notes_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            num_members_in         => num_members_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_prof_register_in    => id_prof_register_in,
            dt_register_in         => dt_register_in,
            id_team_type_in        => id_team_type_in,
            create_user_in         => create_user_in,
            id_episode_in          => id_episode_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_prof_team_in        => id_prof_team_in,
                id_prof_team_leader_in => id_prof_team_leader_in,
                prof_team_name_in      => prof_team_name_in,
                prof_team_desc_in      => prof_team_desc_in,
                flg_available_in       => flg_available_in,
                flg_status_in          => flg_status_in,
                id_software_in         => id_software_in,
                id_institution_in      => id_institution_in,
                adw_last_update_in     => adw_last_update_in,
                flg_type_in            => flg_type_in,
                dt_begin_tstz_in       => dt_begin_tstz_in,
                dt_end_tstz_in         => dt_end_tstz_in,
                id_prof_team_old_in    => id_prof_team_old_in,
                id_department_in       => id_department_in,
                notes_in               => notes_in,
                id_cancel_reason_in    => id_cancel_reason_in,
                notes_cancel_in        => notes_cancel_in,
                dt_cancel_in           => dt_cancel_in,
                num_members_in         => num_members_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                id_prof_register_in    => id_prof_register_in,
                dt_register_in         => dt_register_in,
                id_team_type_in        => id_team_type_in,
                create_user_in         => create_user_in,
                id_episode_in          => id_episode_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_prof_team_in        IN prof_team.id_prof_team%TYPE,
        id_prof_team_leader_in IN prof_team.id_prof_team_leader%TYPE DEFAULT NULL,
        prof_team_name_in      IN prof_team.prof_team_name%TYPE DEFAULT NULL,
        prof_team_desc_in      IN prof_team.prof_team_desc%TYPE DEFAULT NULL,
        flg_available_in       IN prof_team.flg_available%TYPE DEFAULT NULL,
        flg_status_in          IN prof_team.flg_status%TYPE DEFAULT NULL,
        id_software_in         IN prof_team.id_software%TYPE DEFAULT NULL,
        id_institution_in      IN prof_team.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN prof_team.adw_last_update%TYPE DEFAULT NULL,
        flg_type_in            IN prof_team.flg_type%TYPE DEFAULT NULL,
        dt_begin_tstz_in       IN prof_team.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN prof_team.dt_end_tstz%TYPE DEFAULT NULL,
        id_prof_team_old_in    IN prof_team.id_prof_team_old%TYPE DEFAULT NULL,
        id_department_in       IN prof_team.id_department%TYPE DEFAULT NULL,
        notes_in               IN prof_team.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN prof_team.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN prof_team.notes_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN prof_team.dt_cancel%TYPE DEFAULT NULL,
        num_members_in         IN prof_team.num_members%TYPE DEFAULT NULL,
        create_time_in         IN prof_team.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN prof_team.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN prof_team.update_user%TYPE DEFAULT NULL,
        update_time_in         IN prof_team.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN prof_team.update_institution%TYPE DEFAULT NULL,
        id_prof_register_in    IN prof_team.id_prof_register%TYPE DEFAULT NULL,
        dt_register_in         IN prof_team.dt_register%TYPE DEFAULT NULL,
        id_team_type_in        IN prof_team.id_team_type%TYPE DEFAULT NULL,
        create_user_in         IN prof_team.create_user%TYPE DEFAULT NULL,
        id_episode_in          IN prof_team.id_episode%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_prof_team_in,
                id_prof_team_leader_in,
                prof_team_name_in,
                prof_team_desc_in,
                flg_available_in,
                flg_status_in,
                id_software_in,
                id_institution_in,
                adw_last_update_in,
                flg_type_in,
                dt_begin_tstz_in,
                dt_end_tstz_in,
                id_prof_team_old_in,
                id_department_in,
                notes_in,
                id_cancel_reason_in,
                notes_cancel_in,
                dt_cancel_in,
                num_members_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_prof_register_in,
                dt_register_in,
                id_team_type_in,
                create_user_in,
                id_episode_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN prof_team%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_prof_team_in        => rec_in.id_prof_team,
            id_prof_team_leader_in => rec_in.id_prof_team_leader,
            prof_team_name_in      => rec_in.prof_team_name,
            prof_team_desc_in      => rec_in.prof_team_desc,
            flg_available_in       => rec_in.flg_available,
            flg_status_in          => rec_in.flg_status,
            id_software_in         => rec_in.id_software,
            id_institution_in      => rec_in.id_institution,
            adw_last_update_in     => rec_in.adw_last_update,
            flg_type_in            => rec_in.flg_type,
            dt_begin_tstz_in       => rec_in.dt_begin_tstz,
            dt_end_tstz_in         => rec_in.dt_end_tstz,
            id_prof_team_old_in    => rec_in.id_prof_team_old,
            id_department_in       => rec_in.id_department,
            notes_in               => rec_in.notes,
            id_cancel_reason_in    => rec_in.id_cancel_reason,
            notes_cancel_in        => rec_in.notes_cancel,
            dt_cancel_in           => rec_in.dt_cancel,
            num_members_in         => rec_in.num_members,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            id_prof_register_in    => rec_in.id_prof_register,
            dt_register_in         => rec_in.dt_register,
            id_team_type_in        => rec_in.id_team_type,
            create_user_in         => rec_in.create_user,
            id_episode_in          => rec_in.id_episode,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN prof_team%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_prof_team_in        => rec_in.id_prof_team,
            id_prof_team_leader_in => rec_in.id_prof_team_leader,
            prof_team_name_in      => rec_in.prof_team_name,
            prof_team_desc_in      => rec_in.prof_team_desc,
            flg_available_in       => rec_in.flg_available,
            flg_status_in          => rec_in.flg_status,
            id_software_in         => rec_in.id_software,
            id_institution_in      => rec_in.id_institution,
            adw_last_update_in     => rec_in.adw_last_update,
            flg_type_in            => rec_in.flg_type,
            dt_begin_tstz_in       => rec_in.dt_begin_tstz,
            dt_end_tstz_in         => rec_in.dt_end_tstz,
            id_prof_team_old_in    => rec_in.id_prof_team_old,
            id_department_in       => rec_in.id_department,
            notes_in               => rec_in.notes,
            id_cancel_reason_in    => rec_in.id_cancel_reason,
            notes_cancel_in        => rec_in.notes_cancel,
            dt_cancel_in           => rec_in.dt_cancel,
            num_members_in         => rec_in.num_members,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            id_prof_register_in    => rec_in.id_prof_register,
            dt_register_in         => rec_in.dt_register,
            id_team_type_in        => rec_in.id_team_type,
            create_user_in         => rec_in.create_user,
            id_episode_in          => rec_in.id_episode,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN prof_team_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_prof_team        id_prof_team_cc;
        l_id_prof_team_leader id_prof_team_leader_cc;
        l_prof_team_name      prof_team_name_cc;
        l_prof_team_desc      prof_team_desc_cc;
        l_flg_available       flg_available_cc;
        l_flg_status          flg_status_cc;
        l_id_software         id_software_cc;
        l_id_institution      id_institution_cc;
        l_adw_last_update     adw_last_update_cc;
        l_flg_type            flg_type_cc;
        l_dt_begin_tstz       dt_begin_tstz_cc;
        l_dt_end_tstz         dt_end_tstz_cc;
        l_id_prof_team_old    id_prof_team_old_cc;
        l_id_department       id_department_cc;
        l_notes               notes_cc;
        l_id_cancel_reason    id_cancel_reason_cc;
        l_notes_cancel        notes_cancel_cc;
        l_dt_cancel           dt_cancel_cc;
        l_num_members         num_members_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
        l_id_prof_register    id_prof_register_cc;
        l_dt_register         dt_register_cc;
        l_id_team_type        id_team_type_cc;
        l_create_user         create_user_cc;
        l_id_episode          id_episode_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_prof_team(i) := col_in(i).id_prof_team;
            l_id_prof_team_leader(i) := col_in(i).id_prof_team_leader;
            l_prof_team_name(i) := col_in(i).prof_team_name;
            l_prof_team_desc(i) := col_in(i).prof_team_desc;
            l_flg_available(i) := col_in(i).flg_available;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_software(i) := col_in(i).id_software;
            l_id_institution(i) := col_in(i).id_institution;
            l_adw_last_update(i) := col_in(i).adw_last_update;
            l_flg_type(i) := col_in(i).flg_type;
            l_dt_begin_tstz(i) := col_in(i).dt_begin_tstz;
            l_dt_end_tstz(i) := col_in(i).dt_end_tstz;
            l_id_prof_team_old(i) := col_in(i).id_prof_team_old;
            l_id_department(i) := col_in(i).id_department;
            l_notes(i) := col_in(i).notes;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_dt_cancel(i) := col_in(i).dt_cancel;
            l_num_members(i) := col_in(i).num_members;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_prof_register(i) := col_in(i).id_prof_register;
            l_dt_register(i) := col_in(i).dt_register;
            l_id_team_type(i) := col_in(i).id_team_type;
            l_create_user(i) := col_in(i).create_user;
            l_id_episode(i) := col_in(i).id_episode;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE prof_team
                   SET id_prof_team_leader = nvl(l_id_prof_team_leader(i), id_prof_team_leader),
                       prof_team_name      = nvl(l_prof_team_name(i), prof_team_name),
                       prof_team_desc      = nvl(l_prof_team_desc(i), prof_team_desc),
                       flg_available       = nvl(l_flg_available(i), flg_available),
                       flg_status          = nvl(l_flg_status(i), flg_status),
                       id_software         = nvl(l_id_software(i), id_software),
                       id_institution      = nvl(l_id_institution(i), id_institution),
                       adw_last_update     = nvl(l_adw_last_update(i), adw_last_update),
                       flg_type            = nvl(l_flg_type(i), flg_type),
                       dt_begin_tstz       = nvl(l_dt_begin_tstz(i), dt_begin_tstz),
                       dt_end_tstz         = nvl(l_dt_end_tstz(i), dt_end_tstz),
                       id_prof_team_old    = nvl(l_id_prof_team_old(i), id_prof_team_old),
                       id_department       = nvl(l_id_department(i), id_department),
                       notes               = nvl(l_notes(i), notes),
                       id_cancel_reason    = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       notes_cancel        = nvl(l_notes_cancel(i), notes_cancel),
                       dt_cancel           = nvl(l_dt_cancel(i), dt_cancel),
                       num_members         = nvl(l_num_members(i), num_members),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution),
                       id_prof_register    = nvl(l_id_prof_register(i), id_prof_register),
                       dt_register         = nvl(l_dt_register(i), dt_register),
                       id_team_type        = nvl(l_id_team_type(i), id_team_type),
                       create_user         = nvl(l_create_user(i), create_user),
                       id_episode          = nvl(l_id_episode(i), id_episode)
                 WHERE id_prof_team = l_id_prof_team(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE prof_team
                   SET id_prof_team_leader = l_id_prof_team_leader(i),
                       prof_team_name      = l_prof_team_name(i),
                       prof_team_desc      = l_prof_team_desc(i),
                       flg_available       = l_flg_available(i),
                       flg_status          = l_flg_status(i),
                       id_software         = l_id_software(i),
                       id_institution      = l_id_institution(i),
                       adw_last_update     = l_adw_last_update(i),
                       flg_type            = l_flg_type(i),
                       dt_begin_tstz       = l_dt_begin_tstz(i),
                       dt_end_tstz         = l_dt_end_tstz(i),
                       id_prof_team_old    = l_id_prof_team_old(i),
                       id_department       = l_id_department(i),
                       notes               = l_notes(i),
                       id_cancel_reason    = l_id_cancel_reason(i),
                       notes_cancel        = l_notes_cancel(i),
                       dt_cancel           = l_dt_cancel(i),
                       num_members         = l_num_members(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i),
                       id_prof_register    = l_id_prof_register(i),
                       dt_register         = l_dt_register(i),
                       id_team_type        = l_id_team_type(i),
                       create_user         = l_create_user(i),
                       id_episode          = l_id_episode(i)
                 WHERE id_prof_team = l_id_prof_team(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;

    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN prof_team_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE prof_team
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE prof_team
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE prof_team
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_prof_team_in IN prof_team.id_prof_team%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prof_team
         WHERE id_prof_team = id_prof_team_in
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_prof_team_in IN prof_team.id_prof_team%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_prof_team_in => id_prof_team_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this PROF_TEAM_CRE_FK foreign key value
    PROCEDURE del_prof_team_cre_fk
    (
        id_cancel_reason_in IN prof_team.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prof_team
         WHERE id_cancel_reason = id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_prof_team_cre_fk;

    -- Delete all rows for this PROF_TEAM_DEP_FK foreign key value
    PROCEDURE del_prof_team_dep_fk
    (
        id_department_in IN prof_team.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prof_team
         WHERE id_department = id_department_in
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_prof_team_dep_fk;

    -- Delete all rows for this PROF_TEAM_EPIS_FK foreign key value
    PROCEDURE del_prof_team_epis_fk
    (
        id_episode_in   IN prof_team.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prof_team
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_prof_team_epis_fk;

    -- Delete all rows for this PROF_TEAM_INST_FK foreign key value
    PROCEDURE del_prof_team_inst_fk
    (
        id_institution_in IN prof_team.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prof_team
         WHERE id_institution = id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_prof_team_inst_fk;

    -- Delete all rows for this PROF_TEAM_PROFRG_FK foreign key value
    PROCEDURE del_prof_team_profrg_fk
    (
        id_prof_register_in IN prof_team.id_prof_register%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prof_team
         WHERE id_prof_register = id_prof_register_in
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_prof_team_profrg_fk;

    -- Delete all rows for this PROF_TEAM_PROF_FK foreign key value
    PROCEDURE del_prof_team_prof_fk
    (
        id_prof_team_leader_in IN prof_team.id_prof_team_leader%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prof_team
         WHERE id_prof_team_leader = id_prof_team_leader_in
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_prof_team_prof_fk;

    -- Delete all rows for this PROF_TEAM_S_FK foreign key value
    PROCEDURE del_prof_team_s_fk
    (
        id_software_in  IN prof_team.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prof_team
         WHERE id_software = id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_prof_team_s_fk;

    -- Delete all rows for this PROF_TEAM_TTYPE_FK foreign key value
    PROCEDURE del_prof_team_ttype_fk
    (
        id_team_type_in IN prof_team.id_team_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prof_team
         WHERE id_team_type = id_team_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_prof_team_ttype_fk;

    -- Delete all rows for this PROF_TEAM_CRE_FK foreign key value
    PROCEDURE del_prof_team_cre_fk
    (
        id_cancel_reason_in IN prof_team.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prof_team_cre_fk(id_cancel_reason_in => id_cancel_reason_in,
                             handle_error_in     => handle_error_in,
                             rows_out            => rows_out);
    END del_prof_team_cre_fk;

    -- Delete all rows for this PROF_TEAM_DEP_FK foreign key value
    PROCEDURE del_prof_team_dep_fk
    (
        id_department_in IN prof_team.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prof_team_dep_fk(id_department_in => id_department_in,
                             handle_error_in  => handle_error_in,
                             rows_out         => rows_out);
    END del_prof_team_dep_fk;

    -- Delete all rows for this PROF_TEAM_EPIS_FK foreign key value
    PROCEDURE del_prof_team_epis_fk
    (
        id_episode_in   IN prof_team.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prof_team_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_prof_team_epis_fk;

    -- Delete all rows for this PROF_TEAM_INST_FK foreign key value
    PROCEDURE del_prof_team_inst_fk
    (
        id_institution_in IN prof_team.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prof_team_inst_fk(id_institution_in => id_institution_in,
                              handle_error_in   => handle_error_in,
                              rows_out          => rows_out);
    END del_prof_team_inst_fk;

    -- Delete all rows for this PROF_TEAM_PROFRG_FK foreign key value
    PROCEDURE del_prof_team_profrg_fk
    (
        id_prof_register_in IN prof_team.id_prof_register%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prof_team_profrg_fk(id_prof_register_in => id_prof_register_in,
                                handle_error_in     => handle_error_in,
                                rows_out            => rows_out);
    END del_prof_team_profrg_fk;

    -- Delete all rows for this PROF_TEAM_PROF_FK foreign key value
    PROCEDURE del_prof_team_prof_fk
    (
        id_prof_team_leader_in IN prof_team.id_prof_team_leader%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prof_team_prof_fk(id_prof_team_leader_in => id_prof_team_leader_in,
                              handle_error_in        => handle_error_in,
                              rows_out               => rows_out);
    END del_prof_team_prof_fk;

    -- Delete all rows for this PROF_TEAM_S_FK foreign key value
    PROCEDURE del_prof_team_s_fk
    (
        id_software_in  IN prof_team.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prof_team_s_fk(id_software_in => id_software_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_prof_team_s_fk;

    -- Delete all rows for this PROF_TEAM_TTYPE_FK foreign key value
    PROCEDURE del_prof_team_ttype_fk
    (
        id_team_type_in IN prof_team.id_team_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_prof_team_ttype_fk(id_team_type_in => id_team_type_in,
                               handle_error_in => handle_error_in,
                               rows_out        => rows_out);
    END del_prof_team_ttype_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM prof_team';
        ELSE
            RETURN 'DELETE FROM prof_team WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(prof_team_inout IN OUT prof_team%ROWTYPE) IS
    BEGIN
        prof_team_inout.id_prof_team        := NULL;
        prof_team_inout.id_prof_team_leader := NULL;
        prof_team_inout.prof_team_name      := NULL;
        prof_team_inout.prof_team_desc      := NULL;
        prof_team_inout.flg_available       := NULL;
        prof_team_inout.flg_status          := NULL;
        prof_team_inout.id_software         := NULL;
        prof_team_inout.id_institution      := NULL;
        prof_team_inout.adw_last_update     := NULL;
        prof_team_inout.flg_type            := NULL;
        prof_team_inout.dt_begin_tstz       := NULL;
        prof_team_inout.dt_end_tstz         := NULL;
        prof_team_inout.id_prof_team_old    := NULL;
        prof_team_inout.id_department       := NULL;
        prof_team_inout.notes               := NULL;
        prof_team_inout.id_cancel_reason    := NULL;
        prof_team_inout.notes_cancel        := NULL;
        prof_team_inout.dt_cancel           := NULL;
        prof_team_inout.num_members         := NULL;
        prof_team_inout.create_time         := NULL;
        prof_team_inout.create_institution  := NULL;
        prof_team_inout.update_user         := NULL;
        prof_team_inout.update_time         := NULL;
        prof_team_inout.update_institution  := NULL;
        prof_team_inout.id_prof_register    := NULL;
        prof_team_inout.dt_register         := NULL;
        prof_team_inout.id_team_type        := NULL;
        prof_team_inout.create_user         := NULL;
        prof_team_inout.id_episode          := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN prof_team%ROWTYPE IS
        l_prof_team prof_team%ROWTYPE;
    BEGIN
        RETURN l_prof_team;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN prof_team_tc IS
        data prof_team_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM prof_team
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN prof_team_tc IS
        data prof_team_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;

    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;

    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_prof_team;
/