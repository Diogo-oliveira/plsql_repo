/*-- Last Change Revision: $Rev: 1911214 $*/
/*-- Last Change by: $Author: pedro.henriques $*/
/*-- Date of last change: $Date: 2019-08-05 17:22:34 +0100 (seg, 05 ago 2019) $*/
CREATE OR REPLACE PACKAGE BODY ts_comm_order_plan
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2019-08-23 08:30:10
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN comm_order_plan.id_comm_order_plan%TYPE IS
        retval comm_order_plan.id_comm_order_plan%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_comm_order_plan.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_comm_order_req_in     IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_prof_take_in          IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        notes_in                 IN comm_order_plan.notes%TYPE DEFAULT NULL,
        flg_status_in            IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        id_wound_treat_in        IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_episode_write_in      IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        dt_plan_tstz_in          IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in          IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_performed_in     IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        end_time_in              IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        dt_comm_order_plan_in    IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        create_user_in           IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_time_in           IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_time_in           IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        flg_supplies_reg_in      IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cdr_event_in          IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_epis_documentation_in IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        exec_number_in           IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        id_prof_last_update_in   IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in   IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_po_param_reg_in       IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky comm_order_plan.id_comm_order_plan%TYPE := next_key;
    BEGIN
        ins(id_comm_order_plan_in    => l_pky,
            id_comm_order_req_in     => id_comm_order_req_in,
            id_prof_take_in          => id_prof_take_in,
            notes_in                 => notes_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_wound_treat_in        => id_wound_treat_in,
            id_episode_write_in      => id_episode_write_in,
            dt_plan_tstz_in          => dt_plan_tstz_in,
            dt_take_tstz_in          => dt_take_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            id_prof_performed_in     => id_prof_performed_in,
            start_time_in            => start_time_in,
            end_time_in              => end_time_in,
            dt_comm_order_plan_in    => dt_comm_order_plan_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_supplies_reg_in      => flg_supplies_reg_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            id_cdr_event_in          => id_cdr_event_in,
            id_epis_documentation_in => id_epis_documentation_in,
            exec_number_in           => exec_number_in,
            id_prof_last_update_in   => id_prof_last_update_in,
            dt_last_update_tstz_in   => dt_last_update_tstz_in,
            id_po_param_reg_in       => id_po_param_reg_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_comm_order_req_in     IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_prof_take_in          IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        notes_in                 IN comm_order_plan.notes%TYPE DEFAULT NULL,
        flg_status_in            IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        id_wound_treat_in        IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_episode_write_in      IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        dt_plan_tstz_in          IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in          IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_performed_in     IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        end_time_in              IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        dt_comm_order_plan_in    IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        create_user_in           IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_time_in           IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_time_in           IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        flg_supplies_reg_in      IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cdr_event_in          IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_epis_documentation_in IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        exec_number_in           IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        id_prof_last_update_in   IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in   IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_po_param_reg_in       IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_comm_order_req_in     => id_comm_order_req_in,
            id_prof_take_in          => id_prof_take_in,
            notes_in                 => notes_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_wound_treat_in        => id_wound_treat_in,
            id_episode_write_in      => id_episode_write_in,
            dt_plan_tstz_in          => dt_plan_tstz_in,
            dt_take_tstz_in          => dt_take_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            id_prof_performed_in     => id_prof_performed_in,
            start_time_in            => start_time_in,
            end_time_in              => end_time_in,
            dt_comm_order_plan_in    => dt_comm_order_plan_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_supplies_reg_in      => flg_supplies_reg_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            id_cdr_event_in          => id_cdr_event_in,
            id_epis_documentation_in => id_epis_documentation_in,
            exec_number_in           => exec_number_in,
            id_prof_last_update_in   => id_prof_last_update_in,
            dt_last_update_tstz_in   => dt_last_update_tstz_in,
            id_po_param_reg_in       => id_po_param_reg_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_comm_order_req_in     IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_prof_take_in          IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        notes_in                 IN comm_order_plan.notes%TYPE DEFAULT NULL,
        flg_status_in            IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        id_wound_treat_in        IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_episode_write_in      IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        dt_plan_tstz_in          IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in          IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_performed_in     IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        end_time_in              IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        dt_comm_order_plan_in    IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        create_user_in           IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_time_in           IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_time_in           IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        flg_supplies_reg_in      IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cdr_event_in          IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_epis_documentation_in IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        exec_number_in           IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        id_prof_last_update_in   IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in   IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_po_param_reg_in       IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        id_comm_order_plan_out   IN OUT comm_order_plan.id_comm_order_plan%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky comm_order_plan.id_comm_order_plan%TYPE := next_key;
    BEGIN
        ins(id_comm_order_plan_in    => l_pky,
            id_comm_order_req_in     => id_comm_order_req_in,
            id_prof_take_in          => id_prof_take_in,
            notes_in                 => notes_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_wound_treat_in        => id_wound_treat_in,
            id_episode_write_in      => id_episode_write_in,
            dt_plan_tstz_in          => dt_plan_tstz_in,
            dt_take_tstz_in          => dt_take_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            id_prof_performed_in     => id_prof_performed_in,
            start_time_in            => start_time_in,
            end_time_in              => end_time_in,
            dt_comm_order_plan_in    => dt_comm_order_plan_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_supplies_reg_in      => flg_supplies_reg_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            id_cdr_event_in          => id_cdr_event_in,
            id_epis_documentation_in => id_epis_documentation_in,
            exec_number_in           => exec_number_in,
            id_prof_last_update_in   => id_prof_last_update_in,
            dt_last_update_tstz_in   => dt_last_update_tstz_in,
            id_po_param_reg_in       => id_po_param_reg_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        id_comm_order_plan_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_comm_order_req_in     IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_prof_take_in          IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        notes_in                 IN comm_order_plan.notes%TYPE DEFAULT NULL,
        flg_status_in            IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        id_wound_treat_in        IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_episode_write_in      IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        dt_plan_tstz_in          IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in          IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_performed_in     IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        end_time_in              IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        dt_comm_order_plan_in    IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        create_user_in           IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_time_in           IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_time_in           IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        flg_supplies_reg_in      IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cdr_event_in          IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_epis_documentation_in IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        exec_number_in           IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        id_prof_last_update_in   IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in   IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_po_param_reg_in       IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        id_comm_order_plan_out   IN OUT comm_order_plan.id_comm_order_plan%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_comm_order_req_in     => id_comm_order_req_in,
            id_prof_take_in          => id_prof_take_in,
            notes_in                 => notes_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_wound_treat_in        => id_wound_treat_in,
            id_episode_write_in      => id_episode_write_in,
            dt_plan_tstz_in          => dt_plan_tstz_in,
            dt_take_tstz_in          => dt_take_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            id_prof_performed_in     => id_prof_performed_in,
            start_time_in            => start_time_in,
            end_time_in              => end_time_in,
            dt_comm_order_plan_in    => dt_comm_order_plan_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_supplies_reg_in      => flg_supplies_reg_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            id_cdr_event_in          => id_cdr_event_in,
            id_epis_documentation_in => id_epis_documentation_in,
            exec_number_in           => exec_number_in,
            id_prof_last_update_in   => id_prof_last_update_in,
            dt_last_update_tstz_in   => dt_last_update_tstz_in,
            id_po_param_reg_in       => id_po_param_reg_in,
            id_comm_order_plan_out   => id_comm_order_plan_out,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_comm_order_req_in     IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_prof_take_in          IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        notes_in                 IN comm_order_plan.notes%TYPE DEFAULT NULL,
        flg_status_in            IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        id_wound_treat_in        IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_episode_write_in      IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        dt_plan_tstz_in          IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in          IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_performed_in     IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        end_time_in              IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        dt_comm_order_plan_in    IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        create_user_in           IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_time_in           IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_time_in           IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        flg_supplies_reg_in      IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cdr_event_in          IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_epis_documentation_in IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        exec_number_in           IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        id_prof_last_update_in   IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in   IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_po_param_reg_in       IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN comm_order_plan.id_comm_order_plan%TYPE IS
        l_pky comm_order_plan.id_comm_order_plan%TYPE := next_key;
    BEGIN
        ins(id_comm_order_plan_in    => l_pky,
            id_comm_order_req_in     => id_comm_order_req_in,
            id_prof_take_in          => id_prof_take_in,
            notes_in                 => notes_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_wound_treat_in        => id_wound_treat_in,
            id_episode_write_in      => id_episode_write_in,
            dt_plan_tstz_in          => dt_plan_tstz_in,
            dt_take_tstz_in          => dt_take_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            id_prof_performed_in     => id_prof_performed_in,
            start_time_in            => start_time_in,
            end_time_in              => end_time_in,
            dt_comm_order_plan_in    => dt_comm_order_plan_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_supplies_reg_in      => flg_supplies_reg_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            id_cdr_event_in          => id_cdr_event_in,
            id_epis_documentation_in => id_epis_documentation_in,
            exec_number_in           => exec_number_in,
            id_prof_last_update_in   => id_prof_last_update_in,
            dt_last_update_tstz_in   => dt_last_update_tstz_in,
            id_po_param_reg_in       => id_po_param_reg_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_comm_order_req_in     IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_prof_take_in          IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        notes_in                 IN comm_order_plan.notes%TYPE DEFAULT NULL,
        flg_status_in            IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        id_wound_treat_in        IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_episode_write_in      IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        dt_plan_tstz_in          IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in          IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_performed_in     IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        end_time_in              IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        dt_comm_order_plan_in    IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        create_user_in           IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_time_in           IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_time_in           IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        flg_supplies_reg_in      IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cdr_event_in          IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_epis_documentation_in IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        exec_number_in           IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        id_prof_last_update_in   IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in   IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_po_param_reg_in       IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN comm_order_plan.id_comm_order_plan%TYPE IS
        l_pky    comm_order_plan.id_comm_order_plan%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_comm_order_plan_in    => l_pky,
            id_comm_order_req_in     => id_comm_order_req_in,
            id_prof_take_in          => id_prof_take_in,
            notes_in                 => notes_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_wound_treat_in        => id_wound_treat_in,
            id_episode_write_in      => id_episode_write_in,
            dt_plan_tstz_in          => dt_plan_tstz_in,
            dt_take_tstz_in          => dt_take_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            id_prof_performed_in     => id_prof_performed_in,
            start_time_in            => start_time_in,
            end_time_in              => end_time_in,
            dt_comm_order_plan_in    => dt_comm_order_plan_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_supplies_reg_in      => flg_supplies_reg_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            id_cdr_event_in          => id_cdr_event_in,
            id_epis_documentation_in => id_epis_documentation_in,
            exec_number_in           => exec_number_in,
            id_prof_last_update_in   => id_prof_last_update_in,
            dt_last_update_tstz_in   => dt_last_update_tstz_in,
            id_po_param_reg_in       => id_po_param_reg_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_comm_order_plan_in    IN comm_order_plan.id_comm_order_plan%TYPE,
        id_comm_order_req_in     IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_prof_take_in          IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        notes_in                 IN comm_order_plan.notes%TYPE DEFAULT NULL,
        flg_status_in            IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        id_wound_treat_in        IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_episode_write_in      IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        dt_plan_tstz_in          IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in          IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_performed_in     IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        end_time_in              IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        dt_comm_order_plan_in    IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        create_user_in           IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_time_in           IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_time_in           IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        flg_supplies_reg_in      IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cdr_event_in          IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_epis_documentation_in IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        exec_number_in           IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        id_prof_last_update_in   IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in   IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_po_param_reg_in       IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO comm_order_plan
            (id_comm_order_plan,
             id_comm_order_req,
             id_prof_take,
             notes,
             flg_status,
             id_prof_cancel,
             notes_cancel,
             id_wound_treat,
             id_episode_write,
             dt_plan_tstz,
             dt_take_tstz,
             dt_cancel_tstz,
             id_prof_performed,
             start_time,
             end_time,
             dt_comm_order_plan,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_supplies_reg,
             id_cancel_reason,
             id_cdr_event,
             id_epis_documentation,
             exec_number,
             id_prof_last_update,
             dt_last_update_tstz,
             id_po_param_reg)
        VALUES
            (id_comm_order_plan_in,
             id_comm_order_req_in,
             id_prof_take_in,
             notes_in,
             flg_status_in,
             id_prof_cancel_in,
             notes_cancel_in,
             id_wound_treat_in,
             id_episode_write_in,
             dt_plan_tstz_in,
             dt_take_tstz_in,
             dt_cancel_tstz_in,
             id_prof_performed_in,
             start_time_in,
             end_time_in,
             dt_comm_order_plan_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_supplies_reg_in,
             id_cancel_reason_in,
             id_cdr_event_in,
             id_epis_documentation_in,
             exec_number_in,
             id_prof_last_update_in,
             dt_last_update_tstz_in,
             id_po_param_reg_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_comm_order_plan_in    IN comm_order_plan.id_comm_order_plan%TYPE,
        id_comm_order_req_in     IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_prof_take_in          IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        notes_in                 IN comm_order_plan.notes%TYPE DEFAULT NULL,
        flg_status_in            IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        id_wound_treat_in        IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_episode_write_in      IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        dt_plan_tstz_in          IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in          IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_performed_in     IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        end_time_in              IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        dt_comm_order_plan_in    IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        create_user_in           IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_time_in           IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_time_in           IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        flg_supplies_reg_in      IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cdr_event_in          IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_epis_documentation_in IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        exec_number_in           IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        id_prof_last_update_in   IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in   IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_po_param_reg_in       IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_comm_order_plan_in    => id_comm_order_plan_in,
            id_comm_order_req_in     => id_comm_order_req_in,
            id_prof_take_in          => id_prof_take_in,
            notes_in                 => notes_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_wound_treat_in        => id_wound_treat_in,
            id_episode_write_in      => id_episode_write_in,
            dt_plan_tstz_in          => dt_plan_tstz_in,
            dt_take_tstz_in          => dt_take_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            id_prof_performed_in     => id_prof_performed_in,
            start_time_in            => start_time_in,
            end_time_in              => end_time_in,
            dt_comm_order_plan_in    => dt_comm_order_plan_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_supplies_reg_in      => flg_supplies_reg_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            id_cdr_event_in          => id_cdr_event_in,
            id_epis_documentation_in => id_epis_documentation_in,
            exec_number_in           => exec_number_in,
            id_prof_last_update_in   => id_prof_last_update_in,
            dt_last_update_tstz_in   => dt_last_update_tstz_in,
            id_po_param_reg_in       => id_po_param_reg_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN comm_order_plan%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec comm_order_plan%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_comm_order_plan := next_key(sequence_in);
        END IF;
    
        ins(id_comm_order_plan_in    => l_rec.id_comm_order_plan,
            id_comm_order_req_in     => l_rec.id_comm_order_req,
            id_prof_take_in          => l_rec.id_prof_take,
            notes_in                 => l_rec.notes,
            flg_status_in            => l_rec.flg_status,
            id_prof_cancel_in        => l_rec.id_prof_cancel,
            notes_cancel_in          => l_rec.notes_cancel,
            id_wound_treat_in        => l_rec.id_wound_treat,
            id_episode_write_in      => l_rec.id_episode_write,
            dt_plan_tstz_in          => l_rec.dt_plan_tstz,
            dt_take_tstz_in          => l_rec.dt_take_tstz,
            dt_cancel_tstz_in        => l_rec.dt_cancel_tstz,
            id_prof_performed_in     => l_rec.id_prof_performed,
            start_time_in            => l_rec.start_time,
            end_time_in              => l_rec.end_time,
            dt_comm_order_plan_in    => l_rec.dt_comm_order_plan,
            create_user_in           => l_rec.create_user,
            create_time_in           => l_rec.create_time,
            create_institution_in    => l_rec.create_institution,
            update_user_in           => l_rec.update_user,
            update_time_in           => l_rec.update_time,
            update_institution_in    => l_rec.update_institution,
            flg_supplies_reg_in      => l_rec.flg_supplies_reg,
            id_cancel_reason_in      => l_rec.id_cancel_reason,
            id_cdr_event_in          => l_rec.id_cdr_event,
            id_epis_documentation_in => l_rec.id_epis_documentation,
            exec_number_in           => l_rec.exec_number,
            id_prof_last_update_in   => l_rec.id_prof_last_update,
            dt_last_update_tstz_in   => l_rec.dt_last_update_tstz,
            id_po_param_reg_in       => l_rec.id_po_param_reg,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN comm_order_plan%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN comm_order_plan_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO comm_order_plan
                    (id_comm_order_plan,
                     id_comm_order_req,
                     id_prof_take,
                     notes,
                     flg_status,
                     id_prof_cancel,
                     notes_cancel,
                     id_wound_treat,
                     id_episode_write,
                     dt_plan_tstz,
                     dt_take_tstz,
                     dt_cancel_tstz,
                     id_prof_performed,
                     start_time,
                     end_time,
                     dt_comm_order_plan,
                     flg_supplies_reg,
                     id_cancel_reason,
                     id_cdr_event,
                     id_epis_documentation,
                     exec_number,
                     id_prof_last_update,
                     dt_last_update_tstz,
                     id_po_param_reg)
                VALUES
                    (rows_in(indx).id_comm_order_plan,
                     rows_in(indx).id_comm_order_req,
                     rows_in(indx).id_prof_take,
                     rows_in(indx).notes,
                     rows_in(indx).flg_status,
                     rows_in(indx).id_prof_cancel,
                     rows_in(indx).notes_cancel,
                     rows_in(indx).id_wound_treat,
                     rows_in(indx).id_episode_write,
                     rows_in(indx).dt_plan_tstz,
                     rows_in(indx).dt_take_tstz,
                     rows_in(indx).dt_cancel_tstz,
                     rows_in(indx).id_prof_performed,
                     rows_in(indx).start_time,
                     rows_in(indx).end_time,
                     rows_in(indx).dt_comm_order_plan,
                     rows_in(indx).flg_supplies_reg,
                     rows_in(indx).id_cancel_reason,
                     rows_in(indx).id_cdr_event,
                     rows_in(indx).id_epis_documentation,
                     rows_in(indx).exec_number,
                     rows_in(indx).id_prof_last_update,
                     rows_in(indx).dt_last_update_tstz,
                     rows_in(indx).id_po_param_reg)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN comm_order_plan_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_comm_order_plan_in     IN comm_order_plan.id_comm_order_plan%TYPE,
        id_comm_order_req_in      IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_comm_order_req_nin     IN BOOLEAN := TRUE,
        id_prof_take_in           IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        id_prof_take_nin          IN BOOLEAN := TRUE,
        notes_in                  IN comm_order_plan.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        flg_status_in             IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_wound_treat_in         IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_wound_treat_nin        IN BOOLEAN := TRUE,
        id_episode_write_in       IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        id_episode_write_nin      IN BOOLEAN := TRUE,
        dt_plan_tstz_in           IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_plan_tstz_nin          IN BOOLEAN := TRUE,
        dt_take_tstz_in           IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_nin          IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        id_prof_performed_in      IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        id_prof_performed_nin     IN BOOLEAN := TRUE,
        start_time_in             IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        start_time_nin            IN BOOLEAN := TRUE,
        end_time_in               IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        end_time_nin              IN BOOLEAN := TRUE,
        dt_comm_order_plan_in     IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        dt_comm_order_plan_nin    IN BOOLEAN := TRUE,
        create_user_in            IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        flg_supplies_reg_in       IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        flg_supplies_reg_nin      IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        id_cdr_event_in           IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_cdr_event_nin          IN BOOLEAN := TRUE,
        id_epis_documentation_in  IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        id_epis_documentation_nin IN BOOLEAN := TRUE,
        exec_number_in            IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        exec_number_nin           IN BOOLEAN := TRUE,
        id_prof_last_update_in    IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin   IN BOOLEAN := TRUE,
        dt_last_update_tstz_in    IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin   IN BOOLEAN := TRUE,
        id_po_param_reg_in        IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        id_po_param_reg_nin       IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out                table_varchar;
        l_id_comm_order_req_n     NUMBER(1) := sys.diutil.bool_to_int(id_comm_order_req_nin);
        l_id_prof_take_n          NUMBER(1) := sys.diutil.bool_to_int(id_prof_take_nin);
        l_notes_n                 NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_flg_status_n            NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_cancel_n        NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n          NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_wound_treat_n        NUMBER(1) := sys.diutil.bool_to_int(id_wound_treat_nin);
        l_id_episode_write_n      NUMBER(1) := sys.diutil.bool_to_int(id_episode_write_nin);
        l_dt_plan_tstz_n          NUMBER(1) := sys.diutil.bool_to_int(dt_plan_tstz_nin);
        l_dt_take_tstz_n          NUMBER(1) := sys.diutil.bool_to_int(dt_take_tstz_nin);
        l_dt_cancel_tstz_n        NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_prof_performed_n     NUMBER(1) := sys.diutil.bool_to_int(id_prof_performed_nin);
        l_start_time_n            NUMBER(1) := sys.diutil.bool_to_int(start_time_nin);
        l_end_time_n              NUMBER(1) := sys.diutil.bool_to_int(end_time_nin);
        l_dt_comm_order_plan_n    NUMBER(1) := sys.diutil.bool_to_int(dt_comm_order_plan_nin);
        l_create_user_n           NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_supplies_reg_n      NUMBER(1) := sys.diutil.bool_to_int(flg_supplies_reg_nin);
        l_id_cancel_reason_n      NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_id_cdr_event_n          NUMBER(1) := sys.diutil.bool_to_int(id_cdr_event_nin);
        l_id_epis_documentation_n NUMBER(1) := sys.diutil.bool_to_int(id_epis_documentation_nin);
        l_exec_number_n           NUMBER(1) := sys.diutil.bool_to_int(exec_number_nin);
        l_id_prof_last_update_n   NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_tstz_n   NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
        l_id_po_param_reg_n       NUMBER(1) := sys.diutil.bool_to_int(id_po_param_reg_nin);
    BEGIN
    
        UPDATE comm_order_plan
           SET id_comm_order_req     = decode(l_id_comm_order_req_n,
                                              0,
                                              id_comm_order_req_in,
                                              nvl(id_comm_order_req_in, id_comm_order_req)),
               id_prof_take          = decode(l_id_prof_take_n, 0, id_prof_take_in, nvl(id_prof_take_in, id_prof_take)),
               notes                 = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               flg_status            = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_cancel        = decode(l_id_prof_cancel_n,
                                              0,
                                              id_prof_cancel_in,
                                              nvl(id_prof_cancel_in, id_prof_cancel)),
               notes_cancel          = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               id_wound_treat        = decode(l_id_wound_treat_n,
                                              0,
                                              id_wound_treat_in,
                                              nvl(id_wound_treat_in, id_wound_treat)),
               id_episode_write      = decode(l_id_episode_write_n,
                                              0,
                                              id_episode_write_in,
                                              nvl(id_episode_write_in, id_episode_write)),
               dt_plan_tstz          = decode(l_dt_plan_tstz_n, 0, dt_plan_tstz_in, nvl(dt_plan_tstz_in, dt_plan_tstz)),
               dt_take_tstz          = decode(l_dt_take_tstz_n, 0, dt_take_tstz_in, nvl(dt_take_tstz_in, dt_take_tstz)),
               dt_cancel_tstz        = decode(l_dt_cancel_tstz_n,
                                              0,
                                              dt_cancel_tstz_in,
                                              nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               id_prof_performed     = decode(l_id_prof_performed_n,
                                              0,
                                              id_prof_performed_in,
                                              nvl(id_prof_performed_in, id_prof_performed)),
               start_time            = decode(l_start_time_n, 0, start_time_in, nvl(start_time_in, start_time)),
               end_time              = decode(l_end_time_n, 0, end_time_in, nvl(end_time_in, end_time)),
               dt_comm_order_plan    = decode(l_dt_comm_order_plan_n,
                                              0,
                                              dt_comm_order_plan_in,
                                              nvl(dt_comm_order_plan_in, dt_comm_order_plan)),
               create_user           = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time           = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution    = decode(l_create_institution_n,
                                              0,
                                              create_institution_in,
                                              nvl(create_institution_in, create_institution)),
               update_user           = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time           = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution    = decode(l_update_institution_n,
                                              0,
                                              update_institution_in,
                                              nvl(update_institution_in, update_institution)),
               flg_supplies_reg      = decode(l_flg_supplies_reg_n,
                                              0,
                                              flg_supplies_reg_in,
                                              nvl(flg_supplies_reg_in, flg_supplies_reg)),
               id_cancel_reason      = decode(l_id_cancel_reason_n,
                                              0,
                                              id_cancel_reason_in,
                                              nvl(id_cancel_reason_in, id_cancel_reason)),
               id_cdr_event          = decode(l_id_cdr_event_n, 0, id_cdr_event_in, nvl(id_cdr_event_in, id_cdr_event)),
               id_epis_documentation = decode(l_id_epis_documentation_n,
                                              0,
                                              id_epis_documentation_in,
                                              nvl(id_epis_documentation_in, id_epis_documentation)),
               exec_number           = decode(l_exec_number_n, 0, exec_number_in, nvl(exec_number_in, exec_number)),
               id_prof_last_update   = decode(l_id_prof_last_update_n,
                                              0,
                                              id_prof_last_update_in,
                                              nvl(id_prof_last_update_in, id_prof_last_update)),
               dt_last_update_tstz   = decode(l_dt_last_update_tstz_n,
                                              0,
                                              dt_last_update_tstz_in,
                                              nvl(dt_last_update_tstz_in, dt_last_update_tstz)),
               id_po_param_reg       = decode(l_id_po_param_reg_n,
                                              0,
                                              id_po_param_reg_in,
                                              nvl(id_po_param_reg_in, id_po_param_reg))
         WHERE id_comm_order_plan = id_comm_order_plan_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_comm_order_plan_in     IN comm_order_plan.id_comm_order_plan%TYPE,
        id_comm_order_req_in      IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_comm_order_req_nin     IN BOOLEAN := TRUE,
        id_prof_take_in           IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        id_prof_take_nin          IN BOOLEAN := TRUE,
        notes_in                  IN comm_order_plan.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        flg_status_in             IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_wound_treat_in         IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_wound_treat_nin        IN BOOLEAN := TRUE,
        id_episode_write_in       IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        id_episode_write_nin      IN BOOLEAN := TRUE,
        dt_plan_tstz_in           IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_plan_tstz_nin          IN BOOLEAN := TRUE,
        dt_take_tstz_in           IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_nin          IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        id_prof_performed_in      IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        id_prof_performed_nin     IN BOOLEAN := TRUE,
        start_time_in             IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        start_time_nin            IN BOOLEAN := TRUE,
        end_time_in               IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        end_time_nin              IN BOOLEAN := TRUE,
        dt_comm_order_plan_in     IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        dt_comm_order_plan_nin    IN BOOLEAN := TRUE,
        create_user_in            IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        flg_supplies_reg_in       IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        flg_supplies_reg_nin      IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        id_cdr_event_in           IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_cdr_event_nin          IN BOOLEAN := TRUE,
        id_epis_documentation_in  IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        id_epis_documentation_nin IN BOOLEAN := TRUE,
        exec_number_in            IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        exec_number_nin           IN BOOLEAN := TRUE,
        id_prof_last_update_in    IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin   IN BOOLEAN := TRUE,
        dt_last_update_tstz_in    IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin   IN BOOLEAN := TRUE,
        id_po_param_reg_in        IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        id_po_param_reg_nin       IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_comm_order_plan_in     => id_comm_order_plan_in,
            id_comm_order_req_in      => id_comm_order_req_in,
            id_comm_order_req_nin     => id_comm_order_req_nin,
            id_prof_take_in           => id_prof_take_in,
            id_prof_take_nin          => id_prof_take_nin,
            notes_in                  => notes_in,
            notes_nin                 => notes_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_prof_cancel_nin        => id_prof_cancel_nin,
            notes_cancel_in           => notes_cancel_in,
            notes_cancel_nin          => notes_cancel_nin,
            id_wound_treat_in         => id_wound_treat_in,
            id_wound_treat_nin        => id_wound_treat_nin,
            id_episode_write_in       => id_episode_write_in,
            id_episode_write_nin      => id_episode_write_nin,
            dt_plan_tstz_in           => dt_plan_tstz_in,
            dt_plan_tstz_nin          => dt_plan_tstz_nin,
            dt_take_tstz_in           => dt_take_tstz_in,
            dt_take_tstz_nin          => dt_take_tstz_nin,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            dt_cancel_tstz_nin        => dt_cancel_tstz_nin,
            id_prof_performed_in      => id_prof_performed_in,
            id_prof_performed_nin     => id_prof_performed_nin,
            start_time_in             => start_time_in,
            start_time_nin            => start_time_nin,
            end_time_in               => end_time_in,
            end_time_nin              => end_time_nin,
            dt_comm_order_plan_in     => dt_comm_order_plan_in,
            dt_comm_order_plan_nin    => dt_comm_order_plan_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            flg_supplies_reg_in       => flg_supplies_reg_in,
            flg_supplies_reg_nin      => flg_supplies_reg_nin,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_reason_nin      => id_cancel_reason_nin,
            id_cdr_event_in           => id_cdr_event_in,
            id_cdr_event_nin          => id_cdr_event_nin,
            id_epis_documentation_in  => id_epis_documentation_in,
            id_epis_documentation_nin => id_epis_documentation_nin,
            exec_number_in            => exec_number_in,
            exec_number_nin           => exec_number_nin,
            id_prof_last_update_in    => id_prof_last_update_in,
            id_prof_last_update_nin   => id_prof_last_update_nin,
            dt_last_update_tstz_in    => dt_last_update_tstz_in,
            dt_last_update_tstz_nin   => dt_last_update_tstz_nin,
            id_po_param_reg_in        => id_po_param_reg_in,
            id_po_param_reg_nin       => id_po_param_reg_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_comm_order_req_in      IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_comm_order_req_nin     IN BOOLEAN := TRUE,
        id_prof_take_in           IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        id_prof_take_nin          IN BOOLEAN := TRUE,
        notes_in                  IN comm_order_plan.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        flg_status_in             IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_wound_treat_in         IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_wound_treat_nin        IN BOOLEAN := TRUE,
        id_episode_write_in       IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        id_episode_write_nin      IN BOOLEAN := TRUE,
        dt_plan_tstz_in           IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_plan_tstz_nin          IN BOOLEAN := TRUE,
        dt_take_tstz_in           IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_nin          IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        id_prof_performed_in      IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        id_prof_performed_nin     IN BOOLEAN := TRUE,
        start_time_in             IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        start_time_nin            IN BOOLEAN := TRUE,
        end_time_in               IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        end_time_nin              IN BOOLEAN := TRUE,
        dt_comm_order_plan_in     IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        dt_comm_order_plan_nin    IN BOOLEAN := TRUE,
        create_user_in            IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        flg_supplies_reg_in       IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        flg_supplies_reg_nin      IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        id_cdr_event_in           IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_cdr_event_nin          IN BOOLEAN := TRUE,
        id_epis_documentation_in  IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        id_epis_documentation_nin IN BOOLEAN := TRUE,
        exec_number_in            IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        exec_number_nin           IN BOOLEAN := TRUE,
        id_prof_last_update_in    IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin   IN BOOLEAN := TRUE,
        dt_last_update_tstz_in    IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin   IN BOOLEAN := TRUE,
        id_po_param_reg_in        IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        id_po_param_reg_nin       IN BOOLEAN := TRUE,
        where_in                  IN VARCHAR2,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_comm_order_req_n     NUMBER(1) := sys.diutil.bool_to_int(id_comm_order_req_nin);
        l_id_prof_take_n          NUMBER(1) := sys.diutil.bool_to_int(id_prof_take_nin);
        l_notes_n                 NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_flg_status_n            NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_cancel_n        NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n          NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_wound_treat_n        NUMBER(1) := sys.diutil.bool_to_int(id_wound_treat_nin);
        l_id_episode_write_n      NUMBER(1) := sys.diutil.bool_to_int(id_episode_write_nin);
        l_dt_plan_tstz_n          NUMBER(1) := sys.diutil.bool_to_int(dt_plan_tstz_nin);
        l_dt_take_tstz_n          NUMBER(1) := sys.diutil.bool_to_int(dt_take_tstz_nin);
        l_dt_cancel_tstz_n        NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_prof_performed_n     NUMBER(1) := sys.diutil.bool_to_int(id_prof_performed_nin);
        l_start_time_n            NUMBER(1) := sys.diutil.bool_to_int(start_time_nin);
        l_end_time_n              NUMBER(1) := sys.diutil.bool_to_int(end_time_nin);
        l_dt_comm_order_plan_n    NUMBER(1) := sys.diutil.bool_to_int(dt_comm_order_plan_nin);
        l_create_user_n           NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_supplies_reg_n      NUMBER(1) := sys.diutil.bool_to_int(flg_supplies_reg_nin);
        l_id_cancel_reason_n      NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_id_cdr_event_n          NUMBER(1) := sys.diutil.bool_to_int(id_cdr_event_nin);
        l_id_epis_documentation_n NUMBER(1) := sys.diutil.bool_to_int(id_epis_documentation_nin);
        l_exec_number_n           NUMBER(1) := sys.diutil.bool_to_int(exec_number_nin);
        l_id_prof_last_update_n   NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_tstz_n   NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
        l_id_po_param_reg_n       NUMBER(1) := sys.diutil.bool_to_int(id_po_param_reg_nin);
    BEGIN
        l_id_comm_order_req_n     := sys.diutil.bool_to_int(id_comm_order_req_nin);
        l_id_prof_take_n          := sys.diutil.bool_to_int(id_prof_take_nin);
        l_notes_n                 := sys.diutil.bool_to_int(notes_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_cancel_n        := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n          := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_wound_treat_n        := sys.diutil.bool_to_int(id_wound_treat_nin);
        l_id_episode_write_n      := sys.diutil.bool_to_int(id_episode_write_nin);
        l_dt_plan_tstz_n          := sys.diutil.bool_to_int(dt_plan_tstz_nin);
        l_dt_take_tstz_n          := sys.diutil.bool_to_int(dt_take_tstz_nin);
        l_dt_cancel_tstz_n        := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_prof_performed_n     := sys.diutil.bool_to_int(id_prof_performed_nin);
        l_start_time_n            := sys.diutil.bool_to_int(start_time_nin);
        l_end_time_n              := sys.diutil.bool_to_int(end_time_nin);
        l_dt_comm_order_plan_n    := sys.diutil.bool_to_int(dt_comm_order_plan_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_supplies_reg_n      := sys.diutil.bool_to_int(flg_supplies_reg_nin);
        l_id_cancel_reason_n      := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_id_cdr_event_n          := sys.diutil.bool_to_int(id_cdr_event_nin);
        l_id_epis_documentation_n := sys.diutil.bool_to_int(id_epis_documentation_nin);
        l_exec_number_n           := sys.diutil.bool_to_int(exec_number_nin);
        l_id_prof_last_update_n   := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_tstz_n   := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
        l_id_po_param_reg_n       := sys.diutil.bool_to_int(id_po_param_reg_nin);
        l_sql                     := 'UPDATE comm_order_plan SET' || ' ID_COMM_ORDER_REQ = decode (' ||
                                     l_id_comm_order_req_n ||
                                     ',0,:ID_COMM_ORDER_REQ_in, NVL (:ID_COMM_ORDER_REQ_in, ID_COMM_ORDER_REQ)) ' || ',' ||
                                     ' ID_PROF_TAKE = decode (' || l_id_prof_take_n ||
                                     ',0,:ID_PROF_TAKE_in, NVL (:ID_PROF_TAKE_in, ID_PROF_TAKE)) ' || ',' ||
                                     ' NOTES = decode (' || l_notes_n || ',0,:NOTES_in, NVL (:NOTES_in, NOTES)) ' || ',' ||
                                     ' FLG_STATUS = decode (' || l_flg_status_n ||
                                     ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                     ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                                     ',0,:ID_PROF_CANCEL_in, NVL (:ID_PROF_CANCEL_in, ID_PROF_CANCEL)) ' || ',' ||
                                     ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                                     ',0,:NOTES_CANCEL_in, NVL (:NOTES_CANCEL_in, NOTES_CANCEL)) ' || ',' ||
                                     ' ID_WOUND_TREAT = decode (' || l_id_wound_treat_n ||
                                     ',0,:ID_WOUND_TREAT_in, NVL (:ID_WOUND_TREAT_in, ID_WOUND_TREAT)) ' || ',' ||
                                     ' ID_EPISODE_WRITE = decode (' || l_id_episode_write_n ||
                                     ',0,:ID_EPISODE_WRITE_in, NVL (:ID_EPISODE_WRITE_in, ID_EPISODE_WRITE)) ' || ',' ||
                                     ' DT_PLAN_TSTZ = decode (' || l_dt_plan_tstz_n ||
                                     ',0,:DT_PLAN_TSTZ_in, NVL (:DT_PLAN_TSTZ_in, DT_PLAN_TSTZ)) ' || ',' ||
                                     ' DT_TAKE_TSTZ = decode (' || l_dt_take_tstz_n ||
                                     ',0,:DT_TAKE_TSTZ_in, NVL (:DT_TAKE_TSTZ_in, DT_TAKE_TSTZ)) ' || ',' ||
                                     ' DT_CANCEL_TSTZ = decode (' || l_dt_cancel_tstz_n ||
                                     ',0,:DT_CANCEL_TSTZ_in, NVL (:DT_CANCEL_TSTZ_in, DT_CANCEL_TSTZ)) ' || ',' ||
                                     ' ID_PROF_PERFORMED = decode (' || l_id_prof_performed_n ||
                                     ',0,:ID_PROF_PERFORMED_in, NVL (:ID_PROF_PERFORMED_in, ID_PROF_PERFORMED)) ' || ',' ||
                                     ' START_TIME = decode (' || l_start_time_n ||
                                     ',0,:START_TIME_in, NVL (:START_TIME_in, START_TIME)) ' || ',' ||
                                     ' END_TIME = decode (' || l_end_time_n ||
                                     ',0,:END_TIME_in, NVL (:END_TIME_in, END_TIME)) ' || ',' ||
                                     ' DT_COMM_ORDER_PLAN = decode (' || l_dt_comm_order_plan_n ||
                                     ',0,:DT_COMM_ORDER_PLAN_in, NVL (:DT_COMM_ORDER_PLAN_in, DT_COMM_ORDER_PLAN)) ' || ',' ||
                                     ' CREATE_USER = decode (' || l_create_user_n ||
                                     ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                     ' CREATE_TIME = decode (' || l_create_time_n ||
                                     ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                     ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                     ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                     ' UPDATE_USER = decode (' || l_update_user_n ||
                                     ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                     ' UPDATE_TIME = decode (' || l_update_time_n ||
                                     ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                     ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                     ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                     ' FLG_SUPPLIES_REG = decode (' || l_flg_supplies_reg_n ||
                                     ',0,:FLG_SUPPLIES_REG_in, NVL (:FLG_SUPPLIES_REG_in, FLG_SUPPLIES_REG)) ' || ',' ||
                                     ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                                     ',0,:ID_CANCEL_REASON_in, NVL (:ID_CANCEL_REASON_in, ID_CANCEL_REASON)) ' || ',' ||
                                     ' ID_CDR_EVENT = decode (' || l_id_cdr_event_n ||
                                     ',0,:ID_CDR_EVENT_in, NVL (:ID_CDR_EVENT_in, ID_CDR_EVENT)) ' || ',' ||
                                     ' ID_EPIS_DOCUMENTATION = decode (' || l_id_epis_documentation_n ||
                                     ',0,:ID_EPIS_DOCUMENTATION_in, NVL (:ID_EPIS_DOCUMENTATION_in, ID_EPIS_DOCUMENTATION)) ' || ',' ||
                                     ' EXEC_NUMBER = decode (' || l_exec_number_n ||
                                     ',0,:EXEC_NUMBER_in, NVL (:EXEC_NUMBER_in, EXEC_NUMBER)) ' || ',' ||
                                     ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                                     ',0,:ID_PROF_LAST_UPDATE_in, NVL (:ID_PROF_LAST_UPDATE_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                                     ' DT_LAST_UPDATE_TSTZ = decode (' || l_dt_last_update_tstz_n ||
                                     ',0,:DT_LAST_UPDATE_TSTZ_in, NVL (:DT_LAST_UPDATE_TSTZ_in, DT_LAST_UPDATE_TSTZ)) ' || ',' ||
                                     ' ID_PO_PARAM_REG = decode (' || l_id_po_param_reg_n ||
                                     ',0,:ID_PO_PARAM_REG_in, NVL (:ID_PO_PARAM_REG_in, ID_PO_PARAM_REG)) ' ||
                                     ' where ' || nvl(where_in, '(1=1)') ||
                                     ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_comm_order_req_in, id_prof_take_in, notes_in, flg_status_in, id_prof_cancel_in, notes_cancel_in, id_wound_treat_in, id_episode_write_in, dt_plan_tstz_in, dt_take_tstz_in, dt_cancel_tstz_in, id_prof_performed_in, start_time_in, end_time_in, dt_comm_order_plan_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_supplies_reg_in, id_cancel_reason_in, id_cdr_event_in, id_epis_documentation_in, exec_number_in, id_prof_last_update_in, dt_last_update_tstz_in, id_po_param_reg_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_comm_order_req_in      IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_comm_order_req_nin     IN BOOLEAN := TRUE,
        id_prof_take_in           IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        id_prof_take_nin          IN BOOLEAN := TRUE,
        notes_in                  IN comm_order_plan.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        flg_status_in             IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_wound_treat_in         IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_wound_treat_nin        IN BOOLEAN := TRUE,
        id_episode_write_in       IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        id_episode_write_nin      IN BOOLEAN := TRUE,
        dt_plan_tstz_in           IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_plan_tstz_nin          IN BOOLEAN := TRUE,
        dt_take_tstz_in           IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_nin          IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        id_prof_performed_in      IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        id_prof_performed_nin     IN BOOLEAN := TRUE,
        start_time_in             IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        start_time_nin            IN BOOLEAN := TRUE,
        end_time_in               IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        end_time_nin              IN BOOLEAN := TRUE,
        dt_comm_order_plan_in     IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        dt_comm_order_plan_nin    IN BOOLEAN := TRUE,
        create_user_in            IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        flg_supplies_reg_in       IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        flg_supplies_reg_nin      IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        id_cdr_event_in           IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_cdr_event_nin          IN BOOLEAN := TRUE,
        id_epis_documentation_in  IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        id_epis_documentation_nin IN BOOLEAN := TRUE,
        exec_number_in            IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        exec_number_nin           IN BOOLEAN := TRUE,
        id_prof_last_update_in    IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin   IN BOOLEAN := TRUE,
        dt_last_update_tstz_in    IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin   IN BOOLEAN := TRUE,
        id_po_param_reg_in        IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        id_po_param_reg_nin       IN BOOLEAN := TRUE,
        where_in                  IN VARCHAR2,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_comm_order_req_in      => id_comm_order_req_in,
            id_comm_order_req_nin     => id_comm_order_req_nin,
            id_prof_take_in           => id_prof_take_in,
            id_prof_take_nin          => id_prof_take_nin,
            notes_in                  => notes_in,
            notes_nin                 => notes_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_prof_cancel_nin        => id_prof_cancel_nin,
            notes_cancel_in           => notes_cancel_in,
            notes_cancel_nin          => notes_cancel_nin,
            id_wound_treat_in         => id_wound_treat_in,
            id_wound_treat_nin        => id_wound_treat_nin,
            id_episode_write_in       => id_episode_write_in,
            id_episode_write_nin      => id_episode_write_nin,
            dt_plan_tstz_in           => dt_plan_tstz_in,
            dt_plan_tstz_nin          => dt_plan_tstz_nin,
            dt_take_tstz_in           => dt_take_tstz_in,
            dt_take_tstz_nin          => dt_take_tstz_nin,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            dt_cancel_tstz_nin        => dt_cancel_tstz_nin,
            id_prof_performed_in      => id_prof_performed_in,
            id_prof_performed_nin     => id_prof_performed_nin,
            start_time_in             => start_time_in,
            start_time_nin            => start_time_nin,
            end_time_in               => end_time_in,
            end_time_nin              => end_time_nin,
            dt_comm_order_plan_in     => dt_comm_order_plan_in,
            dt_comm_order_plan_nin    => dt_comm_order_plan_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            flg_supplies_reg_in       => flg_supplies_reg_in,
            flg_supplies_reg_nin      => flg_supplies_reg_nin,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_reason_nin      => id_cancel_reason_nin,
            id_cdr_event_in           => id_cdr_event_in,
            id_cdr_event_nin          => id_cdr_event_nin,
            id_epis_documentation_in  => id_epis_documentation_in,
            id_epis_documentation_nin => id_epis_documentation_nin,
            exec_number_in            => exec_number_in,
            exec_number_nin           => exec_number_nin,
            id_prof_last_update_in    => id_prof_last_update_in,
            id_prof_last_update_nin   => id_prof_last_update_nin,
            dt_last_update_tstz_in    => dt_last_update_tstz_in,
            dt_last_update_tstz_nin   => dt_last_update_tstz_nin,
            id_po_param_reg_in        => id_po_param_reg_in,
            id_po_param_reg_nin       => id_po_param_reg_nin,
            where_in                  => where_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_comm_order_plan_in    IN comm_order_plan.id_comm_order_plan%TYPE,
        id_comm_order_req_in     IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_prof_take_in          IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        notes_in                 IN comm_order_plan.notes%TYPE DEFAULT NULL,
        flg_status_in            IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        id_wound_treat_in        IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_episode_write_in      IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        dt_plan_tstz_in          IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in          IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_performed_in     IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        end_time_in              IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        dt_comm_order_plan_in    IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        create_user_in           IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_time_in           IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_time_in           IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        flg_supplies_reg_in      IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cdr_event_in          IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_epis_documentation_in IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        exec_number_in           IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        id_prof_last_update_in   IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in   IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_po_param_reg_in       IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_comm_order_plan_in    => id_comm_order_plan_in,
            id_comm_order_req_in     => id_comm_order_req_in,
            id_prof_take_in          => id_prof_take_in,
            notes_in                 => notes_in,
            flg_status_in            => flg_status_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            notes_cancel_in          => notes_cancel_in,
            id_wound_treat_in        => id_wound_treat_in,
            id_episode_write_in      => id_episode_write_in,
            dt_plan_tstz_in          => dt_plan_tstz_in,
            dt_take_tstz_in          => dt_take_tstz_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            id_prof_performed_in     => id_prof_performed_in,
            start_time_in            => start_time_in,
            end_time_in              => end_time_in,
            dt_comm_order_plan_in    => dt_comm_order_plan_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_supplies_reg_in      => flg_supplies_reg_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            id_cdr_event_in          => id_cdr_event_in,
            id_epis_documentation_in => id_epis_documentation_in,
            exec_number_in           => exec_number_in,
            id_prof_last_update_in   => id_prof_last_update_in,
            dt_last_update_tstz_in   => dt_last_update_tstz_in,
            id_po_param_reg_in       => id_po_param_reg_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_comm_order_plan_in    => id_comm_order_plan_in,
                id_comm_order_req_in     => id_comm_order_req_in,
                id_prof_take_in          => id_prof_take_in,
                notes_in                 => notes_in,
                flg_status_in            => flg_status_in,
                id_prof_cancel_in        => id_prof_cancel_in,
                notes_cancel_in          => notes_cancel_in,
                id_wound_treat_in        => id_wound_treat_in,
                id_episode_write_in      => id_episode_write_in,
                dt_plan_tstz_in          => dt_plan_tstz_in,
                dt_take_tstz_in          => dt_take_tstz_in,
                dt_cancel_tstz_in        => dt_cancel_tstz_in,
                id_prof_performed_in     => id_prof_performed_in,
                start_time_in            => start_time_in,
                end_time_in              => end_time_in,
                dt_comm_order_plan_in    => dt_comm_order_plan_in,
                create_user_in           => create_user_in,
                create_time_in           => create_time_in,
                create_institution_in    => create_institution_in,
                update_user_in           => update_user_in,
                update_time_in           => update_time_in,
                update_institution_in    => update_institution_in,
                flg_supplies_reg_in      => flg_supplies_reg_in,
                id_cancel_reason_in      => id_cancel_reason_in,
                id_cdr_event_in          => id_cdr_event_in,
                id_epis_documentation_in => id_epis_documentation_in,
                exec_number_in           => exec_number_in,
                id_prof_last_update_in   => id_prof_last_update_in,
                dt_last_update_tstz_in   => dt_last_update_tstz_in,
                id_po_param_reg_in       => id_po_param_reg_in,
                handle_error_in          => handle_error_in,
                rows_out                 => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_comm_order_plan_in    IN comm_order_plan.id_comm_order_plan%TYPE,
        id_comm_order_req_in     IN comm_order_plan.id_comm_order_req%TYPE DEFAULT NULL,
        id_prof_take_in          IN comm_order_plan.id_prof_take%TYPE DEFAULT NULL,
        notes_in                 IN comm_order_plan.notes%TYPE DEFAULT NULL,
        flg_status_in            IN comm_order_plan.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN comm_order_plan.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in          IN comm_order_plan.notes_cancel%TYPE DEFAULT NULL,
        id_wound_treat_in        IN comm_order_plan.id_wound_treat%TYPE DEFAULT NULL,
        id_episode_write_in      IN comm_order_plan.id_episode_write%TYPE DEFAULT NULL,
        dt_plan_tstz_in          IN comm_order_plan.dt_plan_tstz%TYPE DEFAULT NULL,
        dt_take_tstz_in          IN comm_order_plan.dt_take_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN comm_order_plan.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_prof_performed_in     IN comm_order_plan.id_prof_performed%TYPE DEFAULT NULL,
        start_time_in            IN comm_order_plan.start_time%TYPE DEFAULT NULL,
        end_time_in              IN comm_order_plan.end_time%TYPE DEFAULT NULL,
        dt_comm_order_plan_in    IN comm_order_plan.dt_comm_order_plan%TYPE DEFAULT NULL,
        create_user_in           IN comm_order_plan.create_user%TYPE DEFAULT NULL,
        create_time_in           IN comm_order_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN comm_order_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN comm_order_plan.update_user%TYPE DEFAULT NULL,
        update_time_in           IN comm_order_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN comm_order_plan.update_institution%TYPE DEFAULT NULL,
        flg_supplies_reg_in      IN comm_order_plan.flg_supplies_reg%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN comm_order_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cdr_event_in          IN comm_order_plan.id_cdr_event%TYPE DEFAULT NULL,
        id_epis_documentation_in IN comm_order_plan.id_epis_documentation%TYPE DEFAULT NULL,
        exec_number_in           IN comm_order_plan.exec_number%TYPE DEFAULT NULL,
        id_prof_last_update_in   IN comm_order_plan.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in   IN comm_order_plan.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_po_param_reg_in       IN comm_order_plan.id_po_param_reg%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_comm_order_plan_in,
                id_comm_order_req_in,
                id_prof_take_in,
                notes_in,
                flg_status_in,
                id_prof_cancel_in,
                notes_cancel_in,
                id_wound_treat_in,
                id_episode_write_in,
                dt_plan_tstz_in,
                dt_take_tstz_in,
                dt_cancel_tstz_in,
                id_prof_performed_in,
                start_time_in,
                end_time_in,
                dt_comm_order_plan_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_supplies_reg_in,
                id_cancel_reason_in,
                id_cdr_event_in,
                id_epis_documentation_in,
                exec_number_in,
                id_prof_last_update_in,
                dt_last_update_tstz_in,
                id_po_param_reg_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN comm_order_plan%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_comm_order_plan_in    => rec_in.id_comm_order_plan,
            id_comm_order_req_in     => rec_in.id_comm_order_req,
            id_prof_take_in          => rec_in.id_prof_take,
            notes_in                 => rec_in.notes,
            flg_status_in            => rec_in.flg_status,
            id_prof_cancel_in        => rec_in.id_prof_cancel,
            notes_cancel_in          => rec_in.notes_cancel,
            id_wound_treat_in        => rec_in.id_wound_treat,
            id_episode_write_in      => rec_in.id_episode_write,
            dt_plan_tstz_in          => rec_in.dt_plan_tstz,
            dt_take_tstz_in          => rec_in.dt_take_tstz,
            dt_cancel_tstz_in        => rec_in.dt_cancel_tstz,
            id_prof_performed_in     => rec_in.id_prof_performed,
            start_time_in            => rec_in.start_time,
            end_time_in              => rec_in.end_time,
            dt_comm_order_plan_in    => rec_in.dt_comm_order_plan,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            flg_supplies_reg_in      => rec_in.flg_supplies_reg,
            id_cancel_reason_in      => rec_in.id_cancel_reason,
            id_cdr_event_in          => rec_in.id_cdr_event,
            id_epis_documentation_in => rec_in.id_epis_documentation,
            exec_number_in           => rec_in.exec_number,
            id_prof_last_update_in   => rec_in.id_prof_last_update,
            dt_last_update_tstz_in   => rec_in.dt_last_update_tstz,
            id_po_param_reg_in       => rec_in.id_po_param_reg,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN comm_order_plan%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_comm_order_plan_in    => rec_in.id_comm_order_plan,
            id_comm_order_req_in     => rec_in.id_comm_order_req,
            id_prof_take_in          => rec_in.id_prof_take,
            notes_in                 => rec_in.notes,
            flg_status_in            => rec_in.flg_status,
            id_prof_cancel_in        => rec_in.id_prof_cancel,
            notes_cancel_in          => rec_in.notes_cancel,
            id_wound_treat_in        => rec_in.id_wound_treat,
            id_episode_write_in      => rec_in.id_episode_write,
            dt_plan_tstz_in          => rec_in.dt_plan_tstz,
            dt_take_tstz_in          => rec_in.dt_take_tstz,
            dt_cancel_tstz_in        => rec_in.dt_cancel_tstz,
            id_prof_performed_in     => rec_in.id_prof_performed,
            start_time_in            => rec_in.start_time,
            end_time_in              => rec_in.end_time,
            dt_comm_order_plan_in    => rec_in.dt_comm_order_plan,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            flg_supplies_reg_in      => rec_in.flg_supplies_reg,
            id_cancel_reason_in      => rec_in.id_cancel_reason,
            id_cdr_event_in          => rec_in.id_cdr_event,
            id_epis_documentation_in => rec_in.id_epis_documentation,
            exec_number_in           => rec_in.exec_number,
            id_prof_last_update_in   => rec_in.id_prof_last_update,
            dt_last_update_tstz_in   => rec_in.dt_last_update_tstz,
            id_po_param_reg_in       => rec_in.id_po_param_reg,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN comm_order_plan_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_comm_order_plan    id_comm_order_plan_cc;
        l_id_comm_order_req     id_comm_order_req_cc;
        l_id_prof_take          id_prof_take_cc;
        l_notes                 notes_cc;
        l_flg_status            flg_status_cc;
        l_id_prof_cancel        id_prof_cancel_cc;
        l_notes_cancel          notes_cancel_cc;
        l_id_wound_treat        id_wound_treat_cc;
        l_id_episode_write      id_episode_write_cc;
        l_dt_plan_tstz          dt_plan_tstz_cc;
        l_dt_take_tstz          dt_take_tstz_cc;
        l_dt_cancel_tstz        dt_cancel_tstz_cc;
        l_id_prof_performed     id_prof_performed_cc;
        l_start_time            start_time_cc;
        l_end_time              end_time_cc;
        l_dt_comm_order_plan    dt_comm_order_plan_cc;
        l_create_user           create_user_cc;
        l_create_time           create_time_cc;
        l_create_institution    create_institution_cc;
        l_update_user           update_user_cc;
        l_update_time           update_time_cc;
        l_update_institution    update_institution_cc;
        l_flg_supplies_reg      flg_supplies_reg_cc;
        l_id_cancel_reason      id_cancel_reason_cc;
        l_id_cdr_event          id_cdr_event_cc;
        l_id_epis_documentation id_epis_documentation_cc;
        l_exec_number           exec_number_cc;
        l_id_prof_last_update   id_prof_last_update_cc;
        l_dt_last_update_tstz   dt_last_update_tstz_cc;
        l_id_po_param_reg       id_po_param_reg_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_comm_order_plan(i) := col_in(i).id_comm_order_plan;
            l_id_comm_order_req(i) := col_in(i).id_comm_order_req;
            l_id_prof_take(i) := col_in(i).id_prof_take;
            l_notes(i) := col_in(i).notes;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_wound_treat(i) := col_in(i).id_wound_treat;
            l_id_episode_write(i) := col_in(i).id_episode_write;
            l_dt_plan_tstz(i) := col_in(i).dt_plan_tstz;
            l_dt_take_tstz(i) := col_in(i).dt_take_tstz;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_id_prof_performed(i) := col_in(i).id_prof_performed;
            l_start_time(i) := col_in(i).start_time;
            l_end_time(i) := col_in(i).end_time;
            l_dt_comm_order_plan(i) := col_in(i).dt_comm_order_plan;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_supplies_reg(i) := col_in(i).flg_supplies_reg;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_id_cdr_event(i) := col_in(i).id_cdr_event;
            l_id_epis_documentation(i) := col_in(i).id_epis_documentation;
            l_exec_number(i) := col_in(i).exec_number;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_dt_last_update_tstz(i) := col_in(i).dt_last_update_tstz;
            l_id_po_param_reg(i) := col_in(i).id_po_param_reg;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE comm_order_plan
                   SET id_comm_order_req     = nvl(l_id_comm_order_req(i), id_comm_order_req),
                       id_prof_take          = nvl(l_id_prof_take(i), id_prof_take),
                       notes                 = nvl(l_notes(i), notes),
                       flg_status            = nvl(l_flg_status(i), flg_status),
                       id_prof_cancel        = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       notes_cancel          = nvl(l_notes_cancel(i), notes_cancel),
                       id_wound_treat        = nvl(l_id_wound_treat(i), id_wound_treat),
                       id_episode_write      = nvl(l_id_episode_write(i), id_episode_write),
                       dt_plan_tstz          = nvl(l_dt_plan_tstz(i), dt_plan_tstz),
                       dt_take_tstz          = nvl(l_dt_take_tstz(i), dt_take_tstz),
                       dt_cancel_tstz        = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       id_prof_performed     = nvl(l_id_prof_performed(i), id_prof_performed),
                       start_time            = nvl(l_start_time(i), start_time),
                       end_time              = nvl(l_end_time(i), end_time),
                       dt_comm_order_plan    = nvl(l_dt_comm_order_plan(i), dt_comm_order_plan),
                       create_user           = nvl(l_create_user(i), create_user),
                       create_time           = nvl(l_create_time(i), create_time),
                       create_institution    = nvl(l_create_institution(i), create_institution),
                       update_user           = nvl(l_update_user(i), update_user),
                       update_time           = nvl(l_update_time(i), update_time),
                       update_institution    = nvl(l_update_institution(i), update_institution),
                       flg_supplies_reg      = nvl(l_flg_supplies_reg(i), flg_supplies_reg),
                       id_cancel_reason      = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       id_cdr_event          = nvl(l_id_cdr_event(i), id_cdr_event),
                       id_epis_documentation = nvl(l_id_epis_documentation(i), id_epis_documentation),
                       exec_number           = nvl(l_exec_number(i), exec_number),
                       id_prof_last_update   = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       dt_last_update_tstz   = nvl(l_dt_last_update_tstz(i), dt_last_update_tstz),
                       id_po_param_reg       = nvl(l_id_po_param_reg(i), id_po_param_reg)
                 WHERE id_comm_order_plan = l_id_comm_order_plan(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE comm_order_plan
                   SET id_comm_order_req     = l_id_comm_order_req(i),
                       id_prof_take          = l_id_prof_take(i),
                       notes                 = l_notes(i),
                       flg_status            = l_flg_status(i),
                       id_prof_cancel        = l_id_prof_cancel(i),
                       notes_cancel          = l_notes_cancel(i),
                       id_wound_treat        = l_id_wound_treat(i),
                       id_episode_write      = l_id_episode_write(i),
                       dt_plan_tstz          = l_dt_plan_tstz(i),
                       dt_take_tstz          = l_dt_take_tstz(i),
                       dt_cancel_tstz        = l_dt_cancel_tstz(i),
                       id_prof_performed     = l_id_prof_performed(i),
                       start_time            = l_start_time(i),
                       end_time              = l_end_time(i),
                       dt_comm_order_plan    = l_dt_comm_order_plan(i),
                       create_user           = l_create_user(i),
                       create_time           = l_create_time(i),
                       create_institution    = l_create_institution(i),
                       update_user           = l_update_user(i),
                       update_time           = l_update_time(i),
                       update_institution    = l_update_institution(i),
                       flg_supplies_reg      = l_flg_supplies_reg(i),
                       id_cancel_reason      = l_id_cancel_reason(i),
                       id_cdr_event          = l_id_cdr_event(i),
                       id_epis_documentation = l_id_epis_documentation(i),
                       exec_number           = l_exec_number(i),
                       id_prof_last_update   = l_id_prof_last_update(i),
                       dt_last_update_tstz   = l_dt_last_update_tstz(i),
                       id_po_param_reg       = l_id_po_param_reg(i)
                 WHERE id_comm_order_plan = l_id_comm_order_plan(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN comm_order_plan_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE comm_order_plan
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE comm_order_plan
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE comm_order_plan
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_comm_order_plan_in IN comm_order_plan.id_comm_order_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM comm_order_plan
         WHERE id_comm_order_plan = id_comm_order_plan_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_comm_order_plan_in IN comm_order_plan.id_comm_order_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_comm_order_plan_in => id_comm_order_plan_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this COP_PPR_FK foreign key value
    PROCEDURE del_cop_ppr_fk
    (
        id_po_param_reg_in IN comm_order_plan.id_po_param_reg%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM comm_order_plan
         WHERE id_po_param_reg = id_po_param_reg_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_cop_ppr_fk;

    -- Delete all rows for this COP_PPR_FK foreign key value
    PROCEDURE del_cop_ppr_fk
    (
        id_po_param_reg_in IN comm_order_plan.id_po_param_reg%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cop_ppr_fk(id_po_param_reg_in => id_po_param_reg_in,
                       handle_error_in    => handle_error_in,
                       rows_out           => rows_out);
    END del_cop_ppr_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM comm_order_plan';
        ELSE
            RETURN 'DELETE FROM comm_order_plan WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(comm_order_plan_inout IN OUT comm_order_plan%ROWTYPE) IS
    BEGIN
        comm_order_plan_inout.id_comm_order_plan    := NULL;
        comm_order_plan_inout.id_comm_order_req     := NULL;
        comm_order_plan_inout.id_prof_take          := NULL;
        comm_order_plan_inout.notes                 := NULL;
        comm_order_plan_inout.flg_status            := NULL;
        comm_order_plan_inout.id_prof_cancel        := NULL;
        comm_order_plan_inout.notes_cancel          := NULL;
        comm_order_plan_inout.id_wound_treat        := NULL;
        comm_order_plan_inout.id_episode_write      := NULL;
        comm_order_plan_inout.dt_plan_tstz          := NULL;
        comm_order_plan_inout.dt_take_tstz          := NULL;
        comm_order_plan_inout.dt_cancel_tstz        := NULL;
        comm_order_plan_inout.id_prof_performed     := NULL;
        comm_order_plan_inout.start_time            := NULL;
        comm_order_plan_inout.end_time              := NULL;
        comm_order_plan_inout.dt_comm_order_plan    := NULL;
        comm_order_plan_inout.create_user           := NULL;
        comm_order_plan_inout.create_time           := NULL;
        comm_order_plan_inout.create_institution    := NULL;
        comm_order_plan_inout.update_user           := NULL;
        comm_order_plan_inout.update_time           := NULL;
        comm_order_plan_inout.update_institution    := NULL;
        comm_order_plan_inout.flg_supplies_reg      := NULL;
        comm_order_plan_inout.id_cancel_reason      := NULL;
        comm_order_plan_inout.id_cdr_event          := NULL;
        comm_order_plan_inout.id_epis_documentation := NULL;
        comm_order_plan_inout.exec_number           := NULL;
        comm_order_plan_inout.id_prof_last_update   := NULL;
        comm_order_plan_inout.dt_last_update_tstz   := NULL;
        comm_order_plan_inout.id_po_param_reg       := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN comm_order_plan%ROWTYPE IS
        l_comm_order_plan comm_order_plan%ROWTYPE;
    BEGIN
        RETURN l_comm_order_plan;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN comm_order_plan_tc IS
        data comm_order_plan_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM comm_order_plan
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN comm_order_plan_tc IS
        data comm_order_plan_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_comm_order_plan;
/
