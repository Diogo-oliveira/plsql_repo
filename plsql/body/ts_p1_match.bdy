/*-- Last Change Revision: $Rev: 2028286 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:52 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY TS_P1_MATCH
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: October 16, 2008 18:54:53
| Created By: ALERT
*/
IS

   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_match_in IN P1_MATCH.ID_MATCH%TYPE
      ,
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT 'A'
,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT current_timestamp
,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO P1_MATCH (
         ID_MATCH,
         ID_PATIENT,
         ID_CLIN_RECORD,
         ID_INSTITUTION,
         SEQUENTIAL_NUMBER_NUMBER,
         FLG_STATUS,
         ID_PROF_CREATE,
         ID_PROF_CANCEL,
         ID_MATCH_PREV,
         DT_CREATE_TSTZ,
         DT_CANCEL_TSTZ,
         SEQUENTIAL_NUMBER,
         ID_EPISODE
         )
      VALUES (
         id_match_in,
         id_patient_in,
         id_clin_record_in,
         id_institution_in,
         sequential_number_number_in,
         flg_status_in,
         id_prof_create_in,
         id_prof_cancel_in,
         id_match_prev_in,
         dt_create_tstz_in,
         dt_cancel_tstz_in,
         sequential_number_in,
         id_episode_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'P1_MATCH');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           IF l_name = 'PMATCH_CLR_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CLIN_RECORD'
               , value_in => id_clin_record_in);
           END IF;
           IF l_name = 'PMATCH_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'PMATCH_INST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           IF l_name = 'PMATCH_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'PMATCH_PMATCH_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_MATCH_PREV'
               , value_in => id_match_prev_in);
           END IF;
           IF l_name = 'PMATCH_PROF_CNC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'PMATCH_PROF_CRT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CREATE'
               , value_in => id_prof_create_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_match_in IN P1_MATCH.ID_MATCH%TYPE
      ,
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT 'A'
,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT current_timestamp
,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_match_in => id_match_in
      ,
      id_patient_in => id_patient_in,
      id_clin_record_in => id_clin_record_in,
      id_institution_in => id_institution_in,
      sequential_number_number_in => sequential_number_number_in,
      flg_status_in => flg_status_in,
      id_prof_create_in => id_prof_create_in,
      id_prof_cancel_in => id_prof_cancel_in,
      id_match_prev_in => id_match_prev_in,
      dt_create_tstz_in => dt_create_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      sequential_number_in => sequential_number_in,
      id_episode_in => id_episode_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN P1_MATCH%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec P1_MATCH%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_MATCH := next_key (sequence_in);
      END IF;
      ins (
         id_match_in => l_rec.ID_MATCH
         ,
         id_patient_in => l_rec.ID_PATIENT,
         id_clin_record_in => l_rec.ID_CLIN_RECORD,
         id_institution_in => l_rec.ID_INSTITUTION,
         sequential_number_number_in => l_rec.SEQUENTIAL_NUMBER_NUMBER,
         flg_status_in => l_rec.FLG_STATUS,
         id_prof_create_in => l_rec.ID_PROF_CREATE,
         id_prof_cancel_in => l_rec.ID_PROF_CANCEL,
         id_match_prev_in => l_rec.ID_MATCH_PREV,
         dt_create_tstz_in => l_rec.DT_CREATE_TSTZ,
         dt_cancel_tstz_in => l_rec.DT_CANCEL_TSTZ,
         sequential_number_in => l_rec.SEQUENTIAL_NUMBER,
         id_episode_in => l_rec.ID_EPISODE
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN P1_MATCH%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN P1_MATCH.ID_MATCH%TYPE

   IS
     retval P1_MATCH.ID_MATCH%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_P1_MATCH.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_P1_MATCH')
           );
   END next_key;

   PROCEDURE ins (
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT 'A'
,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT current_timestamp
,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL,
      id_match_out IN OUT P1_MATCH.ID_MATCH%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky P1_MATCH.ID_MATCH%TYPE := next_key;
   BEGIN
      ins (
         id_match_in => l_pky,
         id_patient_in => id_patient_in,
         id_clin_record_in => id_clin_record_in,
         id_institution_in => id_institution_in,
         sequential_number_number_in => sequential_number_number_in,
         flg_status_in => flg_status_in,
         id_prof_create_in => id_prof_create_in,
         id_prof_cancel_in => id_prof_cancel_in,
         id_match_prev_in => id_match_prev_in,
         dt_create_tstz_in => dt_create_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         sequential_number_in => sequential_number_in,
         id_episode_in => id_episode_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_match_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT 'A'
,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT current_timestamp
,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL,
      id_match_out IN OUT P1_MATCH.ID_MATCH%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_patient_in => id_patient_in,
      id_clin_record_in => id_clin_record_in,
      id_institution_in => id_institution_in,
      sequential_number_number_in => sequential_number_number_in,
      flg_status_in => flg_status_in,
      id_prof_create_in => id_prof_create_in,
      id_prof_cancel_in => id_prof_cancel_in,
      id_match_prev_in => id_match_prev_in,
      dt_create_tstz_in => dt_create_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      sequential_number_in => sequential_number_in,
      id_episode_in => id_episode_in,
      id_match_out => id_match_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT 'A'
,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT current_timestamp
,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         P1_MATCH.ID_MATCH%TYPE
   IS
        l_pky P1_MATCH.ID_MATCH%TYPE := next_key;
   BEGIN
      ins (
         id_match_in => l_pky,
         id_patient_in => id_patient_in,
         id_clin_record_in => id_clin_record_in,
         id_institution_in => id_institution_in,
         sequential_number_number_in => sequential_number_number_in,
         flg_status_in => flg_status_in,
         id_prof_create_in => id_prof_create_in,
         id_prof_cancel_in => id_prof_cancel_in,
         id_match_prev_in => id_match_prev_in,
         dt_create_tstz_in => dt_create_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         sequential_number_in => sequential_number_in,
         id_episode_in => id_episode_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT 'A'
,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT current_timestamp
,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         P1_MATCH.ID_MATCH%TYPE
   IS
        l_pky P1_MATCH.ID_MATCH%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_match_in => l_pky,
         id_patient_in => id_patient_in,
         id_clin_record_in => id_clin_record_in,
         id_institution_in => id_institution_in,
         sequential_number_number_in => sequential_number_number_in,
         flg_status_in => flg_status_in,
         id_prof_create_in => id_prof_create_in,
         id_prof_cancel_in => id_prof_cancel_in,
         id_match_prev_in => id_match_prev_in,
         dt_create_tstz_in => dt_create_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         sequential_number_in => sequential_number_in,
         id_episode_in => id_episode_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT 'A'
,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT current_timestamp
,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky P1_MATCH.ID_MATCH%TYPE := next_key;
   BEGIN
      ins (
         id_match_in => l_pky,
         id_patient_in => id_patient_in,
         id_clin_record_in => id_clin_record_in,
         id_institution_in => id_institution_in,
         sequential_number_number_in => sequential_number_number_in,
         flg_status_in => flg_status_in,
         id_prof_create_in => id_prof_create_in,
         id_prof_cancel_in => id_prof_cancel_in,
         id_match_prev_in => id_match_prev_in,
         dt_create_tstz_in => dt_create_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         sequential_number_in => sequential_number_in,
         id_episode_in => id_episode_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT 'A'
,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT current_timestamp
,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky P1_MATCH.ID_MATCH%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_match_in => l_pky,
         id_patient_in => id_patient_in,
         id_clin_record_in => id_clin_record_in,
         id_institution_in => id_institution_in,
         sequential_number_number_in => sequential_number_number_in,
         flg_status_in => flg_status_in,
         id_prof_create_in => id_prof_create_in,
         id_prof_cancel_in => id_prof_cancel_in,
         id_match_prev_in => id_match_prev_in,
         dt_create_tstz_in => dt_create_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         sequential_number_in => sequential_number_in,
         id_episode_in => id_episode_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN P1_MATCH_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO P1_MATCH VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_MATCH _' || indx
                  ,value_in => rows_in(indx).ID_MATCH
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PATIENT _' || indx
                  ,value_in => rows_in(indx).ID_PATIENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CLIN_RECORD _' || indx
                  ,value_in => rows_in(indx).ID_CLIN_RECORD
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).ID_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'SEQUENTIAL_NUMBER_NUMBER _' || indx
                  ,value_in => rows_in(indx).SEQUENTIAL_NUMBER_NUMBER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(indx).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CREATE _' || indx
                  ,value_in => rows_in(indx).ID_PROF_CREATE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CANCEL _' || indx
                  ,value_in => rows_in(indx).ID_PROF_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_MATCH_PREV _' || indx
                  ,value_in => rows_in(indx).ID_MATCH_PREV
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CREATE_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_CREATE_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CANCEL_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_CANCEL_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'SEQUENTIAL_NUMBER _' || indx
                  ,value_in => rows_in(indx).SEQUENTIAL_NUMBER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE _' || indx
                  ,value_in => rows_in(indx).ID_EPISODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'P1_MATCH'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN P1_MATCH_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_match_in IN P1_MATCH.ID_MATCH%TYPE,
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      ID_CLIN_RECORD_nin IN BOOLEAN := TRUE,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      SEQUENTIAL_NUMBER_NUMBER_nin IN BOOLEAN := TRUE,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      ID_PROF_CREATE_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      ID_MATCH_PREV_nin IN BOOLEAN := TRUE,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT NULL,
      DT_CREATE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      SEQUENTIAL_NUMBER_nin IN BOOLEAN := TRUE,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_PATIENT_n NUMBER(1);
   l_ID_CLIN_RECORD_n NUMBER(1);
   l_ID_INSTITUTION_n NUMBER(1);
   l_SEQUENTIAL_NUMBER_NUMBER_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_PROF_CREATE_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_ID_MATCH_PREV_n NUMBER(1);
   l_DT_CREATE_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_SEQUENTIAL_NUMBER_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   BEGIN

   l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
   l_ID_CLIN_RECORD_n := sys.diutil.bool_to_int(ID_CLIN_RECORD_nin);
   l_ID_INSTITUTION_n := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
   l_SEQUENTIAL_NUMBER_NUMBER_n := sys.diutil.bool_to_int(SEQUENTIAL_NUMBER_NUMBER_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_ID_PROF_CREATE_n := sys.diutil.bool_to_int(ID_PROF_CREATE_nin);
   l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
   l_ID_MATCH_PREV_n := sys.diutil.bool_to_int(ID_MATCH_PREV_nin);
   l_DT_CREATE_TSTZ_n := sys.diutil.bool_to_int(DT_CREATE_TSTZ_nin);
   l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
   l_SEQUENTIAL_NUMBER_n := sys.diutil.bool_to_int(SEQUENTIAL_NUMBER_nin);
   l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);


         UPDATE P1_MATCH SET
     ID_PATIENT = decode (l_ID_PATIENT_n,0,id_patient_in, NVL (id_patient_in, ID_PATIENT)),
     ID_CLIN_RECORD = decode (l_ID_CLIN_RECORD_n,0,id_clin_record_in, NVL (id_clin_record_in, ID_CLIN_RECORD)),
     ID_INSTITUTION = decode (l_ID_INSTITUTION_n,0,id_institution_in, NVL (id_institution_in, ID_INSTITUTION)),
     SEQUENTIAL_NUMBER_NUMBER = decode (l_SEQUENTIAL_NUMBER_NUMBER_n,0,sequential_number_number_in, NVL (sequential_number_number_in, SEQUENTIAL_NUMBER_NUMBER)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     ID_PROF_CREATE = decode (l_ID_PROF_CREATE_n,0,id_prof_create_in, NVL (id_prof_create_in, ID_PROF_CREATE)),
     ID_PROF_CANCEL = decode (l_ID_PROF_CANCEL_n,0,id_prof_cancel_in, NVL (id_prof_cancel_in, ID_PROF_CANCEL)),
     ID_MATCH_PREV = decode (l_ID_MATCH_PREV_n,0,id_match_prev_in, NVL (id_match_prev_in, ID_MATCH_PREV)),
     DT_CREATE_TSTZ = decode (l_DT_CREATE_TSTZ_n,0,dt_create_tstz_in, NVL (dt_create_tstz_in, DT_CREATE_TSTZ)),
     DT_CANCEL_TSTZ = decode (l_DT_CANCEL_TSTZ_n,0,dt_cancel_tstz_in, NVL (dt_cancel_tstz_in, DT_CANCEL_TSTZ)),
     SEQUENTIAL_NUMBER = decode (l_SEQUENTIAL_NUMBER_n,0,sequential_number_in, NVL (sequential_number_in, SEQUENTIAL_NUMBER)),
     ID_EPISODE = decode (l_ID_EPISODE_n,0,id_episode_in, NVL (id_episode_in, ID_EPISODE))
          WHERE
             ID_MATCH = id_match_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'P1_MATCH');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           IF l_name = 'PMATCH_CLR_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CLIN_RECORD'
               , value_in => id_clin_record_in);
           END IF;
           IF l_name = 'PMATCH_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'PMATCH_INST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           IF l_name = 'PMATCH_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'PMATCH_PMATCH_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_MATCH_PREV'
               , value_in => id_match_prev_in);
           END IF;
           IF l_name = 'PMATCH_PROF_CNC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'PMATCH_PROF_CRT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CREATE'
               , value_in => id_prof_create_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_match_in IN P1_MATCH.ID_MATCH%TYPE,
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      ID_CLIN_RECORD_nin IN BOOLEAN := TRUE,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      SEQUENTIAL_NUMBER_NUMBER_nin IN BOOLEAN := TRUE,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      ID_PROF_CREATE_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      ID_MATCH_PREV_nin IN BOOLEAN := TRUE,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT NULL,
      DT_CREATE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      SEQUENTIAL_NUMBER_nin IN BOOLEAN := TRUE,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_match_in => id_match_in,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_clin_record_in => id_clin_record_in,
      ID_CLIN_RECORD_nin => ID_CLIN_RECORD_nin,
      id_institution_in => id_institution_in,
      ID_INSTITUTION_nin => ID_INSTITUTION_nin,
      sequential_number_number_in => sequential_number_number_in,
      SEQUENTIAL_NUMBER_NUMBER_nin => SEQUENTIAL_NUMBER_NUMBER_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_prof_create_in => id_prof_create_in,
      ID_PROF_CREATE_nin => ID_PROF_CREATE_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      id_match_prev_in => id_match_prev_in,
      ID_MATCH_PREV_nin => ID_MATCH_PREV_nin,
      dt_create_tstz_in => dt_create_tstz_in,
      DT_CREATE_TSTZ_nin => DT_CREATE_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      sequential_number_in => sequential_number_in,
      SEQUENTIAL_NUMBER_nin => SEQUENTIAL_NUMBER_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      ID_CLIN_RECORD_nin IN BOOLEAN := TRUE,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      SEQUENTIAL_NUMBER_NUMBER_nin IN BOOLEAN := TRUE,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      ID_PROF_CREATE_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      ID_MATCH_PREV_nin IN BOOLEAN := TRUE,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT NULL,
      DT_CREATE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      SEQUENTIAL_NUMBER_nin IN BOOLEAN := TRUE,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(4000);
   l_rows_out TABLE_VARCHAR;
   l_ID_PATIENT_n NUMBER(1);
   l_ID_CLIN_RECORD_n NUMBER(1);
   l_ID_INSTITUTION_n NUMBER(1);
   l_SEQUENTIAL_NUMBER_NUMBER_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_PROF_CREATE_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_ID_MATCH_PREV_n NUMBER(1);
   l_DT_CREATE_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_SEQUENTIAL_NUMBER_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
      id_match_in P1_MATCH.ID_MATCH%TYPE;
   BEGIN



      l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
      l_ID_CLIN_RECORD_n := sys.diutil.bool_to_int(ID_CLIN_RECORD_nin);
      l_ID_INSTITUTION_n := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
      l_SEQUENTIAL_NUMBER_NUMBER_n := sys.diutil.bool_to_int(SEQUENTIAL_NUMBER_NUMBER_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_ID_PROF_CREATE_n := sys.diutil.bool_to_int(ID_PROF_CREATE_nin);
      l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
      l_ID_MATCH_PREV_n := sys.diutil.bool_to_int(ID_MATCH_PREV_nin);
      l_DT_CREATE_TSTZ_n := sys.diutil.bool_to_int(DT_CREATE_TSTZ_nin);
      l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
      l_SEQUENTIAL_NUMBER_n := sys.diutil.bool_to_int(SEQUENTIAL_NUMBER_nin);
      l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);



l_sql := 'UPDATE P1_MATCH SET '
     || ' ID_PATIENT = decode (' || l_ID_PATIENT_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) '|| ','
     || ' ID_CLIN_RECORD = decode (' || l_ID_CLIN_RECORD_n || ',0,:id_clin_record_in, NVL (:id_clin_record_in, ID_CLIN_RECORD)) '|| ','
     || ' ID_INSTITUTION = decode (' || l_ID_INSTITUTION_n || ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) '|| ','
     || ' SEQUENTIAL_NUMBER_NUMBER = decode (' || l_SEQUENTIAL_NUMBER_NUMBER_n || ',0,:sequential_number_number_in, NVL (:sequential_number_number_in, SEQUENTIAL_NUMBER_NUMBER)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' ID_PROF_CREATE = decode (' || l_ID_PROF_CREATE_n || ',0,:id_prof_create_in, NVL (:id_prof_create_in, ID_PROF_CREATE)) '|| ','
     || ' ID_PROF_CANCEL = decode (' || l_ID_PROF_CANCEL_n || ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) '|| ','
     || ' ID_MATCH_PREV = decode (' || l_ID_MATCH_PREV_n || ',0,:id_match_prev_in, NVL (:id_match_prev_in, ID_MATCH_PREV)) '|| ','
     || ' DT_CREATE_TSTZ = decode (' || l_DT_CREATE_TSTZ_n || ',0,:dt_create_tstz_in, NVL (:dt_create_tstz_in, DT_CREATE_TSTZ)) '|| ','
     || ' DT_CANCEL_TSTZ = decode (' || l_DT_CANCEL_TSTZ_n || ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) '|| ','
     || ' SEQUENTIAL_NUMBER = decode (' || l_SEQUENTIAL_NUMBER_n || ',0,:sequential_number_in, NVL (:sequential_number_in, SEQUENTIAL_NUMBER)) '|| ','
     || ' ID_EPISODE = decode (' || l_ID_EPISODE_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_patient_in,
     id_clin_record_in,
     id_institution_in,
     sequential_number_number_in,
     flg_status_in,
     id_prof_create_in,
     id_prof_cancel_in,
     id_match_prev_in,
     dt_create_tstz_in,
     dt_cancel_tstz_in,
     sequential_number_in,
     id_episode_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'P1_MATCH');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           IF l_name = 'PMATCH_CLR_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CLIN_RECORD'
               , value_in => id_clin_record_in);
           END IF;
           IF l_name = 'PMATCH_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'PMATCH_INST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           IF l_name = 'PMATCH_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'PMATCH_PMATCH_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_MATCH_PREV'
               , value_in => id_match_prev_in);
           END IF;
           IF l_name = 'PMATCH_PROF_CNC_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'PMATCH_PROF_CRT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CREATE'
               , value_in => id_prof_create_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      ID_CLIN_RECORD_nin IN BOOLEAN := TRUE,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      SEQUENTIAL_NUMBER_NUMBER_nin IN BOOLEAN := TRUE,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      ID_PROF_CREATE_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      ID_MATCH_PREV_nin IN BOOLEAN := TRUE,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT NULL,
      DT_CREATE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      SEQUENTIAL_NUMBER_nin IN BOOLEAN := TRUE,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_clin_record_in => id_clin_record_in,
      ID_CLIN_RECORD_nin => ID_CLIN_RECORD_nin,
      id_institution_in => id_institution_in,
      ID_INSTITUTION_nin => ID_INSTITUTION_nin,
      sequential_number_number_in => sequential_number_number_in,
      SEQUENTIAL_NUMBER_NUMBER_nin => SEQUENTIAL_NUMBER_NUMBER_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_prof_create_in => id_prof_create_in,
      ID_PROF_CREATE_nin => ID_PROF_CREATE_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      id_match_prev_in => id_match_prev_in,
      ID_MATCH_PREV_nin => ID_MATCH_PREV_nin,
      dt_create_tstz_in => dt_create_tstz_in,
      DT_CREATE_TSTZ_nin => DT_CREATE_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      sequential_number_in => sequential_number_in,
      SEQUENTIAL_NUMBER_nin => SEQUENTIAL_NUMBER_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN P1_MATCH%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_match_in => rec_in.ID_MATCH,
         id_patient_in => rec_in.ID_PATIENT,
         id_clin_record_in => rec_in.ID_CLIN_RECORD,
         id_institution_in => rec_in.ID_INSTITUTION,
         sequential_number_number_in => rec_in.SEQUENTIAL_NUMBER_NUMBER,
         flg_status_in => rec_in.FLG_STATUS,
         id_prof_create_in => rec_in.ID_PROF_CREATE,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         id_match_prev_in => rec_in.ID_MATCH_PREV,
         dt_create_tstz_in => rec_in.DT_CREATE_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         sequential_number_in => rec_in.SEQUENTIAL_NUMBER,
         id_episode_in => rec_in.ID_EPISODE

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN P1_MATCH%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_match_in => rec_in.ID_MATCH,
         id_patient_in => rec_in.ID_PATIENT,
         id_clin_record_in => rec_in.ID_CLIN_RECORD,
         id_institution_in => rec_in.ID_INSTITUTION,
         sequential_number_number_in => rec_in.SEQUENTIAL_NUMBER_NUMBER,
         flg_status_in => rec_in.FLG_STATUS,
         id_prof_create_in => rec_in.ID_PROF_CREATE,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         id_match_prev_in => rec_in.ID_MATCH_PREV,
         dt_create_tstz_in => rec_in.DT_CREATE_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         sequential_number_in => rec_in.SEQUENTIAL_NUMBER,
         id_episode_in => rec_in.ID_EPISODE

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_match_in IN P1_MATCH.ID_MATCH%TYPE,
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_match_in => id_match_in,
         id_patient_in => id_patient_in,
         id_clin_record_in => id_clin_record_in,
         id_institution_in => id_institution_in,
         sequential_number_number_in => sequential_number_number_in,
         flg_status_in => flg_status_in,
         id_prof_create_in => id_prof_create_in,
         id_prof_cancel_in => id_prof_cancel_in,
         id_match_prev_in => id_match_prev_in,
         dt_create_tstz_in => dt_create_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         sequential_number_in => sequential_number_in,
         id_episode_in => id_episode_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_match_in => id_match_in,
            id_patient_in => id_patient_in,
            id_clin_record_in => id_clin_record_in,
            id_institution_in => id_institution_in,
            sequential_number_number_in => sequential_number_number_in,
            flg_status_in => flg_status_in,
            id_prof_create_in => id_prof_create_in,
            id_prof_cancel_in => id_prof_cancel_in,
            id_match_prev_in => id_match_prev_in,
            dt_create_tstz_in => dt_create_tstz_in,
            dt_cancel_tstz_in => dt_cancel_tstz_in,
            sequential_number_in => sequential_number_in,
            id_episode_in => id_episode_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_match_in IN P1_MATCH.ID_MATCH%TYPE,
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE DEFAULT NULL,
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE DEFAULT NULL,
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE DEFAULT NULL,
      sequential_number_number_in IN P1_MATCH.SEQUENTIAL_NUMBER_NUMBER%TYPE DEFAULT NULL,
      flg_status_in IN P1_MATCH.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE DEFAULT NULL,
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE DEFAULT NULL,
      dt_create_tstz_in IN P1_MATCH.DT_CREATE_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN P1_MATCH.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      sequential_number_in IN P1_MATCH.SEQUENTIAL_NUMBER%TYPE DEFAULT NULL,
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_match_in,
      id_patient_in,
      id_clin_record_in,
      id_institution_in,
      sequential_number_number_in,
      flg_status_in,
      id_prof_create_in,
      id_prof_cancel_in,
      id_match_prev_in,
      dt_create_tstz_in,
      dt_cancel_tstz_in,
      sequential_number_in,
      id_episode_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN P1_MATCH_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_MATCH ID_MATCH_cc;
      l_ID_PATIENT ID_PATIENT_cc;
      l_ID_CLIN_RECORD ID_CLIN_RECORD_cc;
      l_ID_INSTITUTION ID_INSTITUTION_cc;
      l_SEQUENTIAL_NUMBER_NUMBER SEQUENTIAL_NUMBER_NUMBER_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_ID_PROF_CREATE ID_PROF_CREATE_cc;
      l_ID_PROF_CANCEL ID_PROF_CANCEL_cc;
      l_ID_MATCH_PREV ID_MATCH_PREV_cc;
      l_DT_CREATE_TSTZ DT_CREATE_TSTZ_cc;
      l_DT_CANCEL_TSTZ DT_CANCEL_TSTZ_cc;
      l_SEQUENTIAL_NUMBER SEQUENTIAL_NUMBER_cc;
      l_ID_EPISODE ID_EPISODE_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_MATCH(i) := col_in(i).ID_MATCH;
         l_ID_PATIENT(i) := col_in(i).ID_PATIENT;
         l_ID_CLIN_RECORD(i) := col_in(i).ID_CLIN_RECORD;
         l_ID_INSTITUTION(i) := col_in(i).ID_INSTITUTION;
         l_SEQUENTIAL_NUMBER_NUMBER(i) := col_in(i).SEQUENTIAL_NUMBER_NUMBER;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_ID_PROF_CREATE(i) := col_in(i).ID_PROF_CREATE;
         l_ID_PROF_CANCEL(i) := col_in(i).ID_PROF_CANCEL;
         l_ID_MATCH_PREV(i) := col_in(i).ID_MATCH_PREV;
         l_DT_CREATE_TSTZ(i) := col_in(i).DT_CREATE_TSTZ;
         l_DT_CANCEL_TSTZ(i) := col_in(i).DT_CANCEL_TSTZ;
         l_SEQUENTIAL_NUMBER(i) := col_in(i).SEQUENTIAL_NUMBER;
         l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE P1_MATCH SET
               ID_PATIENT = NVL (l_ID_PATIENT(i), ID_PATIENT),
               ID_CLIN_RECORD = NVL (l_ID_CLIN_RECORD(i), ID_CLIN_RECORD),
               ID_INSTITUTION = NVL (l_ID_INSTITUTION(i), ID_INSTITUTION),
               SEQUENTIAL_NUMBER_NUMBER = NVL (l_SEQUENTIAL_NUMBER_NUMBER(i), SEQUENTIAL_NUMBER_NUMBER),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               ID_PROF_CREATE = NVL (l_ID_PROF_CREATE(i), ID_PROF_CREATE),
               ID_PROF_CANCEL = NVL (l_ID_PROF_CANCEL(i), ID_PROF_CANCEL),
               ID_MATCH_PREV = NVL (l_ID_MATCH_PREV(i), ID_MATCH_PREV),
               DT_CREATE_TSTZ = NVL (l_DT_CREATE_TSTZ(i), DT_CREATE_TSTZ),
               DT_CANCEL_TSTZ = NVL (l_DT_CANCEL_TSTZ(i), DT_CANCEL_TSTZ),
               SEQUENTIAL_NUMBER = NVL (l_SEQUENTIAL_NUMBER(i), SEQUENTIAL_NUMBER),
               ID_EPISODE = NVL (l_ID_EPISODE(i), ID_EPISODE)
             WHERE
                ID_MATCH = l_ID_MATCH(i)
         ;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE P1_MATCH SET
               ID_PATIENT = l_ID_PATIENT(i),
               ID_CLIN_RECORD = l_ID_CLIN_RECORD(i),
               ID_INSTITUTION = l_ID_INSTITUTION(i),
               SEQUENTIAL_NUMBER_NUMBER = l_SEQUENTIAL_NUMBER_NUMBER(i),
               FLG_STATUS = l_FLG_STATUS(i),
               ID_PROF_CREATE = l_ID_PROF_CREATE(i),
               ID_PROF_CANCEL = l_ID_PROF_CANCEL(i),
               ID_MATCH_PREV = l_ID_MATCH_PREV(i),
               DT_CREATE_TSTZ = l_DT_CREATE_TSTZ(i),
               DT_CANCEL_TSTZ = l_DT_CANCEL_TSTZ(i),
               SEQUENTIAL_NUMBER = l_SEQUENTIAL_NUMBER(i),
               ID_EPISODE = l_ID_EPISODE(i)
             WHERE
                ID_MATCH = l_ID_MATCH(i)
         ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN P1_MATCH_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE P1_MATCH
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE P1_MATCH
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE P1_MATCH set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE P1_MATCH set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_match_in IN P1_MATCH.ID_MATCH%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM P1_MATCH
       WHERE
          ID_MATCH = id_match_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_match_in IN P1_MATCH.ID_MATCH%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_match_in => id_match_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_MATCH
   PROCEDURE del_ID_MATCH (
      id_match_in IN P1_MATCH.ID_MATCH%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM P1_MATCH
       WHERE ID_MATCH = id_match_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_MATCH;






   -- Delete all rows for primary key column ID_MATCH
   PROCEDURE del_ID_MATCH (
      id_match_in IN P1_MATCH.ID_MATCH%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_MATCH (
      id_match_in => id_match_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_MATCH;















   PROCEDURE del_PMATCH_CLR_FK (
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM P1_MATCH
       WHERE
          ID_CLIN_RECORD = del_PMATCH_CLR_FK.id_clin_record_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMATCH_CLR_FK;



PROCEDURE del_PMATCH_CLR_FK (
      id_clin_record_in IN P1_MATCH.ID_CLIN_RECORD%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMATCH_CLR_FK (
      id_clin_record_in => id_clin_record_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMATCH_CLR_FK;





   PROCEDURE del_PMATCH_EPIS_FK (
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM P1_MATCH
       WHERE
          ID_EPISODE = del_PMATCH_EPIS_FK.id_episode_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMATCH_EPIS_FK;



PROCEDURE del_PMATCH_EPIS_FK (
      id_episode_in IN P1_MATCH.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMATCH_EPIS_FK (
      id_episode_in => id_episode_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMATCH_EPIS_FK;





   PROCEDURE del_PMATCH_INST_FK (
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM P1_MATCH
       WHERE
          ID_INSTITUTION = del_PMATCH_INST_FK.id_institution_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMATCH_INST_FK;



PROCEDURE del_PMATCH_INST_FK (
      id_institution_in IN P1_MATCH.ID_INSTITUTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMATCH_INST_FK (
      id_institution_in => id_institution_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMATCH_INST_FK;





   PROCEDURE del_PMATCH_PAT_FK (
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM P1_MATCH
       WHERE
          ID_PATIENT = del_PMATCH_PAT_FK.id_patient_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMATCH_PAT_FK;



PROCEDURE del_PMATCH_PAT_FK (
      id_patient_in IN P1_MATCH.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMATCH_PAT_FK (
      id_patient_in => id_patient_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMATCH_PAT_FK;





   PROCEDURE del_PMATCH_PMATCH_FK (
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM P1_MATCH
       WHERE
          ID_MATCH_PREV = del_PMATCH_PMATCH_FK.id_match_prev_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMATCH_PMATCH_FK;



PROCEDURE del_PMATCH_PMATCH_FK (
      id_match_prev_in IN P1_MATCH.ID_MATCH_PREV%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMATCH_PMATCH_FK (
      id_match_prev_in => id_match_prev_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMATCH_PMATCH_FK;





   PROCEDURE del_PMATCH_PROF_CNC_FK (
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM P1_MATCH
       WHERE
          ID_PROF_CANCEL = del_PMATCH_PROF_CNC_FK.id_prof_cancel_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMATCH_PROF_CNC_FK;



PROCEDURE del_PMATCH_PROF_CNC_FK (
      id_prof_cancel_in IN P1_MATCH.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMATCH_PROF_CNC_FK (
      id_prof_cancel_in => id_prof_cancel_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMATCH_PROF_CNC_FK;





   PROCEDURE del_PMATCH_PROF_CRT_FK (
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM P1_MATCH
       WHERE
          ID_PROF_CREATE = del_PMATCH_PROF_CRT_FK.id_prof_create_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMATCH_PROF_CRT_FK;



PROCEDURE del_PMATCH_PROF_CRT_FK (
      id_prof_create_in IN P1_MATCH.ID_PROF_CREATE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMATCH_PROF_CRT_FK (
      id_prof_create_in => id_prof_create_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMATCH_PROF_CRT_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM P1_MATCH';
      ELSE
         RETURN
            'DELETE FROM P1_MATCH WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'P1_MATCH');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'P1_MATCH');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      p1_match_inout IN OUT P1_MATCH%ROWTYPE
   )
   IS
   BEGIN
      p1_match_inout.ID_MATCH := NULL;
      p1_match_inout.ID_PATIENT := NULL;
      p1_match_inout.ID_CLIN_RECORD := NULL;
      p1_match_inout.ID_INSTITUTION := NULL;
      p1_match_inout.SEQUENTIAL_NUMBER_NUMBER := NULL;
      p1_match_inout.FLG_STATUS := 'A'
;
      p1_match_inout.ID_PROF_CREATE := NULL;
      p1_match_inout.ID_PROF_CANCEL := NULL;
      p1_match_inout.ID_MATCH_PREV := NULL;
      p1_match_inout.DT_CREATE_TSTZ := current_timestamp
;
      p1_match_inout.DT_CANCEL_TSTZ := NULL;
      p1_match_inout.SEQUENTIAL_NUMBER := NULL;
      p1_match_inout.ID_EPISODE := NULL;
   END initrec;

   FUNCTION initrec RETURN P1_MATCH%ROWTYPE
   IS
      l_p1_match P1_MATCH%ROWTYPE;
   BEGIN
      l_p1_match.FLG_STATUS := 'A'
;
      l_p1_match.DT_CREATE_TSTZ := current_timestamp
;
      RETURN l_p1_match;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN P1_MATCH_tc
   IS
        data P1_MATCH_tc;
   BEGIN
        select * bulk collect into data from P1_MATCH where rowid in (select * from table(rows_in));
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN P1_MATCH_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data P1_MATCH_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_P1_MATCH;
/
