/*-- Last Change Revision: $Rev: 2028322 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:06 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_pat_problem_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Julho 20, 2016 15:13:52
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_pat_problem_hist_in       IN pat_problem_hist.id_pat_problem_hist%TYPE,
        id_pat_problem_in            IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_patient_in                IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_diagnosis_in              IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_professional_ins_in       IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_epis_diagnosis_in         IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        desc_pat_problem_in          IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        notes_in                     IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        flg_age_in                   IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        year_begin_in                IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        month_begin_in               IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        day_begin_in                 IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        year_end_in                  IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        month_end_in                 IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        day_end_in                   IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        pct_incapacity_in            IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        flg_surgery_in               IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        notes_support_in             IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        rank_in                      IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        flg_status_in                IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_aproved_in               IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        id_institution_in            IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_pat_habit_in              IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_episode_in                IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_epis_anamnesis_in         IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        flg_nature_in                IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        id_alert_diagnosis_in        IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_in       IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_in           IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in              IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in               IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        dt_resolution_in             IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        id_habit_characterization_in IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pat_problem_hist
            (id_pat_problem_hist,
             id_pat_problem,
             id_patient,
             id_diagnosis,
             id_professional_ins,
             id_epis_diagnosis,
             desc_pat_problem,
             notes,
             flg_age,
             year_begin,
             month_begin,
             day_begin,
             year_end,
             month_end,
             day_end,
             pct_incapacity,
             flg_surgery,
             notes_support,
             rank,
             flg_status,
             flg_aproved,
             id_institution,
             id_pat_habit,
             id_episode,
             id_epis_anamnesis,
             flg_nature,
             id_alert_diagnosis,
             dt_pat_problem_tstz,
             dt_confirm_tstz,
             id_cancel_reason,
             cancel_notes,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             dt_resolution,
             id_habit_characterization)
        VALUES
            (id_pat_problem_hist_in,
             id_pat_problem_in,
             id_patient_in,
             id_diagnosis_in,
             id_professional_ins_in,
             id_epis_diagnosis_in,
             desc_pat_problem_in,
             notes_in,
             flg_age_in,
             year_begin_in,
             month_begin_in,
             day_begin_in,
             year_end_in,
             month_end_in,
             day_end_in,
             pct_incapacity_in,
             flg_surgery_in,
             notes_support_in,
             rank_in,
             flg_status_in,
             flg_aproved_in,
             id_institution_in,
             id_pat_habit_in,
             id_episode_in,
             id_epis_anamnesis_in,
             flg_nature_in,
             id_alert_diagnosis_in,
             dt_pat_problem_tstz_in,
             dt_confirm_tstz_in,
             id_cancel_reason_in,
             cancel_notes_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             dt_resolution_in,
             id_habit_characterization_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_PROBLEM_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    IF l_name = 'PPH_COMP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_ANAMNESIS',
                                                        value_in           => id_epis_anamnesis_in);
                    END IF;
                    IF l_name = 'PPH_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PPH_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PPH_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PPH_PPM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_PROBLEM',
                                                        value_in           => id_pat_problem_in);
                    END IF;
                    IF l_name = 'PPH_PTNOT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_HABIT',
                                                        value_in           => id_pat_habit_in);
                    END IF;
                    IF l_name = 'PPMH_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_pat_problem_hist_in       IN pat_problem_hist.id_pat_problem_hist%TYPE,
        id_pat_problem_in            IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_patient_in                IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_diagnosis_in              IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_professional_ins_in       IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_epis_diagnosis_in         IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        desc_pat_problem_in          IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        notes_in                     IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        flg_age_in                   IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        year_begin_in                IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        month_begin_in               IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        day_begin_in                 IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        year_end_in                  IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        month_end_in                 IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        day_end_in                   IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        pct_incapacity_in            IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        flg_surgery_in               IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        notes_support_in             IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        rank_in                      IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        flg_status_in                IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_aproved_in               IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        id_institution_in            IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_pat_habit_in              IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_episode_in                IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_epis_anamnesis_in         IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        flg_nature_in                IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        id_alert_diagnosis_in        IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_in       IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_in           IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in              IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in               IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        dt_resolution_in             IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        id_habit_characterization_in IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_pat_problem_hist_in       => id_pat_problem_hist_in,
            id_pat_problem_in            => id_pat_problem_in,
            id_patient_in                => id_patient_in,
            id_diagnosis_in              => id_diagnosis_in,
            id_professional_ins_in       => id_professional_ins_in,
            id_epis_diagnosis_in         => id_epis_diagnosis_in,
            desc_pat_problem_in          => desc_pat_problem_in,
            notes_in                     => notes_in,
            flg_age_in                   => flg_age_in,
            year_begin_in                => year_begin_in,
            month_begin_in               => month_begin_in,
            day_begin_in                 => day_begin_in,
            year_end_in                  => year_end_in,
            month_end_in                 => month_end_in,
            day_end_in                   => day_end_in,
            pct_incapacity_in            => pct_incapacity_in,
            flg_surgery_in               => flg_surgery_in,
            notes_support_in             => notes_support_in,
            rank_in                      => rank_in,
            flg_status_in                => flg_status_in,
            flg_aproved_in               => flg_aproved_in,
            id_institution_in            => id_institution_in,
            id_pat_habit_in              => id_pat_habit_in,
            id_episode_in                => id_episode_in,
            id_epis_anamnesis_in         => id_epis_anamnesis_in,
            flg_nature_in                => flg_nature_in,
            id_alert_diagnosis_in        => id_alert_diagnosis_in,
            dt_pat_problem_tstz_in       => dt_pat_problem_tstz_in,
            dt_confirm_tstz_in           => dt_confirm_tstz_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            cancel_notes_in              => cancel_notes_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            dt_resolution_in             => dt_resolution_in,
            id_habit_characterization_in => id_habit_characterization_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_problem_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pat_problem_hist%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_pat_problem_hist := next_key(sequence_in);
        END IF;
        ins(id_pat_problem_hist_in       => l_rec.id_pat_problem_hist,
            id_pat_problem_in            => l_rec.id_pat_problem,
            id_patient_in                => l_rec.id_patient,
            id_diagnosis_in              => l_rec.id_diagnosis,
            id_professional_ins_in       => l_rec.id_professional_ins,
            id_epis_diagnosis_in         => l_rec.id_epis_diagnosis,
            desc_pat_problem_in          => l_rec.desc_pat_problem,
            notes_in                     => l_rec.notes,
            flg_age_in                   => l_rec.flg_age,
            year_begin_in                => l_rec.year_begin,
            month_begin_in               => l_rec.month_begin,
            day_begin_in                 => l_rec.day_begin,
            year_end_in                  => l_rec.year_end,
            month_end_in                 => l_rec.month_end,
            day_end_in                   => l_rec.day_end,
            pct_incapacity_in            => l_rec.pct_incapacity,
            flg_surgery_in               => l_rec.flg_surgery,
            notes_support_in             => l_rec.notes_support,
            rank_in                      => l_rec.rank,
            flg_status_in                => l_rec.flg_status,
            flg_aproved_in               => l_rec.flg_aproved,
            id_institution_in            => l_rec.id_institution,
            id_pat_habit_in              => l_rec.id_pat_habit,
            id_episode_in                => l_rec.id_episode,
            id_epis_anamnesis_in         => l_rec.id_epis_anamnesis,
            flg_nature_in                => l_rec.flg_nature,
            id_alert_diagnosis_in        => l_rec.id_alert_diagnosis,
            dt_pat_problem_tstz_in       => l_rec.dt_pat_problem_tstz,
            dt_confirm_tstz_in           => l_rec.dt_confirm_tstz,
            id_cancel_reason_in          => l_rec.id_cancel_reason,
            cancel_notes_in              => l_rec.cancel_notes,
            create_user_in               => l_rec.create_user,
            create_time_in               => l_rec.create_time,
            create_institution_in        => l_rec.create_institution,
            update_user_in               => l_rec.update_user,
            update_time_in               => l_rec.update_time,
            update_institution_in        => l_rec.update_institution,
            dt_resolution_in             => l_rec.dt_resolution,
            id_habit_characterization_in => l_rec.id_habit_characterization,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_problem_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN pat_problem_hist.id_pat_problem_hist%TYPE
    
     IS
        retval pat_problem_hist.id_pat_problem_hist%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_pat_problem_hist.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PAT_PROBLEM_HIST'));
    END next_key;

    PROCEDURE ins
    (
        id_pat_problem_in            IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_patient_in                IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_diagnosis_in              IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_professional_ins_in       IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_epis_diagnosis_in         IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        desc_pat_problem_in          IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        notes_in                     IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        flg_age_in                   IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        year_begin_in                IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        month_begin_in               IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        day_begin_in                 IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        year_end_in                  IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        month_end_in                 IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        day_end_in                   IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        pct_incapacity_in            IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        flg_surgery_in               IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        notes_support_in             IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        rank_in                      IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        flg_status_in                IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_aproved_in               IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        id_institution_in            IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_pat_habit_in              IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_episode_in                IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_epis_anamnesis_in         IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        flg_nature_in                IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        id_alert_diagnosis_in        IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_in       IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_in           IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in              IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in               IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        dt_resolution_in             IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        id_habit_characterization_in IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        id_pat_problem_hist_out      IN OUT pat_problem_hist.id_pat_problem_hist%TYPE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
        l_pky pat_problem_hist.id_pat_problem_hist%TYPE := next_key;
    BEGIN
        ins(id_pat_problem_hist_in       => l_pky,
            id_pat_problem_in            => id_pat_problem_in,
            id_patient_in                => id_patient_in,
            id_diagnosis_in              => id_diagnosis_in,
            id_professional_ins_in       => id_professional_ins_in,
            id_epis_diagnosis_in         => id_epis_diagnosis_in,
            desc_pat_problem_in          => desc_pat_problem_in,
            notes_in                     => notes_in,
            flg_age_in                   => flg_age_in,
            year_begin_in                => year_begin_in,
            month_begin_in               => month_begin_in,
            day_begin_in                 => day_begin_in,
            year_end_in                  => year_end_in,
            month_end_in                 => month_end_in,
            day_end_in                   => day_end_in,
            pct_incapacity_in            => pct_incapacity_in,
            flg_surgery_in               => flg_surgery_in,
            notes_support_in             => notes_support_in,
            rank_in                      => rank_in,
            flg_status_in                => flg_status_in,
            flg_aproved_in               => flg_aproved_in,
            id_institution_in            => id_institution_in,
            id_pat_habit_in              => id_pat_habit_in,
            id_episode_in                => id_episode_in,
            id_epis_anamnesis_in         => id_epis_anamnesis_in,
            flg_nature_in                => flg_nature_in,
            id_alert_diagnosis_in        => id_alert_diagnosis_in,
            dt_pat_problem_tstz_in       => dt_pat_problem_tstz_in,
            dt_confirm_tstz_in           => dt_confirm_tstz_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            cancel_notes_in              => cancel_notes_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            dt_resolution_in             => dt_resolution_in,
            id_habit_characterization_in => id_habit_characterization_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        id_pat_problem_hist_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_pat_problem_in            IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_patient_in                IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_diagnosis_in              IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_professional_ins_in       IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_epis_diagnosis_in         IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        desc_pat_problem_in          IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        notes_in                     IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        flg_age_in                   IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        year_begin_in                IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        month_begin_in               IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        day_begin_in                 IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        year_end_in                  IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        month_end_in                 IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        day_end_in                   IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        pct_incapacity_in            IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        flg_surgery_in               IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        notes_support_in             IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        rank_in                      IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        flg_status_in                IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_aproved_in               IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        id_institution_in            IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_pat_habit_in              IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_episode_in                IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_epis_anamnesis_in         IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        flg_nature_in                IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        id_alert_diagnosis_in        IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_in       IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_in           IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in              IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in               IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        dt_resolution_in             IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        id_habit_characterization_in IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        id_pat_problem_hist_out      IN OUT pat_problem_hist.id_pat_problem_hist%TYPE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_pat_problem_in            => id_pat_problem_in,
            id_patient_in                => id_patient_in,
            id_diagnosis_in              => id_diagnosis_in,
            id_professional_ins_in       => id_professional_ins_in,
            id_epis_diagnosis_in         => id_epis_diagnosis_in,
            desc_pat_problem_in          => desc_pat_problem_in,
            notes_in                     => notes_in,
            flg_age_in                   => flg_age_in,
            year_begin_in                => year_begin_in,
            month_begin_in               => month_begin_in,
            day_begin_in                 => day_begin_in,
            year_end_in                  => year_end_in,
            month_end_in                 => month_end_in,
            day_end_in                   => day_end_in,
            pct_incapacity_in            => pct_incapacity_in,
            flg_surgery_in               => flg_surgery_in,
            notes_support_in             => notes_support_in,
            rank_in                      => rank_in,
            flg_status_in                => flg_status_in,
            flg_aproved_in               => flg_aproved_in,
            id_institution_in            => id_institution_in,
            id_pat_habit_in              => id_pat_habit_in,
            id_episode_in                => id_episode_in,
            id_epis_anamnesis_in         => id_epis_anamnesis_in,
            flg_nature_in                => flg_nature_in,
            id_alert_diagnosis_in        => id_alert_diagnosis_in,
            dt_pat_problem_tstz_in       => dt_pat_problem_tstz_in,
            dt_confirm_tstz_in           => dt_confirm_tstz_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            cancel_notes_in              => cancel_notes_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            dt_resolution_in             => dt_resolution_in,
            id_habit_characterization_in => id_habit_characterization_in,
            id_pat_problem_hist_out      => id_pat_problem_hist_out,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    FUNCTION ins
    (
        id_pat_problem_in            IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_patient_in                IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_diagnosis_in              IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_professional_ins_in       IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_epis_diagnosis_in         IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        desc_pat_problem_in          IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        notes_in                     IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        flg_age_in                   IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        year_begin_in                IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        month_begin_in               IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        day_begin_in                 IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        year_end_in                  IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        month_end_in                 IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        day_end_in                   IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        pct_incapacity_in            IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        flg_surgery_in               IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        notes_support_in             IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        rank_in                      IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        flg_status_in                IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_aproved_in               IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        id_institution_in            IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_pat_habit_in              IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_episode_in                IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_epis_anamnesis_in         IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        flg_nature_in                IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        id_alert_diagnosis_in        IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_in       IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_in           IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in              IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in               IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        dt_resolution_in             IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        id_habit_characterization_in IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) RETURN pat_problem_hist.id_pat_problem_hist%TYPE IS
        l_pky pat_problem_hist.id_pat_problem_hist%TYPE := next_key;
    BEGIN
        ins(id_pat_problem_hist_in       => l_pky,
            id_pat_problem_in            => id_pat_problem_in,
            id_patient_in                => id_patient_in,
            id_diagnosis_in              => id_diagnosis_in,
            id_professional_ins_in       => id_professional_ins_in,
            id_epis_diagnosis_in         => id_epis_diagnosis_in,
            desc_pat_problem_in          => desc_pat_problem_in,
            notes_in                     => notes_in,
            flg_age_in                   => flg_age_in,
            year_begin_in                => year_begin_in,
            month_begin_in               => month_begin_in,
            day_begin_in                 => day_begin_in,
            year_end_in                  => year_end_in,
            month_end_in                 => month_end_in,
            day_end_in                   => day_end_in,
            pct_incapacity_in            => pct_incapacity_in,
            flg_surgery_in               => flg_surgery_in,
            notes_support_in             => notes_support_in,
            rank_in                      => rank_in,
            flg_status_in                => flg_status_in,
            flg_aproved_in               => flg_aproved_in,
            id_institution_in            => id_institution_in,
            id_pat_habit_in              => id_pat_habit_in,
            id_episode_in                => id_episode_in,
            id_epis_anamnesis_in         => id_epis_anamnesis_in,
            flg_nature_in                => flg_nature_in,
            id_alert_diagnosis_in        => id_alert_diagnosis_in,
            dt_pat_problem_tstz_in       => dt_pat_problem_tstz_in,
            dt_confirm_tstz_in           => dt_confirm_tstz_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            cancel_notes_in              => cancel_notes_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            dt_resolution_in             => dt_resolution_in,
            id_habit_characterization_in => id_habit_characterization_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_pat_problem_in            IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_patient_in                IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_diagnosis_in              IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_professional_ins_in       IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_epis_diagnosis_in         IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        desc_pat_problem_in          IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        notes_in                     IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        flg_age_in                   IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        year_begin_in                IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        month_begin_in               IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        day_begin_in                 IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        year_end_in                  IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        month_end_in                 IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        day_end_in                   IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        pct_incapacity_in            IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        flg_surgery_in               IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        notes_support_in             IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        rank_in                      IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        flg_status_in                IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_aproved_in               IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        id_institution_in            IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_pat_habit_in              IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_episode_in                IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_epis_anamnesis_in         IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        flg_nature_in                IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        id_alert_diagnosis_in        IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_in       IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_in           IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in              IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in               IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        dt_resolution_in             IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        id_habit_characterization_in IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) RETURN pat_problem_hist.id_pat_problem_hist%TYPE IS
        l_pky    pat_problem_hist.id_pat_problem_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_problem_hist_in       => l_pky,
            id_pat_problem_in            => id_pat_problem_in,
            id_patient_in                => id_patient_in,
            id_diagnosis_in              => id_diagnosis_in,
            id_professional_ins_in       => id_professional_ins_in,
            id_epis_diagnosis_in         => id_epis_diagnosis_in,
            desc_pat_problem_in          => desc_pat_problem_in,
            notes_in                     => notes_in,
            flg_age_in                   => flg_age_in,
            year_begin_in                => year_begin_in,
            month_begin_in               => month_begin_in,
            day_begin_in                 => day_begin_in,
            year_end_in                  => year_end_in,
            month_end_in                 => month_end_in,
            day_end_in                   => day_end_in,
            pct_incapacity_in            => pct_incapacity_in,
            flg_surgery_in               => flg_surgery_in,
            notes_support_in             => notes_support_in,
            rank_in                      => rank_in,
            flg_status_in                => flg_status_in,
            flg_aproved_in               => flg_aproved_in,
            id_institution_in            => id_institution_in,
            id_pat_habit_in              => id_pat_habit_in,
            id_episode_in                => id_episode_in,
            id_epis_anamnesis_in         => id_epis_anamnesis_in,
            flg_nature_in                => flg_nature_in,
            id_alert_diagnosis_in        => id_alert_diagnosis_in,
            dt_pat_problem_tstz_in       => dt_pat_problem_tstz_in,
            dt_confirm_tstz_in           => dt_confirm_tstz_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            cancel_notes_in              => cancel_notes_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            dt_resolution_in             => dt_resolution_in,
            id_habit_characterization_in => id_habit_characterization_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_pat_problem_in            IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_patient_in                IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_diagnosis_in              IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_professional_ins_in       IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_epis_diagnosis_in         IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        desc_pat_problem_in          IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        notes_in                     IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        flg_age_in                   IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        year_begin_in                IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        month_begin_in               IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        day_begin_in                 IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        year_end_in                  IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        month_end_in                 IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        day_end_in                   IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        pct_incapacity_in            IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        flg_surgery_in               IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        notes_support_in             IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        rank_in                      IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        flg_status_in                IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_aproved_in               IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        id_institution_in            IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_pat_habit_in              IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_episode_in                IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_epis_anamnesis_in         IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        flg_nature_in                IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        id_alert_diagnosis_in        IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_in       IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_in           IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in              IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in               IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        dt_resolution_in             IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        id_habit_characterization_in IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
        l_pky pat_problem_hist.id_pat_problem_hist%TYPE := next_key;
    BEGIN
        ins(id_pat_problem_hist_in       => l_pky,
            id_pat_problem_in            => id_pat_problem_in,
            id_patient_in                => id_patient_in,
            id_diagnosis_in              => id_diagnosis_in,
            id_professional_ins_in       => id_professional_ins_in,
            id_epis_diagnosis_in         => id_epis_diagnosis_in,
            desc_pat_problem_in          => desc_pat_problem_in,
            notes_in                     => notes_in,
            flg_age_in                   => flg_age_in,
            year_begin_in                => year_begin_in,
            month_begin_in               => month_begin_in,
            day_begin_in                 => day_begin_in,
            year_end_in                  => year_end_in,
            month_end_in                 => month_end_in,
            day_end_in                   => day_end_in,
            pct_incapacity_in            => pct_incapacity_in,
            flg_surgery_in               => flg_surgery_in,
            notes_support_in             => notes_support_in,
            rank_in                      => rank_in,
            flg_status_in                => flg_status_in,
            flg_aproved_in               => flg_aproved_in,
            id_institution_in            => id_institution_in,
            id_pat_habit_in              => id_pat_habit_in,
            id_episode_in                => id_episode_in,
            id_epis_anamnesis_in         => id_epis_anamnesis_in,
            flg_nature_in                => flg_nature_in,
            id_alert_diagnosis_in        => id_alert_diagnosis_in,
            dt_pat_problem_tstz_in       => dt_pat_problem_tstz_in,
            dt_confirm_tstz_in           => dt_confirm_tstz_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            cancel_notes_in              => cancel_notes_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            dt_resolution_in             => dt_resolution_in,
            id_habit_characterization_in => id_habit_characterization_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_pat_problem_in            IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_patient_in                IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_diagnosis_in              IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_professional_ins_in       IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_epis_diagnosis_in         IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        desc_pat_problem_in          IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        notes_in                     IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        flg_age_in                   IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        year_begin_in                IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        month_begin_in               IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        day_begin_in                 IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        year_end_in                  IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        month_end_in                 IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        day_end_in                   IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        pct_incapacity_in            IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        flg_surgery_in               IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        notes_support_in             IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        rank_in                      IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        flg_status_in                IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_aproved_in               IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        id_institution_in            IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_pat_habit_in              IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_episode_in                IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_epis_anamnesis_in         IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        flg_nature_in                IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        id_alert_diagnosis_in        IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_in       IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_in           IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in              IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in               IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        dt_resolution_in             IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        id_habit_characterization_in IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        l_pky    pat_problem_hist.id_pat_problem_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_problem_hist_in       => l_pky,
            id_pat_problem_in            => id_pat_problem_in,
            id_patient_in                => id_patient_in,
            id_diagnosis_in              => id_diagnosis_in,
            id_professional_ins_in       => id_professional_ins_in,
            id_epis_diagnosis_in         => id_epis_diagnosis_in,
            desc_pat_problem_in          => desc_pat_problem_in,
            notes_in                     => notes_in,
            flg_age_in                   => flg_age_in,
            year_begin_in                => year_begin_in,
            month_begin_in               => month_begin_in,
            day_begin_in                 => day_begin_in,
            year_end_in                  => year_end_in,
            month_end_in                 => month_end_in,
            day_end_in                   => day_end_in,
            pct_incapacity_in            => pct_incapacity_in,
            flg_surgery_in               => flg_surgery_in,
            notes_support_in             => notes_support_in,
            rank_in                      => rank_in,
            flg_status_in                => flg_status_in,
            flg_aproved_in               => flg_aproved_in,
            id_institution_in            => id_institution_in,
            id_pat_habit_in              => id_pat_habit_in,
            id_episode_in                => id_episode_in,
            id_epis_anamnesis_in         => id_epis_anamnesis_in,
            flg_nature_in                => flg_nature_in,
            id_alert_diagnosis_in        => id_alert_diagnosis_in,
            dt_pat_problem_tstz_in       => dt_pat_problem_tstz_in,
            dt_confirm_tstz_in           => dt_confirm_tstz_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            cancel_notes_in              => cancel_notes_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            dt_resolution_in             => dt_resolution_in,
            id_habit_characterization_in => id_habit_characterization_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_problem_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO pat_problem_hist
                    (id_pat_problem_hist,
                     id_pat_problem,
                     id_patient,
                     id_diagnosis,
                     id_professional_ins,
                     id_epis_diagnosis,
                     desc_pat_problem,
                     notes,
                     flg_age,
                     year_begin,
                     month_begin,
                     day_begin,
                     year_end,
                     month_end,
                     day_end,
                     pct_incapacity,
                     flg_surgery,
                     notes_support,
                     rank,
                     flg_status,
                     flg_aproved,
                     id_institution,
                     id_pat_habit,
                     id_episode,
                     id_epis_anamnesis,
                     flg_nature,
                     id_alert_diagnosis,
                     dt_pat_problem_tstz,
                     dt_confirm_tstz,
                     id_cancel_reason,
                     cancel_notes,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     dt_resolution,
                     id_habit_characterization)
                VALUES
                    (rows_in(indx).id_pat_problem_hist,
                     rows_in(indx).id_pat_problem,
                     rows_in(indx).id_patient,
                     rows_in(indx).id_diagnosis,
                     rows_in(indx).id_professional_ins,
                     rows_in(indx).id_epis_diagnosis,
                     rows_in(indx).desc_pat_problem,
                     rows_in(indx).notes,
                     rows_in(indx).flg_age,
                     rows_in(indx).year_begin,
                     rows_in(indx).month_begin,
                     rows_in(indx).day_begin,
                     rows_in(indx).year_end,
                     rows_in(indx).month_end,
                     rows_in(indx).day_end,
                     rows_in(indx).pct_incapacity,
                     rows_in(indx).flg_surgery,
                     rows_in(indx).notes_support,
                     rows_in(indx).rank,
                     rows_in(indx).flg_status,
                     rows_in(indx).flg_aproved,
                     rows_in(indx).id_institution,
                     rows_in(indx).id_pat_habit,
                     rows_in(indx).id_episode,
                     rows_in(indx).id_epis_anamnesis,
                     rows_in(indx).flg_nature,
                     rows_in(indx).id_alert_diagnosis,
                     rows_in(indx).dt_pat_problem_tstz,
                     rows_in(indx).dt_confirm_tstz,
                     rows_in(indx).id_cancel_reason,
                     rows_in(indx).cancel_notes,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).dt_resolution,
                     rows_in(indx).id_habit_characterization)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_PROBLEM_HIST _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_pat_problem_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_PROBLEM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_pat_problem,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DIAGNOSIS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_diagnosis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL_INS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_professional_ins,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_DIAGNOSIS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_epis_diagnosis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DESC_PAT_PROBLEM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .desc_pat_problem,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AGE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_age,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'YEAR_BEGIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .year_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MONTH_BEGIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .month_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DAY_BEGIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .day_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'YEAR_END _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .year_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MONTH_END _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .month_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DAY_END _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .day_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PCT_INCAPACITY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .pct_incapacity,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_SURGERY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_surgery,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_SUPPORT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes_support,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RANK _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index).rank,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_APROVED _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_aproved,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_HABIT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_pat_habit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_ANAMNESIS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_epis_anamnesis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_NATURE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_nature,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ALERT_DIAGNOSIS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_alert_diagnosis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PAT_PROBLEM_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_pat_problem_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CONFIRM_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_confirm_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CANCEL_NOTES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .cancel_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_RESOLUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_resolution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HABIT_CHARACTERIZATION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_habit_characterization,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PAT_PROBLEM_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_problem_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_pat_problem_hist_in        IN pat_problem_hist.id_pat_problem_hist%TYPE,
        id_pat_problem_in             IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_pat_problem_nin            IN BOOLEAN := TRUE,
        id_patient_in                 IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        id_diagnosis_in               IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_diagnosis_nin              IN BOOLEAN := TRUE,
        id_professional_ins_in        IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_professional_ins_nin       IN BOOLEAN := TRUE,
        id_epis_diagnosis_in          IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin         IN BOOLEAN := TRUE,
        desc_pat_problem_in           IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        desc_pat_problem_nin          IN BOOLEAN := TRUE,
        notes_in                      IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        flg_age_in                    IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        flg_age_nin                   IN BOOLEAN := TRUE,
        year_begin_in                 IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        year_begin_nin                IN BOOLEAN := TRUE,
        month_begin_in                IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        month_begin_nin               IN BOOLEAN := TRUE,
        day_begin_in                  IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        day_begin_nin                 IN BOOLEAN := TRUE,
        year_end_in                   IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        year_end_nin                  IN BOOLEAN := TRUE,
        month_end_in                  IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        month_end_nin                 IN BOOLEAN := TRUE,
        day_end_in                    IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        day_end_nin                   IN BOOLEAN := TRUE,
        pct_incapacity_in             IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        pct_incapacity_nin            IN BOOLEAN := TRUE,
        flg_surgery_in                IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        flg_surgery_nin               IN BOOLEAN := TRUE,
        notes_support_in              IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        notes_support_nin             IN BOOLEAN := TRUE,
        rank_in                       IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        rank_nin                      IN BOOLEAN := TRUE,
        flg_status_in                 IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        flg_aproved_in                IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        flg_aproved_nin               IN BOOLEAN := TRUE,
        id_institution_in             IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin            IN BOOLEAN := TRUE,
        id_pat_habit_in               IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_pat_habit_nin              IN BOOLEAN := TRUE,
        id_episode_in                 IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        id_epis_anamnesis_in          IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        id_epis_anamnesis_nin         IN BOOLEAN := TRUE,
        flg_nature_in                 IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        flg_nature_nin                IN BOOLEAN := TRUE,
        id_alert_diagnosis_in         IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        id_alert_diagnosis_nin        IN BOOLEAN := TRUE,
        dt_pat_problem_tstz_in        IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_nin       IN BOOLEAN := TRUE,
        dt_confirm_tstz_in            IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in           IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin          IN BOOLEAN := TRUE,
        cancel_notes_in               IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin              IN BOOLEAN := TRUE,
        create_user_in                IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        dt_resolution_in              IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        dt_resolution_nin             IN BOOLEAN := TRUE,
        id_habit_characterization_in  IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        id_habit_characterization_nin IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
        l_rows_out                    table_varchar;
        l_id_pat_problem_n            NUMBER(1);
        l_id_patient_n                NUMBER(1);
        l_id_diagnosis_n              NUMBER(1);
        l_id_professional_ins_n       NUMBER(1);
        l_id_epis_diagnosis_n         NUMBER(1);
        l_desc_pat_problem_n          NUMBER(1);
        l_notes_n                     NUMBER(1);
        l_flg_age_n                   NUMBER(1);
        l_year_begin_n                NUMBER(1);
        l_month_begin_n               NUMBER(1);
        l_day_begin_n                 NUMBER(1);
        l_year_end_n                  NUMBER(1);
        l_month_end_n                 NUMBER(1);
        l_day_end_n                   NUMBER(1);
        l_pct_incapacity_n            NUMBER(1);
        l_flg_surgery_n               NUMBER(1);
        l_notes_support_n             NUMBER(1);
        l_rank_n                      NUMBER(1);
        l_flg_status_n                NUMBER(1);
        l_flg_aproved_n               NUMBER(1);
        l_id_institution_n            NUMBER(1);
        l_id_pat_habit_n              NUMBER(1);
        l_id_episode_n                NUMBER(1);
        l_id_epis_anamnesis_n         NUMBER(1);
        l_flg_nature_n                NUMBER(1);
        l_id_alert_diagnosis_n        NUMBER(1);
        l_dt_pat_problem_tstz_n       NUMBER(1);
        l_dt_confirm_tstz_n           NUMBER(1);
        l_id_cancel_reason_n          NUMBER(1);
        l_cancel_notes_n              NUMBER(1);
        l_create_user_n               NUMBER(1);
        l_create_time_n               NUMBER(1);
        l_create_institution_n        NUMBER(1);
        l_update_user_n               NUMBER(1);
        l_update_time_n               NUMBER(1);
        l_update_institution_n        NUMBER(1);
        l_dt_resolution_n             NUMBER(1);
        l_id_habit_characterization_n NUMBER(1);
    BEGIN
    
        l_id_pat_problem_n            := sys.diutil.bool_to_int(id_pat_problem_nin);
        l_id_patient_n                := sys.diutil.bool_to_int(id_patient_nin);
        l_id_diagnosis_n              := sys.diutil.bool_to_int(id_diagnosis_nin);
        l_id_professional_ins_n       := sys.diutil.bool_to_int(id_professional_ins_nin);
        l_id_epis_diagnosis_n         := sys.diutil.bool_to_int(id_epis_diagnosis_nin);
        l_desc_pat_problem_n          := sys.diutil.bool_to_int(desc_pat_problem_nin);
        l_notes_n                     := sys.diutil.bool_to_int(notes_nin);
        l_flg_age_n                   := sys.diutil.bool_to_int(flg_age_nin);
        l_year_begin_n                := sys.diutil.bool_to_int(year_begin_nin);
        l_month_begin_n               := sys.diutil.bool_to_int(month_begin_nin);
        l_day_begin_n                 := sys.diutil.bool_to_int(day_begin_nin);
        l_year_end_n                  := sys.diutil.bool_to_int(year_end_nin);
        l_month_end_n                 := sys.diutil.bool_to_int(month_end_nin);
        l_day_end_n                   := sys.diutil.bool_to_int(day_end_nin);
        l_pct_incapacity_n            := sys.diutil.bool_to_int(pct_incapacity_nin);
        l_flg_surgery_n               := sys.diutil.bool_to_int(flg_surgery_nin);
        l_notes_support_n             := sys.diutil.bool_to_int(notes_support_nin);
        l_rank_n                      := sys.diutil.bool_to_int(rank_nin);
        l_flg_status_n                := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_aproved_n               := sys.diutil.bool_to_int(flg_aproved_nin);
        l_id_institution_n            := sys.diutil.bool_to_int(id_institution_nin);
        l_id_pat_habit_n              := sys.diutil.bool_to_int(id_pat_habit_nin);
        l_id_episode_n                := sys.diutil.bool_to_int(id_episode_nin);
        l_id_epis_anamnesis_n         := sys.diutil.bool_to_int(id_epis_anamnesis_nin);
        l_flg_nature_n                := sys.diutil.bool_to_int(flg_nature_nin);
        l_id_alert_diagnosis_n        := sys.diutil.bool_to_int(id_alert_diagnosis_nin);
        l_dt_pat_problem_tstz_n       := sys.diutil.bool_to_int(dt_pat_problem_tstz_nin);
        l_dt_confirm_tstz_n           := sys.diutil.bool_to_int(dt_confirm_tstz_nin);
        l_id_cancel_reason_n          := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_cancel_notes_n              := sys.diutil.bool_to_int(cancel_notes_nin);
        l_create_user_n               := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n               := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n        := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n               := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n               := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n        := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_resolution_n             := sys.diutil.bool_to_int(dt_resolution_nin);
        l_id_habit_characterization_n := sys.diutil.bool_to_int(id_habit_characterization_nin);
    
        UPDATE pat_problem_hist
           SET id_pat_problem            = decode(l_id_pat_problem_n,
                                                  0,
                                                  id_pat_problem_in,
                                                  nvl(id_pat_problem_in, id_pat_problem)),
               id_patient                = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_diagnosis              = decode(l_id_diagnosis_n,
                                                  0,
                                                  id_diagnosis_in,
                                                  nvl(id_diagnosis_in, id_diagnosis)),
               id_professional_ins       = decode(l_id_professional_ins_n,
                                                  0,
                                                  id_professional_ins_in,
                                                  nvl(id_professional_ins_in, id_professional_ins)),
               id_epis_diagnosis         = decode(l_id_epis_diagnosis_n,
                                                  0,
                                                  id_epis_diagnosis_in,
                                                  nvl(id_epis_diagnosis_in, id_epis_diagnosis)),
               desc_pat_problem          = decode(l_desc_pat_problem_n,
                                                  0,
                                                  desc_pat_problem_in,
                                                  nvl(desc_pat_problem_in, desc_pat_problem)),
               notes                     = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               flg_age                   = decode(l_flg_age_n, 0, flg_age_in, nvl(flg_age_in, flg_age)),
               year_begin                = decode(l_year_begin_n, 0, year_begin_in, nvl(year_begin_in, year_begin)),
               month_begin               = decode(l_month_begin_n, 0, month_begin_in, nvl(month_begin_in, month_begin)),
               day_begin                 = decode(l_day_begin_n, 0, day_begin_in, nvl(day_begin_in, day_begin)),
               year_end                  = decode(l_year_end_n, 0, year_end_in, nvl(year_end_in, year_end)),
               month_end                 = decode(l_month_end_n, 0, month_end_in, nvl(month_end_in, month_end)),
               day_end                   = decode(l_day_end_n, 0, day_end_in, nvl(day_end_in, day_end)),
               pct_incapacity            = decode(l_pct_incapacity_n,
                                                  0,
                                                  pct_incapacity_in,
                                                  nvl(pct_incapacity_in, pct_incapacity)),
               flg_surgery               = decode(l_flg_surgery_n, 0, flg_surgery_in, nvl(flg_surgery_in, flg_surgery)),
               notes_support             = decode(l_notes_support_n,
                                                  0,
                                                  notes_support_in,
                                                  nvl(notes_support_in, notes_support)),
               rank                      = decode(l_rank_n, 0, rank_in, nvl(rank_in, rank)),
               flg_status                = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               flg_aproved               = decode(l_flg_aproved_n, 0, flg_aproved_in, nvl(flg_aproved_in, flg_aproved)),
               id_institution            = decode(l_id_institution_n,
                                                  0,
                                                  id_institution_in,
                                                  nvl(id_institution_in, id_institution)),
               id_pat_habit              = decode(l_id_pat_habit_n,
                                                  0,
                                                  id_pat_habit_in,
                                                  nvl(id_pat_habit_in, id_pat_habit)),
               id_episode                = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_epis_anamnesis         = decode(l_id_epis_anamnesis_n,
                                                  0,
                                                  id_epis_anamnesis_in,
                                                  nvl(id_epis_anamnesis_in, id_epis_anamnesis)),
               flg_nature                = decode(l_flg_nature_n, 0, flg_nature_in, nvl(flg_nature_in, flg_nature)),
               id_alert_diagnosis        = decode(l_id_alert_diagnosis_n,
                                                  0,
                                                  id_alert_diagnosis_in,
                                                  nvl(id_alert_diagnosis_in, id_alert_diagnosis)),
               dt_pat_problem_tstz       = decode(l_dt_pat_problem_tstz_n,
                                                  0,
                                                  dt_pat_problem_tstz_in,
                                                  nvl(dt_pat_problem_tstz_in, dt_pat_problem_tstz)),
               dt_confirm_tstz           = decode(l_dt_confirm_tstz_n,
                                                  0,
                                                  dt_confirm_tstz_in,
                                                  nvl(dt_confirm_tstz_in, dt_confirm_tstz)),
               id_cancel_reason          = decode(l_id_cancel_reason_n,
                                                  0,
                                                  id_cancel_reason_in,
                                                  nvl(id_cancel_reason_in, id_cancel_reason)),
               cancel_notes              = decode(l_cancel_notes_n,
                                                  0,
                                                  cancel_notes_in,
                                                  nvl(cancel_notes_in, cancel_notes)),
               create_user               = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time               = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution        = decode(l_create_institution_n,
                                                  0,
                                                  create_institution_in,
                                                  nvl(create_institution_in, create_institution)),
               update_user               = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time               = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution        = decode(l_update_institution_n,
                                                  0,
                                                  update_institution_in,
                                                  nvl(update_institution_in, update_institution)),
               dt_resolution             = decode(l_dt_resolution_n,
                                                  0,
                                                  dt_resolution_in,
                                                  nvl(dt_resolution_in, dt_resolution)),
               id_habit_characterization = decode(l_id_habit_characterization_n,
                                                  0,
                                                  id_habit_characterization_in,
                                                  nvl(id_habit_characterization_in, id_habit_characterization))
         WHERE id_pat_problem_hist = id_pat_problem_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_PROBLEM_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    IF l_name = 'PPH_COMP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_ANAMNESIS',
                                                        value_in           => id_epis_anamnesis_in);
                    END IF;
                    IF l_name = 'PPH_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PPH_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PPH_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PPH_PPM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_PROBLEM',
                                                        value_in           => id_pat_problem_in);
                    END IF;
                    IF l_name = 'PPH_PTNOT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_HABIT',
                                                        value_in           => id_pat_habit_in);
                    END IF;
                    IF l_name = 'PPMH_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pat_problem_hist_in        IN pat_problem_hist.id_pat_problem_hist%TYPE,
        id_pat_problem_in             IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_pat_problem_nin            IN BOOLEAN := TRUE,
        id_patient_in                 IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        id_diagnosis_in               IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_diagnosis_nin              IN BOOLEAN := TRUE,
        id_professional_ins_in        IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_professional_ins_nin       IN BOOLEAN := TRUE,
        id_epis_diagnosis_in          IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin         IN BOOLEAN := TRUE,
        desc_pat_problem_in           IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        desc_pat_problem_nin          IN BOOLEAN := TRUE,
        notes_in                      IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        flg_age_in                    IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        flg_age_nin                   IN BOOLEAN := TRUE,
        year_begin_in                 IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        year_begin_nin                IN BOOLEAN := TRUE,
        month_begin_in                IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        month_begin_nin               IN BOOLEAN := TRUE,
        day_begin_in                  IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        day_begin_nin                 IN BOOLEAN := TRUE,
        year_end_in                   IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        year_end_nin                  IN BOOLEAN := TRUE,
        month_end_in                  IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        month_end_nin                 IN BOOLEAN := TRUE,
        day_end_in                    IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        day_end_nin                   IN BOOLEAN := TRUE,
        pct_incapacity_in             IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        pct_incapacity_nin            IN BOOLEAN := TRUE,
        flg_surgery_in                IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        flg_surgery_nin               IN BOOLEAN := TRUE,
        notes_support_in              IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        notes_support_nin             IN BOOLEAN := TRUE,
        rank_in                       IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        rank_nin                      IN BOOLEAN := TRUE,
        flg_status_in                 IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        flg_aproved_in                IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        flg_aproved_nin               IN BOOLEAN := TRUE,
        id_institution_in             IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin            IN BOOLEAN := TRUE,
        id_pat_habit_in               IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_pat_habit_nin              IN BOOLEAN := TRUE,
        id_episode_in                 IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        id_epis_anamnesis_in          IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        id_epis_anamnesis_nin         IN BOOLEAN := TRUE,
        flg_nature_in                 IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        flg_nature_nin                IN BOOLEAN := TRUE,
        id_alert_diagnosis_in         IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        id_alert_diagnosis_nin        IN BOOLEAN := TRUE,
        dt_pat_problem_tstz_in        IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_nin       IN BOOLEAN := TRUE,
        dt_confirm_tstz_in            IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in           IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin          IN BOOLEAN := TRUE,
        cancel_notes_in               IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin              IN BOOLEAN := TRUE,
        create_user_in                IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        dt_resolution_in              IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        dt_resolution_nin             IN BOOLEAN := TRUE,
        id_habit_characterization_in  IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        id_habit_characterization_nin IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_problem_hist_in        => id_pat_problem_hist_in,
            id_pat_problem_in             => id_pat_problem_in,
            id_pat_problem_nin            => id_pat_problem_nin,
            id_patient_in                 => id_patient_in,
            id_patient_nin                => id_patient_nin,
            id_diagnosis_in               => id_diagnosis_in,
            id_diagnosis_nin              => id_diagnosis_nin,
            id_professional_ins_in        => id_professional_ins_in,
            id_professional_ins_nin       => id_professional_ins_nin,
            id_epis_diagnosis_in          => id_epis_diagnosis_in,
            id_epis_diagnosis_nin         => id_epis_diagnosis_nin,
            desc_pat_problem_in           => desc_pat_problem_in,
            desc_pat_problem_nin          => desc_pat_problem_nin,
            notes_in                      => notes_in,
            notes_nin                     => notes_nin,
            flg_age_in                    => flg_age_in,
            flg_age_nin                   => flg_age_nin,
            year_begin_in                 => year_begin_in,
            year_begin_nin                => year_begin_nin,
            month_begin_in                => month_begin_in,
            month_begin_nin               => month_begin_nin,
            day_begin_in                  => day_begin_in,
            day_begin_nin                 => day_begin_nin,
            year_end_in                   => year_end_in,
            year_end_nin                  => year_end_nin,
            month_end_in                  => month_end_in,
            month_end_nin                 => month_end_nin,
            day_end_in                    => day_end_in,
            day_end_nin                   => day_end_nin,
            pct_incapacity_in             => pct_incapacity_in,
            pct_incapacity_nin            => pct_incapacity_nin,
            flg_surgery_in                => flg_surgery_in,
            flg_surgery_nin               => flg_surgery_nin,
            notes_support_in              => notes_support_in,
            notes_support_nin             => notes_support_nin,
            rank_in                       => rank_in,
            rank_nin                      => rank_nin,
            flg_status_in                 => flg_status_in,
            flg_status_nin                => flg_status_nin,
            flg_aproved_in                => flg_aproved_in,
            flg_aproved_nin               => flg_aproved_nin,
            id_institution_in             => id_institution_in,
            id_institution_nin            => id_institution_nin,
            id_pat_habit_in               => id_pat_habit_in,
            id_pat_habit_nin              => id_pat_habit_nin,
            id_episode_in                 => id_episode_in,
            id_episode_nin                => id_episode_nin,
            id_epis_anamnesis_in          => id_epis_anamnesis_in,
            id_epis_anamnesis_nin         => id_epis_anamnesis_nin,
            flg_nature_in                 => flg_nature_in,
            flg_nature_nin                => flg_nature_nin,
            id_alert_diagnosis_in         => id_alert_diagnosis_in,
            id_alert_diagnosis_nin        => id_alert_diagnosis_nin,
            dt_pat_problem_tstz_in        => dt_pat_problem_tstz_in,
            dt_pat_problem_tstz_nin       => dt_pat_problem_tstz_nin,
            dt_confirm_tstz_in            => dt_confirm_tstz_in,
            dt_confirm_tstz_nin           => dt_confirm_tstz_nin,
            id_cancel_reason_in           => id_cancel_reason_in,
            id_cancel_reason_nin          => id_cancel_reason_nin,
            cancel_notes_in               => cancel_notes_in,
            cancel_notes_nin              => cancel_notes_nin,
            create_user_in                => create_user_in,
            create_user_nin               => create_user_nin,
            create_time_in                => create_time_in,
            create_time_nin               => create_time_nin,
            create_institution_in         => create_institution_in,
            create_institution_nin        => create_institution_nin,
            update_user_in                => update_user_in,
            update_user_nin               => update_user_nin,
            update_time_in                => update_time_in,
            update_time_nin               => update_time_nin,
            update_institution_in         => update_institution_in,
            update_institution_nin        => update_institution_nin,
            dt_resolution_in              => dt_resolution_in,
            dt_resolution_nin             => dt_resolution_nin,
            id_habit_characterization_in  => id_habit_characterization_in,
            id_habit_characterization_nin => id_habit_characterization_nin,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_pat_problem_in             IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_pat_problem_nin            IN BOOLEAN := TRUE,
        id_patient_in                 IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        id_diagnosis_in               IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_diagnosis_nin              IN BOOLEAN := TRUE,
        id_professional_ins_in        IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_professional_ins_nin       IN BOOLEAN := TRUE,
        id_epis_diagnosis_in          IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin         IN BOOLEAN := TRUE,
        desc_pat_problem_in           IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        desc_pat_problem_nin          IN BOOLEAN := TRUE,
        notes_in                      IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        flg_age_in                    IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        flg_age_nin                   IN BOOLEAN := TRUE,
        year_begin_in                 IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        year_begin_nin                IN BOOLEAN := TRUE,
        month_begin_in                IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        month_begin_nin               IN BOOLEAN := TRUE,
        day_begin_in                  IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        day_begin_nin                 IN BOOLEAN := TRUE,
        year_end_in                   IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        year_end_nin                  IN BOOLEAN := TRUE,
        month_end_in                  IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        month_end_nin                 IN BOOLEAN := TRUE,
        day_end_in                    IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        day_end_nin                   IN BOOLEAN := TRUE,
        pct_incapacity_in             IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        pct_incapacity_nin            IN BOOLEAN := TRUE,
        flg_surgery_in                IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        flg_surgery_nin               IN BOOLEAN := TRUE,
        notes_support_in              IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        notes_support_nin             IN BOOLEAN := TRUE,
        rank_in                       IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        rank_nin                      IN BOOLEAN := TRUE,
        flg_status_in                 IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        flg_aproved_in                IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        flg_aproved_nin               IN BOOLEAN := TRUE,
        id_institution_in             IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin            IN BOOLEAN := TRUE,
        id_pat_habit_in               IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_pat_habit_nin              IN BOOLEAN := TRUE,
        id_episode_in                 IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        id_epis_anamnesis_in          IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        id_epis_anamnesis_nin         IN BOOLEAN := TRUE,
        flg_nature_in                 IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        flg_nature_nin                IN BOOLEAN := TRUE,
        id_alert_diagnosis_in         IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        id_alert_diagnosis_nin        IN BOOLEAN := TRUE,
        dt_pat_problem_tstz_in        IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_nin       IN BOOLEAN := TRUE,
        dt_confirm_tstz_in            IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in           IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin          IN BOOLEAN := TRUE,
        cancel_notes_in               IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin              IN BOOLEAN := TRUE,
        create_user_in                IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        dt_resolution_in              IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        dt_resolution_nin             IN BOOLEAN := TRUE,
        id_habit_characterization_in  IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        id_habit_characterization_nin IN BOOLEAN := TRUE,
        where_in                      VARCHAR2,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
        l_sql                         VARCHAR2(32767);
        l_rows_out                    table_varchar;
        l_id_pat_problem_n            NUMBER(1);
        l_id_patient_n                NUMBER(1);
        l_id_diagnosis_n              NUMBER(1);
        l_id_professional_ins_n       NUMBER(1);
        l_id_epis_diagnosis_n         NUMBER(1);
        l_desc_pat_problem_n          NUMBER(1);
        l_notes_n                     NUMBER(1);
        l_flg_age_n                   NUMBER(1);
        l_year_begin_n                NUMBER(1);
        l_month_begin_n               NUMBER(1);
        l_day_begin_n                 NUMBER(1);
        l_year_end_n                  NUMBER(1);
        l_month_end_n                 NUMBER(1);
        l_day_end_n                   NUMBER(1);
        l_pct_incapacity_n            NUMBER(1);
        l_flg_surgery_n               NUMBER(1);
        l_notes_support_n             NUMBER(1);
        l_rank_n                      NUMBER(1);
        l_flg_status_n                NUMBER(1);
        l_flg_aproved_n               NUMBER(1);
        l_id_institution_n            NUMBER(1);
        l_id_pat_habit_n              NUMBER(1);
        l_id_episode_n                NUMBER(1);
        l_id_epis_anamnesis_n         NUMBER(1);
        l_flg_nature_n                NUMBER(1);
        l_id_alert_diagnosis_n        NUMBER(1);
        l_dt_pat_problem_tstz_n       NUMBER(1);
        l_dt_confirm_tstz_n           NUMBER(1);
        l_id_cancel_reason_n          NUMBER(1);
        l_cancel_notes_n              NUMBER(1);
        l_create_user_n               NUMBER(1);
        l_create_time_n               NUMBER(1);
        l_create_institution_n        NUMBER(1);
        l_update_user_n               NUMBER(1);
        l_update_time_n               NUMBER(1);
        l_update_institution_n        NUMBER(1);
        l_dt_resolution_n             NUMBER(1);
        l_id_habit_characterization_n NUMBER(1);
        id_pat_problem_hist_in        pat_problem_hist.id_pat_problem_hist%TYPE;
    BEGIN
    
        l_id_pat_problem_n            := sys.diutil.bool_to_int(id_pat_problem_nin);
        l_id_patient_n                := sys.diutil.bool_to_int(id_patient_nin);
        l_id_diagnosis_n              := sys.diutil.bool_to_int(id_diagnosis_nin);
        l_id_professional_ins_n       := sys.diutil.bool_to_int(id_professional_ins_nin);
        l_id_epis_diagnosis_n         := sys.diutil.bool_to_int(id_epis_diagnosis_nin);
        l_desc_pat_problem_n          := sys.diutil.bool_to_int(desc_pat_problem_nin);
        l_notes_n                     := sys.diutil.bool_to_int(notes_nin);
        l_flg_age_n                   := sys.diutil.bool_to_int(flg_age_nin);
        l_year_begin_n                := sys.diutil.bool_to_int(year_begin_nin);
        l_month_begin_n               := sys.diutil.bool_to_int(month_begin_nin);
        l_day_begin_n                 := sys.diutil.bool_to_int(day_begin_nin);
        l_year_end_n                  := sys.diutil.bool_to_int(year_end_nin);
        l_month_end_n                 := sys.diutil.bool_to_int(month_end_nin);
        l_day_end_n                   := sys.diutil.bool_to_int(day_end_nin);
        l_pct_incapacity_n            := sys.diutil.bool_to_int(pct_incapacity_nin);
        l_flg_surgery_n               := sys.diutil.bool_to_int(flg_surgery_nin);
        l_notes_support_n             := sys.diutil.bool_to_int(notes_support_nin);
        l_rank_n                      := sys.diutil.bool_to_int(rank_nin);
        l_flg_status_n                := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_aproved_n               := sys.diutil.bool_to_int(flg_aproved_nin);
        l_id_institution_n            := sys.diutil.bool_to_int(id_institution_nin);
        l_id_pat_habit_n              := sys.diutil.bool_to_int(id_pat_habit_nin);
        l_id_episode_n                := sys.diutil.bool_to_int(id_episode_nin);
        l_id_epis_anamnesis_n         := sys.diutil.bool_to_int(id_epis_anamnesis_nin);
        l_flg_nature_n                := sys.diutil.bool_to_int(flg_nature_nin);
        l_id_alert_diagnosis_n        := sys.diutil.bool_to_int(id_alert_diagnosis_nin);
        l_dt_pat_problem_tstz_n       := sys.diutil.bool_to_int(dt_pat_problem_tstz_nin);
        l_dt_confirm_tstz_n           := sys.diutil.bool_to_int(dt_confirm_tstz_nin);
        l_id_cancel_reason_n          := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_cancel_notes_n              := sys.diutil.bool_to_int(cancel_notes_nin);
        l_create_user_n               := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n               := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n        := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n               := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n               := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n        := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_resolution_n             := sys.diutil.bool_to_int(dt_resolution_nin);
        l_id_habit_characterization_n := sys.diutil.bool_to_int(id_habit_characterization_nin);
    
        l_sql := 'UPDATE PAT_PROBLEM_HIST SET ' || ' ID_PAT_PROBLEM = decode (' || l_id_pat_problem_n ||
                 ',0,:id_pat_problem_in, NVL (:id_pat_problem_in, ID_PAT_PROBLEM)) ' || ',' || ' ID_PATIENT = decode (' ||
                 l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_DIAGNOSIS = decode (' || l_id_diagnosis_n ||
                 ',0,:id_diagnosis_in, NVL (:id_diagnosis_in, ID_DIAGNOSIS)) ' || ',' ||
                 ' ID_PROFESSIONAL_INS = decode (' || l_id_professional_ins_n ||
                 ',0,:id_professional_ins_in, NVL (:id_professional_ins_in, ID_PROFESSIONAL_INS)) ' || ',' ||
                 ' ID_EPIS_DIAGNOSIS = decode (' || l_id_epis_diagnosis_n ||
                 ',0,:id_epis_diagnosis_in, NVL (:id_epis_diagnosis_in, ID_EPIS_DIAGNOSIS)) ' || ',' ||
                 ' DESC_PAT_PROBLEM = decode (' || l_desc_pat_problem_n ||
                 ',0,:desc_pat_problem_in, NVL (:desc_pat_problem_in, DESC_PAT_PROBLEM)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' FLG_AGE = decode (' || l_flg_age_n || ',0,:flg_age_in, NVL (:flg_age_in, FLG_AGE)) ' || ',' ||
                 ' YEAR_BEGIN = decode (' || l_year_begin_n || ',0,:year_begin_in, NVL (:year_begin_in, YEAR_BEGIN)) ' || ',' ||
                 ' MONTH_BEGIN = decode (' || l_month_begin_n ||
                 ',0,:month_begin_in, NVL (:month_begin_in, MONTH_BEGIN)) ' || ',' || ' DAY_BEGIN = decode (' ||
                 l_day_begin_n || ',0,:day_begin_in, NVL (:day_begin_in, DAY_BEGIN)) ' || ',' || ' YEAR_END = decode (' ||
                 l_year_end_n || ',0,:year_end_in, NVL (:year_end_in, YEAR_END)) ' || ',' || ' MONTH_END = decode (' ||
                 l_month_end_n || ',0,:month_end_in, NVL (:month_end_in, MONTH_END)) ' || ',' || ' DAY_END = decode (' ||
                 l_day_end_n || ',0,:day_end_in, NVL (:day_end_in, DAY_END)) ' || ',' || ' PCT_INCAPACITY = decode (' ||
                 l_pct_incapacity_n || ',0,:pct_incapacity_in, NVL (:pct_incapacity_in, PCT_INCAPACITY)) ' || ',' ||
                 ' FLG_SURGERY = decode (' || l_flg_surgery_n ||
                 ',0,:flg_surgery_in, NVL (:flg_surgery_in, FLG_SURGERY)) ' || ',' || ' NOTES_SUPPORT = decode (' ||
                 l_notes_support_n || ',0,:notes_support_in, NVL (:notes_support_in, NOTES_SUPPORT)) ' || ',' ||
                 ' RANK = decode (' || l_rank_n || ',0,:rank_in, NVL (:rank_in, RANK)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' FLG_APROVED = decode (' || l_flg_aproved_n ||
                 ',0,:flg_aproved_in, NVL (:flg_aproved_in, FLG_APROVED)) ' || ',' || ' ID_INSTITUTION = decode (' ||
                 l_id_institution_n || ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' ID_PAT_HABIT = decode (' || l_id_pat_habit_n ||
                 ',0,:id_pat_habit_in, NVL (:id_pat_habit_in, ID_PAT_HABIT)) ' || ',' || ' ID_EPISODE = decode (' ||
                 l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_EPIS_ANAMNESIS = decode (' || l_id_epis_anamnesis_n ||
                 ',0,:id_epis_anamnesis_in, NVL (:id_epis_anamnesis_in, ID_EPIS_ANAMNESIS)) ' || ',' ||
                 ' FLG_NATURE = decode (' || l_flg_nature_n || ',0,:flg_nature_in, NVL (:flg_nature_in, FLG_NATURE)) ' || ',' ||
                 ' ID_ALERT_DIAGNOSIS = decode (' || l_id_alert_diagnosis_n ||
                 ',0,:id_alert_diagnosis_in, NVL (:id_alert_diagnosis_in, ID_ALERT_DIAGNOSIS)) ' || ',' ||
                 ' DT_PAT_PROBLEM_TSTZ = decode (' || l_dt_pat_problem_tstz_n ||
                 ',0,:dt_pat_problem_tstz_in, NVL (:dt_pat_problem_tstz_in, DT_PAT_PROBLEM_TSTZ)) ' || ',' ||
                 ' DT_CONFIRM_TSTZ = decode (' || l_dt_confirm_tstz_n ||
                 ',0,:dt_confirm_tstz_in, NVL (:dt_confirm_tstz_in, DT_CONFIRM_TSTZ)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' CANCEL_NOTES = decode (' || l_cancel_notes_n ||
                 ',0,:cancel_notes_in, NVL (:cancel_notes_in, CANCEL_NOTES)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' DT_RESOLUTION = decode (' || l_dt_resolution_n ||
                 ',0,:dt_resolution_in, NVL (:dt_resolution_in, DT_RESOLUTION)) ' || ',' ||
                 ' ID_HABIT_CHARACTERIZATION = decode (' || l_id_habit_characterization_n ||
                 ',0,:id_habit_characterization_in, NVL (:id_habit_characterization_in, ID_HABIT_CHARACTERIZATION)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_pat_problem_in, id_patient_in, id_diagnosis_in, id_professional_ins_in, id_epis_diagnosis_in, desc_pat_problem_in, notes_in, flg_age_in, year_begin_in, month_begin_in, day_begin_in, year_end_in, month_end_in, day_end_in, pct_incapacity_in, flg_surgery_in, notes_support_in, rank_in, flg_status_in, flg_aproved_in, id_institution_in, id_pat_habit_in, id_episode_in, id_epis_anamnesis_in, flg_nature_in, id_alert_diagnosis_in, dt_pat_problem_tstz_in, dt_confirm_tstz_in, id_cancel_reason_in, cancel_notes_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, dt_resolution_in, id_habit_characterization_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_PROBLEM_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    IF l_name = 'PPH_COMP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_ANAMNESIS',
                                                        value_in           => id_epis_anamnesis_in);
                    END IF;
                    IF l_name = 'PPH_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PPH_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PPH_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PPH_PPM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_PROBLEM',
                                                        value_in           => id_pat_problem_in);
                    END IF;
                    IF l_name = 'PPH_PTNOT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_HABIT',
                                                        value_in           => id_pat_habit_in);
                    END IF;
                    IF l_name = 'PPMH_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pat_problem_in             IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_pat_problem_nin            IN BOOLEAN := TRUE,
        id_patient_in                 IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                IN BOOLEAN := TRUE,
        id_diagnosis_in               IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_diagnosis_nin              IN BOOLEAN := TRUE,
        id_professional_ins_in        IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_professional_ins_nin       IN BOOLEAN := TRUE,
        id_epis_diagnosis_in          IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        id_epis_diagnosis_nin         IN BOOLEAN := TRUE,
        desc_pat_problem_in           IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        desc_pat_problem_nin          IN BOOLEAN := TRUE,
        notes_in                      IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        flg_age_in                    IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        flg_age_nin                   IN BOOLEAN := TRUE,
        year_begin_in                 IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        year_begin_nin                IN BOOLEAN := TRUE,
        month_begin_in                IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        month_begin_nin               IN BOOLEAN := TRUE,
        day_begin_in                  IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        day_begin_nin                 IN BOOLEAN := TRUE,
        year_end_in                   IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        year_end_nin                  IN BOOLEAN := TRUE,
        month_end_in                  IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        month_end_nin                 IN BOOLEAN := TRUE,
        day_end_in                    IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        day_end_nin                   IN BOOLEAN := TRUE,
        pct_incapacity_in             IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        pct_incapacity_nin            IN BOOLEAN := TRUE,
        flg_surgery_in                IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        flg_surgery_nin               IN BOOLEAN := TRUE,
        notes_support_in              IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        notes_support_nin             IN BOOLEAN := TRUE,
        rank_in                       IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        rank_nin                      IN BOOLEAN := TRUE,
        flg_status_in                 IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        flg_aproved_in                IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        flg_aproved_nin               IN BOOLEAN := TRUE,
        id_institution_in             IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_institution_nin            IN BOOLEAN := TRUE,
        id_pat_habit_in               IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_pat_habit_nin              IN BOOLEAN := TRUE,
        id_episode_in                 IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                IN BOOLEAN := TRUE,
        id_epis_anamnesis_in          IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        id_epis_anamnesis_nin         IN BOOLEAN := TRUE,
        flg_nature_in                 IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        flg_nature_nin                IN BOOLEAN := TRUE,
        id_alert_diagnosis_in         IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        id_alert_diagnosis_nin        IN BOOLEAN := TRUE,
        dt_pat_problem_tstz_in        IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_nin       IN BOOLEAN := TRUE,
        dt_confirm_tstz_in            IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in           IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin          IN BOOLEAN := TRUE,
        cancel_notes_in               IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin              IN BOOLEAN := TRUE,
        create_user_in                IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        dt_resolution_in              IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        dt_resolution_nin             IN BOOLEAN := TRUE,
        id_habit_characterization_in  IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        id_habit_characterization_nin IN BOOLEAN := TRUE,
        where_in                      VARCHAR2,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_problem_in             => id_pat_problem_in,
            id_pat_problem_nin            => id_pat_problem_nin,
            id_patient_in                 => id_patient_in,
            id_patient_nin                => id_patient_nin,
            id_diagnosis_in               => id_diagnosis_in,
            id_diagnosis_nin              => id_diagnosis_nin,
            id_professional_ins_in        => id_professional_ins_in,
            id_professional_ins_nin       => id_professional_ins_nin,
            id_epis_diagnosis_in          => id_epis_diagnosis_in,
            id_epis_diagnosis_nin         => id_epis_diagnosis_nin,
            desc_pat_problem_in           => desc_pat_problem_in,
            desc_pat_problem_nin          => desc_pat_problem_nin,
            notes_in                      => notes_in,
            notes_nin                     => notes_nin,
            flg_age_in                    => flg_age_in,
            flg_age_nin                   => flg_age_nin,
            year_begin_in                 => year_begin_in,
            year_begin_nin                => year_begin_nin,
            month_begin_in                => month_begin_in,
            month_begin_nin               => month_begin_nin,
            day_begin_in                  => day_begin_in,
            day_begin_nin                 => day_begin_nin,
            year_end_in                   => year_end_in,
            year_end_nin                  => year_end_nin,
            month_end_in                  => month_end_in,
            month_end_nin                 => month_end_nin,
            day_end_in                    => day_end_in,
            day_end_nin                   => day_end_nin,
            pct_incapacity_in             => pct_incapacity_in,
            pct_incapacity_nin            => pct_incapacity_nin,
            flg_surgery_in                => flg_surgery_in,
            flg_surgery_nin               => flg_surgery_nin,
            notes_support_in              => notes_support_in,
            notes_support_nin             => notes_support_nin,
            rank_in                       => rank_in,
            rank_nin                      => rank_nin,
            flg_status_in                 => flg_status_in,
            flg_status_nin                => flg_status_nin,
            flg_aproved_in                => flg_aproved_in,
            flg_aproved_nin               => flg_aproved_nin,
            id_institution_in             => id_institution_in,
            id_institution_nin            => id_institution_nin,
            id_pat_habit_in               => id_pat_habit_in,
            id_pat_habit_nin              => id_pat_habit_nin,
            id_episode_in                 => id_episode_in,
            id_episode_nin                => id_episode_nin,
            id_epis_anamnesis_in          => id_epis_anamnesis_in,
            id_epis_anamnesis_nin         => id_epis_anamnesis_nin,
            flg_nature_in                 => flg_nature_in,
            flg_nature_nin                => flg_nature_nin,
            id_alert_diagnosis_in         => id_alert_diagnosis_in,
            id_alert_diagnosis_nin        => id_alert_diagnosis_nin,
            dt_pat_problem_tstz_in        => dt_pat_problem_tstz_in,
            dt_pat_problem_tstz_nin       => dt_pat_problem_tstz_nin,
            dt_confirm_tstz_in            => dt_confirm_tstz_in,
            dt_confirm_tstz_nin           => dt_confirm_tstz_nin,
            id_cancel_reason_in           => id_cancel_reason_in,
            id_cancel_reason_nin          => id_cancel_reason_nin,
            cancel_notes_in               => cancel_notes_in,
            cancel_notes_nin              => cancel_notes_nin,
            create_user_in                => create_user_in,
            create_user_nin               => create_user_nin,
            create_time_in                => create_time_in,
            create_time_nin               => create_time_nin,
            create_institution_in         => create_institution_in,
            create_institution_nin        => create_institution_nin,
            update_user_in                => update_user_in,
            update_user_nin               => update_user_nin,
            update_time_in                => update_time_in,
            update_time_nin               => update_time_nin,
            update_institution_in         => update_institution_in,
            update_institution_nin        => update_institution_nin,
            dt_resolution_in              => dt_resolution_in,
            dt_resolution_nin             => dt_resolution_nin,
            id_habit_characterization_in  => id_habit_characterization_in,
            id_habit_characterization_nin => id_habit_characterization_nin,
            where_in                      => where_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_problem_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_problem_hist_in       => rec_in.id_pat_problem_hist,
            id_pat_problem_in            => rec_in.id_pat_problem,
            id_patient_in                => rec_in.id_patient,
            id_diagnosis_in              => rec_in.id_diagnosis,
            id_professional_ins_in       => rec_in.id_professional_ins,
            id_epis_diagnosis_in         => rec_in.id_epis_diagnosis,
            desc_pat_problem_in          => rec_in.desc_pat_problem,
            notes_in                     => rec_in.notes,
            flg_age_in                   => rec_in.flg_age,
            year_begin_in                => rec_in.year_begin,
            month_begin_in               => rec_in.month_begin,
            day_begin_in                 => rec_in.day_begin,
            year_end_in                  => rec_in.year_end,
            month_end_in                 => rec_in.month_end,
            day_end_in                   => rec_in.day_end,
            pct_incapacity_in            => rec_in.pct_incapacity,
            flg_surgery_in               => rec_in.flg_surgery,
            notes_support_in             => rec_in.notes_support,
            rank_in                      => rec_in.rank,
            flg_status_in                => rec_in.flg_status,
            flg_aproved_in               => rec_in.flg_aproved,
            id_institution_in            => rec_in.id_institution,
            id_pat_habit_in              => rec_in.id_pat_habit,
            id_episode_in                => rec_in.id_episode,
            id_epis_anamnesis_in         => rec_in.id_epis_anamnesis,
            flg_nature_in                => rec_in.flg_nature,
            id_alert_diagnosis_in        => rec_in.id_alert_diagnosis,
            dt_pat_problem_tstz_in       => rec_in.dt_pat_problem_tstz,
            dt_confirm_tstz_in           => rec_in.dt_confirm_tstz,
            id_cancel_reason_in          => rec_in.id_cancel_reason,
            cancel_notes_in              => rec_in.cancel_notes,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution,
            dt_resolution_in             => rec_in.dt_resolution,
            id_habit_characterization_in => rec_in.id_habit_characterization
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_problem_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_problem_hist_in       => rec_in.id_pat_problem_hist,
            id_pat_problem_in            => rec_in.id_pat_problem,
            id_patient_in                => rec_in.id_patient,
            id_diagnosis_in              => rec_in.id_diagnosis,
            id_professional_ins_in       => rec_in.id_professional_ins,
            id_epis_diagnosis_in         => rec_in.id_epis_diagnosis,
            desc_pat_problem_in          => rec_in.desc_pat_problem,
            notes_in                     => rec_in.notes,
            flg_age_in                   => rec_in.flg_age,
            year_begin_in                => rec_in.year_begin,
            month_begin_in               => rec_in.month_begin,
            day_begin_in                 => rec_in.day_begin,
            year_end_in                  => rec_in.year_end,
            month_end_in                 => rec_in.month_end,
            day_end_in                   => rec_in.day_end,
            pct_incapacity_in            => rec_in.pct_incapacity,
            flg_surgery_in               => rec_in.flg_surgery,
            notes_support_in             => rec_in.notes_support,
            rank_in                      => rec_in.rank,
            flg_status_in                => rec_in.flg_status,
            flg_aproved_in               => rec_in.flg_aproved,
            id_institution_in            => rec_in.id_institution,
            id_pat_habit_in              => rec_in.id_pat_habit,
            id_episode_in                => rec_in.id_episode,
            id_epis_anamnesis_in         => rec_in.id_epis_anamnesis,
            flg_nature_in                => rec_in.flg_nature,
            id_alert_diagnosis_in        => rec_in.id_alert_diagnosis,
            dt_pat_problem_tstz_in       => rec_in.dt_pat_problem_tstz,
            dt_confirm_tstz_in           => rec_in.dt_confirm_tstz,
            id_cancel_reason_in          => rec_in.id_cancel_reason,
            cancel_notes_in              => rec_in.cancel_notes,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution,
            dt_resolution_in             => rec_in.dt_resolution,
            id_habit_characterization_in => rec_in.id_habit_characterization
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_pat_problem_hist_in       IN pat_problem_hist.id_pat_problem_hist%TYPE,
        id_pat_problem_in            IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_patient_in                IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_diagnosis_in              IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_professional_ins_in       IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_epis_diagnosis_in         IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        desc_pat_problem_in          IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        notes_in                     IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        flg_age_in                   IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        year_begin_in                IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        month_begin_in               IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        day_begin_in                 IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        year_end_in                  IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        month_end_in                 IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        day_end_in                   IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        pct_incapacity_in            IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        flg_surgery_in               IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        notes_support_in             IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        rank_in                      IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        flg_status_in                IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_aproved_in               IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        id_institution_in            IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_pat_habit_in              IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_episode_in                IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_epis_anamnesis_in         IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        flg_nature_in                IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        id_alert_diagnosis_in        IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_in       IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_in           IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in              IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in               IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        dt_resolution_in             IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        id_habit_characterization_in IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_problem_hist_in       => id_pat_problem_hist_in,
            id_pat_problem_in            => id_pat_problem_in,
            id_patient_in                => id_patient_in,
            id_diagnosis_in              => id_diagnosis_in,
            id_professional_ins_in       => id_professional_ins_in,
            id_epis_diagnosis_in         => id_epis_diagnosis_in,
            desc_pat_problem_in          => desc_pat_problem_in,
            notes_in                     => notes_in,
            flg_age_in                   => flg_age_in,
            year_begin_in                => year_begin_in,
            month_begin_in               => month_begin_in,
            day_begin_in                 => day_begin_in,
            year_end_in                  => year_end_in,
            month_end_in                 => month_end_in,
            day_end_in                   => day_end_in,
            pct_incapacity_in            => pct_incapacity_in,
            flg_surgery_in               => flg_surgery_in,
            notes_support_in             => notes_support_in,
            rank_in                      => rank_in,
            flg_status_in                => flg_status_in,
            flg_aproved_in               => flg_aproved_in,
            id_institution_in            => id_institution_in,
            id_pat_habit_in              => id_pat_habit_in,
            id_episode_in                => id_episode_in,
            id_epis_anamnesis_in         => id_epis_anamnesis_in,
            flg_nature_in                => flg_nature_in,
            id_alert_diagnosis_in        => id_alert_diagnosis_in,
            dt_pat_problem_tstz_in       => dt_pat_problem_tstz_in,
            dt_confirm_tstz_in           => dt_confirm_tstz_in,
            id_cancel_reason_in          => id_cancel_reason_in,
            cancel_notes_in              => cancel_notes_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            dt_resolution_in             => dt_resolution_in,
            id_habit_characterization_in => id_habit_characterization_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_pat_problem_hist_in       => id_pat_problem_hist_in,
                id_pat_problem_in            => id_pat_problem_in,
                id_patient_in                => id_patient_in,
                id_diagnosis_in              => id_diagnosis_in,
                id_professional_ins_in       => id_professional_ins_in,
                id_epis_diagnosis_in         => id_epis_diagnosis_in,
                desc_pat_problem_in          => desc_pat_problem_in,
                notes_in                     => notes_in,
                flg_age_in                   => flg_age_in,
                year_begin_in                => year_begin_in,
                month_begin_in               => month_begin_in,
                day_begin_in                 => day_begin_in,
                year_end_in                  => year_end_in,
                month_end_in                 => month_end_in,
                day_end_in                   => day_end_in,
                pct_incapacity_in            => pct_incapacity_in,
                flg_surgery_in               => flg_surgery_in,
                notes_support_in             => notes_support_in,
                rank_in                      => rank_in,
                flg_status_in                => flg_status_in,
                flg_aproved_in               => flg_aproved_in,
                id_institution_in            => id_institution_in,
                id_pat_habit_in              => id_pat_habit_in,
                id_episode_in                => id_episode_in,
                id_epis_anamnesis_in         => id_epis_anamnesis_in,
                flg_nature_in                => flg_nature_in,
                id_alert_diagnosis_in        => id_alert_diagnosis_in,
                dt_pat_problem_tstz_in       => dt_pat_problem_tstz_in,
                dt_confirm_tstz_in           => dt_confirm_tstz_in,
                id_cancel_reason_in          => id_cancel_reason_in,
                cancel_notes_in              => cancel_notes_in,
                create_user_in               => create_user_in,
                create_time_in               => create_time_in,
                create_institution_in        => create_institution_in,
                update_user_in               => update_user_in,
                update_time_in               => update_time_in,
                update_institution_in        => update_institution_in,
                dt_resolution_in             => dt_resolution_in,
                id_habit_characterization_in => id_habit_characterization_in,
                handle_error_in              => handle_error_in,
                rows_out                     => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_pat_problem_hist_in       IN pat_problem_hist.id_pat_problem_hist%TYPE,
        id_pat_problem_in            IN pat_problem_hist.id_pat_problem%TYPE DEFAULT NULL,
        id_patient_in                IN pat_problem_hist.id_patient%TYPE DEFAULT NULL,
        id_diagnosis_in              IN pat_problem_hist.id_diagnosis%TYPE DEFAULT NULL,
        id_professional_ins_in       IN pat_problem_hist.id_professional_ins%TYPE DEFAULT NULL,
        id_epis_diagnosis_in         IN pat_problem_hist.id_epis_diagnosis%TYPE DEFAULT NULL,
        desc_pat_problem_in          IN pat_problem_hist.desc_pat_problem%TYPE DEFAULT NULL,
        notes_in                     IN pat_problem_hist.notes%TYPE DEFAULT NULL,
        flg_age_in                   IN pat_problem_hist.flg_age%TYPE DEFAULT NULL,
        year_begin_in                IN pat_problem_hist.year_begin%TYPE DEFAULT NULL,
        month_begin_in               IN pat_problem_hist.month_begin%TYPE DEFAULT NULL,
        day_begin_in                 IN pat_problem_hist.day_begin%TYPE DEFAULT NULL,
        year_end_in                  IN pat_problem_hist.year_end%TYPE DEFAULT NULL,
        month_end_in                 IN pat_problem_hist.month_end%TYPE DEFAULT NULL,
        day_end_in                   IN pat_problem_hist.day_end%TYPE DEFAULT NULL,
        pct_incapacity_in            IN pat_problem_hist.pct_incapacity%TYPE DEFAULT NULL,
        flg_surgery_in               IN pat_problem_hist.flg_surgery%TYPE DEFAULT NULL,
        notes_support_in             IN pat_problem_hist.notes_support%TYPE DEFAULT NULL,
        rank_in                      IN pat_problem_hist.rank%TYPE DEFAULT NULL,
        flg_status_in                IN pat_problem_hist.flg_status%TYPE DEFAULT NULL,
        flg_aproved_in               IN pat_problem_hist.flg_aproved%TYPE DEFAULT NULL,
        id_institution_in            IN pat_problem_hist.id_institution%TYPE DEFAULT NULL,
        id_pat_habit_in              IN pat_problem_hist.id_pat_habit%TYPE DEFAULT NULL,
        id_episode_in                IN pat_problem_hist.id_episode%TYPE DEFAULT NULL,
        id_epis_anamnesis_in         IN pat_problem_hist.id_epis_anamnesis%TYPE DEFAULT NULL,
        flg_nature_in                IN pat_problem_hist.flg_nature%TYPE DEFAULT NULL,
        id_alert_diagnosis_in        IN pat_problem_hist.id_alert_diagnosis%TYPE DEFAULT NULL,
        dt_pat_problem_tstz_in       IN pat_problem_hist.dt_pat_problem_tstz%TYPE DEFAULT NULL,
        dt_confirm_tstz_in           IN pat_problem_hist.dt_confirm_tstz%TYPE DEFAULT NULL,
        id_cancel_reason_in          IN pat_problem_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in              IN pat_problem_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in               IN pat_problem_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN pat_problem_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN pat_problem_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN pat_problem_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN pat_problem_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN pat_problem_hist.update_institution%TYPE DEFAULT NULL,
        dt_resolution_in             IN pat_problem_hist.dt_resolution%TYPE DEFAULT NULL,
        id_habit_characterization_in IN pat_problem_hist.id_habit_characterization%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_pat_problem_hist_in,
                id_pat_problem_in,
                id_patient_in,
                id_diagnosis_in,
                id_professional_ins_in,
                id_epis_diagnosis_in,
                desc_pat_problem_in,
                notes_in,
                flg_age_in,
                year_begin_in,
                month_begin_in,
                day_begin_in,
                year_end_in,
                month_end_in,
                day_end_in,
                pct_incapacity_in,
                flg_surgery_in,
                notes_support_in,
                rank_in,
                flg_status_in,
                flg_aproved_in,
                id_institution_in,
                id_pat_habit_in,
                id_episode_in,
                id_epis_anamnesis_in,
                flg_nature_in,
                id_alert_diagnosis_in,
                dt_pat_problem_tstz_in,
                dt_confirm_tstz_in,
                id_cancel_reason_in,
                cancel_notes_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                dt_resolution_in,
                id_habit_characterization_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pat_problem_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_pat_problem_hist       id_pat_problem_hist_cc;
        l_id_pat_problem            id_pat_problem_cc;
        l_id_patient                id_patient_cc;
        l_id_diagnosis              id_diagnosis_cc;
        l_id_professional_ins       id_professional_ins_cc;
        l_id_epis_diagnosis         id_epis_diagnosis_cc;
        l_desc_pat_problem          desc_pat_problem_cc;
        l_notes                     notes_cc;
        l_flg_age                   flg_age_cc;
        l_year_begin                year_begin_cc;
        l_month_begin               month_begin_cc;
        l_day_begin                 day_begin_cc;
        l_year_end                  year_end_cc;
        l_month_end                 month_end_cc;
        l_day_end                   day_end_cc;
        l_pct_incapacity            pct_incapacity_cc;
        l_flg_surgery               flg_surgery_cc;
        l_notes_support             notes_support_cc;
        l_rank                      rank_cc;
        l_flg_status                flg_status_cc;
        l_flg_aproved               flg_aproved_cc;
        l_id_institution            id_institution_cc;
        l_id_pat_habit              id_pat_habit_cc;
        l_id_episode                id_episode_cc;
        l_id_epis_anamnesis         id_epis_anamnesis_cc;
        l_flg_nature                flg_nature_cc;
        l_id_alert_diagnosis        id_alert_diagnosis_cc;
        l_dt_pat_problem_tstz       dt_pat_problem_tstz_cc;
        l_dt_confirm_tstz           dt_confirm_tstz_cc;
        l_id_cancel_reason          id_cancel_reason_cc;
        l_cancel_notes              cancel_notes_cc;
        l_create_user               create_user_cc;
        l_create_time               create_time_cc;
        l_create_institution        create_institution_cc;
        l_update_user               update_user_cc;
        l_update_time               update_time_cc;
        l_update_institution        update_institution_cc;
        l_dt_resolution             dt_resolution_cc;
        l_id_habit_characterization id_habit_characterization_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_pat_problem_hist(i) := col_in(i).id_pat_problem_hist;
            l_id_pat_problem(i) := col_in(i).id_pat_problem;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_diagnosis(i) := col_in(i).id_diagnosis;
            l_id_professional_ins(i) := col_in(i).id_professional_ins;
            l_id_epis_diagnosis(i) := col_in(i).id_epis_diagnosis;
            l_desc_pat_problem(i) := col_in(i).desc_pat_problem;
            l_notes(i) := col_in(i).notes;
            l_flg_age(i) := col_in(i).flg_age;
            l_year_begin(i) := col_in(i).year_begin;
            l_month_begin(i) := col_in(i).month_begin;
            l_day_begin(i) := col_in(i).day_begin;
            l_year_end(i) := col_in(i).year_end;
            l_month_end(i) := col_in(i).month_end;
            l_day_end(i) := col_in(i).day_end;
            l_pct_incapacity(i) := col_in(i).pct_incapacity;
            l_flg_surgery(i) := col_in(i).flg_surgery;
            l_notes_support(i) := col_in(i).notes_support;
            l_rank(i) := col_in(i).rank;
            l_flg_status(i) := col_in(i).flg_status;
            l_flg_aproved(i) := col_in(i).flg_aproved;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_pat_habit(i) := col_in(i).id_pat_habit;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_epis_anamnesis(i) := col_in(i).id_epis_anamnesis;
            l_flg_nature(i) := col_in(i).flg_nature;
            l_id_alert_diagnosis(i) := col_in(i).id_alert_diagnosis;
            l_dt_pat_problem_tstz(i) := col_in(i).dt_pat_problem_tstz;
            l_dt_confirm_tstz(i) := col_in(i).dt_confirm_tstz;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_cancel_notes(i) := col_in(i).cancel_notes;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_dt_resolution(i) := col_in(i).dt_resolution;
            l_id_habit_characterization(i) := col_in(i).id_habit_characterization;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE pat_problem_hist
                   SET id_pat_problem            = nvl(l_id_pat_problem(i), id_pat_problem),
                       id_patient                = nvl(l_id_patient(i), id_patient),
                       id_diagnosis              = nvl(l_id_diagnosis(i), id_diagnosis),
                       id_professional_ins       = nvl(l_id_professional_ins(i), id_professional_ins),
                       id_epis_diagnosis         = nvl(l_id_epis_diagnosis(i), id_epis_diagnosis),
                       desc_pat_problem          = nvl(l_desc_pat_problem(i), desc_pat_problem),
                       notes                     = nvl(l_notes(i), notes),
                       flg_age                   = nvl(l_flg_age(i), flg_age),
                       year_begin                = nvl(l_year_begin(i), year_begin),
                       month_begin               = nvl(l_month_begin(i), month_begin),
                       day_begin                 = nvl(l_day_begin(i), day_begin),
                       year_end                  = nvl(l_year_end(i), year_end),
                       month_end                 = nvl(l_month_end(i), month_end),
                       day_end                   = nvl(l_day_end(i), day_end),
                       pct_incapacity            = nvl(l_pct_incapacity(i), pct_incapacity),
                       flg_surgery               = nvl(l_flg_surgery(i), flg_surgery),
                       notes_support             = nvl(l_notes_support(i), notes_support),
                       rank                      = nvl(l_rank(i), rank),
                       flg_status                = nvl(l_flg_status(i), flg_status),
                       flg_aproved               = nvl(l_flg_aproved(i), flg_aproved),
                       id_institution            = nvl(l_id_institution(i), id_institution),
                       id_pat_habit              = nvl(l_id_pat_habit(i), id_pat_habit),
                       id_episode                = nvl(l_id_episode(i), id_episode),
                       id_epis_anamnesis         = nvl(l_id_epis_anamnesis(i), id_epis_anamnesis),
                       flg_nature                = nvl(l_flg_nature(i), flg_nature),
                       id_alert_diagnosis        = nvl(l_id_alert_diagnosis(i), id_alert_diagnosis),
                       dt_pat_problem_tstz       = nvl(l_dt_pat_problem_tstz(i), dt_pat_problem_tstz),
                       dt_confirm_tstz           = nvl(l_dt_confirm_tstz(i), dt_confirm_tstz),
                       id_cancel_reason          = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       cancel_notes              = nvl(l_cancel_notes(i), cancel_notes),
                       create_user               = nvl(l_create_user(i), create_user),
                       create_time               = nvl(l_create_time(i), create_time),
                       create_institution        = nvl(l_create_institution(i), create_institution),
                       update_user               = nvl(l_update_user(i), update_user),
                       update_time               = nvl(l_update_time(i), update_time),
                       update_institution        = nvl(l_update_institution(i), update_institution),
                       dt_resolution             = nvl(l_dt_resolution(i), dt_resolution),
                       id_habit_characterization = nvl(l_id_habit_characterization(i), id_habit_characterization)
                 WHERE id_pat_problem_hist = l_id_pat_problem_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE pat_problem_hist
                   SET id_pat_problem            = l_id_pat_problem(i),
                       id_patient                = l_id_patient(i),
                       id_diagnosis              = l_id_diagnosis(i),
                       id_professional_ins       = l_id_professional_ins(i),
                       id_epis_diagnosis         = l_id_epis_diagnosis(i),
                       desc_pat_problem          = l_desc_pat_problem(i),
                       notes                     = l_notes(i),
                       flg_age                   = l_flg_age(i),
                       year_begin                = l_year_begin(i),
                       month_begin               = l_month_begin(i),
                       day_begin                 = l_day_begin(i),
                       year_end                  = l_year_end(i),
                       month_end                 = l_month_end(i),
                       day_end                   = l_day_end(i),
                       pct_incapacity            = l_pct_incapacity(i),
                       flg_surgery               = l_flg_surgery(i),
                       notes_support             = l_notes_support(i),
                       rank                      = l_rank(i),
                       flg_status                = l_flg_status(i),
                       flg_aproved               = l_flg_aproved(i),
                       id_institution            = l_id_institution(i),
                       id_pat_habit              = l_id_pat_habit(i),
                       id_episode                = l_id_episode(i),
                       id_epis_anamnesis         = l_id_epis_anamnesis(i),
                       flg_nature                = l_flg_nature(i),
                       id_alert_diagnosis        = l_id_alert_diagnosis(i),
                       dt_pat_problem_tstz       = l_dt_pat_problem_tstz(i),
                       dt_confirm_tstz           = l_dt_confirm_tstz(i),
                       id_cancel_reason          = l_id_cancel_reason(i),
                       cancel_notes              = l_cancel_notes(i),
                       create_user               = l_create_user(i),
                       create_time               = l_create_time(i),
                       create_institution        = l_create_institution(i),
                       update_user               = l_update_user(i),
                       update_time               = l_update_time(i),
                       update_institution        = l_update_institution(i),
                       dt_resolution             = l_dt_resolution(i),
                       id_habit_characterization = l_id_habit_characterization(i)
                 WHERE id_pat_problem_hist = l_id_pat_problem_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pat_problem_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PAT_PROBLEM_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PAT_PROBLEM_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_PROBLEM_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PAT_PROBLEM_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_pat_problem_hist_in IN pat_problem_hist.id_pat_problem_hist%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_problem_hist
         WHERE id_pat_problem_hist = id_pat_problem_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_pat_problem_hist_in IN pat_problem_hist.id_pat_problem_hist%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_pat_problem_hist_in => id_pat_problem_hist_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PAT_PROBLEM_HIST
    PROCEDURE del_id_pat_problem_hist
    (
        id_pat_problem_hist_in IN pat_problem_hist.id_pat_problem_hist%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_problem_hist
         WHERE id_pat_problem_hist = id_pat_problem_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_pat_problem_hist;

    -- Delete all rows for primary key column ID_PAT_PROBLEM_HIST
    PROCEDURE del_id_pat_problem_hist
    (
        id_pat_problem_hist_in IN pat_problem_hist.id_pat_problem_hist%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_pat_problem_hist(id_pat_problem_hist_in => id_pat_problem_hist_in,
                                handle_error_in        => handle_error_in,
                                rows_out               => rows_out);
    END del_id_pat_problem_hist;

    PROCEDURE del_pph_comp_fk
    (
        id_epis_anamnesis_in IN pat_problem_hist.id_epis_anamnesis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_problem_hist
         WHERE id_epis_anamnesis = del_pph_comp_fk.id_epis_anamnesis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pph_comp_fk;

    PROCEDURE del_pph_comp_fk
    (
        id_epis_anamnesis_in IN pat_problem_hist.id_epis_anamnesis%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pph_comp_fk(id_epis_anamnesis_in => id_epis_anamnesis_in,
                        handle_error_in      => handle_error_in,
                        rows_out             => rows_out);
    END del_pph_comp_fk;

    PROCEDURE del_pph_epis_fk
    (
        id_episode_in   IN pat_problem_hist.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_problem_hist
         WHERE id_episode = del_pph_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pph_epis_fk;

    PROCEDURE del_pph_epis_fk
    (
        id_episode_in   IN pat_problem_hist.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pph_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pph_epis_fk;

    PROCEDURE del_pph_inst_fk
    (
        id_institution_in IN pat_problem_hist.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_problem_hist
         WHERE id_institution = del_pph_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pph_inst_fk;

    PROCEDURE del_pph_inst_fk
    (
        id_institution_in IN pat_problem_hist.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pph_inst_fk(id_institution_in => id_institution_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_pph_inst_fk;

    PROCEDURE del_pph_pat_fk
    (
        id_patient_in   IN pat_problem_hist.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_problem_hist
         WHERE id_patient = del_pph_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pph_pat_fk;

    PROCEDURE del_pph_pat_fk
    (
        id_patient_in   IN pat_problem_hist.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pph_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pph_pat_fk;

    PROCEDURE del_pph_ppm_fk
    (
        id_pat_problem_in IN pat_problem_hist.id_pat_problem%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_problem_hist
         WHERE id_pat_problem = del_pph_ppm_fk.id_pat_problem_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pph_ppm_fk;

    PROCEDURE del_pph_ppm_fk
    (
        id_pat_problem_in IN pat_problem_hist.id_pat_problem%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pph_ppm_fk(id_pat_problem_in => id_pat_problem_in,
                       handle_error_in   => handle_error_in,
                       rows_out          => rows_out);
    END del_pph_ppm_fk;

    PROCEDURE del_pph_ptnot_fk
    (
        id_pat_habit_in IN pat_problem_hist.id_pat_habit%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_problem_hist
         WHERE id_pat_habit = del_pph_ptnot_fk.id_pat_habit_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pph_ptnot_fk;

    PROCEDURE del_pph_ptnot_fk
    (
        id_pat_habit_in IN pat_problem_hist.id_pat_habit%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pph_ptnot_fk(id_pat_habit_in => id_pat_habit_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pph_ptnot_fk;

    PROCEDURE del_ppmh_cr_fk
    (
        id_cancel_reason_in IN pat_problem_hist.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_problem_hist
         WHERE id_cancel_reason = del_ppmh_cr_fk.id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ppmh_cr_fk;

    PROCEDURE del_ppmh_cr_fk
    (
        id_cancel_reason_in IN pat_problem_hist.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ppmh_cr_fk(id_cancel_reason_in => id_cancel_reason_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_ppmh_cr_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PAT_PROBLEM_HIST';
        ELSE
            RETURN 'DELETE FROM PAT_PROBLEM_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PROBLEM_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PROBLEM_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pat_problem_hist_inout IN OUT pat_problem_hist%ROWTYPE) IS
    BEGIN
        pat_problem_hist_inout.id_pat_problem_hist       := NULL;
        pat_problem_hist_inout.id_pat_problem            := NULL;
        pat_problem_hist_inout.id_patient                := NULL;
        pat_problem_hist_inout.id_diagnosis              := NULL;
        pat_problem_hist_inout.id_professional_ins       := NULL;
        pat_problem_hist_inout.id_epis_diagnosis         := NULL;
        pat_problem_hist_inout.desc_pat_problem          := NULL;
        pat_problem_hist_inout.notes                     := NULL;
        pat_problem_hist_inout.flg_age                   := NULL;
        pat_problem_hist_inout.year_begin                := NULL;
        pat_problem_hist_inout.month_begin               := NULL;
        pat_problem_hist_inout.day_begin                 := NULL;
        pat_problem_hist_inout.year_end                  := NULL;
        pat_problem_hist_inout.month_end                 := NULL;
        pat_problem_hist_inout.day_end                   := NULL;
        pat_problem_hist_inout.pct_incapacity            := NULL;
        pat_problem_hist_inout.flg_surgery               := NULL;
        pat_problem_hist_inout.notes_support             := NULL;
        pat_problem_hist_inout.rank                      := NULL;
        pat_problem_hist_inout.flg_status                := NULL;
        pat_problem_hist_inout.flg_aproved               := NULL;
        pat_problem_hist_inout.id_institution            := NULL;
        pat_problem_hist_inout.id_pat_habit              := NULL;
        pat_problem_hist_inout.id_episode                := NULL;
        pat_problem_hist_inout.id_epis_anamnesis         := NULL;
        pat_problem_hist_inout.flg_nature                := NULL;
        pat_problem_hist_inout.id_alert_diagnosis        := NULL;
        pat_problem_hist_inout.dt_pat_problem_tstz       := NULL;
        pat_problem_hist_inout.dt_confirm_tstz           := NULL;
        pat_problem_hist_inout.id_cancel_reason          := NULL;
        pat_problem_hist_inout.cancel_notes              := NULL;
        pat_problem_hist_inout.create_user               := NULL;
        pat_problem_hist_inout.create_time               := NULL;
        pat_problem_hist_inout.create_institution        := NULL;
        pat_problem_hist_inout.update_user               := NULL;
        pat_problem_hist_inout.update_time               := NULL;
        pat_problem_hist_inout.update_institution        := NULL;
        pat_problem_hist_inout.dt_resolution             := NULL;
        pat_problem_hist_inout.id_habit_characterization := NULL;
    END initrec;

    FUNCTION initrec RETURN pat_problem_hist%ROWTYPE IS
        l_pat_problem_hist pat_problem_hist%ROWTYPE;
    BEGIN
        RETURN l_pat_problem_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pat_problem_hist_tc IS
        data pat_problem_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pat_problem_hist
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pat_problem_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pat_problem_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pat_problem_hist;
/
