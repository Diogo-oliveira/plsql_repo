/*-- Last Change Revision: $Rev: 939995 $*/
/*-- Last Change by: $Author: paulo.teixeira $*/
/*-- Date of last change: $Date: 2011-04-06 11:01:56 +0100 (qua, 06 abr 2011) $*/

CREATE OR REPLACE PACKAGE BODY ts_combination_spec_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: MarÃ§o 16, 2011 15:27:4
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_combination_spec_hist_in IN combination_spec_hist.id_combination_spec_hist%TYPE,
        id_combination_spec_in      IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_patient_in               IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        comb_name_in                IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        dt_suggest_begin_in         IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_end_in           IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        flg_status_in               IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_single_visit_in         IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        dt_last_update_in           IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in      IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_in      IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        flg_freq_origin_module_in   IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        create_user_in              IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        id_episode_in               IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN

        INSERT INTO combination_spec_hist
            (id_combination_spec_hist,
             id_combination_spec,
             id_patient,
             comb_name,
             dt_suggest_begin,
             dt_suggest_end,
             flg_status,
             flg_single_visit,
             dt_last_update,
             id_prof_last_update,
             id_inst_last_update,
             flg_freq_origin_module,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_episode)
        VALUES
            (id_combination_spec_hist_in,
             id_combination_spec_in,
             id_patient_in,
             comb_name_in,
             dt_suggest_begin_in,
             dt_suggest_end_in,
             flg_status_in,
             flg_single_visit_in,
             dt_last_update_in,
             id_prof_last_update_in,
             id_inst_last_update_in,
             flg_freq_origin_module_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_episode_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'COMBINATION_SPEC_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);

                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_combination_spec_hist_in IN combination_spec_hist.id_combination_spec_hist%TYPE,
        id_combination_spec_in      IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_patient_in               IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        comb_name_in                IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        dt_suggest_begin_in         IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_end_in           IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        flg_status_in               IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_single_visit_in         IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        dt_last_update_in           IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in      IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_in      IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        flg_freq_origin_module_in   IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        create_user_in              IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        id_episode_in               IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN

        ins(id_combination_spec_hist_in => id_combination_spec_hist_in,
            id_combination_spec_in      => id_combination_spec_in,
            id_patient_in               => id_patient_in,
            comb_name_in                => comb_name_in,
            dt_suggest_begin_in         => dt_suggest_begin_in,
            dt_suggest_end_in           => dt_suggest_end_in,
            flg_status_in               => flg_status_in,
            flg_single_visit_in         => flg_single_visit_in,
            dt_last_update_in           => dt_last_update_in,
            id_prof_last_update_in      => id_prof_last_update_in,
            id_inst_last_update_in      => id_inst_last_update_in,
            flg_freq_origin_module_in   => flg_freq_origin_module_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_episode_in               => id_episode_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN combination_spec_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec combination_spec_hist%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_combination_spec_hist := next_key(sequence_in);
        END IF;
        ins(id_combination_spec_hist_in => l_rec.id_combination_spec_hist,
            id_combination_spec_in      => l_rec.id_combination_spec,
            id_patient_in               => l_rec.id_patient,
            comb_name_in                => l_rec.comb_name,
            dt_suggest_begin_in         => l_rec.dt_suggest_begin,
            dt_suggest_end_in           => l_rec.dt_suggest_end,
            flg_status_in               => l_rec.flg_status,
            flg_single_visit_in         => l_rec.flg_single_visit,
            dt_last_update_in           => l_rec.dt_last_update,
            id_prof_last_update_in      => l_rec.id_prof_last_update,
            id_inst_last_update_in      => l_rec.id_inst_last_update,
            flg_freq_origin_module_in   => l_rec.flg_freq_origin_module,
            create_user_in              => l_rec.create_user,
            create_time_in              => l_rec.create_time,
            create_institution_in       => l_rec.create_institution,
            update_user_in              => l_rec.update_user,
            update_time_in              => l_rec.update_time,
            update_institution_in       => l_rec.update_institution,
            id_episode_in               => l_rec.id_episode,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN combination_spec_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN

        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);

    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN combination_spec_hist.id_combination_spec_hist%TYPE

     IS
        retval combination_spec_hist.id_combination_spec_hist%TYPE;

    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_combination_spec_hist.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_COMBINATION_SPEC_HIST'));
    END next_key;

    PROCEDURE ins
    (
        id_combination_spec_in       IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_patient_in                IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        comb_name_in                 IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        dt_suggest_begin_in          IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_end_in            IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        flg_status_in                IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_single_visit_in          IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        dt_last_update_in            IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in       IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_in       IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        flg_freq_origin_module_in    IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        create_user_in               IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        id_episode_in                IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        id_combination_spec_hist_out IN OUT combination_spec_hist.id_combination_spec_hist%TYPE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
        l_pky combination_spec_hist.id_combination_spec_hist%TYPE := next_key;
    BEGIN
        ins(id_combination_spec_hist_in => l_pky,
            id_combination_spec_in      => id_combination_spec_in,
            id_patient_in               => id_patient_in,
            comb_name_in                => comb_name_in,
            dt_suggest_begin_in         => dt_suggest_begin_in,
            dt_suggest_end_in           => dt_suggest_end_in,
            flg_status_in               => flg_status_in,
            flg_single_visit_in         => flg_single_visit_in,
            dt_last_update_in           => dt_last_update_in,
            id_prof_last_update_in      => id_prof_last_update_in,
            id_inst_last_update_in      => id_inst_last_update_in,
            flg_freq_origin_module_in   => flg_freq_origin_module_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_episode_in               => id_episode_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        id_combination_spec_hist_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_combination_spec_in       IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_patient_in                IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        comb_name_in                 IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        dt_suggest_begin_in          IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_end_in            IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        flg_status_in                IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_single_visit_in          IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        dt_last_update_in            IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in       IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_in       IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        flg_freq_origin_module_in    IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        create_user_in               IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_time_in               IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_time_in               IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        id_episode_in                IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        id_combination_spec_hist_out IN OUT combination_spec_hist.id_combination_spec_hist%TYPE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_combination_spec_in       => id_combination_spec_in,
            id_patient_in                => id_patient_in,
            comb_name_in                 => comb_name_in,
            dt_suggest_begin_in          => dt_suggest_begin_in,
            dt_suggest_end_in            => dt_suggest_end_in,
            flg_status_in                => flg_status_in,
            flg_single_visit_in          => flg_single_visit_in,
            dt_last_update_in            => dt_last_update_in,
            id_prof_last_update_in       => id_prof_last_update_in,
            id_inst_last_update_in       => id_inst_last_update_in,
            flg_freq_origin_module_in    => flg_freq_origin_module_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_episode_in                => id_episode_in,
            id_combination_spec_hist_out => id_combination_spec_hist_out,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    FUNCTION ins
    (
        id_combination_spec_in    IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_patient_in             IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        comb_name_in              IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        dt_suggest_begin_in       IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_end_in         IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        flg_status_in             IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_single_visit_in       IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        dt_last_update_in         IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_in    IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        flg_freq_origin_module_in IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        create_user_in            IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        id_episode_in             IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) RETURN combination_spec_hist.id_combination_spec_hist%TYPE IS
        l_pky combination_spec_hist.id_combination_spec_hist%TYPE := next_key;
    BEGIN
        ins(id_combination_spec_hist_in => l_pky,
            id_combination_spec_in      => id_combination_spec_in,
            id_patient_in               => id_patient_in,
            comb_name_in                => comb_name_in,
            dt_suggest_begin_in         => dt_suggest_begin_in,
            dt_suggest_end_in           => dt_suggest_end_in,
            flg_status_in               => flg_status_in,
            flg_single_visit_in         => flg_single_visit_in,
            dt_last_update_in           => dt_last_update_in,
            id_prof_last_update_in      => id_prof_last_update_in,
            id_inst_last_update_in      => id_inst_last_update_in,
            flg_freq_origin_module_in   => flg_freq_origin_module_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_episode_in               => id_episode_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_combination_spec_in    IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_patient_in             IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        comb_name_in              IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        dt_suggest_begin_in       IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_end_in         IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        flg_status_in             IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_single_visit_in       IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        dt_last_update_in         IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_in    IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        flg_freq_origin_module_in IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        create_user_in            IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        id_episode_in             IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) RETURN combination_spec_hist.id_combination_spec_hist%TYPE IS
        l_pky    combination_spec_hist.id_combination_spec_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_combination_spec_hist_in => l_pky,
            id_combination_spec_in      => id_combination_spec_in,
            id_patient_in               => id_patient_in,
            comb_name_in                => comb_name_in,
            dt_suggest_begin_in         => dt_suggest_begin_in,
            dt_suggest_end_in           => dt_suggest_end_in,
            flg_status_in               => flg_status_in,
            flg_single_visit_in         => flg_single_visit_in,
            dt_last_update_in           => dt_last_update_in,
            id_prof_last_update_in      => id_prof_last_update_in,
            id_inst_last_update_in      => id_inst_last_update_in,
            flg_freq_origin_module_in   => flg_freq_origin_module_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_episode_in               => id_episode_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_combination_spec_in    IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_patient_in             IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        comb_name_in              IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        dt_suggest_begin_in       IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_end_in         IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        flg_status_in             IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_single_visit_in       IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        dt_last_update_in         IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_in    IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        flg_freq_origin_module_in IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        create_user_in            IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        id_episode_in             IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
        l_pky combination_spec_hist.id_combination_spec_hist%TYPE := next_key;
    BEGIN
        ins(id_combination_spec_hist_in => l_pky,
            id_combination_spec_in      => id_combination_spec_in,
            id_patient_in               => id_patient_in,
            comb_name_in                => comb_name_in,
            dt_suggest_begin_in         => dt_suggest_begin_in,
            dt_suggest_end_in           => dt_suggest_end_in,
            flg_status_in               => flg_status_in,
            flg_single_visit_in         => flg_single_visit_in,
            dt_last_update_in           => dt_last_update_in,
            id_prof_last_update_in      => id_prof_last_update_in,
            id_inst_last_update_in      => id_inst_last_update_in,
            flg_freq_origin_module_in   => flg_freq_origin_module_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_episode_in               => id_episode_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_combination_spec_in    IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_patient_in             IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        comb_name_in              IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        dt_suggest_begin_in       IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_end_in         IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        flg_status_in             IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_single_visit_in       IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        dt_last_update_in         IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_in    IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        flg_freq_origin_module_in IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        create_user_in            IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        id_episode_in             IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        l_pky    combination_spec_hist.id_combination_spec_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_combination_spec_hist_in => l_pky,
            id_combination_spec_in      => id_combination_spec_in,
            id_patient_in               => id_patient_in,
            comb_name_in                => comb_name_in,
            dt_suggest_begin_in         => dt_suggest_begin_in,
            dt_suggest_end_in           => dt_suggest_end_in,
            flg_status_in               => flg_status_in,
            flg_single_visit_in         => flg_single_visit_in,
            dt_last_update_in           => dt_last_update_in,
            id_prof_last_update_in      => id_prof_last_update_in,
            id_inst_last_update_in      => id_inst_last_update_in,
            flg_freq_origin_module_in   => flg_freq_origin_module_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_episode_in               => id_episode_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN combination_spec_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO combination_spec_hist
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMBINATION_SPEC_HIST _' || indx,
                                                        value_in           => rows_in(indx).id_combination_spec_hist,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMBINATION_SPEC _' || indx,
                                                        value_in           => rows_in(indx).id_combination_spec,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'COMB_NAME _' || indx,
                                                        value_in           => rows_in(indx).comb_name,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_SUGGEST_BEGIN _' || indx,
                                                        value_in           => rows_in(indx).dt_suggest_begin,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_SUGGEST_END _' || indx,
                                                        value_in           => rows_in(indx).dt_suggest_end,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_SINGLE_VISIT _' || indx,
                                                        value_in           => rows_in(indx).flg_single_visit,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).dt_last_update,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_last_update,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INST_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).id_inst_last_update,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_FREQ_ORIGIN_MODULE _' || indx,
                                                        value_in           => rows_in(indx).flg_freq_origin_module,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);

                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'COMBINATION_SPEC_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN combination_spec_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_combination_spec_hist_in IN combination_spec_hist.id_combination_spec_hist%TYPE,
        id_combination_spec_in      IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_combination_spec_nin     IN BOOLEAN := TRUE,
        id_patient_in               IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        comb_name_in                IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        comb_name_nin               IN BOOLEAN := TRUE,
        dt_suggest_begin_in         IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_begin_nin        IN BOOLEAN := TRUE,
        dt_suggest_end_in           IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        dt_suggest_end_nin          IN BOOLEAN := TRUE,
        flg_status_in               IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        flg_single_visit_in         IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        flg_single_visit_nin        IN BOOLEAN := TRUE,
        dt_last_update_in           IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin          IN BOOLEAN := TRUE,
        id_prof_last_update_in      IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin     IN BOOLEAN := TRUE,
        id_inst_last_update_in      IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_nin     IN BOOLEAN := TRUE,
        flg_freq_origin_module_in   IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        flg_freq_origin_module_nin  IN BOOLEAN := TRUE,
        create_user_in              IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        id_episode_in               IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_id_combination_spec_n    NUMBER(1);
        l_id_patient_n             NUMBER(1);
        l_comb_name_n              NUMBER(1);
        l_dt_suggest_begin_n       NUMBER(1);
        l_dt_suggest_end_n         NUMBER(1);
        l_flg_status_n             NUMBER(1);
        l_flg_single_visit_n       NUMBER(1);
        l_dt_last_update_n         NUMBER(1);
        l_id_prof_last_update_n    NUMBER(1);
        l_id_inst_last_update_n    NUMBER(1);
        l_flg_freq_origin_module_n NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        l_id_episode_n             NUMBER(1);
    BEGIN

        l_id_combination_spec_n    := sys.diutil.bool_to_int(id_combination_spec_nin);
        l_id_patient_n             := sys.diutil.bool_to_int(id_patient_nin);
        l_comb_name_n              := sys.diutil.bool_to_int(comb_name_nin);
        l_dt_suggest_begin_n       := sys.diutil.bool_to_int(dt_suggest_begin_nin);
        l_dt_suggest_end_n         := sys.diutil.bool_to_int(dt_suggest_end_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_single_visit_n       := sys.diutil.bool_to_int(flg_single_visit_nin);
        l_dt_last_update_n         := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_prof_last_update_n    := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_id_inst_last_update_n    := sys.diutil.bool_to_int(id_inst_last_update_nin);
        l_flg_freq_origin_module_n := sys.diutil.bool_to_int(flg_freq_origin_module_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_id_episode_n             := sys.diutil.bool_to_int(id_episode_nin);

        UPDATE combination_spec_hist
           SET id_combination_spec    = decode(l_id_combination_spec_n,
                                               0,
                                               id_combination_spec_in,
                                               nvl(id_combination_spec_in, id_combination_spec)),
               id_patient             = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               comb_name              = decode(l_comb_name_n, 0, comb_name_in, nvl(comb_name_in, comb_name)),
               dt_suggest_begin       = decode(l_dt_suggest_begin_n,
                                               0,
                                               dt_suggest_begin_in,
                                               nvl(dt_suggest_begin_in, dt_suggest_begin)),
               dt_suggest_end         = decode(l_dt_suggest_end_n,
                                               0,
                                               dt_suggest_end_in,
                                               nvl(dt_suggest_end_in, dt_suggest_end)),
               flg_status             = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               flg_single_visit       = decode(l_flg_single_visit_n,
                                               0,
                                               flg_single_visit_in,
                                               nvl(flg_single_visit_in, flg_single_visit)),
               dt_last_update         = decode(l_dt_last_update_n,
                                               0,
                                               dt_last_update_in,
                                               nvl(dt_last_update_in, dt_last_update)),
               id_prof_last_update    = decode(l_id_prof_last_update_n,
                                               0,
                                               id_prof_last_update_in,
                                               nvl(id_prof_last_update_in, id_prof_last_update)),
               id_inst_last_update    = decode(l_id_inst_last_update_n,
                                               0,
                                               id_inst_last_update_in,
                                               nvl(id_inst_last_update_in, id_inst_last_update)),
               flg_freq_origin_module = decode(l_flg_freq_origin_module_n,
                                               0,
                                               flg_freq_origin_module_in,
                                               nvl(flg_freq_origin_module_in, flg_freq_origin_module)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution)),
               id_episode             = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode))
         WHERE id_combination_spec_hist = id_combination_spec_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;

        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;

        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'COMBINATION_SPEC_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);

                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_combination_spec_hist_in IN combination_spec_hist.id_combination_spec_hist%TYPE,
        id_combination_spec_in      IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_combination_spec_nin     IN BOOLEAN := TRUE,
        id_patient_in               IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        comb_name_in                IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        comb_name_nin               IN BOOLEAN := TRUE,
        dt_suggest_begin_in         IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_begin_nin        IN BOOLEAN := TRUE,
        dt_suggest_end_in           IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        dt_suggest_end_nin          IN BOOLEAN := TRUE,
        flg_status_in               IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        flg_single_visit_in         IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        flg_single_visit_nin        IN BOOLEAN := TRUE,
        dt_last_update_in           IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin          IN BOOLEAN := TRUE,
        id_prof_last_update_in      IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin     IN BOOLEAN := TRUE,
        id_inst_last_update_in      IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_nin     IN BOOLEAN := TRUE,
        flg_freq_origin_module_in   IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        flg_freq_origin_module_nin  IN BOOLEAN := TRUE,
        create_user_in              IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        id_episode_in               IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_combination_spec_hist_in => id_combination_spec_hist_in,
            id_combination_spec_in      => id_combination_spec_in,
            id_combination_spec_nin     => id_combination_spec_nin,
            id_patient_in               => id_patient_in,
            id_patient_nin              => id_patient_nin,
            comb_name_in                => comb_name_in,
            comb_name_nin               => comb_name_nin,
            dt_suggest_begin_in         => dt_suggest_begin_in,
            dt_suggest_begin_nin        => dt_suggest_begin_nin,
            dt_suggest_end_in           => dt_suggest_end_in,
            dt_suggest_end_nin          => dt_suggest_end_nin,
            flg_status_in               => flg_status_in,
            flg_status_nin              => flg_status_nin,
            flg_single_visit_in         => flg_single_visit_in,
            flg_single_visit_nin        => flg_single_visit_nin,
            dt_last_update_in           => dt_last_update_in,
            dt_last_update_nin          => dt_last_update_nin,
            id_prof_last_update_in      => id_prof_last_update_in,
            id_prof_last_update_nin     => id_prof_last_update_nin,
            id_inst_last_update_in      => id_inst_last_update_in,
            id_inst_last_update_nin     => id_inst_last_update_nin,
            flg_freq_origin_module_in   => flg_freq_origin_module_in,
            flg_freq_origin_module_nin  => flg_freq_origin_module_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            id_episode_in               => id_episode_in,
            id_episode_nin              => id_episode_nin,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_combination_spec_in     IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_combination_spec_nin    IN BOOLEAN := TRUE,
        id_patient_in              IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        comb_name_in               IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        comb_name_nin              IN BOOLEAN := TRUE,
        dt_suggest_begin_in        IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_begin_nin       IN BOOLEAN := TRUE,
        dt_suggest_end_in          IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        dt_suggest_end_nin         IN BOOLEAN := TRUE,
        flg_status_in              IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        flg_single_visit_in        IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        flg_single_visit_nin       IN BOOLEAN := TRUE,
        dt_last_update_in          IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin         IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        id_inst_last_update_in     IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_nin    IN BOOLEAN := TRUE,
        flg_freq_origin_module_in  IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        flg_freq_origin_module_nin IN BOOLEAN := TRUE,
        create_user_in             IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        id_episode_in              IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        where_in                   VARCHAR2 DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                       VARCHAR2(32767);
        l_rows_out                  table_varchar;
        l_id_combination_spec_n     NUMBER(1);
        l_id_patient_n              NUMBER(1);
        l_comb_name_n               NUMBER(1);
        l_dt_suggest_begin_n        NUMBER(1);
        l_dt_suggest_end_n          NUMBER(1);
        l_flg_status_n              NUMBER(1);
        l_flg_single_visit_n        NUMBER(1);
        l_dt_last_update_n          NUMBER(1);
        l_id_prof_last_update_n     NUMBER(1);
        l_id_inst_last_update_n     NUMBER(1);
        l_flg_freq_origin_module_n  NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
        l_id_episode_n              NUMBER(1);
        id_combination_spec_hist_in combination_spec_hist.id_combination_spec_hist%TYPE;
    BEGIN

        l_id_combination_spec_n    := sys.diutil.bool_to_int(id_combination_spec_nin);
        l_id_patient_n             := sys.diutil.bool_to_int(id_patient_nin);
        l_comb_name_n              := sys.diutil.bool_to_int(comb_name_nin);
        l_dt_suggest_begin_n       := sys.diutil.bool_to_int(dt_suggest_begin_nin);
        l_dt_suggest_end_n         := sys.diutil.bool_to_int(dt_suggest_end_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_single_visit_n       := sys.diutil.bool_to_int(flg_single_visit_nin);
        l_dt_last_update_n         := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_prof_last_update_n    := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_id_inst_last_update_n    := sys.diutil.bool_to_int(id_inst_last_update_nin);
        l_flg_freq_origin_module_n := sys.diutil.bool_to_int(flg_freq_origin_module_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_id_episode_n             := sys.diutil.bool_to_int(id_episode_nin);

        l_sql := 'UPDATE COMBINATION_SPEC_HIST SET ' || ' ID_COMBINATION_SPEC = decode (' || l_id_combination_spec_n ||
                 ',0,:id_combination_spec_in, NVL (:id_combination_spec_in, ID_COMBINATION_SPEC)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' COMB_NAME = decode (' || l_comb_name_n || ',0,:comb_name_in, NVL (:comb_name_in, COMB_NAME)) ' || ',' ||
                 ' DT_SUGGEST_BEGIN = decode (' || l_dt_suggest_begin_n ||
                 ',0,:dt_suggest_begin_in, NVL (:dt_suggest_begin_in, DT_SUGGEST_BEGIN)) ' || ',' ||
                 ' DT_SUGGEST_END = decode (' || l_dt_suggest_end_n ||
                 ',0,:dt_suggest_end_in, NVL (:dt_suggest_end_in, DT_SUGGEST_END)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' FLG_SINGLE_VISIT = decode (' || l_flg_single_visit_n ||
                 ',0,:flg_single_visit_in, NVL (:flg_single_visit_in, FLG_SINGLE_VISIT)) ' || ',' ||
                 ' DT_LAST_UPDATE = decode (' || l_dt_last_update_n ||
                 ',0,:dt_last_update_in, NVL (:dt_last_update_in, DT_LAST_UPDATE)) ' || ',' ||
                 ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                 ',0,:id_prof_last_update_in, NVL (:id_prof_last_update_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                 ' ID_INST_LAST_UPDATE = decode (' || l_id_inst_last_update_n ||
                 ',0,:id_inst_last_update_in, NVL (:id_inst_last_update_in, ID_INST_LAST_UPDATE)) ' || ',' ||
                 ' FLG_FREQ_ORIGIN_MODULE = decode (' || l_flg_freq_origin_module_n ||
                 ',0,:flg_freq_origin_module_in, NVL (:flg_freq_origin_module_in, FLG_FREQ_ORIGIN_MODULE)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';

        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_combination_spec_in, id_patient_in, comb_name_in, dt_suggest_begin_in, dt_suggest_end_in, flg_status_in, flg_single_visit_in, dt_last_update_in, id_prof_last_update_in, id_inst_last_update_in, flg_freq_origin_module_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_episode_in, OUT l_rows_out;

        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;

        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'COMBINATION_SPEC_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);

                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_combination_spec_in     IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_combination_spec_nin    IN BOOLEAN := TRUE,
        id_patient_in              IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        comb_name_in               IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        comb_name_nin              IN BOOLEAN := TRUE,
        dt_suggest_begin_in        IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_begin_nin       IN BOOLEAN := TRUE,
        dt_suggest_end_in          IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        dt_suggest_end_nin         IN BOOLEAN := TRUE,
        flg_status_in              IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        flg_single_visit_in        IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        flg_single_visit_nin       IN BOOLEAN := TRUE,
        dt_last_update_in          IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin         IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        id_inst_last_update_in     IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_nin    IN BOOLEAN := TRUE,
        flg_freq_origin_module_in  IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        flg_freq_origin_module_nin IN BOOLEAN := TRUE,
        create_user_in             IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        id_episode_in              IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        where_in                   VARCHAR2 DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_combination_spec_in     => id_combination_spec_in,
            id_combination_spec_nin    => id_combination_spec_nin,
            id_patient_in              => id_patient_in,
            id_patient_nin             => id_patient_nin,
            comb_name_in               => comb_name_in,
            comb_name_nin              => comb_name_nin,
            dt_suggest_begin_in        => dt_suggest_begin_in,
            dt_suggest_begin_nin       => dt_suggest_begin_nin,
            dt_suggest_end_in          => dt_suggest_end_in,
            dt_suggest_end_nin         => dt_suggest_end_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            flg_single_visit_in        => flg_single_visit_in,
            flg_single_visit_nin       => flg_single_visit_nin,
            dt_last_update_in          => dt_last_update_in,
            dt_last_update_nin         => dt_last_update_nin,
            id_prof_last_update_in     => id_prof_last_update_in,
            id_prof_last_update_nin    => id_prof_last_update_nin,
            id_inst_last_update_in     => id_inst_last_update_in,
            id_inst_last_update_nin    => id_inst_last_update_nin,
            flg_freq_origin_module_in  => flg_freq_origin_module_in,
            flg_freq_origin_module_nin => flg_freq_origin_module_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN combination_spec_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_combination_spec_hist_in => rec_in.id_combination_spec_hist,
            id_combination_spec_in      => rec_in.id_combination_spec,
            id_patient_in               => rec_in.id_patient,
            comb_name_in                => rec_in.comb_name,
            dt_suggest_begin_in         => rec_in.dt_suggest_begin,
            dt_suggest_end_in           => rec_in.dt_suggest_end,
            flg_status_in               => rec_in.flg_status,
            flg_single_visit_in         => rec_in.flg_single_visit,
            dt_last_update_in           => rec_in.dt_last_update,
            id_prof_last_update_in      => rec_in.id_prof_last_update,
            id_inst_last_update_in      => rec_in.id_inst_last_update,
            flg_freq_origin_module_in   => rec_in.flg_freq_origin_module,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution,
            id_episode_in               => rec_in.id_episode

           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN combination_spec_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_combination_spec_hist_in => rec_in.id_combination_spec_hist,
            id_combination_spec_in      => rec_in.id_combination_spec,
            id_patient_in               => rec_in.id_patient,
            comb_name_in                => rec_in.comb_name,
            dt_suggest_begin_in         => rec_in.dt_suggest_begin,
            dt_suggest_end_in           => rec_in.dt_suggest_end,
            flg_status_in               => rec_in.flg_status,
            flg_single_visit_in         => rec_in.flg_single_visit,
            dt_last_update_in           => rec_in.dt_last_update,
            id_prof_last_update_in      => rec_in.id_prof_last_update,
            id_inst_last_update_in      => rec_in.id_inst_last_update,
            flg_freq_origin_module_in   => rec_in.flg_freq_origin_module,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution,
            id_episode_in               => rec_in.id_episode

           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_combination_spec_hist_in IN combination_spec_hist.id_combination_spec_hist%TYPE,
        id_combination_spec_in      IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_patient_in               IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        comb_name_in                IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        dt_suggest_begin_in         IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_end_in           IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        flg_status_in               IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_single_visit_in         IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        dt_last_update_in           IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in      IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_in      IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        flg_freq_origin_module_in   IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        create_user_in              IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        id_episode_in               IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        upd(id_combination_spec_hist_in => id_combination_spec_hist_in,
            id_combination_spec_in      => id_combination_spec_in,
            id_patient_in               => id_patient_in,
            comb_name_in                => comb_name_in,
            dt_suggest_begin_in         => dt_suggest_begin_in,
            dt_suggest_end_in           => dt_suggest_end_in,
            flg_status_in               => flg_status_in,
            flg_single_visit_in         => flg_single_visit_in,
            dt_last_update_in           => dt_last_update_in,
            id_prof_last_update_in      => id_prof_last_update_in,
            id_inst_last_update_in      => id_inst_last_update_in,
            flg_freq_origin_module_in   => flg_freq_origin_module_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_episode_in               => id_episode_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_combination_spec_hist_in => id_combination_spec_hist_in,
                id_combination_spec_in      => id_combination_spec_in,
                id_patient_in               => id_patient_in,
                comb_name_in                => comb_name_in,
                dt_suggest_begin_in         => dt_suggest_begin_in,
                dt_suggest_end_in           => dt_suggest_end_in,
                flg_status_in               => flg_status_in,
                flg_single_visit_in         => flg_single_visit_in,
                dt_last_update_in           => dt_last_update_in,
                id_prof_last_update_in      => id_prof_last_update_in,
                id_inst_last_update_in      => id_inst_last_update_in,
                flg_freq_origin_module_in   => flg_freq_origin_module_in,
                create_user_in              => create_user_in,
                create_time_in              => create_time_in,
                create_institution_in       => create_institution_in,
                update_user_in              => update_user_in,
                update_time_in              => update_time_in,
                update_institution_in       => update_institution_in,
                id_episode_in               => id_episode_in,
                handle_error_in             => handle_error_in,
                rows_out                    => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_combination_spec_hist_in IN combination_spec_hist.id_combination_spec_hist%TYPE,
        id_combination_spec_in      IN combination_spec_hist.id_combination_spec%TYPE DEFAULT NULL,
        id_patient_in               IN combination_spec_hist.id_patient%TYPE DEFAULT NULL,
        comb_name_in                IN combination_spec_hist.comb_name%TYPE DEFAULT NULL,
        dt_suggest_begin_in         IN combination_spec_hist.dt_suggest_begin%TYPE DEFAULT NULL,
        dt_suggest_end_in           IN combination_spec_hist.dt_suggest_end%TYPE DEFAULT NULL,
        flg_status_in               IN combination_spec_hist.flg_status%TYPE DEFAULT NULL,
        flg_single_visit_in         IN combination_spec_hist.flg_single_visit%TYPE DEFAULT NULL,
        dt_last_update_in           IN combination_spec_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in      IN combination_spec_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_inst_last_update_in      IN combination_spec_hist.id_inst_last_update%TYPE DEFAULT NULL,
        flg_freq_origin_module_in   IN combination_spec_hist.flg_freq_origin_module%TYPE DEFAULT NULL,
        create_user_in              IN combination_spec_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN combination_spec_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN combination_spec_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN combination_spec_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN combination_spec_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN combination_spec_hist.update_institution%TYPE DEFAULT NULL,
        id_episode_in               IN combination_spec_hist.id_episode%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_combination_spec_hist_in,
                id_combination_spec_in,
                id_patient_in,
                comb_name_in,
                dt_suggest_begin_in,
                dt_suggest_end_in,
                flg_status_in,
                flg_single_visit_in,
                dt_last_update_in,
                id_prof_last_update_in,
                id_inst_last_update_in,
                flg_freq_origin_module_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_episode_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN combination_spec_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_combination_spec_hist id_combination_spec_hist_cc;
        l_id_combination_spec      id_combination_spec_cc;
        l_id_patient               id_patient_cc;
        l_comb_name                comb_name_cc;
        l_dt_suggest_begin         dt_suggest_begin_cc;
        l_dt_suggest_end           dt_suggest_end_cc;
        l_flg_status               flg_status_cc;
        l_flg_single_visit         flg_single_visit_cc;
        l_dt_last_update           dt_last_update_cc;
        l_id_prof_last_update      id_prof_last_update_cc;
        l_id_inst_last_update      id_inst_last_update_cc;
        l_flg_freq_origin_module   flg_freq_origin_module_cc;
        l_create_user              create_user_cc;
        l_create_time              create_time_cc;
        l_create_institution       create_institution_cc;
        l_update_user              update_user_cc;
        l_update_time              update_time_cc;
        l_update_institution       update_institution_cc;
        l_id_episode               id_episode_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_combination_spec_hist(i) := col_in(i).id_combination_spec_hist;
            l_id_combination_spec(i) := col_in(i).id_combination_spec;
            l_id_patient(i) := col_in(i).id_patient;
            l_comb_name(i) := col_in(i).comb_name;
            l_dt_suggest_begin(i) := col_in(i).dt_suggest_begin;
            l_dt_suggest_end(i) := col_in(i).dt_suggest_end;
            l_flg_status(i) := col_in(i).flg_status;
            l_flg_single_visit(i) := col_in(i).flg_single_visit;
            l_dt_last_update(i) := col_in(i).dt_last_update;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_id_inst_last_update(i) := col_in(i).id_inst_last_update;
            l_flg_freq_origin_module(i) := col_in(i).flg_freq_origin_module;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_episode(i) := col_in(i).id_episode;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE combination_spec_hist
                   SET id_combination_spec    = nvl(l_id_combination_spec(i), id_combination_spec),
                       id_patient             = nvl(l_id_patient(i), id_patient),
                       comb_name              = nvl(l_comb_name(i), comb_name),
                       dt_suggest_begin       = nvl(l_dt_suggest_begin(i), dt_suggest_begin),
                       dt_suggest_end         = nvl(l_dt_suggest_end(i), dt_suggest_end),
                       flg_status             = nvl(l_flg_status(i), flg_status),
                       flg_single_visit       = nvl(l_flg_single_visit(i), flg_single_visit),
                       dt_last_update         = nvl(l_dt_last_update(i), dt_last_update),
                       id_prof_last_update    = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       id_inst_last_update    = nvl(l_id_inst_last_update(i), id_inst_last_update),
                       flg_freq_origin_module = nvl(l_flg_freq_origin_module(i), flg_freq_origin_module),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution),
                       id_episode             = nvl(l_id_episode(i), id_episode)
                 WHERE id_combination_spec_hist = l_id_combination_spec_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE combination_spec_hist
                   SET id_combination_spec    = l_id_combination_spec(i),
                       id_patient             = l_id_patient(i),
                       comb_name              = l_comb_name(i),
                       dt_suggest_begin       = l_dt_suggest_begin(i),
                       dt_suggest_end         = l_dt_suggest_end(i),
                       flg_status             = l_flg_status(i),
                       flg_single_visit       = l_flg_single_visit(i),
                       dt_last_update         = l_dt_last_update(i),
                       id_prof_last_update    = l_id_prof_last_update(i),
                       id_inst_last_update    = l_id_inst_last_update(i),
                       flg_freq_origin_module = l_flg_freq_origin_module(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i),
                       id_episode             = l_id_episode(i)
                 WHERE id_combination_spec_hist = l_id_combination_spec_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN combination_spec_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )

     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE COMBINATION_SPEC_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )

     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE COMBINATION_SPEC_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE COMBINATION_SPEC_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);

                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE COMBINATION_SPEC_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);

                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_combination_spec_hist_in IN combination_spec_hist.id_combination_spec_hist%TYPE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM combination_spec_hist
         WHERE id_combination_spec_hist = id_combination_spec_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_combination_spec_hist_in IN combination_spec_hist.id_combination_spec_hist%TYPE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN

        del(id_combination_spec_hist_in => id_combination_spec_hist_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);

    END del;

    -- Delete all rows for primary key column ID_COMBINATION_SPEC_HIST
    PROCEDURE del_id_combination_spec_hist
    (
        id_combination_spec_hist_in IN combination_spec_hist.id_combination_spec_hist%TYPE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM combination_spec_hist
         WHERE id_combination_spec_hist = id_combination_spec_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_combination_spec_hist;

    -- Delete all rows for primary key column ID_COMBINATION_SPEC_HIST
    PROCEDURE del_id_combination_spec_hist
    (
        id_combination_spec_hist_in IN combination_spec_hist.id_combination_spec_hist%TYPE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_combination_spec_hist(id_combination_spec_hist_in => id_combination_spec_hist_in,
                                     handle_error_in             => handle_error_in,
                                     rows_out                    => rows_out);
    END del_id_combination_spec_hist;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM COMBINATION_SPEC_HIST';
        ELSE
            RETURN 'DELETE FROM COMBINATION_SPEC_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'COMBINATION_SPEC_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'COMBINATION_SPEC_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(combination_spec_hist_inout IN OUT combination_spec_hist%ROWTYPE) IS
    BEGIN
        combination_spec_hist_inout.id_combination_spec_hist := NULL;
        combination_spec_hist_inout.id_combination_spec      := NULL;
        combination_spec_hist_inout.id_patient               := NULL;
        combination_spec_hist_inout.comb_name                := NULL;
        combination_spec_hist_inout.dt_suggest_begin         := NULL;
        combination_spec_hist_inout.dt_suggest_end           := NULL;
        combination_spec_hist_inout.flg_status               := NULL;
        combination_spec_hist_inout.flg_single_visit         := NULL;
        combination_spec_hist_inout.dt_last_update           := NULL;
        combination_spec_hist_inout.id_prof_last_update      := NULL;
        combination_spec_hist_inout.id_inst_last_update      := NULL;
        combination_spec_hist_inout.flg_freq_origin_module   := NULL;
        combination_spec_hist_inout.create_user              := NULL;
        combination_spec_hist_inout.create_time              := NULL;
        combination_spec_hist_inout.create_institution       := NULL;
        combination_spec_hist_inout.update_user              := NULL;
        combination_spec_hist_inout.update_time              := NULL;
        combination_spec_hist_inout.update_institution       := NULL;
        combination_spec_hist_inout.id_episode               := NULL;
    END initrec;

    FUNCTION initrec RETURN combination_spec_hist%ROWTYPE IS
        l_combination_spec_hist combination_spec_hist%ROWTYPE;
    BEGIN
        RETURN l_combination_spec_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN combination_spec_hist_tc IS
        data combination_spec_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM combination_spec_hist
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN combination_spec_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data combination_spec_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_combination_spec_hist;
/
