/*-- Last Change Revision: $Rev: 2028062 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:05 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_documentation
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2019-04-01 10:21:17
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_documentation.id_epis_documentation%TYPE IS
        retval epis_documentation.id_epis_documentation%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_epis_documentation.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_documentation.id_epis_documentation%TYPE := next_key;
    BEGIN
        ins(id_epis_documentation_in       => l_pky,
            id_epis_complaint_in           => id_epis_complaint_in,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            flg_status_in                  => flg_status_in,
            id_doc_area_in                 => id_doc_area_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            id_doc_template_in             => id_doc_template_in,
            id_epis_documentation_paren_in => id_epis_documentation_paren_in,
            dt_creation_tstz_in            => dt_creation_tstz_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_epis_context_in             => id_epis_context_in,
            id_episode_context_in          => id_episode_context_in,
            flg_edition_type_in            => flg_edition_type_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            notes_in                       => notes_in,
            id_scales_action_in            => id_scales_action_in,
            id_cancel_reason_in            => id_cancel_reason_in,
            dt_clinical_in                 => dt_clinical_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_complaint_in           => id_epis_complaint_in,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            flg_status_in                  => flg_status_in,
            id_doc_area_in                 => id_doc_area_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            id_doc_template_in             => id_doc_template_in,
            id_epis_documentation_paren_in => id_epis_documentation_paren_in,
            dt_creation_tstz_in            => dt_creation_tstz_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_epis_context_in             => id_epis_context_in,
            id_episode_context_in          => id_episode_context_in,
            flg_edition_type_in            => flg_edition_type_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            notes_in                       => notes_in,
            id_scales_action_in            => id_scales_action_in,
            id_cancel_reason_in            => id_cancel_reason_in,
            dt_clinical_in                 => dt_clinical_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        id_epis_documentation_out      IN OUT epis_documentation.id_epis_documentation%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_documentation.id_epis_documentation%TYPE := next_key;
    BEGIN
        ins(id_epis_documentation_in       => l_pky,
            id_epis_complaint_in           => id_epis_complaint_in,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            flg_status_in                  => flg_status_in,
            id_doc_area_in                 => id_doc_area_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            id_doc_template_in             => id_doc_template_in,
            id_epis_documentation_paren_in => id_epis_documentation_paren_in,
            dt_creation_tstz_in            => dt_creation_tstz_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_epis_context_in             => id_epis_context_in,
            id_episode_context_in          => id_episode_context_in,
            flg_edition_type_in            => flg_edition_type_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            notes_in                       => notes_in,
            id_scales_action_in            => id_scales_action_in,
            id_cancel_reason_in            => id_cancel_reason_in,
            dt_clinical_in                 => dt_clinical_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
        id_epis_documentation_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        id_epis_documentation_out      IN OUT epis_documentation.id_epis_documentation%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_complaint_in           => id_epis_complaint_in,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            flg_status_in                  => flg_status_in,
            id_doc_area_in                 => id_doc_area_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            id_doc_template_in             => id_doc_template_in,
            id_epis_documentation_paren_in => id_epis_documentation_paren_in,
            dt_creation_tstz_in            => dt_creation_tstz_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_epis_context_in             => id_epis_context_in,
            id_episode_context_in          => id_episode_context_in,
            flg_edition_type_in            => flg_edition_type_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            notes_in                       => notes_in,
            id_scales_action_in            => id_scales_action_in,
            id_cancel_reason_in            => id_cancel_reason_in,
            dt_clinical_in                 => dt_clinical_in,
            id_epis_documentation_out      => id_epis_documentation_out,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN epis_documentation.id_epis_documentation%TYPE IS
        l_pky epis_documentation.id_epis_documentation%TYPE := next_key;
    BEGIN
        ins(id_epis_documentation_in       => l_pky,
            id_epis_complaint_in           => id_epis_complaint_in,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            flg_status_in                  => flg_status_in,
            id_doc_area_in                 => id_doc_area_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            id_doc_template_in             => id_doc_template_in,
            id_epis_documentation_paren_in => id_epis_documentation_paren_in,
            dt_creation_tstz_in            => dt_creation_tstz_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_epis_context_in             => id_epis_context_in,
            id_episode_context_in          => id_episode_context_in,
            flg_edition_type_in            => flg_edition_type_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            notes_in                       => notes_in,
            id_scales_action_in            => id_scales_action_in,
            id_cancel_reason_in            => id_cancel_reason_in,
            dt_clinical_in                 => dt_clinical_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN epis_documentation.id_epis_documentation%TYPE IS
        l_pky    epis_documentation.id_epis_documentation%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_epis_documentation_in       => l_pky,
            id_epis_complaint_in           => id_epis_complaint_in,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            flg_status_in                  => flg_status_in,
            id_doc_area_in                 => id_doc_area_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            id_doc_template_in             => id_doc_template_in,
            id_epis_documentation_paren_in => id_epis_documentation_paren_in,
            dt_creation_tstz_in            => dt_creation_tstz_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_epis_context_in             => id_epis_context_in,
            id_episode_context_in          => id_episode_context_in,
            flg_edition_type_in            => flg_edition_type_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            notes_in                       => notes_in,
            id_scales_action_in            => id_scales_action_in,
            id_cancel_reason_in            => id_cancel_reason_in,
            dt_clinical_in                 => dt_clinical_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_epis_documentation_in       IN epis_documentation.id_epis_documentation%TYPE,
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO epis_documentation
            (id_epis_documentation,
             id_epis_complaint,
             id_episode,
             id_professional,
             id_prof_last_update,
             flg_status,
             id_doc_area,
             id_prof_cancel,
             notes_cancel,
             id_doc_template,
             id_epis_documentation_parent,
             dt_creation_tstz,
             dt_last_update_tstz,
             dt_cancel_tstz,
             id_epis_context,
             id_episode_context,
             flg_edition_type,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             notes,
             id_scales_action,
             id_cancel_reason,
             dt_clinical)
        VALUES
            (id_epis_documentation_in,
             id_epis_complaint_in,
             id_episode_in,
             id_professional_in,
             id_prof_last_update_in,
             flg_status_in,
             id_doc_area_in,
             id_prof_cancel_in,
             notes_cancel_in,
             id_doc_template_in,
             id_epis_documentation_paren_in,
             dt_creation_tstz_in,
             dt_last_update_tstz_in,
             dt_cancel_tstz_in,
             id_epis_context_in,
             id_episode_context_in,
             flg_edition_type_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             notes_in,
             id_scales_action_in,
             id_cancel_reason_in,
             dt_clinical_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_epis_documentation_in       IN epis_documentation.id_epis_documentation%TYPE,
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_documentation_in       => id_epis_documentation_in,
            id_epis_complaint_in           => id_epis_complaint_in,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            flg_status_in                  => flg_status_in,
            id_doc_area_in                 => id_doc_area_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            id_doc_template_in             => id_doc_template_in,
            id_epis_documentation_paren_in => id_epis_documentation_paren_in,
            dt_creation_tstz_in            => dt_creation_tstz_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_epis_context_in             => id_epis_context_in,
            id_episode_context_in          => id_episode_context_in,
            flg_edition_type_in            => flg_edition_type_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            notes_in                       => notes_in,
            id_scales_action_in            => id_scales_action_in,
            id_cancel_reason_in            => id_cancel_reason_in,
            dt_clinical_in                 => dt_clinical_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_documentation%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_documentation%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_epis_documentation := next_key(sequence_in);
        END IF;
    
        ins(id_epis_documentation_in       => l_rec.id_epis_documentation,
            id_epis_complaint_in           => l_rec.id_epis_complaint,
            id_episode_in                  => l_rec.id_episode,
            id_professional_in             => l_rec.id_professional,
            id_prof_last_update_in         => l_rec.id_prof_last_update,
            flg_status_in                  => l_rec.flg_status,
            id_doc_area_in                 => l_rec.id_doc_area,
            id_prof_cancel_in              => l_rec.id_prof_cancel,
            notes_cancel_in                => l_rec.notes_cancel,
            id_doc_template_in             => l_rec.id_doc_template,
            id_epis_documentation_paren_in => l_rec.id_epis_documentation_parent,
            dt_creation_tstz_in            => l_rec.dt_creation_tstz,
            dt_last_update_tstz_in         => l_rec.dt_last_update_tstz,
            dt_cancel_tstz_in              => l_rec.dt_cancel_tstz,
            id_epis_context_in             => l_rec.id_epis_context,
            id_episode_context_in          => l_rec.id_episode_context,
            flg_edition_type_in            => l_rec.flg_edition_type,
            create_user_in                 => l_rec.create_user,
            create_time_in                 => l_rec.create_time,
            create_institution_in          => l_rec.create_institution,
            update_user_in                 => l_rec.update_user,
            update_time_in                 => l_rec.update_time,
            update_institution_in          => l_rec.update_institution,
            notes_in                       => l_rec.notes,
            id_scales_action_in            => l_rec.id_scales_action,
            id_cancel_reason_in            => l_rec.id_cancel_reason,
            dt_clinical_in                 => l_rec.dt_clinical,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_documentation%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_documentation_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_documentation
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_documentation_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_documentation_in       IN epis_documentation.id_epis_documentation%TYPE,
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_epis_complaint_nin          IN BOOLEAN := TRUE,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin        IN BOOLEAN := TRUE,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin                IN BOOLEAN := TRUE,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin             IN BOOLEAN := TRUE,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin               IN BOOLEAN := TRUE,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_doc_template_nin            IN BOOLEAN := TRUE,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        id_epis_doc_parent_nin         IN BOOLEAN := TRUE,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin           IN BOOLEAN := TRUE,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin             IN BOOLEAN := TRUE,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_epis_context_nin            IN BOOLEAN := TRUE,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        id_episode_context_nin         IN BOOLEAN := TRUE,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        flg_edition_type_nin           IN BOOLEAN := TRUE,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        notes_nin                      IN BOOLEAN := TRUE,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_scales_action_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin           IN BOOLEAN := TRUE,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        dt_clinical_nin                IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_epis_complaint_n   NUMBER(1) := sys.diutil.bool_to_int(id_epis_complaint_nin);
        l_id_episode_n          NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_id_professional_n     NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_id_prof_last_update_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_flg_status_n          NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_doc_area_n         NUMBER(1) := sys.diutil.bool_to_int(id_doc_area_nin);
        l_id_prof_cancel_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n        NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_doc_template_n     NUMBER(1) := sys.diutil.bool_to_int(id_doc_template_nin);
        l_id_epis_doc_parent_n  NUMBER(1) := sys.diutil.bool_to_int(id_epis_doc_parent_nin);
        l_dt_creation_tstz_n    NUMBER(1) := sys.diutil.bool_to_int(dt_creation_tstz_nin);
        l_dt_last_update_tstz_n NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
        l_dt_cancel_tstz_n      NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_epis_context_n     NUMBER(1) := sys.diutil.bool_to_int(id_epis_context_nin);
        l_id_episode_context_n  NUMBER(1) := sys.diutil.bool_to_int(id_episode_context_nin);
        l_flg_edition_type_n    NUMBER(1) := sys.diutil.bool_to_int(flg_edition_type_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_notes_n               NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_id_scales_action_n    NUMBER(1) := sys.diutil.bool_to_int(id_scales_action_nin);
        l_id_cancel_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_dt_clinical_n         NUMBER(1) := sys.diutil.bool_to_int(dt_clinical_nin);
    BEGIN
    
        UPDATE epis_documentation
           SET id_epis_complaint            = decode(l_id_epis_complaint_n,
                                                     0,
                                                     id_epis_complaint_in,
                                                     nvl(id_epis_complaint_in, id_epis_complaint)),
               id_episode                   = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_professional              = decode(l_id_professional_n,
                                                     0,
                                                     id_professional_in,
                                                     nvl(id_professional_in, id_professional)),
               id_prof_last_update          = decode(l_id_prof_last_update_n,
                                                     0,
                                                     id_prof_last_update_in,
                                                     nvl(id_prof_last_update_in, id_prof_last_update)),
               flg_status                   = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_doc_area                  = decode(l_id_doc_area_n,
                                                     0,
                                                     id_doc_area_in,
                                                     nvl(id_doc_area_in, id_doc_area)),
               id_prof_cancel               = decode(l_id_prof_cancel_n,
                                                     0,
                                                     id_prof_cancel_in,
                                                     nvl(id_prof_cancel_in, id_prof_cancel)),
               notes_cancel                 = decode(l_notes_cancel_n,
                                                     0,
                                                     notes_cancel_in,
                                                     nvl(notes_cancel_in, notes_cancel)),
               id_doc_template              = decode(l_id_doc_template_n,
                                                     0,
                                                     id_doc_template_in,
                                                     nvl(id_doc_template_in, id_doc_template)),
               id_epis_documentation_parent = decode(l_id_epis_doc_parent_n,
                                                     0,
                                                     id_epis_documentation_paren_in,
                                                     nvl(id_epis_documentation_paren_in, id_epis_documentation_parent)),
               dt_creation_tstz             = decode(l_dt_creation_tstz_n,
                                                     0,
                                                     dt_creation_tstz_in,
                                                     nvl(dt_creation_tstz_in, dt_creation_tstz)),
               dt_last_update_tstz          = decode(l_dt_last_update_tstz_n,
                                                     0,
                                                     dt_last_update_tstz_in,
                                                     nvl(dt_last_update_tstz_in, dt_last_update_tstz)),
               dt_cancel_tstz               = decode(l_dt_cancel_tstz_n,
                                                     0,
                                                     dt_cancel_tstz_in,
                                                     nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               id_epis_context              = decode(l_id_epis_context_n,
                                                     0,
                                                     id_epis_context_in,
                                                     nvl(id_epis_context_in, id_epis_context)),
               id_episode_context           = decode(l_id_episode_context_n,
                                                     0,
                                                     id_episode_context_in,
                                                     nvl(id_episode_context_in, id_episode_context)),
               flg_edition_type             = decode(l_flg_edition_type_n,
                                                     0,
                                                     flg_edition_type_in,
                                                     nvl(flg_edition_type_in, flg_edition_type)),
               create_user                  = decode(l_create_user_n,
                                                     0,
                                                     create_user_in,
                                                     nvl(create_user_in, create_user)),
               create_time                  = decode(l_create_time_n,
                                                     0,
                                                     create_time_in,
                                                     nvl(create_time_in, create_time)),
               create_institution           = decode(l_create_institution_n,
                                                     0,
                                                     create_institution_in,
                                                     nvl(create_institution_in, create_institution)),
               update_user                  = decode(l_update_user_n,
                                                     0,
                                                     update_user_in,
                                                     nvl(update_user_in, update_user)),
               update_time                  = decode(l_update_time_n,
                                                     0,
                                                     update_time_in,
                                                     nvl(update_time_in, update_time)),
               update_institution           = decode(l_update_institution_n,
                                                     0,
                                                     update_institution_in,
                                                     nvl(update_institution_in, update_institution)),
               notes                        = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_scales_action             = decode(l_id_scales_action_n,
                                                     0,
                                                     id_scales_action_in,
                                                     nvl(id_scales_action_in, id_scales_action)),
               id_cancel_reason             = decode(l_id_cancel_reason_n,
                                                     0,
                                                     id_cancel_reason_in,
                                                     nvl(id_cancel_reason_in, id_cancel_reason)),
               dt_clinical                  = decode(l_dt_clinical_n,
                                                     0,
                                                     dt_clinical_in,
                                                     nvl(dt_clinical_in, dt_clinical))
         WHERE id_epis_documentation = id_epis_documentation_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_documentation_in       IN epis_documentation.id_epis_documentation%TYPE,
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_epis_complaint_nin          IN BOOLEAN := TRUE,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin        IN BOOLEAN := TRUE,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin                IN BOOLEAN := TRUE,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin             IN BOOLEAN := TRUE,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin               IN BOOLEAN := TRUE,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_doc_template_nin            IN BOOLEAN := TRUE,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        id_epis_doc_parent_nin         IN BOOLEAN := TRUE,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin           IN BOOLEAN := TRUE,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin             IN BOOLEAN := TRUE,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_epis_context_nin            IN BOOLEAN := TRUE,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        id_episode_context_nin         IN BOOLEAN := TRUE,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        flg_edition_type_nin           IN BOOLEAN := TRUE,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        notes_nin                      IN BOOLEAN := TRUE,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_scales_action_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin           IN BOOLEAN := TRUE,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        dt_clinical_nin                IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_documentation_in       => id_epis_documentation_in,
            id_epis_complaint_in           => id_epis_complaint_in,
            id_epis_complaint_nin          => id_epis_complaint_nin,
            id_episode_in                  => id_episode_in,
            id_episode_nin                 => id_episode_nin,
            id_professional_in             => id_professional_in,
            id_professional_nin            => id_professional_nin,
            id_prof_last_update_in         => id_prof_last_update_in,
            id_prof_last_update_nin        => id_prof_last_update_nin,
            flg_status_in                  => flg_status_in,
            flg_status_nin                 => flg_status_nin,
            id_doc_area_in                 => id_doc_area_in,
            id_doc_area_nin                => id_doc_area_nin,
            id_prof_cancel_in              => id_prof_cancel_in,
            id_prof_cancel_nin             => id_prof_cancel_nin,
            notes_cancel_in                => notes_cancel_in,
            notes_cancel_nin               => notes_cancel_nin,
            id_doc_template_in             => id_doc_template_in,
            id_doc_template_nin            => id_doc_template_nin,
            id_epis_documentation_paren_in => id_epis_documentation_paren_in,
            id_epis_doc_parent_nin         => id_epis_doc_parent_nin,
            dt_creation_tstz_in            => dt_creation_tstz_in,
            dt_creation_tstz_nin           => dt_creation_tstz_nin,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            dt_last_update_tstz_nin        => dt_last_update_tstz_nin,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            dt_cancel_tstz_nin             => dt_cancel_tstz_nin,
            id_epis_context_in             => id_epis_context_in,
            id_epis_context_nin            => id_epis_context_nin,
            id_episode_context_in          => id_episode_context_in,
            id_episode_context_nin         => id_episode_context_nin,
            flg_edition_type_in            => flg_edition_type_in,
            flg_edition_type_nin           => flg_edition_type_nin,
            create_user_in                 => create_user_in,
            create_user_nin                => create_user_nin,
            create_time_in                 => create_time_in,
            create_time_nin                => create_time_nin,
            create_institution_in          => create_institution_in,
            create_institution_nin         => create_institution_nin,
            update_user_in                 => update_user_in,
            update_user_nin                => update_user_nin,
            update_time_in                 => update_time_in,
            update_time_nin                => update_time_nin,
            update_institution_in          => update_institution_in,
            update_institution_nin         => update_institution_nin,
            notes_in                       => notes_in,
            notes_nin                      => notes_nin,
            id_scales_action_in            => id_scales_action_in,
            id_scales_action_nin           => id_scales_action_nin,
            id_cancel_reason_in            => id_cancel_reason_in,
            id_cancel_reason_nin           => id_cancel_reason_nin,
            dt_clinical_in                 => dt_clinical_in,
            dt_clinical_nin                => dt_clinical_nin,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_epis_complaint_nin          IN BOOLEAN := TRUE,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin        IN BOOLEAN := TRUE,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin                IN BOOLEAN := TRUE,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin             IN BOOLEAN := TRUE,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin               IN BOOLEAN := TRUE,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_doc_template_nin            IN BOOLEAN := TRUE,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        id_epis_doc_parent_nin         IN BOOLEAN := TRUE,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin           IN BOOLEAN := TRUE,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin             IN BOOLEAN := TRUE,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_epis_context_nin            IN BOOLEAN := TRUE,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        id_episode_context_nin         IN BOOLEAN := TRUE,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        flg_edition_type_nin           IN BOOLEAN := TRUE,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        notes_nin                      IN BOOLEAN := TRUE,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_scales_action_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin           IN BOOLEAN := TRUE,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        dt_clinical_nin                IN BOOLEAN := TRUE,
        where_in                       IN VARCHAR2,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_epis_complaint_n   NUMBER(1) := sys.diutil.bool_to_int(id_epis_complaint_nin);
        l_id_episode_n          NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_id_professional_n     NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_id_prof_last_update_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_flg_status_n          NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_doc_area_n         NUMBER(1) := sys.diutil.bool_to_int(id_doc_area_nin);
        l_id_prof_cancel_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n        NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_doc_template_n     NUMBER(1) := sys.diutil.bool_to_int(id_doc_template_nin);
        l_id_epis_doc_parent_n  NUMBER(1) := sys.diutil.bool_to_int(id_epis_doc_parent_nin);
        l_dt_creation_tstz_n    NUMBER(1) := sys.diutil.bool_to_int(dt_creation_tstz_nin);
        l_dt_last_update_tstz_n NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
        l_dt_cancel_tstz_n      NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_epis_context_n     NUMBER(1) := sys.diutil.bool_to_int(id_epis_context_nin);
        l_id_episode_context_n  NUMBER(1) := sys.diutil.bool_to_int(id_episode_context_nin);
        l_flg_edition_type_n    NUMBER(1) := sys.diutil.bool_to_int(flg_edition_type_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_notes_n               NUMBER(1) := sys.diutil.bool_to_int(notes_nin);
        l_id_scales_action_n    NUMBER(1) := sys.diutil.bool_to_int(id_scales_action_nin);
        l_id_cancel_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_dt_clinical_n         NUMBER(1) := sys.diutil.bool_to_int(dt_clinical_nin);
    BEGIN
        l_id_epis_complaint_n   := sys.diutil.bool_to_int(id_epis_complaint_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_id_professional_n     := sys.diutil.bool_to_int(id_professional_nin);
        l_id_prof_last_update_n := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_id_doc_area_n         := sys.diutil.bool_to_int(id_doc_area_nin);
        l_id_prof_cancel_n      := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n        := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_doc_template_n     := sys.diutil.bool_to_int(id_doc_template_nin);
        l_id_epis_doc_parent_n  := sys.diutil.bool_to_int(id_epis_doc_parent_nin);
        l_dt_creation_tstz_n    := sys.diutil.bool_to_int(dt_creation_tstz_nin);
        l_dt_last_update_tstz_n := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
        l_dt_cancel_tstz_n      := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_epis_context_n     := sys.diutil.bool_to_int(id_epis_context_nin);
        l_id_episode_context_n  := sys.diutil.bool_to_int(id_episode_context_nin);
        l_flg_edition_type_n    := sys.diutil.bool_to_int(flg_edition_type_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_id_scales_action_n    := sys.diutil.bool_to_int(id_scales_action_nin);
        l_id_cancel_reason_n    := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_dt_clinical_n         := sys.diutil.bool_to_int(dt_clinical_nin);
        l_sql                   := 'UPDATE epis_documentation SET' || ' ID_EPIS_COMPLAINT = decode (' ||
                                   l_id_epis_complaint_n ||
                                   ',0,:ID_EPIS_COMPLAINT_in, NVL (:ID_EPIS_COMPLAINT_in, ID_EPIS_COMPLAINT)) ' || ',' ||
                                   ' ID_EPISODE = decode (' || l_id_episode_n ||
                                   ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ',' ||
                                   ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                                   ',0,:ID_PROFESSIONAL_in, NVL (:ID_PROFESSIONAL_in, ID_PROFESSIONAL)) ' || ',' ||
                                   ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                                   ',0,:ID_PROF_LAST_UPDATE_in, NVL (:ID_PROF_LAST_UPDATE_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                                   ' FLG_STATUS = decode (' || l_flg_status_n ||
                                   ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                   ' ID_DOC_AREA = decode (' || l_id_doc_area_n ||
                                   ',0,:ID_DOC_AREA_in, NVL (:ID_DOC_AREA_in, ID_DOC_AREA)) ' || ',' ||
                                   ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                                   ',0,:ID_PROF_CANCEL_in, NVL (:ID_PROF_CANCEL_in, ID_PROF_CANCEL)) ' || ',' ||
                                   ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                                   ',0,:NOTES_CANCEL_in, NVL (:NOTES_CANCEL_in, NOTES_CANCEL)) ' || ',' ||
                                   ' ID_DOC_TEMPLATE = decode (' || l_id_doc_template_n ||
                                   ',0,:ID_DOC_TEMPLATE_in, NVL (:ID_DOC_TEMPLATE_in, ID_DOC_TEMPLATE)) ' || ',' ||
                                   ' ID_EPIS_DOCUMENTATION_PARENT = decode (' || l_id_epis_doc_parent_n ||
                                   ',0,:ID_EPIS_DOCUMENTATION_PARENT_in, NVL (:ID_EPIS_DOCUMENTATION_PARENT_in, ID_EPIS_DOCUMENTATION_PARENT)) ' || ',' ||
                                   ' DT_CREATION_TSTZ = decode (' || l_dt_creation_tstz_n ||
                                   ',0,:DT_CREATION_TSTZ_in, NVL (:DT_CREATION_TSTZ_in, DT_CREATION_TSTZ)) ' || ',' ||
                                   ' DT_LAST_UPDATE_TSTZ = decode (' || l_dt_last_update_tstz_n ||
                                   ',0,:DT_LAST_UPDATE_TSTZ_in, NVL (:DT_LAST_UPDATE_TSTZ_in, DT_LAST_UPDATE_TSTZ)) ' || ',' ||
                                   ' DT_CANCEL_TSTZ = decode (' || l_dt_cancel_tstz_n ||
                                   ',0,:DT_CANCEL_TSTZ_in, NVL (:DT_CANCEL_TSTZ_in, DT_CANCEL_TSTZ)) ' || ',' ||
                                   ' ID_EPIS_CONTEXT = decode (' || l_id_epis_context_n ||
                                   ',0,:ID_EPIS_CONTEXT_in, NVL (:ID_EPIS_CONTEXT_in, ID_EPIS_CONTEXT)) ' || ',' ||
                                   ' ID_EPISODE_CONTEXT = decode (' || l_id_episode_context_n ||
                                   ',0,:ID_EPISODE_CONTEXT_in, NVL (:ID_EPISODE_CONTEXT_in, ID_EPISODE_CONTEXT)) ' || ',' ||
                                   ' FLG_EDITION_TYPE = decode (' || l_flg_edition_type_n ||
                                   ',0,:FLG_EDITION_TYPE_in, NVL (:FLG_EDITION_TYPE_in, FLG_EDITION_TYPE)) ' || ',' ||
                                   ' CREATE_USER = decode (' || l_create_user_n ||
                                   ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                   ' CREATE_TIME = decode (' || l_create_time_n ||
                                   ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                   ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                   ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                   ' UPDATE_USER = decode (' || l_update_user_n ||
                                   ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                   ' UPDATE_TIME = decode (' || l_update_time_n ||
                                   ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                   ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                   ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                   ' NOTES = decode (' || l_notes_n || ',0,:NOTES_in, NVL (:NOTES_in, NOTES)) ' || ',' ||
                                   ' ID_SCALES_ACTION = decode (' || l_id_scales_action_n ||
                                   ',0,:ID_SCALES_ACTION_in, NVL (:ID_SCALES_ACTION_in, ID_SCALES_ACTION)) ' || ',' ||
                                   ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                                   ',0,:ID_CANCEL_REASON_in, NVL (:ID_CANCEL_REASON_in, ID_CANCEL_REASON)) ' || ',' ||
                                   ' DT_CLINICAL = decode (' || l_dt_clinical_n ||
                                   ',0,:DT_CLINICAL_in, NVL (:DT_CLINICAL_in, DT_CLINICAL)) ' || ' where ' ||
                                   nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_epis_complaint_in, id_episode_in, id_professional_in, id_prof_last_update_in, flg_status_in, id_doc_area_in, id_prof_cancel_in, notes_cancel_in, id_doc_template_in, id_epis_documentation_paren_in, dt_creation_tstz_in, dt_last_update_tstz_in, dt_cancel_tstz_in, id_epis_context_in, id_episode_context_in, flg_edition_type_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, notes_in, id_scales_action_in, id_cancel_reason_in, dt_clinical_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_epis_complaint_nin          IN BOOLEAN := TRUE,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin        IN BOOLEAN := TRUE,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin                IN BOOLEAN := TRUE,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin             IN BOOLEAN := TRUE,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin               IN BOOLEAN := TRUE,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_doc_template_nin            IN BOOLEAN := TRUE,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        id_epis_doc_parent_nin         IN BOOLEAN := TRUE,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin           IN BOOLEAN := TRUE,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin             IN BOOLEAN := TRUE,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_epis_context_nin            IN BOOLEAN := TRUE,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        id_episode_context_nin         IN BOOLEAN := TRUE,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        flg_edition_type_nin           IN BOOLEAN := TRUE,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        notes_nin                      IN BOOLEAN := TRUE,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_scales_action_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin           IN BOOLEAN := TRUE,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        dt_clinical_nin                IN BOOLEAN := TRUE,
        where_in                       IN VARCHAR2,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_complaint_in           => id_epis_complaint_in,
            id_epis_complaint_nin          => id_epis_complaint_nin,
            id_episode_in                  => id_episode_in,
            id_episode_nin                 => id_episode_nin,
            id_professional_in             => id_professional_in,
            id_professional_nin            => id_professional_nin,
            id_prof_last_update_in         => id_prof_last_update_in,
            id_prof_last_update_nin        => id_prof_last_update_nin,
            flg_status_in                  => flg_status_in,
            flg_status_nin                 => flg_status_nin,
            id_doc_area_in                 => id_doc_area_in,
            id_doc_area_nin                => id_doc_area_nin,
            id_prof_cancel_in              => id_prof_cancel_in,
            id_prof_cancel_nin             => id_prof_cancel_nin,
            notes_cancel_in                => notes_cancel_in,
            notes_cancel_nin               => notes_cancel_nin,
            id_doc_template_in             => id_doc_template_in,
            id_doc_template_nin            => id_doc_template_nin,
            id_epis_documentation_paren_in => id_epis_documentation_paren_in,
            id_epis_doc_parent_nin         => id_epis_doc_parent_nin,
            dt_creation_tstz_in            => dt_creation_tstz_in,
            dt_creation_tstz_nin           => dt_creation_tstz_nin,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            dt_last_update_tstz_nin        => dt_last_update_tstz_nin,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            dt_cancel_tstz_nin             => dt_cancel_tstz_nin,
            id_epis_context_in             => id_epis_context_in,
            id_epis_context_nin            => id_epis_context_nin,
            id_episode_context_in          => id_episode_context_in,
            id_episode_context_nin         => id_episode_context_nin,
            flg_edition_type_in            => flg_edition_type_in,
            flg_edition_type_nin           => flg_edition_type_nin,
            create_user_in                 => create_user_in,
            create_user_nin                => create_user_nin,
            create_time_in                 => create_time_in,
            create_time_nin                => create_time_nin,
            create_institution_in          => create_institution_in,
            create_institution_nin         => create_institution_nin,
            update_user_in                 => update_user_in,
            update_user_nin                => update_user_nin,
            update_time_in                 => update_time_in,
            update_time_nin                => update_time_nin,
            update_institution_in          => update_institution_in,
            update_institution_nin         => update_institution_nin,
            notes_in                       => notes_in,
            notes_nin                      => notes_nin,
            id_scales_action_in            => id_scales_action_in,
            id_scales_action_nin           => id_scales_action_nin,
            id_cancel_reason_in            => id_cancel_reason_in,
            id_cancel_reason_nin           => id_cancel_reason_nin,
            dt_clinical_in                 => dt_clinical_in,
            dt_clinical_nin                => dt_clinical_nin,
            where_in                       => where_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_epis_documentation_in       IN epis_documentation.id_epis_documentation%TYPE,
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_documentation_in       => id_epis_documentation_in,
            id_epis_complaint_in           => id_epis_complaint_in,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            flg_status_in                  => flg_status_in,
            id_doc_area_in                 => id_doc_area_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            id_doc_template_in             => id_doc_template_in,
            id_epis_documentation_paren_in => id_epis_documentation_paren_in,
            dt_creation_tstz_in            => dt_creation_tstz_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_epis_context_in             => id_epis_context_in,
            id_episode_context_in          => id_episode_context_in,
            flg_edition_type_in            => flg_edition_type_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            notes_in                       => notes_in,
            id_scales_action_in            => id_scales_action_in,
            id_cancel_reason_in            => id_cancel_reason_in,
            dt_clinical_in                 => dt_clinical_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_documentation_in       => id_epis_documentation_in,
                id_epis_complaint_in           => id_epis_complaint_in,
                id_episode_in                  => id_episode_in,
                id_professional_in             => id_professional_in,
                id_prof_last_update_in         => id_prof_last_update_in,
                flg_status_in                  => flg_status_in,
                id_doc_area_in                 => id_doc_area_in,
                id_prof_cancel_in              => id_prof_cancel_in,
                notes_cancel_in                => notes_cancel_in,
                id_doc_template_in             => id_doc_template_in,
                id_epis_documentation_paren_in => id_epis_documentation_paren_in,
                dt_creation_tstz_in            => dt_creation_tstz_in,
                dt_last_update_tstz_in         => dt_last_update_tstz_in,
                dt_cancel_tstz_in              => dt_cancel_tstz_in,
                id_epis_context_in             => id_epis_context_in,
                id_episode_context_in          => id_episode_context_in,
                flg_edition_type_in            => flg_edition_type_in,
                create_user_in                 => create_user_in,
                create_time_in                 => create_time_in,
                create_institution_in          => create_institution_in,
                update_user_in                 => update_user_in,
                update_time_in                 => update_time_in,
                update_institution_in          => update_institution_in,
                notes_in                       => notes_in,
                id_scales_action_in            => id_scales_action_in,
                id_cancel_reason_in            => id_cancel_reason_in,
                dt_clinical_in                 => dt_clinical_in,
                handle_error_in                => handle_error_in,
                rows_out                       => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_epis_documentation_in       IN epis_documentation.id_epis_documentation%TYPE,
        id_epis_complaint_in           IN epis_documentation.id_epis_complaint%TYPE DEFAULT NULL,
        id_episode_in                  IN epis_documentation.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN epis_documentation.id_professional%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN epis_documentation.id_prof_last_update%TYPE DEFAULT NULL,
        flg_status_in                  IN epis_documentation.flg_status%TYPE DEFAULT NULL,
        id_doc_area_in                 IN epis_documentation.id_doc_area%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN epis_documentation.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN epis_documentation.notes_cancel%TYPE DEFAULT NULL,
        id_doc_template_in             IN epis_documentation.id_doc_template%TYPE DEFAULT NULL,
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE DEFAULT NULL,
        dt_creation_tstz_in            IN epis_documentation.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN epis_documentation.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN epis_documentation.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_epis_context_in             IN epis_documentation.id_epis_context%TYPE DEFAULT NULL,
        id_episode_context_in          IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        flg_edition_type_in            IN epis_documentation.flg_edition_type%TYPE DEFAULT NULL,
        create_user_in                 IN epis_documentation.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN epis_documentation.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN epis_documentation.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN epis_documentation.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN epis_documentation.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN epis_documentation.update_institution%TYPE DEFAULT NULL,
        notes_in                       IN epis_documentation.notes%TYPE DEFAULT NULL,
        id_scales_action_in            IN epis_documentation.id_scales_action%TYPE DEFAULT NULL,
        id_cancel_reason_in            IN epis_documentation.id_cancel_reason%TYPE DEFAULT NULL,
        dt_clinical_in                 IN epis_documentation.dt_clinical%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_documentation_in,
                id_epis_complaint_in,
                id_episode_in,
                id_professional_in,
                id_prof_last_update_in,
                flg_status_in,
                id_doc_area_in,
                id_prof_cancel_in,
                notes_cancel_in,
                id_doc_template_in,
                id_epis_documentation_paren_in,
                dt_creation_tstz_in,
                dt_last_update_tstz_in,
                dt_cancel_tstz_in,
                id_epis_context_in,
                id_episode_context_in,
                flg_edition_type_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                notes_in,
                id_scales_action_in,
                id_cancel_reason_in,
                dt_clinical_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_documentation%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_documentation_in       => rec_in.id_epis_documentation,
            id_epis_complaint_in           => rec_in.id_epis_complaint,
            id_episode_in                  => rec_in.id_episode,
            id_professional_in             => rec_in.id_professional,
            id_prof_last_update_in         => rec_in.id_prof_last_update,
            flg_status_in                  => rec_in.flg_status,
            id_doc_area_in                 => rec_in.id_doc_area,
            id_prof_cancel_in              => rec_in.id_prof_cancel,
            notes_cancel_in                => rec_in.notes_cancel,
            id_doc_template_in             => rec_in.id_doc_template,
            id_epis_documentation_paren_in => rec_in.id_epis_documentation_parent,
            dt_creation_tstz_in            => rec_in.dt_creation_tstz,
            dt_last_update_tstz_in         => rec_in.dt_last_update_tstz,
            dt_cancel_tstz_in              => rec_in.dt_cancel_tstz,
            id_epis_context_in             => rec_in.id_epis_context,
            id_episode_context_in          => rec_in.id_episode_context,
            flg_edition_type_in            => rec_in.flg_edition_type,
            create_user_in                 => rec_in.create_user,
            create_time_in                 => rec_in.create_time,
            create_institution_in          => rec_in.create_institution,
            update_user_in                 => rec_in.update_user,
            update_time_in                 => rec_in.update_time,
            update_institution_in          => rec_in.update_institution,
            notes_in                       => rec_in.notes,
            id_scales_action_in            => rec_in.id_scales_action,
            id_cancel_reason_in            => rec_in.id_cancel_reason,
            dt_clinical_in                 => rec_in.dt_clinical,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_documentation%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_documentation_in       => rec_in.id_epis_documentation,
            id_epis_complaint_in           => rec_in.id_epis_complaint,
            id_episode_in                  => rec_in.id_episode,
            id_professional_in             => rec_in.id_professional,
            id_prof_last_update_in         => rec_in.id_prof_last_update,
            flg_status_in                  => rec_in.flg_status,
            id_doc_area_in                 => rec_in.id_doc_area,
            id_prof_cancel_in              => rec_in.id_prof_cancel,
            notes_cancel_in                => rec_in.notes_cancel,
            id_doc_template_in             => rec_in.id_doc_template,
            id_epis_documentation_paren_in => rec_in.id_epis_documentation_parent,
            dt_creation_tstz_in            => rec_in.dt_creation_tstz,
            dt_last_update_tstz_in         => rec_in.dt_last_update_tstz,
            dt_cancel_tstz_in              => rec_in.dt_cancel_tstz,
            id_epis_context_in             => rec_in.id_epis_context,
            id_episode_context_in          => rec_in.id_episode_context,
            flg_edition_type_in            => rec_in.flg_edition_type,
            create_user_in                 => rec_in.create_user,
            create_time_in                 => rec_in.create_time,
            create_institution_in          => rec_in.create_institution,
            update_user_in                 => rec_in.update_user,
            update_time_in                 => rec_in.update_time,
            update_institution_in          => rec_in.update_institution,
            notes_in                       => rec_in.notes,
            id_scales_action_in            => rec_in.id_scales_action,
            id_cancel_reason_in            => rec_in.id_cancel_reason,
            dt_clinical_in                 => rec_in.dt_clinical,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_documentation_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_documentation id_epis_documentation_cc;
        l_id_epis_complaint     id_epis_complaint_cc;
        l_id_episode            id_episode_cc;
        l_id_professional       id_professional_cc;
        l_id_prof_last_update   id_prof_last_update_cc;
        l_flg_status            flg_status_cc;
        l_id_doc_area           id_doc_area_cc;
        l_id_prof_cancel        id_prof_cancel_cc;
        l_notes_cancel          notes_cancel_cc;
        l_id_doc_template       id_doc_template_cc;
        l_id_epis_doc_parent    id_epis_doc_parent_cc;
        l_dt_creation_tstz      dt_creation_tstz_cc;
        l_dt_last_update_tstz   dt_last_update_tstz_cc;
        l_dt_cancel_tstz        dt_cancel_tstz_cc;
        l_id_epis_context       id_epis_context_cc;
        l_id_episode_context    id_episode_context_cc;
        l_flg_edition_type      flg_edition_type_cc;
        l_create_user           create_user_cc;
        l_create_time           create_time_cc;
        l_create_institution    create_institution_cc;
        l_update_user           update_user_cc;
        l_update_time           update_time_cc;
        l_update_institution    update_institution_cc;
        l_notes                 notes_cc;
        l_id_scales_action      id_scales_action_cc;
        l_id_cancel_reason      id_cancel_reason_cc;
        l_dt_clinical           dt_clinical_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_documentation(i) := col_in(i).id_epis_documentation;
            l_id_epis_complaint(i) := col_in(i).id_epis_complaint;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_professional(i) := col_in(i).id_professional;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_doc_area(i) := col_in(i).id_doc_area;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_doc_template(i) := col_in(i).id_doc_template;
            l_id_epis_doc_parent(i) := col_in(i).id_epis_documentation_parent;
            l_dt_creation_tstz(i) := col_in(i).dt_creation_tstz;
            l_dt_last_update_tstz(i) := col_in(i).dt_last_update_tstz;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_id_epis_context(i) := col_in(i).id_epis_context;
            l_id_episode_context(i) := col_in(i).id_episode_context;
            l_flg_edition_type(i) := col_in(i).flg_edition_type;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_notes(i) := col_in(i).notes;
            l_id_scales_action(i) := col_in(i).id_scales_action;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_dt_clinical(i) := col_in(i).dt_clinical;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_documentation
                   SET id_epis_complaint            = nvl(l_id_epis_complaint(i), id_epis_complaint),
                       id_episode                   = nvl(l_id_episode(i), id_episode),
                       id_professional              = nvl(l_id_professional(i), id_professional),
                       id_prof_last_update          = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       flg_status                   = nvl(l_flg_status(i), flg_status),
                       id_doc_area                  = nvl(l_id_doc_area(i), id_doc_area),
                       id_prof_cancel               = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       notes_cancel                 = nvl(l_notes_cancel(i), notes_cancel),
                       id_doc_template              = nvl(l_id_doc_template(i), id_doc_template),
                       id_epis_documentation_parent = nvl(l_id_epis_doc_parent(i), id_epis_documentation_parent),
                       dt_creation_tstz             = nvl(l_dt_creation_tstz(i), dt_creation_tstz),
                       dt_last_update_tstz          = nvl(l_dt_last_update_tstz(i), dt_last_update_tstz),
                       dt_cancel_tstz               = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       id_epis_context              = nvl(l_id_epis_context(i), id_epis_context),
                       id_episode_context           = nvl(l_id_episode_context(i), id_episode_context),
                       flg_edition_type             = nvl(l_flg_edition_type(i), flg_edition_type),
                       create_user                  = nvl(l_create_user(i), create_user),
                       create_time                  = nvl(l_create_time(i), create_time),
                       create_institution           = nvl(l_create_institution(i), create_institution),
                       update_user                  = nvl(l_update_user(i), update_user),
                       update_time                  = nvl(l_update_time(i), update_time),
                       update_institution           = nvl(l_update_institution(i), update_institution),
                       notes                        = nvl(l_notes(i), notes),
                       id_scales_action             = nvl(l_id_scales_action(i), id_scales_action),
                       id_cancel_reason             = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       dt_clinical                  = nvl(l_dt_clinical(i), dt_clinical)
                 WHERE id_epis_documentation = l_id_epis_documentation(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_documentation
                   SET id_epis_complaint            = l_id_epis_complaint(i),
                       id_episode                   = l_id_episode(i),
                       id_professional              = l_id_professional(i),
                       id_prof_last_update          = l_id_prof_last_update(i),
                       flg_status                   = l_flg_status(i),
                       id_doc_area                  = l_id_doc_area(i),
                       id_prof_cancel               = l_id_prof_cancel(i),
                       notes_cancel                 = l_notes_cancel(i),
                       id_doc_template              = l_id_doc_template(i),
                       id_epis_documentation_parent = l_id_epis_doc_parent(i),
                       dt_creation_tstz             = l_dt_creation_tstz(i),
                       dt_last_update_tstz          = l_dt_last_update_tstz(i),
                       dt_cancel_tstz               = l_dt_cancel_tstz(i),
                       id_epis_context              = l_id_epis_context(i),
                       id_episode_context           = l_id_episode_context(i),
                       flg_edition_type             = l_flg_edition_type(i),
                       create_user                  = l_create_user(i),
                       create_time                  = l_create_time(i),
                       create_institution           = l_create_institution(i),
                       update_user                  = l_update_user(i),
                       update_time                  = l_update_time(i),
                       update_institution           = l_update_institution(i),
                       notes                        = l_notes(i),
                       id_scales_action             = l_id_scales_action(i),
                       id_cancel_reason             = l_id_cancel_reason(i),
                       dt_clinical                  = l_dt_clinical(i)
                 WHERE id_epis_documentation = l_id_epis_documentation(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_documentation_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE epis_documentation
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE epis_documentation
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE epis_documentation
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_documentation_in IN epis_documentation.id_epis_documentation%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_documentation
         WHERE id_epis_documentation = id_epis_documentation_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_documentation_in IN epis_documentation.id_epis_documentation%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_epis_documentation_in => id_epis_documentation_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END del;

    -- Delete all rows for this EPISD_CRE_FK foreign key value
    PROCEDURE del_episd_cre_fk
    (
        id_cancel_reason_in IN epis_documentation.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_documentation
         WHERE id_cancel_reason = id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_episd_cre_fk;

    -- Delete all rows for this EPISD_DOC_AREA_FK foreign key value
    PROCEDURE del_episd_doc_area_fk
    (
        id_doc_area_in  IN epis_documentation.id_doc_area%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_documentation
         WHERE id_doc_area = id_doc_area_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_episd_doc_area_fk;

    -- Delete all rows for this EPISD_DOC_TEMPLATE_FK foreign key value
    PROCEDURE del_episd_doc_template_fk
    (
        id_doc_template_in IN epis_documentation.id_doc_template%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_documentation
         WHERE id_doc_template = id_doc_template_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_episd_doc_template_fk;

    -- Delete all rows for this EPISD_ECOMP_FK foreign key value
    PROCEDURE del_episd_ecomp_fk
    (
        id_epis_complaint_in IN epis_documentation.id_epis_complaint%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_documentation
         WHERE id_epis_complaint = id_epis_complaint_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_episd_ecomp_fk;

    -- Delete all rows for this EPISD_EPISD_PARENT_FK foreign key value
    PROCEDURE del_episd_episd_parent_fk
    (
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_documentation
         WHERE id_epis_documentation_parent = id_epis_documentation_paren_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_episd_episd_parent_fk;

    -- Delete all rows for this EPISD_EPIS_CONTEXT_FK foreign key value
    PROCEDURE del_episd_epis_context_fk
    (
        id_episode_context_in IN epis_documentation.id_episode_context%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_documentation
         WHERE id_episode_context = id_episode_context_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_episd_epis_context_fk;

    -- Delete all rows for this EPISD_EPIS_FK foreign key value
    PROCEDURE del_episd_epis_fk
    (
        id_episode_in   IN epis_documentation.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_documentation
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_episd_epis_fk;

    -- Delete all rows for this EPISD_PROF_FK foreign key value
    PROCEDURE del_episd_prof_fk
    (
        id_professional_in IN epis_documentation.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_documentation
         WHERE id_professional = id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_episd_prof_fk;

    -- Delete all rows for this EPISD_PROF_FK2 foreign key value
    PROCEDURE del_episd_prof_fk2
    (
        id_prof_last_update_in IN epis_documentation.id_prof_last_update%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_documentation
         WHERE id_prof_last_update = id_prof_last_update_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_episd_prof_fk2;

    -- Delete all rows for this EPISD_PROF_FK3 foreign key value
    PROCEDURE del_episd_prof_fk3
    (
        id_prof_cancel_in IN epis_documentation.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_documentation
         WHERE id_prof_cancel = id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_episd_prof_fk3;

    -- Delete all rows for this EPISD_SCA_FK foreign key value
    PROCEDURE del_episd_sca_fk
    (
        id_scales_action_in IN epis_documentation.id_scales_action%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_documentation
         WHERE id_scales_action = id_scales_action_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_episd_sca_fk;

    -- Delete all rows for this EPISD_CRE_FK foreign key value
    PROCEDURE del_episd_cre_fk
    (
        id_cancel_reason_in IN epis_documentation.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_episd_cre_fk(id_cancel_reason_in => id_cancel_reason_in,
                         handle_error_in     => handle_error_in,
                         rows_out            => rows_out);
    END del_episd_cre_fk;

    -- Delete all rows for this EPISD_DOC_AREA_FK foreign key value
    PROCEDURE del_episd_doc_area_fk
    (
        id_doc_area_in  IN epis_documentation.id_doc_area%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_episd_doc_area_fk(id_doc_area_in  => id_doc_area_in,
                              handle_error_in => handle_error_in,
                              rows_out        => rows_out);
    END del_episd_doc_area_fk;

    -- Delete all rows for this EPISD_DOC_TEMPLATE_FK foreign key value
    PROCEDURE del_episd_doc_template_fk
    (
        id_doc_template_in IN epis_documentation.id_doc_template%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_episd_doc_template_fk(id_doc_template_in => id_doc_template_in,
                                  handle_error_in    => handle_error_in,
                                  rows_out           => rows_out);
    END del_episd_doc_template_fk;

    -- Delete all rows for this EPISD_ECOMP_FK foreign key value
    PROCEDURE del_episd_ecomp_fk
    (
        id_epis_complaint_in IN epis_documentation.id_epis_complaint%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_episd_ecomp_fk(id_epis_complaint_in => id_epis_complaint_in,
                           handle_error_in      => handle_error_in,
                           rows_out             => rows_out);
    END del_episd_ecomp_fk;

    -- Delete all rows for this EPISD_EPISD_PARENT_FK foreign key value
    PROCEDURE del_episd_episd_parent_fk
    (
        id_epis_documentation_paren_in IN epis_documentation.id_epis_documentation_parent%TYPE,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_episd_episd_parent_fk(id_epis_documentation_paren_in => id_epis_documentation_paren_in,
                                  handle_error_in                => handle_error_in,
                                  rows_out                       => rows_out);
    END del_episd_episd_parent_fk;

    -- Delete all rows for this EPISD_EPIS_CONTEXT_FK foreign key value
    PROCEDURE del_episd_epis_context_fk
    (
        id_episode_context_in IN epis_documentation.id_episode_context%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_episd_epis_context_fk(id_episode_context_in => id_episode_context_in,
                                  handle_error_in       => handle_error_in,
                                  rows_out              => rows_out);
    END del_episd_epis_context_fk;

    -- Delete all rows for this EPISD_EPIS_FK foreign key value
    PROCEDURE del_episd_epis_fk
    (
        id_episode_in   IN epis_documentation.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_episd_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_episd_epis_fk;

    -- Delete all rows for this EPISD_PROF_FK foreign key value
    PROCEDURE del_episd_prof_fk
    (
        id_professional_in IN epis_documentation.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_episd_prof_fk(id_professional_in => id_professional_in,
                          handle_error_in    => handle_error_in,
                          rows_out           => rows_out);
    END del_episd_prof_fk;

    -- Delete all rows for this EPISD_PROF_FK2 foreign key value
    PROCEDURE del_episd_prof_fk2
    (
        id_prof_last_update_in IN epis_documentation.id_prof_last_update%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_episd_prof_fk2(id_prof_last_update_in => id_prof_last_update_in,
                           handle_error_in        => handle_error_in,
                           rows_out               => rows_out);
    END del_episd_prof_fk2;

    -- Delete all rows for this EPISD_PROF_FK3 foreign key value
    PROCEDURE del_episd_prof_fk3
    (
        id_prof_cancel_in IN epis_documentation.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_episd_prof_fk3(id_prof_cancel_in => id_prof_cancel_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_episd_prof_fk3;

    -- Delete all rows for this EPISD_SCA_FK foreign key value
    PROCEDURE del_episd_sca_fk
    (
        id_scales_action_in IN epis_documentation.id_scales_action%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_episd_sca_fk(id_scales_action_in => id_scales_action_in,
                         handle_error_in     => handle_error_in,
                         rows_out            => rows_out);
    END del_episd_sca_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM epis_documentation';
        ELSE
            RETURN 'DELETE FROM epis_documentation WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(epis_documentation_inout IN OUT epis_documentation%ROWTYPE) IS
    BEGIN
        epis_documentation_inout.id_epis_documentation        := NULL;
        epis_documentation_inout.id_epis_complaint            := NULL;
        epis_documentation_inout.id_episode                   := NULL;
        epis_documentation_inout.id_professional              := NULL;
        epis_documentation_inout.id_prof_last_update          := NULL;
        epis_documentation_inout.flg_status                   := NULL;
        epis_documentation_inout.id_doc_area                  := NULL;
        epis_documentation_inout.id_prof_cancel               := NULL;
        epis_documentation_inout.notes_cancel                 := NULL;
        epis_documentation_inout.id_doc_template              := NULL;
        epis_documentation_inout.id_epis_documentation_parent := NULL;
        epis_documentation_inout.dt_creation_tstz             := NULL;
        epis_documentation_inout.dt_last_update_tstz          := NULL;
        epis_documentation_inout.dt_cancel_tstz               := NULL;
        epis_documentation_inout.id_epis_context              := NULL;
        epis_documentation_inout.id_episode_context           := NULL;
        epis_documentation_inout.flg_edition_type             := NULL;
        epis_documentation_inout.create_user                  := NULL;
        epis_documentation_inout.create_time                  := NULL;
        epis_documentation_inout.create_institution           := NULL;
        epis_documentation_inout.update_user                  := NULL;
        epis_documentation_inout.update_time                  := NULL;
        epis_documentation_inout.update_institution           := NULL;
        epis_documentation_inout.notes                        := NULL;
        epis_documentation_inout.id_scales_action             := NULL;
        epis_documentation_inout.id_cancel_reason             := NULL;
        epis_documentation_inout.dt_clinical                  := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN epis_documentation%ROWTYPE IS
        l_epis_documentation epis_documentation%ROWTYPE;
    BEGIN
        RETURN l_epis_documentation;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_documentation_tc IS
        data epis_documentation_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM epis_documentation
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_documentation_tc IS
        data epis_documentation_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_documentation;
/
