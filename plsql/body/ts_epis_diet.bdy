/*-- Last Change Revision: $Rev: 2028059 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:04 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY TS_EPIS_DIET
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: October 16, 2008 18:10:30
| Created By: ALERT
*/
IS

   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_epis_diet_in IN EPIS_DIET.ID_EPIS_DIET%TYPE
      ,
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT SYSDATE
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO EPIS_DIET (
         ID_EPIS_DIET,
         ID_DIET,
         ID_EPISODE,
         ID_PROFESSIONAL,
         DESC_DIET,
         FLG_STATUS,
         NOTES,
         ID_PROF_CANCEL,
         NOTES_CANCEL,
         ID_PROF_INTER,
         NOTES_INTER,
         ID_DIET_SCHEDULE,
         FLG_HELP,
         DT_CREATION_TSTZ,
         DT_CANCEL_TSTZ,
         DT_INTER_TSTZ,
         DT_INITIAL_TSTZ,
         DT_END_TSTZ,
         ADW_LAST_UPDATE
         )
      VALUES (
         id_epis_diet_in,
         id_diet_in,
         id_episode_in,
         id_professional_in,
         desc_diet_in,
         flg_status_in,
         notes_in,
         id_prof_cancel_in,
         notes_cancel_in,
         id_prof_inter_in,
         notes_inter_in,
         id_diet_schedule_in,
         flg_help_in,
         dt_creation_tstz_in,
         dt_cancel_tstz_in,
         dt_inter_tstz_in,
         dt_initial_tstz_in,
         dt_end_tstz_in,
         adw_last_update_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'EPIS_DIET');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           IF l_name = 'EDT_DIT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DIET'
               , value_in => id_diet_in);
           END IF;
           IF l_name = 'EDT_DSE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DIET_SCHEDULE'
               , value_in => id_diet_schedule_in);
           END IF;
           IF l_name = 'EDT_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'EDT_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'EDT_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'EDT_PROF_FK3'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_INTER'
               , value_in => id_prof_inter_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_epis_diet_in IN EPIS_DIET.ID_EPIS_DIET%TYPE
      ,
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT SYSDATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_epis_diet_in => id_epis_diet_in
      ,
      id_diet_in => id_diet_in,
      id_episode_in => id_episode_in,
      id_professional_in => id_professional_in,
      desc_diet_in => desc_diet_in,
      flg_status_in => flg_status_in,
      notes_in => notes_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      id_prof_inter_in => id_prof_inter_in,
      notes_inter_in => notes_inter_in,
      id_diet_schedule_in => id_diet_schedule_in,
      flg_help_in => flg_help_in,
      dt_creation_tstz_in => dt_creation_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      dt_inter_tstz_in => dt_inter_tstz_in,
      dt_initial_tstz_in => dt_initial_tstz_in,
      dt_end_tstz_in => dt_end_tstz_in,
      adw_last_update_in => adw_last_update_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN EPIS_DIET%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec EPIS_DIET%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_EPIS_DIET := next_key (sequence_in);
      END IF;
      ins (
         id_epis_diet_in => l_rec.ID_EPIS_DIET
         ,
         id_diet_in => l_rec.ID_DIET,
         id_episode_in => l_rec.ID_EPISODE,
         id_professional_in => l_rec.ID_PROFESSIONAL,
         desc_diet_in => l_rec.DESC_DIET,
         flg_status_in => l_rec.FLG_STATUS,
         notes_in => l_rec.NOTES,
         id_prof_cancel_in => l_rec.ID_PROF_CANCEL,
         notes_cancel_in => l_rec.NOTES_CANCEL,
         id_prof_inter_in => l_rec.ID_PROF_INTER,
         notes_inter_in => l_rec.NOTES_INTER,
         id_diet_schedule_in => l_rec.ID_DIET_SCHEDULE,
         flg_help_in => l_rec.FLG_HELP,
         dt_creation_tstz_in => l_rec.DT_CREATION_TSTZ,
         dt_cancel_tstz_in => l_rec.DT_CANCEL_TSTZ,
         dt_inter_tstz_in => l_rec.DT_INTER_TSTZ,
         dt_initial_tstz_in => l_rec.DT_INITIAL_TSTZ,
         dt_end_tstz_in => l_rec.DT_END_TSTZ,
         adw_last_update_in => l_rec.ADW_LAST_UPDATE
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN EPIS_DIET%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN EPIS_DIET.ID_EPIS_DIET%TYPE

   IS
     retval EPIS_DIET.ID_EPIS_DIET%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_EPIS_DIET.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_EPIS_DIET')
           );
   END next_key;

   PROCEDURE ins (
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT SYSDATE,
      id_epis_diet_out IN OUT EPIS_DIET.ID_EPIS_DIET%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky EPIS_DIET.ID_EPIS_DIET%TYPE := next_key;
   BEGIN
      ins (
         id_epis_diet_in => l_pky,
         id_diet_in => id_diet_in,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         desc_diet_in => desc_diet_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_prof_inter_in => id_prof_inter_in,
         notes_inter_in => notes_inter_in,
         id_diet_schedule_in => id_diet_schedule_in,
         flg_help_in => flg_help_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         dt_inter_tstz_in => dt_inter_tstz_in,
         dt_initial_tstz_in => dt_initial_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         adw_last_update_in => adw_last_update_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_epis_diet_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT SYSDATE,
      id_epis_diet_out IN OUT EPIS_DIET.ID_EPIS_DIET%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_diet_in => id_diet_in,
      id_episode_in => id_episode_in,
      id_professional_in => id_professional_in,
      desc_diet_in => desc_diet_in,
      flg_status_in => flg_status_in,
      notes_in => notes_in,
      id_prof_cancel_in => id_prof_cancel_in,
      notes_cancel_in => notes_cancel_in,
      id_prof_inter_in => id_prof_inter_in,
      notes_inter_in => notes_inter_in,
      id_diet_schedule_in => id_diet_schedule_in,
      flg_help_in => flg_help_in,
      dt_creation_tstz_in => dt_creation_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      dt_inter_tstz_in => dt_inter_tstz_in,
      dt_initial_tstz_in => dt_initial_tstz_in,
      dt_end_tstz_in => dt_end_tstz_in,
      adw_last_update_in => adw_last_update_in,
      id_epis_diet_out => id_epis_diet_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT SYSDATE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         EPIS_DIET.ID_EPIS_DIET%TYPE
   IS
        l_pky EPIS_DIET.ID_EPIS_DIET%TYPE := next_key;
   BEGIN
      ins (
         id_epis_diet_in => l_pky,
         id_diet_in => id_diet_in,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         desc_diet_in => desc_diet_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_prof_inter_in => id_prof_inter_in,
         notes_inter_in => notes_inter_in,
         id_diet_schedule_in => id_diet_schedule_in,
         flg_help_in => flg_help_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         dt_inter_tstz_in => dt_inter_tstz_in,
         dt_initial_tstz_in => dt_initial_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         adw_last_update_in => adw_last_update_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT SYSDATE
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         EPIS_DIET.ID_EPIS_DIET%TYPE
   IS
        l_pky EPIS_DIET.ID_EPIS_DIET%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_epis_diet_in => l_pky,
         id_diet_in => id_diet_in,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         desc_diet_in => desc_diet_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_prof_inter_in => id_prof_inter_in,
         notes_inter_in => notes_inter_in,
         id_diet_schedule_in => id_diet_schedule_in,
         flg_help_in => flg_help_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         dt_inter_tstz_in => dt_inter_tstz_in,
         dt_initial_tstz_in => dt_initial_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         adw_last_update_in => adw_last_update_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT SYSDATE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky EPIS_DIET.ID_EPIS_DIET%TYPE := next_key;
   BEGIN
      ins (
         id_epis_diet_in => l_pky,
         id_diet_in => id_diet_in,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         desc_diet_in => desc_diet_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_prof_inter_in => id_prof_inter_in,
         notes_inter_in => notes_inter_in,
         id_diet_schedule_in => id_diet_schedule_in,
         flg_help_in => flg_help_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         dt_inter_tstz_in => dt_inter_tstz_in,
         dt_initial_tstz_in => dt_initial_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         adw_last_update_in => adw_last_update_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT SYSDATE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky EPIS_DIET.ID_EPIS_DIET%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_epis_diet_in => l_pky,
         id_diet_in => id_diet_in,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         desc_diet_in => desc_diet_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_prof_inter_in => id_prof_inter_in,
         notes_inter_in => notes_inter_in,
         id_diet_schedule_in => id_diet_schedule_in,
         flg_help_in => flg_help_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         dt_inter_tstz_in => dt_inter_tstz_in,
         dt_initial_tstz_in => dt_initial_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         adw_last_update_in => adw_last_update_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN EPIS_DIET_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO EPIS_DIET VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPIS_DIET _' || indx
                  ,value_in => rows_in(indx).ID_EPIS_DIET
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_DIET _' || indx
                  ,value_in => rows_in(indx).ID_DIET
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE _' || indx
                  ,value_in => rows_in(indx).ID_EPISODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROFESSIONAL _' || indx
                  ,value_in => rows_in(indx).ID_PROFESSIONAL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DESC_DIET _' || indx
                  ,value_in => rows_in(indx).DESC_DIET
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(indx).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES _' || indx
                  ,value_in => rows_in(indx).NOTES
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CANCEL _' || indx
                  ,value_in => rows_in(indx).ID_PROF_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_CANCEL _' || indx
                  ,value_in => rows_in(indx).NOTES_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_INTER _' || indx
                  ,value_in => rows_in(indx).ID_PROF_INTER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_INTER _' || indx
                  ,value_in => rows_in(indx).NOTES_INTER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_DIET_SCHEDULE _' || indx
                  ,value_in => rows_in(indx).ID_DIET_SCHEDULE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_HELP _' || indx
                  ,value_in => rows_in(indx).FLG_HELP
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CREATION_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_CREATION_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CANCEL_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_CANCEL_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_INTER_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_INTER_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_INITIAL_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_INITIAL_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_END_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_END_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ADW_LAST_UPDATE _' || indx
                  ,value_in => rows_in(indx).ADW_LAST_UPDATE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'EPIS_DIET'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN EPIS_DIET_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_epis_diet_in IN EPIS_DIET.ID_EPIS_DIET%TYPE,
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      ID_DIET_nin IN BOOLEAN := TRUE,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      DESC_DIET_nin IN BOOLEAN := TRUE,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      ID_PROF_INTER_nin IN BOOLEAN := TRUE,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      NOTES_INTER_nin IN BOOLEAN := TRUE,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      ID_DIET_SCHEDULE_nin IN BOOLEAN := TRUE,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      FLG_HELP_nin IN BOOLEAN := TRUE,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      DT_INTER_TSTZ_nin IN BOOLEAN := TRUE,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      DT_INITIAL_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      DT_END_TSTZ_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_DIET_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_DESC_DIET_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_ID_PROF_INTER_n NUMBER(1);
   l_NOTES_INTER_n NUMBER(1);
   l_ID_DIET_SCHEDULE_n NUMBER(1);
   l_FLG_HELP_n NUMBER(1);
   l_DT_CREATION_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_DT_INTER_TSTZ_n NUMBER(1);
   l_DT_INITIAL_TSTZ_n NUMBER(1);
   l_DT_END_TSTZ_n NUMBER(1);
   l_ADW_LAST_UPDATE_n NUMBER(1);
   BEGIN

   l_ID_DIET_n := sys.diutil.bool_to_int(ID_DIET_nin);
   l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
   l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
   l_DESC_DIET_n := sys.diutil.bool_to_int(DESC_DIET_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
   l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
   l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
   l_ID_PROF_INTER_n := sys.diutil.bool_to_int(ID_PROF_INTER_nin);
   l_NOTES_INTER_n := sys.diutil.bool_to_int(NOTES_INTER_nin);
   l_ID_DIET_SCHEDULE_n := sys.diutil.bool_to_int(ID_DIET_SCHEDULE_nin);
   l_FLG_HELP_n := sys.diutil.bool_to_int(FLG_HELP_nin);
   l_DT_CREATION_TSTZ_n := sys.diutil.bool_to_int(DT_CREATION_TSTZ_nin);
   l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
   l_DT_INTER_TSTZ_n := sys.diutil.bool_to_int(DT_INTER_TSTZ_nin);
   l_DT_INITIAL_TSTZ_n := sys.diutil.bool_to_int(DT_INITIAL_TSTZ_nin);
   l_DT_END_TSTZ_n := sys.diutil.bool_to_int(DT_END_TSTZ_nin);
   l_ADW_LAST_UPDATE_n := sys.diutil.bool_to_int(ADW_LAST_UPDATE_nin);


         UPDATE EPIS_DIET SET
     ID_DIET = decode (l_ID_DIET_n,0,id_diet_in, NVL (id_diet_in, ID_DIET)),
     ID_EPISODE = decode (l_ID_EPISODE_n,0,id_episode_in, NVL (id_episode_in, ID_EPISODE)),
     ID_PROFESSIONAL = decode (l_ID_PROFESSIONAL_n,0,id_professional_in, NVL (id_professional_in, ID_PROFESSIONAL)),
     DESC_DIET = decode (l_DESC_DIET_n,0,desc_diet_in, NVL (desc_diet_in, DESC_DIET)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     NOTES = decode (l_NOTES_n,0,notes_in, NVL (notes_in, NOTES)),
     ID_PROF_CANCEL = decode (l_ID_PROF_CANCEL_n,0,id_prof_cancel_in, NVL (id_prof_cancel_in, ID_PROF_CANCEL)),
     NOTES_CANCEL = decode (l_NOTES_CANCEL_n,0,notes_cancel_in, NVL (notes_cancel_in, NOTES_CANCEL)),
     ID_PROF_INTER = decode (l_ID_PROF_INTER_n,0,id_prof_inter_in, NVL (id_prof_inter_in, ID_PROF_INTER)),
     NOTES_INTER = decode (l_NOTES_INTER_n,0,notes_inter_in, NVL (notes_inter_in, NOTES_INTER)),
     ID_DIET_SCHEDULE = decode (l_ID_DIET_SCHEDULE_n,0,id_diet_schedule_in, NVL (id_diet_schedule_in, ID_DIET_SCHEDULE)),
     FLG_HELP = decode (l_FLG_HELP_n,0,flg_help_in, NVL (flg_help_in, FLG_HELP)),
     DT_CREATION_TSTZ = decode (l_DT_CREATION_TSTZ_n,0,dt_creation_tstz_in, NVL (dt_creation_tstz_in, DT_CREATION_TSTZ)),
     DT_CANCEL_TSTZ = decode (l_DT_CANCEL_TSTZ_n,0,dt_cancel_tstz_in, NVL (dt_cancel_tstz_in, DT_CANCEL_TSTZ)),
     DT_INTER_TSTZ = decode (l_DT_INTER_TSTZ_n,0,dt_inter_tstz_in, NVL (dt_inter_tstz_in, DT_INTER_TSTZ)),
     DT_INITIAL_TSTZ = decode (l_DT_INITIAL_TSTZ_n,0,dt_initial_tstz_in, NVL (dt_initial_tstz_in, DT_INITIAL_TSTZ)),
     DT_END_TSTZ = decode (l_DT_END_TSTZ_n,0,dt_end_tstz_in, NVL (dt_end_tstz_in, DT_END_TSTZ)),
     ADW_LAST_UPDATE = decode (l_ADW_LAST_UPDATE_n,0,adw_last_update_in, NVL (adw_last_update_in, ADW_LAST_UPDATE))
          WHERE
             ID_EPIS_DIET = id_epis_diet_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'EPIS_DIET');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           IF l_name = 'EDT_DIT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DIET'
               , value_in => id_diet_in);
           END IF;
           IF l_name = 'EDT_DSE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DIET_SCHEDULE'
               , value_in => id_diet_schedule_in);
           END IF;
           IF l_name = 'EDT_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'EDT_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'EDT_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'EDT_PROF_FK3'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_INTER'
               , value_in => id_prof_inter_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_epis_diet_in IN EPIS_DIET.ID_EPIS_DIET%TYPE,
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      ID_DIET_nin IN BOOLEAN := TRUE,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      DESC_DIET_nin IN BOOLEAN := TRUE,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      ID_PROF_INTER_nin IN BOOLEAN := TRUE,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      NOTES_INTER_nin IN BOOLEAN := TRUE,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      ID_DIET_SCHEDULE_nin IN BOOLEAN := TRUE,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      FLG_HELP_nin IN BOOLEAN := TRUE,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      DT_INTER_TSTZ_nin IN BOOLEAN := TRUE,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      DT_INITIAL_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      DT_END_TSTZ_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_epis_diet_in => id_epis_diet_in,
      id_diet_in => id_diet_in,
      ID_DIET_nin => ID_DIET_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      desc_diet_in => desc_diet_in,
      DESC_DIET_nin => DESC_DIET_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      id_prof_inter_in => id_prof_inter_in,
      ID_PROF_INTER_nin => ID_PROF_INTER_nin,
      notes_inter_in => notes_inter_in,
      NOTES_INTER_nin => NOTES_INTER_nin,
      id_diet_schedule_in => id_diet_schedule_in,
      ID_DIET_SCHEDULE_nin => ID_DIET_SCHEDULE_nin,
      flg_help_in => flg_help_in,
      FLG_HELP_nin => FLG_HELP_nin,
      dt_creation_tstz_in => dt_creation_tstz_in,
      DT_CREATION_TSTZ_nin => DT_CREATION_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      dt_inter_tstz_in => dt_inter_tstz_in,
      DT_INTER_TSTZ_nin => DT_INTER_TSTZ_nin,
      dt_initial_tstz_in => dt_initial_tstz_in,
      DT_INITIAL_TSTZ_nin => DT_INITIAL_TSTZ_nin,
      dt_end_tstz_in => dt_end_tstz_in,
      DT_END_TSTZ_nin => DT_END_TSTZ_nin,
      adw_last_update_in => adw_last_update_in,
      ADW_LAST_UPDATE_nin => ADW_LAST_UPDATE_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      ID_DIET_nin IN BOOLEAN := TRUE,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      DESC_DIET_nin IN BOOLEAN := TRUE,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      ID_PROF_INTER_nin IN BOOLEAN := TRUE,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      NOTES_INTER_nin IN BOOLEAN := TRUE,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      ID_DIET_SCHEDULE_nin IN BOOLEAN := TRUE,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      FLG_HELP_nin IN BOOLEAN := TRUE,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      DT_INTER_TSTZ_nin IN BOOLEAN := TRUE,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      DT_INITIAL_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      DT_END_TSTZ_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(4000);
   l_rows_out TABLE_VARCHAR;
   l_ID_DIET_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_DESC_DIET_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_ID_PROF_INTER_n NUMBER(1);
   l_NOTES_INTER_n NUMBER(1);
   l_ID_DIET_SCHEDULE_n NUMBER(1);
   l_FLG_HELP_n NUMBER(1);
   l_DT_CREATION_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_DT_INTER_TSTZ_n NUMBER(1);
   l_DT_INITIAL_TSTZ_n NUMBER(1);
   l_DT_END_TSTZ_n NUMBER(1);
   l_ADW_LAST_UPDATE_n NUMBER(1);
      id_epis_diet_in EPIS_DIET.ID_EPIS_DIET%TYPE;
   BEGIN



      l_ID_DIET_n := sys.diutil.bool_to_int(ID_DIET_nin);
      l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
      l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
      l_DESC_DIET_n := sys.diutil.bool_to_int(DESC_DIET_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
      l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
      l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
      l_ID_PROF_INTER_n := sys.diutil.bool_to_int(ID_PROF_INTER_nin);
      l_NOTES_INTER_n := sys.diutil.bool_to_int(NOTES_INTER_nin);
      l_ID_DIET_SCHEDULE_n := sys.diutil.bool_to_int(ID_DIET_SCHEDULE_nin);
      l_FLG_HELP_n := sys.diutil.bool_to_int(FLG_HELP_nin);
      l_DT_CREATION_TSTZ_n := sys.diutil.bool_to_int(DT_CREATION_TSTZ_nin);
      l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
      l_DT_INTER_TSTZ_n := sys.diutil.bool_to_int(DT_INTER_TSTZ_nin);
      l_DT_INITIAL_TSTZ_n := sys.diutil.bool_to_int(DT_INITIAL_TSTZ_nin);
      l_DT_END_TSTZ_n := sys.diutil.bool_to_int(DT_END_TSTZ_nin);
      l_ADW_LAST_UPDATE_n := sys.diutil.bool_to_int(ADW_LAST_UPDATE_nin);



l_sql := 'UPDATE EPIS_DIET SET '
     || ' ID_DIET = decode (' || l_ID_DIET_n || ',0,:id_diet_in, NVL (:id_diet_in, ID_DIET)) '|| ','
     || ' ID_EPISODE = decode (' || l_ID_EPISODE_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) '|| ','
     || ' ID_PROFESSIONAL = decode (' || l_ID_PROFESSIONAL_n || ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) '|| ','
     || ' DESC_DIET = decode (' || l_DESC_DIET_n || ',0,:desc_diet_in, NVL (:desc_diet_in, DESC_DIET)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' NOTES = decode (' || l_NOTES_n || ',0,:notes_in, NVL (:notes_in, NOTES)) '|| ','
     || ' ID_PROF_CANCEL = decode (' || l_ID_PROF_CANCEL_n || ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) '|| ','
     || ' NOTES_CANCEL = decode (' || l_NOTES_CANCEL_n || ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) '|| ','
     || ' ID_PROF_INTER = decode (' || l_ID_PROF_INTER_n || ',0,:id_prof_inter_in, NVL (:id_prof_inter_in, ID_PROF_INTER)) '|| ','
     || ' NOTES_INTER = decode (' || l_NOTES_INTER_n || ',0,:notes_inter_in, NVL (:notes_inter_in, NOTES_INTER)) '|| ','
     || ' ID_DIET_SCHEDULE = decode (' || l_ID_DIET_SCHEDULE_n || ',0,:id_diet_schedule_in, NVL (:id_diet_schedule_in, ID_DIET_SCHEDULE)) '|| ','
     || ' FLG_HELP = decode (' || l_FLG_HELP_n || ',0,:flg_help_in, NVL (:flg_help_in, FLG_HELP)) '|| ','
     || ' DT_CREATION_TSTZ = decode (' || l_DT_CREATION_TSTZ_n || ',0,:dt_creation_tstz_in, NVL (:dt_creation_tstz_in, DT_CREATION_TSTZ)) '|| ','
     || ' DT_CANCEL_TSTZ = decode (' || l_DT_CANCEL_TSTZ_n || ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) '|| ','
     || ' DT_INTER_TSTZ = decode (' || l_DT_INTER_TSTZ_n || ',0,:dt_inter_tstz_in, NVL (:dt_inter_tstz_in, DT_INTER_TSTZ)) '|| ','
     || ' DT_INITIAL_TSTZ = decode (' || l_DT_INITIAL_TSTZ_n || ',0,:dt_initial_tstz_in, NVL (:dt_initial_tstz_in, DT_INITIAL_TSTZ)) '|| ','
     || ' DT_END_TSTZ = decode (' || l_DT_END_TSTZ_n || ',0,:dt_end_tstz_in, NVL (:dt_end_tstz_in, DT_END_TSTZ)) '|| ','
     || ' ADW_LAST_UPDATE = decode (' || l_ADW_LAST_UPDATE_n || ',0,:adw_last_update_in, NVL (:adw_last_update_in, ADW_LAST_UPDATE)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_diet_in,
     id_episode_in,
     id_professional_in,
     desc_diet_in,
     flg_status_in,
     notes_in,
     id_prof_cancel_in,
     notes_cancel_in,
     id_prof_inter_in,
     notes_inter_in,
     id_diet_schedule_in,
     flg_help_in,
     dt_creation_tstz_in,
     dt_cancel_tstz_in,
     dt_inter_tstz_in,
     dt_initial_tstz_in,
     dt_end_tstz_in,
     adw_last_update_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'EPIS_DIET');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           IF l_name = 'EDT_DIT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DIET'
               , value_in => id_diet_in);
           END IF;
           IF l_name = 'EDT_DSE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DIET_SCHEDULE'
               , value_in => id_diet_schedule_in);
           END IF;
           IF l_name = 'EDT_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'EDT_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'EDT_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'EDT_PROF_FK3'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_INTER'
               , value_in => id_prof_inter_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      ID_DIET_nin IN BOOLEAN := TRUE,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      DESC_DIET_nin IN BOOLEAN := TRUE,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      ID_PROF_INTER_nin IN BOOLEAN := TRUE,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      NOTES_INTER_nin IN BOOLEAN := TRUE,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      ID_DIET_SCHEDULE_nin IN BOOLEAN := TRUE,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      FLG_HELP_nin IN BOOLEAN := TRUE,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      DT_INTER_TSTZ_nin IN BOOLEAN := TRUE,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      DT_INITIAL_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      DT_END_TSTZ_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_diet_in => id_diet_in,
      ID_DIET_nin => ID_DIET_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      desc_diet_in => desc_diet_in,
      DESC_DIET_nin => DESC_DIET_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      id_prof_inter_in => id_prof_inter_in,
      ID_PROF_INTER_nin => ID_PROF_INTER_nin,
      notes_inter_in => notes_inter_in,
      NOTES_INTER_nin => NOTES_INTER_nin,
      id_diet_schedule_in => id_diet_schedule_in,
      ID_DIET_SCHEDULE_nin => ID_DIET_SCHEDULE_nin,
      flg_help_in => flg_help_in,
      FLG_HELP_nin => FLG_HELP_nin,
      dt_creation_tstz_in => dt_creation_tstz_in,
      DT_CREATION_TSTZ_nin => DT_CREATION_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      dt_inter_tstz_in => dt_inter_tstz_in,
      DT_INTER_TSTZ_nin => DT_INTER_TSTZ_nin,
      dt_initial_tstz_in => dt_initial_tstz_in,
      DT_INITIAL_TSTZ_nin => DT_INITIAL_TSTZ_nin,
      dt_end_tstz_in => dt_end_tstz_in,
      DT_END_TSTZ_nin => DT_END_TSTZ_nin,
      adw_last_update_in => adw_last_update_in,
      ADW_LAST_UPDATE_nin => ADW_LAST_UPDATE_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN EPIS_DIET%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_epis_diet_in => rec_in.ID_EPIS_DIET,
         id_diet_in => rec_in.ID_DIET,
         id_episode_in => rec_in.ID_EPISODE,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         desc_diet_in => rec_in.DESC_DIET,
         flg_status_in => rec_in.FLG_STATUS,
         notes_in => rec_in.NOTES,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         id_prof_inter_in => rec_in.ID_PROF_INTER,
         notes_inter_in => rec_in.NOTES_INTER,
         id_diet_schedule_in => rec_in.ID_DIET_SCHEDULE,
         flg_help_in => rec_in.FLG_HELP,
         dt_creation_tstz_in => rec_in.DT_CREATION_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         dt_inter_tstz_in => rec_in.DT_INTER_TSTZ,
         dt_initial_tstz_in => rec_in.DT_INITIAL_TSTZ,
         dt_end_tstz_in => rec_in.DT_END_TSTZ,
         adw_last_update_in => rec_in.ADW_LAST_UPDATE

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN EPIS_DIET%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_epis_diet_in => rec_in.ID_EPIS_DIET,
         id_diet_in => rec_in.ID_DIET,
         id_episode_in => rec_in.ID_EPISODE,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         desc_diet_in => rec_in.DESC_DIET,
         flg_status_in => rec_in.FLG_STATUS,
         notes_in => rec_in.NOTES,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         id_prof_inter_in => rec_in.ID_PROF_INTER,
         notes_inter_in => rec_in.NOTES_INTER,
         id_diet_schedule_in => rec_in.ID_DIET_SCHEDULE,
         flg_help_in => rec_in.FLG_HELP,
         dt_creation_tstz_in => rec_in.DT_CREATION_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         dt_inter_tstz_in => rec_in.DT_INTER_TSTZ,
         dt_initial_tstz_in => rec_in.DT_INITIAL_TSTZ,
         dt_end_tstz_in => rec_in.DT_END_TSTZ,
         adw_last_update_in => rec_in.ADW_LAST_UPDATE

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_epis_diet_in IN EPIS_DIET.ID_EPIS_DIET%TYPE,
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_epis_diet_in => id_epis_diet_in,
         id_diet_in => id_diet_in,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         desc_diet_in => desc_diet_in,
         flg_status_in => flg_status_in,
         notes_in => notes_in,
         id_prof_cancel_in => id_prof_cancel_in,
         notes_cancel_in => notes_cancel_in,
         id_prof_inter_in => id_prof_inter_in,
         notes_inter_in => notes_inter_in,
         id_diet_schedule_in => id_diet_schedule_in,
         flg_help_in => flg_help_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         dt_inter_tstz_in => dt_inter_tstz_in,
         dt_initial_tstz_in => dt_initial_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         adw_last_update_in => adw_last_update_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_epis_diet_in => id_epis_diet_in,
            id_diet_in => id_diet_in,
            id_episode_in => id_episode_in,
            id_professional_in => id_professional_in,
            desc_diet_in => desc_diet_in,
            flg_status_in => flg_status_in,
            notes_in => notes_in,
            id_prof_cancel_in => id_prof_cancel_in,
            notes_cancel_in => notes_cancel_in,
            id_prof_inter_in => id_prof_inter_in,
            notes_inter_in => notes_inter_in,
            id_diet_schedule_in => id_diet_schedule_in,
            flg_help_in => flg_help_in,
            dt_creation_tstz_in => dt_creation_tstz_in,
            dt_cancel_tstz_in => dt_cancel_tstz_in,
            dt_inter_tstz_in => dt_inter_tstz_in,
            dt_initial_tstz_in => dt_initial_tstz_in,
            dt_end_tstz_in => dt_end_tstz_in,
            adw_last_update_in => adw_last_update_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_epis_diet_in IN EPIS_DIET.ID_EPIS_DIET%TYPE,
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE DEFAULT NULL,
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      desc_diet_in IN EPIS_DIET.DESC_DIET%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_DIET.FLG_STATUS%TYPE DEFAULT NULL,
      notes_in IN EPIS_DIET.NOTES%TYPE DEFAULT NULL,
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      notes_cancel_in IN EPIS_DIET.NOTES_CANCEL%TYPE DEFAULT NULL,
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE DEFAULT NULL,
      notes_inter_in IN EPIS_DIET.NOTES_INTER%TYPE DEFAULT NULL,
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE DEFAULT NULL,
      flg_help_in IN EPIS_DIET.FLG_HELP%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN EPIS_DIET.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN EPIS_DIET.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      dt_inter_tstz_in IN EPIS_DIET.DT_INTER_TSTZ%TYPE DEFAULT NULL,
      dt_initial_tstz_in IN EPIS_DIET.DT_INITIAL_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN EPIS_DIET.DT_END_TSTZ%TYPE DEFAULT NULL,
      adw_last_update_in IN EPIS_DIET.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_epis_diet_in,
      id_diet_in,
      id_episode_in,
      id_professional_in,
      desc_diet_in,
      flg_status_in,
      notes_in,
      id_prof_cancel_in,
      notes_cancel_in,
      id_prof_inter_in,
      notes_inter_in,
      id_diet_schedule_in,
      flg_help_in,
      dt_creation_tstz_in,
      dt_cancel_tstz_in,
      dt_inter_tstz_in,
      dt_initial_tstz_in,
      dt_end_tstz_in,
      adw_last_update_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN EPIS_DIET_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_EPIS_DIET ID_EPIS_DIET_cc;
      l_ID_DIET ID_DIET_cc;
      l_ID_EPISODE ID_EPISODE_cc;
      l_ID_PROFESSIONAL ID_PROFESSIONAL_cc;
      l_DESC_DIET DESC_DIET_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_NOTES NOTES_cc;
      l_ID_PROF_CANCEL ID_PROF_CANCEL_cc;
      l_NOTES_CANCEL NOTES_CANCEL_cc;
      l_ID_PROF_INTER ID_PROF_INTER_cc;
      l_NOTES_INTER NOTES_INTER_cc;
      l_ID_DIET_SCHEDULE ID_DIET_SCHEDULE_cc;
      l_FLG_HELP FLG_HELP_cc;
      l_DT_CREATION_TSTZ DT_CREATION_TSTZ_cc;
      l_DT_CANCEL_TSTZ DT_CANCEL_TSTZ_cc;
      l_DT_INTER_TSTZ DT_INTER_TSTZ_cc;
      l_DT_INITIAL_TSTZ DT_INITIAL_TSTZ_cc;
      l_DT_END_TSTZ DT_END_TSTZ_cc;
      l_ADW_LAST_UPDATE ADW_LAST_UPDATE_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_EPIS_DIET(i) := col_in(i).ID_EPIS_DIET;
         l_ID_DIET(i) := col_in(i).ID_DIET;
         l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
         l_ID_PROFESSIONAL(i) := col_in(i).ID_PROFESSIONAL;
         l_DESC_DIET(i) := col_in(i).DESC_DIET;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_NOTES(i) := col_in(i).NOTES;
         l_ID_PROF_CANCEL(i) := col_in(i).ID_PROF_CANCEL;
         l_NOTES_CANCEL(i) := col_in(i).NOTES_CANCEL;
         l_ID_PROF_INTER(i) := col_in(i).ID_PROF_INTER;
         l_NOTES_INTER(i) := col_in(i).NOTES_INTER;
         l_ID_DIET_SCHEDULE(i) := col_in(i).ID_DIET_SCHEDULE;
         l_FLG_HELP(i) := col_in(i).FLG_HELP;
         l_DT_CREATION_TSTZ(i) := col_in(i).DT_CREATION_TSTZ;
         l_DT_CANCEL_TSTZ(i) := col_in(i).DT_CANCEL_TSTZ;
         l_DT_INTER_TSTZ(i) := col_in(i).DT_INTER_TSTZ;
         l_DT_INITIAL_TSTZ(i) := col_in(i).DT_INITIAL_TSTZ;
         l_DT_END_TSTZ(i) := col_in(i).DT_END_TSTZ;
         l_ADW_LAST_UPDATE(i) := col_in(i).ADW_LAST_UPDATE;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE EPIS_DIET SET
               ID_DIET = NVL (l_ID_DIET(i), ID_DIET),
               ID_EPISODE = NVL (l_ID_EPISODE(i), ID_EPISODE),
               ID_PROFESSIONAL = NVL (l_ID_PROFESSIONAL(i), ID_PROFESSIONAL),
               DESC_DIET = NVL (l_DESC_DIET(i), DESC_DIET),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               NOTES = NVL (l_NOTES(i), NOTES),
               ID_PROF_CANCEL = NVL (l_ID_PROF_CANCEL(i), ID_PROF_CANCEL),
               NOTES_CANCEL = NVL (l_NOTES_CANCEL(i), NOTES_CANCEL),
               ID_PROF_INTER = NVL (l_ID_PROF_INTER(i), ID_PROF_INTER),
               NOTES_INTER = NVL (l_NOTES_INTER(i), NOTES_INTER),
               ID_DIET_SCHEDULE = NVL (l_ID_DIET_SCHEDULE(i), ID_DIET_SCHEDULE),
               FLG_HELP = NVL (l_FLG_HELP(i), FLG_HELP),
               DT_CREATION_TSTZ = NVL (l_DT_CREATION_TSTZ(i), DT_CREATION_TSTZ),
               DT_CANCEL_TSTZ = NVL (l_DT_CANCEL_TSTZ(i), DT_CANCEL_TSTZ),
               DT_INTER_TSTZ = NVL (l_DT_INTER_TSTZ(i), DT_INTER_TSTZ),
               DT_INITIAL_TSTZ = NVL (l_DT_INITIAL_TSTZ(i), DT_INITIAL_TSTZ),
               DT_END_TSTZ = NVL (l_DT_END_TSTZ(i), DT_END_TSTZ),
               ADW_LAST_UPDATE = NVL (l_ADW_LAST_UPDATE(i), ADW_LAST_UPDATE)
             WHERE
                ID_EPIS_DIET = l_ID_EPIS_DIET(i)
         ;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE EPIS_DIET SET
               ID_DIET = l_ID_DIET(i),
               ID_EPISODE = l_ID_EPISODE(i),
               ID_PROFESSIONAL = l_ID_PROFESSIONAL(i),
               DESC_DIET = l_DESC_DIET(i),
               FLG_STATUS = l_FLG_STATUS(i),
               NOTES = l_NOTES(i),
               ID_PROF_CANCEL = l_ID_PROF_CANCEL(i),
               NOTES_CANCEL = l_NOTES_CANCEL(i),
               ID_PROF_INTER = l_ID_PROF_INTER(i),
               NOTES_INTER = l_NOTES_INTER(i),
               ID_DIET_SCHEDULE = l_ID_DIET_SCHEDULE(i),
               FLG_HELP = l_FLG_HELP(i),
               DT_CREATION_TSTZ = l_DT_CREATION_TSTZ(i),
               DT_CANCEL_TSTZ = l_DT_CANCEL_TSTZ(i),
               DT_INTER_TSTZ = l_DT_INTER_TSTZ(i),
               DT_INITIAL_TSTZ = l_DT_INITIAL_TSTZ(i),
               DT_END_TSTZ = l_DT_END_TSTZ(i),
               ADW_LAST_UPDATE = l_ADW_LAST_UPDATE(i)
             WHERE
                ID_EPIS_DIET = l_ID_EPIS_DIET(i)
         ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN EPIS_DIET_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE EPIS_DIET
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE EPIS_DIET
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE EPIS_DIET set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE EPIS_DIET set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_epis_diet_in IN EPIS_DIET.ID_EPIS_DIET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIET
       WHERE
          ID_EPIS_DIET = id_epis_diet_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_epis_diet_in IN EPIS_DIET.ID_EPIS_DIET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_epis_diet_in => id_epis_diet_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_EPIS_DIET
   PROCEDURE del_ID_EPIS_DIET (
      id_epis_diet_in IN EPIS_DIET.ID_EPIS_DIET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM EPIS_DIET
       WHERE ID_EPIS_DIET = id_epis_diet_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_EPIS_DIET;






   -- Delete all rows for primary key column ID_EPIS_DIET
   PROCEDURE del_ID_EPIS_DIET (
      id_epis_diet_in IN EPIS_DIET.ID_EPIS_DIET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_EPIS_DIET (
      id_epis_diet_in => id_epis_diet_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_EPIS_DIET;















   PROCEDURE del_EDT_DIT_FK (
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIET
       WHERE
          ID_DIET = del_EDT_DIT_FK.id_diet_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EDT_DIT_FK;



PROCEDURE del_EDT_DIT_FK (
      id_diet_in IN EPIS_DIET.ID_DIET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EDT_DIT_FK (
      id_diet_in => id_diet_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EDT_DIT_FK;





   PROCEDURE del_EDT_DSE_FK (
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIET
       WHERE
          ID_DIET_SCHEDULE = del_EDT_DSE_FK.id_diet_schedule_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EDT_DSE_FK;



PROCEDURE del_EDT_DSE_FK (
      id_diet_schedule_in IN EPIS_DIET.ID_DIET_SCHEDULE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EDT_DSE_FK (
      id_diet_schedule_in => id_diet_schedule_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EDT_DSE_FK;





   PROCEDURE del_EDT_EPIS_FK (
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIET
       WHERE
          ID_EPISODE = del_EDT_EPIS_FK.id_episode_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EDT_EPIS_FK;



PROCEDURE del_EDT_EPIS_FK (
      id_episode_in IN EPIS_DIET.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EDT_EPIS_FK (
      id_episode_in => id_episode_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EDT_EPIS_FK;





   PROCEDURE del_EDT_PROF_FK (
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIET
       WHERE
          ID_PROFESSIONAL = del_EDT_PROF_FK.id_professional_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EDT_PROF_FK;



PROCEDURE del_EDT_PROF_FK (
      id_professional_in IN EPIS_DIET.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EDT_PROF_FK (
      id_professional_in => id_professional_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EDT_PROF_FK;





   PROCEDURE del_EDT_PROF_FK2 (
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIET
       WHERE
          ID_PROF_CANCEL = del_EDT_PROF_FK2.id_prof_cancel_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EDT_PROF_FK2;



PROCEDURE del_EDT_PROF_FK2 (
      id_prof_cancel_in IN EPIS_DIET.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EDT_PROF_FK2 (
      id_prof_cancel_in => id_prof_cancel_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EDT_PROF_FK2;





   PROCEDURE del_EDT_PROF_FK3 (
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIET
       WHERE
          ID_PROF_INTER = del_EDT_PROF_FK3.id_prof_inter_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EDT_PROF_FK3;



PROCEDURE del_EDT_PROF_FK3 (
      id_prof_inter_in IN EPIS_DIET.ID_PROF_INTER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EDT_PROF_FK3 (
      id_prof_inter_in => id_prof_inter_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EDT_PROF_FK3;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM EPIS_DIET';
      ELSE
         RETURN
            'DELETE FROM EPIS_DIET WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      epis_diet_inout IN OUT EPIS_DIET%ROWTYPE
   )
   IS
   BEGIN
      epis_diet_inout.ID_EPIS_DIET := NULL;
      epis_diet_inout.ID_DIET := NULL;
      epis_diet_inout.ID_EPISODE := NULL;
      epis_diet_inout.ID_PROFESSIONAL := NULL;
      epis_diet_inout.DESC_DIET := NULL;
      epis_diet_inout.FLG_STATUS := NULL;
      epis_diet_inout.NOTES := NULL;
      epis_diet_inout.ID_PROF_CANCEL := NULL;
      epis_diet_inout.NOTES_CANCEL := NULL;
      epis_diet_inout.ID_PROF_INTER := NULL;
      epis_diet_inout.NOTES_INTER := NULL;
      epis_diet_inout.ID_DIET_SCHEDULE := NULL;
      epis_diet_inout.FLG_HELP := NULL;
      epis_diet_inout.DT_CREATION_TSTZ := NULL;
      epis_diet_inout.DT_CANCEL_TSTZ := NULL;
      epis_diet_inout.DT_INTER_TSTZ := NULL;
      epis_diet_inout.DT_INITIAL_TSTZ := NULL;
      epis_diet_inout.DT_END_TSTZ := NULL;
      epis_diet_inout.ADW_LAST_UPDATE := SYSDATE;
   END initrec;

   FUNCTION initrec RETURN EPIS_DIET%ROWTYPE
   IS
      l_epis_diet EPIS_DIET%ROWTYPE;
   BEGIN
      l_epis_diet.ADW_LAST_UPDATE := SYSDATE;
      RETURN l_epis_diet;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN EPIS_DIET_tc
   IS
        data EPIS_DIET_tc;
   BEGIN
        select * bulk collect into data from EPIS_DIET where rowid in (select * from table(rows_in));
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN EPIS_DIET_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data EPIS_DIET_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_EPIS_DIET;
/
