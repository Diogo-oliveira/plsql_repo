/*-- Last Change Revision: $Rev: 1877368 $*/
/*-- Last Change by: $Author: adriano.ferreira $*/
/*-- Date of last change: $Date: 2018-11-12 15:39:19 +0000 (seg, 12 nov 2018) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_fast_track_hist
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2018-07-10 12:34:48
| Created By: ALERT
*/
IS

e_null_column_value EXCEPTION;
PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

e_existing_fky_reference EXCEPTION;
PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

e_check_constraint_failure EXCEPTION;
PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

e_no_parent_key EXCEPTION;
PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

e_child_record_found EXCEPTION;
PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

e_forall_error EXCEPTION;
PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

-- Defined for backward compatibilty.
e_integ_constraint_failure EXCEPTION;
PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE
IS
retval epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE;
BEGIN
IF sequence_in IS NULL
THEN
retval := seq_epis_fast_track_hist.NEXTVAL;
ELSE
EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
INTO retval;
END IF;
RETURN retval;
END next_key;

-- Insert one row, generating hidden primary key using a sequence
PROCEDURE ins
(
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
IS
l_pky epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE := next_key;
BEGIN
ins(
ID_EPIS_FAST_TRACK_HIST_IN => l_pky,
ID_EPIS_TRIAGE_IN => ID_EPIS_TRIAGE_IN,
ID_FAST_TRACK_IN => ID_FAST_TRACK_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
ID_PROF_DISABLE_IN => ID_PROF_DISABLE_IN,
DT_DISABLE_IN => DT_DISABLE_IN,
ID_FAST_TRACK_DISABLE_IN => ID_FAST_TRACK_DISABLE_IN,
NOTES_DISABLE_IN => NOTES_DISABLE_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_ACTIVATION_TYPE_IN => FLG_ACTIVATION_TYPE_IN,
DT_ENABLE_IN => DT_ENABLE_IN,
ID_PROF_ENABLE_IN => ID_PROF_ENABLE_IN,
NOTES_ENABLE_IN => NOTES_ENABLE_IN,
DT_ACTIVATION_IN => DT_ACTIVATION_IN,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
END ins;

-- Insert one row, generating hidden primary key using a sequence
PROCEDURE ins
(
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE
)
IS
rows_out table_varchar;
BEGIN
ins(
ID_EPIS_TRIAGE_IN => ID_EPIS_TRIAGE_IN,
ID_FAST_TRACK_IN => ID_FAST_TRACK_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
ID_PROF_DISABLE_IN => ID_PROF_DISABLE_IN,
DT_DISABLE_IN => DT_DISABLE_IN,
ID_FAST_TRACK_DISABLE_IN => ID_FAST_TRACK_DISABLE_IN,
NOTES_DISABLE_IN => NOTES_DISABLE_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_ACTIVATION_TYPE_IN => FLG_ACTIVATION_TYPE_IN,
DT_ENABLE_IN => DT_ENABLE_IN,
ID_PROF_ENABLE_IN => ID_PROF_ENABLE_IN,
NOTES_ENABLE_IN => NOTES_ENABLE_IN,
DT_ACTIVATION_IN => DT_ACTIVATION_IN,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
END ins;

-- Insert one row, returning primary key generated by sequence
PROCEDURE ins
(
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
ID_EPIS_FAST_TRACK_HIST_OUT IN OUT epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
IS
l_pky epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE := next_key;
BEGIN
ins(
ID_EPIS_FAST_TRACK_HIST_IN => l_pky,
ID_EPIS_TRIAGE_IN => ID_EPIS_TRIAGE_IN,
ID_FAST_TRACK_IN => ID_FAST_TRACK_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
ID_PROF_DISABLE_IN => ID_PROF_DISABLE_IN,
DT_DISABLE_IN => DT_DISABLE_IN,
ID_FAST_TRACK_DISABLE_IN => ID_FAST_TRACK_DISABLE_IN,
NOTES_DISABLE_IN => NOTES_DISABLE_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_ACTIVATION_TYPE_IN => FLG_ACTIVATION_TYPE_IN,
DT_ENABLE_IN => DT_ENABLE_IN,
ID_PROF_ENABLE_IN => ID_PROF_ENABLE_IN,
NOTES_ENABLE_IN => NOTES_ENABLE_IN,
DT_ACTIVATION_IN => DT_ACTIVATION_IN,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
ID_EPIS_FAST_TRACK_HIST_OUT := l_pky;
END ins;

-- Insert one row, returning primary key generated by sequence
PROCEDURE ins
(
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
ID_EPIS_FAST_TRACK_HIST_OUT IN OUT epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE
)
IS
rows_out table_varchar;
BEGIN
ins(
ID_EPIS_TRIAGE_IN => ID_EPIS_TRIAGE_IN,
ID_FAST_TRACK_IN => ID_FAST_TRACK_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
ID_PROF_DISABLE_IN => ID_PROF_DISABLE_IN,
DT_DISABLE_IN => DT_DISABLE_IN,
ID_FAST_TRACK_DISABLE_IN => ID_FAST_TRACK_DISABLE_IN,
NOTES_DISABLE_IN => NOTES_DISABLE_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_ACTIVATION_TYPE_IN => FLG_ACTIVATION_TYPE_IN,
DT_ENABLE_IN => DT_ENABLE_IN,
ID_PROF_ENABLE_IN => ID_PROF_ENABLE_IN,
NOTES_ENABLE_IN => NOTES_ENABLE_IN,
DT_ACTIVATION_IN => DT_ACTIVATION_IN,
ID_EPIS_FAST_TRACK_HIST_OUT => ID_EPIS_FAST_TRACK_HIST_OUT,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
END ins;

-- Insert one row with function, return generated primary key
FUNCTION ins
(
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
) RETURN epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE
IS
l_pky epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE := next_key;
BEGIN
ins(
ID_EPIS_FAST_TRACK_HIST_IN => l_pky,
ID_EPIS_TRIAGE_IN => ID_EPIS_TRIAGE_IN,
ID_FAST_TRACK_IN => ID_FAST_TRACK_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
ID_PROF_DISABLE_IN => ID_PROF_DISABLE_IN,
DT_DISABLE_IN => DT_DISABLE_IN,
ID_FAST_TRACK_DISABLE_IN => ID_FAST_TRACK_DISABLE_IN,
NOTES_DISABLE_IN => NOTES_DISABLE_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_ACTIVATION_TYPE_IN => FLG_ACTIVATION_TYPE_IN,
DT_ENABLE_IN => DT_ENABLE_IN,
ID_PROF_ENABLE_IN => ID_PROF_ENABLE_IN,
NOTES_ENABLE_IN => NOTES_ENABLE_IN,
DT_ACTIVATION_IN => DT_ACTIVATION_IN,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
RETURN l_pky;
END ins;

-- Insert one row with function, return generated primary key
FUNCTION ins
(
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE
) RETURN epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE
IS
l_pky    epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE := next_key;
rows_out table_varchar;
BEGIN
ins(
ID_EPIS_FAST_TRACK_HIST_IN => l_pky,
ID_EPIS_TRIAGE_IN => ID_EPIS_TRIAGE_IN,
ID_FAST_TRACK_IN => ID_FAST_TRACK_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
ID_PROF_DISABLE_IN => ID_PROF_DISABLE_IN,
DT_DISABLE_IN => DT_DISABLE_IN,
ID_FAST_TRACK_DISABLE_IN => ID_FAST_TRACK_DISABLE_IN,
NOTES_DISABLE_IN => NOTES_DISABLE_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_ACTIVATION_TYPE_IN => FLG_ACTIVATION_TYPE_IN,
DT_ENABLE_IN => DT_ENABLE_IN,
ID_PROF_ENABLE_IN => ID_PROF_ENABLE_IN,
NOTES_ENABLE_IN => NOTES_ENABLE_IN,
DT_ACTIVATION_IN => DT_ACTIVATION_IN,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
RETURN l_pky;
END ins;

PROCEDURE ins
(
ID_EPIS_FAST_TRACK_HIST_in IN epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE,
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
handle_error_in IN BOOLEAN := TRUE,
rows_out OUT table_varchar
) IS
BEGIN
INSERT INTO epis_fast_track_hist
(
ID_EPIS_FAST_TRACK_HIST,
ID_EPIS_TRIAGE,
ID_FAST_TRACK,
FLG_STATUS,
ID_PROF_DISABLE,
DT_DISABLE,
ID_FAST_TRACK_DISABLE,
NOTES_DISABLE,
CREATE_USER,
CREATE_TIME,
CREATE_INSTITUTION,
UPDATE_USER,
UPDATE_TIME,
UPDATE_INSTITUTION,
FLG_TYPE,
FLG_ACTIVATION_TYPE,
DT_ENABLE,
ID_PROF_ENABLE,
NOTES_ENABLE,
DT_ACTIVATION
)
 VALUES
(
ID_EPIS_FAST_TRACK_HIST_IN,
ID_EPIS_TRIAGE_IN,
ID_FAST_TRACK_IN,
FLG_STATUS_IN,
ID_PROF_DISABLE_IN,
DT_DISABLE_IN,
ID_FAST_TRACK_DISABLE_IN,
NOTES_DISABLE_IN,
CREATE_USER_IN,
CREATE_TIME_IN,
CREATE_INSTITUTION_IN,
UPDATE_USER_IN,
UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN,
FLG_TYPE_IN,
FLG_ACTIVATION_TYPE_IN,
DT_ENABLE_IN,
ID_PROF_ENABLE_IN,
NOTES_ENABLE_IN,
DT_ACTIVATION_IN
)
RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end ins;

PROCEDURE ins
(
ID_EPIS_FAST_TRACK_HIST_in IN epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE,
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
handle_error_in IN BOOLEAN := TRUE
) IS
rows_out table_varchar;
BEGIN
ins(
ID_EPIS_FAST_TRACK_HIST_IN => ID_EPIS_FAST_TRACK_HIST_IN,
ID_EPIS_TRIAGE_IN => ID_EPIS_TRIAGE_IN,
ID_FAST_TRACK_IN => ID_FAST_TRACK_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
ID_PROF_DISABLE_IN => ID_PROF_DISABLE_IN,
DT_DISABLE_IN => DT_DISABLE_IN,
ID_FAST_TRACK_DISABLE_IN => ID_FAST_TRACK_DISABLE_IN,
NOTES_DISABLE_IN => NOTES_DISABLE_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_ACTIVATION_TYPE_IN => FLG_ACTIVATION_TYPE_IN,
DT_ENABLE_IN => DT_ENABLE_IN,
ID_PROF_ENABLE_IN => ID_PROF_ENABLE_IN,
NOTES_ENABLE_IN => NOTES_ENABLE_IN,
DT_ACTIVATION_IN => DT_ACTIVATION_IN,
handle_error_in => handle_error_in,
rows_out => rows_out);
END ins;

PROCEDURE ins
(
rec_in          IN epis_fast_track_hist%ROWTYPE,
gen_pky_in      IN BOOLEAN DEFAULT FALSE,
sequence_in     IN VARCHAR2 := NULL,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
) IS
l_rec epis_fast_track_hist%ROWTYPE := rec_in;
BEGIN
IF gen_pky_in
THEN
l_rec.ID_EPIS_FAST_TRACK_HIST := next_key(sequence_in);
END IF;

ins(
ID_EPIS_FAST_TRACK_HIST_IN => l_rec.ID_EPIS_FAST_TRACK_HIST,
ID_EPIS_TRIAGE_IN => l_rec.ID_EPIS_TRIAGE,
ID_FAST_TRACK_IN => l_rec.ID_FAST_TRACK,
FLG_STATUS_IN => l_rec.FLG_STATUS,
ID_PROF_DISABLE_IN => l_rec.ID_PROF_DISABLE,
DT_DISABLE_IN => l_rec.DT_DISABLE,
ID_FAST_TRACK_DISABLE_IN => l_rec.ID_FAST_TRACK_DISABLE,
NOTES_DISABLE_IN => l_rec.NOTES_DISABLE,
CREATE_USER_IN => l_rec.CREATE_USER,
CREATE_TIME_IN => l_rec.CREATE_TIME,
CREATE_INSTITUTION_IN => l_rec.CREATE_INSTITUTION,
UPDATE_USER_IN => l_rec.UPDATE_USER,
UPDATE_TIME_IN => l_rec.UPDATE_TIME,
UPDATE_INSTITUTION_IN => l_rec.UPDATE_INSTITUTION,
FLG_TYPE_IN => l_rec.FLG_TYPE,
FLG_ACTIVATION_TYPE_IN => l_rec.FLG_ACTIVATION_TYPE,
DT_ENABLE_IN => l_rec.DT_ENABLE,
ID_PROF_ENABLE_IN => l_rec.ID_PROF_ENABLE,
NOTES_ENABLE_IN => l_rec.NOTES_ENABLE,
DT_ACTIVATION_IN => l_rec.DT_ACTIVATION,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
END ins;

PROCEDURE ins
(
rec_in          IN epis_fast_track_hist%ROWTYPE,
gen_pky_in      IN BOOLEAN DEFAULT FALSE,
sequence_in     IN VARCHAR2 := NULL,
handle_error_in IN BOOLEAN := TRUE
) IS
rows_out table_varchar;
BEGIN
ins(rec_in          => rec_in,
gen_pky_in      => gen_pky_in,
sequence_in     => sequence_in,
handle_error_in => handle_error_in,
rows_out        => rows_out);
END ins;

-- Insert a collection of rows using FORALL; all primary key values
-- must have already been generated, or are handled in triggers
PROCEDURE ins
(
rows_in         IN epis_fast_track_hist_tc,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
IS
BEGIN
IF rows_in.COUNT = 0
THEN
NULL;
ELSE
FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
INSERT INTO epis_fast_track_hist
VALUES rows_in
(indx)
RETURNING ROWID BULK COLLECT INTO rows_out;
END IF;

EXCEPTION
WHEN e_forall_error THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
LOOP
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END LOOP;
END IF;
WHEN OTHERS THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

END ins;

-- Insert a collection of rows using FORALL; all primary key values
-- must have already been generated, or are handled in triggers
PROCEDURE ins
(
rows_in         IN epis_fast_track_hist_tc,
handle_error_in IN BOOLEAN := TRUE
)
IS
rows_out table_varchar;
BEGIN
ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
END ins;

-- Update any/all columns by primary key. If you pass NULL, then
-- the current column value is set to itself. If you need a more
-- selected UPDATE then use one of the onecol procedures below.
PROCEDURE upd
(
ID_EPIS_FAST_TRACK_HIST_in IN epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE,
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_EPIS_TRIAGE_nin IN BOOLEAN := TRUE,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
ID_FAST_TRACK_nin IN BOOLEAN := TRUE,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_STATUS_nin IN BOOLEAN := TRUE,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
ID_PROF_DISABLE_nin IN BOOLEAN := TRUE,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_nin IN BOOLEAN := TRUE,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_nin IN BOOLEAN := TRUE,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_TYPE_nin IN BOOLEAN := TRUE,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_nin IN BOOLEAN := TRUE,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
DT_ENABLE_nin IN BOOLEAN := TRUE,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_nin IN BOOLEAN := TRUE,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_nin IN BOOLEAN := TRUE,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
DT_ACTIVATION_nin IN BOOLEAN := TRUE,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
)
is
l_rows_out             table_varchar;
l_ID_EPIS_TRIAGE_n number(1) := sys.diutil.bool_to_int(ID_EPIS_TRIAGE_nin);
l_ID_FAST_TRACK_n number(1) := sys.diutil.bool_to_int(ID_FAST_TRACK_nin);
l_FLG_STATUS_n number(1) := sys.diutil.bool_to_int(FLG_STATUS_nin);
l_ID_PROF_DISABLE_n number(1) := sys.diutil.bool_to_int(ID_PROF_DISABLE_nin);
l_DT_DISABLE_n number(1) := sys.diutil.bool_to_int(DT_DISABLE_nin);
l_ID_FAST_TRACK_DISABLE_n number(1) := sys.diutil.bool_to_int(ID_FAST_TRACK_DISABLE_nin);
l_NOTES_DISABLE_n number(1) := sys.diutil.bool_to_int(NOTES_DISABLE_nin);
l_CREATE_USER_n number(1) := sys.diutil.bool_to_int(CREATE_USER_nin);
l_CREATE_TIME_n number(1) := sys.diutil.bool_to_int(CREATE_TIME_nin);
l_CREATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
l_UPDATE_USER_n number(1) := sys.diutil.bool_to_int(UPDATE_USER_nin);
l_UPDATE_TIME_n number(1) := sys.diutil.bool_to_int(UPDATE_TIME_nin);
l_UPDATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
l_FLG_TYPE_n number(1) := sys.diutil.bool_to_int(FLG_TYPE_nin);
l_FLG_ACTIVATION_TYPE_n number(1) := sys.diutil.bool_to_int(FLG_ACTIVATION_TYPE_nin);
l_DT_ENABLE_n number(1) := sys.diutil.bool_to_int(DT_ENABLE_nin);
l_ID_PROF_ENABLE_n number(1) := sys.diutil.bool_to_int(ID_PROF_ENABLE_nin);
l_NOTES_ENABLE_n number(1) := sys.diutil.bool_to_int(NOTES_ENABLE_nin);
l_DT_ACTIVATION_n number(1) := sys.diutil.bool_to_int(DT_ACTIVATION_nin);
begin

UPDATE epis_fast_track_hist
SET
ID_EPIS_TRIAGE = decode(l_ID_EPIS_TRIAGE_n, 0, ID_EPIS_TRIAGE_in, nvl(ID_EPIS_TRIAGE_in, ID_EPIS_TRIAGE)),
ID_FAST_TRACK = decode(l_ID_FAST_TRACK_n, 0, ID_FAST_TRACK_in, nvl(ID_FAST_TRACK_in, ID_FAST_TRACK)),
FLG_STATUS = decode(l_FLG_STATUS_n, 0, FLG_STATUS_in, nvl(FLG_STATUS_in, FLG_STATUS)),
ID_PROF_DISABLE = decode(l_ID_PROF_DISABLE_n, 0, ID_PROF_DISABLE_in, nvl(ID_PROF_DISABLE_in, ID_PROF_DISABLE)),
DT_DISABLE = decode(l_DT_DISABLE_n, 0, DT_DISABLE_in, nvl(DT_DISABLE_in, DT_DISABLE)),
ID_FAST_TRACK_DISABLE = decode(l_ID_FAST_TRACK_DISABLE_n, 0, ID_FAST_TRACK_DISABLE_in, nvl(ID_FAST_TRACK_DISABLE_in, ID_FAST_TRACK_DISABLE)),
NOTES_DISABLE = decode(l_NOTES_DISABLE_n, 0, NOTES_DISABLE_in, nvl(NOTES_DISABLE_in, NOTES_DISABLE)),
CREATE_USER = decode(l_CREATE_USER_n, 0, CREATE_USER_in, nvl(CREATE_USER_in, CREATE_USER)),
CREATE_TIME = decode(l_CREATE_TIME_n, 0, CREATE_TIME_in, nvl(CREATE_TIME_in, CREATE_TIME)),
CREATE_INSTITUTION = decode(l_CREATE_INSTITUTION_n, 0, CREATE_INSTITUTION_in, nvl(CREATE_INSTITUTION_in, CREATE_INSTITUTION)),
UPDATE_USER = decode(l_UPDATE_USER_n, 0, UPDATE_USER_in, nvl(UPDATE_USER_in, UPDATE_USER)),
UPDATE_TIME = decode(l_UPDATE_TIME_n, 0, UPDATE_TIME_in, nvl(UPDATE_TIME_in, UPDATE_TIME)),
UPDATE_INSTITUTION = decode(l_UPDATE_INSTITUTION_n, 0, UPDATE_INSTITUTION_in, nvl(UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)),
FLG_TYPE = decode(l_FLG_TYPE_n, 0, FLG_TYPE_in, nvl(FLG_TYPE_in, FLG_TYPE)),
FLG_ACTIVATION_TYPE = decode(l_FLG_ACTIVATION_TYPE_n, 0, FLG_ACTIVATION_TYPE_in, nvl(FLG_ACTIVATION_TYPE_in, FLG_ACTIVATION_TYPE)),
DT_ENABLE = decode(l_DT_ENABLE_n, 0, DT_ENABLE_in, nvl(DT_ENABLE_in, DT_ENABLE)),
ID_PROF_ENABLE = decode(l_ID_PROF_ENABLE_n, 0, ID_PROF_ENABLE_in, nvl(ID_PROF_ENABLE_in, ID_PROF_ENABLE)),
NOTES_ENABLE = decode(l_NOTES_ENABLE_n, 0, NOTES_ENABLE_in, nvl(NOTES_ENABLE_in, NOTES_ENABLE)),
DT_ACTIVATION = decode(l_DT_ACTIVATION_n, 0, DT_ACTIVATION_in, nvl(DT_ACTIVATION_in, DT_ACTIVATION))
 WHERE
ID_EPIS_FAST_TRACK_HIST = ID_EPIS_FAST_TRACK_HIST_IN
RETURNING ROWID BULK COLLECT INTO l_rows_out;
IF (rows_out IS NULL)
THEN
rows_out := table_varchar();
END IF;
rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end upd;

-- Update any/all columns by primary key. If you pass NULL, then
-- the current column value is set to itself. If you need a more
-- selected UPDATE then use one of the onecol procedures below.
PROCEDURE upd
(
ID_EPIS_FAST_TRACK_HIST_in IN epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE,
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_EPIS_TRIAGE_nin IN BOOLEAN := TRUE,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
ID_FAST_TRACK_nin IN BOOLEAN := TRUE,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_STATUS_nin IN BOOLEAN := TRUE,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
ID_PROF_DISABLE_nin IN BOOLEAN := TRUE,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_nin IN BOOLEAN := TRUE,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_nin IN BOOLEAN := TRUE,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_TYPE_nin IN BOOLEAN := TRUE,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_nin IN BOOLEAN := TRUE,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
DT_ENABLE_nin IN BOOLEAN := TRUE,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_nin IN BOOLEAN := TRUE,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_nin IN BOOLEAN := TRUE,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
DT_ACTIVATION_nin IN BOOLEAN := TRUE,
handle_error_in        IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd(
ID_EPIS_FAST_TRACK_HIST_IN => ID_EPIS_FAST_TRACK_HIST_IN,
ID_EPIS_TRIAGE_IN => ID_EPIS_TRIAGE_IN,
ID_EPIS_TRIAGE_NIN => ID_EPIS_TRIAGE_NIN,
ID_FAST_TRACK_IN => ID_FAST_TRACK_IN,
ID_FAST_TRACK_NIN => ID_FAST_TRACK_NIN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_STATUS_NIN => FLG_STATUS_NIN,
ID_PROF_DISABLE_IN => ID_PROF_DISABLE_IN,
ID_PROF_DISABLE_NIN => ID_PROF_DISABLE_NIN,
DT_DISABLE_IN => DT_DISABLE_IN,
DT_DISABLE_NIN => DT_DISABLE_NIN,
ID_FAST_TRACK_DISABLE_IN => ID_FAST_TRACK_DISABLE_IN,
ID_FAST_TRACK_DISABLE_NIN => ID_FAST_TRACK_DISABLE_NIN,
NOTES_DISABLE_IN => NOTES_DISABLE_IN,
NOTES_DISABLE_NIN => NOTES_DISABLE_NIN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_USER_NIN => CREATE_USER_NIN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_TIME_NIN => CREATE_TIME_NIN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
CREATE_INSTITUTION_NIN => CREATE_INSTITUTION_NIN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_USER_NIN => UPDATE_USER_NIN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_TIME_NIN => UPDATE_TIME_NIN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
UPDATE_INSTITUTION_NIN => UPDATE_INSTITUTION_NIN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_TYPE_NIN => FLG_TYPE_NIN,
FLG_ACTIVATION_TYPE_IN => FLG_ACTIVATION_TYPE_IN,
FLG_ACTIVATION_TYPE_NIN => FLG_ACTIVATION_TYPE_NIN,
DT_ENABLE_IN => DT_ENABLE_IN,
DT_ENABLE_NIN => DT_ENABLE_NIN,
ID_PROF_ENABLE_IN => ID_PROF_ENABLE_IN,
ID_PROF_ENABLE_NIN => ID_PROF_ENABLE_NIN,
NOTES_ENABLE_IN => NOTES_ENABLE_IN,
NOTES_ENABLE_NIN => NOTES_ENABLE_NIN,
DT_ACTIVATION_IN => DT_ACTIVATION_IN,
DT_ACTIVATION_NIN => DT_ACTIVATION_NIN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update any/all columns by dynamic WHERE
-- If you pass NULL, then the current column value is set to itself
PROCEDURE upd
(
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_EPIS_TRIAGE_nin IN BOOLEAN := TRUE,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
ID_FAST_TRACK_nin IN BOOLEAN := TRUE,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_STATUS_nin IN BOOLEAN := TRUE,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
ID_PROF_DISABLE_nin IN BOOLEAN := TRUE,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_nin IN BOOLEAN := TRUE,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_nin IN BOOLEAN := TRUE,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_TYPE_nin IN BOOLEAN := TRUE,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_nin IN BOOLEAN := TRUE,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
DT_ENABLE_nin IN BOOLEAN := TRUE,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_nin IN BOOLEAN := TRUE,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_nin IN BOOLEAN := TRUE,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
DT_ACTIVATION_nin IN BOOLEAN := TRUE,
where_in               IN VARCHAR2,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
)
is
l_sql                  VARCHAR2(32767);
l_rows_out             table_varchar;
l_ID_EPIS_TRIAGE_n number(1) := sys.diutil.bool_to_int(ID_EPIS_TRIAGE_nin);
l_ID_FAST_TRACK_n number(1) := sys.diutil.bool_to_int(ID_FAST_TRACK_nin);
l_FLG_STATUS_n number(1) := sys.diutil.bool_to_int(FLG_STATUS_nin);
l_ID_PROF_DISABLE_n number(1) := sys.diutil.bool_to_int(ID_PROF_DISABLE_nin);
l_DT_DISABLE_n number(1) := sys.diutil.bool_to_int(DT_DISABLE_nin);
l_ID_FAST_TRACK_DISABLE_n number(1) := sys.diutil.bool_to_int(ID_FAST_TRACK_DISABLE_nin);
l_NOTES_DISABLE_n number(1) := sys.diutil.bool_to_int(NOTES_DISABLE_nin);
l_CREATE_USER_n number(1) := sys.diutil.bool_to_int(CREATE_USER_nin);
l_CREATE_TIME_n number(1) := sys.diutil.bool_to_int(CREATE_TIME_nin);
l_CREATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
l_UPDATE_USER_n number(1) := sys.diutil.bool_to_int(UPDATE_USER_nin);
l_UPDATE_TIME_n number(1) := sys.diutil.bool_to_int(UPDATE_TIME_nin);
l_UPDATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
l_FLG_TYPE_n number(1) := sys.diutil.bool_to_int(FLG_TYPE_nin);
l_FLG_ACTIVATION_TYPE_n number(1) := sys.diutil.bool_to_int(FLG_ACTIVATION_TYPE_nin);
l_DT_ENABLE_n number(1) := sys.diutil.bool_to_int(DT_ENABLE_nin);
l_ID_PROF_ENABLE_n number(1) := sys.diutil.bool_to_int(ID_PROF_ENABLE_nin);
l_NOTES_ENABLE_n number(1) := sys.diutil.bool_to_int(NOTES_ENABLE_nin);
l_DT_ACTIVATION_n number(1) := sys.diutil.bool_to_int(DT_ACTIVATION_nin);
begin
l_ID_EPIS_TRIAGE_n := sys.diutil.bool_to_int(ID_EPIS_TRIAGE_nin);
l_ID_FAST_TRACK_n := sys.diutil.bool_to_int(ID_FAST_TRACK_nin);
l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
l_ID_PROF_DISABLE_n := sys.diutil.bool_to_int(ID_PROF_DISABLE_nin);
l_DT_DISABLE_n := sys.diutil.bool_to_int(DT_DISABLE_nin);
l_ID_FAST_TRACK_DISABLE_n := sys.diutil.bool_to_int(ID_FAST_TRACK_DISABLE_nin);
l_NOTES_DISABLE_n := sys.diutil.bool_to_int(NOTES_DISABLE_nin);
l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
l_FLG_TYPE_n := sys.diutil.bool_to_int(FLG_TYPE_nin);
l_FLG_ACTIVATION_TYPE_n := sys.diutil.bool_to_int(FLG_ACTIVATION_TYPE_nin);
l_DT_ENABLE_n := sys.diutil.bool_to_int(DT_ENABLE_nin);
l_ID_PROF_ENABLE_n := sys.diutil.bool_to_int(ID_PROF_ENABLE_nin);
l_NOTES_ENABLE_n := sys.diutil.bool_to_int(NOTES_ENABLE_nin);
l_DT_ACTIVATION_n := sys.diutil.bool_to_int(DT_ACTIVATION_nin);
l_sql := 'UPDATE epis_fast_track_hist SET' ||
' ID_EPIS_TRIAGE = decode (' || l_ID_EPIS_TRIAGE_n || ',0,:ID_EPIS_TRIAGE_in, NVL (:ID_EPIS_TRIAGE_in, ID_EPIS_TRIAGE)) ' ||',' ||
' ID_FAST_TRACK = decode (' || l_ID_FAST_TRACK_n || ',0,:ID_FAST_TRACK_in, NVL (:ID_FAST_TRACK_in, ID_FAST_TRACK)) ' ||',' ||
' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' ||',' ||
' ID_PROF_DISABLE = decode (' || l_ID_PROF_DISABLE_n || ',0,:ID_PROF_DISABLE_in, NVL (:ID_PROF_DISABLE_in, ID_PROF_DISABLE)) ' ||',' ||
' DT_DISABLE = decode (' || l_DT_DISABLE_n || ',0,:DT_DISABLE_in, NVL (:DT_DISABLE_in, DT_DISABLE)) ' ||',' ||
' ID_FAST_TRACK_DISABLE = decode (' || l_ID_FAST_TRACK_DISABLE_n || ',0,:ID_FAST_TRACK_DISABLE_in, NVL (:ID_FAST_TRACK_DISABLE_in, ID_FAST_TRACK_DISABLE)) ' ||',' ||
' NOTES_DISABLE = decode (' || l_NOTES_DISABLE_n || ',0,:NOTES_DISABLE_in, NVL (:NOTES_DISABLE_in, NOTES_DISABLE)) ' ||',' ||
' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' ||',' ||
' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' ||',' ||
' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' ||',' ||
' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' ||',' ||
' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' ||',' ||
' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' ||',' ||
' FLG_TYPE = decode (' || l_FLG_TYPE_n || ',0,:FLG_TYPE_in, NVL (:FLG_TYPE_in, FLG_TYPE)) ' ||',' ||
' FLG_ACTIVATION_TYPE = decode (' || l_FLG_ACTIVATION_TYPE_n || ',0,:FLG_ACTIVATION_TYPE_in, NVL (:FLG_ACTIVATION_TYPE_in, FLG_ACTIVATION_TYPE)) ' ||',' ||
' DT_ENABLE = decode (' || l_DT_ENABLE_n || ',0,:DT_ENABLE_in, NVL (:DT_ENABLE_in, DT_ENABLE)) ' ||',' ||
' ID_PROF_ENABLE = decode (' || l_ID_PROF_ENABLE_n || ',0,:ID_PROF_ENABLE_in, NVL (:ID_PROF_ENABLE_in, ID_PROF_ENABLE)) ' ||',' ||
' NOTES_ENABLE = decode (' || l_NOTES_ENABLE_n || ',0,:NOTES_ENABLE_in, NVL (:NOTES_ENABLE_in, NOTES_ENABLE)) ' ||',' ||
' DT_ACTIVATION = decode (' || l_DT_ACTIVATION_n || ',0,:DT_ACTIVATION_in, NVL (:DT_ACTIVATION_in, DT_ACTIVATION)) ' ||
' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
USING IN
ID_EPIS_TRIAGE_IN,
ID_FAST_TRACK_IN,
FLG_STATUS_IN,
ID_PROF_DISABLE_IN,
DT_DISABLE_IN,
ID_FAST_TRACK_DISABLE_IN,
NOTES_DISABLE_IN,
CREATE_USER_IN,
CREATE_TIME_IN,
CREATE_INSTITUTION_IN,
UPDATE_USER_IN,
UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN,
FLG_TYPE_IN,
FLG_ACTIVATION_TYPE_IN,
DT_ENABLE_IN,
ID_PROF_ENABLE_IN,
NOTES_ENABLE_IN,
DT_ACTIVATION_IN,
OUT l_rows_out;
IF (rows_out IS NULL)
THEN
rows_out := table_varchar();
END IF;
rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end upd;

--Update any/all columns by dynamic WHERE
-- If you pass NULL, then the current column value is set to itself
PROCEDURE upd
(
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_EPIS_TRIAGE_nin IN BOOLEAN := TRUE,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
ID_FAST_TRACK_nin IN BOOLEAN := TRUE,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_STATUS_nin IN BOOLEAN := TRUE,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
ID_PROF_DISABLE_nin IN BOOLEAN := TRUE,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_nin IN BOOLEAN := TRUE,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_nin IN BOOLEAN := TRUE,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_TYPE_nin IN BOOLEAN := TRUE,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_nin IN BOOLEAN := TRUE,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
DT_ENABLE_nin IN BOOLEAN := TRUE,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_nin IN BOOLEAN := TRUE,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_nin IN BOOLEAN := TRUE,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
DT_ACTIVATION_nin IN BOOLEAN := TRUE,
where_in               IN VARCHAR2,
handle_error_in        IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd(
ID_EPIS_TRIAGE_IN => ID_EPIS_TRIAGE_IN,
ID_EPIS_TRIAGE_NIN => ID_EPIS_TRIAGE_NIN,
ID_FAST_TRACK_IN => ID_FAST_TRACK_IN,
ID_FAST_TRACK_NIN => ID_FAST_TRACK_NIN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_STATUS_NIN => FLG_STATUS_NIN,
ID_PROF_DISABLE_IN => ID_PROF_DISABLE_IN,
ID_PROF_DISABLE_NIN => ID_PROF_DISABLE_NIN,
DT_DISABLE_IN => DT_DISABLE_IN,
DT_DISABLE_NIN => DT_DISABLE_NIN,
ID_FAST_TRACK_DISABLE_IN => ID_FAST_TRACK_DISABLE_IN,
ID_FAST_TRACK_DISABLE_NIN => ID_FAST_TRACK_DISABLE_NIN,
NOTES_DISABLE_IN => NOTES_DISABLE_IN,
NOTES_DISABLE_NIN => NOTES_DISABLE_NIN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_USER_NIN => CREATE_USER_NIN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_TIME_NIN => CREATE_TIME_NIN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
CREATE_INSTITUTION_NIN => CREATE_INSTITUTION_NIN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_USER_NIN => UPDATE_USER_NIN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_TIME_NIN => UPDATE_TIME_NIN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
UPDATE_INSTITUTION_NIN => UPDATE_INSTITUTION_NIN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_TYPE_NIN => FLG_TYPE_NIN,
FLG_ACTIVATION_TYPE_IN => FLG_ACTIVATION_TYPE_IN,
FLG_ACTIVATION_TYPE_NIN => FLG_ACTIVATION_TYPE_NIN,
DT_ENABLE_IN => DT_ENABLE_IN,
DT_ENABLE_NIN => DT_ENABLE_NIN,
ID_PROF_ENABLE_IN => ID_PROF_ENABLE_IN,
ID_PROF_ENABLE_NIN => ID_PROF_ENABLE_NIN,
NOTES_ENABLE_IN => NOTES_ENABLE_IN,
NOTES_ENABLE_NIN => NOTES_ENABLE_NIN,
DT_ACTIVATION_IN => DT_ACTIVATION_IN,
DT_ACTIVATION_NIN => DT_ACTIVATION_NIN,
where_in               => where_in,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update/insert columns (with rows_out)
PROCEDURE upd_ins
(
ID_EPIS_FAST_TRACK_HIST_in IN epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE,
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
)
is
begin
upd(
ID_EPIS_FAST_TRACK_HIST_IN => ID_EPIS_FAST_TRACK_HIST_IN,
ID_EPIS_TRIAGE_IN => ID_EPIS_TRIAGE_IN,
ID_FAST_TRACK_IN => ID_FAST_TRACK_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
ID_PROF_DISABLE_IN => ID_PROF_DISABLE_IN,
DT_DISABLE_IN => DT_DISABLE_IN,
ID_FAST_TRACK_DISABLE_IN => ID_FAST_TRACK_DISABLE_IN,
NOTES_DISABLE_IN => NOTES_DISABLE_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_ACTIVATION_TYPE_IN => FLG_ACTIVATION_TYPE_IN,
DT_ENABLE_IN => DT_ENABLE_IN,
ID_PROF_ENABLE_IN => ID_PROF_ENABLE_IN,
NOTES_ENABLE_IN => NOTES_ENABLE_IN,
DT_ACTIVATION_IN => DT_ACTIVATION_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
IF SQL%ROWCOUNT = 0
THEN
ins(
ID_EPIS_FAST_TRACK_HIST_IN => ID_EPIS_FAST_TRACK_HIST_IN,
ID_EPIS_TRIAGE_IN => ID_EPIS_TRIAGE_IN,
ID_FAST_TRACK_IN => ID_FAST_TRACK_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
ID_PROF_DISABLE_IN => ID_PROF_DISABLE_IN,
DT_DISABLE_IN => DT_DISABLE_IN,
ID_FAST_TRACK_DISABLE_IN => ID_FAST_TRACK_DISABLE_IN,
NOTES_DISABLE_IN => NOTES_DISABLE_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_ACTIVATION_TYPE_IN => FLG_ACTIVATION_TYPE_IN,
DT_ENABLE_IN => DT_ENABLE_IN,
ID_PROF_ENABLE_IN => ID_PROF_ENABLE_IN,
NOTES_ENABLE_IN => NOTES_ENABLE_IN,
DT_ACTIVATION_IN => DT_ACTIVATION_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
END IF;
end upd_ins;

--Update/insert columns (without rows_out)
PROCEDURE upd_ins
(
ID_EPIS_FAST_TRACK_HIST_in IN epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE,
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE DEFAULT NULL,
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_FAST_TRACK_HIST.FLG_STATUS%TYPE DEFAULT NULL,
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE DEFAULT NULL,
DT_DISABLE_in IN EPIS_FAST_TRACK_HIST.DT_DISABLE%TYPE DEFAULT NULL,
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE DEFAULT NULL,
NOTES_DISABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_DISABLE%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_FAST_TRACK_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_FAST_TRACK_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_FAST_TRACK_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_FAST_TRACK_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_FAST_TRACK_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_ACTIVATION_TYPE_in IN EPIS_FAST_TRACK_HIST.FLG_ACTIVATION_TYPE%TYPE DEFAULT NULL,
DT_ENABLE_in IN EPIS_FAST_TRACK_HIST.DT_ENABLE%TYPE DEFAULT NULL,
ID_PROF_ENABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_ENABLE%TYPE DEFAULT NULL,
NOTES_ENABLE_in IN EPIS_FAST_TRACK_HIST.NOTES_ENABLE%TYPE DEFAULT NULL,
DT_ACTIVATION_in IN EPIS_FAST_TRACK_HIST.DT_ACTIVATION%TYPE DEFAULT NULL,
handle_error_in        IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd_ins(
ID_EPIS_FAST_TRACK_HIST_IN,
ID_EPIS_TRIAGE_IN,
ID_FAST_TRACK_IN,
FLG_STATUS_IN,
ID_PROF_DISABLE_IN,
DT_DISABLE_IN,
ID_FAST_TRACK_DISABLE_IN,
NOTES_DISABLE_IN,
CREATE_USER_IN,
CREATE_TIME_IN,
CREATE_INSTITUTION_IN,
UPDATE_USER_IN,
UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN,
FLG_TYPE_IN,
FLG_ACTIVATION_TYPE_IN,
DT_ENABLE_IN,
ID_PROF_ENABLE_IN,
NOTES_ENABLE_IN,
DT_ACTIVATION_IN,
handle_error_in,
rows_out);
end upd_ins;

--Update by record (with rows_out)
PROCEDURE upd
(
rec_in          IN epis_fast_track_hist%ROWTYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        IN OUT table_varchar
)
is
begin
upd(
ID_EPIS_FAST_TRACK_HIST_IN => rec_in.ID_EPIS_FAST_TRACK_HIST,
ID_EPIS_TRIAGE_IN => rec_in.ID_EPIS_TRIAGE,
ID_FAST_TRACK_IN => rec_in.ID_FAST_TRACK,
FLG_STATUS_IN => rec_in.FLG_STATUS,
ID_PROF_DISABLE_IN => rec_in.ID_PROF_DISABLE,
DT_DISABLE_IN => rec_in.DT_DISABLE,
ID_FAST_TRACK_DISABLE_IN => rec_in.ID_FAST_TRACK_DISABLE,
NOTES_DISABLE_IN => rec_in.NOTES_DISABLE,
CREATE_USER_IN => rec_in.CREATE_USER,
CREATE_TIME_IN => rec_in.CREATE_TIME,
CREATE_INSTITUTION_IN => rec_in.CREATE_INSTITUTION,
UPDATE_USER_IN => rec_in.UPDATE_USER,
UPDATE_TIME_IN => rec_in.UPDATE_TIME,
UPDATE_INSTITUTION_IN => rec_in.UPDATE_INSTITUTION,
FLG_TYPE_IN => rec_in.FLG_TYPE,
FLG_ACTIVATION_TYPE_IN => rec_in.FLG_ACTIVATION_TYPE,
DT_ENABLE_IN => rec_in.DT_ENABLE,
ID_PROF_ENABLE_IN => rec_in.ID_PROF_ENABLE,
NOTES_ENABLE_IN => rec_in.NOTES_ENABLE,
DT_ACTIVATION_IN => rec_in.DT_ACTIVATION,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update by record (without rows_out)
PROCEDURE upd
(
rec_in          IN epis_fast_track_hist%ROWTYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd(
ID_EPIS_FAST_TRACK_HIST_IN => rec_in.ID_EPIS_FAST_TRACK_HIST,
ID_EPIS_TRIAGE_IN => rec_in.ID_EPIS_TRIAGE,
ID_FAST_TRACK_IN => rec_in.ID_FAST_TRACK,
FLG_STATUS_IN => rec_in.FLG_STATUS,
ID_PROF_DISABLE_IN => rec_in.ID_PROF_DISABLE,
DT_DISABLE_IN => rec_in.DT_DISABLE,
ID_FAST_TRACK_DISABLE_IN => rec_in.ID_FAST_TRACK_DISABLE,
NOTES_DISABLE_IN => rec_in.NOTES_DISABLE,
CREATE_USER_IN => rec_in.CREATE_USER,
CREATE_TIME_IN => rec_in.CREATE_TIME,
CREATE_INSTITUTION_IN => rec_in.CREATE_INSTITUTION,
UPDATE_USER_IN => rec_in.UPDATE_USER,
UPDATE_TIME_IN => rec_in.UPDATE_TIME,
UPDATE_INSTITUTION_IN => rec_in.UPDATE_INSTITUTION,
FLG_TYPE_IN => rec_in.FLG_TYPE,
FLG_ACTIVATION_TYPE_IN => rec_in.FLG_ACTIVATION_TYPE,
DT_ENABLE_IN => rec_in.DT_ENABLE,
ID_PROF_ENABLE_IN => rec_in.ID_PROF_ENABLE,
NOTES_ENABLE_IN => rec_in.NOTES_ENABLE,
DT_ACTIVATION_IN => rec_in.DT_ACTIVATION,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update with collection (with rows_out)
PROCEDURE upd
(
col_in            IN epis_fast_track_hist_tc,
ignore_if_null_in IN BOOLEAN := TRUE,
handle_error_in   IN BOOLEAN := TRUE,
rows_out          IN OUT table_varchar
)
is
l_ID_EPIS_FAST_TRACK_HIST ID_EPIS_FAST_TRACK_HIST_CC;
l_ID_EPIS_TRIAGE ID_EPIS_TRIAGE_CC;
l_ID_FAST_TRACK ID_FAST_TRACK_CC;
l_FLG_STATUS FLG_STATUS_CC;
l_ID_PROF_DISABLE ID_PROF_DISABLE_CC;
l_DT_DISABLE DT_DISABLE_CC;
l_ID_FAST_TRACK_DISABLE ID_FAST_TRACK_DISABLE_CC;
l_NOTES_DISABLE NOTES_DISABLE_CC;
l_CREATE_USER CREATE_USER_CC;
l_CREATE_TIME CREATE_TIME_CC;
l_CREATE_INSTITUTION CREATE_INSTITUTION_CC;
l_UPDATE_USER UPDATE_USER_CC;
l_UPDATE_TIME UPDATE_TIME_CC;
l_UPDATE_INSTITUTION UPDATE_INSTITUTION_CC;
l_FLG_TYPE FLG_TYPE_CC;
l_FLG_ACTIVATION_TYPE FLG_ACTIVATION_TYPE_CC;
l_DT_ENABLE DT_ENABLE_CC;
l_ID_PROF_ENABLE ID_PROF_ENABLE_CC;
l_NOTES_ENABLE NOTES_ENABLE_CC;
l_DT_ACTIVATION DT_ACTIVATION_CC;
begin
FOR i IN col_in.FIRST .. col_in.LAST
LOOP
l_ID_EPIS_FAST_TRACK_HIST(i) := col_in(i).ID_EPIS_FAST_TRACK_HIST;
l_ID_EPIS_TRIAGE(i) := col_in(i).ID_EPIS_TRIAGE;
l_ID_FAST_TRACK(i) := col_in(i).ID_FAST_TRACK;
l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
l_ID_PROF_DISABLE(i) := col_in(i).ID_PROF_DISABLE;
l_DT_DISABLE(i) := col_in(i).DT_DISABLE;
l_ID_FAST_TRACK_DISABLE(i) := col_in(i).ID_FAST_TRACK_DISABLE;
l_NOTES_DISABLE(i) := col_in(i).NOTES_DISABLE;
l_CREATE_USER(i) := col_in(i).CREATE_USER;
l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
l_FLG_TYPE(i) := col_in(i).FLG_TYPE;
l_FLG_ACTIVATION_TYPE(i) := col_in(i).FLG_ACTIVATION_TYPE;
l_DT_ENABLE(i) := col_in(i).DT_ENABLE;
l_ID_PROF_ENABLE(i) := col_in(i).ID_PROF_ENABLE;
l_NOTES_ENABLE(i) := col_in(i).NOTES_ENABLE;
l_DT_ACTIVATION(i) := col_in(i).DT_ACTIVATION;
END LOOP;
IF nvl(ignore_if_null_in, FALSE)
THEN
-- Set any columns to their current values
-- if incoming value is NULL.
-- Put WHEN clause on column-level triggers!
FORALL i IN col_in.FIRST .. col_in.LAST
UPDATE epis_fast_track_hist
SET 
ID_EPIS_TRIAGE = nvl(l_ID_EPIS_TRIAGE(i), ID_EPIS_TRIAGE),
ID_FAST_TRACK = nvl(l_ID_FAST_TRACK(i), ID_FAST_TRACK),
FLG_STATUS = nvl(l_FLG_STATUS(i), FLG_STATUS),
ID_PROF_DISABLE = nvl(l_ID_PROF_DISABLE(i), ID_PROF_DISABLE),
DT_DISABLE = nvl(l_DT_DISABLE(i), DT_DISABLE),
ID_FAST_TRACK_DISABLE = nvl(l_ID_FAST_TRACK_DISABLE(i), ID_FAST_TRACK_DISABLE),
NOTES_DISABLE = nvl(l_NOTES_DISABLE(i), NOTES_DISABLE),
CREATE_USER = nvl(l_CREATE_USER(i), CREATE_USER),
CREATE_TIME = nvl(l_CREATE_TIME(i), CREATE_TIME),
CREATE_INSTITUTION = nvl(l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
UPDATE_USER = nvl(l_UPDATE_USER(i), UPDATE_USER),
UPDATE_TIME = nvl(l_UPDATE_TIME(i), UPDATE_TIME),
UPDATE_INSTITUTION = nvl(l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
FLG_TYPE = nvl(l_FLG_TYPE(i), FLG_TYPE),
FLG_ACTIVATION_TYPE = nvl(l_FLG_ACTIVATION_TYPE(i), FLG_ACTIVATION_TYPE),
DT_ENABLE = nvl(l_DT_ENABLE(i), DT_ENABLE),
ID_PROF_ENABLE = nvl(l_ID_PROF_ENABLE(i), ID_PROF_ENABLE),
NOTES_ENABLE = nvl(l_NOTES_ENABLE(i), NOTES_ENABLE),
DT_ACTIVATION = nvl(l_DT_ACTIVATION(i), DT_ACTIVATION)
 WHERE 
ID_EPIS_FAST_TRACK_HIST = l_ID_EPIS_FAST_TRACK_HIST(i)
 returning rowid bulk collect into rows_out;
ELSE
FORALL i IN col_in.FIRST .. col_in.LAST
UPDATE epis_fast_track_hist
SET 
ID_EPIS_TRIAGE = l_ID_EPIS_TRIAGE(i),
ID_FAST_TRACK = l_ID_FAST_TRACK(i),
FLG_STATUS = l_FLG_STATUS(i),
ID_PROF_DISABLE = l_ID_PROF_DISABLE(i),
DT_DISABLE = l_DT_DISABLE(i),
ID_FAST_TRACK_DISABLE = l_ID_FAST_TRACK_DISABLE(i),
NOTES_DISABLE = l_NOTES_DISABLE(i),
CREATE_USER = l_CREATE_USER(i),
CREATE_TIME = l_CREATE_TIME(i),
CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
UPDATE_USER = l_UPDATE_USER(i),
UPDATE_TIME = l_UPDATE_TIME(i),
UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
FLG_TYPE = l_FLG_TYPE(i),
FLG_ACTIVATION_TYPE = l_FLG_ACTIVATION_TYPE(i),
DT_ENABLE = l_DT_ENABLE(i),
ID_PROF_ENABLE = l_ID_PROF_ENABLE(i),
NOTES_ENABLE = l_NOTES_ENABLE(i),
DT_ACTIVATION = l_DT_ACTIVATION(i)
 WHERE 
ID_EPIS_FAST_TRACK_HIST = l_ID_EPIS_FAST_TRACK_HIST(i)
 returning rowid bulk collect into rows_out;
END IF;

EXCEPTION
WHEN e_forall_error THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
LOOP
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END LOOP;
END IF;
WHEN OTHERS THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end upd;

--Update with collection (without rows_out)
PROCEDURE upd
(
col_in            IN epis_fast_track_hist_tc,
ignore_if_null_in IN BOOLEAN := TRUE,
handle_error_in   IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
end upd;

--Dynamic update string
FUNCTION dynupdstr
(
colname_in IN all_tab_columns.column_name%TYPE,
where_in   IN VARCHAR2 := NULL
)
RETURN VARCHAR2 IS
BEGIN
RETURN 'BEGIN UPDATE epis_fast_track_hist
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
END dynupdstr;

-- Use Native Dynamic SQL increment a single NUMBER column
-- for all rows specified by the dynamic WHERE clause (with rows_out)
PROCEDURE increment_onecol
(
colname_in         IN all_tab_columns.column_name%TYPE,
where_in           IN VARCHAR2,
increment_value_in IN NUMBER DEFAULT 1,
handle_error_in    IN BOOLEAN := TRUE,
rows_out           OUT table_varchar
)
is
begin
EXECUTE IMMEDIATE 'BEGIN UPDATE epis_fast_track_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in,1) ||
' WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
USING OUT rows_out;
end increment_onecol;

-- Use Native Dynamic SQL increment a single NUMBER column
-- for all rows specified by the dynamic WHERE clause (without rows_out)
PROCEDURE increment_onecol
(
colname_in         IN all_tab_columns.column_name%TYPE,
where_in           IN VARCHAR2,
increment_value_in IN NUMBER DEFAULT 1,
handle_error_in    IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
EXECUTE IMMEDIATE 'UPDATE epis_fast_track_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in,1) ||
' WHERE ' || nvl(where_in, '1=1');
end increment_onecol;

-- Delete one row by primary key
PROCEDURE del
(
ID_EPIS_FAST_TRACK_HIST_in IN epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_fast_track_hist
 WHERE
ID_EPIS_FAST_TRACK_HIST = ID_EPIS_FAST_TRACK_HIST_IN
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del;

-- Delete one row by primary key
PROCEDURE del
(
ID_EPIS_FAST_TRACK_HIST_in IN epis_fast_track_hist.ID_EPIS_FAST_TRACK_HIST%TYPE,
handle_error_in        IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
del(
ID_EPIS_FAST_TRACK_HIST_IN => ID_EPIS_FAST_TRACK_HIST_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del;

-- Delete all rows for this EFTH_EFT_FK foreign key value
PROCEDURE del_EFTH_EFT_FK
(
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_fast_track_hist
 WHERE
ID_EPIS_TRIAGE = ID_EPIS_TRIAGE_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EFTH_EFT_FK;

-- Delete all rows for this EFTH_ETRG_FK foreign key value
PROCEDURE del_EFTH_ETRG_FK
(
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_fast_track_hist
 WHERE
ID_EPIS_TRIAGE = ID_EPIS_TRIAGE_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EFTH_ETRG_FK;

-- Delete all rows for this EFTH_FTD_FK foreign key value
PROCEDURE del_EFTH_FTD_FK
(
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_fast_track_hist
 WHERE
ID_FAST_TRACK_DISABLE = ID_FAST_TRACK_DISABLE_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EFTH_FTD_FK;

-- Delete all rows for this EFTH_FT_FK foreign key value
PROCEDURE del_EFTH_FT_FK
(
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_fast_track_hist
 WHERE
ID_FAST_TRACK = ID_FAST_TRACK_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EFTH_FT_FK;

-- Delete all rows for this EFTH_PROFD_FK foreign key value
PROCEDURE del_EFTH_PROFD_FK
(
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_fast_track_hist
 WHERE
ID_PROF_DISABLE = ID_PROF_DISABLE_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EFTH_PROFD_FK;

-- Delete all rows for this EFTH_EFT_FK foreign key value
PROCEDURE del_EFTH_EFT_FK
(
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EFTH_EFT_FK(
ID_EPIS_TRIAGE_IN => ID_EPIS_TRIAGE_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EFTH_EFT_FK;

-- Delete all rows for this EFTH_ETRG_FK foreign key value
PROCEDURE del_EFTH_ETRG_FK
(
ID_EPIS_TRIAGE_in IN EPIS_FAST_TRACK_HIST.ID_EPIS_TRIAGE%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EFTH_ETRG_FK(
ID_EPIS_TRIAGE_IN => ID_EPIS_TRIAGE_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EFTH_ETRG_FK;

-- Delete all rows for this EFTH_FTD_FK foreign key value
PROCEDURE del_EFTH_FTD_FK
(
ID_FAST_TRACK_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK_DISABLE%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EFTH_FTD_FK(
ID_FAST_TRACK_DISABLE_IN => ID_FAST_TRACK_DISABLE_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EFTH_FTD_FK;

-- Delete all rows for this EFTH_FT_FK foreign key value
PROCEDURE del_EFTH_FT_FK
(
ID_FAST_TRACK_in IN EPIS_FAST_TRACK_HIST.ID_FAST_TRACK%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EFTH_FT_FK(
ID_FAST_TRACK_IN => ID_FAST_TRACK_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EFTH_FT_FK;

-- Delete all rows for this EFTH_PROFD_FK foreign key value
PROCEDURE del_EFTH_PROFD_FK
(
ID_PROF_DISABLE_in IN EPIS_FAST_TRACK_HIST.ID_PROF_DISABLE%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EFTH_PROFD_FK(
ID_PROF_DISABLE_IN => ID_PROF_DISABLE_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EFTH_PROFD_FK;

-- Deletions using dynamic SQL
FUNCTION dyndelstr
(
where_in IN VARCHAR2
)
 RETURN VARCHAR2 is 
begin
IF where_in IS NULL
THEN
RETURN 'DELETE FROM epis_fast_track_hist';
ELSE
RETURN 'DELETE FROM epis_fast_track_hist WHERE ' || where_in;
END IF;
end dyndelstr;
-- Delete all rows specified by dynamic WHERE clause
PROCEDURE del_by
(
where_clause_in IN VARCHAR2,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_by;

-- Delete all rows specified by dynamic WHERE clause
PROCEDURE del_by
(
where_clause_in IN VARCHAR2,
handle_error_in IN BOOLEAN := TRUE
)
is
begin
EXECUTE IMMEDIATE dyndelstr (where_clause_in);

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_by;

-- Initialize a record with default values for columns in the table (prc)
PROCEDURE initrec(epis_fast_track_hist_inout IN OUT epis_fast_track_hist%ROWTYPE)
is
begin
epis_fast_track_hist_inout.ID_EPIS_FAST_TRACK_HIST := NULL;
epis_fast_track_hist_inout.ID_EPIS_TRIAGE := NULL;
epis_fast_track_hist_inout.ID_FAST_TRACK := NULL;
epis_fast_track_hist_inout.FLG_STATUS := NULL;
epis_fast_track_hist_inout.ID_PROF_DISABLE := NULL;
epis_fast_track_hist_inout.DT_DISABLE := NULL;
epis_fast_track_hist_inout.ID_FAST_TRACK_DISABLE := NULL;
epis_fast_track_hist_inout.NOTES_DISABLE := NULL;
epis_fast_track_hist_inout.CREATE_USER := NULL;
epis_fast_track_hist_inout.CREATE_TIME := NULL;
epis_fast_track_hist_inout.CREATE_INSTITUTION := NULL;
epis_fast_track_hist_inout.UPDATE_USER := NULL;
epis_fast_track_hist_inout.UPDATE_TIME := NULL;
epis_fast_track_hist_inout.UPDATE_INSTITUTION := NULL;
epis_fast_track_hist_inout.FLG_TYPE := NULL;
epis_fast_track_hist_inout.FLG_ACTIVATION_TYPE := NULL;
epis_fast_track_hist_inout.DT_ENABLE := NULL;
epis_fast_track_hist_inout.ID_PROF_ENABLE := NULL;
epis_fast_track_hist_inout.NOTES_ENABLE := NULL;
epis_fast_track_hist_inout.DT_ACTIVATION := NULL;
end initrec;

-- Initialize a record with default values for columns in the table (fnc)
FUNCTION initrec RETURN epis_fast_track_hist%ROWTYPE
is
l_epis_fast_track_hist epis_fast_track_hist%ROWTYPE;
begin
return l_epis_fast_track_hist;
end initrec;

--get data from rowid
FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_fast_track_hist_tc
is
data epis_fast_track_hist_tc;
begin
select * bulk collect into data from epis_fast_track_hist
 WHERE rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
return data;
end get_data_rowid;

--get data from rowid (pragma autonomous transacion)
FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_fast_track_hist_tc
is
data epis_fast_track_hist_tc;
PRAGMA AUTONOMOUS_TRANSACTION;
begin
data := get_data_rowid(rows_in);
commit;
return data;

EXCEPTION
WHEN others
THEN
pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
ROLLBACK;

end get_data_rowid_pat;

BEGIN
NULL;
END ts_epis_fast_track_hist;
