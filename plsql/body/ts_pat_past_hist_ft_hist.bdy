/*-- Last Change Revision: $Rev: 1066395 $*/
/*-- Last Change by: $Author: sergio.dias $*/
/*-- Date of last change: $Date: 2011-08-18 10:47:09 +0100 (qui, 18 ago 2011) $*/
CREATE OR REPLACE PACKAGE BODY ts_pat_past_hist_ft_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Junho 9, 2011 11:3:37
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_pat_ph_ft_hist_in  IN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        id_pat_ph_ft_in       IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        text_in               IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        id_patient_in         IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_visit_in           IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_professional_in    IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        dt_register_in        IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        flg_type_in           IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_status_in         IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_canceled_in   IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        dt_cancel_in          IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in       IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        id_doc_area_in        IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pat_past_hist_ft_hist
            (id_pat_ph_ft_hist,
             id_pat_ph_ft,
             text,
             id_patient,
             id_episode,
             id_visit,
             id_professional,
             dt_register,
             flg_type,
             flg_status,
             id_prof_canceled,
             dt_cancel,
             id_cancel_reason,
             cancel_notes,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_doc_area)
        VALUES
            (id_pat_ph_ft_hist_in,
             id_pat_ph_ft_in,
             text_in,
             id_patient_in,
             id_episode_in,
             id_visit_in,
             id_professional_in,
             dt_register_in,
             flg_type_in,
             flg_status_in,
             id_prof_canceled_in,
             dt_cancel_in,
             id_cancel_reason_in,
             cancel_notes_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_doc_area_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_PAST_HIST_FT_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    IF l_name = 'PPH_FTH_FT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_PH_FT',
                                                        value_in           => id_pat_ph_ft_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_pat_ph_ft_hist_in  IN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        id_pat_ph_ft_in       IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        text_in               IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        id_patient_in         IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_visit_in           IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_professional_in    IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        dt_register_in        IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        flg_type_in           IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_status_in         IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_canceled_in   IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        dt_cancel_in          IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in       IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        id_doc_area_in        IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_pat_ph_ft_hist_in  => id_pat_ph_ft_hist_in,
            id_pat_ph_ft_in       => id_pat_ph_ft_in,
            text_in               => text_in,
            id_patient_in         => id_patient_in,
            id_episode_in         => id_episode_in,
            id_visit_in           => id_visit_in,
            id_professional_in    => id_professional_in,
            dt_register_in        => dt_register_in,
            flg_type_in           => flg_type_in,
            flg_status_in         => flg_status_in,
            id_prof_canceled_in   => id_prof_canceled_in,
            dt_cancel_in          => dt_cancel_in,
            id_cancel_reason_in   => id_cancel_reason_in,
            cancel_notes_in       => cancel_notes_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_doc_area_in        => id_doc_area_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    /*
    START Special logic for handling LOB columns....
    */

    PROCEDURE n_ins_clobs_in_chunks
    (
        id_pat_ph_ft_hist_in  IN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        id_pat_ph_ft_in       IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        id_patient_in         IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_visit_in           IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_professional_in    IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        dt_register_in        IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        flg_type_in           IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_status_in         IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_canceled_in   IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        dt_cancel_in          IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in       IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        id_doc_area_in        IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        clob_columns_in       IN varchar2_t,
        clob_pieces_in        IN varchar2_t
    ) IS
        l_text         CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
    BEGIN
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'text_in' THEN
                            IF l_text IS NULL
                            THEN
                                dbms_lob.createtemporary(l_text, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'text_in' THEN
                        dbms_lob.writeappend(l_text, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        ins(id_pat_ph_ft_hist_in  => id_pat_ph_ft_hist_in,
            id_pat_ph_ft_in       => id_pat_ph_ft_in,
            text_in               => l_text,
            id_patient_in         => id_patient_in,
            id_episode_in         => id_episode_in,
            id_visit_in           => id_visit_in,
            id_professional_in    => id_professional_in,
            dt_register_in        => dt_register_in,
            flg_type_in           => flg_type_in,
            flg_status_in         => flg_status_in,
            id_prof_canceled_in   => id_prof_canceled_in,
            dt_cancel_in          => dt_cancel_in,
            id_cancel_reason_in   => id_cancel_reason_in,
            cancel_notes_in       => cancel_notes_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_doc_area_in        => id_doc_area_in,
            handle_error_in       => handle_error_in);
    
    END n_ins_clobs_in_chunks;

    PROCEDURE n_upd_clobs_in_chunks
    (
        id_pat_ph_ft_hist_in  IN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        id_pat_ph_ft_in       IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        id_patient_in         IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_visit_in           IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_professional_in    IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        dt_register_in        IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        flg_type_in           IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_status_in         IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_canceled_in   IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        dt_cancel_in          IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in       IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        id_doc_area_in        IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        ignore_if_null_in     IN BOOLEAN := TRUE,
        handle_error_in       IN BOOLEAN := TRUE,
        clob_columns_in       IN varchar2_t,
        clob_pieces_in        IN varchar2_t
    ) IS
        l_text         CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
        l_rows         PLS_INTEGER;
    BEGIN
    
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'text_in' THEN
                            IF l_text IS NULL
                            THEN
                                dbms_lob.createtemporary(l_text, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'text_in' THEN
                        dbms_lob.writeappend(l_text, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        upd(id_pat_ph_ft_hist_in  => id_pat_ph_ft_hist_in,
            id_pat_ph_ft_in       => id_pat_ph_ft_in,
            text_in               => l_text,
            id_patient_in         => id_patient_in,
            id_episode_in         => id_episode_in,
            id_visit_in           => id_visit_in,
            id_professional_in    => id_professional_in,
            dt_register_in        => dt_register_in,
            flg_type_in           => flg_type_in,
            flg_status_in         => flg_status_in,
            id_prof_canceled_in   => id_prof_canceled_in,
            dt_cancel_in          => dt_cancel_in,
            id_cancel_reason_in   => id_cancel_reason_in,
            cancel_notes_in       => cancel_notes_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_doc_area_in        => id_doc_area_in,
            handle_error_in       => handle_error_in);
    END n_upd_clobs_in_chunks;

    PROCEDURE n_upd_ins_clobs_in_chunks
    (
        id_pat_ph_ft_hist_in  IN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        id_pat_ph_ft_in       IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        id_patient_in         IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_visit_in           IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_professional_in    IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        dt_register_in        IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        flg_type_in           IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_status_in         IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_canceled_in   IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        dt_cancel_in          IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in       IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        id_doc_area_in        IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        ignore_if_null_in     IN BOOLEAN DEFAULT TRUE,
        handle_error_in       IN BOOLEAN DEFAULT TRUE,
        clob_columns_in       IN varchar2_t,
        clob_pieces_in        IN varchar2_t
    ) IS
    BEGIN
        n_upd_clobs_in_chunks(id_pat_ph_ft_hist_in  => id_pat_ph_ft_hist_in,
                              id_pat_ph_ft_in       => id_pat_ph_ft_in,
                              id_patient_in         => id_patient_in,
                              id_episode_in         => id_episode_in,
                              id_visit_in           => id_visit_in,
                              id_professional_in    => id_professional_in,
                              dt_register_in        => dt_register_in,
                              flg_type_in           => flg_type_in,
                              flg_status_in         => flg_status_in,
                              id_prof_canceled_in   => id_prof_canceled_in,
                              dt_cancel_in          => dt_cancel_in,
                              id_cancel_reason_in   => id_cancel_reason_in,
                              cancel_notes_in       => cancel_notes_in,
                              create_user_in        => create_user_in,
                              create_time_in        => create_time_in,
                              create_institution_in => create_institution_in,
                              update_user_in        => update_user_in,
                              update_time_in        => update_time_in,
                              update_institution_in => update_institution_in,
                              id_doc_area_in        => id_doc_area_in,
                              clob_columns_in       => clob_columns_in,
                              clob_pieces_in        => clob_pieces_in,
                              ignore_if_null_in     => ignore_if_null_in,
                              handle_error_in       => handle_error_in);
    
        IF SQL%ROWCOUNT = 0
        THEN
            n_ins_clobs_in_chunks(id_pat_ph_ft_hist_in  => id_pat_ph_ft_hist_in,
                                  id_pat_ph_ft_in       => id_pat_ph_ft_in,
                                  id_patient_in         => id_patient_in,
                                  id_episode_in         => id_episode_in,
                                  id_visit_in           => id_visit_in,
                                  id_professional_in    => id_professional_in,
                                  dt_register_in        => dt_register_in,
                                  flg_type_in           => flg_type_in,
                                  flg_status_in         => flg_status_in,
                                  id_prof_canceled_in   => id_prof_canceled_in,
                                  dt_cancel_in          => dt_cancel_in,
                                  id_cancel_reason_in   => id_cancel_reason_in,
                                  cancel_notes_in       => cancel_notes_in,
                                  create_user_in        => create_user_in,
                                  create_time_in        => create_time_in,
                                  create_institution_in => create_institution_in,
                                  update_user_in        => update_user_in,
                                  update_time_in        => update_time_in,
                                  update_institution_in => update_institution_in,
                                  id_doc_area_in        => id_doc_area_in,
                                  clob_columns_in       => clob_columns_in,
                                  clob_pieces_in        => clob_pieces_in,
                                  handle_error_in       => handle_error_in);
        END IF;
    END n_upd_ins_clobs_in_chunks;

    /*
    END Special logic for handling LOB columns.
    */

    PROCEDURE ins
    (
        rec_in          IN pat_past_hist_ft_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pat_past_hist_ft_hist%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_pat_ph_ft_hist := next_key(sequence_in);
        END IF;
        ins(id_pat_ph_ft_hist_in  => l_rec.id_pat_ph_ft_hist,
            id_pat_ph_ft_in       => l_rec.id_pat_ph_ft,
            text_in               => l_rec.text,
            id_patient_in         => l_rec.id_patient,
            id_episode_in         => l_rec.id_episode,
            id_visit_in           => l_rec.id_visit,
            id_professional_in    => l_rec.id_professional,
            dt_register_in        => l_rec.dt_register,
            flg_type_in           => l_rec.flg_type,
            flg_status_in         => l_rec.flg_status,
            id_prof_canceled_in   => l_rec.id_prof_canceled,
            dt_cancel_in          => l_rec.dt_cancel,
            id_cancel_reason_in   => l_rec.id_cancel_reason,
            cancel_notes_in       => l_rec.cancel_notes,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_time_in        => l_rec.update_time,
            update_institution_in => l_rec.update_institution,
            id_doc_area_in        => l_rec.id_doc_area,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_past_hist_ft_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE
    
     IS
        retval pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_pat_past_hist_ft_hist.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PAT_PAST_HIST_FT_HIST'));
    END next_key;

    PROCEDURE ins
    (
        id_pat_ph_ft_in       IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        text_in               IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        id_patient_in         IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_visit_in           IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_professional_in    IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        dt_register_in        IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        flg_type_in           IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_status_in         IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_canceled_in   IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        dt_cancel_in          IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in       IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        id_doc_area_in        IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        id_pat_ph_ft_hist_out IN OUT pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE := next_key;
    BEGIN
        ins(id_pat_ph_ft_hist_in  => l_pky,
            id_pat_ph_ft_in       => id_pat_ph_ft_in,
            text_in               => text_in,
            id_patient_in         => id_patient_in,
            id_episode_in         => id_episode_in,
            id_visit_in           => id_visit_in,
            id_professional_in    => id_professional_in,
            dt_register_in        => dt_register_in,
            flg_type_in           => flg_type_in,
            flg_status_in         => flg_status_in,
            id_prof_canceled_in   => id_prof_canceled_in,
            dt_cancel_in          => dt_cancel_in,
            id_cancel_reason_in   => id_cancel_reason_in,
            cancel_notes_in       => cancel_notes_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_doc_area_in        => id_doc_area_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        id_pat_ph_ft_hist_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_pat_ph_ft_in       IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        text_in               IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        id_patient_in         IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_visit_in           IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_professional_in    IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        dt_register_in        IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        flg_type_in           IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_status_in         IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_canceled_in   IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        dt_cancel_in          IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in       IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        id_doc_area_in        IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        id_pat_ph_ft_hist_out IN OUT pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_pat_ph_ft_in       => id_pat_ph_ft_in,
            text_in               => text_in,
            id_patient_in         => id_patient_in,
            id_episode_in         => id_episode_in,
            id_visit_in           => id_visit_in,
            id_professional_in    => id_professional_in,
            dt_register_in        => dt_register_in,
            flg_type_in           => flg_type_in,
            flg_status_in         => flg_status_in,
            id_prof_canceled_in   => id_prof_canceled_in,
            dt_cancel_in          => dt_cancel_in,
            id_cancel_reason_in   => id_cancel_reason_in,
            cancel_notes_in       => cancel_notes_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_doc_area_in        => id_doc_area_in,
            id_pat_ph_ft_hist_out => id_pat_ph_ft_hist_out,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    FUNCTION ins
    (
        id_pat_ph_ft_in       IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        text_in               IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        id_patient_in         IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_visit_in           IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_professional_in    IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        dt_register_in        IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        flg_type_in           IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_status_in         IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_canceled_in   IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        dt_cancel_in          IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in       IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        id_doc_area_in        IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) RETURN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE IS
        l_pky pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE := next_key;
    BEGIN
        ins(id_pat_ph_ft_hist_in  => l_pky,
            id_pat_ph_ft_in       => id_pat_ph_ft_in,
            text_in               => text_in,
            id_patient_in         => id_patient_in,
            id_episode_in         => id_episode_in,
            id_visit_in           => id_visit_in,
            id_professional_in    => id_professional_in,
            dt_register_in        => dt_register_in,
            flg_type_in           => flg_type_in,
            flg_status_in         => flg_status_in,
            id_prof_canceled_in   => id_prof_canceled_in,
            dt_cancel_in          => dt_cancel_in,
            id_cancel_reason_in   => id_cancel_reason_in,
            cancel_notes_in       => cancel_notes_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_doc_area_in        => id_doc_area_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_pat_ph_ft_in       IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        text_in               IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        id_patient_in         IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_visit_in           IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_professional_in    IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        dt_register_in        IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        flg_type_in           IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_status_in         IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_canceled_in   IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        dt_cancel_in          IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in       IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        id_doc_area_in        IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) RETURN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE IS
        l_pky    pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_ph_ft_hist_in  => l_pky,
            id_pat_ph_ft_in       => id_pat_ph_ft_in,
            text_in               => text_in,
            id_patient_in         => id_patient_in,
            id_episode_in         => id_episode_in,
            id_visit_in           => id_visit_in,
            id_professional_in    => id_professional_in,
            dt_register_in        => dt_register_in,
            flg_type_in           => flg_type_in,
            flg_status_in         => flg_status_in,
            id_prof_canceled_in   => id_prof_canceled_in,
            dt_cancel_in          => dt_cancel_in,
            id_cancel_reason_in   => id_cancel_reason_in,
            cancel_notes_in       => cancel_notes_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_doc_area_in        => id_doc_area_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_pat_ph_ft_in       IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        text_in               IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        id_patient_in         IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_visit_in           IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_professional_in    IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        dt_register_in        IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        flg_type_in           IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_status_in         IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_canceled_in   IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        dt_cancel_in          IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in       IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        id_doc_area_in        IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE := next_key;
    BEGIN
        ins(id_pat_ph_ft_hist_in  => l_pky,
            id_pat_ph_ft_in       => id_pat_ph_ft_in,
            text_in               => text_in,
            id_patient_in         => id_patient_in,
            id_episode_in         => id_episode_in,
            id_visit_in           => id_visit_in,
            id_professional_in    => id_professional_in,
            dt_register_in        => dt_register_in,
            flg_type_in           => flg_type_in,
            flg_status_in         => flg_status_in,
            id_prof_canceled_in   => id_prof_canceled_in,
            dt_cancel_in          => dt_cancel_in,
            id_cancel_reason_in   => id_cancel_reason_in,
            cancel_notes_in       => cancel_notes_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_doc_area_in        => id_doc_area_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_pat_ph_ft_in       IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        text_in               IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        id_patient_in         IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_visit_in           IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_professional_in    IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        dt_register_in        IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        flg_type_in           IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_status_in         IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_canceled_in   IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        dt_cancel_in          IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in       IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        id_doc_area_in        IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        l_pky    pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_ph_ft_hist_in  => l_pky,
            id_pat_ph_ft_in       => id_pat_ph_ft_in,
            text_in               => text_in,
            id_patient_in         => id_patient_in,
            id_episode_in         => id_episode_in,
            id_visit_in           => id_visit_in,
            id_professional_in    => id_professional_in,
            dt_register_in        => dt_register_in,
            flg_type_in           => flg_type_in,
            flg_status_in         => flg_status_in,
            id_prof_canceled_in   => id_prof_canceled_in,
            dt_cancel_in          => dt_cancel_in,
            id_cancel_reason_in   => id_cancel_reason_in,
            cancel_notes_in       => cancel_notes_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_doc_area_in        => id_doc_area_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_past_hist_ft_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO pat_past_hist_ft_hist
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_PH_FT_HIST _' || indx,
                                                        value_in           => rows_in(indx).id_pat_ph_ft_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_PH_FT _' || indx,
                                                        value_in           => rows_in(indx).id_pat_ph_ft,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VISIT _' || indx,
                                                        value_in           => rows_in(indx).id_visit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REGISTER _' || indx,
                                                        value_in           => rows_in(indx).dt_register,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCELED _' || indx,
                                                        value_in           => rows_in(indx).id_prof_canceled,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CANCEL_NOTES _' || indx,
                                                        value_in           => rows_in(indx).cancel_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DOC_AREA _' || indx,
                                                        value_in           => rows_in(indx).id_doc_area,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PAT_PAST_HIST_FT_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_past_hist_ft_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_pat_ph_ft_hist_in   IN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        id_pat_ph_ft_in        IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        id_pat_ph_ft_nin       IN BOOLEAN := TRUE,
        text_in                IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        text_nin               IN BOOLEAN := TRUE,
        id_patient_in          IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_episode_in          IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_visit_in            IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_visit_nin           IN BOOLEAN := TRUE,
        id_professional_in     IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        id_professional_nin    IN BOOLEAN := TRUE,
        dt_register_in         IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        dt_register_nin        IN BOOLEAN := TRUE,
        flg_type_in            IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_type_nin           IN BOOLEAN := TRUE,
        flg_status_in          IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_prof_canceled_in    IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        id_prof_canceled_nin   IN BOOLEAN := TRUE,
        dt_cancel_in           IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin          IN BOOLEAN := TRUE,
        id_cancel_reason_in    IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin   IN BOOLEAN := TRUE,
        cancel_notes_in        IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin       IN BOOLEAN := TRUE,
        create_user_in         IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_doc_area_in         IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin        IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_pat_ph_ft_n       NUMBER(1);
        l_text_n               NUMBER(1);
        l_id_patient_n         NUMBER(1);
        l_id_episode_n         NUMBER(1);
        l_id_visit_n           NUMBER(1);
        l_id_professional_n    NUMBER(1);
        l_dt_register_n        NUMBER(1);
        l_flg_type_n           NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_id_prof_canceled_n   NUMBER(1);
        l_dt_cancel_n          NUMBER(1);
        l_id_cancel_reason_n   NUMBER(1);
        l_cancel_notes_n       NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        l_id_doc_area_n        NUMBER(1);
    BEGIN
    
        l_id_pat_ph_ft_n       := sys.diutil.bool_to_int(id_pat_ph_ft_nin);
        l_text_n               := sys.diutil.bool_to_int(text_nin);
        l_id_patient_n         := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_id_visit_n           := sys.diutil.bool_to_int(id_visit_nin);
        l_id_professional_n    := sys.diutil.bool_to_int(id_professional_nin);
        l_dt_register_n        := sys.diutil.bool_to_int(dt_register_nin);
        l_flg_type_n           := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_canceled_n   := sys.diutil.bool_to_int(id_prof_canceled_nin);
        l_dt_cancel_n          := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_cancel_reason_n   := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_cancel_notes_n       := sys.diutil.bool_to_int(cancel_notes_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_id_doc_area_n        := sys.diutil.bool_to_int(id_doc_area_nin);
    
        UPDATE pat_past_hist_ft_hist
           SET id_pat_ph_ft       = decode(l_id_pat_ph_ft_n, 0, id_pat_ph_ft_in, nvl(id_pat_ph_ft_in, id_pat_ph_ft)),
               text               = decode(l_text_n, 0, text_in, nvl(text_in, text)),
               id_patient         = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_episode         = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_visit           = decode(l_id_visit_n, 0, id_visit_in, nvl(id_visit_in, id_visit)),
               id_professional    = decode(l_id_professional_n,
                                           0,
                                           id_professional_in,
                                           nvl(id_professional_in, id_professional)),
               dt_register        = decode(l_dt_register_n, 0, dt_register_in, nvl(dt_register_in, dt_register)),
               flg_type           = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               flg_status         = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_canceled   = decode(l_id_prof_canceled_n,
                                           0,
                                           id_prof_canceled_in,
                                           nvl(id_prof_canceled_in, id_prof_canceled)),
               dt_cancel          = decode(l_dt_cancel_n, 0, dt_cancel_in, nvl(dt_cancel_in, dt_cancel)),
               id_cancel_reason   = decode(l_id_cancel_reason_n,
                                           0,
                                           id_cancel_reason_in,
                                           nvl(id_cancel_reason_in, id_cancel_reason)),
               cancel_notes       = decode(l_cancel_notes_n, 0, cancel_notes_in, nvl(cancel_notes_in, cancel_notes)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution)),
               id_doc_area        = decode(l_id_doc_area_n, 0, id_doc_area_in, nvl(id_doc_area_in, id_doc_area))
         WHERE id_pat_ph_ft_hist = id_pat_ph_ft_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_PAST_HIST_FT_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    IF l_name = 'PPH_FTH_FT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_PH_FT',
                                                        value_in           => id_pat_ph_ft_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pat_ph_ft_hist_in   IN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        id_pat_ph_ft_in        IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        id_pat_ph_ft_nin       IN BOOLEAN := TRUE,
        text_in                IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        text_nin               IN BOOLEAN := TRUE,
        id_patient_in          IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_episode_in          IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_visit_in            IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_visit_nin           IN BOOLEAN := TRUE,
        id_professional_in     IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        id_professional_nin    IN BOOLEAN := TRUE,
        dt_register_in         IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        dt_register_nin        IN BOOLEAN := TRUE,
        flg_type_in            IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_type_nin           IN BOOLEAN := TRUE,
        flg_status_in          IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_prof_canceled_in    IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        id_prof_canceled_nin   IN BOOLEAN := TRUE,
        dt_cancel_in           IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin          IN BOOLEAN := TRUE,
        id_cancel_reason_in    IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin   IN BOOLEAN := TRUE,
        cancel_notes_in        IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin       IN BOOLEAN := TRUE,
        create_user_in         IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_doc_area_in         IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin        IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_ph_ft_hist_in   => id_pat_ph_ft_hist_in,
            id_pat_ph_ft_in        => id_pat_ph_ft_in,
            id_pat_ph_ft_nin       => id_pat_ph_ft_nin,
            text_in                => text_in,
            text_nin               => text_nin,
            id_patient_in          => id_patient_in,
            id_patient_nin         => id_patient_nin,
            id_episode_in          => id_episode_in,
            id_episode_nin         => id_episode_nin,
            id_visit_in            => id_visit_in,
            id_visit_nin           => id_visit_nin,
            id_professional_in     => id_professional_in,
            id_professional_nin    => id_professional_nin,
            dt_register_in         => dt_register_in,
            dt_register_nin        => dt_register_nin,
            flg_type_in            => flg_type_in,
            flg_type_nin           => flg_type_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            id_prof_canceled_in    => id_prof_canceled_in,
            id_prof_canceled_nin   => id_prof_canceled_nin,
            dt_cancel_in           => dt_cancel_in,
            dt_cancel_nin          => dt_cancel_nin,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_cancel_reason_nin   => id_cancel_reason_nin,
            cancel_notes_in        => cancel_notes_in,
            cancel_notes_nin       => cancel_notes_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            id_doc_area_in         => id_doc_area_in,
            id_doc_area_nin        => id_doc_area_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_pat_ph_ft_in        IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        id_pat_ph_ft_nin       IN BOOLEAN := TRUE,
        text_in                IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        text_nin               IN BOOLEAN := TRUE,
        id_patient_in          IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_episode_in          IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_visit_in            IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_visit_nin           IN BOOLEAN := TRUE,
        id_professional_in     IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        id_professional_nin    IN BOOLEAN := TRUE,
        dt_register_in         IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        dt_register_nin        IN BOOLEAN := TRUE,
        flg_type_in            IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_type_nin           IN BOOLEAN := TRUE,
        flg_status_in          IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_prof_canceled_in    IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        id_prof_canceled_nin   IN BOOLEAN := TRUE,
        dt_cancel_in           IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin          IN BOOLEAN := TRUE,
        id_cancel_reason_in    IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin   IN BOOLEAN := TRUE,
        cancel_notes_in        IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin       IN BOOLEAN := TRUE,
        create_user_in         IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_doc_area_in         IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin        IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_id_pat_ph_ft_n       NUMBER(1);
        l_text_n               NUMBER(1);
        l_id_patient_n         NUMBER(1);
        l_id_episode_n         NUMBER(1);
        l_id_visit_n           NUMBER(1);
        l_id_professional_n    NUMBER(1);
        l_dt_register_n        NUMBER(1);
        l_flg_type_n           NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_id_prof_canceled_n   NUMBER(1);
        l_dt_cancel_n          NUMBER(1);
        l_id_cancel_reason_n   NUMBER(1);
        l_cancel_notes_n       NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        l_id_doc_area_n        NUMBER(1);
        id_pat_ph_ft_hist_in   pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE;
    BEGIN
    
        l_id_pat_ph_ft_n       := sys.diutil.bool_to_int(id_pat_ph_ft_nin);
        l_text_n               := sys.diutil.bool_to_int(text_nin);
        l_id_patient_n         := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_id_visit_n           := sys.diutil.bool_to_int(id_visit_nin);
        l_id_professional_n    := sys.diutil.bool_to_int(id_professional_nin);
        l_dt_register_n        := sys.diutil.bool_to_int(dt_register_nin);
        l_flg_type_n           := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_canceled_n   := sys.diutil.bool_to_int(id_prof_canceled_nin);
        l_dt_cancel_n          := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_cancel_reason_n   := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_cancel_notes_n       := sys.diutil.bool_to_int(cancel_notes_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_id_doc_area_n        := sys.diutil.bool_to_int(id_doc_area_nin);
    
        l_sql := 'UPDATE PAT_PAST_HIST_FT_HIST SET ' || ' ID_PAT_PH_FT = decode (' || l_id_pat_ph_ft_n ||
                 ',0,:id_pat_ph_ft_in, NVL (:id_pat_ph_ft_in, ID_PAT_PH_FT)) ' || ',' || ' TEXT = decode (' || l_text_n ||
                 ',0,:text_in, NVL (:text_in, TEXT)) ' || ',' || ' ID_PATIENT = decode (' || l_id_patient_n ||
                 ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' || ' ID_EPISODE = decode (' ||
                 l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_VISIT = decode (' || l_id_visit_n || ',0,:id_visit_in, NVL (:id_visit_in, ID_VISIT)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' DT_REGISTER = decode (' || l_dt_register_n ||
                 ',0,:dt_register_in, NVL (:dt_register_in, DT_REGISTER)) ' || ',' || ' FLG_TYPE = decode (' ||
                 l_flg_type_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_PROF_CANCELED = decode (' || l_id_prof_canceled_n ||
                 ',0,:id_prof_canceled_in, NVL (:id_prof_canceled_in, ID_PROF_CANCELED)) ' || ',' ||
                 ' DT_CANCEL = decode (' || l_dt_cancel_n || ',0,:dt_cancel_in, NVL (:dt_cancel_in, DT_CANCEL)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' CANCEL_NOTES = decode (' || l_cancel_notes_n ||
                 ',0,:cancel_notes_in, NVL (:cancel_notes_in, CANCEL_NOTES)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_DOC_AREA = decode (' || l_id_doc_area_n ||
                 ',0,:id_doc_area_in, NVL (:id_doc_area_in, ID_DOC_AREA)) ' || ' where ' || nvl(where_in, '(1=1)') ||
                 ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_pat_ph_ft_in, text_in, id_patient_in, id_episode_in, id_visit_in, id_professional_in, dt_register_in, flg_type_in, flg_status_in, id_prof_canceled_in, dt_cancel_in, id_cancel_reason_in, cancel_notes_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_doc_area_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_PAST_HIST_FT_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    IF l_name = 'PPH_FTH_FT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PAT_PH_FT',
                                                        value_in           => id_pat_ph_ft_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pat_ph_ft_in        IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        id_pat_ph_ft_nin       IN BOOLEAN := TRUE,
        text_in                IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        text_nin               IN BOOLEAN := TRUE,
        id_patient_in          IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_episode_in          IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_visit_in            IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_visit_nin           IN BOOLEAN := TRUE,
        id_professional_in     IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        id_professional_nin    IN BOOLEAN := TRUE,
        dt_register_in         IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        dt_register_nin        IN BOOLEAN := TRUE,
        flg_type_in            IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_type_nin           IN BOOLEAN := TRUE,
        flg_status_in          IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_prof_canceled_in    IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        id_prof_canceled_nin   IN BOOLEAN := TRUE,
        dt_cancel_in           IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin          IN BOOLEAN := TRUE,
        id_cancel_reason_in    IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin   IN BOOLEAN := TRUE,
        cancel_notes_in        IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin       IN BOOLEAN := TRUE,
        create_user_in         IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_doc_area_in         IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin        IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_ph_ft_in        => id_pat_ph_ft_in,
            id_pat_ph_ft_nin       => id_pat_ph_ft_nin,
            text_in                => text_in,
            text_nin               => text_nin,
            id_patient_in          => id_patient_in,
            id_patient_nin         => id_patient_nin,
            id_episode_in          => id_episode_in,
            id_episode_nin         => id_episode_nin,
            id_visit_in            => id_visit_in,
            id_visit_nin           => id_visit_nin,
            id_professional_in     => id_professional_in,
            id_professional_nin    => id_professional_nin,
            dt_register_in         => dt_register_in,
            dt_register_nin        => dt_register_nin,
            flg_type_in            => flg_type_in,
            flg_type_nin           => flg_type_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            id_prof_canceled_in    => id_prof_canceled_in,
            id_prof_canceled_nin   => id_prof_canceled_nin,
            dt_cancel_in           => dt_cancel_in,
            dt_cancel_nin          => dt_cancel_nin,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_cancel_reason_nin   => id_cancel_reason_nin,
            cancel_notes_in        => cancel_notes_in,
            cancel_notes_nin       => cancel_notes_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            id_doc_area_in         => id_doc_area_in,
            id_doc_area_nin        => id_doc_area_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_past_hist_ft_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_ph_ft_hist_in  => rec_in.id_pat_ph_ft_hist,
            id_pat_ph_ft_in       => rec_in.id_pat_ph_ft,
            text_in               => rec_in.text,
            id_patient_in         => rec_in.id_patient,
            id_episode_in         => rec_in.id_episode,
            id_visit_in           => rec_in.id_visit,
            id_professional_in    => rec_in.id_professional,
            dt_register_in        => rec_in.dt_register,
            flg_type_in           => rec_in.flg_type,
            flg_status_in         => rec_in.flg_status,
            id_prof_canceled_in   => rec_in.id_prof_canceled,
            dt_cancel_in          => rec_in.dt_cancel,
            id_cancel_reason_in   => rec_in.id_cancel_reason,
            cancel_notes_in       => rec_in.cancel_notes,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            id_doc_area_in        => rec_in.id_doc_area
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_past_hist_ft_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_ph_ft_hist_in  => rec_in.id_pat_ph_ft_hist,
            id_pat_ph_ft_in       => rec_in.id_pat_ph_ft,
            text_in               => rec_in.text,
            id_patient_in         => rec_in.id_patient,
            id_episode_in         => rec_in.id_episode,
            id_visit_in           => rec_in.id_visit,
            id_professional_in    => rec_in.id_professional,
            dt_register_in        => rec_in.dt_register,
            flg_type_in           => rec_in.flg_type,
            flg_status_in         => rec_in.flg_status,
            id_prof_canceled_in   => rec_in.id_prof_canceled,
            dt_cancel_in          => rec_in.dt_cancel,
            id_cancel_reason_in   => rec_in.id_cancel_reason,
            cancel_notes_in       => rec_in.cancel_notes,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            id_doc_area_in        => rec_in.id_doc_area
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_pat_ph_ft_hist_in  IN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        id_pat_ph_ft_in       IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        text_in               IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        id_patient_in         IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_visit_in           IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_professional_in    IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        dt_register_in        IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        flg_type_in           IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_status_in         IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_canceled_in   IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        dt_cancel_in          IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in       IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        id_doc_area_in        IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_ph_ft_hist_in  => id_pat_ph_ft_hist_in,
            id_pat_ph_ft_in       => id_pat_ph_ft_in,
            text_in               => text_in,
            id_patient_in         => id_patient_in,
            id_episode_in         => id_episode_in,
            id_visit_in           => id_visit_in,
            id_professional_in    => id_professional_in,
            dt_register_in        => dt_register_in,
            flg_type_in           => flg_type_in,
            flg_status_in         => flg_status_in,
            id_prof_canceled_in   => id_prof_canceled_in,
            dt_cancel_in          => dt_cancel_in,
            id_cancel_reason_in   => id_cancel_reason_in,
            cancel_notes_in       => cancel_notes_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_doc_area_in        => id_doc_area_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_pat_ph_ft_hist_in  => id_pat_ph_ft_hist_in,
                id_pat_ph_ft_in       => id_pat_ph_ft_in,
                text_in               => text_in,
                id_patient_in         => id_patient_in,
                id_episode_in         => id_episode_in,
                id_visit_in           => id_visit_in,
                id_professional_in    => id_professional_in,
                dt_register_in        => dt_register_in,
                flg_type_in           => flg_type_in,
                flg_status_in         => flg_status_in,
                id_prof_canceled_in   => id_prof_canceled_in,
                dt_cancel_in          => dt_cancel_in,
                id_cancel_reason_in   => id_cancel_reason_in,
                cancel_notes_in       => cancel_notes_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_time_in        => update_time_in,
                update_institution_in => update_institution_in,
                id_doc_area_in        => id_doc_area_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_pat_ph_ft_hist_in  IN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        id_pat_ph_ft_in       IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE DEFAULT NULL,
        text_in               IN pat_past_hist_ft_hist.text%TYPE DEFAULT NULL,
        id_patient_in         IN pat_past_hist_ft_hist.id_patient%TYPE DEFAULT NULL,
        id_episode_in         IN pat_past_hist_ft_hist.id_episode%TYPE DEFAULT NULL,
        id_visit_in           IN pat_past_hist_ft_hist.id_visit%TYPE DEFAULT NULL,
        id_professional_in    IN pat_past_hist_ft_hist.id_professional%TYPE DEFAULT NULL,
        dt_register_in        IN pat_past_hist_ft_hist.dt_register%TYPE DEFAULT NULL,
        flg_type_in           IN pat_past_hist_ft_hist.flg_type%TYPE DEFAULT NULL,
        flg_status_in         IN pat_past_hist_ft_hist.flg_status%TYPE DEFAULT NULL,
        id_prof_canceled_in   IN pat_past_hist_ft_hist.id_prof_canceled%TYPE DEFAULT NULL,
        dt_cancel_in          IN pat_past_hist_ft_hist.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in   IN pat_past_hist_ft_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in       IN pat_past_hist_ft_hist.cancel_notes%TYPE DEFAULT NULL,
        create_user_in        IN pat_past_hist_ft_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pat_past_hist_ft_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pat_past_hist_ft_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pat_past_hist_ft_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN pat_past_hist_ft_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN pat_past_hist_ft_hist.update_institution%TYPE DEFAULT NULL,
        id_doc_area_in        IN pat_past_hist_ft_hist.id_doc_area%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_pat_ph_ft_hist_in,
                id_pat_ph_ft_in,
                text_in,
                id_patient_in,
                id_episode_in,
                id_visit_in,
                id_professional_in,
                dt_register_in,
                flg_type_in,
                flg_status_in,
                id_prof_canceled_in,
                dt_cancel_in,
                id_cancel_reason_in,
                cancel_notes_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_doc_area_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pat_past_hist_ft_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_pat_ph_ft_hist  id_pat_ph_ft_hist_cc;
        l_id_pat_ph_ft       id_pat_ph_ft_cc;
        l_text               text_cc;
        l_id_patient         id_patient_cc;
        l_id_episode         id_episode_cc;
        l_id_visit           id_visit_cc;
        l_id_professional    id_professional_cc;
        l_dt_register        dt_register_cc;
        l_flg_type           flg_type_cc;
        l_flg_status         flg_status_cc;
        l_id_prof_canceled   id_prof_canceled_cc;
        l_dt_cancel          dt_cancel_cc;
        l_id_cancel_reason   id_cancel_reason_cc;
        l_cancel_notes       cancel_notes_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_time        update_time_cc;
        l_update_institution update_institution_cc;
        l_id_doc_area        id_doc_area_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_pat_ph_ft_hist(i) := col_in(i).id_pat_ph_ft_hist;
            l_id_pat_ph_ft(i) := col_in(i).id_pat_ph_ft;
            l_text(i) := col_in(i).text;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_visit(i) := col_in(i).id_visit;
            l_id_professional(i) := col_in(i).id_professional;
            l_dt_register(i) := col_in(i).dt_register;
            l_flg_type(i) := col_in(i).flg_type;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_canceled(i) := col_in(i).id_prof_canceled;
            l_dt_cancel(i) := col_in(i).dt_cancel;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_cancel_notes(i) := col_in(i).cancel_notes;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_doc_area(i) := col_in(i).id_doc_area;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE pat_past_hist_ft_hist
                   SET id_pat_ph_ft       = nvl(l_id_pat_ph_ft(i), id_pat_ph_ft),
                       text               = nvl(l_text(i), text),
                       id_patient         = nvl(l_id_patient(i), id_patient),
                       id_episode         = nvl(l_id_episode(i), id_episode),
                       id_visit           = nvl(l_id_visit(i), id_visit),
                       id_professional    = nvl(l_id_professional(i), id_professional),
                       dt_register        = nvl(l_dt_register(i), dt_register),
                       flg_type           = nvl(l_flg_type(i), flg_type),
                       flg_status         = nvl(l_flg_status(i), flg_status),
                       id_prof_canceled   = nvl(l_id_prof_canceled(i), id_prof_canceled),
                       dt_cancel          = nvl(l_dt_cancel(i), dt_cancel),
                       id_cancel_reason   = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       cancel_notes       = nvl(l_cancel_notes(i), cancel_notes),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution),
                       id_doc_area        = nvl(l_id_doc_area(i), id_doc_area)
                 WHERE id_pat_ph_ft_hist = l_id_pat_ph_ft_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE pat_past_hist_ft_hist
                   SET id_pat_ph_ft       = l_id_pat_ph_ft(i),
                       text               = l_text(i),
                       id_patient         = l_id_patient(i),
                       id_episode         = l_id_episode(i),
                       id_visit           = l_id_visit(i),
                       id_professional    = l_id_professional(i),
                       dt_register        = l_dt_register(i),
                       flg_type           = l_flg_type(i),
                       flg_status         = l_flg_status(i),
                       id_prof_canceled   = l_id_prof_canceled(i),
                       dt_cancel          = l_dt_cancel(i),
                       id_cancel_reason   = l_id_cancel_reason(i),
                       cancel_notes       = l_cancel_notes(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i),
                       id_doc_area        = l_id_doc_area(i)
                 WHERE id_pat_ph_ft_hist = l_id_pat_ph_ft_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pat_past_hist_ft_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PAT_PAST_HIST_FT_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PAT_PAST_HIST_FT_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_PAST_HIST_FT_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PAT_PAST_HIST_FT_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_pat_ph_ft_hist_in IN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_past_hist_ft_hist
         WHERE id_pat_ph_ft_hist = id_pat_ph_ft_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_pat_ph_ft_hist_in IN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_pat_ph_ft_hist_in => id_pat_ph_ft_hist_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PAT_PH_FT_HIST
    PROCEDURE del_id_pat_ph_ft_hist
    (
        id_pat_ph_ft_hist_in IN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_past_hist_ft_hist
         WHERE id_pat_ph_ft_hist = id_pat_ph_ft_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_pat_ph_ft_hist;

    -- Delete all rows for primary key column ID_PAT_PH_FT_HIST
    PROCEDURE del_id_pat_ph_ft_hist
    (
        id_pat_ph_ft_hist_in IN pat_past_hist_ft_hist.id_pat_ph_ft_hist%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_pat_ph_ft_hist(id_pat_ph_ft_hist_in => id_pat_ph_ft_hist_in,
                              handle_error_in      => handle_error_in,
                              rows_out             => rows_out);
    END del_id_pat_ph_ft_hist;

    PROCEDURE del_pph_fth_ft_fk
    (
        id_pat_ph_ft_in IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_past_hist_ft_hist
         WHERE id_pat_ph_ft = del_pph_fth_ft_fk.id_pat_ph_ft_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pph_fth_ft_fk;

    PROCEDURE del_pph_fth_ft_fk
    (
        id_pat_ph_ft_in IN pat_past_hist_ft_hist.id_pat_ph_ft%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pph_fth_ft_fk(id_pat_ph_ft_in => id_pat_ph_ft_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pph_fth_ft_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PAT_PAST_HIST_FT_HIST';
        ELSE
            RETURN 'DELETE FROM PAT_PAST_HIST_FT_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_PAST_HIST_FT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_PAST_HIST_FT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pat_past_hist_ft_hist_inout IN OUT pat_past_hist_ft_hist%ROWTYPE) IS
    BEGIN
        pat_past_hist_ft_hist_inout.id_pat_ph_ft_hist  := NULL;
        pat_past_hist_ft_hist_inout.id_pat_ph_ft       := NULL;
        pat_past_hist_ft_hist_inout.text               := NULL;
        pat_past_hist_ft_hist_inout.id_patient         := NULL;
        pat_past_hist_ft_hist_inout.id_episode         := NULL;
        pat_past_hist_ft_hist_inout.id_visit           := NULL;
        pat_past_hist_ft_hist_inout.id_professional    := NULL;
        pat_past_hist_ft_hist_inout.dt_register        := NULL;
        pat_past_hist_ft_hist_inout.flg_type           := NULL;
        pat_past_hist_ft_hist_inout.flg_status         := NULL;
        pat_past_hist_ft_hist_inout.id_prof_canceled   := NULL;
        pat_past_hist_ft_hist_inout.dt_cancel          := NULL;
        pat_past_hist_ft_hist_inout.id_cancel_reason   := NULL;
        pat_past_hist_ft_hist_inout.cancel_notes       := NULL;
        pat_past_hist_ft_hist_inout.create_user        := NULL;
        pat_past_hist_ft_hist_inout.create_time        := NULL;
        pat_past_hist_ft_hist_inout.create_institution := NULL;
        pat_past_hist_ft_hist_inout.update_user        := NULL;
        pat_past_hist_ft_hist_inout.update_time        := NULL;
        pat_past_hist_ft_hist_inout.update_institution := NULL;
        pat_past_hist_ft_hist_inout.id_doc_area        := NULL;
    END initrec;

    FUNCTION initrec RETURN pat_past_hist_ft_hist%ROWTYPE IS
        l_pat_past_hist_ft_hist pat_past_hist_ft_hist%ROWTYPE;
    BEGIN
        RETURN l_pat_past_hist_ft_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pat_past_hist_ft_hist_tc IS
        data pat_past_hist_ft_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pat_past_hist_ft_hist
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pat_past_hist_ft_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pat_past_hist_ft_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pat_past_hist_ft_hist;
/
