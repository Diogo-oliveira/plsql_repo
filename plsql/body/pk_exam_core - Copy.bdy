/*-- Last Change Revision: $Rev: 2027144 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:41:17 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY pk_exam_core IS

    FUNCTION create_exam_order
    (
        i_lang                    IN language.id_language%TYPE, --1
        i_prof                    IN profissional,
        i_patient                 IN patient.id_patient%TYPE,
        i_episode                 IN exam_req.id_episode%TYPE,
        i_exam_req                IN exam_req.id_exam_req%TYPE DEFAULT NULL, --5
        i_exam_req_det            IN table_number,
        i_exam                    IN table_number,
        i_flg_type                IN table_varchar,
        i_dt_req                  IN table_varchar,
        i_flg_time                IN table_varchar, --10
        i_dt_begin                IN table_varchar,
        i_dt_begin_limit          IN table_varchar,
        i_episode_destination     IN table_number,
        i_order_recurrence        IN table_number,
        i_priority                IN table_varchar, --15
        i_flg_prn                 IN table_varchar,
        i_notes_prn               IN table_varchar,
        i_flg_fasting             IN table_varchar,
        i_notes                   IN table_varchar,
        i_notes_scheduler         IN table_varchar, --20
        i_notes_technician        IN table_varchar,
        i_notes_patient           IN table_clob,
        i_diagnosis_notes         IN table_varchar,
        i_diagnosis               IN pk_edis_types.table_in_epis_diagnosis,
        i_laterality              IN table_varchar, --25
        i_exec_room               IN table_number,
        i_exec_institution        IN table_number,
        i_clinical_purpose        IN table_number,
        i_clinical_purpose_notes  IN table_varchar,
        i_codification            IN table_number, --30
        i_health_plan             IN table_number,
        i_exemption               IN table_number,
        i_prof_order              IN table_number,
        i_dt_order                IN table_varchar,
        i_order_type              IN table_number, --35
        i_clinical_question       IN table_table_number,
        i_response                IN table_table_varchar,
        i_clinical_question_notes IN table_table_varchar,
        i_clinical_decision_rule  IN table_number,
        i_flg_origin_req          IN exam_req_det.flg_req_origin_module%TYPE DEFAULT 'D', --40
        i_task_dependency         IN table_number,
        i_flg_task_depending      IN table_varchar,
        i_episode_followup_app    IN table_number,
        i_schedule_followup_app   IN table_number,
        i_event_followup_app      IN table_number, --45
        i_test                    IN VARCHAR2,
        o_flg_show                OUT VARCHAR2,
        o_msg_title               OUT VARCHAR2,
        o_msg_req                 OUT VARCHAR2,
        o_button                  OUT VARCHAR2,
        o_exam_req_array          OUT NOCOPY table_number,
        o_exam_req_det_array      OUT NOCOPY table_number,
        o_error                   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_continue BOOLEAN := TRUE;
    
        l_patient patient.id_patient%TYPE;
    
        l_desc_exam         VARCHAR2(1000 CHAR);
        l_num_max_req_order sys_config.value%TYPE := pk_sysconfig.get_config('NUM_MAX_REQ_ORDER', i_prof);
    
        l_exam table_number := table_number();
    
        l_exam_order exam_req.id_exam_req%TYPE;
        l_dt_begin   VARCHAR2(100 CHAR);
        l_exam_cat   exam_cat.id_exam_cat%TYPE;
    
        l_clinical_question       table_number := table_number();
        l_response                table_varchar := table_varchar();
        l_clinical_question_notes table_varchar := table_varchar();
    
        l_count_out_reqs NUMBER := 0;
    
        TYPE t_record_exam_req_map IS TABLE OF NUMBER INDEX BY VARCHAR2(200 CHAR);
        ibt_exam_req_map t_record_exam_req_map;
    
        l_exam_req     exam_req.id_exam_req%TYPE;
        l_exam_req_det exam_req_det.id_exam_req_det%TYPE;
    
        l_order_recurrence         order_recurr_plan.id_order_recurr_plan%TYPE;
        l_order_recurrence_option  order_recurr_plan.id_order_recurr_option%TYPE;
        l_order_recurr_final_array table_number := table_number();
    
        l_order_plan      t_tbl_order_recurr_plan;
        l_order_plan_aux  t_tbl_order_recurr_plan;
        l_exec_to_process t_tbl_order_recurr_plan_sts;
    
        l_order_recurrence_prepare VARCHAR2(1 CHAR) := pk_exam_constant.g_no;
    
        TYPE t_order_recurr_plan_map IS TABLE OF NUMBER INDEX BY VARCHAR2(200 CHAR);
        ibt_order_recurr_plan_map t_order_recurr_plan_map;
    
    BEGIN
    
        g_sysdate_char := pk_date_utils.date_send_tsz(i_lang, current_timestamp, i_prof);
    
        o_exam_req_array     := table_number();
        o_exam_req_det_array := table_number();
    
        IF i_episode IS NOT NULL
        THEN
            l_patient := pk_episode.get_id_patient(i_episode => i_episode);
        
            g_error := 'PATIENT / EPISODE DON''T MATCH';
            IF l_patient != i_patient
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        IF i_test = pk_exam_constant.g_yes
        THEN
            -- Verificar se o exame já tinha sido requisitado recentemente e se têm resultados
            g_error    := 'CALL TO GET_EXAM_REQUEST';
            o_flg_show := pk_exam_utils.get_exam_request(i_lang      => i_lang,
                                                         i_prof      => i_prof,
                                                         i_patient   => i_patient,
                                                         i_exam      => i_exam,
                                                         o_msg_title => o_msg_title,
                                                         o_msg_req   => o_msg_req,
                                                         o_button    => o_button);
        
        END IF;
    
        IF l_continue
        THEN
            FOR i IN 1 .. i_exam.count
            LOOP
                IF i_order_recurrence(i) IS NOT NULL
                   AND i_flg_origin_req != pk_alert_constant.g_task_origin_order_set
                THEN
                    BEGIN
                    
                        -- check if this order recurrence plan was already set as finished
                        l_order_recurrence := ibt_order_recurr_plan_map(i_order_recurrence(i));
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                        
                            -- set order recurrence plan as finished
                            g_error := 'CALL PK_ORDER_RECURRENCE_API_DB.SET_ORDER_RECURR_PLAN';
                            IF NOT
                                pk_order_recurrence_api_db.set_order_recurr_plan(i_lang                    => i_lang,
                                                                                 i_prof                    => i_prof,
                                                                                 i_order_recurr_plan       => i_order_recurrence(i),
                                                                                 o_order_recurr_option     => l_order_recurrence_option,
                                                                                 o_final_order_recurr_plan => l_order_recurrence,
                                                                                 o_error                   => o_error)
                            
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        
                            -- add new order recurrence plan to map collection
                            ibt_order_recurr_plan_map(i_order_recurrence(i)) := l_order_recurrence;
                        
                            IF l_order_recurrence IS NOT NULL
                            THEN
                                l_order_recurr_final_array.extend;
                                l_order_recurr_final_array(l_order_recurr_final_array.count) := l_order_recurrence;
                            END IF;
                        
                            IF l_order_recurr_final_array IS NOT NULL
                               OR l_order_recurr_final_array.count > 0
                            THEN
                                g_error := 'CALL PK_ORDER_RECURRENCE_API_DB.PREPARE_ORDER_RECURR_PLAN';
                                IF NOT
                                    pk_order_recurrence_api_db.prepare_order_recurr_plan(i_lang            => i_lang,
                                                                                         i_prof            => i_prof,
                                                                                         i_order_plan      => l_order_recurr_final_array,
                                                                                         o_order_plan_exec => l_order_plan,
                                                                                         o_error           => o_error)
                                THEN
                                    RAISE g_other_exception;
                                END IF;
                            
                                l_order_recurrence_prepare := pk_exam_constant.g_yes;
                            
                                -- removing first element (first req was already created)
                                SELECT t_rec_order_recurr_plan(t.id_order_recurrence_plan,
                                                               t.exec_number,
                                                               t.exec_timestamp)
                                  BULK COLLECT
                                  INTO l_order_plan_aux
                                  FROM TABLE(CAST(l_order_plan AS t_tbl_order_recurr_plan)) t
                                 WHERE t.exec_number > 1;
                            END IF;
                        
                            IF i_test = pk_exam_constant.g_yes
                               AND
                               (o_flg_show = pk_exam_constant.g_yes OR l_order_plan_aux.count > l_num_max_req_order)
                            THEN
                                IF l_order_plan_aux.count > l_num_max_req_order
                                THEN
                                
                                    SELECT CASE
                                               WHEN i_flg_type(i) = 'E' THEN
                                                pk_exam_utils.get_alias_translation(i_lang,
                                                                                    i_prof,
                                                                                    'EXAM.CODE_EXAM.' || i_exam(i),
                                                                                    NULL)
                                               ELSE
                                                pk_exam_utils.get_alias_translation(i_lang,
                                                                                    i_prof,
                                                                                    'EXAM_GROUP.CODE_EXAM_GROUP.' ||
                                                                                    i_exam(i),
                                                                                    NULL)
                                           END
                                      INTO l_desc_exam
                                      FROM dual;
                                
                                    o_flg_show  := pk_exam_constant.g_yes;
                                    o_msg_title := pk_message.get_message(i_lang, 'COMMON_M080');
                                    o_msg_req   := REPLACE(pk_message.get_message(i_lang, 'MCDT_T009'),
                                                           '@1',
                                                           l_num_max_req_order);
                                    o_msg_req   := REPLACE(o_msg_req, '@2', l_desc_exam);
                                END IF;
                            
                                RETURN TRUE;
                            END IF;
                        
                    END;
                ELSIF i_order_recurrence(i) IS NOT NULL
                      AND i_flg_origin_req = pk_alert_constant.g_task_origin_order_set
                THEN
                    l_order_recurrence := i_order_recurrence(i);
                END IF;
            
                l_exam := table_number();
                IF i_flg_type(i) = 'E'
                THEN
                    l_exam.extend;
                    l_exam(1) := i_exam(i);
                ELSE
                    IF NOT pk_exam_core.get_exam_in_group(i_lang, i_exam(i), l_exam, o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                l_clinical_question := table_number();
                IF i_clinical_question(i).count > 0
                THEN
                    FOR j IN i_clinical_question(i).first .. i_clinical_question(i).last
                    LOOP
                        l_clinical_question.extend;
                        l_clinical_question(j) := i_clinical_question(i) (j);
                    END LOOP;
                END IF;
            
                l_response := table_varchar();
                IF i_response(i).count > 0
                THEN
                    FOR j IN i_response(i).first .. i_response(i).last
                    LOOP
                        l_response.extend;
                        l_response(j) := i_response(i) (j);
                    END LOOP;
                END IF;
            
                l_clinical_question_notes := table_varchar();
                IF i_clinical_question_notes(i).count > 0
                THEN
                    FOR j IN i_clinical_question_notes(i).first .. i_clinical_question_notes(i).last
                    LOOP
                        l_clinical_question_notes.extend;
                        l_clinical_question_notes(j) := i_clinical_question_notes(i) (j);
                    END LOOP;
                END IF;
            
                FOR j IN 1 .. l_exam.count
                LOOP
                    IF i_flg_origin_req != pk_alert_constant.g_task_origin_order_set
                    THEN
                        IF l_exam_req IS NULL
                        THEN
                            l_exam_req := i_exam_req;
                        END IF;
                    
                        IF l_exam_req IS NULL
                        THEN
                            l_exam_req := ts_exam_req.next_key();
                        ELSE
                            SELECT e.id_exam_cat
                              INTO l_exam_cat
                              FROM exam e
                             WHERE e.id_exam = l_exam(j);
                        
                            IF i_dt_begin(i) < g_sysdate_char
                            THEN
                                l_dt_begin := g_sysdate_char;
                            ELSE
                                l_dt_begin := i_dt_begin(i);
                            END IF;
                        
                            BEGIN
                                g_error := 'GET L_EXAM_ORDER 1';
                                SELECT e.id_exam_req
                                  INTO l_exam_order
                                  FROM (SELECT erd.id_exam_req,
                                               CASE
                                                    WHEN erd.dt_begin < g_sysdate_char THEN
                                                     g_sysdate_char
                                                    ELSE
                                                     erd.dt_begin
                                                END dt_begin
                                          FROM (SELECT er.id_exam_req,
                                                       pk_date_utils.trunc_insttimezone_str(i_prof,
                                                                                            er.dt_begin_tstz,
                                                                                            'MI') dt_begin
                                                  FROM exam_req_det erd, exam_req er, exam e
                                                 WHERE erd.id_exam_req_det IN
                                                       (SELECT /*+opt_estimate (table t rows=1)*/
                                                         *
                                                          FROM TABLE(o_exam_req_det_array) t)
                                                   AND erd.id_exam_req = er.id_exam_req
                                                   AND er.flg_time = i_flg_time(i)
                                                   AND er.priority = i_priority(i)
                                                   AND (er.id_exec_institution = i_exec_institution(i) OR
                                                       (er.id_exec_institution IS NULL AND i_exec_institution(i) IS NULL))
                                                   AND ((er.flg_status = pk_exam_constant.g_exam_sos AND
                                                       i_flg_prn(i) = pk_exam_constant.g_yes) OR
                                                       (er.flg_status != pk_exam_constant.g_exam_sos AND
                                                       i_flg_prn(i) = pk_exam_constant.g_no))
                                                   AND erd.id_exam = e.id_exam
                                                   AND e.id_exam_cat = l_exam_cat) erd) e
                                 WHERE (e.dt_begin = l_dt_begin OR
                                       (l_dt_begin IS NULL AND
                                       i_flg_time(i) NOT IN (pk_exam_constant.g_flg_time_e,
                                                               pk_exam_constant.g_flg_time_b,
                                                               pk_exam_constant.g_flg_time_d)))
                                   AND rownum = 1;
                            EXCEPTION
                                WHEN no_data_found THEN
                                    IF i_flg_type(i) = 'E'
                                    THEN
                                        l_exam_req := ts_exam_req.next_key();
                                    ELSE
                                        BEGIN
                                            g_error := 'GET L_EXAM_ORDER 2';
                                            SELECT id_exam_req
                                              INTO l_exam_order
                                              FROM (SELECT first_value(erd.id_exam_req) over(ORDER BY erd.id_exam_req DESC) id_exam_req
                                                      FROM exam_req_det erd
                                                     WHERE erd.id_exam_req_det IN
                                                           (SELECT /*+opt_estimate (table t rows=1)*/
                                                             *
                                                              FROM TABLE(o_exam_req_det_array) t)
                                                       AND erd.id_exam_group = i_exam(i)) t
                                             WHERE rownum = 1;
                                        
                                            l_exam_req := l_exam_order;
                                        
                                        EXCEPTION
                                            WHEN no_data_found THEN
                                                l_exam_req := ts_exam_req.next_key();
                                        END;
                                    END IF;
                            END;
                        END IF;
                    ELSE
                        IF i_flg_type(i) = 'E'
                        THEN
                            l_exam_req := NULL;
                        ELSE
                            BEGIN
                                g_error := 'GET L_EXAM_ORDER 3';
                                SELECT id_exam_req
                                  INTO l_exam_order
                                  FROM (SELECT first_value(erd.id_exam_req) over(ORDER BY erd.id_exam_req DESC) id_exam_req
                                          FROM exam_req_det erd
                                         WHERE erd.id_exam_req_det IN
                                               (SELECT /*+opt_estimate (table t rows=1)*/
                                                 *
                                                  FROM TABLE(o_exam_req_det_array) t)
                                           AND erd.id_exam_group = i_exam(i)) t
                                 WHERE rownum = 1;
                            
                                l_exam_req := l_exam_order;
                            
                            EXCEPTION
                                WHEN no_data_found THEN
                                    l_exam_req := NULL;
                            END;
                        END IF;
                    END IF;
                
                    g_error := 'CALL PK_EXAM_CORE.CREATE_EXAM_REQUEST';
                    IF NOT pk_exam_core.create_exam_request(i_lang                    => i_lang,
                                                       i_prof                    => i_prof,
                                                       i_patient                 => i_patient,
                                                       i_episode                 => i_episode,
                                                       i_exam_req                => l_exam_req,
                                                       i_exam_req_det            => CASE
                                                                                        WHEN i_exam_req_det IS NOT NULL
                                                                                             AND i_exam_req_det.count > 0 THEN
                                                                                         i_exam_req_det(i)
                                                                                        ELSE
                                                                                         NULL
                                                                                    END,
                                                       i_exam                    => l_exam(j),
                                                       i_exam_group              => CASE
                                                                                        WHEN i_flg_type(i) = 'E' THEN
                                                                                         NULL
                                                                                        ELSE
                                                                                         i_exam(i)
                                                                                    END,
                                                       i_dt_req                  => CASE
                                                                                        WHEN i_dt_req IS NOT NULL
                                                                                             AND i_dt_req.count > 0 THEN
                                                                                         i_dt_req(i)
                                                                                        ELSE
                                                                                         NULL
                                                                                    END,
                                                       i_flg_time                => i_flg_time(i),
                                                       i_dt_begin                => i_dt_begin(i),
                                                       i_dt_begin_limit          => i_dt_begin_limit(i),
                                                       i_episode_destination     => i_episode_destination(i),
                                                       i_order_recurrence        => l_order_recurrence,
                                                       i_priority                => i_priority(i),
                                                       i_flg_prn                 => i_flg_prn(i),
                                                       i_notes_prn               => i_notes_prn(i),
                                                       i_flg_fasting             => i_flg_fasting(i),
                                                       i_notes                   => i_notes(i),
                                                       i_notes_scheduler         => i_notes_scheduler(i),
                                                       i_notes_technician        => i_notes_technician(i),
                                                       i_notes_patient           => i_notes_patient(i),
                                                       i_diagnosis_notes         => CASE
                                                                                        WHEN i_diagnosis_notes.exists(i) THEN
                                                                                         i_diagnosis_notes(i)
                                                                                        ELSE
                                                                                         NULL
                                                                                    END,
                                                       i_diagnosis               => CASE
                                                                                        WHEN i_diagnosis IS NOT NULL
                                                                                             AND i_diagnosis.count > 0 THEN
                                                                                         i_diagnosis(i)
                                                                                        ELSE
                                                                                         NULL
                                                                                    END,
                                                       i_laterality              => CASE
                                                                                        WHEN i_laterality IS NOT NULL
                                                                                             AND i_laterality.count > 0 THEN
                                                                                         i_laterality(i)
                                                                                        ELSE
                                                                                         NULL
                                                                                    END,
                                                       i_exec_room               => i_exec_room(i),
                                                       i_exec_institution        => i_exec_institution(i),
                                                       i_clinical_purpose        => i_clinical_purpose(i),
                                                       i_clinical_purpose_notes  => CASE
                                                                                        WHEN i_clinical_purpose_notes IS NOT NULL
                                                                                             AND i_clinical_purpose_notes.count > 0 THEN
                                                                                         i_clinical_purpose_notes(i)
                                                                                        ELSE
                                                                                         NULL
                                                                                    END,
                                                       i_codification            => i_codification(i),
                                                       i_health_plan             => i_health_plan(i),
                                                       i_exemption               => CASE
                                                                                        WHEN i_exemption IS NOT NULL
                                                                                             AND i_exemption.count > 0 THEN
                                                                                         i_exemption(i)
                                                                                        ELSE
                                                                                         NULL
                                                                                    END,
                                                       i_prof_order              => i_prof_order(i),
                                                       i_dt_order                => i_dt_order(i),
                                                       i_order_type              => i_order_type(i),
                                                       i_clinical_question       => l_clinical_question,
                                                       i_response                => l_response,
                                                       i_clinical_question_notes => l_clinical_question_notes,
                                                       i_clinical_decision_rule  => i_clinical_decision_rule(i),
                                                       i_flg_origin_req          => i_flg_origin_req,
                                                       i_task_dependency         => i_task_dependency(i),
                                                       i_flg_task_depending      => i_flg_task_depending(i),
                                                       i_episode_followup_app    => i_episode_followup_app(i),
                                                       i_schedule_followup_app   => i_schedule_followup_app(i),
                                                       i_event_followup_app      => i_event_followup_app(i),
                                                       o_exam_req                => l_exam_req,
                                                       o_exam_req_det            => l_exam_req_det,
                                                       o_error                   => o_error)
                    THEN
                        IF o_error.err_desc IS NOT NULL
                        THEN
                            g_error_code := o_error.ora_sqlcode;
                            g_error      := o_error.ora_sqlerrm;
                        
                            RAISE g_user_exception;
                        ELSE
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                
                    -- check if exam_req not exists
                    g_error := 'OUT VARIABLES';
                    IF NOT ibt_exam_req_map.exists(to_char(l_exam_req))
                    THEN
                        o_exam_req_array.extend;
                        l_count_out_reqs := l_count_out_reqs + 1;
                    
                        -- set mapping between analysis_req and its position in the output array
                        ibt_exam_req_map(to_char(l_exam_req)) := l_count_out_reqs;
                    
                        -- set analysis_req output 
                        o_exam_req_array(l_count_out_reqs) := l_exam_req;
                    END IF;
                
                    o_exam_req_det_array.extend;
                    o_exam_req_det_array(o_exam_req_det_array.count) := l_exam_req_det;
                
                END LOOP;
            END LOOP;
        
            IF l_order_recurr_final_array IS NOT NULL
               OR l_order_recurr_final_array.count > 0
            THEN
                IF l_order_recurrence_prepare = pk_exam_constant.g_no
                THEN
                    g_error := 'CALL PK_ORDER_RECURRENCE_API_DB.PREPARE_ORDER_RECURR_PLAN';
                    IF NOT pk_order_recurrence_api_db.prepare_order_recurr_plan(i_lang            => i_lang,
                                                                                i_prof            => i_prof,
                                                                                i_order_plan      => l_order_recurr_final_array,
                                                                                o_order_plan_exec => l_order_plan,
                                                                                o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    -- removing first element (first req was already created)
                    SELECT t_rec_order_recurr_plan(t.id_order_recurrence_plan, t.exec_number, t.exec_timestamp)
                      BULK COLLECT
                      INTO l_order_plan_aux
                      FROM TABLE(CAST(l_order_plan AS t_tbl_order_recurr_plan)) t
                     WHERE t.exec_number > 1;
                
                    l_order_recurrence_prepare := pk_exam_constant.g_yes;
                END IF;
            
                g_error := 'CALL CREATE_EXAM_RECURRENCE / l_order_plan_aux.count=' || l_order_plan_aux.count;
                IF NOT create_exam_recurrence(i_lang            => i_lang,
                                              i_prof            => i_prof,
                                              i_exec_tab        => l_order_plan_aux,
                                              o_exec_to_process => l_exec_to_process,
                                              o_error           => o_error)
                THEN
                    IF o_error.err_desc IS NOT NULL
                    THEN
                        g_error_code := o_error.ora_sqlcode;
                        g_error      := o_error.ora_sqlerrm;
                    
                        RAISE g_user_exception;
                    ELSE
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              g_error_code,
                                              g_error,
                                              '',
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_EXAM_ORDER',
                                              'U',
                                              '',
                                              o_error);
        
            o_exam_req_array     := table_number();
            o_exam_req_det_array := table_number();
        
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_EXAM_ORDER',
                                              o_error);
            RETURN FALSE;
    END create_exam_order;

    FUNCTION create_exam_order
    (
        i_lang                 IN language.id_language%TYPE,
        i_prof                 IN profissional,
        i_episode              IN episode.id_episode%TYPE,
        i_patient              IN patient.id_patient%TYPE,
        i_tbl_id_pk            IN table_number,
        i_tbl_data             IN table_table_varchar,
        i_tbl_ds_internal_name IN table_varchar,
        i_tbl_real_val         IN table_table_varchar,
        i_tbl_val_clob         IN table_table_clob,
        i_tbl_val_array        IN tt_table_varchar DEFAULT NULL,
        i_tbl_val_array_desc   IN tt_table_varchar DEFAULT NULL,
        i_clinical_question_pk IN table_number,
        i_clinical_question    IN table_varchar,
        i_response             IN table_table_varchar,
        i_test                 IN VARCHAR2,
        i_flg_update           IN VARCHAR2 DEFAULT pk_alert_constant.g_no,
        o_flg_show             OUT VARCHAR2,
        o_msg_title            OUT VARCHAR2,
        o_msg_req              OUT VARCHAR2,
        o_button               OUT VARCHAR2,
        o_exam_req_array       OUT NOCOPY table_number,
        o_exam_req_det_array   OUT NOCOPY table_number,
        o_error                OUT t_error_out
    ) RETURN BOOLEAN IS
        l_tbl_exam                   table_number := table_number();
        l_tbl_flg_time               table_varchar := table_varchar();
        l_dt_begin                   table_varchar := table_varchar();
        l_dt_no_later_than           table_varchar := table_varchar();
        l_tbl_episode_destination    table_number := table_number();
        l_tbl_order_recurrence       table_number := table_number();
        l_tbl_diagnosis_notes        table_varchar := table_varchar();
        l_tbl_id_diagnosis           table_number := table_number();
        l_tbl_id_alert_diagnosis     table_number := table_number();
        l_tbl_diagnosis              table_clob := table_clob();
        l_tbl_clinical_purpose       table_number := table_number();
        l_tbl_clinical_purpose_notes table_varchar := table_varchar();
        l_tbl_laterality             table_varchar := table_varchar();
        l_tbl_priority               table_varchar := table_varchar();
        l_tbl_flg_prn                table_varchar := table_varchar();
        l_tbl_notes_prn              table_varchar := table_varchar();
        l_tbl_exec_institution       table_number := table_number();
        l_tbl_flg_location           table_varchar := table_varchar();
        l_tbl_not_order_reason       table_number := table_number();
        l_tbl_notes                  table_varchar := table_varchar();
        l_tbl_prof_order             table_number := table_number();
        l_tbl_dt_order               table_varchar := table_varchar();
        l_tbl_order_type             table_number := table_number();
        l_tbl_codification           table_number := table_number();
        l_tbl_health_plan            table_number := table_number();
        l_tbl_exemption              table_number := table_number();
        l_tbl_flg_fasting            table_varchar := table_varchar();
        l_tbl_notes_sched            table_varchar := table_varchar();
        l_tbl_notes_technician       table_varchar := table_varchar();
        l_tbl_notes_patient          table_clob := table_clob();
        l_tbl_exec_room              table_number := table_number();
        l_tbl_flg_type               table_varchar := table_varchar();
    
        l_tbl_dt_req                table_varchar := table_varchar();
        l_tbl_task_dependency       table_number := table_number();
        l_tbl_flg_task_depending    table_varchar := table_varchar();
        l_tbl_episode_followup_app  table_number := table_number();
        l_tbl_schedule_followup_app table_number := table_number();
        l_tbl_event_followup_app    table_number := table_number();
    
        --TRATAR
        l_tbl_supply     table_table_number := table_table_number();
        l_tbl_supply_set table_table_number := table_table_number();
        l_tbl_supply_qty table_table_number := table_table_number();
        l_tbl_dt_return  table_table_varchar := table_table_varchar();
        l_tbl_supply_loc table_table_number := table_table_number();
    
        l_tbl_clinical_question       table_table_number := table_table_number();
        l_tbl_response                table_table_varchar := table_table_varchar();
        l_tbl_clinical_question_notes table_table_varchar := table_table_varchar();
        l_tbl_clinical_decision_rule  table_number := table_number();
        --/TRATAR
        l_id_interv_prescription interv_prescription.id_interv_prescription%TYPE;
    BEGIN
        IF i_tbl_data.count > 0
        THEN
            FOR i IN i_tbl_data.first .. i_tbl_data.last
            LOOP
                l_tbl_exam.extend();
                l_tbl_exam(l_tbl_exam.count) := to_number(i_tbl_data(i) (1));
            
                l_tbl_codification.extend();
                l_tbl_codification(l_tbl_codification.count) := to_number(i_tbl_data(i) (2));
            
                --TRATAR A PARTIR DAQUI            
                l_tbl_clinical_question.extend();
                l_tbl_clinical_question(l_tbl_clinical_question.count) := table_number(NULL);
            
                l_tbl_response.extend();
                l_tbl_response(l_tbl_response.count) := table_varchar(NULL);
            
                l_tbl_clinical_question_notes.extend();
                l_tbl_clinical_question_notes(l_tbl_clinical_question_notes.count) := table_varchar(NULL);
            
                l_tbl_clinical_decision_rule.extend();
                l_tbl_clinical_decision_rule(l_tbl_clinical_decision_rule.count) := NULL;
            
                l_tbl_task_dependency.extend();
                l_tbl_task_dependency(l_tbl_task_dependency.count) := NULL;
            
                l_tbl_flg_task_depending.extend();
                l_tbl_flg_task_depending(l_tbl_flg_task_depending.count) := NULL;
            
                l_tbl_episode_followup_app.extend();
                l_tbl_episode_followup_app(l_tbl_episode_followup_app.count) := NULL;
            
                l_tbl_schedule_followup_app.extend();
                l_tbl_schedule_followup_app(l_tbl_schedule_followup_app.count) := NULL;
            
                l_tbl_event_followup_app.extend();
                l_tbl_event_followup_app(l_tbl_event_followup_app.count) := NULL;
            
                l_tbl_exec_institution.extend();
                l_tbl_exec_institution(l_tbl_exec_institution.count) := NULL;
            
                l_tbl_flg_type.extend();
                l_tbl_flg_type(l_tbl_flg_type.count) := i_tbl_data(i) (4);
            
                l_tbl_dt_req.extend();
                l_tbl_dt_req(l_tbl_dt_req.count) := NULL;
            END LOOP;
        END IF;
    
        FOR i IN i_tbl_ds_internal_name.first .. i_tbl_ds_internal_name.last
        LOOP
            IF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_to_execute_list
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_flg_time.extend();
                    l_tbl_flg_time(l_tbl_flg_time.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_start_date
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_dt_begin.extend();
                    l_dt_begin(l_dt_begin.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_dummy_number
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_order_recurrence.extend();
                    l_tbl_order_recurrence(l_tbl_order_recurrence.count) := to_number(i_tbl_real_val(i) (j));
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_clinical_indication_ft
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_diagnosis_notes.extend();
                    l_tbl_diagnosis_notes(l_tbl_diagnosis_notes.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_clinical_indication_mw
            THEN
                FOR j IN i_tbl_val_array(i).first .. i_tbl_val_array(i).last
                LOOP
                    l_tbl_diagnosis.extend();
                    l_tbl_id_diagnosis       := table_number();
                    l_tbl_id_alert_diagnosis := table_number();
                
                    SELECT ad.id_diagnosis, ad.id_alert_diagnosis
                      BULK COLLECT
                      INTO l_tbl_id_diagnosis, l_tbl_id_alert_diagnosis
                      FROM alert_diagnosis ad
                     WHERE ad.id_alert_diagnosis IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                      t.*
                                                       FROM TABLE(i_tbl_val_array(i) (j)) t);
                
                    IF l_tbl_id_diagnosis.count > 0
                    THEN
                        l_tbl_diagnosis(l_tbl_diagnosis.count) := '<EPIS_DIAGNOSES ID_PATIENT="' || i_patient ||
                                                                  '" ID_EPISODE="' || i_episode ||
                                                                  '" PROF_CAT_TYPE="D" FLG_TYPE="P" FLG_EDIT_MODE="" ID_CDR_CALL="">
                            <EPIS_DIAGNOSIS ID_EPIS_DIAGNOSIS="" ID_EPIS_DIAGNOSIS_HIST="" FLG_TRANSF_FINAL="">
                              <CANCEL_REASON ID_CANCEL_REASON="" FLG_CANCEL_DIFF_DIAG="" /> ';
                    
                        FOR k IN l_tbl_id_diagnosis.first .. l_tbl_id_diagnosis.last
                        LOOP
                            l_tbl_diagnosis(l_tbl_diagnosis.count) := l_tbl_diagnosis(l_tbl_diagnosis.count) ||
                                                                      ' <DIAGNOSIS ID_DIAGNOSIS="' ||
                                                                      l_tbl_id_diagnosis(k) || '" ID_ALERT_DIAG="' ||
                                                                      l_tbl_id_alert_diagnosis(k) || '">
                                <DESC_DIAGNOSIS>' ||
                                                                      pk_ts3_search.get_term_description(i_id_language     => i_lang,
                                                                                                         i_id_institution  => i_prof.institution,
                                                                                                         i_id_software     => i_prof.software,
                                                                                                         i_id_concept_term => l_tbl_id_alert_diagnosis(k),
                                                                                                         i_concept_type    => 'DIAGNOSIS',
                                                                                                         i_id_task_type    => pk_alert_constant.g_task_diagnosis) ||
                                                                      '</DESC_DIAGNOSIS>
                                <DIAGNOSIS_WARNING_REPORT>Diagnosis with no form fields.</DIAGNOSIS_WARNING_REPORT>
                              </DIAGNOSIS> ';
                        END LOOP;
                    
                        l_tbl_diagnosis(l_tbl_diagnosis.count) := l_tbl_diagnosis(l_tbl_diagnosis.count) ||
                                                                  ' </EPIS_DIAGNOSIS>
                            <GENERAL_NOTES ID="" ID_CANCEL_REASON="" />
                          </EPIS_DIAGNOSES>';
                    END IF;
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_clinical_purpose
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_clinical_purpose.extend();
                    l_tbl_clinical_purpose(l_tbl_clinical_purpose.count) := to_number(i_tbl_real_val(i) (j));
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_clinical_purpose_ft
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_clinical_purpose_notes.extend();
                    l_tbl_clinical_purpose_notes(l_tbl_clinical_purpose_notes.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_laterality
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_laterality.extend();
                    l_tbl_laterality(l_tbl_laterality.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_priority
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_priority.extend();
                    l_tbl_priority(l_tbl_priority.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_prn
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_flg_prn.extend();
                    l_tbl_flg_prn(l_tbl_flg_prn.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_prn_specify
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_notes_prn.extend();
                    l_tbl_notes_prn(l_tbl_notes_prn.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_reason_not_ordering
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_not_order_reason.extend();
                    l_tbl_not_order_reason(l_tbl_not_order_reason.count) := to_number(i_tbl_real_val(i) (j));
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_ordered_by
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_prof_order.extend();
                    l_tbl_prof_order(l_tbl_prof_order.count) := to_number(i_tbl_real_val(i) (j));
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_ordered_at
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_dt_order.extend();
                    l_tbl_dt_order(l_tbl_dt_order.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_order_type
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_order_type.extend();
                    l_tbl_order_type(l_tbl_order_type.count) := to_number(i_tbl_real_val(i) (j));
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_health_coverage_plan
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_health_plan.extend();
                    l_tbl_health_plan(l_tbl_health_plan.count) := to_number(i_tbl_real_val(i) (j));
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_exemption
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_exemption.extend(); ----------                  
                    IF i_tbl_real_val(i) (j) IS NOT NULL
                    THEN
                        BEGIN
                            SELECT p.id_pat_isencao
                              INTO l_tbl_exemption(l_tbl_exemption.count)
                              FROM pat_isencao p
                             WHERE p.id_isencao = to_number(i_tbl_real_val(i) (j))
                               AND p.id_patient = i_patient
                               AND p.record_status = pk_alert_constant.g_active
                               AND rownum = 1;
                        EXCEPTION
                            WHEN OTHERS THEN
                                l_tbl_exemption(l_tbl_exemption.count) := NULL;
                        END;
                    ELSE
                        l_tbl_exemption(l_tbl_exemption.count) := NULL;
                    END IF;
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_no_later_than
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_dt_no_later_than.extend();
                    l_dt_no_later_than(l_dt_no_later_than.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_next_episode_id
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_episode_destination.extend();
                    l_tbl_episode_destination(l_tbl_episode_destination.count) := to_number(i_tbl_real_val(i) (j));
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_fasting
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_flg_fasting.extend();
                    l_tbl_flg_fasting(l_tbl_flg_fasting.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_additional_notes
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_notes.extend();
                    l_tbl_notes(l_tbl_notes.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_scheduling_notes
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_notes_sched.extend();
                    l_tbl_notes_sched(l_tbl_notes_sched.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_notes_technician
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_notes_technician.extend();
                    l_tbl_notes_technician(l_tbl_notes_technician.count) := i_tbl_real_val(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_patient_notes
            THEN
                FOR j IN i_tbl_val_clob(i).first .. i_tbl_val_clob(i).last
                LOOP
                    l_tbl_notes_patient.extend();
                    l_tbl_notes_patient(l_tbl_notes_patient.count) := i_tbl_val_clob(i) (j);
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_location
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    l_tbl_exec_room.extend();
                    l_tbl_exec_room(l_tbl_exec_room.count) := i_tbl_real_val(i) (j);
                END LOOP;
            END IF;
        END LOOP;
    
        IF i_flg_update = pk_alert_constant.g_no
        THEN
            RETURN pk_exam_core.create_exam_order(i_lang                    => i_lang,
                                                  i_prof                    => i_prof,
                                                  i_patient                 => i_patient,
                                                  i_episode                 => i_episode,
                                                  i_exam_req                => NULL,
                                                  i_exam_req_det            => NULL,
                                                  i_exam                    => l_tbl_exam,
                                                  i_flg_type                => l_tbl_flg_type,
                                                  i_dt_req                  => l_tbl_dt_req,
                                                  i_flg_time                => l_tbl_flg_time,
                                                  i_dt_begin                => l_dt_begin,
                                                  i_dt_begin_limit          => l_dt_no_later_than,
                                                  i_episode_destination     => l_tbl_episode_destination,
                                                  i_order_recurrence        => l_tbl_order_recurrence,
                                                  i_priority                => l_tbl_priority,
                                                  i_flg_prn                 => l_tbl_flg_prn,
                                                  i_notes_prn               => l_tbl_notes_prn,
                                                  i_flg_fasting             => l_tbl_flg_fasting,
                                                  i_notes                   => l_tbl_notes,
                                                  i_notes_scheduler         => l_tbl_notes_sched,
                                                  i_notes_technician        => l_tbl_notes_technician,
                                                  i_notes_patient           => l_tbl_notes_patient, ------
                                                  i_diagnosis_notes         => l_tbl_diagnosis_notes,
                                                  i_diagnosis               => pk_diagnosis.get_diag_rec(i_lang   => i_lang,
                                                                                                         i_prof   => i_prof,
                                                                                                         i_params => l_tbl_diagnosis),
                                                  i_laterality              => l_tbl_laterality,
                                                  i_exec_room               => l_tbl_exec_room,
                                                  i_exec_institution        => l_tbl_exec_institution, --Ver no flash se é utilizado
                                                  i_clinical_purpose        => l_tbl_clinical_purpose,
                                                  i_clinical_purpose_notes  => l_tbl_clinical_purpose_notes,
                                                  i_codification            => l_tbl_codification,
                                                  i_health_plan             => l_tbl_health_plan,
                                                  i_exemption               => l_tbl_exemption,
                                                  i_prof_order              => l_tbl_prof_order,
                                                  i_dt_order                => l_tbl_dt_order,
                                                  i_order_type              => l_tbl_order_type,
                                                  i_clinical_question       => l_tbl_clinical_question,
                                                  i_response                => l_tbl_response,
                                                  i_clinical_question_notes => l_tbl_clinical_question_notes,
                                                  i_clinical_decision_rule  => l_tbl_clinical_decision_rule,
                                                  i_flg_origin_req          => 'D', --confirmar com o flash
                                                  i_task_dependency         => l_tbl_task_dependency,
                                                  i_flg_task_depending      => l_tbl_flg_task_depending,
                                                  i_episode_followup_app    => l_tbl_episode_followup_app,
                                                  i_schedule_followup_app   => l_tbl_schedule_followup_app,
                                                  i_event_followup_app      => l_tbl_event_followup_app,
                                                  i_test                    => i_test,
                                                  o_flg_show                => o_flg_show,
                                                  o_msg_title               => o_msg_title,
                                                  o_msg_req                 => o_msg_req,
                                                  o_button                  => o_button,
                                                  o_exam_req_array          => o_exam_req_array,
                                                  o_exam_req_det_array      => o_exam_req_det_array,
                                                  o_error                   => o_error);
            /*        ELSE
            SELECT DISTINCT ipd.id_interv_prescription
              INTO l_id_interv_prescription
              FROM interv_presc_det ipd
             WHERE ipd.id_interv_presc_det IN (SELECT \*+opt_estimate(table t rows=1)*\
                                                t.*
                                                 FROM TABLE(i_tbl_id_pk) t);
            
            RETURN pk_exam_core.update_exam_order(i_lang                    => ,
                                                  i_prof                    => ,
                                                  i_episode                 => ,
                                                  i_exam_req                => ,
                                                  i_exam_req_det            => ,
                                                  i_exam                    => ,
                                                  i_flg_time                => ,
                                                  i_dt_begin                => ,
                                                  i_priority                => ,
                                                  i_flg_prn                 => ,
                                                  i_notes_prn               => ,
                                                  i_flg_fasting             => ,
                                                  i_notes                   => ,
                                                  i_notes_scheduler         => ,
                                                  i_notes_technician        => ,
                                                  i_notes_patient           => ,
                                                  i_diagnosis_notes         => ,
                                                  i_diagnosis               => ,
                                                  i_laterality              => ,
                                                  i_exec_room               => ,
                                                  i_exec_institution        => ,
                                                  i_clinical_purpose        => ,
                                                  i_clinical_purpose_notes  => ,
                                                  i_codification            => ,
                                                  i_health_plan             => ,
                                                  i_exemption               => ,
                                                  i_prof_order              => ,
                                                  i_dt_order                => ,
                                                  i_order_type              => ,
                                                  i_clinical_question       => ,
                                                  i_response                => ,
                                                  i_clinical_question_notes => ,
                                                  o_error                   => );*/
        END IF;
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              g_error_code,
                                              g_error,
                                              '',
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_EXAM_ORDER',
                                              'U',
                                              '',
                                              o_error);
        
            o_exam_req_array     := table_number();
            o_exam_req_det_array := table_number();
        
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_EXAM_ORDER',
                                              o_error);
    END create_exam_order;

    FUNCTION create_exam_request
    (
        i_lang                    IN language.id_language%TYPE,
        i_prof                    IN profissional,
        i_patient                 IN patient.id_patient%TYPE,
        i_episode                 IN exam_req.id_episode%TYPE,
        i_exam_req                IN exam_req.id_exam_req%TYPE,
        i_exam_req_det            IN exam_req_det.id_exam_req_det%TYPE,
        i_exam                    IN exam.id_exam%TYPE,
        i_exam_group              IN exam_group.id_exam_group%TYPE,
        i_dt_req                  IN VARCHAR2 DEFAULT NULL,
        i_flg_time                IN exam_req.flg_time%TYPE,
        i_dt_begin                IN VARCHAR2,
        i_dt_begin_limit          IN VARCHAR2,
        i_episode_destination     IN exam_req.id_episode_destination%TYPE,
        i_order_recurrence        IN exam_req_det.id_order_recurrence%TYPE,
        i_priority                IN exam_req.priority%TYPE,
        i_flg_prn                 IN exam_req_det.flg_prn%TYPE,
        i_notes_prn               IN exam_req_det.prn_notes%TYPE,
        i_flg_fasting             IN exam_req_det.flg_fasting%TYPE,
        i_notes                   IN exam_req_det.notes%TYPE,
        i_notes_scheduler         IN exam_req_det.notes_scheduler%TYPE,
        i_notes_technician        IN exam_req_det.notes_tech%TYPE,
        i_notes_patient           IN exam_req_det.notes_patient%TYPE,
        i_diagnosis_notes         IN exam_req_det.diagnosis_notes%TYPE DEFAULT NULL,
        i_diagnosis               IN pk_edis_types.rec_in_epis_diagnosis,
        i_laterality              IN exam_req_det.flg_laterality%TYPE,
        i_exec_room               IN exam_req_det.id_room%TYPE,
        i_exec_institution        IN exam_req_det.id_exec_institution%TYPE,
        i_clinical_purpose        IN exam_req_det.id_clinical_purpose%TYPE,
        i_clinical_purpose_notes  IN exam_req_det.clinical_purpose_notes%TYPE,
        i_codification            IN codification.id_codification%TYPE,
        i_health_plan             IN exam_req_det.id_pat_health_plan%TYPE,
        i_exemption               IN exam_req_det.id_pat_exemption%TYPE,
        i_prof_order              IN co_sign.id_prof_ordered_by%TYPE,
        i_dt_order                IN VARCHAR2,
        i_order_type              IN co_sign.id_order_type%TYPE,
        i_clinical_question       IN table_number,
        i_response                IN table_varchar,
        i_clinical_question_notes IN table_varchar,
        i_clinical_decision_rule  IN exam_req_det.id_cdr%TYPE,
        i_flg_origin_req          IN exam_req_det.flg_req_origin_module%TYPE DEFAULT 'D',
        i_task_dependency         IN exam_req_det.id_task_dependency%TYPE,
        i_flg_task_depending      IN VARCHAR2,
        i_episode_followup_app    IN episode.id_episode%TYPE,
        i_schedule_followup_app   IN schedule.id_schedule%TYPE,
        i_event_followup_app      IN consult_req.id_consult_req%TYPE,
        o_exam_req                OUT exam_req.id_exam_req%TYPE,
        o_exam_req_det            OUT exam_req_det.id_exam_req_det%TYPE,
        o_error                   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_req IS
            SELECT er.id_exam_req
              FROM exam_req er
             WHERE er.id_exam_req = i_exam_req;
    
        CURSOR c_room(l_exam IN exam.id_exam%TYPE) IS
            SELECT er.id_room
              FROM exam_room er, room r, department d
             WHERE er.id_exam = l_exam
               AND er.flg_default = pk_exam_constant.g_yes
               AND er.flg_available = pk_exam_constant.g_available
               AND (er.id_exam_dep_clin_serv IS NULL OR EXISTS
                    (SELECT 1
                       FROM exam_dep_clin_serv edcs
                      WHERE edcs.flg_type = pk_exam_constant.g_exam_can_req
                        AND edcs.id_software = i_prof.software
                        AND edcs.id_institution = i_prof.institution
                        AND edcs.id_exam_dep_clin_serv = er.id_exam_dep_clin_serv))
               AND er.id_room = r.id_room
               AND r.id_department = d.id_department
               AND d.id_institution = i_prof.institution;
    
        TYPE request_movement IS RECORD(
            id_room room.id_room%TYPE,
            id_mov  exam_req_det.id_movement%TYPE);
    
        TYPE rm IS TABLE OF request_movement INDEX BY BINARY_INTEGER;
        req_mov rm;
        k       NUMBER := 0;
    
        l_next_req exam_req.id_exam_req%TYPE;
        l_next_det exam_req_det.id_exam_req_det%TYPE;
        l_exam     table_number := table_number();
    
        l_status     exam_req.flg_status%TYPE;
        l_status_det exam_req_det.flg_status%TYPE;
    
        l_dt_req          exam_req.dt_req_tstz%TYPE;
        l_dt_begin        exam_req.dt_begin_tstz%TYPE;
        l_dt_schedule     exam_req.dt_schedule_tstz%TYPE;
        l_dt_final_target exam_req_det.dt_final_target_tstz%TYPE;
    
        l_exam_codification       exam_codification.id_exam_codification%TYPE;
        l_exam_flg_type           exam.flg_type%TYPE;
        l_id_combination_spec     combination_spec.id_combination_spec%TYPE;
        l_task_dependency_from    tde_task_dependency.id_task_dependency%TYPE;
        l_task_dependency_to      tde_task_dependency.id_task_dependency%TYPE;
        l_create_epis_combination VARCHAR2(1 CHAR) := pk_alert_constant.g_no;
        l_dt_entrance_room        VARCHAR2(200 CHAR);
        l_dt_last_interaction     VARCHAR2(50 CHAR);
        l_dt_movement             VARCHAR2(50 CHAR);
        l_dt_first_image_req      VARCHAR2(50 CHAR);
        l_dt_first_image_exec     VARCHAR2(50 CHAR);
        l_id_co_sign              co_sign.id_co_sign%TYPE;
        l_id_co_sign_hist         co_sign_hist.id_co_sign_hist%TYPE;
        l_flg_location            exam_req_det.flg_location%TYPE;
        l_id_mov                  movement.id_movement%TYPE;
        l_req_mov                 BOOLEAN;
        l_id_room                 epis_info.id_room%TYPE;
        l_desc_room               VARCHAR2(1000 CHAR);
        l_new_room                room.id_room%TYPE;
        l_flg_mov_pat             exam_dep_clin_serv.flg_mov_pat%TYPE;
        l_flg_state               schedule_outp.flg_state%TYPE;
        l_flg_type                episode.id_epis_type%TYPE;
        l_flg_status              episode.flg_status%TYPE;
        l_gener_barcode           sys_config.value%TYPE;
        l_barcode                 VARCHAR2(30 CHAR);
        l_id_icnp_sug_interv      table_number;
        l_aux                     table_varchar2;
    
        l_flg_profile     profile_template.flg_profile%TYPE;
        l_sys_alert_event sys_alert_event%ROWTYPE;
    
        l_flg_show  VARCHAR2(1 CHAR);
        l_msg_text  VARCHAR2(1000 CHAR);
        l_msg_title VARCHAR2(1000 CHAR);
        l_button    VARCHAR2(6 CHAR);
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        l_dt_req          := nvl(pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_req, NULL), g_sysdate_tstz);
        l_dt_begin        := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin, NULL);
        l_dt_final_target := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin_limit, NULL);
    
        --Check if is necessary create task combinations    
        IF i_episode_followup_app IS NOT NULL
           OR i_schedule_followup_app IS NOT NULL
           OR i_event_followup_app IS NOT NULL
        THEN
            l_create_epis_combination := pk_alert_constant.g_yes;
        END IF;
    
        g_error := 'GET STATUS';
        IF i_flg_time != pk_exam_constant.g_flg_time_e
        THEN
            -- realização futura
            l_status             := pk_exam_constant.g_exam_pending;
            l_status_det         := pk_exam_constant.g_exam_pending;
            l_dt_first_image_req := NULL;
            l_dt_begin           := NULL;
        
            IF i_flg_time IN (pk_exam_constant.g_flg_time_b, pk_exam_constant.g_flg_time_d)
            THEN
                IF (i_prof.software != pk_sysconfig.get_config('SOFTWARE_ID_CARE', i_prof) OR
                   (i_prof.software = pk_sysconfig.get_config('SOFTWARE_ID_CARE', i_prof) AND
                   pk_sysconfig.get_config('INSTIT_SCHEDULER_EXISTS', i_prof) = 'N'))
                THEN
                    -- realização entre consultas
                    l_status     := pk_exam_constant.g_exam_tosched;
                    l_status_det := pk_exam_constant.g_exam_tosched;
                    IF i_dt_begin IS NOT NULL
                    THEN
                        -- sugestão do agendamento
                        l_dt_begin    := NULL;
                        l_dt_schedule := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin, NULL);
                    ELSE
                        l_dt_begin    := NULL;
                        l_dt_schedule := NULL;
                    END IF;
                ELSE
                    l_status     := pk_exam_constant.g_exam_tosched;
                    l_status_det := pk_exam_constant.g_exam_tosched;
                    l_dt_begin   := NULL;
                END IF;
            END IF;
        ELSE
            -- realização neste epis.
            IF i_episode IS NOT NULL
            THEN
                IF pk_sysconfig.get_config('REQ_NEXT_DAY', i_prof) = pk_exam_constant.g_no
                THEN
                    IF pk_date_utils.trunc_insttimezone(i_prof, nvl(l_dt_begin, g_sysdate_tstz), 'DD') !=
                       pk_date_utils.trunc_insttimezone(i_prof, g_sysdate_tstz, 'DD')
                    THEN
                        g_error_code := 'EXAM_M010';
                        g_error      := pk_message.get_message(i_lang, 'EXAM_M010');
                        RAISE g_user_exception;
                    END IF;
                END IF;
            END IF;
        
            IF nvl(l_dt_begin, g_sysdate_tstz) > g_sysdate_tstz
            THEN
                -- pendente
                l_status             := pk_exam_constant.g_exam_pending;
                l_status_det         := pk_exam_constant.g_exam_pending;
                l_dt_first_image_req := NULL;
            ELSE
                l_dt_begin           := g_sysdate_tstz;
                l_status             := pk_exam_constant.g_exam_req;
                l_status_det         := pk_exam_constant.g_exam_req;
                l_dt_first_image_req := pk_date_utils.date_send_tsz(i_lang, g_sysdate_tstz, i_prof);
            END IF;
        END IF;
    
        IF i_exec_institution IS NOT NULL
        THEN
            IF i_exec_institution != i_prof.institution
            THEN
                l_status     := pk_exam_constant.g_exam_exterior;
                l_status_det := pk_exam_constant.g_exam_exterior;
            
                l_flg_location := pk_exam_constant.g_exam_location_exterior;
            ELSE
                IF i_flg_prn = pk_exam_constant.g_yes
                THEN
                    l_status     := pk_exam_constant.g_exam_sos;
                    l_status_det := pk_exam_constant.g_exam_sos;
                END IF;
                l_flg_location := pk_exam_constant.g_exam_location_interior;
            END IF;
        ELSE
            IF i_flg_time != pk_exam_constant.g_flg_time_r
            THEN
                IF i_flg_prn = pk_exam_constant.g_yes
                THEN
                    l_status     := pk_exam_constant.g_exam_sos;
                    l_status_det := pk_exam_constant.g_exam_sos;
                END IF;
                l_flg_location := pk_exam_constant.g_exam_location_interior;
            ELSE
                l_flg_location := pk_exam_constant.g_exam_location_exterior;
            END IF;
        END IF;
    
        -- if the i_flg_task_depending is equal 'Y' than this task only be started by TDE mecanism, so the flg_status is W 
        IF i_flg_task_depending = pk_alert_constant.g_yes
        THEN
            l_status     := pk_exam_constant.g_exam_wtg_tde;
            l_status_det := pk_exam_constant.g_exam_wtg_tde;
        END IF;
    
        IF i_flg_origin_req = pk_alert_constant.g_task_origin_order_set
        THEN
            l_status     := pk_exam_constant.g_exam_predefined;
            l_status_det := pk_exam_constant.g_exam_predefined;
        ELSIF i_flg_origin_req = pk_alert_constant.g_task_origin_cpoe
        THEN
            l_status     := pk_exam_constant.g_exam_draft;
            l_status_det := pk_exam_constant.g_exam_draft;
        END IF;
    
        --New validation for ADW
        IF l_dt_begin IS NOT NULL
        THEN
            IF l_dt_begin < l_dt_req
            THEN
                l_dt_begin := l_dt_req;
            END IF;
        END IF;
    
        IF i_episode IS NOT NULL
        THEN
            -- Verifica localização actual do doente
            g_error := 'CALL TO PK_VISIT.GET_EPIS_INFO';
            IF NOT pk_visit.get_epis_info(i_lang                => i_lang,
                                          i_id_episode          => i_episode,
                                          i_prof                => i_prof,
                                          o_flg_type            => l_flg_type,
                                          o_flg_status          => l_flg_status,
                                          o_id_room             => l_id_room,
                                          o_desc_room           => l_desc_room,
                                          o_dt_entrance_room    => l_dt_entrance_room,
                                          o_dt_last_interaction => l_dt_last_interaction,
                                          o_dt_movement         => l_dt_movement,
                                          o_error               => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            IF i_flg_time = pk_exam_constant.g_flg_time_e
               AND -- Só se exame foi requisitado para o epis actual
               l_status = pk_exam_constant.g_exam_req
            THEN
                -- e ñ está pendente
                -- Verifica se o exame exige transporte do doente
                BEGIN
                    SELECT nvl(edcs.flg_mov_pat, pk_exam_constant.g_yes)
                      INTO l_flg_mov_pat
                      FROM exam_dep_clin_serv edcs
                     WHERE edcs.id_exam = i_exam
                       AND edcs.flg_type = pk_exam_constant.g_exam_can_req
                       AND edcs.id_institution = i_prof.institution
                       AND edcs.id_software = i_prof.software;
                EXCEPTION
                    WHEN no_data_found THEN
                        l_flg_mov_pat := pk_exam_constant.g_no;
                END;
            
                IF l_flg_mov_pat = pk_exam_constant.g_yes
                   AND nvl(i_exam_req_det, 0) = 0
                THEN
                    -- exame exige transporte do doente
                    g_error := 'OPEN C_ROOM';
                    OPEN c_room(i_exam);
                    FETCH c_room
                        INTO l_new_room;
                    g_found := c_room%NOTFOUND;
                    CLOSE c_room;
                
                    IF g_found
                       AND i_exec_room IS NULL
                    THEN
                        g_error_code := 'EXAM_M008';
                        g_error      := REPLACE(pk_message.get_message(i_lang, 'EXAM_M008'),
                                                '@1',
                                                pk_exam_utils.get_alias_translation(i_lang,
                                                                                    i_prof,
                                                                                    'EXAM.CODE_EXAM.' || i_exam,
                                                                                    NULL));
                        RAISE g_user_exception;
                    END IF;
                
                    IF nvl(l_id_room, 0) != nvl(i_exec_room, l_new_room)
                    THEN
                        -- localização actual do doente ñ é a sala de realização do exame
                        -- Verificar se já foi requisitado mov para essa sala, nesta mesma requisição
                        -- (se um detalhe já registado tem é realizado na mm sala)
                        g_error   := 'LOOP PREVIOUS REQ';
                        l_req_mov := TRUE; -- Inicialização
                        l_id_mov  := NULL;
                        IF k != 0
                        THEN
                            FOR j IN 1 .. k
                            LOOP
                                IF req_mov(j).id_room = nvl(i_exec_room, l_new_room)
                                THEN
                                    -- Já foi requisitado mov p/ esta sala
                                    l_req_mov := FALSE;
                                    l_id_mov  := req_mov(j).id_mov;
                                    EXIT;
                                END IF;
                            END LOOP;
                        END IF;
                        IF l_req_mov
                        THEN
                            g_error := 'CALL TO PK_MOVEMENT.CREATE_MOVEMENT';
                            IF NOT pk_movement.create_movement_no_commit(i_lang          => i_lang,
                                                                         i_episode       => i_episode,
                                                                         i_prof          => i_prof,
                                                                         i_room          => nvl(i_exec_room, l_new_room),
                                                                         i_necessity     => NULL,
                                                                         i_dt_req_str    => pk_date_utils.date_send_tsz(i_lang,
                                                                                                                        l_dt_begin,
                                                                                                                        i_prof),
                                                                         i_prof_cat_type => pk_prof_utils.get_category(i_lang,
                                                                                                                       i_prof),
                                                                         o_id_mov        => l_id_mov,
                                                                         o_flg_show      => l_flg_show,
                                                                         o_msg           => l_msg_text,
                                                                         o_msg_title     => l_msg_title,
                                                                         o_button        => l_button,
                                                                         o_error         => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                            g_error := 'CALL TO PK_MOVEMENT.INSERT_MOVEMENT_TASK';
                            IF NOT pk_movement.insert_movement_task(i_lang          => i_lang,
                                                                    i_episode       => i_episode,
                                                                    i_prof          => i_prof,
                                                                    i_prof_cat_type => pk_prof_utils.get_category(i_lang,
                                                                                                                  i_prof),
                                                                    o_error         => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                            -- Guarda-se os IDs dos movimentos p/ associar a outros detalhes c/ a
                            -- mesma sala de realização de exame
                            g_error := 'SET MOV VECTOR';
                            k := k + 1;
                            req_mov(k).id_room := nvl(i_exec_room, l_new_room);
                            req_mov(k).id_mov := l_id_mov;
                        END IF;
                    ELSE
                        -- Basta q um dos exames pedidos seja realizado na sala q é localização actual
                        -- do doente para fazer c/ q o cabeçalho de requisição fique 'em execução'
                        l_status     := pk_exam_constant.g_exam_toexec;
                        l_status_det := pk_exam_constant.g_exam_toexec;
                    END IF;
                END IF;
            END IF;
        END IF;
    
        IF i_flg_time != pk_exam_constant.g_flg_time_r
        THEN
            g_error         := 'GET DEFAULT ROOM';
            l_gener_barcode := pk_sysconfig.get_config('GENERATE_BARCODE_EXAM', i_prof);
        
            IF l_gener_barcode = pk_exam_constant.g_yes
            THEN
                g_error := 'CALL TO PK_BARCODE.GENERATE_BARCODE';
                IF NOT pk_barcode.generate_barcode(i_lang         => i_lang,
                                                   i_barcode_type => 'E',
                                                   i_institution  => i_prof.institution,
                                                   i_software     => i_prof.software,
                                                   o_barcode      => l_barcode,
                                                   o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        BEGIN
            SELECT so.flg_state
              INTO l_flg_state
              FROM epis_info ei, schedule_outp so
             WHERE ei.id_episode = i_episode
               AND ei.id_schedule = so.id_schedule(+);
        EXCEPTION
            WHEN no_data_found THEN
                l_flg_state := pk_exam_constant.g_waiting_technician;
        END;
    
        OPEN c_exam_req;
        FETCH c_exam_req
            INTO l_next_req;
        g_found := c_exam_req%FOUND;
        CLOSE c_exam_req;
    
        IF i_exam_req IS NOT NULL
        THEN
            l_next_req := i_exam_req;
            o_exam_req := i_exam_req;
        ELSE
            l_next_req := ts_exam_req.next_key();
        END IF;
    
        IF NOT g_found
        THEN
            g_error := 'INSERT INTO EXAM_REQ';
            ts_exam_req.ins(id_exam_req_in            => l_next_req,
                            id_patient_in             => i_patient,
                            id_episode_in             => CASE
                                                             WHEN i_flg_time = pk_exam_constant.g_flg_time_e THEN
                                                              i_episode
                                                             WHEN i_flg_time = pk_exam_constant.g_flg_time_r THEN
                                                              i_episode
                                                             ELSE
                                                              NULL
                                                         END,
                            id_episode_origin_in      => CASE
                                                             WHEN i_flg_time = pk_exam_constant.g_flg_time_e THEN
                                                              NULL
                                                             WHEN i_flg_time = pk_exam_constant.g_flg_time_r THEN
                                                              NULL
                                                             ELSE
                                                              i_episode
                                                         END,
                            id_episode_destination_in => CASE
                                                             WHEN i_flg_time = pk_exam_constant.g_flg_time_n THEN
                                                              i_episode_destination
                                                             ELSE
                                                              NULL
                                                         END,
                            id_visit_in               => CASE
                                                             WHEN i_flg_time = pk_exam_constant.g_flg_time_e THEN
                                                              pk_visit.get_visit(i_episode, o_error)
                                                             ELSE
                                                              NULL
                                                         END,
                            id_institution_in         => i_prof.institution,
                            flg_time_in               => i_flg_time,
                            flg_status_in             => l_status,
                            id_prof_req_in            => i_prof.id,
                            dt_req_tstz_in            => l_dt_req,
                            dt_begin_tstz_in          => CASE l_status
                                                             WHEN pk_exam_constant.g_exam_wtg_tde THEN
                                                              NULL
                                                             ELSE
                                                              l_dt_begin
                                                         END,
                            dt_schedule_tstz_in       => l_dt_schedule,
                            priority_in               => i_priority,
                            id_exec_institution_in    => i_exec_institution,
                            notes_in                  => NULL,
                            notes_tech_in             => NULL,
                            notes_patient_in          => NULL,
                            id_exam_group_in          => i_exam_group,
                            flg_contact_in            => CASE
                                                             WHEN l_flg_state = pk_exam_constant.g_in_technician THEN
                                                              l_flg_state
                                                             ELSE
                                                              pk_exam_constant.g_waiting_technician
                                                         END,
                            dt_contact_in             => CASE
                                                             WHEN l_flg_state = pk_exam_constant.g_in_technician THEN
                                                              l_dt_req
                                                             ELSE
                                                              NULL
                                                         END,
                            id_prof_last_update_in    => i_prof.id,
                            dt_last_update_tstz_in    => g_sysdate_tstz,
                            rows_out                  => l_rows_out);
        
            t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            o_exam_req := l_next_req;
        
            IF l_status != pk_exam_constant.g_exam_predefined
            THEN
                g_error := 'CALL TO PK_IA_EVENT_IMAGE.EXAM_ORDER_NEW';
                pk_ia_event_image.exam_order_new(i_id_exam_req => l_next_req, i_id_institution => i_prof.institution);
            END IF;
        
            IF i_episode IS NOT NULL
            THEN
                -- inserir em log de estados
                IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                        i_prof       => i_prof,
                                        i_id_episode => i_episode,
                                        i_flg_status => l_status,
                                        i_id_record  => l_next_req,
                                        i_flg_type   => pk_exam_constant.g_exam_type_req,
                                        o_error      => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        -- Precisa da sala para criar o exame se a sala for nula
        IF i_exec_room IS NULL
        THEN
            g_error := 'OPEN C_ROOM';
            OPEN c_room(i_exam);
            FETCH c_room
                INTO l_new_room;
            CLOSE c_room;
        END IF;
    
        IF (i_exam_req_det IS NULL)
        THEN
            g_error    := 'GET SEQ_EXAM_REQ_DET.NEXTVAL';
            l_next_det := ts_exam_req_det.next_key(sequence_in => 'SEQ_EXAM_REQ_DET');
        ELSE
            l_next_det := i_exam_req_det;
        END IF;
    
        BEGIN
            SELECT ec.id_exam_codification
              INTO l_exam_codification
              FROM exam_codification ec
             WHERE ec.id_codification = i_codification
               AND ec.id_exam = i_exam
               AND ec.flg_available = pk_exam_constant.g_available;
        EXCEPTION
            WHEN no_data_found THEN
                l_exam_codification := NULL;
        END;
    
        g_error := 'GET EXAM.FLG_TYPE';
        SELECT e.flg_type
          INTO l_exam_flg_type
          FROM exam e
         WHERE e.id_exam = i_exam;
    
        IF i_order_type IS NOT NULL
        THEN
            g_error := 'CALL PK_CO_SIGN_API.SET_PENDING_CO_SIGN_TASK';
            IF NOT pk_co_sign_api.set_pending_co_sign_task(i_lang                   => i_lang,
                                                      i_prof                   => i_prof,
                                                      i_episode                => i_episode,
                                                      i_id_task_type           => CASE
                                                                                      WHEN l_exam_flg_type =
                                                                                           pk_exam_constant.g_type_img THEN
                                                                                       pk_alert_constant.g_task_imaging_exams
                                                                                      ELSE
                                                                                       pk_alert_constant.g_task_other_exams
                                                                                  END,
                                                      i_cosign_def_action_type => pk_co_sign_api.g_cosign_action_def_add,
                                                      i_id_task                => l_next_det,
                                                      i_id_task_group          => l_next_det,
                                                      i_id_order_type          => i_order_type,
                                                      i_id_prof_created        => i_prof.id,
                                                      i_id_prof_ordered_by     => i_prof_order,
                                                      i_dt_created             => g_sysdate_tstz,
                                                      i_dt_ordered_by          => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                i_prof,
                                                                                                                i_dt_order,
                                                                                                                NULL),
                                                      o_id_co_sign             => l_id_co_sign,
                                                      o_id_co_sign_hist        => l_id_co_sign_hist,
                                                      o_error                  => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        l_rows_out := NULL;
    
        g_error := 'INSERT INTO EXAM_REQ_DET';
        ts_exam_req_det.ins(id_exam_req_det_in        => l_next_det,
                            id_exam_req_in            => l_next_req,
                            id_exam_in                => i_exam,
                            id_exam_group_in          => i_exam_group,
                            flg_status_in             => l_status_det,
                            dt_target_tstz_in         => l_dt_begin,
                            dt_final_target_tstz_in   => l_dt_final_target,
                            id_order_recurrence_in    => i_order_recurrence,
                            flg_priority_in           => i_priority,
                            flg_prn_in                => i_flg_prn,
                            prn_notes_in              => i_notes_prn,
                            flg_fasting_in            => i_flg_fasting,
                            id_clinical_purpose_in    => i_clinical_purpose,
                            clinical_purpose_notes_in => i_clinical_purpose_notes,
                            flg_laterality_in         => i_laterality,
                            flg_location_in           => l_flg_location,
                            id_room_in                => nvl(i_exec_room, l_new_room),
                            id_exec_institution_in    => i_exec_institution,
                            id_movement_in            => l_id_mov,
                            barcode_in                => l_barcode,
                            notes_in                  => i_notes,
                            notes_scheduler_in        => i_notes_scheduler,
                            notes_tech_in             => i_notes_technician,
                            notes_patient_in          => i_notes_patient,
                            id_exam_codification_in   => l_exam_codification,
                            id_pat_health_plan_in     => i_health_plan,
                            id_pat_exemption_in       => i_exemption,
                            id_task_dependency_in     => i_task_dependency,
                            id_cdr_in                 => i_clinical_decision_rule,
                            id_co_sign_order_in       => l_id_co_sign_hist,
                            flg_req_origin_module_in  => i_flg_origin_req,
                            id_prof_last_update_in    => i_prof.id,
                            dt_last_update_tstz_in    => g_sysdate_tstz,
                            diagnosis_notes_in        => i_diagnosis_notes,
                            rows_out                  => l_rows_out);
    
        g_error := 'CALL PROCESS_INSERT';
        t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_REQ_DET',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        o_exam_req_det := l_next_det;
    
        IF i_episode IS NOT NULL
        THEN
            -- inserir em log de estados
            IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                    i_prof       => i_prof,
                                    i_id_episode => i_episode,
                                    i_flg_status => l_status_det,
                                    i_id_record  => l_next_det,
                                    i_flg_type   => pk_exam_constant.g_exam_type_det,
                                    o_error      => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        IF l_status_det != pk_exam_constant.g_exam_predefined
        THEN
            IF l_status_det = pk_exam_constant.g_exam_exterior
            THEN
                g_error := 'CALL TO PK_IA_EVENT_IMAGE.EXAM_REQUEST_EXTERNAL_NEW';
                pk_ia_event_image.exam_request_external_new(i_id_exam_req_det => l_next_det,
                                                            i_id_institution  => i_prof.institution);
            ELSE
                g_error := 'CALL TO EXAM_REQUEST_NEW.EXAM_ORDER_NEW';
                pk_ia_event_image.exam_request_new(i_id_exam_req_det => l_next_det,
                                                   i_id_institution  => i_prof.institution);
            END IF;
        END IF;
    
        IF i_flg_time != pk_exam_constant.g_flg_time_r
        THEN
            IF i_clinical_question IS NOT NULL
               AND i_clinical_question.count != 0
            THEN
                FOR i IN 1 .. i_clinical_question.count
                LOOP
                    IF i_clinical_question(i) IS NOT NULL
                    THEN
                        IF i_response(i) IS NOT NULL
                        THEN
                            l_aux := pk_utils.str_split(i_response(i), '|');
                        
                            FOR j IN 1 .. l_aux.count
                            LOOP
                                g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE';
                                INSERT INTO exam_question_response
                                    (id_exam_question_response,
                                     id_episode,
                                     id_exam_req_det,
                                     flg_time,
                                     id_questionnaire,
                                     id_response,
                                     notes,
                                     id_prof_last_update,
                                     dt_last_update_tstz)
                                VALUES
                                    (seq_exam_question_response.nextval,
                                     i_episode,
                                     l_next_det,
                                     pk_exam_constant.g_exam_cq_on_order,
                                     i_clinical_question(i),
                                     to_number(l_aux(j)),
                                     i_clinical_question_notes(i),
                                     i_prof.id,
                                     g_sysdate_tstz);
                            END LOOP;
                        ELSE
                            g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE';
                            INSERT INTO exam_question_response
                                (id_exam_question_response,
                                 id_episode,
                                 id_exam_req_det,
                                 flg_time,
                                 id_questionnaire,
                                 id_response,
                                 notes,
                                 id_prof_last_update,
                                 dt_last_update_tstz)
                            VALUES
                                (seq_exam_question_response.nextval,
                                 i_episode,
                                 l_next_det,
                                 pk_exam_constant.g_exam_cq_on_order,
                                 i_clinical_question(i),
                                 NULL,
                                 i_clinical_question_notes(i),
                                 i_prof.id,
                                 g_sysdate_tstz);
                        END IF;
                    END IF;
                END LOOP;
            END IF;
        END IF;
    
        IF i_episode IS NOT NULL
        THEN
            IF i_diagnosis.tbl_diagnosis IS NOT NULL
               AND i_diagnosis.tbl_diagnosis.count != 0
            THEN
                g_error := 'CALL TO PK_DIAGNOSIS.SET_MCDT_REQ_DIAG_NO_COMMIT';
                IF NOT pk_diagnosis.set_mcdt_req_diag_no_commit(i_lang             => i_lang,
                                                                i_prof             => i_prof,
                                                                i_epis             => i_episode,
                                                                i_diag             => i_diagnosis,
                                                                i_exam_req         => l_next_req,
                                                                i_analysis_req     => NULL,
                                                                i_interv_presc     => NULL,
                                                                i_exam_req_det     => l_next_det,
                                                                i_analysis_req_det => NULL,
                                                                i_interv_presc_det => NULL,
                                                                o_error            => o_error)
                THEN
                    IF o_error.err_desc IS NOT NULL
                    THEN
                        g_error_code := o_error.ora_sqlerrm;
                        g_error      := o_error.err_action;
                    
                        RAISE g_user_exception;
                    ELSE
                        g_error_code := o_error.ora_sqlerrm;
                        g_error      := o_error.err_action;
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        
            IF i_flg_time IN (pk_exam_constant.g_flg_time_b, pk_exam_constant.g_flg_time_d)
               AND l_create_epis_combination = pk_alert_constant.g_yes
            THEN
                IF NOT pk_events.create_task_epis_combination(i_lang                 => i_lang,
                                                         i_prof                 => i_prof,
                                                         i_patient              => i_patient,
                                                         i_task_suggest_date    => l_dt_begin,
                                                         i_task_type_from       => CASE
                                                                                       WHEN l_exam_flg_type = pk_exam_constant.g_type_img THEN
                                                                                        pk_order_sets.g_odst_task_image_exam
                                                                                       ELSE
                                                                                        pk_order_sets.g_odst_task_other_exam
                                                                                   END,
                                                         i_task_request_from    => l_next_det,
                                                         i_id_event             => i_event_followup_app,
                                                         i_id_schedule          => i_schedule_followup_app,
                                                         i_id_episode           => i_episode_followup_app,
                                                         o_id_combination_spec  => l_id_combination_spec,
                                                         o_task_dependency_from => l_task_dependency_from,
                                                         o_task_dependency_to   => l_task_dependency_to,
                                                         o_error                => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            l_sys_alert_event.id_software     := i_prof.software;
            l_sys_alert_event.id_institution  := i_prof.institution;
            l_sys_alert_event.id_episode      := i_episode;
            l_sys_alert_event.id_record       := l_next_det;
            l_sys_alert_event.dt_record       := l_dt_req;
            l_sys_alert_event.id_professional := NULL;
            l_sys_alert_event.id_room         := l_new_room;
            l_sys_alert_event.replace1        := 'EXAM.CODE_EXAM.' || i_exam;
            l_sys_alert_event.replace2        := pk_sysconfig.get_config('ALERT_EXAM_TIMEOUT', i_prof);
            l_sys_alert_event.id_prof_order   := i_prof_order;
        
            --Verifica se o evento é passível de gerar alertas
            IF l_status_det = pk_exam_constant.g_exam_req
               AND l_next_det IS NOT NULL
               AND l_dt_req IS NOT NULL
            THEN
                l_sys_alert_event.id_sys_alert := 33;
                IF l_flg_mov_pat = pk_exam_constant.g_yes
                THEN
                    --Insere evento na tabela de alertas
                    g_error := 'INSERT INTO SYS_ALERT_EVENT';
                    IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            i_flg_type_dest   => 'R',
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                l_sys_alert_event.id_sys_alert := 39;
            
                --Insere evento na tabela de alertas
                g_error := 'INSERT INTO SYS_ALERT_EVENT';
                IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                        i_prof            => i_prof,
                                                        i_sys_alert_event => l_sys_alert_event,
                                                        i_flg_type_dest   => 'R',
                                                        o_error           => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            l_flg_profile := nvl(pk_hand_off_core.get_flg_profile(i_lang, i_prof, NULL), '#');
        
            IF l_flg_profile = pk_prof_utils.g_flg_profile_template_student
               AND l_status NOT IN (pk_exam_constant.g_exam_predefined, pk_exam_constant.g_exam_draft)
            THEN
            
                l_sys_alert_event.id_sys_alert    := pk_alert_constant.g_alert_cpoe_draft;
                l_sys_alert_event.id_patient      := i_patient;
                l_sys_alert_event.id_record       := i_episode;
                l_sys_alert_event.id_visit        := pk_visit.get_visit(i_episode => i_episode, o_error => o_error);
                l_sys_alert_event.dt_record       := g_sysdate_tstz;
                l_sys_alert_event.id_professional := pk_hand_off.get_episode_responsible(i_lang       => i_lang,
                                                                                         i_prof       => i_prof,
                                                                                         i_id_episode => i_episode,
                                                                                         o_error      => o_error);
            
                g_error := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT - ALERTA 320';
                IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                        i_prof            => i_prof,
                                                        i_sys_alert_event => l_sys_alert_event,
                                                        o_error           => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        IF i_flg_time != pk_exam_constant.g_flg_time_r
        THEN
            IF l_status NOT IN (pk_exam_constant.g_exam_predefined, pk_exam_constant.g_exam_draft)
            THEN
                g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
                IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                          i_prof         => i_prof,
                                                          i_patient      => i_patient,
                                                          i_episode      => i_episode,
                                                          i_exam_req     => l_next_req,
                                                          i_exam_req_det => l_next_det,
                                                          o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        IF i_episode IS NOT NULL
        THEN
            g_error := 'CALL TO PK_ICNP_FO_API_DB.CREATE_SUGG';
            pk_icnp_fo_api_db.create_sugg(i_lang               => i_lang,
                                          i_prof               => i_prof,
                                          i_id_episode         => i_episode,
                                          i_request_id         => l_next_det,
                                          i_task_id            => i_exam,
                                          i_task_type_id       => CASE
                                                                      WHEN l_exam_flg_type = pk_exam_constant.g_type_img THEN
                                                                       pk_alert_constant.g_task_imaging_exams
                                                                      ELSE
                                                                       pk_alert_constant.g_task_other_exams
                                                                  END,
                                          i_sysdate_tstz       => current_timestamp,
                                          o_id_icnp_sug_interv => l_id_icnp_sug_interv);
        
            IF l_status != pk_exam_constant.g_exam_draft
               AND i_flg_time = pk_exam_constant.g_flg_time_e
            THEN
                g_error := 'CALL PK_CPOE.SYNC_TASK';
                IF NOT pk_cpoe.sync_task(i_lang                 => i_lang,
                                    i_prof                 => i_prof,
                                    i_episode              => i_episode,
                                    i_task_type            => CASE
                                                                  WHEN l_exam_flg_type = pk_exam_constant.g_type_img THEN
                                                                   pk_alert_constant.g_task_type_image_exam
                                                                  ELSE
                                                                   pk_alert_constant.g_task_type_other_exam
                                                              END,
                                    i_task_request         => l_next_det,
                                    i_task_start_timestamp => l_dt_begin,
                                    o_error                => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                          i_id_episode          => i_episode,
                                          i_pat                 => NULL,
                                          i_prof                => i_prof,
                                          i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                          i_dt_last_interaction => g_sysdate_tstz,
                                          i_dt_first_obs        => g_sysdate_tstz,
                                          o_error               => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            IF i_flg_time != pk_exam_constant.g_flg_time_r
            THEN
                IF l_status = pk_exam_constant.g_exam_toexec
                THEN
                    l_dt_first_image_exec := pk_date_utils.date_send_tsz(i_lang, g_sysdate_tstz, i_prof);
                END IF;
            
                g_error := 'CALL TO PK_VISIT.UPDATE_EPIS_TASK';
                IF NOT pk_visit.upd_epis_info_exam(i_lang                => i_lang,
                                                   i_id_episode          => i_episode,
                                                   i_id_prof             => i_prof,
                                                   i_dt_first_image_exec => l_dt_first_image_exec,
                                                   i_dt_first_image_req  => l_dt_first_image_req,
                                                   i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                                   o_error               => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              g_error_code,
                                              g_error,
                                              '',
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_EXAM_REQUEST',
                                              'U',
                                              '',
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_EXAM_REQUEST',
                                              o_error);
            RETURN FALSE;
    END create_exam_request;

    FUNCTION create_exam_recurrence
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_exec_tab        IN t_tbl_order_recurr_plan,
        o_exec_to_process OUT t_tbl_order_recurr_plan_sts,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        -- get all order_plan info and one id_exam_req associated to this plan
        CURSOR c_exam(x_exec_tab IN t_tbl_order_recurr_plan) IS
            SELECT /*+opt_estimate(table t rows=1)*/
             t.id_order_recurrence_plan, t.exec_number, t.exec_timestamp, r.id_exam_req
              FROM TABLE(CAST(x_exec_tab AS t_tbl_order_recurr_plan)) t,
                   (SELECT DISTINCT id_exam_req, id_order_recurrence
                      FROM (SELECT er.id_exam_req,
                                   erd.id_order_recurrence,
                                   row_number() over(PARTITION BY erd.id_exam ORDER BY er.dt_begin_tstz DESC NULLS LAST) rn
                              FROM exam_req er, exam_req_det erd, visit v
                             WHERE er.id_exam_req = erd.id_exam_req
                               AND er.id_visit = v.id_visit
                               AND v.flg_status = pk_visit.g_active
                               AND erd.id_order_recurrence IN
                                   (SELECT /*+opt_estimate(table o rows=1)*/
                                    DISTINCT o.id_order_recurrence_plan
                                      FROM TABLE(CAST(x_exec_tab AS t_tbl_order_recurr_plan)) o)
                               AND NOT (er.flg_time IN (pk_exam_constant.g_flg_time_b, pk_exam_constant.g_flg_time_d) AND
                                    erd.flg_status != pk_exam_constant.g_exam_tosched)
                               AND erd.flg_status != pk_exam_constant.g_exam_cancel)
                     WHERE rn = 1) r
             WHERE t.id_order_recurrence_plan = r.id_order_recurrence(+);
    
        TYPE t_exam IS TABLE OF c_exam%ROWTYPE;
        l_exam_tab t_exam;
    
        CURSOR c_visit(x_exec_tab IN t_tbl_order_recurr_plan) IS
            SELECT DISTINCT v.flg_status
              FROM exam_req er, exam_req_det erd, visit v
             WHERE er.id_exam_req = erd.id_exam_req
               AND er.id_visit = v.id_visit
               AND v.flg_status = pk_visit.g_active
               AND erd.id_order_recurrence IN
                   (SELECT /*+opt_estimate(table o rows=1)*/
                    DISTINCT o.id_order_recurrence_plan
                      FROM TABLE(CAST(x_exec_tab AS t_tbl_order_recurr_plan)) o)
               AND NOT (er.flg_time IN (pk_exam_constant.g_flg_time_b, pk_exam_constant.g_flg_time_d) AND
                    erd.flg_status != pk_exam_constant.g_exam_tosched)
               AND erd.flg_status != pk_exam_constant.g_exam_cancel;
    
        l_prev_exam_req exam_req.id_exam_req%TYPE;
        CURSOR c_exam_req(x_id_exam_req IN exam_req.id_exam_req%TYPE) IS
            SELECT *
              FROM exam_req
             WHERE id_exam_req = x_id_exam_req;
        l_exam_req_data exam_req%ROWTYPE;
    
        CURSOR c_exam_req_det(x_id_exam_req IN exam_req_det.id_exam_req%TYPE) IS
            SELECT *
              FROM exam_req_det
             WHERE id_exam_req = x_id_exam_req;
    
        TYPE t_exam_req_det IS TABLE OF c_exam_req_det%ROWTYPE;
        l_exam_req_det_data t_exam_req_det;
    
        CURSOR c_diagnosis_list(l_exam_req_det exam_req_det.id_exam_req_det%TYPE) IS
            SELECT mrd.id_diagnosis, ed.desc_epis_diagnosis desc_diagnosis
              FROM mcdt_req_diagnosis mrd, epis_diagnosis ed
             WHERE mrd.id_exam_req_det = l_exam_req_det
               AND nvl(mrd.flg_status, '@') != pk_alert_constant.g_cancelled
               AND mrd.id_epis_diagnosis = ed.id_epis_diagnosis;
    
        l_prof profissional;
    
        l_id_exam_req exam_req.id_exam_req%TYPE;
    
        l_status_visit visit.flg_status%TYPE;
    
        l_data     NUMBER;
        l_data_det NUMBER;
    
        l_diagnosis      table_number := table_number();
        l_diagnosis_desc table_varchar := table_varchar();
        l_codification   codification.id_codification%TYPE;
        l_prof_order     co_sign.id_prof_ordered_by%TYPE;
        l_dt_order       VARCHAR2(200 CHAR);
        l_order_type     co_sign.id_order_type%TYPE;
    
        l_exec_to_process t_tbl_order_recurr_plan_sts;
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        l_exec_to_process := t_tbl_order_recurr_plan_sts();
    
        OPEN c_visit(i_exec_tab);
        FETCH c_visit
            INTO l_status_visit;
        CLOSE c_visit;
    
        IF l_status_visit != pk_visit.g_active
        THEN
            RETURN TRUE;
        END IF;
    
        -------
        -- Getting all reqs related to this order recurr plan
        g_error := 'OPEN C_EXAM';
        OPEN c_exam(i_exec_tab);
        FETCH c_exam BULK COLLECT
            INTO l_exam_tab;
        CLOSE c_exam;
    
        <<exec>>
        FOR exec_idx IN 1 .. l_exam_tab.count
        LOOP
        
            IF l_exam_tab(exec_idx).id_exam_req IS NULL
            THEN
            
                -- plan outdated
                g_error := 'Plan ' || l_exam_tab(exec_idx).id_order_recurrence_plan || ' outdated';
                pk_alertlog.log_info(g_error);
            
                g_error := 'l_exec_to_process 1';
                l_exec_to_process.extend;
                l_exec_to_process(l_exec_to_process.count) := t_rec_order_recurr_plan_sts(l_exam_tab(exec_idx).id_order_recurrence_plan,
                                                                                          pk_alert_constant.get_no);
            ELSE
            
                IF l_prev_exam_req IS NULL
                   OR l_prev_exam_req != l_exam_tab(exec_idx).id_exam_req
                THEN
                    l_exam_req_data     := NULL;
                    l_exam_req_det_data := NULL;
                
                    -- getting exam_req info
                    g_error := 'OPEN c_exam_req(' || l_exam_tab(exec_idx).id_exam_req || ')';
                    OPEN c_exam_req(l_exam_tab(exec_idx).id_exam_req);
                    FETCH c_exam_req
                        INTO l_exam_req_data;
                    CLOSE c_exam_req;
                
                    -- getting exam_req_det info
                    g_error := 'OPEN c_exam_req_det(' || l_exam_tab(exec_idx).id_exam_req || ')';
                    OPEN c_exam_req_det(l_exam_tab(exec_idx).id_exam_req);
                    FETCH c_exam_req_det BULK COLLECT
                        INTO l_exam_req_det_data;
                    CLOSE c_exam_req_det;
                END IF;
            
                g_error := 'GET L_ID_EXAM_REQ / ID_EXAM_REQ=' || l_exam_tab(exec_idx).id_exam_req;
                pk_alertlog.log_info(g_error);
                l_id_exam_req := ts_exam_req.next_key();
            
                -- creating exam_req_det
                <<req_det>>
                FOR req_det_idx IN 1 .. l_exam_req_det_data.count
                LOOP
                
                    g_error := 'ID_EXAM_REQ=' || l_id_exam_req || ' ID_EXAM_REQ_DET=' || l_exam_req_det_data(req_det_idx).id_exam_req_det ||
                               ' ID_EXAM_GROUP=' || l_exam_req_data.id_exam_group;
                    pk_alertlog.log_info(g_error);
                
                    IF l_exam_tab(exec_idx).id_order_recurrence_plan = l_exam_req_det_data(req_det_idx).id_order_recurrence
                    THEN
                        IF i_prof.id IS NULL
                        THEN
                            l_prof := profissional(l_exam_req_data.id_prof_req, i_prof.institution, NULL);
                        
                            IF NOT pk_episode.get_episode_software(i_lang        => i_lang,
                                                                   i_prof        => l_prof,
                                                                   i_id_episode  => l_exam_req_data.id_episode,
                                                                   o_id_software => l_prof.software,
                                                                   o_error       => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        END IF;
                    
                        IF l_diagnosis IS NULL
                           OR l_diagnosis.count = 0
                        THEN
                            FOR l_diagnosis_list IN c_diagnosis_list(l_exam_req_det_data(req_det_idx).id_exam_req_det)
                            LOOP
                                l_diagnosis.extend;
                                l_diagnosis(l_diagnosis.count) := l_diagnosis_list.id_diagnosis;
                            
                                l_diagnosis_desc.extend;
                                l_diagnosis_desc(l_diagnosis.count) := l_diagnosis_list.desc_diagnosis;
                            END LOOP;
                        END IF;
                    
                        BEGIN
                            SELECT ec.id_codification
                              INTO l_codification
                              FROM exam_codification ec
                             WHERE ec.id_exam_codification = l_exam_req_det_data(req_det_idx).id_exam_codification;
                        EXCEPTION
                            WHEN no_data_found THEN
                                l_codification := NULL;
                        END;
                    
                        IF l_exam_req_det_data(req_det_idx).id_co_sign_order IS NOT NULL
                        THEN
                            SELECT cs.id_prof_ordered_by,
                                   pk_date_utils.date_send_tsz(i_lang,
                                                                cs.dt_ordered_by,
                                                                CASE
                                                                    WHEN i_prof.id IS NULL THEN
                                                                     l_prof
                                                                    ELSE
                                                                     i_prof
                                                                END),
                                   cs.id_order_type
                              INTO l_prof_order, l_dt_order, l_order_type
                              FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                                   CASE
                                                                                       WHEN i_prof.id IS NULL THEN
                                                                                        l_prof
                                                                                       ELSE
                                                                                        i_prof
                                                                                   END,
                                                                                   l_exam_req_data.id_episode,
                                                                                   NULL,
                                                                                   NULL,
                                                                                   NULL,
                                                                                   l_exam_req_det_data(req_det_idx).id_exam_req_det)) cs
                             WHERE cs.id_co_sign_hist = l_exam_req_det_data(req_det_idx).id_co_sign_order;
                        END IF;
                    
                        -- creating executions        
                        g_error := 'CALL CREATE_EXAM_REQUEST / ID_EXAM_REQ=' || l_id_exam_req;
                        pk_alertlog.log_info(g_error);
                        IF NOT pk_exam_core.create_exam_request(i_lang                    => i_lang,
                                                           i_prof                    => CASE
                                                                                            WHEN i_prof.id IS NULL THEN
                                                                                             l_prof
                                                                                            ELSE
                                                                                             i_prof
                                                                                        END,
                                                           i_patient                 => l_exam_req_data.id_patient,
                                                           i_episode                 => CASE
                                                                                            WHEN l_exam_req_data.flg_time =
                                                                                                 pk_exam_constant.g_flg_time_e THEN
                                                                                             l_exam_req_data.id_episode
                                                                                            ELSE
                                                                                             l_exam_req_data.id_episode_origin
                                                                                        END,
                                                           i_exam_req                => l_id_exam_req,
                                                           i_exam_req_det            => NULL,
                                                           i_exam                    => l_exam_req_det_data(req_det_idx).id_exam,
                                                           i_exam_group              => l_exam_req_data.id_exam_group,
                                                           i_dt_req                  => NULL,
                                                           i_flg_time                => l_exam_req_data.flg_time,
                                                           i_dt_begin                => pk_date_utils.date_send_tsz(i_lang,
                                                                                                                    l_exam_tab(exec_idx).exec_timestamp,
                                                                                                                    i_prof),
                                                           i_dt_begin_limit          => pk_date_utils.date_send_tsz(i_lang,
                                                                                                                    l_exam_req_det_data(req_det_idx).dt_final_target_tstz,
                                                                                                                    i_prof),
                                                           i_episode_destination     => l_exam_req_data.id_episode_destination,
                                                           i_order_recurrence        => l_exam_tab(exec_idx).id_order_recurrence_plan,
                                                           i_priority                => l_exam_req_data.priority,
                                                           i_flg_prn                 => l_exam_req_det_data(req_det_idx).flg_prn,
                                                           i_notes_prn               => l_exam_req_det_data(req_det_idx).prn_notes,
                                                           i_flg_fasting             => l_exam_req_det_data(req_det_idx).flg_fasting,
                                                           i_notes                   => l_exam_req_det_data(req_det_idx).notes,
                                                           i_notes_scheduler         => l_exam_req_det_data(req_det_idx).notes_scheduler,
                                                           i_notes_technician        => l_exam_req_det_data(req_det_idx).notes_tech,
                                                           i_notes_patient           => l_exam_req_data.notes_patient,
                                                           i_diagnosis               => pk_diagnosis.get_diag_rec(i_lang      => i_lang,
                                                                                                                  i_prof      => i_prof,
                                                                                                                  i_patient   => l_exam_req_data.id_patient,
                                                                                                                  i_episode   => l_exam_req_data.id_episode,
                                                                                                                  i_diagnosis => l_diagnosis,
                                                                                                                  i_desc_diag => l_diagnosis_desc),
                                                           i_laterality              => l_exam_req_det_data(req_det_idx).flg_laterality,
                                                           i_exec_room               => l_exam_req_det_data(req_det_idx).id_room,
                                                           i_exec_institution        => l_exam_req_det_data(req_det_idx).id_exec_institution,
                                                           i_clinical_purpose        => l_exam_req_det_data(req_det_idx).id_clinical_purpose,
                                                           i_clinical_purpose_notes  => l_exam_req_det_data(req_det_idx).clinical_purpose_notes,
                                                           i_codification            => l_codification,
                                                           i_health_plan             => l_exam_req_det_data(req_det_idx).id_pat_health_plan,
                                                           i_exemption               => l_exam_req_det_data(req_det_idx).id_pat_exemption,
                                                           i_prof_order              => l_prof_order,
                                                           i_dt_order                => l_dt_order,
                                                           i_order_type              => l_order_type,
                                                           i_clinical_question       => table_number(NULL),
                                                           i_response                => table_varchar(NULL),
                                                           i_clinical_question_notes => table_varchar(NULL),
                                                           i_clinical_decision_rule  => l_exam_req_det_data(req_det_idx).id_cdr,
                                                           i_task_dependency         => l_exam_req_det_data(req_det_idx).id_task_dependency,
                                                           i_flg_task_depending      => NULL,
                                                           i_episode_followup_app    => NULL,
                                                           i_schedule_followup_app   => NULL,
                                                           i_event_followup_app      => NULL,
                                                           o_exam_req                => l_data,
                                                           o_exam_req_det            => l_data_det,
                                                           o_error                   => o_error)
                        THEN
                            RAISE g_user_exception;
                        END IF;
                    
                        g_error := 'UPDATE EXAM_REQ_DET';
                        ts_exam_req_det.upd(id_exam_req_det_in       => l_data_det,
                                            flg_req_origin_module_in => l_exam_req_det_data(req_det_idx).flg_req_origin_module,
                                            rows_out                 => l_rows_out);
                    
                        IF l_exam_req_det_data(req_det_idx).id_pat_pregnancy IS NOT NULL
                        THEN
                            g_error := 'CALL PK_PREGNANCY_EXAM.CREATE_EXAM_PREGN_RECURR';
                            IF NOT pk_pregnancy_exam.create_exam_pregn_recurr(i_lang             => i_lang,
                                                                              i_prof             => i_prof,
                                                                              i_new_exam_req_det => l_data_det,
                                                                              i_old_exam_req_det => l_exam_req_det_data(req_det_idx).id_exam_req_det,
                                                                              o_error            => o_error)
                            THEN
                                RAISE g_user_exception;
                            END IF;
                        END IF;
                    END IF;
                END LOOP req_det;
            
                -- plan not outdated
                g_error := 'l_exec_to_process 2';
                l_exec_to_process.extend;
                l_exec_to_process(l_exec_to_process.count) := t_rec_order_recurr_plan_sts(l_exam_tab(exec_idx).id_order_recurrence_plan,
                                                                                          pk_alert_constant.get_yes);
            
            END IF;
        
            g_error         := 'l_prev_exam_req=' || l_exam_tab(exec_idx).id_exam_req;
            l_prev_exam_req := l_exam_tab(exec_idx).id_exam_req;
        END LOOP exec;
    
        g_error := 'CALL TO PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_REQ_DET',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        -- removing duplicates
        g_error := 'o_exec_to_process';
        SELECT t_rec_order_recurr_plan_sts(id_order_recurrence_plan, flg_status)
          BULK COLLECT
          INTO o_exec_to_process
          FROM (SELECT DISTINCT t.id_order_recurrence_plan, t.flg_status
                  FROM TABLE(CAST(l_exec_to_process AS t_tbl_order_recurr_plan_sts)) t);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              g_error_code,
                                              g_error,
                                              '',
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_EXAM_REQUEST',
                                              'U',
                                              '',
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_EXAM_RECURRENCE',
                                              o_error);
            RETURN FALSE;
    END create_exam_recurrence;

    FUNCTION create_exam_for_execution
    (
        i_lang                  IN language.id_language%TYPE,
        i_prof                  IN profissional,
        i_patient               IN patient.id_patient%TYPE,
        i_episode               IN exam_req.id_episode%TYPE,
        i_exam                  IN table_number,
        i_codification          IN table_number,
        i_flg_type              IN table_varchar,
        i_prof_performed        IN exam_req_det.id_prof_performed%TYPE,
        i_start_time            IN VARCHAR2,
        i_supply_workflow       IN table_number,
        i_supply                IN table_number,
        i_supply_set            IN table_number,
        i_supply_qty            IN table_number,
        i_supply_type           IN table_varchar,
        i_barcode_scanned       IN table_varchar,
        i_deliver_needed        IN table_varchar,
        i_flg_cons_type         IN table_varchar,
        i_dt_expiration         IN table_varchar,
        i_flg_validation        IN table_varchar,
        i_lot                   IN table_varchar,
        i_notes_supplies        IN table_varchar,
        i_doc_template          IN doc_template.id_doc_template%TYPE,
        i_doc_flg_type          IN doc_template_context.flg_type%TYPE,
        i_id_documentation      IN table_number,
        i_id_doc_element        IN table_number,
        i_id_doc_element_crit   IN table_number,
        i_value                 IN table_varchar,
        i_id_doc_element_qualif IN table_table_number,
        i_documentation_notes   IN epis_documentation.notes%TYPE,
        i_questionnaire         IN table_number,
        i_response              IN table_varchar,
        i_notes                 IN table_varchar,
        o_exam_req_array        OUT NOCOPY table_number,
        o_exam_req_det_array    OUT NOCOPY table_number,
        o_error                 OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_exam table_number := table_number();
    
        l_exam_req     exam_req.id_exam_req%TYPE;
        l_exam_req_det exam_req_det.id_exam_req_det%TYPE;
    
    BEGIN
    
        o_exam_req_array     := table_number();
        o_exam_req_det_array := table_number();
    
        FOR i IN 1 .. i_exam.count
        LOOP
            l_exam := table_number();
            IF i_flg_type(i) = 'E'
            THEN
                l_exam.extend;
                l_exam(1) := i_exam(i);
            ELSE
                IF NOT pk_exam_core.get_exam_in_group(i_lang, i_exam(i), l_exam, o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            FOR j IN 1 .. l_exam.count
            LOOP
                g_error := 'CALL CREATE_EXAM_REQUEST';
                IF NOT pk_exam_core.create_exam_request(i_lang                    => i_lang,
                                                   i_prof                    => i_prof,
                                                   i_patient                 => i_patient,
                                                   i_episode                 => i_episode,
                                                   i_exam_req                => NULL,
                                                   i_exam_req_det            => NULL,
                                                   i_exam                    => l_exam(j),
                                                   i_exam_group              => CASE
                                                                                    WHEN i_flg_type(i) = 'E' THEN
                                                                                     NULL
                                                                                    ELSE
                                                                                     i_exam(i)
                                                                                END,
                                                   i_dt_req                  => NULL,
                                                   i_flg_time                => pk_exam_constant.g_flg_time_e,
                                                   i_dt_begin                => i_start_time,
                                                   i_dt_begin_limit          => NULL,
                                                   i_episode_destination     => NULL,
                                                   i_order_recurrence        => NULL,
                                                   i_priority                => NULL,
                                                   i_flg_prn                 => NULL,
                                                   i_notes_prn               => NULL,
                                                   i_flg_fasting             => NULL,
                                                   i_notes                   => NULL,
                                                   i_notes_scheduler         => NULL,
                                                   i_notes_technician        => NULL,
                                                   i_notes_patient           => NULL,
                                                   i_diagnosis               => NULL,
                                                   i_laterality              => NULL,
                                                   i_exec_room               => NULL,
                                                   i_exec_institution        => NULL,
                                                   i_clinical_purpose        => NULL,
                                                   i_clinical_purpose_notes  => NULL,
                                                   i_codification            => i_codification(i),
                                                   i_health_plan             => NULL,
                                                   i_exemption               => NULL,
                                                   i_prof_order              => NULL,
                                                   i_dt_order                => NULL,
                                                   i_order_type              => NULL,
                                                   i_clinical_question       => table_number(NULL),
                                                   i_response                => table_varchar(''),
                                                   i_clinical_question_notes => table_varchar(''),
                                                   i_clinical_decision_rule  => NULL,
                                                   i_flg_origin_req          => 'E',
                                                   i_task_dependency         => NULL,
                                                   i_flg_task_depending      => NULL,
                                                   i_episode_followup_app    => NULL,
                                                   i_schedule_followup_app   => NULL,
                                                   i_event_followup_app      => NULL,
                                                   o_exam_req                => l_exam_req,
                                                   o_exam_req_det            => l_exam_req_det,
                                                   o_error                   => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                o_exam_req_array.extend;
                o_exam_req_array(o_exam_req_array.count) := l_exam_req;
            
                o_exam_req_det_array.extend;
                o_exam_req_det_array(o_exam_req_det_array.count) := l_exam_req_det;
            
                IF NOT set_exam_perform(i_lang                  => i_lang,
                                        i_prof                  => i_prof,
                                        i_exam_req_det          => l_exam_req_det,
                                        i_prof_performed        => i_prof_performed,
                                        i_start_time            => i_start_time,
                                        i_end_time              => NULL,
                                        i_supply_workflow       => i_supply_workflow,
                                        i_supply                => i_supply,
                                        i_supply_set            => i_supply_set,
                                        i_supply_qty            => i_supply_qty,
                                        i_supply_type           => i_supply_type,
                                        i_barcode_scanned       => i_barcode_scanned,
                                        i_deliver_needed        => i_deliver_needed,
                                        i_flg_cons_type         => i_flg_cons_type,
                                        i_dt_expiration         => i_dt_expiration,
                                        i_flg_validation        => i_flg_validation,
                                        i_lot                   => i_lot,
                                        i_notes_supplies        => i_notes_supplies,
                                        i_doc_template          => i_doc_template,
                                        i_flg_type              => i_doc_flg_type,
                                        i_id_documentation      => i_id_documentation,
                                        i_id_doc_element        => i_id_doc_element,
                                        i_id_doc_element_crit   => i_id_doc_element_crit,
                                        i_value                 => i_value,
                                        i_id_doc_element_qualif => i_id_doc_element_qualif,
                                        i_documentation_notes   => i_documentation_notes,
                                        i_questionnaire         => i_questionnaire,
                                        i_response              => i_response,
                                        i_notes                 => i_notes,
                                        o_error                 => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END LOOP;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_EXAM_FOR_EXECUTION',
                                              o_error);
            RETURN FALSE;
    END create_exam_for_execution;

    FUNCTION create_exam_with_result
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_patient             IN patient.id_patient%TYPE,
        i_episode             IN exam_req.id_episode%TYPE,
        i_exam_req_det        IN exam_req_det.id_exam_req_det%TYPE,
        i_reg                 IN periodic_observation_reg.id_periodic_observation_reg%TYPE,
        i_exam                IN exam.id_exam%TYPE,
        i_prof_performed      IN exam_req_det.id_prof_performed%TYPE,
        i_start_time          IN VARCHAR2,
        i_end_time            IN VARCHAR2,
        i_flg_pregnancy       IN VARCHAR2 DEFAULT 'N',
        i_result_status       IN result_status.id_result_status%TYPE DEFAULT NULL,
        i_abnormality         IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        i_flg_result_origin   IN exam_result.flg_result_origin%TYPE,
        i_result_origin_notes IN exam_result.result_origin_notes%TYPE,
        i_notes               IN exam_result.notes%TYPE,
        i_flg_import          IN table_varchar,
        i_id_doc              IN table_number,
        i_doc_type            IN table_number,
        i_desc_doc_type       IN table_varchar,
        i_dt_doc              IN table_varchar,
        i_dest                IN table_number,
        i_desc_dest           IN table_varchar,
        i_ori_doc_type        IN table_number,
        i_desc_ori_doc_type   IN table_varchar,
        i_original            IN table_number,
        i_desc_original       IN table_varchar,
        i_title               IN table_varchar,
        i_desc_perf_by        IN table_varchar,
        o_exam_req            OUT exam_req.id_exam_req%TYPE,
        o_exam_req_det        OUT exam_req_det.id_exam_req_det%TYPE,
        o_error               OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_exam_req     exam_req.id_exam_req%TYPE;
        l_exam_req_det exam_req_det.id_exam_req_det%TYPE;
    
        l_start_date exam_req_det.start_time%TYPE;
        l_reg_date   periodic_observation_reg.dt_periodic_observation_reg%TYPE;
    
        l_epis_documentation epis_documentation.id_epis_documentation%TYPE;
        l_exam_result        exam_result.id_exam_result%TYPE;
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        IF i_exam_req_det IS NULL
        THEN
            g_error := 'CALL CREATE_EXAM_REQUEST';
            IF NOT pk_exam_core.create_exam_request(i_lang                    => i_lang,
                                                    i_prof                    => i_prof,
                                                    i_patient                 => i_patient,
                                                    i_episode                 => i_episode,
                                                    i_exam_req                => NULL,
                                                    i_exam_req_det            => NULL,
                                                    i_exam                    => i_exam,
                                                    i_exam_group              => NULL,
                                                    i_dt_req                  => NULL,
                                                    i_flg_time                => pk_exam_constant.g_flg_time_r,
                                                    i_dt_begin                => NULL,
                                                    i_dt_begin_limit          => NULL,
                                                    i_episode_destination     => NULL,
                                                    i_order_recurrence        => NULL,
                                                    i_priority                => NULL,
                                                    i_flg_prn                 => NULL,
                                                    i_notes_prn               => NULL,
                                                    i_flg_fasting             => NULL,
                                                    i_notes                   => NULL,
                                                    i_notes_scheduler         => NULL,
                                                    i_notes_technician        => NULL,
                                                    i_notes_patient           => NULL,
                                                    i_diagnosis               => NULL,
                                                    i_laterality              => NULL,
                                                    i_exec_room               => NULL,
                                                    i_exec_institution        => NULL,
                                                    i_clinical_purpose        => NULL,
                                                    i_clinical_purpose_notes  => NULL,
                                                    i_codification            => NULL,
                                                    i_health_plan             => NULL,
                                                    i_exemption               => NULL,
                                                    i_prof_order              => NULL,
                                                    i_dt_order                => NULL,
                                                    i_order_type              => NULL,
                                                    i_clinical_question       => table_number(NULL),
                                                    i_response                => table_varchar(''),
                                                    i_clinical_question_notes => table_varchar(''),
                                                    i_clinical_decision_rule  => NULL,
                                                    i_flg_origin_req          => 'D',
                                                    i_task_dependency         => NULL,
                                                    i_flg_task_depending      => NULL,
                                                    i_episode_followup_app    => NULL,
                                                    i_schedule_followup_app   => NULL,
                                                    i_event_followup_app      => NULL,
                                                    o_exam_req                => l_exam_req,
                                                    o_exam_req_det            => l_exam_req_det,
                                                    o_error                   => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        ELSE
            SELECT erd.id_exam_req
              INTO l_exam_req
              FROM exam_req_det erd
             WHERE erd.id_exam_req_det = i_exam_req_det;
        
            l_exam_req_det := i_exam_req_det;
        END IF;
    
        IF l_exam_req_det IS NOT NULL
        THEN
            ts_exam_req_det.upd(id_exam_req_det_in       => l_exam_req_det,
                                id_prof_performed_reg_in => i_prof.id,
                                dt_performed_reg_in      => g_sysdate_tstz,
                                id_prof_performed_in     => CASE
                                                                WHEN i_prof_performed != -1 THEN
                                                                 i_prof_performed
                                                                ELSE
                                                                 NULL
                                                            END,
                                start_time_in            => pk_date_utils.get_string_tstz(i_lang, i_prof, i_start_time, NULL),
                                end_time_in              => pk_date_utils.get_string_tstz(i_lang, i_prof, i_end_time, NULL),
                                rows_out                 => l_rows_out);
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ_DET',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            IF i_flg_pregnancy = pk_exam_constant.g_no
            THEN
            
                g_error       := 'GET SEQ_EXAM_RESULT.NEXTVAL';
                l_exam_result := ts_exam_result.next_key(sequence_in => 'SEQ_EXAM_RESULT');
            
                l_rows_out := NULL;
                g_error    := 'INSERT EXAM_RESULT';
                ts_exam_result.ins(id_exam_result_in      => l_exam_result,
                                   id_exam_req_det_in     => l_exam_req_det,
                                   id_exam_in             => i_exam,
                                   id_patient_in          => i_patient,
                                   id_episode_write_in    => i_episode,
                                   id_institution_in      => i_prof.institution,
                                   id_professional_in     => i_prof.id,
                                   dt_exam_result_tstz_in => g_sysdate_tstz,
                                   id_result_status_in    => i_result_status,
                                   id_abnormality_in      => i_abnormality,
                                   notes_in               => i_notes,
                                   flg_type_in            => pk_prof_utils.get_category(i_lang, i_prof),
                                   flg_result_origin_in   => i_flg_result_origin,
                                   result_origin_notes_in => i_result_origin_notes,
                                   rows_out               => l_rows_out);
            
                g_error := 'CALL PROCESS_UPDATE';
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'EXAM_RESULT',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
            
                l_rows_out := NULL;
                ts_exam_req_det.upd(id_exam_req_det_in => l_exam_req_det,
                                    flg_status_in      => pk_exam_constant.g_exam_read,
                                    rows_out           => l_rows_out);
            
                g_error := 'CALL PROCESS_UPDATE';
                t_data_gov_mnt.process_update(i_lang         => i_lang,
                                              i_prof         => i_prof,
                                              i_table_name   => 'EXAM_REQ_DET',
                                              i_rowids       => l_rows_out,
                                              o_error        => o_error,
                                              i_list_columns => table_varchar('FLG_STATUS'));
            
                IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                        i_prof       => i_prof,
                                        i_id_episode => i_episode,
                                        i_flg_status => pk_exam_constant.g_exam_read,
                                        i_id_record  => l_exam_req_det,
                                        i_flg_type   => pk_exam_constant.g_exam_type_det,
                                        o_error      => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'CALL PK_EXAM_EXTERNAL.UPDATE_TDE_TASK_STATE';
                IF NOT pk_exam_external.update_tde_task_state(i_lang         => i_lang,
                                                              i_prof         => i_prof,
                                                              i_exam_req_det => l_exam_req_det,
                                                              i_flg_action   => pk_exam_constant.g_exam_read,
                                                              o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                l_rows_out := NULL;
                ts_exam_req.upd(id_exam_req_in => l_exam_req,
                                flg_status_in  => pk_exam_constant.g_exam_read,
                                rows_out       => l_rows_out);
            
                g_error := 'CALL PROCESS_UPDATE';
                t_data_gov_mnt.process_update(i_lang         => i_lang,
                                              i_prof         => i_prof,
                                              i_table_name   => 'EXAM_REQ',
                                              i_rowids       => l_rows_out,
                                              o_error        => o_error,
                                              i_list_columns => table_varchar('FLG_STATUS'));
            
                -- inserir em log de estados
                IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                        i_prof       => i_prof,
                                        i_id_episode => i_episode,
                                        i_flg_status => pk_exam_constant.g_exam_read,
                                        i_id_record  => l_exam_req,
                                        i_flg_type   => pk_exam_constant.g_exam_type_req,
                                        o_error      => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            o_exam_req     := l_exam_req;
            o_exam_req_det := l_exam_req_det;
        
            IF i_flg_import.count > 0
            THEN
                FOR i IN 1 .. i_flg_import.count
                LOOP
                    IF i_flg_import(i) = pk_exam_constant.g_yes
                    THEN
                        g_error := 'CALL TO PK_DOC.CREATE_SAVEDOC_INTERNAL';
                        IF NOT pk_doc.create_savedoc_internal(i_id_doc             => i_id_doc(i),
                                                              i_lang               => i_lang,
                                                              i_prof               => i_prof,
                                                              i_patient            => i_patient,
                                                              i_episode            => i_episode,
                                                              i_ext_req            => NULL,
                                                              i_doc_type           => nvl(i_doc_type(i), 999), --OTHER
                                                              i_desc_doc_type      => i_desc_doc_type(i),
                                                              i_num_doc            => NULL,
                                                              i_dt_doc             => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                    i_prof,
                                                                                                                    i_dt_doc(i),
                                                                                                                    NULL),
                                                              i_dt_expire          => NULL,
                                                              i_dest               => i_dest(i),
                                                              i_desc_dest          => i_desc_dest(i),
                                                              i_ori_doc_type       => i_ori_doc_type(i),
                                                              i_desc_ori_doc_type  => i_desc_ori_doc_type(i),
                                                              i_original           => i_original(i),
                                                              i_desc_original      => i_desc_original(i),
                                                              i_btn                => NULL,
                                                              i_title              => i_title(i),
                                                              i_flg_sent_by        => NULL,
                                                              i_flg_received       => NULL,
                                                              i_prof_perf_by       => NULL,
                                                              i_desc_perf_by       => i_desc_perf_by(i),
                                                              i_author             => NULL,
                                                              i_specialty          => NULL,
                                                              i_doc_language       => NULL,
                                                              i_flg_publish        => NULL,
                                                              i_conf_code          => table_varchar(),
                                                              i_desc_conf_code     => table_varchar(),
                                                              i_code_coding_schema => table_varchar(),
                                                              i_conf_code_set      => table_varchar(),
                                                              i_desc_conf_code_set => table_varchar(),
                                                              o_error              => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    
                        ts_exam_media_archive.ins(id_exam_req_det_in     => l_exam_req_det,
                                                  id_exam_result_in      => l_exam_result,
                                                  id_doc_external_in     => i_id_doc(i),
                                                  flg_type_in            => pk_exam_constant.g_media_archive_exam_result,
                                                  flg_status_in          => pk_exam_constant.g_active,
                                                  id_prof_last_update_in => i_prof.id,
                                                  dt_last_update_tstz_in => g_sysdate_tstz,
                                                  rows_out               => l_rows_out);
                    
                    ELSE
                        ts_exam_media_archive.ins(id_exam_req_det_in     => l_exam_req_det,
                                                  id_exam_result_in      => l_exam_result,
                                                  id_doc_external_in     => i_id_doc(i),
                                                  flg_type_in            => pk_exam_constant.g_media_archive_exam_result,
                                                  flg_status_in          => pk_exam_constant.g_active,
                                                  id_prof_last_update_in => i_prof.id,
                                                  dt_last_update_tstz_in => g_sysdate_tstz,
                                                  rows_out               => l_rows_out);
                    END IF;
                END LOOP;
            END IF;
        
            g_error := 'CALL PK_TOUCH_OPTION.SET_EPIS_DOCUMENT_INTERNAL';
            IF NOT pk_touch_option.set_epis_document_internal(i_lang                  => i_lang,
                                                              i_prof                  => i_prof,
                                                              i_prof_cat_type         => pk_prof_utils.get_category(i_lang,
                                                                                                                    i_prof),
                                                              i_epis                  => i_episode,
                                                              i_doc_area              => pk_exam_constant.g_doc_area_exam_result,
                                                              i_doc_template          => NULL,
                                                              i_epis_documentation    => NULL,
                                                              i_flg_type              => 'N',
                                                              i_id_documentation      => table_number(),
                                                              i_id_doc_element        => table_number(),
                                                              i_id_doc_element_crit   => table_number(),
                                                              i_value                 => table_varchar(''),
                                                              i_notes                 => i_notes,
                                                              i_id_epis_complaint     => NULL,
                                                              i_id_doc_element_qualif => table_table_number(),
                                                              i_epis_context          => l_exam_result,
                                                              o_epis_documentation    => l_epis_documentation,
                                                              o_error                 => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            IF l_epis_documentation IS NOT NULL
            THEN
                ts_exam_result.upd(id_exam_result_in        => l_exam_result,
                                   id_epis_documentation_in => l_epis_documentation,
                                   rows_out                 => l_rows_out);
            
                g_error := 'CALL PROCESS_UPDATE';
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'EXAM_RESULT',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
            END IF;
        
            IF i_reg IS NOT NULL
            THEN
                SELECT por.dt_periodic_observation_reg,
                       pk_date_utils.get_string_tstz(i_lang, i_prof, i_start_time, NULL)
                  INTO l_reg_date, l_start_date
                  FROM periodic_observation_reg por
                 WHERE por.id_periodic_observation_reg = i_reg;
            END IF;
        
            IF l_start_date BETWEEN l_reg_date AND l_reg_date + INTERVAL '1' SECOND
            THEN
                pk_periodic_observation.delete_pat_periodic_obs(i_por => i_reg);
            END IF;
        
            g_error := 'CALL TO SET_FIRST_OBS';
            IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                          i_id_episode          => i_episode,
                                          i_pat                 => NULL,
                                          i_prof                => i_prof,
                                          i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                          i_dt_last_interaction => g_sysdate_tstz,
                                          i_dt_first_obs        => g_sysdate_tstz,
                                          o_error               => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_EXAM_WITH_RESULT',
                                              o_error);
            RETURN FALSE;
    END create_exam_with_result;

    FUNCTION create_exam_visit
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        i_patient        IN patient.id_patient%TYPE,
        i_episode        IN episode.id_episode%TYPE,
        i_schedule       IN schedule_exam.id_schedule%TYPE,
        i_exam_req_det   IN table_number,
        i_dt_begin       IN VARCHAR2 DEFAULT NULL,
        i_transaction_id IN VARCHAR2 DEFAULT NULL,
        o_episode        OUT episode.id_episode%TYPE,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_req(l_exam_req_det IN exam_req_det.id_exam_req_det%TYPE) IS
            SELECT er.id_exam_req, erd.id_exam, er.flg_time, erd.id_room
              FROM exam_req_det erd, exam_req er
             WHERE erd.id_exam_req_det = l_exam_req_det
               AND erd.id_exam_req = er.id_exam_req;
    
        CURSOR c_exam_schedule(l_exam_req_det IN exam_req_det.id_exam_req_det%TYPE) IS
            SELECT s.id_schedule, e.flg_type
              FROM exam_req_det erd,
                   exam_req er,
                   exam e,
                   (SELECT *
                      FROM TABLE(pk_schedule_exam.get_today_exam_appoints(i_lang, i_prof))) s
             WHERE erd.id_exam_req_det = l_exam_req_det
               AND erd.id_exam_req = er.id_exam_req
               AND er.id_exam_req = s.id_exam_req(+)
               AND erd.id_exam = e.id_exam;
    
        l_exam_req      c_exam_req%ROWTYPE;
        l_exam_schedule c_exam_schedule%ROWTYPE;
    
        l_status_config sys_config.value%TYPE := pk_sysconfig.get_config('EXAMS_SCHEDULED_TO_PERFORM_STATUS', i_prof);
        l_status        exam_req.flg_status%TYPE;
        l_status_det    exam_req_det.flg_status%TYPE;
    
        l_dt_entrance_room    VARCHAR2(200 CHAR);
        l_dt_last_interaction VARCHAR2(50 CHAR);
        l_dt_movement         VARCHAR2(50 CHAR);
        l_id_room             epis_info.id_room%TYPE;
        l_desc_room           VARCHAR2(1000 CHAR);
    
        l_visit   visit.id_visit%TYPE;
        l_ref_map ref_map.id_ref_map%TYPE;
    
        l_flg_type   episode.id_epis_type%TYPE;
        l_flg_status episode.flg_status%TYPE;
        l_episode    episode.id_episode%TYPE;
    
        l_rows_out_req table_varchar := table_varchar();
        l_rows_out_det table_varchar := table_varchar();
    
        -- SCH 3.0 variable
        l_transaction_id VARCHAR2(4000);
    
        l_dt_begin visit.dt_begin_tstz%TYPE;
    
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        -- gets a new transaction ID and begins the transaction (for the Scheduler 3.0 transactions)
        g_error          := 'CALL PK_SCHEDULE_API_UPSTREAM.BEGIN_NEW_TRANSACTION';
        l_transaction_id := pk_schedule_api_upstream.begin_new_transaction(i_transaction_id, i_prof);
    
        l_dt_begin := nvl(pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin, NULL), g_sysdate_tstz);
    
        g_error := 'OPEN C_EXAM_SCHEDULE';
        OPEN c_exam_schedule(i_exam_req_det(1));
        FETCH c_exam_schedule
            INTO l_exam_schedule;
        CLOSE c_exam_schedule;
    
        IF i_episode IS NULL
        THEN
            g_error := 'CALL TO PK_VISIT.CREATE_VISIT';
            IF NOT pk_visit.call_create_visit(i_lang                 => i_lang,
                                         i_id_pat               => i_patient,
                                         i_id_institution       => i_prof.institution,
                                         i_id_sched             => nvl(i_schedule, l_exam_schedule.id_schedule),
                                         i_id_professional      => i_prof,
                                         i_id_episode           => i_episode,
                                         i_external_cause       => NULL,
                                         i_health_plan          => NULL,
                                         i_epis_type            => CASE
                                                                       WHEN l_exam_schedule.flg_type = pk_exam_constant.g_type_img THEN
                                                                        pk_exam_constant.g_episode_type_rad
                                                                       ELSE
                                                                        pk_exam_constant.g_episode_type_exm
                                                                   END,
                                         i_dep_clin_serv        => NULL,
                                         i_origin               => NULL,
                                         i_flg_ehr              => pk_exam_constant.g_no,
                                         i_dt_begin             => l_dt_begin,
                                         i_flg_appointment_type => NULL,
                                         i_transaction_id       => l_transaction_id,
                                         i_ext_value            => NULL,
                                         i_id_prof_in_charge    => NULL,
                                         o_episode              => l_episode,
                                         o_error                => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            o_episode := l_episode;
        
            FOR i IN 1 .. i_exam_req_det.count
            LOOP
                g_error := 'OPEN C_EXAM_REQ';
                OPEN c_exam_req(i_exam_req_det(i));
                FETCH c_exam_req
                    INTO l_exam_req;
                CLOSE c_exam_req;
            
                -- Verifica localização actual do doente
                g_error := 'CALL TO PK_VISIT.GET_EPIS_INFO';
                IF NOT pk_visit.get_epis_info(i_lang                => i_lang,
                                              i_id_episode          => l_episode,
                                              i_prof                => i_prof,
                                              o_flg_type            => l_flg_type,
                                              o_flg_status          => l_flg_status,
                                              o_id_room             => l_id_room,
                                              o_desc_room           => l_desc_room,
                                              o_dt_entrance_room    => l_dt_entrance_room,
                                              o_dt_last_interaction => l_dt_last_interaction,
                                              o_dt_movement         => l_dt_movement,
                                              o_error               => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                IF l_status_config = pk_exam_constant.g_yes
                THEN
                    -- Verifica se a sala do exame é a mesma onde o paciente está localizado
                    IF nvl(l_id_room, 0) = l_exam_req.id_room
                    THEN
                        -- Basta q um dos exames pedidos seja realizado na sala q é localização actual
                        -- do doente para fazer c/ q o cabeçalho de requisição fique 'em execução'
                        l_status     := pk_exam_constant.g_exam_toexec;
                        l_status_det := pk_exam_constant.g_exam_toexec;
                    ELSE
                        l_status     := pk_exam_constant.g_exam_pending;
                        l_status_det := pk_exam_constant.g_exam_pending;
                    END IF;
                ELSE
                    --ALERT-177726               
                    l_status     := pk_exam_constant.g_exam_pending;
                    l_status_det := pk_exam_constant.g_exam_pending;
                END IF;
            
                g_error := 'UPDATE EXAM_REQ';
                ts_exam_req.upd(id_exam_req_in => l_exam_req.id_exam_req,
                                id_episode_in  => l_episode,
                                flg_status_in  => pk_exam_constant.g_exam_pending,
                                rows_out       => l_rows_out_req);
            
                -- inserir em log de estados
                IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                        i_prof       => i_prof,
                                        i_id_episode => l_episode,
                                        i_flg_status => pk_exam_constant.g_exam_pending,
                                        i_id_record  => l_exam_req.id_exam_req,
                                        i_flg_type   => pk_exam_constant.g_exam_type_req,
                                        o_error      => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'UPDATE EXAM_REQ_DET';
                ts_exam_req_det.upd(id_exam_req_det_in     => i_exam_req_det(i),
                                    flg_status_in          => pk_exam_constant.g_exam_pending,
                                    id_prof_last_update_in => i_prof.id,
                                    dt_last_update_tstz_in => g_sysdate_tstz,
                                    rows_out               => l_rows_out_det);
            
                -- inserir em log de estados
                IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                        i_prof       => i_prof,
                                        i_id_episode => l_episode,
                                        i_flg_status => pk_exam_constant.g_exam_pending,
                                        i_id_record  => i_exam_req_det(i),
                                        i_flg_type   => pk_exam_constant.g_exam_type_det,
                                        o_error      => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'CALL TO PK_EXAMS.SET_TECHNICIAN_GRID_STATUS';
                IF NOT pk_exams.set_technician_grid_status(i_lang        => i_lang,
                                                           i_prof        => i_prof,
                                                           i_patient     => i_patient,
                                                           i_episode     => l_episode,
                                                           i_exam_req    => l_exam_req.id_exam_req,
                                                           i_flg_contact => pk_exam_constant.g_waiting_technician,
                                                           o_error       => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'CALL TO PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
                IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                          i_prof         => i_prof,
                                                          i_patient      => i_patient,
                                                          i_episode      => l_episode,
                                                          i_exam_req     => l_exam_req.id_exam_req,
                                                          i_exam_req_det => i_exam_req_det(i),
                                                          o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END LOOP;
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang         => i_lang,
                                          i_prof         => i_prof,
                                          i_table_name   => 'EXAM_REQ',
                                          i_rowids       => l_rows_out_req,
                                          o_error        => o_error,
                                          i_list_columns => table_varchar('ID_EPISODE', 'FLG_STATUS'));
        
            t_data_gov_mnt.process_update(i_lang         => i_lang,
                                          i_prof         => i_prof,
                                          i_table_name   => 'EXAM_REQ_DET',
                                          i_rowids       => l_rows_out_det,
                                          o_error        => o_error,
                                          i_list_columns => table_varchar('FLG_STATUS'));
        
            g_error := 'CALL TO PK_API_REF_CIRCLE.SET_REF_MAP_FROM_EPISODE';
            IF NOT pk_api_ref_circle.set_ref_map_from_episode(i_lang     => i_lang,
                                                              i_prof     => i_prof,
                                                              i_schedule => nvl(i_schedule, l_exam_schedule.id_schedule),
                                                              i_episode  => l_episode,
                                                              o_visit    => l_visit,
                                                              o_ref_map  => l_ref_map,
                                                              o_error    => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            g_error := 'CALL TO PK_VISIT.SET_FIRST_OBS';
            IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                          i_id_episode          => l_episode,
                                          i_pat                 => i_patient,
                                          i_prof                => i_prof,
                                          i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                          i_dt_last_interaction => l_dt_begin,
                                          i_dt_first_obs        => l_dt_begin,
                                          o_error               => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        --remote scheduler commit. Doesn't affect PFH.
        IF i_transaction_id IS NULL
        THEN
            pk_schedule_api_upstream.do_commit(l_transaction_id, i_prof);
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_EXAM_VISIT',
                                              o_error);
            pk_schedule_api_upstream.do_rollback(l_transaction_id, i_prof);
            RETURN FALSE;
    END create_exam_visit;

    FUNCTION set_exam_order
    (
        i_lang                    IN language.id_language%TYPE, --1
        i_prof                    IN profissional,
        i_episode                 IN episode.id_episode%TYPE,
        i_exam_req_det            IN table_number,
        i_flg_time                IN table_varchar, --5
        i_dt_begin                IN table_varchar,
        i_priority                IN table_varchar,
        i_flg_prn                 IN table_varchar,
        i_notes_prn               IN table_varchar,
        i_flg_fasting             IN table_varchar, --10
        i_notes                   IN table_varchar,
        i_notes_scheduler         IN table_varchar,
        i_notes_technician        IN table_varchar,
        i_notes_patient           IN table_varchar,
        i_diagnosis_notes         IN table_varchar, --15
        i_diagnosis               IN pk_edis_types.table_in_epis_diagnosis,
        i_laterality              IN table_varchar,
        i_exec_room               IN table_number,
        i_exec_institution        IN table_number,
        i_clinical_purpose        IN table_number, --20
        i_clinical_purpose_notes  IN table_varchar,
        i_codification            IN table_number,
        i_health_plan             IN table_number,
        i_exemption               IN table_number,
        i_prof_order              IN table_number, --25
        i_dt_order                IN table_varchar,
        i_order_type              IN table_number,
        i_clinical_question       IN table_table_number,
        i_response                IN table_table_varchar,
        i_clinical_question_notes IN table_table_varchar, --30
        o_error                   OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'CALL PK_EXAM_CORE.UPDATE_EXAM_ORDER';
        IF NOT pk_exam_core.update_exam_order(i_lang                    => i_lang,
                                              i_prof                    => i_prof,
                                              i_episode                 => i_episode,
                                              i_exam_req                => NULL,
                                              i_exam_req_det            => i_exam_req_det,
                                              i_exam                    => NULL,
                                              i_flg_time                => i_flg_time,
                                              i_dt_begin                => i_dt_begin,
                                              i_priority                => i_priority,
                                              i_flg_prn                 => i_flg_prn,
                                              i_notes_prn               => i_notes_prn,
                                              i_flg_fasting             => i_flg_fasting,
                                              i_notes                   => i_notes,
                                              i_notes_scheduler         => i_notes_scheduler,
                                              i_notes_technician        => i_notes_technician,
                                              i_notes_patient           => i_notes_patient,
                                              i_diagnosis_notes         => i_diagnosis_notes,
                                              i_diagnosis               => i_diagnosis,
                                              i_laterality              => i_laterality,
                                              i_exec_room               => i_exec_room,
                                              i_exec_institution        => i_exec_institution,
                                              i_clinical_purpose        => i_clinical_purpose,
                                              i_clinical_purpose_notes  => i_clinical_purpose_notes,
                                              i_codification            => i_codification,
                                              i_health_plan             => i_health_plan,
                                              i_exemption               => i_exemption,
                                              i_prof_order              => i_prof_order,
                                              i_dt_order                => i_dt_order,
                                              i_order_type              => i_order_type,
                                              i_clinical_question       => i_clinical_question,
                                              i_response                => i_response,
                                              i_clinical_question_notes => i_clinical_question_notes,
                                              o_error                   => o_error)
        THEN
            IF o_error.ora_sqlcode = 'EXAM_M010'
            THEN
                pk_utils.undo_changes;
                RETURN FALSE;
            ELSE
                RAISE g_other_exception;
            END IF;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              g_error_code,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_ORDER',
                                              'U',
                                              g_error,
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_ORDER',
                                              o_error);
            RETURN FALSE;
    END set_exam_order;

    FUNCTION set_exam_time_out
    (
        i_lang                  IN language.id_language%TYPE,
        i_prof                  IN profissional,
        i_episode               IN episode.id_episode%TYPE,
        i_exam_req_det          IN exam_req_det.id_exam_req_det%TYPE,
        i_doc_area              IN doc_area.id_doc_area%TYPE,
        i_doc_template          IN doc_template.id_doc_template%TYPE,
        i_epis_documentation    IN epis_documentation.id_epis_documentation%TYPE,
        i_flg_type              IN VARCHAR2,
        i_id_documentation      IN table_number,
        i_id_doc_element        IN table_number,
        i_id_doc_element_crit   IN table_number,
        i_value                 IN table_varchar,
        i_notes                 IN epis_documentation.notes%TYPE,
        i_id_doc_element_qualif IN table_table_number,
        i_epis_context          IN epis_documentation.id_epis_context%TYPE,
        i_summary_and_notes     IN epis_documentation.notes%TYPE,
        i_episode_context       IN epis_documentation.id_episode_context%TYPE DEFAULT NULL,
        i_flg_test              IN VARCHAR2,
        o_flg_show              OUT VARCHAR2,
        o_msg_title             OUT sys_message.desc_message%TYPE,
        o_msg_body              OUT pk_types.cursor_type,
        o_epis_documentation    OUT epis_documentation.id_epis_documentation%TYPE,
        o_error                 OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_msg_body VARCHAR2(1000 CHAR);
        l_score    PLS_INTEGER;
        l_all_yes  PLS_INTEGER;
    
        -- Inner function to insert into exam_time_out table
        FUNCTION insert_exam_time_out
        (
            i_exam_req_det          IN exam_req_det.id_exam_req_det%TYPE,
            i_id_epis_documentation IN epis_documentation.id_epis_documentation%TYPE
        ) RETURN BOOLEAN IS
        
        BEGIN
            g_error := 'CREATE TIME OUT';
            INSERT INTO exam_time_out
                (id_exam_time_out, id_exam_req_det, id_epis_documentation, flg_complete)
            VALUES
                (seq_exam_time_out.nextval,
                 i_exam_req_det,
                 i_id_epis_documentation,
                 decode(l_score, l_all_yes, pk_exam_constant.g_yes, pk_exam_constant.g_no));
        
            RETURN TRUE;
        
        EXCEPTION
            WHEN OTHERS THEN
                RETURN FALSE;
        END insert_exam_time_out;
    
    BEGIN
    
        o_flg_show := pk_exam_constant.g_no;
    
        SELECT SUM(score)
          INTO l_all_yes
          FROM (SELECT DISTINCT d.id_documentation, de.score
                  FROM doc_template dt
                 INNER JOIN doc_template_area_doc dtad
                    ON dtad.id_doc_template = dt.id_doc_template
                 INNER JOIN documentation d
                    ON dtad.id_documentation = d.id_documentation
                 INNER JOIN doc_element de
                    ON d.id_documentation = de.id_documentation
                 WHERE dtad.id_doc_template = pk_sysconfig.get_config('EXAMS_TIME_OUT_TEMPLATE', i_prof)
                   AND dtad.id_doc_area = pk_exam_constant.g_doc_area_exam_time_out
                   AND de.flg_available = pk_alert_constant.g_available
                   AND de.score > 0);
    
        g_error := 'DECODE FLG_SHOW';
        SELECT SUM(de.score)
          INTO l_score
          FROM doc_element de
         WHERE de.id_doc_element IN (SELECT /*+opt_estimate(table t rows=1)*/
                                      t.column_value
                                       FROM TABLE(i_id_doc_element_crit) t)
           AND de.flg_available = pk_alert_constant.g_available
           AND de.score > 0;
    
        IF i_flg_test = pk_exam_constant.g_no
           OR l_score = l_all_yes
        THEN
            pk_types.open_my_cursor(o_msg_body);
        
            IF NOT pk_touch_option.set_epis_documentation(i_lang                  => i_lang,
                                                          i_prof                  => i_prof,
                                                          i_prof_cat_type         => pk_prof_utils.get_category(i_lang,
                                                                                                                i_prof),
                                                          i_epis                  => i_episode,
                                                          i_doc_area              => i_doc_area,
                                                          i_doc_template          => i_doc_template,
                                                          i_epis_documentation    => i_epis_documentation,
                                                          i_flg_type              => i_flg_type,
                                                          i_id_documentation      => i_id_documentation,
                                                          i_id_doc_element        => i_id_doc_element,
                                                          i_id_doc_element_crit   => i_id_doc_element_crit,
                                                          i_value                 => i_value,
                                                          i_notes                 => i_notes,
                                                          i_id_doc_element_qualif => i_id_doc_element_qualif,
                                                          i_epis_context          => i_epis_context,
                                                          i_summary_and_notes     => i_summary_and_notes,
                                                          i_episode_context       => i_episode_context,
                                                          o_epis_documentation    => o_epis_documentation,
                                                          o_error                 => o_error)
               AND
              -- insert into exam_time_out table
               insert_exam_time_out(i_exam_req_det, o_epis_documentation)
            THEN
                RAISE g_other_exception;
            END IF;
        ELSE
            o_flg_show := pk_exam_constant.g_yes;
        
            g_error := 'GET UNCONFIRMED';
            SELECT concatenate(component || chr(10))
              INTO l_msg_body
              FROM (SELECT pk_translation.get_translation(i_lang, dc.code_doc_component) component
                      FROM doc_element_crit decr
                      JOIN doc_element de
                        ON de.id_doc_element = decr.id_doc_element
                      JOIN documentation d
                        ON d.id_documentation = de.id_documentation
                      JOIN doc_component dc
                        ON dc.id_doc_component = d.id_doc_component
                     WHERE decr.id_doc_element_crit IN
                           (SELECT /*+opt_estimate(table t rows=1)*/
                             t.column_value
                              FROM TABLE(i_id_doc_element_crit) t)
                     GROUP BY dc.code_doc_component
                    HAVING abs(SUM(de.score)) != 1);
        
            o_msg_title := pk_message.get_message(i_lang, i_prof, 'EXAMS_T144');
        
            OPEN o_msg_body FOR
                SELECT pk_message.get_message(i_lang, i_prof, 'EXAMS_M013') head,
                       pk_message.get_message(i_lang, i_prof, 'EXAMS_M014') items_title,
                       substr(l_msg_body, 0, length(l_msg_body) - 1) items,
                       pk_message.get_message(i_lang, i_prof, 'EXAMS_M015') foot
                  FROM dual;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_TIME_OUT',
                                              o_error);
            pk_types.open_my_cursor(o_msg_body);
            RETURN FALSE;
    END set_exam_time_out;

    FUNCTION set_exam_perform
    (
        i_lang                  IN language.id_language%TYPE,
        i_prof                  IN profissional,
        i_exam_req_det          IN exam_req_det.id_exam_req_det%TYPE,
        i_prof_performed        IN exam_req_det.id_prof_performed%TYPE,
        i_start_time            IN VARCHAR2,
        i_end_time              IN VARCHAR2,
        i_supply_workflow       IN table_number,
        i_supply                IN table_number,
        i_supply_set            IN table_number,
        i_supply_qty            IN table_number,
        i_supply_type           IN table_varchar,
        i_barcode_scanned       IN table_varchar,
        i_deliver_needed        IN table_varchar,
        i_flg_cons_type         IN table_varchar,
        i_dt_expiration         IN table_varchar,
        i_flg_validation        IN table_varchar,
        i_lot                   IN table_varchar,
        i_notes_supplies        IN table_varchar,
        i_doc_template          IN doc_template.id_doc_template%TYPE,
        i_flg_type              IN doc_template_context.flg_type%TYPE,
        i_id_documentation      IN table_number,
        i_id_doc_element        IN table_number,
        i_id_doc_element_crit   IN table_number,
        i_value                 IN table_varchar,
        i_id_doc_element_qualif IN table_table_number,
        i_documentation_notes   IN epis_documentation.notes%TYPE,
        i_questionnaire         IN table_number,
        i_response              IN table_varchar,
        i_notes                 IN table_varchar,
        i_transaction_id        IN VARCHAR2 DEFAULT NULL,
        o_error                 OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_req IS
            SELECT er.id_exam_req,
                   erd.id_exam,
                   e.flg_type,
                   er.id_patient,
                   er.id_episode,
                   er.id_episode_origin,
                   erd.flg_status
              FROM exam_req er, exam_req_det erd, exam e
             WHERE erd.id_exam_req_det = i_exam_req_det
               AND erd.id_exam_req = er.id_exam_req
               AND erd.id_exam = e.id_exam;
    
        l_exam_req           c_exam_req%ROWTYPE;
        l_epis_documentation epis_documentation.id_epis_documentation%TYPE;
    
        l_start_time exam_req_det.start_time%TYPE;
        l_end_time   exam_req_det.end_time%TYPE;
    
        l_aux table_varchar2;
    
        l_sys_alert_event sys_alert_event%ROWTYPE;
    
        l_transaction_id VARCHAR2(4000);
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        l_start_time := pk_date_utils.get_string_tstz(i_lang, i_prof, i_start_time, NULL);
        IF i_end_time IS NULL
        THEN
            IF l_start_time < g_sysdate_tstz
            THEN
                l_end_time := l_start_time;
            ELSE
                l_end_time := g_sysdate_tstz;
            END IF;
        ELSE
            l_end_time := pk_date_utils.get_string_tstz(i_lang, i_prof, i_end_time, NULL);
        
            IF l_end_time < l_start_time
            THEN
                l_end_time := l_start_time;
            END IF;
        END IF;
    
        OPEN c_exam_req;
        FETCH c_exam_req
            INTO l_exam_req;
        CLOSE c_exam_req;
    
        IF l_exam_req.flg_status NOT IN
           (pk_exam_constant.g_exam_exec, pk_exam_constant.g_exam_result, pk_exam_constant.g_exam_cancel)
        THEN
            g_error := 'UPDATE EXAM_REQ';
            ts_exam_req.upd(id_episode_in          => CASE
                                                          WHEN l_exam_req.id_episode IS NULL THEN
                                                           l_exam_req.id_episode_origin
                                                      END,
                            flg_status_in          => pk_exam_constant.g_exam_ongoing,
                            id_prof_last_update_in => i_prof.id,
                            dt_last_update_tstz_in => g_sysdate_tstz,
                            where_in               => 'id_exam_req = ' || l_exam_req.id_exam_req || ' AND flg_status != ''' ||
                                                      pk_exam_constant.g_exam_ongoing || '''',
                            rows_out               => l_rows_out);
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            OPEN c_exam_req;
            FETCH c_exam_req
                INTO l_exam_req;
            CLOSE c_exam_req;
        
            -- inserir em log de estados
            IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                    i_prof       => i_prof,
                                    i_id_episode => l_exam_req.id_episode,
                                    i_flg_status => pk_exam_constant.g_exam_exec,
                                    i_id_record  => l_exam_req.id_exam_req,
                                    i_flg_type   => pk_exam_constant.g_exam_type_req,
                                    o_error      => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            g_error := 'CALL PK_EXAM_CORE.SET_EXAM_HISTORY';
            IF NOT pk_exam_core.set_exam_history(i_lang         => i_lang,
                                                 i_prof         => i_prof,
                                                 i_exam_req     => NULL,
                                                 i_exam_req_det => table_number(i_exam_req_det),
                                                 o_error        => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            l_rows_out := NULL;
        
            g_error := 'UPDATE EXAM_REQ_DET';
            ts_exam_req_det.upd(id_exam_req_det_in       => i_exam_req_det,
                                flg_status_in            => pk_exam_constant.g_exam_exec,
                                id_prof_performed_reg_in => i_prof.id,
                                dt_performed_reg_in      => g_sysdate_tstz,
                                id_prof_performed_in     => CASE
                                                                WHEN i_prof_performed != -1 THEN
                                                                 i_prof_performed
                                                                ELSE
                                                                 NULL
                                                            END,
                                start_time_in            => l_start_time,
                                end_time_in              => l_end_time,
                                id_prof_last_update_in   => i_prof.id,
                                dt_last_update_tstz_in   => g_sysdate_tstz,
                                prof_dep_clin_serv_in    => pk_prof_utils.get_prof_dcs(profissional(i_prof_performed,
                                                                                                    i_prof.institution,
                                                                                                    i_prof.software)),
                                rows_out                 => l_rows_out);
        
            g_error := 'CALL TO PK_IA_EVENT_IMAGE.EXAM_REQUEST_PERFORMED';
            pk_ia_event_image.exam_request_performed(i_id_exam_req_det => i_exam_req_det,
                                                     i_id_institution  => i_prof.institution,
                                                     i_flg_old_status  => l_exam_req.flg_status);
        
            -- inserir em log de estados
            IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                    i_prof       => i_prof,
                                    i_id_episode => l_exam_req.id_episode,
                                    i_flg_status => pk_exam_constant.g_exam_exec,
                                    i_id_record  => i_exam_req_det,
                                    i_flg_type   => pk_exam_constant.g_exam_type_det,
                                    o_error      => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ_DET',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            g_error := 'CALL PK_EXAM_EXTERNAL.UPDATE_TDE_TASK_STATE';
            IF NOT pk_exam_external.update_tde_task_state(i_lang         => i_lang,
                                                          i_prof         => i_prof,
                                                          i_exam_req_det => i_exam_req_det,
                                                          i_flg_action   => pk_exam_constant.g_exam_exec,
                                                          o_error        => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            IF nvl(i_id_documentation.count, 0) > 0
               OR i_documentation_notes IS NOT NULL
            THEN
                g_error := 'CALL PK_TOUCH_OPTION.SET_EPIS_DOCUMENT_INTERNAL';
                IF NOT pk_touch_option.set_epis_document_internal(i_lang                  => i_lang,
                                                                  i_prof                  => i_prof,
                                                                  i_prof_cat_type         => pk_prof_utils.get_category(i_lang,
                                                                                                                        i_prof),
                                                                  i_epis                  => l_exam_req.id_episode,
                                                                  i_doc_area              => pk_exam_constant.g_doc_area_exam,
                                                                  i_doc_template          => i_doc_template,
                                                                  i_epis_documentation    => NULL,
                                                                  i_flg_type              => i_flg_type,
                                                                  i_id_documentation      => i_id_documentation,
                                                                  i_id_doc_element        => i_id_doc_element,
                                                                  i_id_doc_element_crit   => i_id_doc_element_crit,
                                                                  i_value                 => i_value,
                                                                  i_notes                 => i_documentation_notes,
                                                                  i_id_epis_complaint     => NULL,
                                                                  i_id_doc_element_qualif => i_id_doc_element_qualif,
                                                                  i_epis_context          => i_exam_req_det,
                                                                  o_epis_documentation    => l_epis_documentation,
                                                                  o_error                 => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'UPDATE EXAM_REQ_DET';
                ts_exam_req_det.upd(id_exam_req_det_in     => i_exam_req_det,
                                    id_epis_doc_perform_in => l_epis_documentation,
                                    rows_out               => l_rows_out);
            END IF;
        
            IF nvl(i_supply.count, 0) > 0
            THEN
                g_error := 'CALL PK_SUPPLIES_API_DB.CREATE_SUP_CONSUMPTION';
                IF NOT pk_supplies_api_db.set_supply_consumption(i_lang               => i_lang,
                                                                 i_prof               => i_prof,
                                                                 i_id_episode         => l_exam_req.id_episode,
                                                                 i_id_context         => i_exam_req_det,
                                                                 i_flg_context        => l_exam_req.flg_type,
                                                                 i_id_supply_workflow => i_supply_workflow,
                                                                 i_supply             => i_supply,
                                                                 i_supply_set         => i_supply_set,
                                                                 i_supply_qty         => i_supply_qty,
                                                                 i_flg_supply_type    => i_supply_type,
                                                                 i_barcode_scanned    => i_barcode_scanned,
                                                                 i_fixed_asset_number => NULL,
                                                                 i_deliver_needed     => i_deliver_needed,
                                                                 i_flg_cons_type      => i_flg_cons_type,
                                                                 i_notes              => i_notes_supplies,
                                                                 i_dt_expected_date   => NULL,
                                                                 i_check_quantities   => pk_alert_constant.g_no,
                                                                 i_dt_expiration      => i_dt_expiration,
                                                                 i_flg_validation     => i_flg_validation,
                                                                 i_lot                => i_lot,
                                                                 o_error              => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            g_error := 'i_questionnaire IS NOT NULL';
            IF i_questionnaire IS NOT NULL
               AND i_questionnaire.count > 0
            THEN
                g_error := 'LOOP I_QUESTIONNAIRE';
                FOR i IN 1 .. i_questionnaire.count
                LOOP
                    IF i_response(i) IS NOT NULL
                    THEN
                        l_aux := pk_utils.str_split(i_response(i), '|');
                    
                        FOR j IN 1 .. l_aux.count
                        LOOP
                            g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE 1';
                            INSERT INTO exam_question_response
                                (id_exam_question_response,
                                 id_episode,
                                 id_exam_req_det,
                                 flg_time,
                                 id_questionnaire,
                                 id_response,
                                 notes,
                                 id_prof_last_update,
                                 dt_last_update_tstz)
                            VALUES
                                (seq_exam_question_response.nextval,
                                 l_exam_req.id_episode,
                                 i_exam_req_det,
                                 pk_exam_constant.g_exam_cq_after_execute,
                                 i_questionnaire(i),
                                 to_number(l_aux(j)),
                                 i_notes(i),
                                 i_prof.id,
                                 g_sysdate_tstz);
                        END LOOP;
                    ELSE
                        g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE 2';
                        INSERT INTO exam_question_response
                            (id_exam_question_response,
                             id_episode,
                             id_exam_req_det,
                             flg_time,
                             id_questionnaire,
                             id_response,
                             notes,
                             id_prof_last_update,
                             dt_last_update_tstz)
                        VALUES
                            (seq_exam_question_response.nextval,
                             l_exam_req.id_episode,
                             i_exam_req_det,
                             pk_exam_constant.g_exam_cq_after_execute,
                             i_questionnaire(i),
                             NULL,
                             i_notes(i),
                             i_prof.id,
                             g_sysdate_tstz);
                    END IF;
                END LOOP;
            END IF;
        
            -- Remove ALERT's when they are behind schedule
            l_sys_alert_event.id_sys_alert := 33;
            l_sys_alert_event.id_episode   := l_exam_req.id_episode;
            l_sys_alert_event.id_record    := i_exam_req_det;
        
            g_error := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT';
            IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                    i_prof            => i_prof,
                                                    i_sys_alert_event => l_sys_alert_event,
                                                    o_error           => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            -- Remove ALERT's when they are behind schedule
            l_sys_alert_event.id_sys_alert := 39;
        
            g_error := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT';
            IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                    i_prof            => i_prof,
                                                    i_sys_alert_event => l_sys_alert_event,
                                                    o_error           => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            -- gets a new transaction ID and begins the transaction (for the Scheduler 3.0 transactions)
            g_error          := 'CALL PK_SCHEDULE_API_UPSTREAM.BEGIN_NEW_TRANSACTION';
            l_transaction_id := pk_schedule_api_upstream.begin_new_transaction(i_transaction_id, i_prof);
        
            IF pk_prof_utils.get_category(i_lang, i_prof) = pk_alert_constant.g_cat_type_technician
            THEN
                g_error := 'CALL TO PK_EXAMS.SET_TECHNICIAN_GRID_STATUS';
                IF NOT pk_exams.set_technician_grid_status(i_lang        => i_lang,
                                                           i_prof        => i_prof,
                                                           i_patient     => l_exam_req.id_patient,
                                                           i_episode     => l_exam_req.id_episode,
                                                           i_exam_req    => l_exam_req.id_exam_req,
                                                           i_flg_contact => pk_exam_constant.g_in_technician,
                                                           o_error       => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            ELSE
                g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
                IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                          i_prof         => i_prof,
                                                          i_patient      => NULL,
                                                          i_episode      => l_exam_req.id_episode,
                                                          i_exam_req     => l_exam_req.id_exam_req,
                                                          i_exam_req_det => i_exam_req_det,
                                                          o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            g_error := 'CALL TO SET_FIRST_OBS';
            IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                          i_id_episode          => l_exam_req.id_episode,
                                          i_pat                 => NULL,
                                          i_prof                => i_prof,
                                          i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                          i_dt_last_interaction => g_sysdate_tstz,
                                          i_dt_first_obs        => g_sysdate_tstz,
                                          o_error               => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        IF i_transaction_id IS NULL
        THEN
            pk_schedule_api_upstream.do_commit(l_transaction_id, i_prof);
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_PERFORM',
                                              o_error);
            pk_schedule_api_upstream.do_rollback(l_transaction_id, i_prof);
            RETURN FALSE;
    END set_exam_perform;

    FUNCTION set_exam_result
    (
        i_lang                  IN language.id_language%TYPE, --1
        i_prof                  IN profissional,
        i_patient               IN exam_result.id_patient%TYPE,
        i_episode               IN exam_result.id_episode_write%TYPE,
        i_exam_req_det          IN exam_req_det.id_exam_req_det%TYPE, --5
        i_exam_result           IN exam_req_det.id_exam_req_det%TYPE DEFAULT NULL,
        i_dt_result             IN VARCHAR2 DEFAULT NULL,
        i_result_status         IN result_status.id_result_status%TYPE,
        i_abnormality           IN exam_result.id_abnormality%TYPE,
        i_flg_result_origin     IN exam_result.flg_result_origin%TYPE, --10
        i_result_origin_notes   IN exam_result.result_origin_notes%TYPE,
        i_flg_import            IN table_varchar,
        i_id_doc                IN table_number,
        i_doc_type              IN table_number,
        i_desc_doc_type         IN table_varchar, --15
        i_dt_doc                IN table_varchar,
        i_dest                  IN table_number,
        i_desc_dest             IN table_varchar,
        i_ori_doc_type          IN table_number,
        i_desc_ori_doc_type     IN table_varchar, --20
        i_original              IN table_number,
        i_desc_original         IN table_varchar,
        i_title                 IN table_varchar,
        i_desc_perf_by          IN table_varchar,
        i_doc_template          IN doc_template.id_doc_template%TYPE, --25
        i_flg_type              IN doc_template_context.flg_type%TYPE,
        i_id_documentation      IN table_number,
        i_id_doc_element        IN table_number,
        i_id_doc_element_crit   IN table_number,
        i_value                 IN table_varchar, --30
        i_id_doc_element_qualif IN table_table_number,
        i_documentation_notes   IN epis_documentation.notes%TYPE,
        o_exam_result           OUT exam_result.id_exam_result%TYPE,
        o_error                 OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_result_parent IS
            SELECT er.*
              FROM exam_result er
             WHERE er.id_exam_result = i_exam_result;
    
        CURSOR c_exam_req(l_hand_off_type sys_config.value%TYPE) IS
            SELECT erd.id_exam,
                   e.flg_type,
                   er.id_episode,
                   er.id_episode_origin,
                   erd.id_exam_req,
                   er.flg_time,
                   erd.flg_status,
                   er.priority flg_priority,
                   er.id_prof_req,
                   cso.id_prof_ordered_by id_prof_order,
                   erd.start_time,
                   er.dt_begin_tstz,
                   er.dt_pend_req_tstz,
                   er.dt_req_tstz,
                   erd.id_prof_performed,
                   pk_hand_off_api.get_responsibles_id(i_lang,
                                                       i_prof,
                                                       er.id_episode,
                                                       pk_alert_constant.g_cat_type_doc,
                                                       l_hand_off_type) id_prof_resp
              FROM exam_req_det erd,
                   exam e,
                   exam_req er,
                   TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                  i_prof,
                                                                  i_episode,
                                                                  NULL,
                                                                  NULL,
                                                                  NULL,
                                                                  i_exam_req_det)) cso
             WHERE erd.id_exam_req_det = i_exam_req_det
               AND er.id_exam_req = erd.id_exam_req
               AND e.id_exam = erd.id_exam
               AND erd.id_co_sign_order = cso.id_co_sign_hist(+);
    
        CURSOR c_count(l_id_exam_req IN exam_req.id_exam_req%TYPE) IS
            SELECT COUNT(*)
              FROM exam_req_det
             WHERE id_exam_req = l_id_exam_req
               AND flg_status IN
                   (pk_exam_constant.g_exam_pending, pk_exam_constant.g_exam_req, pk_exam_constant.g_exam_toexec);
    
        CURSOR c_episode_type(l_episode IN episode.id_episode%TYPE) IS
            SELECT e.id_epis_type, e.id_visit
              FROM episode e
             WHERE e.id_episode = l_episode;
    
        CURSOR c_episode_exam(l_episode IN episode.id_episode%TYPE) IS
            SELECT 'X'
              FROM exam_req er
             WHERE er.id_episode = l_episode
               AND er.flg_status NOT IN
                   (pk_exam_constant.g_exam_result, pk_exam_constant.g_exam_read, pk_exam_constant.g_exam_cancel);
    
        l_exam_result_parent c_exam_result_parent%ROWTYPE;
        l_exam_req           c_exam_req%ROWTYPE;
        l_count              NUMBER;
        l_episode_type       c_episode_type%ROWTYPE;
        l_episode_exam       c_episode_exam%ROWTYPE;
    
        l_exam_result        exam_result.id_exam_result%TYPE;
        l_status_req         exam_req.flg_status%TYPE;
        l_dt_result          TIMESTAMP WITH LOCAL TIME ZONE;
        l_dt_req             TIMESTAMP WITH LOCAL TIME ZONE;
        l_epis_documentation epis_documentation.id_epis_documentation%TYPE;
        l_result             BOOLEAN := FALSE;
        l_barcode            VARCHAR2(30 CHAR);
        l_gener_barcode      VARCHAR2(1 CHAR);
        l_sys_alert_event    sys_alert_event%ROWTYPE;
    
        l_hand_off_type sys_config.value%TYPE;
    
        l_rows_out     table_varchar := table_varchar();
        l_rows_out_res table_varchar := table_varchar();
        l_rows_out_req table_varchar := table_varchar();
        l_rows_out_det table_varchar := table_varchar();
    
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        IF i_dt_result IS NULL
        THEN
            l_dt_result := g_sysdate_tstz;
        ELSE
            l_dt_result := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_result, NULL);
        END IF;
    
        IF i_exam_result IS NOT NULL
        THEN
        
            BEGIN
                SELECT er.id_exam_result_parent
                  INTO l_exam_result_parent.id_exam_result_parent
                  FROM exam_result er
                 WHERE er.id_exam_result = i_exam_result
                   AND er.id_exam_result_parent IS NOT NULL;
            EXCEPTION
                WHEN no_data_found THEN
                
                    g_error := 'OPEN C_EXAM_RESULT_PARENT';
                    OPEN c_exam_result_parent;
                    FETCH c_exam_result_parent
                        INTO l_exam_result_parent;
                    CLOSE c_exam_result_parent;
                
                    g_error                                    := 'GET SEQ_EXAM_RESULT.NEXTVAL';
                    l_exam_result_parent.id_exam_result_parent := ts_exam_result.next_key(sequence_in => 'SEQ_EXAM_RESULT');
                
                    g_error := 'INSERT EXAM_RESULT';
                    ts_exam_result.ins(id_exam_result_in      => l_exam_result_parent.id_exam_result_parent,
                                       id_patient_in          => l_exam_result_parent.id_patient,
                                       id_episode_write_in    => l_exam_result_parent.id_episode_write,
                                       id_institution_in      => l_exam_result_parent.id_institution,
                                       id_professional_in     => l_exam_result_parent.id_professional,
                                       dt_exam_result_tstz_in => l_exam_result_parent.dt_exam_result_tstz,
                                       id_result_status_in    => l_exam_result_parent.id_result_status,
                                       id_abnormality_in      => l_exam_result_parent.id_abnormality,
                                       notes_in               => l_exam_result_parent.notes,
                                       flg_type_in            => l_exam_result_parent.flg_type,
                                       flg_result_origin_in   => l_exam_result_parent.flg_result_origin,
                                       rows_out               => l_rows_out_res);
                
                    g_error := 'INSERT EXAM_RESULT';
                    ts_exam_result.upd(id_exam_result_in        => i_exam_result,
                                       id_exam_result_parent_in => l_exam_result_parent.id_exam_result_parent,
                                       rows_out                 => l_rows_out_res);
            END;
        END IF;
    
        pk_hand_off_core.get_hand_off_type(i_lang, i_prof, l_hand_off_type);
    
        -- Encontrar exame e ID do cabeçalho
        g_error := 'OPEN C_EXAM_REQ';
        OPEN c_exam_req(l_hand_off_type);
        FETCH c_exam_req
            INTO l_exam_req;
        CLOSE c_exam_req;
    
        BEGIN
            SELECT decode(flg_status,
                          pk_exam_constant.g_exam_pending,
                          nvl(dt_pend_req_tstz, g_sysdate_tstz),
                          dt_pend_req_tstz)
              INTO l_dt_req
              FROM exam_req
             WHERE id_exam_req = l_exam_req.id_exam_req;
        EXCEPTION
            WHEN no_data_found THEN
                l_dt_req := NULL;
        END;
    
        g_error := 'UPDATE EXAM_REQ';
        ts_exam_req.upd(id_exam_req_in      => l_exam_req.id_exam_req,
                        id_episode_in       => CASE
                                                   WHEN l_exam_req.id_episode IS NULL THEN
                                                    l_exam_req.id_episode_origin
                                               END,
                        dt_pend_req_tstz_in => l_dt_req,
                        rows_out            => l_rows_out_req);
    
        g_error := 'OPEN C_REQ';
        OPEN c_exam_req(l_hand_off_type);
        FETCH c_exam_req
            INTO l_exam_req;
        CLOSE c_exam_req;
    
        -- New validation for ADW
        IF l_dt_result < nvl(l_exam_req.start_time, nvl(l_exam_req.dt_pend_req_tstz, l_exam_req.dt_begin_tstz))
        THEN
            l_dt_result := nvl(l_exam_req.start_time, nvl(l_exam_req.dt_pend_req_tstz, l_exam_req.dt_begin_tstz));
        ELSIF g_sysdate_tstz < l_exam_req.dt_req_tstz
        THEN
            l_dt_result := l_exam_req.dt_req_tstz;
        END IF;
    
        IF l_exam_req.id_prof_performed IS NULL
        THEN
            ts_exam_req_det.upd(id_exam_req_det_in       => i_exam_req_det,
                                id_prof_performed_reg_in => i_prof.id,
                                dt_performed_reg_in      => l_dt_result,
                                id_prof_performed_in     => i_prof.id,
                                start_time_in            => l_dt_result,
                                end_time_in              => l_dt_result,
                                rows_out                 => l_rows_out_det);
        
            -- Remove ALERT's when they are behind schedule
            l_sys_alert_event.id_sys_alert := 33;
            l_sys_alert_event.id_episode   := l_exam_req.id_episode;
            l_sys_alert_event.id_record    := i_exam_req_det;
        
            g_error := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT';
            IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                    i_prof            => i_prof,
                                                    i_sys_alert_event => l_sys_alert_event,
                                                    o_error           => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            -- Remove ALERT's when they are behind schedule
            l_sys_alert_event.id_sys_alert := 39;
        
            g_error := 'CALL PK_ALERTS.DELETE_SYS_ALERT_EVENT';
            IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                    i_prof            => i_prof,
                                                    i_sys_alert_event => l_sys_alert_event,
                                                    o_error           => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        g_error       := 'GET SEQ_EXAM_RESULT.NEXTVAL';
        l_exam_result := ts_exam_result.next_key(sequence_in => 'SEQ_EXAM_RESULT');
    
        IF nvl(i_id_documentation.count, 0) > 0
           OR i_documentation_notes IS NOT NULL
        THEN
            g_error := 'CALL PK_TOUCH_OPTION.SET_EPIS_DOCUMENT_INTERNAL';
            IF NOT pk_touch_option.set_epis_document_internal(i_lang                  => i_lang,
                                                              i_prof                  => i_prof,
                                                              i_prof_cat_type         => pk_prof_utils.get_category(i_lang,
                                                                                                                    i_prof),
                                                              i_epis                  => l_exam_req.id_episode,
                                                              i_doc_area              => pk_exam_constant.g_doc_area_exam_result,
                                                              i_doc_template          => i_doc_template,
                                                              i_epis_documentation    => NULL,
                                                              i_flg_type              => i_flg_type,
                                                              i_id_documentation      => i_id_documentation,
                                                              i_id_doc_element        => i_id_doc_element,
                                                              i_id_doc_element_crit   => i_id_doc_element_crit,
                                                              i_value                 => i_value,
                                                              i_notes                 => i_documentation_notes,
                                                              i_id_epis_complaint     => NULL,
                                                              i_id_doc_element_qualif => i_id_doc_element_qualif,
                                                              i_epis_context          => l_exam_result,
                                                              o_epis_documentation    => l_epis_documentation,
                                                              o_error                 => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        g_error := 'INSERT EXAM_RESULT';
        ts_exam_result.ins(id_exam_result_in        => l_exam_result,
                           id_exam_result_parent_in => CASE
                                                           WHEN i_exam_result IS NOT NULL THEN
                                                            l_exam_result_parent.id_exam_result_parent
                                                           ELSE
                                                            NULL
                                                       END,
                           id_exam_req_det_in       => i_exam_req_det,
                           id_exam_in               => l_exam_req.id_exam,
                           id_patient_in            => i_patient,
                           id_episode_write_in      => i_episode,
                           id_institution_in        => i_prof.institution,
                           id_professional_in       => i_prof.id,
                           dt_exam_result_tstz_in   => l_dt_result,
                           id_result_status_in      => i_result_status,
                           id_abnormality_in        => i_abnormality,
                           notes_in                 => i_documentation_notes,
                           flg_type_in              => pk_prof_utils.get_category(i_lang, i_prof),
                           flg_result_origin_in     => i_flg_result_origin,
                           result_origin_notes_in   => i_result_origin_notes,
                           id_prof_read_in          => CASE
                                                           WHEN l_exam_req.id_prof_req = i_prof.id THEN
                                                            i_prof.id
                                                           ELSE
                                                            NULL
                                                       END,
                           dt_prof_read_tstz_in     => CASE
                                                           WHEN l_exam_req.id_prof_req = i_prof.id THEN
                                                            l_dt_result
                                                           ELSE
                                                            NULL
                                                       END,
                           id_epis_documentation_in => l_epis_documentation,
                           rows_out                 => l_rows_out_res);
    
        o_exam_result := l_exam_result;
    
        IF l_exam_req.id_prof_req = i_prof.id
        THEN
            IF l_exam_req.flg_status != pk_exam_constant.g_exam_read
            THEN
                g_error := 'CALL PK_EXAM_CORE.SET_EXAM_HISTORY';
                IF NOT pk_exam_core.set_exam_history(i_lang         => i_lang,
                                                     i_prof         => i_prof,
                                                     i_exam_req     => NULL,
                                                     i_exam_req_det => table_number(i_exam_req_det),
                                                     o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'UPDATE EXAM_REQ_DET';
                ts_exam_req_det.upd(id_exam_req_det_in     => i_exam_req_det,
                                    flg_status_in          => pk_exam_constant.g_exam_read,
                                    id_prof_last_update_in => i_prof.id,
                                    dt_last_update_tstz_in => g_sysdate_tstz,
                                    rows_out               => l_rows_out_det);
            
                l_result := TRUE;
            
                -- inserir em log de estados
                IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                        i_prof       => i_prof,
                                        i_id_episode => l_exam_req.id_episode,
                                        i_flg_status => pk_exam_constant.g_exam_read,
                                        i_id_record  => i_exam_req_det,
                                        i_flg_type   => pk_exam_constant.g_exam_type_det,
                                        o_error      => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'CALL PK_EXAM_EXTERNAL.UPDATE_TDE_TASK_STATE';
                IF NOT pk_exam_external.update_tde_task_state(i_lang         => i_lang,
                                                              i_prof         => i_prof,
                                                              i_exam_req_det => i_exam_req_det,
                                                              i_flg_action   => pk_exam_constant.g_exam_read,
                                                              o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        ELSE
            IF l_exam_req.flg_status != pk_exam_constant.g_exam_result
            THEN
                g_error := 'CALL PK_EXAM_CORE.SET_EXAM_HISTORY';
                IF NOT pk_exam_core.set_exam_history(i_lang         => i_lang,
                                                     i_prof         => i_prof,
                                                     i_exam_req     => NULL,
                                                     i_exam_req_det => table_number(i_exam_req_det),
                                                     o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'UPDATE EXAM_REQ_DET';
                ts_exam_req_det.upd(id_exam_req_det_in     => i_exam_req_det,
                                    flg_status_in          => pk_exam_constant.g_exam_result,
                                    id_prof_last_update_in => i_prof.id,
                                    dt_last_update_tstz_in => g_sysdate_tstz,
                                    rows_out               => l_rows_out_det);
            
                l_result := FALSE;
            
                -- inserir em log de estados
                IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                        i_prof       => i_prof,
                                        i_id_episode => l_exam_req.id_episode,
                                        i_flg_status => pk_exam_constant.g_exam_result,
                                        i_id_record  => i_exam_req_det,
                                        i_flg_type   => pk_exam_constant.g_exam_type_det,
                                        o_error      => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'CALL PK_EXAM_EXTERNAL.UPDATE_TDE_TASK_STATE';
                IF NOT pk_exam_external.update_tde_task_state(i_lang         => i_lang,
                                                              i_prof         => i_prof,
                                                              i_exam_req_det => i_exam_req_det,
                                                              i_flg_action   => pk_exam_constant.g_exam_result,
                                                              o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        g_error := 'CALL TO PK_IA_EVENT_IMAGE.EXAM_REQUEST_RESULTS';
        pk_ia_event_image.exam_request_results(i_id_exam_req_det => i_exam_req_det,
                                               i_id_institution  => i_prof.institution,
                                               i_flg_old_status  => l_exam_req.flg_status);
    
        -- Procurar detalhes do mm cabeçalho ainda sem resultado
        g_error := 'GET DETAIL STATUS';
        OPEN c_count(l_exam_req.id_exam_req);
        FETCH c_count
            INTO l_count;
        CLOSE c_count;
    
        IF nvl(l_count, 0) > 0
        THEN
            -- se encontra, cabeçalho fica 'parcial'
            l_status_req := pk_exam_constant.g_exam_partial;
        ELSE
            IF l_result
            THEN
                --RS 20080215 faltava o tratamento do cabeçalho
                l_status_req := pk_exam_constant.g_exam_read;
                -- senão, fica 'lido'
            ELSE
                l_status_req := pk_exam_constant.g_exam_result;
                -- senão, fica 'com resultado'
            END IF;
        END IF;
    
        g_error := 'UPDATE EXAM_REQ';
        ts_exam_req.upd(id_exam_req_in => l_exam_req.id_exam_req,
                        flg_status_in  => l_status_req,
                        rows_out       => l_rows_out_req);
    
        -- inserir em log de estados
        IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                i_prof       => i_prof,
                                i_id_episode => l_exam_req.id_episode,
                                i_flg_status => l_status_req,
                                i_id_record  => l_exam_req.id_exam_req,
                                i_flg_type   => pk_exam_constant.g_exam_type_req,
                                o_error      => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang         => i_lang,
                                      i_prof         => i_prof,
                                      i_table_name   => 'EXAM_REQ',
                                      i_list_columns => table_varchar('DT_PEND_REQ_TSTZ', 'FLG_STATUS'),
                                      i_rowids       => l_rows_out_req,
                                      o_error        => o_error);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_REQ_DET',
                                      i_rowids     => l_rows_out_det,
                                      o_error      => o_error);
    
        t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_RESULT',
                                      i_rowids     => l_rows_out_res,
                                      o_error      => o_error);
    
        IF i_flg_import.count > 0
        THEN
            FOR i IN 1 .. i_flg_import.count
            LOOP
                IF i_flg_import(i) = pk_exam_constant.g_yes
                THEN
                    g_error := 'CALL TO PK_DOC.CREATE_SAVEDOC_INTERNAL';
                    IF NOT pk_doc.create_savedoc_internal(i_id_doc             => i_id_doc(i),
                                                          i_lang               => i_lang,
                                                          i_prof               => i_prof,
                                                          i_patient            => i_patient,
                                                          i_episode            => l_exam_req.id_episode,
                                                          i_ext_req            => NULL,
                                                          i_doc_type           => nvl(i_doc_type(i), 999), --OTHER
                                                          i_desc_doc_type      => i_desc_doc_type(i),
                                                          i_num_doc            => NULL,
                                                          i_dt_doc             => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                i_prof,
                                                                                                                i_dt_doc(i),
                                                                                                                NULL),
                                                          i_dt_expire          => NULL,
                                                          i_dest               => i_dest(i),
                                                          i_desc_dest          => i_desc_dest(i),
                                                          i_ori_doc_type       => i_ori_doc_type(i),
                                                          i_desc_ori_doc_type  => i_desc_ori_doc_type(i),
                                                          i_original           => i_original(i),
                                                          i_desc_original      => i_desc_original(i),
                                                          i_btn                => NULL,
                                                          i_title              => i_title(i),
                                                          i_flg_sent_by        => NULL,
                                                          i_flg_received       => NULL,
                                                          i_prof_perf_by       => NULL,
                                                          i_desc_perf_by       => i_desc_perf_by(i),
                                                          i_author             => NULL,
                                                          i_specialty          => NULL,
                                                          i_doc_language       => NULL,
                                                          i_flg_publish        => NULL,
                                                          i_conf_code          => table_varchar(),
                                                          i_desc_conf_code     => table_varchar(),
                                                          i_code_coding_schema => table_varchar(),
                                                          i_conf_code_set      => table_varchar(),
                                                          i_desc_conf_code_set => table_varchar(),
                                                          o_error              => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    ts_exam_media_archive.ins(id_exam_req_det_in     => i_exam_req_det,
                                              id_exam_result_in      => l_exam_result,
                                              id_doc_external_in     => i_id_doc(i),
                                              flg_type_in            => pk_exam_constant.g_media_archive_exam_result,
                                              flg_status_in          => pk_exam_constant.g_active,
                                              id_prof_last_update_in => i_prof.id,
                                              dt_last_update_tstz_in => l_dt_result,
                                              rows_out               => l_rows_out);
                
                ELSE
                    ts_exam_media_archive.ins(id_exam_req_det_in     => i_exam_req_det,
                                              id_exam_result_in      => l_exam_result,
                                              id_doc_external_in     => i_id_doc(i),
                                              flg_type_in            => pk_exam_constant.g_media_archive_exam_result,
                                              flg_status_in          => pk_exam_constant.g_active,
                                              id_prof_last_update_in => i_prof.id,
                                              dt_last_update_tstz_in => l_dt_result,
                                              rows_out               => l_rows_out);
                END IF;
            END LOOP;
        END IF;
    
        l_sys_alert_event.id_sys_alert   := 3;
        l_sys_alert_event.id_software    := i_prof.software;
        l_sys_alert_event.id_institution := i_prof.institution;
        l_sys_alert_event.id_episode     := l_exam_req.id_episode;
        l_sys_alert_event.id_record      := l_exam_result;
        l_sys_alert_event.dt_record      := l_dt_result;
        l_sys_alert_event.id_room        := NULL;
        l_sys_alert_event.replace1       := 'EXAM.CODE_EXAM.' || l_exam_req.id_exam;
        l_sys_alert_event.replace2 := CASE
                                          WHEN i_abnormality IS NOT NULL
                                               AND i_abnormality != 7 THEN
                                           pk_exam_constant.g_exam_urgent
                                          ELSE
                                           l_exam_req.flg_priority
                                      END;
        l_sys_alert_event.id_prof_order  := nvl(l_exam_req.id_prof_order, l_exam_req.id_prof_req);
    
        --Insere evento na tabela de alertas                                  
        IF l_exam_req.id_prof_req != i_prof.id
        THEN
            l_sys_alert_event.id_professional := l_exam_req.id_prof_req;
        
            IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                    i_prof            => i_prof,
                                                    i_sys_alert_event => l_sys_alert_event,
                                                    i_flg_type_dest   => 'C',
                                                    o_error           => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        IF l_exam_req.id_prof_resp IS NOT NULL
        THEN
            FOR i IN 1 .. l_exam_req.id_prof_resp.count
            LOOP
                IF l_exam_req.id_prof_resp(i) != i_prof.id
                THEN
                    l_sys_alert_event.id_professional := l_exam_req.id_prof_resp(i);
                
                    IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            i_flg_type_dest   => 'C',
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END LOOP;
        END IF;
    
        IF l_exam_req.flg_type != pk_exam_constant.g_type_img
        THEN
            g_error         := 'GET DEFAULT ROOM';
            l_gener_barcode := pk_sysconfig.get_config('GENERATE_BARCODE_EXAM_RESULT', i_prof);
        
            IF l_gener_barcode = pk_exam_constant.g_yes
            THEN
                g_error := 'CALL TO PK_BARCODE.GENERATE_BARCODE';
                IF NOT pk_barcode.generate_barcode(i_lang         => i_lang,
                                                   i_barcode_type => 'E',
                                                   i_institution  => i_prof.institution,
                                                   i_software     => i_prof.software,
                                                   o_barcode      => l_barcode,
                                                   o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        IF pk_prof_utils.get_category(i_lang, i_prof) = pk_alert_constant.g_cat_type_technician
        THEN
            g_error := 'CALL TO PK_EXAMS.SET_TECHNICIAN_GRID_STATUS';
            IF NOT pk_exams.set_technician_grid_status(i_lang        => i_lang,
                                                       i_prof        => i_prof,
                                                       i_patient     => i_patient,
                                                       i_episode     => l_exam_req.id_episode,
                                                       i_exam_req    => l_exam_req.id_exam_req,
                                                       i_flg_contact => pk_exam_constant.g_in_technician,
                                                       o_error       => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        g_error := 'CALL TO SET_FIRST_OBS';
        IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                      i_id_episode          => l_exam_req.id_episode,
                                      i_pat                 => NULL,
                                      i_prof                => i_prof,
                                      i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                      i_dt_last_interaction => g_sysdate_tstz,
                                      i_dt_first_obs        => g_sysdate_tstz,
                                      o_error               => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'OPEN C_EPISODE_TYPE';
        OPEN c_episode_type(l_exam_req.id_episode);
        FETCH c_episode_type
            INTO l_episode_type;
        CLOSE c_episode_type;
    
        IF l_episode_type.id_epis_type IN (pk_exam_constant.g_episode_type_rad, pk_exam_constant.g_episode_type_exm)
        THEN
            g_error := 'OPEN C_EPISODE_EXAM';
            OPEN c_episode_exam(l_exam_req.id_episode);
            FETCH c_episode_exam
                INTO l_episode_exam;
            g_found := c_episode_exam%FOUND;
            CLOSE c_episode_exam;
        
            IF NOT g_found
            THEN
                IF NOT pk_visit.set_visit_end(i_lang          => i_lang,
                                              i_prof          => i_prof,
                                              i_prof_cat_type => pk_prof_utils.get_category(i_lang, i_prof),
                                              i_id_visit      => l_episode_type.id_visit,
                                              o_error         => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
        IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                  i_prof         => i_prof,
                                                  i_patient      => NULL,
                                                  i_episode      => l_exam_req.id_episode,
                                                  i_exam_req     => l_exam_req.id_exam_req,
                                                  i_exam_req_det => i_exam_req_det,
                                                  o_error        => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_RESULT',
                                              o_error);
            RETURN FALSE;
    END set_exam_result;

    FUNCTION set_exam_import_result
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_patient             IN exam_result.id_patient%TYPE,
        i_episode             IN exam_result.id_episode%TYPE,
        i_exam_req_det        IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_result_origin   IN exam_result.flg_result_origin%TYPE,
        i_result_origin_notes IN exam_result.result_origin_notes%TYPE,
        i_notes               IN table_varchar,
        i_external_doc        IN table_number,
        i_external_doc_cancel IN table_number,
        o_error               OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_req IS
            SELECT erd.id_exam, er.id_episode, erd.id_exam_req
              FROM exam_req_det erd, exam_req er
             WHERE erd.id_exam_req_det = i_exam_req_det
               AND erd.id_exam_req = er.id_exam_req;
    
        CURSOR c_episode_type(l_episode IN episode.id_episode%TYPE) IS
            SELECT e.id_epis_type, e.id_visit
              FROM episode e
             WHERE e.id_episode = l_episode;
    
        CURSOR c_episode_exam(l_episode IN episode.id_episode%TYPE) IS
            SELECT 'X'
              FROM exam_req er
             WHERE er.id_episode = l_episode
               AND er.flg_status NOT IN
                   (pk_exam_constant.g_exam_result, pk_exam_constant.g_exam_read, pk_exam_constant.g_exam_cancel);
    
        l_exam_req     c_exam_req%ROWTYPE;
        l_episode_type c_episode_type%ROWTYPE;
        l_episode_exam c_episode_exam%ROWTYPE;
    
        l_exam_result         exam_result.id_exam_result%TYPE;
        l_external_doc_cancel external_doc_cancel.id_external_doc_cancel%TYPE;
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        IF i_external_doc_cancel.count > 0
        THEN
            FOR i IN 1 .. i_external_doc_cancel.count
            LOOP
                g_error := 'GET SEQ_EXTERNAL_DOC_CANCEL.NEXTVAL';
                SELECT seq_external_doc_cancel.nextval
                  INTO l_external_doc_cancel
                  FROM dual;
            
                g_error := 'INSERT EXTERNAL_DOC_CANCEL';
                INSERT INTO external_doc_cancel
                    (id_external_doc_cancel, id_external_doc, id_professional_cancel, id_episode, dt_cancel)
                VALUES
                    (l_external_doc_cancel, i_external_doc_cancel(i), i_prof.id, i_episode, g_sysdate_tstz);
            END LOOP;
        END IF;
    
        FOR i IN 1 .. i_external_doc.count
        LOOP
        
            g_error := 'CALL SET_EXAM_RESULT';
            IF NOT pk_exam_core.set_exam_result(i_lang                  => i_lang,
                                                i_prof                  => i_prof,
                                                i_patient               => i_patient,
                                                i_episode               => i_episode,
                                                i_exam_req_det          => i_exam_req_det,
                                                i_exam_result           => NULL,
                                                i_dt_result             => NULL,
                                                i_result_status         => NULL,
                                                i_abnormality           => NULL,
                                                i_flg_result_origin     => i_flg_result_origin,
                                                i_result_origin_notes   => i_result_origin_notes,
                                                i_flg_import            => table_varchar(pk_exam_constant.g_no),
                                                i_id_doc                => NULL,
                                                i_doc_type              => NULL,
                                                i_desc_doc_type         => NULL,
                                                i_dt_doc                => NULL,
                                                i_dest                  => NULL,
                                                i_desc_dest             => NULL,
                                                i_ori_doc_type          => NULL,
                                                i_desc_ori_doc_type     => NULL,
                                                i_original              => NULL,
                                                i_desc_original         => NULL,
                                                i_title                 => NULL,
                                                i_desc_perf_by          => NULL,
                                                i_doc_template          => NULL,
                                                i_flg_type              => pk_touch_option.g_flg_edition_type_new,
                                                i_id_documentation      => table_number(),
                                                i_id_doc_element        => table_number(),
                                                i_id_doc_element_crit   => table_number(),
                                                i_value                 => table_varchar(),
                                                i_id_doc_element_qualif => table_table_number(),
                                                i_documentation_notes   => i_notes(i),
                                                o_exam_result           => l_exam_result,
                                                o_error                 => o_error)
            
            THEN
                RAISE g_other_exception;
            END IF;
        
            IF i_external_doc.count > 0
            THEN
                FOR i IN 1 .. i_external_doc.count
                LOOP
                    ts_exam_result.upd(id_exam_result_in  => l_exam_result,
                                       id_external_doc_in => i_external_doc(i),
                                       rows_out           => l_rows_out);
                
                    UPDATE external_doc a
                       SET a.flg_state = 'F'
                     WHERE a.id_external_doc = i_external_doc(i);
                END LOOP;
            END IF;
        END LOOP;
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_RESULT',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        g_error := 'OPEN C_REQ';
        OPEN c_exam_req;
        FETCH c_exam_req
            INTO l_exam_req;
        CLOSE c_exam_req;
    
        g_error := 'CALL TO SET_FIRST_OBS';
        IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                      i_id_episode          => l_exam_req.id_episode,
                                      i_pat                 => NULL,
                                      i_prof                => i_prof,
                                      i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                      i_dt_last_interaction => g_sysdate_tstz,
                                      i_dt_first_obs        => g_sysdate_tstz,
                                      o_error               => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'OPEN C_EPISODE_TYPE';
        OPEN c_episode_type(l_exam_req.id_episode);
        FETCH c_episode_type
            INTO l_episode_type;
        CLOSE c_episode_type;
    
        IF l_episode_type.id_epis_type IN (pk_exam_constant.g_episode_type_rad, pk_exam_constant.g_episode_type_exm)
        THEN
            g_error := 'OPEN C_EPISODE_EXAM';
            OPEN c_episode_exam(l_exam_req.id_episode);
            FETCH c_episode_exam
                INTO l_episode_exam;
            g_found := c_episode_exam%FOUND;
            CLOSE c_episode_exam;
        
            IF NOT g_found
            THEN
                IF NOT pk_visit.set_visit_end(i_lang          => i_lang,
                                              i_prof          => i_prof,
                                              i_prof_cat_type => pk_prof_utils.get_category(i_lang, i_prof),
                                              i_id_visit      => l_episode_type.id_visit,
                                              o_error         => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
        IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                  i_prof         => i_prof,
                                                  i_patient      => NULL,
                                                  i_episode      => l_exam_req.id_episode,
                                                  i_exam_req     => l_exam_req.id_exam_req,
                                                  i_exam_req_det => i_exam_req_det,
                                                  o_error        => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'UPDATE EXAM_REQ_DET';
        ts_exam_req_det.upd(id_exam_req_det_in     => i_exam_req_det,
                            id_prof_last_update_in => i_prof.id,
                            dt_last_update_tstz_in => g_sysdate_tstz,
                            rows_out               => l_rows_out);
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_REQ_DET',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_IMPORT_RESULT',
                                              o_error);
            RETURN FALSE;
    END set_exam_import_result;

    FUNCTION set_exam_doc_associated
    (
        i_lang                 IN language.id_language%TYPE,
        i_prof                 IN profissional,
        i_patient              IN exam_result.id_patient%TYPE,
        i_episode              IN exam_result.id_episode%TYPE,
        i_exam_req_det         IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_import           IN table_varchar,
        i_id_doc               IN table_number,
        i_tbl_ds_internal_name IN table_varchar DEFAULT NULL,
        i_tbl_val              IN table_table_varchar DEFAULT NULL,
        i_tbl_real_val         IN table_table_varchar DEFAULT NULL,
        o_error                OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
        IF i_flg_import.count > 0
        THEN
            FOR i IN 1 .. i_flg_import.count
            LOOP
                IF i_flg_import(i) = pk_exam_constant.g_yes
                THEN
                    g_error := 'CALL TO PK_DOC_UX.CREATE_SAVEDOC';
                    IF NOT pk_doc_ux.create_savedoc(i_lang                 => i_lang,
                                                    i_prof                 => i_prof,
                                                    i_id_episode           => i_episode,
                                                    i_id_patient           => i_patient,
                                                    i_id_doc               => i_id_doc(i),
                                                    i_ext_req              => NULL,
                                                    i_tbl_ds_internal_name => i_tbl_ds_internal_name,
                                                    i_tbl_val              => i_tbl_val,
                                                    i_tbl_real_val         => i_tbl_real_val,
                                                    o_error                => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    ts_exam_media_archive.ins(id_exam_req_det_in     => i_exam_req_det,
                                              id_exam_result_in      => NULL,
                                              id_doc_external_in     => i_id_doc(i),
                                              flg_type_in            => pk_exam_constant.g_media_archive_exam_doc,
                                              flg_status_in          => pk_exam_constant.g_active,
                                              id_prof_last_update_in => i_prof.id,
                                              dt_last_update_tstz_in => g_sysdate_tstz,
                                              rows_out               => l_rows_out);
                
                ELSE
                    ts_exam_media_archive.ins(id_exam_req_det_in     => i_exam_req_det,
                                              id_exam_result_in      => NULL,
                                              id_doc_external_in     => i_id_doc(i),
                                              flg_type_in            => pk_exam_constant.g_media_archive_exam_doc,
                                              flg_status_in          => pk_exam_constant.g_active,
                                              id_prof_last_update_in => i_prof.id,
                                              dt_last_update_tstz_in => g_sysdate_tstz,
                                              rows_out               => l_rows_out);
                END IF;
            END LOOP;
        
            g_error := 'CALL PROCESS_INSERT';
            t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_MEDIA_ARCHIVE',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            g_error := 'UPDATE EXAM_REQ_DET';
            ts_exam_req_det.upd(id_exam_req_det_in     => i_exam_req_det,
                                id_prof_last_update_in => i_prof.id,
                                dt_last_update_tstz_in => g_sysdate_tstz,
                                rows_out               => l_rows_out);
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ_DET',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_DOC_ASSOCIATED',
                                              o_error);
            RETURN FALSE;
    END set_exam_doc_associated;

    FUNCTION set_exam_history
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_exam_req     IN exam_req.id_exam_req%TYPE,
        i_exam_req_det IN table_number,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_diagnosis_list(l_exam_req_det exam_req_det.id_exam_req_det%TYPE) IS
            SELECT mrd.id_mcdt_req_diagnosis
              FROM mcdt_req_diagnosis mrd
             WHERE mrd.id_exam_req_det = l_exam_req_det
               AND nvl(mrd.flg_status, '@') != pk_alert_constant.g_cancelled;
    
        l_exam_req     exam_req%ROWTYPE;
        l_exam_req_det exam_req_det%ROWTYPE;
    
        l_exam_req_hist     exam_req_hist%ROWTYPE;
        l_exam_req_det_hist exam_req_det_hist%ROWTYPE;
    
        l_diagnosis_list analysis_req_det_hist.id_diagnosis_list%TYPE;
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        IF i_exam_req IS NOT NULL
        THEN
            g_error := 'GET EXAM_REQ';
            SELECT er.*
              INTO l_exam_req
              FROM exam_req er
             WHERE er.id_exam_req = i_exam_req;
        
            --Duplicate row to history
            l_exam_req_hist.dt_exam_req_hist       := g_sysdate_tstz;
            l_exam_req_hist.id_exam_req            := l_exam_req.id_exam_req;
            l_exam_req_hist.id_patient             := l_exam_req.id_patient;
            l_exam_req_hist.id_episode             := l_exam_req.id_episode;
            l_exam_req_hist.id_episode_origin      := l_exam_req.id_episode_origin;
            l_exam_req_hist.id_episode_destination := l_exam_req.id_episode_destination;
            l_exam_req_hist.id_prev_episode        := l_exam_req.id_prev_episode;
            l_exam_req_hist.id_visit               := l_exam_req.id_visit;
            l_exam_req_hist.id_institution         := l_exam_req.id_institution;
            l_exam_req_hist.flg_time               := l_exam_req.flg_time;
            l_exam_req_hist.flg_status             := l_exam_req.flg_status;
            l_exam_req_hist.id_prof_req            := l_exam_req.id_prof_req;
            l_exam_req_hist.dt_req_tstz            := l_exam_req.dt_req_tstz;
            l_exam_req_hist.dt_begin_tstz          := l_exam_req.dt_begin_tstz;
            l_exam_req_hist.dt_schedule_tstz       := l_exam_req.dt_schedule_tstz;
            l_exam_req_hist.dt_pend_req_tstz       := l_exam_req.dt_pend_req_tstz;
            l_exam_req_hist.priority               := l_exam_req.priority;
            l_exam_req_hist.id_exec_institution    := l_exam_req.id_exec_institution;
            l_exam_req_hist.barcode                := l_exam_req.barcode;
            l_exam_req_hist.id_prof_authorize      := l_exam_req.id_prof_authorize;
            l_exam_req_hist.id_prof_approve        := l_exam_req.id_prof_approve;
            l_exam_req_hist.id_schedule            := l_exam_req.id_schedule;
            l_exam_req_hist.id_sched_consult       := l_exam_req.id_sched_consult;
            l_exam_req_hist.notes                  := l_exam_req.notes;
            l_exam_req_hist.notes_tech             := l_exam_req.notes_tech;
            l_exam_req_hist.notes_patient          := l_exam_req.notes_patient;
            l_exam_req_hist.id_prof_cancel         := l_exam_req.id_prof_cancel;
            l_exam_req_hist.dt_cancel_tstz         := l_exam_req.dt_cancel_tstz;
            l_exam_req_hist.id_cancel_reason       := l_exam_req.id_cancel_reason;
            l_exam_req_hist.notes_cancel           := l_exam_req.notes_cancel;
            l_exam_req_hist.flg_contact            := l_exam_req.flg_contact;
            l_exam_req_hist.dt_contact             := l_exam_req.dt_contact;
            l_exam_req_hist.id_exam_group          := l_exam_req.id_exam_group;
            l_exam_req_hist.id_prof_last_update    := l_exam_req.id_prof_last_update;
            l_exam_req_hist.dt_last_update_tstz    := l_exam_req. dt_last_update_tstz;
        
            g_error := 'INSERT EXAM_REQ_HIST';
            ts_exam_req_hist.ins(rec_in => l_exam_req_hist);
        END IF;
    
        g_error := 'OPEN LOOP';
        FOR i IN 1 .. i_exam_req_det.count
        LOOP
            IF i_exam_req_det(i) IS NOT NULL
            THEN
                g_error := 'GET EXAM_REQ_DET';
                SELECT erd.*
                  INTO l_exam_req_det
                  FROM exam_req_det erd
                 WHERE erd.id_exam_req_det = i_exam_req_det(i);
            
                IF l_exam_req_det.flg_status != pk_exam_constant.g_exam_predefined
                THEN
                    l_diagnosis_list := NULL;
                    g_error          := 'CREATE DIAGNOSIS LIST';
                    FOR rec IN c_diagnosis_list(i_exam_req_det(i))
                    LOOP
                        IF l_diagnosis_list IS NULL
                        THEN
                            l_diagnosis_list := rec.id_mcdt_req_diagnosis;
                        ELSE
                            l_diagnosis_list := l_diagnosis_list || ';' || rec.id_mcdt_req_diagnosis;
                        END IF;
                    END LOOP;
                
                    l_exam_req_det_hist.id_exam_req_det_hist   := ts_exam_req_det_hist.next_key('SEQ_EXAM_REQ_DET_HIST');
                    l_exam_req_det_hist.dt_exam_req_det_hist   := g_sysdate_tstz;
                    l_exam_req_det_hist.id_exam_req_det        := l_exam_req_det.id_exam_req_det;
                    l_exam_req_det_hist.id_exam_req            := l_exam_req_det.id_exam_req;
                    l_exam_req_det_hist.id_exam                := l_exam_req_det.id_exam;
                    l_exam_req_det_hist.id_exam_group          := l_exam_req_det.id_exam_group;
                    l_exam_req_det_hist.id_erd_parent          := l_exam_req_det.id_erd_parent;
                    l_exam_req_det_hist.flg_status             := l_exam_req_det.flg_status;
                    l_exam_req_det_hist.flg_referral           := l_exam_req_det.flg_referral;
                    l_exam_req_det_hist.dt_target_tstz         := l_exam_req_det.dt_target_tstz;
                    l_exam_req_det_hist.dt_final_target_tstz   := l_exam_req_det.dt_final_target_tstz;
                    l_exam_req_det_hist.dt_final_result_tstz   := l_exam_req_det.dt_final_result_tstz;
                    l_exam_req_det_hist.id_order_recurrence    := l_exam_req_det.id_order_recurrence;
                    l_exam_req_det_hist.flg_priority           := l_exam_req_det.flg_priority;
                    l_exam_req_det_hist.flg_prn                := l_exam_req_det.flg_prn;
                    l_exam_req_det_hist.prn_notes              := l_exam_req_det.prn_notes;
                    l_exam_req_det_hist.flg_fasting            := l_exam_req_det.flg_fasting;
                    l_exam_req_det_hist.id_clinical_purpose    := l_exam_req_det.id_clinical_purpose;
                    l_exam_req_det_hist.clinical_purpose_notes := l_exam_req_det.clinical_purpose_notes;
                    l_exam_req_det_hist.flg_laterality         := l_exam_req_det.flg_laterality;
                    l_exam_req_det_hist.flg_pre_req            := l_exam_req_det.flg_pre_req;
                    l_exam_req_det_hist.flg_location           := l_exam_req_det.flg_location;
                    l_exam_req_det_hist.id_room                := l_exam_req_det.id_room;
                    l_exam_req_det_hist.id_exec_institution    := l_exam_req_det.id_exec_institution;
                    l_exam_req_det_hist.id_movement            := l_exam_req_det.id_movement;
                    l_exam_req_det_hist.barcode                := l_exam_req_det.barcode;
                    l_exam_req_det_hist.notes                  := l_exam_req_det.notes;
                    l_exam_req_det_hist.notes_tech             := l_exam_req_det.notes_tech;
                    l_exam_req_det_hist.notes_patient          := l_exam_req_det.notes_patient;
                    l_exam_req_det_hist.id_exam_codification   := l_exam_req_det.id_exam_codification;
                    l_exam_req_det_hist.id_pat_health_plan     := l_exam_req_det.id_pat_health_plan;
                    l_exam_req_det_hist.id_pat_exemption       := l_exam_req_det.id_pat_exemption;
                    l_exam_req_det_hist.id_task_dependency     := l_exam_req_det.id_task_dependency;
                    l_exam_req_det_hist.id_cdr                 := l_exam_req_det.id_cdr;
                    l_exam_req_det_hist.id_pat_pregnancy       := l_exam_req_det.id_pat_pregnancy;
                    l_exam_req_det_hist.id_co_sign_order       := l_exam_req_det.id_co_sign_order;
                    l_exam_req_det_hist.id_prof_performed      := l_exam_req_det.id_prof_performed;
                    l_exam_req_det_hist.start_time             := l_exam_req_det.start_time;
                    l_exam_req_det_hist.end_time               := l_exam_req_det.end_time;
                    l_exam_req_det_hist.prof_dep_clin_serv     := l_exam_req_det.prof_dep_clin_serv;
                    l_exam_req_det_hist.id_epis_doc_perform    := l_exam_req_det.id_epis_doc_perform;
                    l_exam_req_det_hist.id_prof_performed_reg  := l_exam_req_det.id_prof_performed_reg;
                    l_exam_req_det_hist.dt_performed_reg       := l_exam_req_det.dt_performed_reg;
                    l_exam_req_det_hist.id_prof_cancel         := l_exam_req_det.id_prof_cancel;
                    l_exam_req_det_hist.dt_cancel_tstz         := l_exam_req_det.dt_cancel_tstz;
                    l_exam_req_det_hist.id_cancel_reason       := l_exam_req_det.id_cancel_reason;
                    l_exam_req_det_hist.notes_cancel           := l_exam_req_det.notes_cancel;
                    l_exam_req_det_hist.id_co_sign_cancel      := l_exam_req_det.id_co_sign_cancel;
                    l_exam_req_det_hist.flg_req_origin_module  := l_exam_req_det.flg_req_origin_module;
                    l_exam_req_det_hist.id_diagnosis_list      := l_diagnosis_list;
                    l_exam_req_det_hist.id_prof_last_update    := l_exam_req_det.id_prof_last_update;
                    l_exam_req_det_hist.dt_last_update_tstz    := l_exam_req_det.dt_last_update_tstz;
                    l_exam_req_det_hist.diagnosis_notes        := l_exam_req_det.diagnosis_notes;
                
                    l_exam_req_det_hist.operation_type := 'U';
                    l_exam_req_det_hist.operation_time := g_sysdate_tstz;
                    l_exam_req_det_hist.operation_user := i_prof.id;
                
                    g_error := 'INSERT INTO EXAM_REQ_DET_HIST';
                    ts_exam_req_det_hist.ins(rec_in => l_exam_req_det_hist);
                END IF;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_HISTORY',
                                              o_error);
            RETURN FALSE;
    END set_exam_history;

    FUNCTION set_exam_result_history
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_exam_result IN table_number,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_exam_result      exam_result%ROWTYPE;
        l_exam_result_hist exam_result_hist%ROWTYPE;
    
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        FOR i IN 1 .. i_exam_result.count
        LOOP
            g_error := 'GET EXAM_RESULT:' || i_exam_result(i);
            SELECT er.*
              INTO l_exam_result
              FROM exam_result er
             WHERE er.id_exam_result = i_exam_result(i);
        
            l_exam_result_hist.dt_exam_result_hist   := g_sysdate_tstz;
            l_exam_result_hist.id_exam_result        := l_exam_result.id_exam_result;
            l_exam_result_hist.id_exam_req_det       := l_exam_result.id_exam_req_det;
            l_exam_result_hist.id_exam               := l_exam_result.id_exam;
            l_exam_result_hist.id_patient            := l_exam_result.id_patient;
            l_exam_result_hist.id_episode            := l_exam_result.id_episode;
            l_exam_result_hist.id_episode_write      := l_exam_result.id_episode_write;
            l_exam_result_hist.id_institution        := l_exam_result.id_institution;
            l_exam_result_hist.id_professional       := l_exam_result.id_professional;
            l_exam_result_hist.dt_exam_result_tstz   := l_exam_result.dt_exam_result_tstz;
            l_exam_result_hist.flg_status            := l_exam_result.flg_status;
            l_exam_result_hist.id_result_status      := l_exam_result.id_result_status;
            l_exam_result_hist.id_abnormality        := l_exam_result.id_abnormality;
            l_exam_result_hist.notes                 := l_exam_result.notes;
            l_exam_result_hist.id_external_doc       := l_exam_result.id_external_doc;
            l_exam_result_hist.flg_type              := l_exam_result.flg_type;
            l_exam_result_hist.flg_result_origin     := l_exam_result.flg_result_origin;
            l_exam_result_hist.result_origin_notes   := l_exam_result.result_origin_notes;
            l_exam_result_hist.id_prof_mov_begin     := l_exam_result.id_prof_mov_begin;
            l_exam_result_hist.dt_mov_begin_tstz     := l_exam_result.dt_mov_begin_tstz;
            l_exam_result_hist.id_prof_mov_end       := l_exam_result.id_prof_mov_end;
            l_exam_result_hist.dt_mov_end_tstz       := l_exam_result.dt_mov_end_tstz;
            l_exam_result_hist.id_prof_read          := l_exam_result.id_prof_read;
            l_exam_result_hist.dt_prof_read_tstz     := l_exam_result.dt_prof_read_tstz;
            l_exam_result_hist.id_result_notes       := l_exam_result.id_result_notes;
            l_exam_result_hist.notes_result          := l_exam_result.notes_result;
            l_exam_result_hist.id_epis_documentation := l_exam_result.id_epis_documentation;
            l_exam_result_hist.flg_relevant          := l_exam_result.flg_relevant;
        
            g_error := 'INSERT INTO EXAM_RESULT_HIST';
            ts_exam_result_hist.ins(rec_in => l_exam_result_hist, handle_error_in => TRUE);
        
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_RESULT_HISTORY',
                                              o_error);
            RETURN FALSE;
    END set_exam_result_history;

    FUNCTION set_exam_status
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_exam_req_det    IN table_number,
        i_status          IN VARCHAR2,
        i_notes           IN table_varchar,
        i_notes_scheduler IN table_varchar,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_req(l_exam_req_det IN exam_req_det.id_exam_req_det%TYPE) IS
            SELECT er.id_exam_req,
                   erd.id_exam,
                   er.flg_time,
                   erd.flg_status,
                   decode(erd.id_movement,
                          NULL,
                          decode(edcs.flg_mov_pat, pk_exam_constant.g_no, NULL, erd.id_room),
                          NULL) id_room,
                   nvl(er.id_episode, er.id_episode_origin) id_episode,
                   er.id_patient
              FROM exam_req er,
                   exam_req_det erd,
                   (SELECT *
                      FROM exam_dep_clin_serv
                     WHERE flg_type = pk_exam_constant.g_exam_can_req
                       AND id_institution = i_prof.institution
                       AND id_software = i_prof.software) edcs
             WHERE erd.id_exam_req_det = l_exam_req_det
               AND erd.id_exam_req = er.id_exam_req
               AND erd.id_exam = edcs.id_exam(+);
    
        TYPE request_movement IS RECORD(
            id_room room.id_room%TYPE,
            id_mov  exam_req_det.id_movement%TYPE);
    
        TYPE rm IS TABLE OF request_movement INDEX BY BINARY_INTEGER;
        req_mov rm;
        k       NUMBER := 0;
    
        l_exam_req c_exam_req%ROWTYPE;
        l_status   exam_req.flg_status%TYPE;
    
        l_flg_profile profile_template.flg_profile%TYPE := nvl(pk_hand_off_core.get_flg_profile(i_lang, i_prof, NULL),
                                                               '#');
    
        l_flg_type            episode.id_epis_type%TYPE;
        l_flg_status          episode.flg_status%TYPE;
        l_episode_room        epis_info.id_room%TYPE;
        l_desc_room           VARCHAR2(1000 CHAR);
        l_dt_entrance_room    VARCHAR2(200 CHAR);
        l_dt_last_interaction VARCHAR2(50 CHAR);
        l_dt_movement         VARCHAR2(50 CHAR);
    
        l_id_mov  movement.id_movement%TYPE;
        l_req_mov BOOLEAN;
    
        l_flg_show  VARCHAR2(1 CHAR);
        l_msg_text  VARCHAR2(1000 CHAR);
        l_msg_title VARCHAR2(1000 CHAR);
        l_button    VARCHAR2(6 CHAR);
    
        l_sys_alert_event sys_alert_event%ROWTYPE;
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        FOR i IN 1 .. i_exam_req_det.count
        LOOP
            g_error := 'OPEN C_EXAM_REQ';
            OPEN c_exam_req(i_exam_req_det(i));
            FETCH c_exam_req
                INTO l_exam_req;
            CLOSE c_exam_req;
        
            IF i_status != l_exam_req.flg_status
               OR l_exam_req.flg_status != pk_exam_constant.g_exam_cancel
            THEN
                l_status := i_status;
            
                IF l_status = pk_exam_constant.g_exam_req
                THEN
                    IF l_exam_req.id_room IS NOT NULL
                    THEN
                        -- Verifica localização actual do doente
                        g_error := 'CALL TO PK_VISIT.GET_EPIS_INFO';
                        IF NOT pk_visit.get_epis_info(i_lang                => i_lang,
                                                      i_id_episode          => l_exam_req.id_episode,
                                                      i_prof                => i_prof,
                                                      o_flg_type            => l_flg_type,
                                                      o_flg_status          => l_flg_status,
                                                      o_id_room             => l_episode_room,
                                                      o_desc_room           => l_desc_room,
                                                      o_dt_entrance_room    => l_dt_entrance_room,
                                                      o_dt_last_interaction => l_dt_last_interaction,
                                                      o_dt_movement         => l_dt_movement,
                                                      o_error               => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    
                        g_error := 'CHECK EXAM ROOM';
                        IF nvl(l_episode_room, 0) != l_exam_req.id_room
                        THEN
                            -- localização actual do doente ñ é a sala de realização do exame
                            -- Verificar se já foi requisitado mov para essa sala, nesta mesma requisição
                            -- (se um detalhe já registado tem é realizado na mm sala)
                            g_error   := 'LOOP PREVIOUS REQ';
                            l_req_mov := TRUE;
                            l_id_mov  := NULL;
                        
                            IF k != 0
                            THEN
                                FOR j IN 1 .. k
                                LOOP
                                    IF req_mov(j).id_room = l_exam_req.id_room
                                    THEN
                                        -- Já foi requisitado mov p/ esta sala
                                        l_req_mov := FALSE;
                                        l_id_mov  := req_mov(j).id_mov;
                                        EXIT;
                                    END IF;
                                END LOOP;
                            END IF;
                        
                            IF l_req_mov
                            THEN
                                g_error := 'CALL TO PK_MOVEMENT.CREATE_MOVEMENT';
                                IF NOT pk_movement.call_create_movement(i_lang          => i_lang,
                                                                        i_episode       => l_exam_req.id_episode,
                                                                        i_prof          => i_prof,
                                                                        i_room          => l_exam_req.id_room,
                                                                        i_necessity     => NULL,
                                                                        i_dt_req_str    => pk_date_utils.date_send_tsz(i_lang,
                                                                                                                       g_sysdate_tstz,
                                                                                                                       i_prof),
                                                                        i_prof_cat_type => pk_prof_utils.get_category(i_lang,
                                                                                                                      i_prof),
                                                                        o_id_mov        => l_id_mov,
                                                                        o_flg_show      => l_flg_show,
                                                                        o_msg           => l_msg_text,
                                                                        o_msg_title     => l_msg_title,
                                                                        o_button        => l_button,
                                                                        o_error         => o_error)
                                THEN
                                    RAISE g_other_exception;
                                END IF;
                            
                                -- Guarda-se os IDs dos movimentos p/ associar a outros detalhes c/ a
                                -- mesma sala de realização de exame
                                g_error := 'SET MOV VECTOR';
                                k := k + 1;
                                req_mov(k).id_room := l_exam_req.id_room;
                                req_mov(k).id_mov := l_id_mov;
                            END IF;
                        ELSE
                            l_status := pk_exam_constant.g_exam_toexec;
                        END IF;
                    
                        g_error := 'UPDATE EXAM_REQ_DET';
                        ts_exam_req_det.upd(id_exam_req_det_in => i_exam_req_det(i),
                                            id_movement_in     => l_id_mov,
                                            id_movement_nin    => FALSE,
                                            rows_out           => l_rows_out);
                    
                        -------------            
                        -- Alertas --           
                        -------------            
                        --Verifica se o evento é passível de gerar alertas
                        IF l_id_mov IS NOT NULL
                        THEN
                        
                            l_sys_alert_event.id_sys_alert    := 33;
                            l_sys_alert_event.id_software     := i_prof.software;
                            l_sys_alert_event.id_institution  := i_prof.institution;
                            l_sys_alert_event.id_episode      := l_exam_req.id_episode;
                            l_sys_alert_event.id_record       := i_exam_req_det(i);
                            l_sys_alert_event.dt_record       := g_sysdate_tstz;
                            l_sys_alert_event.id_professional := NULL;
                            l_sys_alert_event.id_room         := l_exam_req.id_room;
                            l_sys_alert_event.replace1        := 'EXAM.CODE_EXAM.' || l_exam_req.id_exam;
                            l_sys_alert_event.replace2        := pk_sysconfig.get_config('ALERT_EXAM_TIMEOUT', i_prof);
                        
                            --Insere evento na tabela de alertas
                            g_error := 'INSERT INTO SYS_ALERT_EVENT';
                            IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                                    i_prof            => i_prof,
                                                                    i_sys_alert_event => l_sys_alert_event,
                                                                    i_flg_type_dest   => 'R',
                                                                    o_error           => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            
                g_error := 'CALL PK_EXAM_CORE.SET_EXAM_HISTORY';
                IF NOT pk_exam_core.set_exam_history(i_lang         => i_lang,
                                                     i_prof         => i_prof,
                                                     i_exam_req     => l_exam_req.id_exam_req,
                                                     i_exam_req_det => table_number(i_exam_req_det(i)),
                                                     o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'UPDATE EXAM_REQ';
                ts_exam_req.upd(id_exam_req_in         => l_exam_req.id_exam_req,
                                flg_status_in          => l_status,
                                id_prof_cancel_in      => CASE
                                                              WHEN l_status = pk_exam_constant.g_exam_cancel THEN
                                                               i_prof.id
                                                          END,
                                dt_cancel_tstz_in      => CASE
                                                              WHEN l_status = pk_exam_constant.g_exam_cancel THEN
                                                               g_sysdate_tstz
                                                          END,
                                dt_pend_req_tstz_in    => CASE l_status
                                                              WHEN pk_exam_constant.g_exam_pending THEN
                                                               g_sysdate_tstz
                                                              ELSE
                                                               NULL
                                                          END,
                                dt_pend_req_tstz_nin   => FALSE,
                                id_prof_last_update_in => CASE l_flg_profile
                                                              WHEN pk_prof_utils.g_flg_profile_template_student THEN
                                                               CASE i_status
                                                                   WHEN pk_exam_constant.g_exam_draft THEN
                                                                    i_prof.id
                                                                   ELSE
                                                                    NULL
                                                               END
                                                              ELSE
                                                               i_prof.id
                                                          END,
                                dt_last_update_tstz_in => CASE l_flg_profile
                                                              WHEN pk_prof_utils.g_flg_profile_template_student THEN
                                                               CASE i_status
                                                                   WHEN pk_exam_constant.g_exam_draft THEN
                                                                    g_sysdate_tstz
                                                                   ELSE
                                                                    NULL
                                                               END
                                                              ELSE
                                                               g_sysdate_tstz
                                                          END,
                                rows_out               => l_rows_out);
            
                IF l_exam_req.id_episode IS NOT NULL
                THEN
                    -- inserir em log de estados
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => l_exam_req.id_episode,
                                            i_flg_status => l_status,
                                            i_id_record  => l_exam_req.id_exam_req,
                                            i_flg_type   => pk_exam_constant.g_exam_type_req,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                g_error := 'CALL PROCESS_UPDATE';
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'EXAM_REQ',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
            
                l_rows_out := NULL;
            
                g_error := 'UPDATE EXAM_REQ_DET';
                ts_exam_req_det.upd(id_exam_req_det_in     => i_exam_req_det(i),
                                    flg_status_in          => l_status,
                                    notes_in               => CASE
                                                                  WHEN l_status = pk_exam_constant.g_exam_toexec THEN
                                                                   CASE
                                                                       WHEN i_notes IS NOT NULL
                                                                            AND i_notes.count > 0 THEN
                                                                        i_notes(i)
                                                                       ELSE
                                                                        NULL
                                                                   END
                                                                  ELSE
                                                                   NULL
                                                              END,
                                    id_prof_cancel_in      => CASE
                                                                  WHEN l_status = pk_exam_constant.g_exam_cancel THEN
                                                                   i_prof.id
                                                              END,
                                    notes_cancel_in        => CASE
                                                                  WHEN l_status = pk_exam_constant.g_exam_cancel THEN
                                                                   CASE
                                                                       WHEN i_notes IS NOT NULL
                                                                            AND i_notes.count > 0 THEN
                                                                        i_notes(i)
                                                                       ELSE
                                                                        NULL
                                                                   END
                                                                  ELSE
                                                                   NULL
                                                              END,
                                    dt_cancel_tstz_in      => CASE
                                                                  WHEN l_status = pk_exam_constant.g_exam_cancel THEN
                                                                   g_sysdate_tstz
                                                              END,
                                    notes_scheduler_in     => CASE
                                                                  WHEN l_status IN (pk_exam_constant.g_exam_sched,
                                                                                    pk_exam_constant.g_exam_wtg_tde) THEN
                                                                   CASE
                                                                       WHEN i_notes_scheduler IS NOT NULL
                                                                            AND i_notes_scheduler.count > 0 THEN
                                                                        i_notes_scheduler(i)
                                                                       ELSE
                                                                        NULL
                                                                   END
                                                                  ELSE
                                                                   NULL
                                                              END,
                                    id_prof_last_update_in => CASE l_flg_profile
                                                                  WHEN pk_prof_utils.g_flg_profile_template_student THEN
                                                                   CASE i_status
                                                                       WHEN pk_exam_constant.g_exam_draft THEN
                                                                        i_prof.id
                                                                       ELSE
                                                                        NULL
                                                                   END
                                                                  ELSE
                                                                   i_prof.id
                                                              END,
                                    dt_last_update_tstz_in => CASE l_flg_profile
                                                                  WHEN pk_prof_utils.g_flg_profile_template_student THEN
                                                                   CASE i_status
                                                                       WHEN pk_exam_constant.g_exam_draft THEN
                                                                        g_sysdate_tstz
                                                                       ELSE
                                                                        NULL
                                                                   END
                                                                  ELSE
                                                                   g_sysdate_tstz
                                                              END,
                                    rows_out               => l_rows_out);
            
                IF l_exam_req.id_episode IS NOT NULL
                THEN
                    -- inserir em log de estados
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => l_exam_req.id_episode,
                                            i_flg_status => l_status,
                                            i_id_record  => i_exam_req_det(i),
                                            i_flg_type   => pk_exam_constant.g_exam_type_det,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                g_error := 'CALL PROCESS_UPDATE';
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'EXAM_REQ_DET',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
            
                g_error := 'CALL PK_EXAM_EXTERNAL.UPDATE_TDE_TASK_STATE';
                IF NOT pk_exam_external.update_tde_task_state(i_lang         => i_lang,
                                                              i_prof         => i_prof,
                                                              i_exam_req_det => i_exam_req_det(i),
                                                              i_flg_action   => l_status,
                                                              o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
                IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                          i_prof         => i_prof,
                                                          i_patient      => l_exam_req.id_patient,
                                                          i_episode      => l_exam_req.id_episode,
                                                          i_exam_req     => l_exam_req.id_exam_req,
                                                          i_exam_req_det => i_exam_req_det(i),
                                                          o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                IF l_exam_req.id_episode IS NOT NULL
                THEN
                    g_error := 'CALL TO SET_FIRST_OBS';
                    IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                                  i_id_episode          => l_exam_req.id_episode,
                                                  i_pat                 => NULL,
                                                  i_prof                => i_prof,
                                                  i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                                  i_dt_last_interaction => g_sysdate_tstz,
                                                  i_dt_first_obs        => g_sysdate_tstz,
                                                  o_error               => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    IF l_status IN (pk_exam_constant.g_exam_req, pk_exam_constant.g_exam_toexec)
                    THEN
                        g_error := 'CALL TO PK_VISIT.UPDATE_EPIS_TASK';
                        IF NOT pk_visit.upd_epis_info_exam(i_lang                => i_lang,
                                                      i_id_episode          => l_exam_req.id_episode,
                                                      i_id_prof             => i_prof,
                                                      i_dt_first_image_exec => CASE
                                                                                   WHEN l_status = pk_exam_constant.g_exam_toexec THEN
                                                                                    pk_date_utils.date_send_tsz(i_lang, g_sysdate_tstz, i_prof)
                                                                                   ELSE
                                                                                    NULL
                                                                               END,
                                                      i_dt_first_image_req  => CASE
                                                                                   WHEN l_status = pk_exam_constant.g_exam_req THEN
                                                                                    pk_date_utils.date_send_tsz(i_lang, g_sysdate_tstz, i_prof)
                                                                                   ELSE
                                                                                    NULL
                                                                               END,
                                                      i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                                      o_error               => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_STATUS',
                                              o_error);
            RETURN FALSE;
    END set_exam_status;

    FUNCTION set_exam_status_read
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_exam_req_det  IN table_number,
        i_exam_result   IN table_table_number,
        i_flg_relevant  IN table_table_varchar,
        i_diagnosis     IN pk_edis_types.table_in_epis_diagnosis DEFAULT NULL,
        i_result_notes  IN exam_result.id_result_notes%TYPE,
        i_notes_result  IN exam_result.notes_result%TYPE,
        i_cancel_reason IN cancel_reason.id_cancel_reason%TYPE DEFAULT NULL,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_req(l_exam_req_det exam_result.id_exam_req_det%TYPE) IS
            SELECT erd.id_exam_req,
                   er.id_patient,
                   er.id_episode,
                   erd.flg_status,
                   er.id_prof_req,
                   cso.id_prof_ordered_by id_prof_order,
                   pk_hand_off_core.is_prof_responsible_current(i_lang,
                                                                i_prof,
                                                                er.id_episode,
                                                                pk_prof_utils.get_category(i_lang, i_prof),
                                                                NULL) id_prof_resp,
                   pk_episode.get_epis_type(i_lang, er.id_episode) id_epis_type
              FROM exam_req_det erd,
                   exam_req er,
                   TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                  i_prof,
                                                                  er.id_episode,
                                                                  NULL,
                                                                  NULL,
                                                                  NULL,
                                                                  l_exam_req_det)) cso
             WHERE erd.id_exam_req_det = l_exam_req_det
               AND er.id_exam_req = erd.id_exam_req
               AND erd.id_co_sign_order = cso.id_co_sign_hist(+);
    
        CURSOR c_exam_result(l_exam_req_det exam_req_det.id_exam_req_det%TYPE) IS
            SELECT er.id_exam_result, er.id_result_notes, er.notes_result, er.id_prof_read, er.dt_prof_read_tstz
              FROM exam_result er
             WHERE er.id_exam_req_det = l_exam_req_det
             ORDER BY er.dt_exam_result_tstz DESC;
    
        CURSOR c_count(l_exam_req exam_req.id_exam_req%TYPE) IS
            SELECT COUNT(*)
              FROM exam_req_det erd
             WHERE erd.id_exam_req = l_exam_req
               AND erd.flg_status NOT IN (pk_exam_constant.g_exam_read, pk_exam_constant.g_exam_cancel);
    
        l_exam_req    c_exam_req%ROWTYPE;
        l_exam_result c_exam_result%ROWTYPE;
    
        l_count NUMBER;
    
        l_id_visit   visit.id_visit%TYPE;
        l_id_episode episode.id_episode%TYPE;
    
        l_reading_permission sys_config.value%TYPE := pk_sysconfig.get_config('EXAMS_READING_PERMISSION_TO_ALL', i_prof);
    
        l_sys_alert_event sys_alert_event%ROWTYPE;
        l_exam_alert      table_number := table_number(1, 2, 12, 33, 39);
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        FOR i IN 1 .. i_exam_req_det.count
        LOOP
            g_error := 'OPEN C_EXAM_REQ';
            OPEN c_exam_req(i_exam_req_det(i));
            FETCH c_exam_req
                INTO l_exam_req;
            CLOSE c_exam_req;
        
            -- prof q acede é o q requisitou ou o responsável pelo episódio
            g_error := 'CALL TO PK_VISIT.GET_ACTIVE_VIS_EPIS';
            IF NOT pk_visit.get_active_vis_epis(i_lang           => i_lang,
                                                i_id_pat         => l_exam_req.id_patient,
                                                i_id_institution => i_prof.institution,
                                                i_prof           => i_prof,
                                                o_id_visit       => l_id_visit,
                                                o_id_episode     => l_id_episode,
                                                o_error          => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            -- Doente tem episódio activo
            IF l_id_episode IS NULL
            THEN
                l_id_episode := l_exam_req.id_episode;
            END IF;
        
            g_error := 'OPEN C_EXAM_RESULT';
            OPEN c_exam_result(i_exam_req_det(i));
            FETCH c_exam_result
                INTO l_exam_result;
            CLOSE c_exam_result;
        
            g_error := 'INSERT INTO EXAM_RESULT_HIST';
            IF NOT pk_exam_core.set_exam_result_history(i_lang        => i_lang,
                                                        i_prof        => i_prof,
                                                        i_exam_result => table_number(l_exam_result.id_exam_result),
                                                        o_error       => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            IF i_cancel_reason IS NULL
            THEN
            
                FOR j IN 1 .. i_exam_result(i).count
                LOOP
                    g_error := 'UPDATE EXAM_RESULT';
                    ts_exam_result.upd(id_exam_result_in => i_exam_result(i) (j),
                                       flg_relevant_in   => i_flg_relevant(i) (j),
                                       rows_out          => l_rows_out);
                END LOOP;
            
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'EXAM_RESULT',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
            
                g_error := 'UPDATE EXAM_RESULT';
                ts_exam_result.upd(id_exam_result_in    => l_exam_result.id_exam_result,
                                   id_episode_in        => l_id_episode,
                                   id_episode_nin       => FALSE,
                                   id_prof_read_in      => i_prof.id,
                                   dt_prof_read_tstz_in => g_sysdate_tstz,
                                   id_result_notes_in   => i_result_notes,
                                   notes_result_in      => i_notes_result,
                                   rows_out             => l_rows_out);
            
            END IF;
        
            l_rows_out := NULL;
            g_error    := 'UPDATE EXAM_REQ_DET';
            ts_exam_req_det.upd(id_exam_req_det_in     => i_exam_req_det(i),
                                id_prof_last_update_in => i_prof.id,
                                dt_last_update_tstz_in => g_sysdate_tstz,
                                id_cancel_reason_in    => i_cancel_reason,
                                id_cancel_reason_nin   => FALSE,
                                rows_out               => l_rows_out);
        
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ_DET',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            l_rows_out := NULL;
        
            g_error := 'UPDATE EXAM_REQ';
            ts_exam_req.upd(id_exam_req_in         => l_exam_req.id_exam_req,
                            dt_last_update_tstz_in => g_sysdate_tstz,
                            rows_out               => l_rows_out);
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            IF (i_diagnosis IS NOT NULL AND i_diagnosis.count != 0)
            THEN
                g_error := 'CALL TO PK_DIAGNOSIS.SET_MCDT_REQ_DIAG_NO_COMMIT';
                IF NOT pk_diagnosis.set_mcdt_req_diag_no_commit(i_lang             => i_lang,
                                                                i_prof             => i_prof,
                                                                i_epis             => l_exam_req.id_episode,
                                                                i_diag             => i_diagnosis(i),
                                                                i_exam_req         => NULL,
                                                                i_analysis_req     => NULL,
                                                                i_interv_presc     => NULL,
                                                                i_exam_req_det     => NULL,
                                                                i_analysis_req_det => NULL,
                                                                i_interv_presc_det => NULL,
                                                                i_exam_result      => l_exam_result.id_exam_result,
                                                                i_epis_diag_status => pk_diagnosis.g_ed_flg_status_co,
                                                                o_error            => o_error)
                THEN
                    IF o_error.err_desc IS NOT NULL
                    THEN
                        g_error_code := o_error.ora_sqlerrm;
                        g_error      := o_error.err_action;
                    
                        RAISE g_user_exception;
                    ELSE
                        g_error_code := o_error.ora_sqlerrm;
                        g_error      := o_error.err_action;
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        
            IF ((l_exam_req.flg_status = pk_exam_constant.g_exam_result OR
               l_exam_req.flg_status = pk_exam_constant.g_exam_read) AND -- Marcar como lido só se
               ((i_prof.id IN (l_exam_req.id_prof_req, l_exam_req.id_prof_order, l_exam_req.id_prof_resp)) OR
               (pk_prof_utils.get_category(i_lang, i_prof) = pk_alert_constant.g_cat_type_doc AND
               l_exam_req.id_epis_type IN (pk_exam_constant.g_episode_type_rad, pk_exam_constant.g_episode_type_exm)) OR
               (l_reading_permission = pk_exam_constant.g_yes AND
               pk_prof_utils.get_category(i_lang, i_prof) != pk_alert_constant.g_cat_type_technician)))
               OR i_cancel_reason IS NOT NULL
            THEN
                -- prof q acede é o q requisitou ou o responsável pelo episódio
                IF l_exam_req.flg_status = pk_exam_constant.g_exam_result
                THEN
                    g_error := 'CALL PK_EXAM_CORE.SET_EXAM_HISTORY';
                    IF NOT pk_exam_core.set_exam_history(i_lang         => i_lang,
                                                         i_prof         => i_prof,
                                                         i_exam_req     => NULL,
                                                         i_exam_req_det => table_number(i_exam_req_det(i)),
                                                         o_error        => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    l_rows_out := NULL;
                    g_error    := 'UPDATE EXAM_REQ_DET';
                    ts_exam_req_det.upd(id_exam_req_det_in     => i_exam_req_det(i),
                                        flg_status_in          => pk_exam_constant.g_exam_read,
                                        id_prof_last_update_in => i_prof.id,
                                        dt_last_update_tstz_in => g_sysdate_tstz,
                                        rows_out               => l_rows_out);
                
                    t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'EXAM_REQ_DET',
                                                  i_rowids     => l_rows_out,
                                                  o_error      => o_error);
                
                    -- inserir em log de estados
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => l_exam_req.id_episode,
                                            i_flg_status => pk_exam_constant.g_exam_read,
                                            i_id_record  => i_exam_req_det(i),
                                            i_flg_type   => pk_exam_constant.g_exam_type_det,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    g_error := 'CALL PK_EXAM_EXTERNAL.UPDATE_TDE_TASK_STATE';
                    IF NOT pk_exam_external.update_tde_task_state(i_lang         => i_lang,
                                                                  i_prof         => i_prof,
                                                                  i_exam_req_det => i_exam_req_det(i),
                                                                  i_flg_action   => pk_exam_constant.g_exam_read,
                                                                  o_error        => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    -- Procurar detalhes da mm requisição não lidos
                    g_error := 'GET DETAIL STATUS';
                    OPEN c_count(l_exam_req.id_exam_req);
                    FETCH c_count
                        INTO l_count;
                    CLOSE c_count;
                
                    l_rows_out := NULL;
                
                    g_error := 'UPDATE EXAM_REQ';
                    ts_exam_req.upd(id_exam_req_in         => l_exam_req.id_exam_req,
                                    flg_status_in          => CASE
                                                                  WHEN nvl(l_count, 0) > 0 THEN
                                                                   pk_exam_constant.g_exam_read_partial -- 'parcialmente lido'
                                                                  ELSE
                                                                   pk_exam_constant.g_exam_read -- 'lido'
                                                              END,
                                    dt_last_update_tstz_in => g_sysdate_tstz,
                                    rows_out               => l_rows_out);
                
                    -- inserir em log de estados
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => l_exam_req.id_episode,
                                            i_flg_status => pk_exam_constant.g_exam_read,
                                            i_id_record  => l_exam_req.id_exam_req,
                                            i_flg_type   => pk_exam_constant.g_exam_type_req,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    g_error := 'CALL PROCESS_UPDATE';
                    t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'EXAM_REQ',
                                                  i_rowids     => l_rows_out,
                                                  o_error      => o_error);
                END IF;
            
                l_sys_alert_event.id_episode := l_id_episode;
                l_sys_alert_event.id_record  := i_exam_req_det(i);
            
                FOR i IN 1 .. l_exam_alert.count
                LOOP
                    l_sys_alert_event.id_sys_alert := l_exam_alert(i);
                    IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END LOOP;
            
                FOR rec IN c_exam_result(i_exam_req_det(i))
                LOOP
                    l_sys_alert_event.id_sys_alert := 3;
                    l_sys_alert_event.id_record    := rec.id_exam_result;
                    IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END LOOP;
            
                g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
                IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                          i_prof         => i_prof,
                                                          i_patient      => l_exam_req.id_patient,
                                                          i_episode      => l_exam_req.id_episode,
                                                          i_exam_req     => l_exam_req.id_exam_req,
                                                          i_exam_req_det => i_exam_req_det(i),
                                                          o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'CALL TO SET_FIRST_OBS';
                IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                              i_id_episode          => NULL,
                                              i_pat                 => NULL,
                                              i_prof                => i_prof,
                                              i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                              i_dt_last_interaction => g_sysdate_tstz,
                                              i_dt_first_obs        => g_sysdate_tstz,
                                              o_error               => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_STATUS_READ',
                                              o_error);
            RETURN FALSE;
    END set_exam_status_read;

    FUNCTION set_exam_date
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_exam_req        IN exam_req.id_exam_req%TYPE,
        i_dt_begin        IN VARCHAR2,
        i_notes_scheduler IN VARCHAR2,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam IS
            SELECT er.id_patient,
                   nvl(er.id_episode, er.id_episode_origin) id_episode,
                   erd.id_exam,
                   erd.id_exam_req_det,
                   er.dt_begin_tstz,
                   er.dt_pend_req_tstz,
                   er.dt_req_tstz
              FROM exam_req er, exam_req_det erd
             WHERE er.id_exam_req = i_exam_req
               AND erd.id_exam_req = er.id_exam_req;
    
        l_dt_begin TIMESTAMP WITH LOCAL TIME ZONE;
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        l_dt_begin := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin, NULL);
    
        IF l_dt_begin IS NOT NULL
        THEN
            g_error := 'UPDATE EXAM_REQ';
            ts_exam_req.upd(id_exam_req_in         => i_exam_req,
                            flg_status_in          => pk_exam_constant.g_exam_sched,
                            dt_begin_tstz_in       => l_dt_begin,
                            id_prof_last_update_in => i_prof.id,
                            dt_last_update_tstz_in => g_sysdate_tstz,
                            rows_out               => l_rows_out);
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            l_rows_out := NULL;
        
            FOR r_exam IN c_exam
            LOOP
                g_error := 'CALL PK_EXAM_CORE.SET_EXAM_HISTORY';
                IF NOT pk_exam_core.set_exam_history(i_lang         => i_lang,
                                                     i_prof         => i_prof,
                                                     i_exam_req     => NULL,
                                                     i_exam_req_det => table_number(r_exam.id_exam_req_det),
                                                     o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'UPDATE EXAM_REQ_DET';
                ts_exam_req_det.upd(id_exam_req_det_in     => r_exam.id_exam_req_det,
                                    flg_status_in          => pk_exam_constant.g_exam_sched,
                                    dt_target_tstz_in      => l_dt_begin,
                                    notes_scheduler_in     => i_notes_scheduler,
                                    id_prof_last_update_in => i_prof.id,
                                    dt_last_update_tstz_in => g_sysdate_tstz,
                                    rows_out               => l_rows_out);
            
                g_error := 'CALL PROCESS_UPDATE';
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'EXAM_REQ_DET',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
            
                IF r_exam.id_episode IS NOT NULL
                THEN
                    -- inserir em log de estados
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => r_exam.id_episode,
                                            i_flg_status => pk_exam_constant.g_exam_sched,
                                            i_id_record  => r_exam.id_exam_req_det,
                                            i_flg_type   => pk_exam_constant.g_exam_type_det,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                g_error := 'CALL PK_EXAM_EXTERNAL.UPDATE_TDE_TASK_STATE';
                IF NOT pk_exam_external.update_tde_task_state(i_lang         => i_lang,
                                                              i_prof         => i_prof,
                                                              i_exam_req_det => r_exam.id_exam_req_det,
                                                              i_flg_action   => pk_exam_constant.g_exam_sched,
                                                              o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
                IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                          i_prof         => i_prof,
                                                          i_patient      => r_exam.id_patient,
                                                          i_episode      => r_exam.id_episode,
                                                          i_exam_req     => i_exam_req,
                                                          i_exam_req_det => r_exam.id_exam_req_det,
                                                          o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                IF r_exam.id_episode IS NOT NULL
                THEN
                    g_error := 'CALL TO SET_FIRST_OBS';
                    IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                                  i_id_episode          => r_exam.id_episode,
                                                  i_pat                 => NULL,
                                                  i_prof                => i_prof,
                                                  i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                                  i_dt_last_interaction => g_sysdate_tstz,
                                                  i_dt_first_obs        => g_sysdate_tstz,
                                                  o_error               => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END LOOP;
        
        ELSE
            g_error_code := 'EXAM_M011';
            g_error      := pk_message.get_message(i_lang, 'EXAM_M011');
            RAISE g_user_exception;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              g_error_code,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_DATE',
                                              'U',
                                              g_error,
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_DATE',
                                              o_error);
            RETURN FALSE;
    END set_exam_date;

    FUNCTION set_exam_questionnaire
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_episode       IN episode.id_episode%TYPE,
        i_exam_req_det  IN exam_req_det.id_exam_req_det%TYPE,
        i_questionnaire IN table_number,
        i_response      IN table_varchar,
        i_notes         IN table_varchar,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_aux table_varchar2;
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        g_error := 'LOOP I_QUESTIONNAIRE';
        FOR i IN 1 .. i_questionnaire.count
        LOOP
            IF i_response(i) IS NOT NULL
            THEN
                l_aux := pk_utils.str_split(i_response(i), '|');
            
                FOR j IN 1 .. l_aux.count
                LOOP
                    g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE 1';
                    INSERT INTO exam_question_response
                        (id_exam_question_response,
                         id_episode,
                         id_exam_req_det,
                         flg_time,
                         id_questionnaire,
                         id_response,
                         notes,
                         id_prof_last_update,
                         dt_last_update_tstz)
                    VALUES
                        (seq_exam_question_response.nextval,
                         i_episode,
                         i_exam_req_det,
                         pk_exam_constant.g_exam_cq_before_execute,
                         i_questionnaire(i),
                         to_number(l_aux(j)),
                         i_notes(i),
                         i_prof.id,
                         g_sysdate_tstz);
                END LOOP;
            ELSE
                g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE 2';
                INSERT INTO exam_question_response
                    (id_exam_question_response,
                     id_episode,
                     id_exam_req_det,
                     flg_time,
                     id_questionnaire,
                     id_response,
                     notes,
                     id_prof_last_update,
                     dt_last_update_tstz)
                VALUES
                    (seq_exam_question_response.nextval,
                     i_episode,
                     i_exam_req_det,
                     pk_exam_constant.g_exam_cq_before_execute,
                     i_questionnaire(i),
                     NULL,
                     i_notes(i),
                     i_prof.id,
                     g_sysdate_tstz);
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'SET_EXAM_QUESTIONNAIRE',
                                              o_error);
            pk_utils.undo_changes;
            RETURN FALSE;
    END set_exam_questionnaire;

    FUNCTION update_exam_order
    (
        i_lang                    IN language.id_language%TYPE, --1
        i_prof                    IN profissional,
        i_episode                 IN episode.id_episode%TYPE,
        i_exam_req                IN exam_req.id_exam_req%TYPE,
        i_exam_req_det            IN table_number, --5
        i_exam                    IN table_number,
        i_flg_time                IN table_varchar,
        i_dt_begin                IN table_varchar,
        i_priority                IN table_varchar,
        i_flg_prn                 IN table_varchar, --10
        i_notes_prn               IN table_varchar,
        i_flg_fasting             IN table_varchar,
        i_notes                   IN table_varchar,
        i_notes_scheduler         IN table_varchar,
        i_notes_technician        IN table_varchar, --15
        i_notes_patient           IN table_varchar,
        i_diagnosis_notes         IN table_varchar,
        i_diagnosis               IN pk_edis_types.table_in_epis_diagnosis,
        i_laterality              IN table_varchar,
        i_exec_room               IN table_number, --20
        i_exec_institution        IN table_number,
        i_clinical_purpose        IN table_number,
        i_clinical_purpose_notes  IN table_varchar,
        i_codification            IN table_number,
        i_health_plan             IN table_number, --25
        i_exemption               IN table_number,
        i_prof_order              IN table_number,
        i_dt_order                IN table_varchar,
        i_order_type              IN table_number,
        i_clinical_question       IN table_table_number, --30
        i_response                IN table_table_varchar,
        i_clinical_question_notes IN table_table_varchar,
        o_error                   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_exam_req               exam_req%ROWTYPE;
        l_exam_req_det           exam_req_det%ROWTYPE;
        l_exam_question_response exam_question_response%ROWTYPE;
    
        l_status_det        exam_req_det.flg_status%TYPE;
        l_dt_begin          exam_req.dt_begin_tstz%TYPE;
        l_dt_schedule       exam_req.dt_schedule_tstz %TYPE;
        l_flg_location      exam_req_det.flg_location%TYPE;
        l_exam_codification exam_req_det.id_exam_codification%TYPE;
        l_exam_flg_type     exam.flg_type%TYPE;
    
        l_id_co_sign      co_sign.id_co_sign%TYPE;
        l_id_co_sign_hist co_sign_hist.id_co_sign_hist%TYPE;
    
        l_count PLS_INTEGER := 0;
    
        l_diagnosis           table_number := table_number();
        l_tbl_alert_diagnosis table_number := table_number();
        l_diagnosis_new       table_number := table_number();
        l_epis_diagnosis      table_varchar := table_varchar();
        l_tbl_diag_desc       table_varchar := table_varchar();
    
        l_clinical_question       table_number := table_number();
        l_response                table_varchar := table_varchar();
        l_clinical_question_notes table_varchar := table_varchar();
        l_aux                     table_varchar2;
    
        l_sys_alert_event sys_alert_event%ROWTYPE;
    
        l_rows_out table_varchar := table_varchar();
    
        FUNCTION get_sub_diag_table
        (
            i_tbl_diagnosis IN pk_edis_types.rec_in_epis_diagnosis,
            i_sub_diag_list IN table_number
        ) RETURN pk_edis_types.rec_in_epis_diagnosis IS
            l_ret      pk_edis_types.rec_in_epis_diagnosis;
            l_tbl_diag pk_edis_types.table_in_diagnosis;
        BEGIN
            l_ret := i_tbl_diagnosis;
        
            IF i_sub_diag_list.exists(1)
            THEN
                l_tbl_diag          := l_ret.tbl_diagnosis;
                l_ret.tbl_diagnosis := pk_edis_types.table_in_diagnosis();
            
                IF l_tbl_diag.exists(1)
                THEN
                    FOR j IN i_sub_diag_list.first .. i_sub_diag_list.last
                    LOOP
                        FOR i IN l_tbl_diag.first .. l_tbl_diag.last
                        LOOP
                            IF l_tbl_diag(i).id_diagnosis = i_sub_diag_list(j)
                            THEN
                                l_ret.tbl_diagnosis.extend;
                                l_ret.tbl_diagnosis(l_ret.tbl_diagnosis.count) := l_tbl_diag(i);
                                EXIT;
                            END IF;
                        END LOOP;
                    END LOOP;
                END IF;
            END IF;
        
            RETURN l_ret;
        END get_sub_diag_table;
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        g_error := 'CALL PK_EXAM_CORE.SET_EXAM_HISTORY';
        IF NOT pk_exam_core.set_exam_history(i_lang         => i_lang,
                                             i_prof         => i_prof,
                                             i_exam_req     => NULL,
                                             i_exam_req_det => i_exam_req_det,
                                             o_error        => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'OPEN LOOP';
        FOR i IN 1 .. i_exam_req_det.count
        LOOP
            g_error := 'GET EXAM_REQ_DET';
            SELECT erd.*
              INTO l_exam_req_det
              FROM exam_req_det erd
             WHERE erd.id_exam_req_det = i_exam_req_det(i);
        
            g_error := 'GET EXAM_REQ';
            SELECT er.*
              INTO l_exam_req
              FROM exam_req er
             WHERE er.id_exam_req = l_exam_req_det.id_exam_req;
        
            l_dt_begin := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin(i), NULL);
        
            -- exam_req_det status
            IF l_exam_req.flg_time != pk_exam_constant.g_flg_time_e
            THEN
                IF l_exam_req_det.flg_status NOT IN (pk_exam_constant.g_exam_req, pk_exam_constant.g_exam_pending)
                THEN
                    -- realização futura
                    l_status_det := pk_exam_constant.g_exam_pending;
                    l_dt_begin   := NULL;
                
                    IF l_exam_req.flg_time IN (pk_exam_constant.g_flg_time_b, pk_exam_constant.g_flg_time_d)
                       AND i_prof.software != pk_sysconfig.get_config('SOFTWARE_ID_CARE', i_prof)
                    THEN
                        -- realização entre consultas
                        l_status_det := pk_exam_constant.g_exam_tosched;
                        IF i_dt_begin(i) IS NOT NULL
                        THEN
                            -- sugestão do agendamento
                            l_dt_begin := NULL;
                            IF l_exam_req.flg_time = pk_exam_constant.g_flg_time_b
                            THEN
                                l_dt_schedule := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin(i), NULL);
                            END IF;
                        ELSE
                            l_dt_begin    := NULL;
                            l_dt_schedule := NULL;
                        END IF;
                    ELSE
                        l_dt_begin := NULL;
                    END IF;
                END IF;
            ELSE
                -- realização neste epis.
                IF i_episode IS NOT NULL
                THEN
                    IF pk_date_utils.trunc_insttimezone_str(i_prof, l_exam_req.dt_begin_tstz, 'MI') !=
                       pk_date_utils.trunc_insttimezone_str(i_prof, l_dt_begin, 'MI')
                    THEN
                        IF pk_sysconfig.get_config('REQ_NEXT_DAY', i_prof) = pk_exam_constant.g_no
                        THEN
                            IF pk_date_utils.trunc_insttimezone(i_prof, nvl(l_dt_begin, g_sysdate_tstz), 'DD') !=
                               pk_date_utils.trunc_insttimezone(i_prof, g_sysdate_tstz, 'DD')
                            THEN
                                g_error_code := 'EXAM_M010';
                                g_error      := pk_message.get_message(i_lang, i_prof, 'EXAM_M010');
                                RAISE g_user_exception;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            
                IF nvl(l_dt_begin, g_sysdate_tstz) > g_sysdate_tstz
                THEN
                    -- pendente
                    l_status_det := pk_exam_constant.g_exam_pending;
                ELSE
                    IF pk_date_utils.trunc_insttimezone_str(i_prof, l_exam_req.dt_begin_tstz, 'MI') !=
                       pk_date_utils.trunc_insttimezone_str(i_prof, l_dt_begin, 'MI')
                    THEN
                        l_dt_begin := g_sysdate_tstz;
                    END IF;
                
                    l_status_det := pk_exam_constant.g_exam_req;
                END IF;
            END IF;
        
            IF i_exec_institution(i) IS NOT NULL
            THEN
                IF i_exec_institution(i) != i_prof.institution
                THEN
                    l_status_det := pk_exam_constant.g_exam_exterior;
                
                    l_flg_location := pk_exam_constant.g_exam_location_exterior;
                ELSE
                    IF i_flg_prn(i) = pk_exam_constant.g_yes
                    THEN
                        l_status_det := pk_exam_constant.g_exam_sos;
                    END IF;
                    l_flg_location := pk_exam_constant.g_exam_location_interior;
                END IF;
            ELSE
                IF i_flg_prn(i) = pk_exam_constant.g_yes
                THEN
                    l_status_det := pk_exam_constant.g_exam_sos;
                END IF;
                l_flg_location := pk_exam_constant.g_exam_location_interior;
            END IF;
        
            IF l_exam_req_det.flg_status IN (pk_exam_constant.g_exam_predefined, pk_exam_constant.g_exam_draft)
               OR l_status_det IS NULL
            THEN
                l_status_det := l_exam_req_det.flg_status;
            END IF;
        
            --If the round is null but l_dt_target is available the the information of the round must be cleaned
            IF pk_date_utils.trunc_insttimezone_str(i_prof, l_exam_req.dt_begin_tstz, 'MI') =
               pk_date_utils.trunc_insttimezone_str(i_prof, l_dt_begin, 'MI')
            THEN
                l_dt_begin := NULL;
            END IF;
        
            IF l_exam_req.id_exam_req IS NOT NULL
               OR l_status_det IN (pk_exam_constant.g_exam_predefined, pk_exam_constant.g_exam_draft)
            THEN
                g_error := 'UPDATE EXAM_REQ';
                ts_exam_req.upd(id_exam_req_in      => l_exam_req_det.id_exam_req,
                                flg_time_in         => CASE
                                                           WHEN i_flg_time IS NOT NULL
                                                                AND i_flg_time.count > 0 THEN
                                                            i_flg_time(i)
                                                           ELSE
                                                            l_exam_req.flg_time
                                                       END,
                                flg_status_in       => l_status_det,
                                dt_begin_tstz_in    => l_dt_begin,
                                dt_schedule_tstz_in => l_dt_schedule,
                                dt_pend_req_tstz_in => CASE
                                                           WHEN l_status_det = pk_exam_constant.g_exam_pending THEN
                                                            NULL
                                                           ELSE
                                                            l_exam_req.dt_pend_req_tstz
                                                       END,
                                priority_in         => i_priority(i),
                                rows_out            => l_rows_out);
            
                g_error := 'PROCESS_UPDATE EXAM_REQ';
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'EXAM_REQ',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
            
                IF i_episode IS NOT NULL
                THEN
                    --Insert log of statuses
                    g_error := 'CALL INS. TI_LOG';
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => i_episode,
                                            i_flg_status => l_status_det,
                                            i_id_record  => l_exam_req_det.id_exam_req,
                                            i_flg_type   => pk_exam_constant.g_exam_type_req,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        
            l_rows_out := NULL;
        
            BEGIN
                SELECT ec.id_exam_codification
                  INTO l_exam_codification
                  FROM exam_codification ec
                 WHERE ec.id_codification = i_codification(i)
                   AND ec.id_exam = l_exam_req_det.id_exam
                   AND ec.flg_available = pk_exam_constant.g_available;
            EXCEPTION
                WHEN no_data_found THEN
                    l_exam_codification := NULL;
            END;
        
            g_error := 'GET EXAM.FLG_TYPE';
            SELECT e.flg_type
              INTO l_exam_flg_type
              FROM exam e
             WHERE e.id_exam = l_exam_req_det.id_exam;
        
            IF l_exam_req_det.id_co_sign_order IS NOT NULL
               OR i_order_type(i) IS NOT NULL
            THEN
                IF i_order_type(i) IS NOT NULL
                THEN
                    g_error := 'CALL PK_CO_SIGN_API.SET_PENDING_CO_SIGN_TASK';
                    IF NOT pk_co_sign_api.set_pending_co_sign_task(i_lang                   => i_lang,
                                                              i_prof                   => i_prof,
                                                              i_episode                => i_episode,
                                                              i_id_co_sign_hist        => l_exam_req_det.id_co_sign_order,
                                                              i_id_task_type           => CASE
                                                                                              WHEN l_exam_flg_type =
                                                                                                   pk_exam_constant.g_type_img THEN
                                                                                               pk_alert_constant.g_task_imaging_exams
                                                                                              ELSE
                                                                                               pk_alert_constant.g_task_other_exams
                                                                                          END,
                                                              i_cosign_def_action_type => pk_co_sign_api.g_cosign_action_def_add,
                                                              i_id_task                => i_exam_req_det(i),
                                                              i_id_task_group          => i_exam_req_det(i),
                                                              i_id_order_type          => i_order_type(i),
                                                              i_id_prof_created        => i_prof.id,
                                                              i_id_prof_ordered_by     => i_prof_order(i),
                                                              i_dt_created             => g_sysdate_tstz,
                                                              i_dt_ordered_by          => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                        i_prof,
                                                                                                                        i_dt_order(i),
                                                                                                                        NULL),
                                                              o_id_co_sign             => l_id_co_sign,
                                                              o_id_co_sign_hist        => l_id_co_sign_hist,
                                                              o_error                  => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                ELSE
                    g_error := 'CALL PK_CO_SIGN_API.SET_TASK_OUTDATED';
                    IF NOT pk_co_sign_api.set_task_outdated(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_episode         => i_episode,
                                                            i_id_co_sign      => NULL,
                                                            i_id_co_sign_hist => l_exam_req_det.id_co_sign_order,
                                                            i_dt_update       => g_sysdate_tstz,
                                                            o_id_co_sign_hist => l_id_co_sign_hist,
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        
            g_error := 'UPDATE INTO EXAM_REQ_DET';
            ts_exam_req_det.upd(id_exam_req_det_in         => i_exam_req_det(i),
                                id_exam_in                 => CASE
                                                                  WHEN i_exam IS NOT NULL
                                                                       AND i_exam.count > 0 THEN
                                                                   i_exam(i)
                                                              END,
                                flg_status_in              => l_status_det,
                                dt_target_tstz_in          => l_dt_begin,
                                flg_priority_in            => i_priority(i),
                                flg_prn_in                 => i_flg_prn(i),
                                prn_notes_in               => i_notes_prn(i),
                                prn_notes_nin              => FALSE,
                                flg_fasting_in             => i_flg_fasting(i),
                                id_clinical_purpose_in     => i_clinical_purpose(i),
                                id_clinical_purpose_nin    => FALSE,
                                clinical_purpose_notes_in  => i_clinical_purpose_notes(i),
                                clinical_purpose_notes_nin => FALSE,
                                flg_laterality_in          => i_laterality(i),
                                flg_location_in            => l_flg_location,
                                id_room_in                 => i_exec_room(i),
                                id_room_nin                => FALSE,
                                id_exec_institution_in     => i_exec_institution(i),
                                notes_in                   => i_notes(i),
                                notes_nin                  => FALSE,
                                notes_scheduler_in         => i_notes_scheduler(i),
                                notes_scheduler_nin        => FALSE,
                                notes_tech_in              => i_notes_technician(i),
                                notes_tech_nin             => FALSE,
                                notes_patient_in           => i_notes_patient(i),
                                notes_patient_nin          => FALSE,
                                id_exam_codification_in    => l_exam_codification,
                                id_pat_health_plan_in      => i_health_plan(i),
                                id_pat_health_plan_nin     => FALSE,
                                id_pat_exemption_in        => i_exemption(i),
                                id_pat_exemption_nin       => FALSE,
                                id_co_sign_order_in        => l_id_co_sign_hist,
                                id_co_sign_order_nin       => FALSE,
                                id_prof_last_update_in     => i_prof.id,
                                id_prof_last_update_nin    => FALSE,
                                dt_last_update_tstz_in     => g_sysdate_tstz,
                                dt_last_update_tstz_nin    => FALSE,
                                diagnosis_notes_in         => CASE
                                                                  WHEN i_diagnosis_notes.exists(i) THEN
                                                                   i_diagnosis_notes(i)
                                                                  ELSE
                                                                   NULL
                                                              END,
                                diagnosis_notes_nin        => FALSE,
                                rows_out                   => l_rows_out);
        
            g_error := 'PROCESS_UPDATE EXAM_REQ_DET';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ_DET',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            g_error := 'CALL PK_EXAMS_EXTERNAL_API_DB.UPDATE_TDE_TASK_STATE';
            IF NOT pk_exams_external_api_db.update_tde_task_state(i_lang         => i_lang,
                                                                  i_prof         => i_prof,
                                                                  i_exam_req_det => i_exam_req_det(i),
                                                                  i_flg_action   => l_status_det,
                                                                  o_error        => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            IF i_episode IS NOT NULL
            THEN
                --Insert log of statuses
                g_error := 'CALL INS. TI_LOG';
                IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                        i_prof       => i_prof,
                                        i_id_episode => i_episode,
                                        i_flg_status => l_status_det,
                                        i_id_record  => i_exam_req_det(i),
                                        i_flg_type   => pk_exam_constant.g_exam_type_det,
                                        o_error      => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            g_error := 'CALL TO PK_IA_EVENT_IMAGE.EXAM_REQUEST_UPDATE';
            pk_ia_event_image.exam_request_update(i_id_exam_req_det => i_exam_req_det(i),
                                                  i_id_institution  => i_prof.institution,
                                                  i_flg_old_status  => l_exam_req_det.flg_status);
        
            g_error     := 'VALIDATE DIAGNOSIS';
            l_diagnosis := table_number();
            IF i_diagnosis(i).tbl_diagnosis IS NOT NULL
            THEN
                IF i_diagnosis(i).tbl_diagnosis.count > 0
                THEN
                    FOR j IN i_diagnosis(i).tbl_diagnosis.first .. i_diagnosis(i).tbl_diagnosis.last
                    LOOP
                        IF i_diagnosis(i).tbl_diagnosis(j).id_diagnosis IS NOT NULL
                            OR i_diagnosis(i).tbl_diagnosis(j).id_diagnosis != -1
                        THEN
                            l_diagnosis.extend;
                            l_diagnosis(l_diagnosis.count) := i_diagnosis(i).tbl_diagnosis(j).id_diagnosis;
                        
                            l_tbl_alert_diagnosis.extend;
                            l_tbl_alert_diagnosis(l_tbl_alert_diagnosis.count) := i_diagnosis(i).tbl_diagnosis(j).id_alert_diagnosis;
                        
                            l_tbl_diag_desc.extend();
                            l_tbl_diag_desc(l_tbl_diag_desc.count) := i_diagnosis(i).tbl_diagnosis(j).desc_diagnosis;
                        END IF;
                    END LOOP;
                END IF;
            END IF;
            --Counts not null records
            g_error := 'COUNT EPIS_DIAGNOSIS';
            SELECT COUNT(*)
              INTO l_count
              FROM (SELECT /*+opt_estimate(table t rows=1)*/
                     *
                      FROM TABLE(l_diagnosis) t);
        
            --Cancels previously associated diagnosis that don't apply
            IF l_count > 0
            THEN
                g_error := 'CANCEL MCTD_REQ_DIAGNOSIS 1';
                UPDATE mcdt_req_diagnosis
                   SET flg_status     = pk_alert_constant.g_cancelled,
                       id_prof_cancel = i_prof.id,
                       dt_cancel_tstz = g_sysdate_tstz
                 WHERE (id_mcdt_req_diagnosis IN
                       (SELECT mrd.id_mcdt_req_diagnosis
                           FROM mcdt_req_diagnosis mrd
                           JOIN epis_diagnosis ed
                             ON ed.id_epis_diagnosis = mrd.id_epis_diagnosis
                           LEFT JOIN (SELECT /*+ opt_estimate(table t rows=1) */
                                      column_value, rownum AS rn
                                       FROM TABLE(l_tbl_diag_desc) t) t_desc
                             ON t_desc.column_value = ed.desc_epis_diagnosis
                          WHERE mrd.id_exam_req_det = i_exam_req_det(i)
                            AND mrd.flg_status != pk_alert_constant.g_cancelled
                            AND ((t_desc.column_value IS NULL AND ed.desc_epis_diagnosis IS NOT NULL) OR
                                (mrd.id_alert_diagnosis NOT IN
                                (SELECT /*+ opt_estimate(table t rows=1) */
                                    *
                                     FROM TABLE(l_tbl_alert_diagnosis)) AND ed.desc_epis_diagnosis IS NULL))));
            ELSE
                g_error := 'CANCEL MCTD_REQ_DIAGNOSIS 2';
                UPDATE mcdt_req_diagnosis
                   SET flg_status     = pk_alert_constant.g_cancelled,
                       id_prof_cancel = i_prof.id,
                       dt_cancel_tstz = g_sysdate_tstz
                 WHERE id_exam_req_det = i_exam_req_det(i)
                   AND flg_status != pk_alert_constant.g_cancelled;
            END IF;
        
            g_error := 'I_DIAGNOSIS LOOP';
            IF i_diagnosis(i).tbl_diagnosis IS NOT NULL
            THEN
                IF i_diagnosis(i).tbl_diagnosis IS NOT NULL
                THEN
                    IF i_diagnosis(i).tbl_diagnosis.count > 0
                    THEN
                        g_error := 'CALL PK_DIAGNOSIS.CONCAT_DIAG_ID';
                        l_epis_diagnosis.extend;
                        l_epis_diagnosis := pk_diagnosis.concat_diag_id(i_lang             => i_lang,
                                                                        i_prof             => i_prof,
                                                                        i_exam_req_det     => i_exam_req_det(i),
                                                                        i_analysis_req_det => NULL,
                                                                        i_interv_presc_det => NULL,
                                                                        i_type             => 'E');
                    
                        l_count := 0;
                        IF l_epis_diagnosis IS NOT NULL
                           AND l_epis_diagnosis.count > 0
                        THEN
                            --Verifies if diagnosis exist
                            g_error := 'SELECT COUNT(*)';
                            SELECT COUNT(*)
                              INTO l_count
                              FROM mcdt_req_diagnosis mrd
                             WHERE mrd.id_exam_req_det = i_exam_req_det(i)
                               AND nvl(mrd.flg_status, '@') != pk_alert_constant.g_cancelled
                               AND mrd.id_diagnosis IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                         *
                                                          FROM TABLE(l_diagnosis) t)
                               AND mrd.id_epis_diagnosis IN (SELECT /*+opt_estimate (table t rows=1)*/
                                                              *
                                                               FROM TABLE(l_epis_diagnosis) t);
                        END IF;
                    
                        IF l_count = 0
                        THEN
                            --Inserts new diagnosis code
                            g_error := 'CALL TO PK_DIAGNOSIS.SET_MCDT_REQ_DIAGNOSIS';
                            IF NOT pk_diagnosis.set_mcdt_req_diag_no_commit(i_lang             => i_lang,
                                                                            i_prof             => i_prof,
                                                                            i_epis             => i_episode,
                                                                            i_diag             => i_diagnosis(i),
                                                                            i_exam_req         => l_exam_req_det.id_exam_req,
                                                                            i_analysis_req     => NULL,
                                                                            i_interv_presc     => NULL,
                                                                            i_exam_req_det     => i_exam_req_det(i),
                                                                            i_analysis_req_det => NULL,
                                                                            i_interv_presc_det => NULL,
                                                                            o_error            => o_error)
                            THEN
                                IF o_error.err_desc IS NOT NULL
                                THEN
                                    g_error_code := o_error.ora_sqlerrm;
                                    g_error      := o_error.err_action;
                                
                                    RAISE g_user_exception;
                                ELSE
                                    RAISE g_other_exception;
                                END IF;
                            END IF;
                        ELSIF l_count > 0
                              AND l_count < i_diagnosis(i).tbl_diagnosis.count
                        THEN
                            SELECT DISTINCT t.column_value
                              BULK COLLECT
                              INTO l_diagnosis_new
                              FROM (SELECT /*+opt_estimate(table t rows=1)*/
                                     *
                                      FROM TABLE(l_diagnosis) t) t
                             WHERE t.column_value NOT IN
                                   (SELECT mrd.id_diagnosis
                                      FROM mcdt_req_diagnosis mrd
                                     WHERE mrd.id_exam_req_det = i_exam_req_det(i)
                                       AND mrd.id_epis_diagnosis IN
                                           (SELECT /*+opt_estimate (table t rows=1)*/
                                             *
                                              FROM TABLE(l_epis_diagnosis) t)
                                       AND nvl(mrd.flg_status, '@') != pk_alert_constant.g_cancelled);
                        
                            --Inserts new diagnosis code
                            g_error := 'CALL TO PK_DIAGNOSIS.SET_MCDT_REQ_DIAGNOSIS';
                            IF NOT pk_diagnosis.set_mcdt_req_diag_no_commit(i_lang             => i_lang,
                                                                            i_prof             => i_prof,
                                                                            i_epis             => i_episode,
                                                                            i_diag             => get_sub_diag_table(i_tbl_diagnosis => i_diagnosis(i),
                                                                                                                     i_sub_diag_list => l_diagnosis_new),
                                                                            i_exam_req         => l_exam_req_det.id_exam_req,
                                                                            i_analysis_req     => NULL,
                                                                            i_interv_presc     => NULL,
                                                                            i_exam_req_det     => i_exam_req_det(i),
                                                                            i_analysis_req_det => NULL,
                                                                            i_interv_presc_det => NULL,
                                                                            o_error            => o_error)
                            THEN
                                IF o_error.err_desc IS NOT NULL
                                THEN
                                    g_error_code := o_error.ora_sqlerrm;
                                    g_error      := o_error.err_action;
                                
                                    RAISE g_user_exception;
                                ELSE
                                    RAISE g_other_exception;
                                END IF;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        
            g_error             := 'VALIDATE CLINICAL QUESTIONS';
            l_clinical_question := table_number();
            IF i_clinical_question(i) IS NOT NULL
            THEN
                IF i_clinical_question(i).count > 0
                THEN
                    FOR j IN i_clinical_question(i).first .. i_clinical_question(i).last
                    LOOP
                        l_clinical_question.extend;
                        l_clinical_question(j) := i_clinical_question(i) (j);
                    END LOOP;
                END IF;
            END IF;
        
            l_response := table_varchar();
            IF i_response(i) IS NOT NULL
            THEN
                IF i_response(i).count > 0
                THEN
                    FOR j IN i_response(i).first .. i_response(i).last
                    LOOP
                        l_response.extend;
                        l_response(j) := i_response(i) (j);
                    END LOOP;
                END IF;
            END IF;
        
            l_clinical_question_notes := table_varchar();
            IF i_clinical_question_notes(i) IS NOT NULL
            THEN
                IF i_clinical_question_notes(i).count > 0
                THEN
                    FOR j IN i_clinical_question_notes(i).first .. i_clinical_question_notes(i).last
                    LOOP
                        l_clinical_question_notes.extend;
                        l_clinical_question_notes(j) := i_clinical_question_notes(i) (j);
                    END LOOP;
                END IF;
            END IF;
        
            IF l_clinical_question.count != 0
            THEN
                FOR k IN 1 .. l_clinical_question.count
                LOOP
                    IF l_clinical_question(k) IS NOT NULL
                    THEN
                        IF l_response(k) IS NOT NULL
                        THEN
                            l_aux := pk_utils.str_split(l_response(k), '|');
                        
                            FOR j IN 1 .. l_aux.count
                            LOOP
                                SELECT COUNT(*)
                                  INTO l_count
                                  FROM (SELECT eqr.*,
                                               row_number() over(PARTITION BY eqr.id_questionnaire ORDER BY eqr.dt_last_update_tstz DESC NULLS FIRST) rn
                                          FROM exam_question_response eqr
                                         WHERE eqr.id_exam_req_det = i_exam_req_det(i)
                                           AND eqr.id_questionnaire = l_clinical_question(k)
                                           AND (eqr.id_response = to_number(l_aux(j)) OR
                                               dbms_lob.substr(eqr.notes, 3800) = l_clinical_question_notes(k)))
                                 WHERE rn = 1;
                            
                                IF l_count = 0
                                THEN
                                    g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE';
                                    INSERT INTO exam_question_response
                                        (id_exam_question_response,
                                         id_episode,
                                         id_exam_req_det,
                                         flg_time,
                                         id_questionnaire,
                                         id_response,
                                         notes,
                                         id_prof_last_update,
                                         dt_last_update_tstz)
                                    VALUES
                                        (seq_exam_question_response.nextval,
                                         i_episode,
                                         i_exam_req_det(i),
                                         pk_exam_constant.g_exam_cq_on_order,
                                         l_clinical_question(k),
                                         to_number(l_aux(j)),
                                         l_clinical_question_notes(k),
                                         i_prof.id,
                                         g_sysdate_tstz);
                                ELSE
                                    SELECT id_exam_question_response,
                                           id_exam_req_det,
                                           id_questionnaire,
                                           id_response,
                                           notes,
                                           create_user,
                                           create_time,
                                           create_institution,
                                           update_user,
                                           update_time,
                                           update_institution,
                                           flg_time,
                                           id_episode,
                                           id_prof_last_update,
                                           dt_last_update_tstz
                                      INTO l_exam_question_response
                                      FROM (SELECT eqr.*,
                                                   row_number() over(PARTITION BY eqr.id_questionnaire ORDER BY eqr.dt_last_update_tstz DESC NULLS FIRST) rn
                                              FROM exam_question_response eqr
                                             WHERE eqr.id_exam_req_det = i_exam_req_det(i)
                                               AND eqr.id_questionnaire = l_clinical_question(k)
                                               AND (eqr.id_response = to_number(l_aux(j)) OR
                                                   dbms_lob.substr(eqr.notes, 3800) = l_clinical_question_notes(k)))
                                     WHERE rn = 1;
                                
                                    g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE_HIST';
                                    INSERT INTO exam_question_response_hist
                                        (dt_exam_question_resp_hist,
                                         id_exam_question_response,
                                         id_episode,
                                         id_exam_req_det,
                                         flg_time,
                                         id_questionnaire,
                                         id_response,
                                         notes,
                                         id_prof_last_update,
                                         dt_last_update_tstz)
                                    VALUES
                                        (g_sysdate_tstz,
                                         l_exam_question_response.id_exam_question_response,
                                         l_exam_question_response.id_episode,
                                         l_exam_question_response.id_exam_req_det,
                                         l_exam_question_response.flg_time,
                                         l_exam_question_response.id_questionnaire,
                                         l_exam_question_response.id_response,
                                         l_exam_question_response.notes,
                                         l_exam_question_response.id_prof_last_update,
                                         l_exam_question_response.dt_last_update_tstz);
                                
                                    g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE';
                                    INSERT INTO exam_question_response
                                        (id_exam_question_response,
                                         id_episode,
                                         id_exam_req_det,
                                         flg_time,
                                         id_questionnaire,
                                         id_response,
                                         notes,
                                         id_prof_last_update,
                                         dt_last_update_tstz)
                                    VALUES
                                        (seq_exam_question_response.nextval,
                                         i_episode,
                                         i_exam_req_det(i),
                                         pk_exam_constant.g_exam_cq_on_order,
                                         l_clinical_question(k),
                                         to_number(l_aux(j)),
                                         l_clinical_question_notes(k),
                                         i_prof.id,
                                         g_sysdate_tstz);
                                END IF;
                            END LOOP;
                        ELSE
                            SELECT COUNT(*)
                              INTO l_count
                              FROM (SELECT eqr.*,
                                           row_number() over(PARTITION BY eqr.id_questionnaire ORDER BY eqr.dt_last_update_tstz DESC NULLS FIRST) rn
                                      FROM exam_question_response eqr
                                     WHERE eqr.id_exam_req_det = i_exam_req_det(i)
                                       AND eqr.id_questionnaire = l_clinical_question(k)
                                       AND (eqr.id_response IS NULL OR
                                           to_char(dbms_lob.substr(eqr.notes, 3800)) = l_clinical_question_notes(k)))
                             WHERE rn = 1;
                            IF l_count = 0
                            THEN
                                g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE';
                                INSERT INTO exam_question_response
                                    (id_exam_question_response,
                                     id_episode,
                                     id_exam_req_det,
                                     flg_time,
                                     id_questionnaire,
                                     id_response,
                                     notes,
                                     id_prof_last_update,
                                     dt_last_update_tstz)
                                VALUES
                                    (seq_exam_question_response.nextval,
                                     i_episode,
                                     i_exam_req_det(i),
                                     pk_exam_constant.g_exam_cq_on_order,
                                     l_clinical_question(k),
                                     NULL,
                                     l_clinical_question_notes(k),
                                     i_prof.id,
                                     g_sysdate_tstz);
                            ELSE
                                SELECT id_exam_question_response,
                                       id_exam_req_det,
                                       id_questionnaire,
                                       id_response,
                                       notes,
                                       create_user,
                                       create_time,
                                       create_institution,
                                       update_user,
                                       update_time,
                                       update_institution,
                                       flg_time,
                                       id_episode,
                                       id_prof_last_update,
                                       dt_last_update_tstz
                                  INTO l_exam_question_response
                                  FROM (SELECT eqr.*,
                                               row_number() over(PARTITION BY eqr.id_questionnaire ORDER BY eqr.dt_last_update_tstz DESC NULLS FIRST) rn
                                          FROM exam_question_response eqr
                                         WHERE eqr.id_exam_req_det = i_exam_req_det(i)
                                           AND eqr.id_questionnaire = l_clinical_question(k)
                                           AND (eqr.id_response IS NULL OR
                                               dbms_lob.substr(eqr.notes, 3800) = l_clinical_question_notes(k)))
                                 WHERE rn = 1;
                            
                                g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE_HIST';
                                INSERT INTO exam_question_response_hist
                                    (dt_exam_question_resp_hist,
                                     id_exam_question_response,
                                     id_episode,
                                     id_exam_req_det,
                                     flg_time,
                                     id_questionnaire,
                                     id_response,
                                     notes,
                                     id_prof_last_update,
                                     dt_last_update_tstz)
                                VALUES
                                    (g_sysdate_tstz,
                                     l_exam_question_response.id_exam_question_response,
                                     l_exam_question_response.id_episode,
                                     l_exam_question_response.id_exam_req_det,
                                     l_exam_question_response.flg_time,
                                     l_exam_question_response.id_questionnaire,
                                     l_exam_question_response.id_response,
                                     l_exam_question_response.notes,
                                     l_exam_question_response.id_prof_last_update,
                                     l_exam_question_response.dt_last_update_tstz);
                            
                                g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE';
                                INSERT INTO exam_question_response
                                    (id_exam_question_response,
                                     id_episode,
                                     id_exam_req_det,
                                     flg_time,
                                     id_questionnaire,
                                     id_response,
                                     notes,
                                     id_prof_last_update,
                                     dt_last_update_tstz)
                                VALUES
                                    (seq_exam_question_response.nextval,
                                     i_episode,
                                     i_exam_req_det(i),
                                     pk_exam_constant.g_exam_cq_on_order,
                                     l_clinical_question(k),
                                     NULL,
                                     l_clinical_question_notes(k),
                                     i_prof.id,
                                     g_sysdate_tstz);
                            END IF;
                        END IF;
                    END IF;
                END LOOP;
            END IF;
        
            --Verifica se o evento é passível de gerar alertas
            IF l_status_det = pk_exam_constant.g_exam_req
               AND l_dt_begin IS NOT NULL
            THEN
            
                l_sys_alert_event.id_sys_alert    := 33;
                l_sys_alert_event.id_software     := i_prof.software;
                l_sys_alert_event.id_institution  := i_prof.institution;
                l_sys_alert_event.id_episode      := i_episode;
                l_sys_alert_event.id_record       := i_exam_req_det(i);
                l_sys_alert_event.dt_record       := g_sysdate_tstz;
                l_sys_alert_event.id_professional := i_prof.id;
                l_sys_alert_event.id_room         := i_exec_room(i);
                l_sys_alert_event.replace1        := 'EXAM.CODE_EXAM.' || l_exam_req_det.id_exam;
                l_sys_alert_event.replace2        := pk_sysconfig.get_config('ALERT_EXAM_TIMEOUT', i_prof);
                l_sys_alert_event.id_prof_order   := nvl(i_prof_order(i), i_prof.id);
            
                --Insere evento na tabela de alertas
                g_error := 'INSERT INTO SYS_ALERT_EVENT';
                IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                        i_prof            => i_prof,
                                                        i_sys_alert_event => l_sys_alert_event,
                                                        i_flg_type_dest   => 'R',
                                                        o_error           => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                l_sys_alert_event.id_sys_alert := 39;
            
                --Insere evento na tabela de alertas
                g_error := 'INSERT INTO SYS_ALERT_EVENT';
                IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                        i_prof            => i_prof,
                                                        i_sys_alert_event => l_sys_alert_event,
                                                        i_flg_type_dest   => 'R',
                                                        o_error           => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        
            IF l_status_det NOT IN (pk_exam_constant.g_exam_predefined, pk_exam_constant.g_exam_draft)
            THEN
                -- Updating lab technician grid
                g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
                IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                          i_prof         => i_prof,
                                                          i_patient      => l_exam_req.id_patient,
                                                          i_episode      => i_episode,
                                                          i_exam_req     => l_exam_req_det.id_exam_req,
                                                          i_exam_req_det => i_exam_req_det(i),
                                                          o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              g_error_code,
                                              g_error,
                                              '',
                                              g_package_owner,
                                              g_package_name,
                                              'CREATE_EXAM_ORDER',
                                              'U',
                                              '',
                                              o_error);
            RETURN FALSE;
        
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'UPDATE_EXAM_ORDER',
                                              o_error);
            RETURN FALSE;
    END update_exam_order;

    FUNCTION update_exam_perform
    (
        i_lang                  IN language.id_language%TYPE,
        i_prof                  IN profissional,
        i_exam_req_det          IN exam_req_det.id_exam_req_det%TYPE,
        i_prof_performed        IN exam_req_det.id_prof_performed%TYPE,
        i_start_time            IN VARCHAR2,
        i_end_time              IN VARCHAR2,
        i_supply_workflow       IN table_number,
        i_supply                IN table_number,
        i_supply_set            IN table_number,
        i_supply_qty            IN table_number,
        i_supply_type           IN table_varchar,
        i_barcode_scanned       IN table_varchar,
        i_deliver_needed        IN table_varchar,
        i_flg_cons_type         IN table_varchar,
        i_dt_expiration         IN table_varchar,
        i_flg_validation        IN table_varchar,
        i_lot                   IN table_varchar,
        i_notes_supplies        IN table_varchar,
        i_doc_template          IN doc_template.id_doc_template%TYPE,
        i_flg_type              IN doc_template_context.flg_type%TYPE,
        i_id_documentation      IN table_number,
        i_id_doc_element        IN table_number,
        i_id_doc_element_crit   IN table_number,
        i_value                 IN table_varchar,
        i_id_doc_element_qualif IN table_table_number,
        i_documentation_notes   IN epis_documentation.notes%TYPE,
        i_questionnaire         IN table_number,
        i_response              IN table_varchar,
        i_notes                 IN table_varchar,
        i_transaction_id        IN VARCHAR2 DEFAULT NULL,
        o_error                 OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_req IS
            SELECT erd.id_exam,
                   e.flg_type,
                   er.id_patient,
                   er.id_episode,
                   erd.id_exam_req,
                   er.id_prof_req,
                   er.flg_time,
                   erd.flg_status,
                   er.id_episode_origin,
                   er.priority flg_priority,
                   erd.id_epis_doc_perform
              FROM exam_req_det erd, exam e, exam_req er
             WHERE erd.id_exam_req_det = i_exam_req_det
               AND er.id_exam_req = erd.id_exam_req
               AND e.id_exam = erd.id_exam;
    
        l_exam_req c_exam_req%ROWTYPE;
    
        l_exam_req_det_hist exam_req_det_hist.id_exam_req_det_hist%TYPE;
    
        l_start_time exam_req_det.start_time%TYPE;
        l_end_time   exam_req_det.end_time%TYPE;
    
        l_count                    PLS_INTEGER := 0;
        l_aux                      table_varchar2;
        l_exam_question_response   exam_question_response%ROWTYPE;
        l_table_exam_question_resp table_number := table_number();
    
        l_epis_documentation epis_documentation.id_epis_documentation%TYPE;
    
        l_id_supply_workflow    table_number;
        l_has_supplies          VARCHAR2(1 CHAR);
        l_id_supply             table_number;
        l_empty_array_supl_cons table_number := table_number();
        l_id_supply_del         table_number := table_number();
    
        l_transaction_id VARCHAR2(4000);
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        l_start_time := pk_date_utils.get_string_tstz(i_lang, i_prof, i_start_time, NULL);
        l_end_time   := pk_date_utils.get_string_tstz(i_lang, i_prof, i_end_time, NULL);
    
        g_error := 'OPEN C_EXAM_REQ';
        OPEN c_exam_req;
        FETCH c_exam_req
            INTO l_exam_req;
        CLOSE c_exam_req;
    
        g_error := 'CALL PK_EXAM_CORE.SET_EXAM_HISTORY';
        IF NOT pk_exam_core.set_exam_history(i_lang         => i_lang,
                                             i_prof         => i_prof,
                                             i_exam_req     => NULL,
                                             i_exam_req_det => table_number(i_exam_req_det),
                                             o_error        => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        SELECT id_exam_req_det_hist
          INTO l_exam_req_det_hist
          FROM (SELECT erdh.id_exam_req_det_hist
                  FROM exam_req_det_hist erdh
                 WHERE erdh.id_exam_req_det = i_exam_req_det
                 ORDER BY erdh.dt_exam_req_det_hist DESC)
         WHERE rownum = 1;
    
        IF nvl(i_id_documentation.count, 0) > 0
           OR (dbms_lob.getlength(nvl(i_documentation_notes, empty_clob())) != 0)
           OR i_flg_type = pk_touch_option.g_flg_edition_type_edit
        THEN
            g_error := 'CALL PK_TOUCH_OPTION.SET_EPIS_DOCUMENT_INTERNAL';
            IF NOT pk_touch_option.set_epis_document_internal(i_lang                  => i_lang,
                                                         i_prof                  => i_prof,
                                                         i_prof_cat_type         => pk_prof_utils.get_category(i_lang, i_prof),
                                                         i_epis                  => l_exam_req.id_episode,
                                                         i_doc_area              => pk_exam_constant.g_doc_area_exam,
                                                         i_doc_template          => i_doc_template,
                                                         i_epis_documentation    => CASE
                                                                                        WHEN i_flg_type =
                                                                                             pk_touch_option.g_flg_edition_type_edit THEN
                                                                                         l_exam_req.id_epis_doc_perform
                                                                                        ELSE
                                                                                         NULL
                                                                                    END,
                                                         i_flg_type              => i_flg_type,
                                                         i_id_documentation      => i_id_documentation,
                                                         i_id_doc_element        => i_id_doc_element,
                                                         i_id_doc_element_crit   => i_id_doc_element_crit,
                                                         i_value                 => i_value,
                                                         i_notes                 => i_documentation_notes,
                                                         i_id_epis_complaint     => NULL,
                                                         i_id_doc_element_qualif => i_id_doc_element_qualif,
                                                         i_epis_context          => i_exam_req_det,
                                                         o_epis_documentation    => l_epis_documentation,
                                                         o_error                 => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        ELSE
            l_epis_documentation := l_exam_req.id_epis_doc_perform;
        END IF;
    
        g_error := 'UPDATE EXAM_REQ_DET';
        ts_exam_req_det.upd(id_exam_req_det_in      => i_exam_req_det,
                            id_epis_doc_perform_in  => l_epis_documentation,
                            id_epis_doc_perform_nin => FALSE,
                            rows_out                => l_rows_out);
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_REQ_DET',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        IF i_supply IS NOT NULL
           AND i_supply.count > 0
        THEN
            -- Checks if the exam request has supplies workflow (not cancelled)
            g_error := 'CALL pk_supplies_api_db.get_inf_supply_workflow';
            IF NOT pk_supplies_external_api_db.get_inf_supply_workflow(i_lang               => i_lang,
                                                                       i_prof               => i_prof,
                                                                       i_id_context         => i_exam_req_det,
                                                                       i_flg_context        => l_exam_req.flg_type,
                                                                       i_id_supply          => l_empty_array_supl_cons,
                                                                       i_flg_status         => pk_supplies_constant.g_flg_status_can_cancel,
                                                                       o_has_supplies       => l_has_supplies,
                                                                       o_id_supply_workflow => l_id_supply_workflow,
                                                                       o_id_supply          => l_id_supply,
                                                                       o_error              => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            IF l_has_supplies = pk_alert_constant.g_yes
            THEN
                -- verifies wich supplies must be removed, only the supplies in exam_req_det must be canceled
                IF nvl(i_supply_workflow.count, 0) > 0
                   AND i_supply(1) IS NOT NULL
                THEN
                    l_id_supply_del := l_id_supply MULTISET except i_supply;
                ELSE
                    l_id_supply_del := l_id_supply;
                END IF;
            
                IF l_id_supply_del IS NOT NULL
                   AND l_id_supply_del.count > 0
                THEN
                    FOR i IN 1 .. l_id_supply_del.count
                    LOOP
                        FOR j IN 1 .. l_id_supply.count
                        LOOP
                            IF l_id_supply_del(i) = l_id_supply(j)
                            THEN
                            
                                g_error := 'CALL PK_SUPPLIES_API_DB.SET_CANCEL_SUPPLY';
                                IF NOT pk_supplies_api_db.cancel_supply_order(i_lang             => i_lang,
                                                                              i_prof             => i_prof,
                                                                              i_supplies         => table_number(l_id_supply_workflow(j)),
                                                                              i_id_prof_cancel   => i_prof.id,
                                                                              i_cancel_notes     => NULL,
                                                                              i_id_cancel_reason => NULL,
                                                                              i_dt_cancel        => g_sysdate_tstz,
                                                                              o_error            => o_error)
                                THEN
                                    RAISE g_other_exception;
                                END IF;
                            
                                -- Changes the id_context to id_exam_req_det_hist 
                                g_error := 'CALL PK_SUPPLIES_EXTERNAL_API_DB.SET_SUPPLY_WORKFLOW_HIST';
                                pk_supplies_api_db.set_supply_workflow_hist(i_id_supply_workflow => l_id_supply_workflow(j),
                                                                            i_id_context         => l_exam_req_det_hist,
                                                                            i_flg_context        => l_exam_req.flg_type);
                            END IF;
                        END LOOP;
                    END LOOP;
                END IF;
            END IF;
        
            IF nvl(i_supply_workflow.count, 0) > 0
               AND i_supply(1) IS NOT NULL
            THEN
                g_error := 'CALL PK_SUPPLIESAPI_DB.CREATE_SUP_CONSUMPTION';
                IF NOT pk_supplies_api_db.set_supply_consumption(i_lang               => i_lang,
                                                                 i_prof               => i_prof,
                                                                 i_id_episode         => l_exam_req.id_episode,
                                                                 i_id_context         => i_exam_req_det,
                                                                 i_flg_context        => l_exam_req.flg_type,
                                                                 i_id_supply_workflow => i_supply_workflow,
                                                                 i_supply             => i_supply,
                                                                 i_supply_set         => i_supply_set,
                                                                 i_supply_qty         => i_supply_qty,
                                                                 i_flg_supply_type    => i_supply_type,
                                                                 i_barcode_scanned    => i_barcode_scanned,
                                                                 i_fixed_asset_number => NULL,
                                                                 i_deliver_needed     => i_deliver_needed,
                                                                 i_flg_cons_type      => i_flg_cons_type,
                                                                 i_notes              => i_notes_supplies,
                                                                 i_dt_expected_date   => NULL,
                                                                 i_check_quantities   => pk_alert_constant.g_no,
                                                                 i_dt_expiration      => i_dt_expiration,
                                                                 i_flg_validation     => i_flg_validation,
                                                                 i_lot                => i_lot,
                                                                 o_error              => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                FOR i IN 1 .. l_id_supply.count
                LOOP
                    -- Changes the id_context to id_exam_req_det_hist 
                    g_error := 'call set_supply_workflow_hist';
                    pk_supplies_api_db.set_supply_workflow_hist(i_id_supply_workflow => l_id_supply_workflow(i),
                                                                i_id_context         => l_exam_req_det_hist,
                                                                i_flg_context        => l_exam_req.flg_type);
                END LOOP;
            END IF;
        END IF;
    
        -- Clinical Questions    
        IF i_questionnaire IS NOT NULL
           AND i_questionnaire.count > 0
        THEN
        
            g_error := 'LOOP I_QUESTIONNAIRE';
            FOR i IN 1 .. i_questionnaire.count
            LOOP
                SELECT eqr.id_exam_question_response
                  BULK COLLECT
                  INTO l_table_exam_question_resp
                  FROM exam_question_response eqr
                 WHERE eqr.id_exam_req_det = i_exam_req_det
                   AND eqr.id_questionnaire = i_questionnaire(i)
                   AND eqr.flg_time = pk_exam_constant.g_exam_cq_after_execute;
            
                FOR k IN 1 .. l_table_exam_question_resp.count
                LOOP
                    SELECT *
                      INTO l_exam_question_response
                      FROM exam_question_response eqr
                     WHERE eqr.id_exam_req_det = i_exam_req_det
                       AND eqr.id_exam_question_response = l_table_exam_question_resp(k);
                
                    g_error := 'INSERT INTO EXAM_QUESTION_RESP_HIST';
                    INSERT INTO exam_question_response_hist
                        (dt_exam_question_resp_hist,
                         id_exam_question_response,
                         id_episode,
                         id_exam_req_det,
                         flg_time,
                         id_questionnaire,
                         id_response,
                         notes,
                         id_prof_last_update,
                         dt_last_update_tstz)
                    VALUES
                        (g_sysdate_tstz,
                         l_exam_question_response.id_exam_question_response,
                         l_exam_question_response.id_episode,
                         l_exam_question_response.id_exam_req_det,
                         l_exam_question_response.flg_time,
                         l_exam_question_response.id_questionnaire,
                         l_exam_question_response.id_response,
                         l_exam_question_response.notes,
                         l_exam_question_response.id_prof_last_update,
                         l_exam_question_response.dt_last_update_tstz);
                END LOOP;
            
                SELECT COUNT(*)
                  INTO l_count
                  FROM exam_question_response eqr
                 WHERE eqr.id_exam_req_det = i_exam_req_det
                   AND eqr.id_questionnaire = i_questionnaire(i)
                   AND eqr.flg_time = pk_exam_constant.g_exam_cq_after_execute;
            
                IF l_count > 0
                THEN
                    SELECT eqr.id_exam_question_response
                      BULK COLLECT
                      INTO l_table_exam_question_resp
                      FROM exam_question_response eqr
                     WHERE eqr.id_exam_req_det = i_exam_req_det
                       AND eqr.id_questionnaire = i_questionnaire(i)
                       AND eqr.flg_time = pk_exam_constant.g_exam_cq_after_execute;
                
                    FOR k IN 1 .. l_table_exam_question_resp.count
                    LOOP
                        ts_exam_question_response.del(id_exam_question_response_in => l_table_exam_question_resp(k),
                                                      rows_out                     => l_rows_out);
                    END LOOP;
                END IF;
            
                IF i_response(i) IS NOT NULL
                THEN
                    l_aux := pk_utils.str_split(i_response(i), '|');
                
                    FOR j IN 1 .. l_aux.count
                    LOOP
                        g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE 1.1';
                        INSERT INTO exam_question_response
                            (id_exam_question_response,
                             id_episode,
                             id_exam_req_det,
                             flg_time,
                             id_questionnaire,
                             id_response,
                             notes,
                             id_prof_last_update,
                             dt_last_update_tstz)
                        VALUES
                            (seq_exam_question_response.nextval,
                             l_exam_req.id_episode,
                             i_exam_req_det,
                             pk_exam_constant.g_exam_cq_after_execute,
                             i_questionnaire(i),
                             to_number(l_aux(j)),
                             i_notes(i),
                             i_prof.id,
                             g_sysdate_tstz);
                    
                    END LOOP;
                ELSE
                    g_error := 'INSERT INTO EXAM_QUESTION_RESPONSE 1.2';
                    INSERT INTO exam_question_response
                        (id_exam_question_response,
                         id_episode,
                         id_exam_req_det,
                         flg_time,
                         id_questionnaire,
                         id_response,
                         notes,
                         id_prof_last_update,
                         dt_last_update_tstz)
                    VALUES
                        (seq_exam_question_response.nextval,
                         l_exam_req.id_episode,
                         i_exam_req_det,
                         pk_exam_constant.g_exam_cq_after_execute,
                         i_questionnaire(i),
                         NULL,
                         i_notes(i),
                         i_prof.id,
                         g_sysdate_tstz);
                END IF;
            END LOOP;
        END IF;
    
        IF l_exam_req.flg_status NOT IN (pk_exam_constant.g_exam_result, pk_exam_constant.g_exam_cancel)
        THEN
            l_rows_out := NULL;
        
            g_error := 'UPDATE EXAM_REQ';
            ts_exam_req.upd(id_episode_in => CASE
                                                 WHEN l_exam_req.id_episode IS NULL THEN
                                                  l_exam_req.id_episode_origin
                                             END,
                            flg_status_in => pk_exam_constant.g_exam_ongoing,
                            where_in      => 'id_exam_req = ' || l_exam_req.id_exam_req || ' AND flg_status != ''' ||
                                             pk_exam_constant.g_exam_ongoing || '''',
                            rows_out      => l_rows_out);
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            -- inserir em log de estados
            IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                    i_prof       => i_prof,
                                    i_id_episode => l_exam_req.id_episode,
                                    i_flg_status => pk_exam_constant.g_exam_exec,
                                    i_id_record  => l_exam_req.id_exam_req,
                                    i_flg_type   => pk_exam_constant.g_exam_type_req,
                                    o_error      => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            l_rows_out := NULL;
        
            g_error := 'UPDATE EXAM_REQ_DET';
            ts_exam_req_det.upd(id_exam_req_det_in       => i_exam_req_det,
                                flg_status_in            => pk_exam_constant.g_exam_exec,
                                id_prof_performed_reg_in => i_prof.id,
                                dt_performed_reg_in      => g_sysdate_tstz,
                                id_prof_performed_in     => CASE
                                                                WHEN i_prof_performed != -1 THEN
                                                                 i_prof_performed
                                                                ELSE
                                                                 NULL
                                                            END,
                                start_time_in            => l_start_time,
                                end_time_in              => l_end_time,
                                id_epis_doc_perform_in   => l_epis_documentation,
                                id_epis_doc_perform_nin  => FALSE,
                                prof_dep_clin_serv_in    => pk_prof_utils.get_prof_dcs(profissional(i_prof_performed,
                                                                                                    i_prof.institution,
                                                                                                    i_prof.software)),
                                rows_out                 => l_rows_out);
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ_DET',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            -- inserir em log de estados
            IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                    i_prof       => i_prof,
                                    i_id_episode => l_exam_req.id_episode,
                                    i_flg_status => pk_exam_constant.g_exam_exec,
                                    i_id_record  => i_exam_req_det,
                                    i_flg_type   => pk_exam_constant.g_exam_type_det,
                                    o_error      => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            g_error := 'CALL TO PK_IA_EVENT_IMAGE.EXAM_REQUEST_PERFORMED';
            pk_ia_event_image.exam_request_performed(i_id_exam_req_det => i_exam_req_det,
                                                     i_id_institution  => i_prof.institution,
                                                     i_flg_old_status  => l_exam_req.flg_status);
        
            g_error := 'CALL PK_EXAM_EXTERNAL.UPDATE_TDE_TASK_STATE';
            IF NOT pk_exam_external.update_tde_task_state(i_lang         => i_lang,
                                                          i_prof         => i_prof,
                                                          i_exam_req_det => i_exam_req_det,
                                                          i_flg_action   => pk_exam_constant.g_exam_exec,
                                                          o_error        => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
        END IF;
    
        g_error := 'CALL TO SET_FIRST_OBS';
        IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                      i_id_episode          => l_exam_req.id_episode,
                                      i_pat                 => NULL,
                                      i_prof                => i_prof,
                                      i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                      i_dt_last_interaction => g_sysdate_tstz,
                                      i_dt_first_obs        => g_sysdate_tstz,
                                      o_error               => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
        IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                  i_prof         => i_prof,
                                                  i_patient      => NULL,
                                                  i_episode      => l_exam_req.id_episode,
                                                  i_exam_req     => l_exam_req.id_exam_req,
                                                  i_exam_req_det => i_exam_req_det,
                                                  o_error        => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        IF i_transaction_id IS NULL
        THEN
            pk_schedule_api_upstream.do_commit(l_transaction_id, i_prof);
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'UPDATE_EXAM_PERFORM',
                                              o_error);
            RETURN FALSE;
    END update_exam_perform;

    FUNCTION update_exam_result
    (
        i_lang                  IN language.id_language%TYPE,
        i_prof                  IN profissional,
        i_patient               IN exam_result.id_patient%TYPE,
        i_episode               IN exam_result.id_episode_write%TYPE,
        i_exam_result           IN exam_result.id_exam_result%TYPE,
        i_result_status         IN result_status.id_result_status%TYPE DEFAULT NULL,
        i_abnormality           IN exam_result.id_abnormality%TYPE DEFAULT NULL,
        i_flg_result_origin     IN exam_result.flg_result_origin%TYPE,
        i_result_origin_notes   IN exam_result.result_origin_notes%TYPE,
        i_flg_import            IN table_varchar,
        i_id_doc                IN table_number,
        i_doc_type              IN table_number,
        i_desc_doc_type         IN table_varchar,
        i_dt_doc                IN table_varchar,
        i_dest                  IN table_number,
        i_desc_dest             IN table_varchar,
        i_ori_doc_type          IN table_number,
        i_desc_ori_doc_type     IN table_varchar,
        i_original              IN table_number,
        i_desc_original         IN table_varchar,
        i_btn                   IN sys_button_prop.id_sys_button_prop%TYPE,
        i_title                 IN table_varchar,
        i_desc_perf_by          IN table_varchar,
        i_doc_template          IN doc_template.id_doc_template%TYPE,
        i_flg_type              IN doc_template_context.flg_type%TYPE,
        i_id_documentation      IN table_number,
        i_id_doc_element        IN table_number,
        i_id_doc_element_crit   IN table_number,
        i_value                 IN table_varchar,
        i_id_doc_element_qualif IN table_table_number,
        i_documentation_notes   IN epis_documentation.notes%TYPE,
        o_error                 OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_result IS
            SELECT er.*
              FROM exam_result er
             WHERE er.id_exam_result = i_exam_result;
    
        CURSOR c_exam_req(l_exam_req_det IN exam_req_det.id_exam_req_det%TYPE) IS
            SELECT erd.id_exam,
                   e.flg_type,
                   er.id_patient,
                   er.id_episode,
                   erd.id_exam_req,
                   er.id_prof_req,
                   er.flg_time,
                   er.priority flg_priority
              FROM exam_req_det erd, exam e, exam_req er
             WHERE erd.id_exam_req_det = l_exam_req_det
               AND er.id_exam_req = erd.id_exam_req
               AND e.id_exam = erd.id_exam;
    
        CURSOR c_count(l_id_exam_req IN exam_req.id_exam_req%TYPE) IS
            SELECT COUNT(*)
              FROM exam_req_det
             WHERE id_exam_req = l_id_exam_req
               AND flg_status IN
                   (pk_exam_constant.g_exam_pending, pk_exam_constant.g_exam_req, pk_exam_constant.g_exam_toexec);
    
        l_exam_result c_exam_result%ROWTYPE;
        l_exam_req    c_exam_req%ROWTYPE;
        l_count       NUMBER;
    
        l_status_req exam_req.flg_status%TYPE;
        l_result     BOOLEAN := FALSE;
    
        l_doc_external doc_external.id_doc_external%TYPE;
    
        l_barcode         VARCHAR2(30 CHAR);
        l_gener_barcode   VARCHAR2(1 CHAR);
        l_sys_alert_event sys_alert_event%ROWTYPE;
    
        l_rows_out_res table_varchar := table_varchar();
        l_rows_out_req table_varchar := table_varchar();
        l_rows_out_det table_varchar := table_varchar();
    
        l_epis_documentation epis_documentation.id_epis_documentation%TYPE;
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        g_error := 'OPEN C_EXAM_RESULT';
        OPEN c_exam_result;
        FETCH c_exam_result
            INTO l_exam_result;
        CLOSE c_exam_result;
    
        g_error := 'INSERT INTO EXAM_RESULT_HIST';
        ts_exam_result_hist.ins(dt_exam_result_hist_in   => g_sysdate_tstz,
                                id_exam_result_in        => l_exam_result.id_exam_result,
                                id_exam_in               => l_exam_result.id_exam,
                                id_exam_req_det_in       => l_exam_result.id_exam_req_det,
                                id_professional_in       => l_exam_result.id_professional,
                                id_patient_in            => l_exam_result.id_patient,
                                notes_in                 => l_exam_result.notes,
                                flg_type_in              => l_exam_result.flg_type,
                                id_institution_in        => l_exam_result.id_institution,
                                id_prof_mov_begin_in     => l_exam_result.id_prof_mov_begin,
                                id_prof_mov_end_in       => l_exam_result.id_prof_mov_end,
                                id_episode_in            => l_exam_result.id_episode,
                                id_episode_write_in      => l_exam_result.id_episode_write,
                                dt_exam_result_tstz_in   => l_exam_result.dt_exam_result_tstz,
                                dt_mov_begin_tstz_in     => l_exam_result.dt_mov_begin_tstz,
                                dt_mov_end_tstz_in       => l_exam_result.dt_mov_end_tstz,
                                id_external_doc_in       => l_exam_result.id_external_doc,
                                flg_status_in            => l_exam_result.flg_status,
                                flg_result_origin_in     => l_exam_result.flg_result_origin,
                                id_result_status_in      => l_exam_result.id_result_status,
                                id_result_notes_in       => l_exam_result.id_result_notes,
                                notes_result_in          => l_exam_result.notes_result,
                                id_prof_read_in          => l_exam_result.id_prof_read,
                                dt_prof_read_tstz_in     => l_exam_result.dt_prof_read_tstz,
                                id_epis_documentation_in => l_exam_result.id_epis_documentation);
    
        IF nvl(i_id_documentation.count, 0) > 0
           OR i_documentation_notes IS NOT NULL
        THEN
            g_error := 'CALL PK_TOUCH_OPTION.SET_EPIS_DOCUMENT_INTERNAL';
            IF NOT pk_touch_option.set_epis_document_internal(i_lang                  => i_lang,
                                                         i_prof                  => i_prof,
                                                         i_prof_cat_type         => pk_prof_utils.get_category(i_lang, i_prof),
                                                         i_epis                  => i_episode,
                                                         i_doc_area              => pk_exam_constant.g_doc_area_exam_result,
                                                         i_doc_template          => i_doc_template,
                                                         i_epis_documentation    => CASE
                                                                                        WHEN i_flg_type =
                                                                                             pk_touch_option.g_flg_edition_type_edit THEN
                                                                                         l_exam_result.id_epis_documentation
                                                                                        ELSE
                                                                                         NULL
                                                                                    END,
                                                         i_flg_type              => i_flg_type,
                                                         i_id_documentation      => i_id_documentation,
                                                         i_id_doc_element        => i_id_doc_element,
                                                         i_id_doc_element_crit   => i_id_doc_element_crit,
                                                         i_value                 => i_value,
                                                         i_notes                 => i_documentation_notes,
                                                         i_id_epis_complaint     => NULL,
                                                         i_id_doc_element_qualif => i_id_doc_element_qualif,
                                                         i_epis_context          => l_exam_result.id_exam_result,
                                                         o_epis_documentation    => l_epis_documentation,
                                                         o_error                 => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        ELSE
            l_epis_documentation := l_exam_result.id_epis_documentation;
        END IF;
    
        g_error := 'UPDATE EXAM_RESULT';
        ts_exam_result.upd(id_exam_result_in        => l_exam_result.id_exam_result,
                           id_episode_write_in      => i_episode,
                           id_professional_in       => i_prof.id,
                           dt_exam_result_tstz_in   => g_sysdate_tstz,
                           id_result_status_in      => i_result_status,
                           id_result_status_nin     => FALSE,
                           id_abnormality_in        => i_abnormality,
                           id_abnormality_nin       => FALSE,
                           notes_in                 => i_documentation_notes,
                           flg_type_in              => pk_prof_utils.get_category(i_lang, i_prof),
                           flg_result_origin_in     => i_flg_result_origin,
                           flg_result_origin_nin    => FALSE,
                           result_origin_notes_in   => i_result_origin_notes,
                           result_origin_notes_nin  => FALSE,
                           id_epis_documentation_in => l_epis_documentation,
                           dt_prof_read_tstz_in     => CASE
                                                           WHEN l_exam_result.dt_prof_read_tstz IS NOT NULL THEN
                                                            g_sysdate_tstz
                                                       END,
                           rows_out                 => l_rows_out_res);
    
        g_error := 'OPEN C_EXAM_REQ';
        OPEN c_exam_req(l_exam_result.id_exam_req_det);
        FETCH c_exam_req
            INTO l_exam_req;
        CLOSE c_exam_req;
    
        IF l_exam_req.id_prof_req != i_prof.id
        THEN
            g_error := 'UPDATE EXAM_REQ_DET';
            ts_exam_req_det.upd(id_exam_req_det_in => l_exam_result.id_exam_req_det,
                                flg_status_in      => pk_exam_constant.g_exam_result,
                                rows_out           => l_rows_out_det);
        
            l_result := FALSE;
        
            -- inserir em log de estados
            IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                    i_prof       => i_prof,
                                    i_id_episode => l_exam_req.id_episode,
                                    i_flg_status => pk_exam_constant.g_exam_result,
                                    i_id_record  => l_exam_result.id_exam_req_det,
                                    i_flg_type   => pk_exam_constant.g_exam_type_det,
                                    o_error      => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            g_error := 'CALL PK_EXAM_EXTERNAL.UPDATE_TDE_TASK_STATE';
            IF NOT pk_exam_external.update_tde_task_state(i_lang         => i_lang,
                                                          i_prof         => i_prof,
                                                          i_exam_req_det => l_exam_result.id_exam_req_det,
                                                          i_flg_action   => pk_exam_constant.g_exam_result,
                                                          o_error        => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
        END IF;
    
        -- Procurar detalhes do mm cabeçalho ainda sem resultado
        g_error := 'OPEN C_COUNT';
        OPEN c_count(l_exam_req.id_exam_req);
        FETCH c_count
            INTO l_count;
        CLOSE c_count;
    
        IF nvl(l_count, 0) > 0
        THEN
            -- se encontra, cabeçalho fica 'parcial'
            l_status_req := pk_exam_constant.g_exam_partial;
        ELSE
            IF l_result
            THEN
                --RS 20080215 faltava o tratamento do cabeçalho
                l_status_req := pk_exam_constant.g_exam_read;
                -- senão, fica 'lido'
            ELSE
                l_status_req := pk_exam_constant.g_exam_result;
                -- senão, fica 'com resultado'
            END IF;
        END IF;
    
        g_error := 'UPDATE EXAM_REQ';
        ts_exam_req.upd(id_exam_req_in => l_exam_req.id_exam_req,
                        flg_status_in  => l_status_req,
                        rows_out       => l_rows_out_req);
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_REQ',
                                      i_rowids     => l_rows_out_req,
                                      o_error      => o_error);
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_REQ_DET',
                                      i_rowids     => l_rows_out_det,
                                      o_error      => o_error);
        t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_RESULT',
                                      i_rowids     => l_rows_out_res,
                                      o_error      => o_error);
    
        IF i_flg_import.count > 0
        THEN
            FOR i IN 1 .. i_id_doc.count
            LOOP
                IF i_flg_import(i) = 'N'
                THEN
                    g_error := 'CALL TO PK_DOC.CREATE_SAVEDOC_INTERNAL';
                    IF NOT pk_doc.create_savedoc_internal(i_id_doc             => i_id_doc(i),
                                                          i_lang               => i_lang,
                                                          i_prof               => i_prof,
                                                          i_patient            => i_patient,
                                                          i_episode            => l_exam_req.id_episode,
                                                          i_ext_req            => NULL,
                                                          i_doc_type           => nvl(i_doc_type(i), 999), --OTHER
                                                          i_desc_doc_type      => i_desc_doc_type(i),
                                                          i_num_doc            => NULL,
                                                          i_dt_doc             => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                i_prof,
                                                                                                                i_dt_doc(i),
                                                                                                                NULL),
                                                          i_dt_expire          => NULL,
                                                          i_dest               => i_dest(i),
                                                          i_desc_dest          => i_desc_dest(i),
                                                          i_ori_doc_type       => i_ori_doc_type(i),
                                                          i_desc_ori_doc_type  => i_desc_ori_doc_type(i),
                                                          i_original           => i_original(i),
                                                          i_desc_original      => i_desc_original(i),
                                                          i_btn                => i_btn,
                                                          i_title              => i_title(i),
                                                          i_flg_sent_by        => NULL,
                                                          i_flg_received       => NULL,
                                                          i_prof_perf_by       => NULL,
                                                          i_desc_perf_by       => i_desc_perf_by(i),
                                                          i_author             => NULL,
                                                          i_specialty          => NULL,
                                                          i_doc_language       => NULL,
                                                          i_flg_publish        => NULL,
                                                          i_conf_code          => table_varchar(),
                                                          i_desc_conf_code     => table_varchar(),
                                                          i_code_coding_schema => table_varchar(),
                                                          i_conf_code_set      => table_varchar(),
                                                          i_desc_conf_code_set => table_varchar(),
                                                          o_error              => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    ts_exam_media_archive.ins(id_exam_req_det_in     => l_exam_result.id_exam_req_det,
                                              id_exam_result_in      => i_exam_result,
                                              id_doc_external_in     => i_id_doc(i),
                                              flg_type_in            => pk_exam_constant.g_media_archive_exam_result,
                                              flg_status_in          => pk_exam_constant.g_active,
                                              id_prof_last_update_in => i_prof.id,
                                              dt_last_update_tstz_in => g_sysdate_tstz);
                
                ELSIF i_flg_import(i) = 'U'
                THEN
                    g_error := 'CALL TO PK_DOC.UPDATE_DOC_INTERNAL';
                    IF NOT pk_doc.update_doc_internal(i_lang               => i_lang,
                                                      i_prof               => i_prof,
                                                      i_id_doc             => i_id_doc(i),
                                                      i_doc_type           => i_doc_type(i),
                                                      i_desc_doc_type      => i_desc_doc_type(i),
                                                      i_num_doc            => NULL,
                                                      i_dt_doc             => pk_date_utils.get_string_tstz(i_lang,
                                                                                                            i_prof,
                                                                                                            i_dt_doc(i),
                                                                                                            NULL),
                                                      i_dt_expire          => NULL,
                                                      i_orig_dest          => i_dest(i),
                                                      i_desc_ori_dest      => i_desc_dest(i),
                                                      i_orig_type          => i_ori_doc_type(i),
                                                      i_desc_ori_doc_type  => i_desc_ori_doc_type(i),
                                                      i_notes              => NULL,
                                                      i_sent_by            => NULL,
                                                      i_received           => NULL,
                                                      i_original           => i_original(i),
                                                      i_desc_original      => i_desc_original(i),
                                                      i_btn                => i_btn,
                                                      i_title              => i_title(i),
                                                      i_prof_perf_by       => NULL,
                                                      i_desc_perf_by       => i_desc_perf_by(i),
                                                      i_author             => NULL,
                                                      i_specialty          => NULL,
                                                      i_doc_language       => NULL,
                                                      i_desc_language      => NULL,
                                                      i_flg_publish        => NULL,
                                                      i_conf_code          => table_varchar(),
                                                      i_desc_conf_code     => table_varchar(),
                                                      i_code_coding_schema => table_varchar(),
                                                      i_conf_code_set      => table_varchar(),
                                                      i_desc_conf_code_set => table_varchar(),
                                                      i_notes_upd          => NULL,
                                                      o_id_doc_external    => l_doc_external,
                                                      o_error              => o_error)
                    
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    ts_exam_media_archive.upd(id_doc_external_in     => i_id_doc(i),
                                              id_prof_last_update_in => i_prof.id,
                                              dt_last_update_tstz_in => g_sysdate_tstz,
                                              where_in               => 'id_exam_req_det = ' ||
                                                                        l_exam_result.id_exam_req_det ||
                                                                        ' AND id_exam_result = ' || i_exam_result ||
                                                                        ' AND id_doc_external = ' || i_id_doc(i) ||
                                                                        ' AND flg_type = ''' ||
                                                                        pk_exam_constant.g_media_archive_exam_result || '''');
                ELSIF i_flg_import(i) = 'M'
                THEN
                    ts_exam_media_archive.ins(id_exam_req_det_in     => l_exam_result.id_exam_req_det,
                                              id_exam_result_in      => i_exam_result,
                                              id_doc_external_in     => i_id_doc(i),
                                              flg_type_in            => pk_exam_constant.g_media_archive_exam_result,
                                              flg_status_in          => pk_exam_constant.g_active,
                                              id_prof_last_update_in => i_prof.id,
                                              dt_last_update_tstz_in => g_sysdate_tstz);
                END IF;
            END LOOP;
        END IF;
    
        IF l_exam_req.flg_time != pk_exam_constant.g_flg_time_r
        THEN
            IF l_exam_req.id_prof_req != i_prof.id
            THEN
                l_sys_alert_event.id_sys_alert    := 3;
                l_sys_alert_event.id_software     := i_prof.software;
                l_sys_alert_event.id_institution  := i_prof.institution;
                l_sys_alert_event.id_patient      := l_exam_req.id_patient;
                l_sys_alert_event.id_episode      := l_exam_req.id_episode;
                l_sys_alert_event.id_record       := i_exam_result;
                l_sys_alert_event.dt_record       := g_sysdate_tstz;
                l_sys_alert_event.id_professional := l_exam_req.id_prof_req;
                l_sys_alert_event.id_room         := NULL;
                l_sys_alert_event.replace1        := 'EXAM.CODE_EXAM.' || l_exam_req.id_exam;
                l_sys_alert_event.replace2 := CASE
                                                  WHEN i_abnormality IS NOT NULL
                                                       AND i_abnormality != 7 THEN
                                                   pk_exam_constant.g_exam_urgent
                                                  ELSE
                                                   l_exam_req.flg_priority
                                              END;
                l_sys_alert_event.id_prof_order   := l_exam_req.id_prof_req;
            
                --Insere evento na tabela de alertas
                IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                        i_prof            => i_prof,
                                                        i_sys_alert_event => l_sys_alert_event,
                                                        i_flg_type_dest   => 'C',
                                                        o_error           => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        -- inserir em log de estados
        IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                i_prof       => i_prof,
                                i_id_episode => l_exam_req.id_episode,
                                i_flg_status => l_status_req,
                                i_id_record  => l_exam_req.id_exam_req,
                                i_flg_type   => pk_exam_constant.g_exam_type_req,
                                o_error      => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        IF l_exam_req.flg_type != pk_exam_constant.g_type_img
        THEN
            l_gener_barcode := pk_sysconfig.get_config('GENERATE_BARCODE_EXAM_RESULT', i_prof);
        
            IF l_gener_barcode = pk_exam_constant.g_yes
            THEN
                g_error := 'CALL TO PK_BARCODE.GENERATE_BARCODE';
                IF NOT pk_barcode.generate_barcode(i_lang         => i_lang,
                                                   i_barcode_type => 'E',
                                                   i_institution  => i_prof.institution,
                                                   i_software     => i_prof.software,
                                                   o_barcode      => l_barcode,
                                                   o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            END IF;
        END IF;
    
        g_error := 'CALL TO SET_FIRST_OBS';
        IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                      i_id_episode          => l_exam_req.id_episode,
                                      i_pat                 => NULL,
                                      i_prof                => i_prof,
                                      i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                      i_dt_last_interaction => g_sysdate_tstz,
                                      i_dt_first_obs        => g_sysdate_tstz,
                                      o_error               => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
        IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                  i_prof         => i_prof,
                                                  i_patient      => NULL,
                                                  i_episode      => l_exam_req.id_episode,
                                                  i_exam_req     => l_exam_req.id_exam_req,
                                                  i_exam_req_det => l_exam_result.id_exam_req_det,
                                                  o_error        => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'UPDATE_EXAM_RESULT',
                                              o_error);
            RETURN FALSE;
    END update_exam_result;

    FUNCTION update_exam_date
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_exam_req        IN table_number,
        i_dt_begin        IN table_varchar,
        i_notes_scheduler IN table_varchar,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam(l_exam_req NUMBER) IS
            SELECT erd.id_exam_req_det,
                   erd.id_exam,
                   nvl(er.id_episode, er.id_episode_origin) id_episode,
                   er.dt_begin_tstz,
                   erd.flg_status
              FROM exam_req er, exam_req_det erd
             WHERE er.id_exam_req = l_exam_req
               AND er.id_exam_req = erd.id_exam_req;
    
        l_dt_begin TIMESTAMP WITH LOCAL TIME ZONE;
    
        l_rows_out_req table_varchar := table_varchar();
        l_rows_out_det table_varchar := table_varchar();
    
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        FOR i IN 1 .. i_exam_req.count
        LOOP
            l_dt_begin := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin(i), NULL);
        
            FOR r_exam IN c_exam(i_exam_req(i))
            LOOP
                IF l_dt_begin > g_sysdate_tstz
                THEN
                    g_error := 'CALL PK_EXAM_CORE.SET_EXAM_HISTORY';
                    IF NOT pk_exam_core.set_exam_history(i_lang         => i_lang,
                                                         i_prof         => i_prof,
                                                         i_exam_req     => NULL,
                                                         i_exam_req_det => table_number(r_exam.id_exam_req_det),
                                                         o_error        => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    g_error := 'UPDATE EXAM_REQ';
                    ts_exam_req.upd(id_exam_req_in         => i_exam_req(i),
                                    flg_status_in          => pk_exam_constant.g_exam_pending,
                                    dt_begin_tstz_in       => l_dt_begin,
                                    id_prof_last_update_in => i_prof.id,
                                    dt_last_update_tstz_in => g_sysdate_tstz,
                                    rows_out               => l_rows_out_req);
                
                    g_error := 'UPDATE EXAM_REQ_DET';
                    ts_exam_req_det.upd(id_exam_req_det_in     => r_exam.id_exam_req_det,
                                        flg_status_in          => pk_exam_constant.g_exam_pending,
                                        dt_target_tstz_in      => l_dt_begin,
                                        notes_scheduler_in     => i_notes_scheduler(i),
                                        id_prof_last_update_in => i_prof.id,
                                        dt_last_update_tstz_in => g_sysdate_tstz,
                                        rows_out               => l_rows_out_det);
                
                ELSE
                    g_error := 'UPDATE EXAM_REQ';
                    ts_exam_req.upd(id_exam_req_in         => i_exam_req(i),
                                    dt_begin_tstz_in       => l_dt_begin,
                                    id_prof_last_update_in => i_prof.id,
                                    dt_last_update_tstz_in => g_sysdate_tstz,
                                    rows_out               => l_rows_out_req);
                
                    g_error := 'UPDATE EXAM_REQ_DET';
                    ts_exam_req_det.upd(id_exam_req_det_in     => r_exam.id_exam_req_det,
                                        dt_target_tstz_in      => l_dt_begin,
                                        notes_scheduler_in     => i_notes_scheduler(i),
                                        id_prof_last_update_in => i_prof.id,
                                        dt_last_update_tstz_in => g_sysdate_tstz,
                                        rows_out               => l_rows_out_det);
                END IF;
            
                g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
                IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                          i_prof         => i_prof,
                                                          i_patient      => NULL,
                                                          i_episode      => r_exam.id_episode,
                                                          i_exam_req     => i_exam_req(i),
                                                          i_exam_req_det => r_exam.id_exam_req_det,
                                                          o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                g_error := 'CALL TO PK_IA_EVENT_IMAGE.EXAM_REQUEST_UPDATE';
                pk_ia_event_image.exam_request_update(i_id_exam_req_det => r_exam.id_exam_req_det,
                                                      i_id_institution  => i_prof.institution,
                                                      i_flg_old_status  => r_exam.flg_status);
            END LOOP;
        END LOOP;
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_REQ',
                                      i_rowids     => l_rows_out_req,
                                      o_error      => o_error);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_REQ_DET',
                                      i_rowids     => l_rows_out_det,
                                      o_error      => o_error);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'UPDATE_EXAM_DATE',
                                              o_error);
            RETURN FALSE;
    END update_exam_date;

    FUNCTION cancel_exam_order
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        i_exam_req       IN table_number,
        i_cancel_reason  IN exam_req.id_cancel_reason%TYPE,
        i_cancel_notes   IN exam_req.notes_cancel%TYPE,
        i_prof_order     IN co_sign.id_prof_ordered_by%TYPE,
        i_dt_order       IN VARCHAR2,
        i_order_type     IN co_sign.id_order_type%TYPE,
        i_flg_schedule   IN VARCHAR2 DEFAULT pk_exam_constant.g_yes,
        i_transaction_id IN VARCHAR2 DEFAULT NULL,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_exam_req_det table_number := table_number();
    
        l_transaction_id VARCHAR2(4000);
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        FOR i IN 1 .. i_exam_req.count
        LOOP
            g_error := 'CALL PK_EXAM_CORE.SET_EXAM_HISTORY';
            IF NOT pk_exam_core.set_exam_history(i_lang         => i_lang,
                                                 i_prof         => i_prof,
                                                 i_exam_req     => i_exam_req(i),
                                                 i_exam_req_det => table_number(NULL),
                                                 o_error        => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            SELECT erd.id_exam_req_det
              BULK COLLECT
              INTO l_exam_req_det
              FROM exam_req_det erd
             WHERE erd.id_exam_req = i_exam_req(i)
               AND erd.flg_status NOT IN (pk_exam_constant.g_exam_partial,
                                          pk_exam_constant.g_exam_result,
                                          pk_exam_constant.g_exam_read,
                                          pk_exam_constant.g_exam_cancel);
        
            g_error := 'CALL TO PK_EXAM_CORE.CANCEL_EXAM_REQUEST';
            IF NOT pk_exam_core.cancel_exam_request(i_lang           => i_lang,
                                                    i_prof           => i_prof,
                                                    i_exam_req_det   => l_exam_req_det,
                                                    i_dt_cancel      => NULL,
                                                    i_cancel_reason  => i_cancel_reason,
                                                    i_cancel_notes   => i_cancel_notes,
                                                    i_prof_order     => i_prof_order,
                                                    i_dt_order       => i_dt_order,
                                                    i_order_type     => i_order_type,
                                                    i_flg_schedule   => i_flg_schedule,
                                                    i_transaction_id => l_transaction_id,
                                                    o_error          => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END LOOP;
    
        IF i_transaction_id IS NULL
        THEN
            pk_schedule_api_upstream.do_commit(l_transaction_id, i_prof);
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              g_error_code,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CANCEL_EXAM_REQ',
                                              'U',
                                              o_error);
        
            pk_schedule_api_upstream.do_rollback(l_transaction_id, i_prof);
            pk_utils.undo_changes;
            RETURN FALSE;
        
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CANCEL_EXAM_ORDER',
                                              o_error);
            pk_schedule_api_upstream.do_rollback(l_transaction_id, i_prof);
            RETURN FALSE;
    END cancel_exam_order;

    FUNCTION cancel_exam_request
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_exam_req_det     IN table_number,
        i_dt_cancel        IN VARCHAR2,
        i_cancel_reason    IN exam_req_det.id_cancel_reason%TYPE,
        i_cancel_notes     IN exam_req_det.notes_cancel%TYPE,
        i_prof_order       IN co_sign.id_prof_ordered_by%TYPE,
        i_dt_order         IN VARCHAR2,
        i_order_type       IN co_sign.id_order_type%TYPE,
        i_flg_schedule     IN VARCHAR2 DEFAULT pk_exam_constant.g_yes,
        i_transaction_id   IN VARCHAR2 DEFAULT NULL,
        i_flg_cancel_event IN VARCHAR2 DEFAULT 'Y',
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_req(i_exam_req_det IN exam_req_det.id_exam_req_det%TYPE) IS
            SELECT erd.id_exam_req,
                   er.dt_req_tstz,
                   erd.flg_status,
                   erd.id_exam,
                   e.flg_type,
                   er.id_prof_req,
                   erd.id_movement,
                   erd.id_co_sign_order,
                   er.id_patient,
                   nvl(er.id_episode, er.id_episode_origin) id_episode
              FROM exam_req_det erd
              JOIN exam_req er
                ON er.id_exam_req = erd.id_exam_req
              JOIN exam e
                ON e.id_exam = erd.id_exam
              LEFT JOIN movement mov
                ON mov.id_movement = erd.id_movement
             WHERE erd.id_exam_req_det = i_exam_req_det;
    
        CURSOR c_episode_type(l_episode IN episode.id_episode%TYPE) IS
            SELECT e.id_epis_type, e.id_visit
              FROM episode e
             WHERE e.id_episode = l_episode;
    
        CURSOR c_episode_exam(l_episode IN episode.id_episode%TYPE) IS
            SELECT 'X'
              FROM exam_req er
             WHERE er.id_episode = l_episode
               AND er.flg_status NOT IN
                   (pk_exam_constant.g_exam_result, pk_exam_constant.g_exam_read, pk_exam_constant.g_exam_cancel);
    
        l_exam_req     c_exam_req%ROWTYPE;
        l_episode_type c_episode_type%ROWTYPE;
        l_episode_exam c_episode_exam%ROWTYPE;
    
        l_char VARCHAR2(1 CHAR);
    
        l_intf_canc_req sys_config.value%TYPE := pk_sysconfig.get_config('ALERT_INTF_CANCEL_EXAM_REQ_WITH_RESULT',
                                                                         i_prof);
    
        l_dt_cancel       TIMESTAMP WITH LOCAL TIME ZONE;
        l_cancel_notes    exam_req_det.notes_cancel%TYPE;
        l_id_co_sign      co_sign.id_co_sign%TYPE;
        l_id_co_sign_hist co_sign_hist.id_co_sign_hist%TYPE;
    
        l_intf_cancel_reason table_varchar;
    
        l_print_list_jobs        table_number;
        l_print_list_jobs_out    table_number;
        l_print_job_context_data print_list_job.context_data%TYPE;
        l_print_args             table_varchar;
        l_json                   json_object_t;
        l_context_data           VARCHAR2(1000 CHAR);
        l_json_exam_req_det      VARCHAR2(1000 CHAR);
    
        l_sys_alert_event sys_alert_event%ROWTYPE;
    
        l_transaction_id VARCHAR2(4000);
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        FOR i IN 1 .. i_exam_req_det.count
        LOOP
            g_error := 'CALL PK_EXAM_CORE.SET_EXAM_HISTORY';
            IF NOT pk_exam_core.set_exam_history(i_lang         => i_lang,
                                                 i_prof         => i_prof,
                                                 i_exam_req     => NULL,
                                                 i_exam_req_det => table_number(i_exam_req_det(i)),
                                                 o_error        => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            g_error := 'OPEN C_EXAM_REQ';
            OPEN c_exam_req(i_exam_req_det(i));
            FETCH c_exam_req
                INTO l_exam_req;
            CLOSE c_exam_req;
        
            IF i_dt_cancel IS NOT NULL
            THEN
                IF i_dt_cancel IS NULL
                THEN
                    l_dt_cancel := g_sysdate_tstz;
                ELSE
                    l_dt_cancel := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_cancel, NULL);
                END IF;
            ELSE
                l_dt_cancel := g_sysdate_tstz;
            END IF;
        
            -- New validation for ADW
            IF l_dt_cancel < l_exam_req.dt_req_tstz
            THEN
                l_dt_cancel := l_exam_req.dt_req_tstz;
            END IF;
        
            --IF no notes are provided and the cancel reason 
            --is the patient death then, fullfills the cancel notes.  
            IF i_cancel_notes IS NULL
               AND i_cancel_reason = 69
            THEN
                l_cancel_notes := pk_message.get_message(i_lang, i_prof, pk_death_registry.c_code_msg_death);
            ELSE
                l_cancel_notes := i_cancel_notes;
            END IF;
        
            -- Detail may only be cancelled if it has not been cancelled yet, nor results 
            -- OR if it's configured to allow the cancellation of requisitions with results by interfaces               
            IF (l_intf_canc_req = pk_alert_constant.g_yes AND l_exam_req.flg_status != pk_exam_constant.g_exam_cancel)
               OR l_exam_req.flg_status NOT IN
               (pk_exam_constant.g_exam_cancel, pk_exam_constant.g_exam_result, pk_exam_constant.g_exam_read)
            THEN
                IF l_exam_req.id_co_sign_order IS NOT NULL
                THEN
                    g_error := 'CALL PK_CO_SIGN_API.SET_TASK_OUTDATED';
                    IF NOT pk_co_sign_api.set_task_outdated(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_episode         => l_exam_req.id_episode,
                                                            i_id_co_sign      => NULL,
                                                            i_id_co_sign_hist => l_exam_req.id_co_sign_order,
                                                            i_dt_update       => g_sysdate_tstz,
                                                            o_id_co_sign_hist => l_id_co_sign_hist,
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                IF i_order_type IS NOT NULL
                THEN
                    g_error := 'CALL PK_CO_SIGN_API.SET_PENDING_CO_SIGN_TASK';
                    IF NOT pk_co_sign_api.set_pending_co_sign_task(i_lang                   => i_lang,
                                                              i_prof                   => i_prof,
                                                              i_episode                => l_exam_req.id_episode,
                                                              i_id_task_type           => CASE
                                                                                              WHEN l_exam_req.flg_type =
                                                                                                   pk_exam_constant.g_type_img THEN
                                                                                               pk_alert_constant.g_task_imaging_exams
                                                                                              ELSE
                                                                                               pk_alert_constant.g_task_other_exams
                                                                                          END,
                                                              i_cosign_def_action_type => pk_co_sign_api.g_cosign_action_def_cancel,
                                                              i_id_task                => i_exam_req_det(i),
                                                              i_id_task_group          => i_exam_req_det(i),
                                                              i_id_order_type          => i_order_type,
                                                              i_id_prof_created        => i_prof.id,
                                                              i_id_prof_ordered_by     => i_prof_order,
                                                              i_dt_created             => g_sysdate_tstz,
                                                              i_dt_ordered_by          => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                        i_prof,
                                                                                                                        i_dt_order,
                                                                                                                        NULL),
                                                              o_id_co_sign             => l_id_co_sign,
                                                              o_id_co_sign_hist        => l_id_co_sign_hist,
                                                              o_error                  => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                g_error := 'UPDATE EXAM_REQ_DET';
                ts_exam_req_det.upd(id_exam_req_det_in     => i_exam_req_det(i),
                                    flg_status_in          => pk_exam_constant.g_exam_cancel,
                                    id_prof_cancel_in      => i_prof.id,
                                    notes_cancel_in        => l_cancel_notes,
                                    notes_cancel_nin       => FALSE,
                                    dt_cancel_tstz_in      => l_dt_cancel,
                                    dt_cancel_tstz_nin     => FALSE,
                                    id_cancel_reason_in    => i_cancel_reason,
                                    id_cancel_reason_nin   => FALSE,
                                    id_co_sign_cancel_in   => CASE
                                                                  WHEN i_order_type IS NOT NULL THEN
                                                                   l_id_co_sign_hist
                                                                  ELSE
                                                                   NULL
                                                              END,
                                    id_prof_last_update_in => i_prof.id,
                                    dt_last_update_tstz_in => g_sysdate_tstz,
                                    rows_out               => l_rows_out);
            
                g_error := 'CALL PROCESS_UPDATE';
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'EXAM_REQ_DET',
                                              i_rowids     => l_rows_out,
                                              o_error      => o_error);
            
                IF i_flg_cancel_event = pk_alert_constant.g_yes
                THEN
                    IF l_exam_req.flg_status = pk_exam_constant.g_exam_exterior
                    THEN
                        g_error := 'CALL TO PK_IA_EVENT_IMAGE.EXAM_REQUEST_EXTERNAL_CANCEL';
                        pk_ia_event_image.exam_request_external_cancel(i_id_exam_req_det => i_exam_req_det(i),
                                                                       i_id_institution  => i_prof.institution,
                                                                       i_flg_old_status  => l_exam_req.flg_status);
                    ELSE
                        g_error := 'CALL TO PK_IA_EVENT_IMAGE.EXAM_REQUEST_CANCEL';
                        pk_ia_event_image.exam_request_cancel(i_id_exam_req_det => i_exam_req_det(i),
                                                              i_id_institution  => i_prof.institution,
                                                              i_flg_old_status  => l_exam_req.flg_status);
                    END IF;
                END IF;
            
                g_error := 'CALL PK_EXAM_EXTERNAL.UPDATE_TDE_TASK_STATE';
                IF NOT pk_exam_external.update_tde_task_state(i_lang         => i_lang,
                                                              i_prof         => i_prof,
                                                              i_exam_req_det => i_exam_req_det(i),
                                                              i_flg_action   => pk_exam_constant.g_exam_cancel,
                                                              o_error        => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            
                IF l_exam_req.id_episode IS NOT NULL
                THEN
                    IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                            i_prof       => i_prof,
                                            i_id_episode => l_exam_req.id_episode,
                                            i_flg_status => pk_exam_constant.g_exam_nr,
                                            i_id_record  => i_exam_req_det(i),
                                            i_flg_type   => pk_exam_constant.g_exam_type_det,
                                            o_error      => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    l_sys_alert_event.id_sys_alert := 33;
                    l_sys_alert_event.id_episode   := l_exam_req.id_episode;
                    l_sys_alert_event.id_record    := i_exam_req_det(i);
                
                    IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                
                    l_sys_alert_event.id_sys_alert := 39;
                
                    IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            o_error           => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            
                IF l_exam_req.id_movement IS NOT NULL
                THEN
                    g_error := 'OPEN C_MOV';
                    BEGIN
                        SELECT DISTINCT 'X'
                          INTO l_char
                          FROM exam_req_det erd
                         WHERE erd.id_exam_req_det != i_exam_req_det(i)
                           AND erd.id_movement = l_exam_req.id_movement
                           AND erd.flg_status != pk_exam_constant.g_exam_cancel;
                    EXCEPTION
                        WHEN no_data_found THEN
                        
                            g_error := 'CALL PK_MOVEMENT.CANCEL_MOVEMENT_REQUEST';
                            IF NOT pk_movement.cancel_movement_request(i_lang     => i_lang,
                                                                       i_prof     => i_prof,
                                                                       i_movement => l_exam_req.id_movement,
                                                                       i_notes    => l_cancel_notes,
                                                                       o_error    => o_error)
                            THEN
                                RAISE g_other_exception;
                            END IF;
                    END;
                END IF;
            END IF;
        
            -- Searches the existence of other details of the same order not cancelled
            g_error := 'OPEN C_REQ';
            BEGIN
                SELECT DISTINCT 'X'
                  INTO l_char
                  FROM exam_req_det
                 WHERE id_exam_req_det != i_exam_req_det(i)
                   AND id_exam_req = l_exam_req.id_exam_req
                   AND flg_status != pk_exam_constant.g_exam_cancel;
            
                -- Search for other details in the same order (not cancelled)
                g_error := 'OPEN C_REQ_FIN';
                BEGIN
                    SELECT DISTINCT 'X'
                      INTO l_char
                      FROM exam_req_det
                     WHERE id_exam_req_det != i_exam_req_det(i)
                       AND id_exam_req = l_exam_req.id_exam_req
                       AND flg_status NOT IN (pk_exam_constant.g_exam_result, pk_exam_constant.g_exam_read);
                EXCEPTION
                    WHEN no_data_found THEN
                    
                        -- If there are no more unfinished details, the exam order (req) may be concluded
                        l_rows_out := NULL;
                        g_error    := 'UPDATE EXAM_REQ(2)';
                        ts_exam_req.upd(id_exam_req_in => l_exam_req.id_exam_req,
                                        flg_status_in  => pk_exam_constant.g_exam_result,
                                        rows_out       => l_rows_out);
                    
                        g_error := 'CALL PROCESS_UPDATE';
                        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                      i_prof       => i_prof,
                                                      i_table_name => 'EXAM_REQ',
                                                      i_rowids     => l_rows_out,
                                                      o_error      => o_error);
                    
                        IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                                i_prof       => i_prof,
                                                i_id_episode => l_exam_req.id_episode,
                                                i_flg_status => pk_exam_constant.g_exam_result,
                                                i_id_record  => l_exam_req.id_exam_req,
                                                i_flg_type   => pk_exam_constant.g_exam_type_req,
                                                o_error      => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                END;
            EXCEPTION
                WHEN no_data_found THEN
                
                    l_rows_out := NULL;
                
                    -- If there are no more cancelled details, the exam order (req) may be cancelled
                    g_error := 'UPDATE EXAM_REQ(1)';
                    ts_exam_req.upd(flg_status_in     => pk_exam_constant.g_exam_cancel,
                                    id_prof_cancel_in => i_prof.id,
                                    dt_cancel_tstz_in => g_sysdate_tstz,
                                    where_in          => 'id_exam_req = ' || l_exam_req.id_exam_req ||
                                                         ' AND flg_status != ''' || pk_exam_constant.g_exam_cancel || '''',
                                    rows_out          => l_rows_out);
                
                    g_error := 'CALL PROCESS_UPDATE';
                    t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'EXAM_REQ',
                                                  i_rowids     => l_rows_out,
                                                  o_error      => o_error);
                
                    IF l_exam_req.id_episode IS NOT NULL
                    THEN
                        IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                                i_prof       => i_prof,
                                                i_id_episode => l_exam_req.id_episode,
                                                i_flg_status => pk_exam_constant.g_exam_cancel,
                                                i_id_record  => l_exam_req.id_exam_req,
                                                i_flg_type   => pk_exam_constant.g_exam_type_req,
                                                o_error      => o_error)
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    END IF;
            END;
        
            -- remove from print list (if exists)
            -- getting id_print_list_job related to this exam
            g_error           := 'CALL PK_PRINT_LIST_DB.GET_SIMILAR_PRINT_LIST_JOBS';
            l_print_list_jobs := pk_print_list_db.get_similar_print_list_jobs(i_lang                   => i_lang,
                                                                              i_prof                   => i_prof,
                                                                              i_patient                => l_exam_req.id_patient,
                                                                              i_episode                => l_exam_req.id_episode,
                                                                              i_print_list_area        => CASE
                                                                                                              WHEN l_exam_req.flg_type = pk_exam_constant.g_type_img THEN
                                                                                                               pk_print_list_db.g_print_list_area_img_exam
                                                                                                              ELSE
                                                                                                               pk_print_list_db.g_print_list_area_other_exam
                                                                                                          END,
                                                                              i_print_job_context_data => to_clob(i_exam_req_det(i) || '|'));
        
            IF l_print_list_jobs IS NOT NULL
               AND l_print_list_jobs.count > 0
            THEN
                FOR j IN 1 .. l_print_list_jobs.count
                LOOP
                    g_error                  := 'CALL PK_EXAMS_EXTERNAL_API_DB.GET_EXAM_IN_PRINT_LIST';
                    l_print_job_context_data := pk_exams_external_api_db.get_exam_in_print_list(i_lang           => i_lang,
                                                                                                i_prof           => i_prof,
                                                                                                i_print_list_job => l_print_list_jobs(j));
                
                    IF dbms_lob.compare(l_print_job_context_data, to_clob(i_exam_req_det(i) || '|')) = 0
                    THEN
                        g_error := 'CALL PK_PRINT_LIST_DB.SET_PRINT_JOBS_CANCEL';
                        IF NOT pk_print_list_db.set_print_jobs_cancel(i_lang              => i_lang,
                                                                      i_prof              => i_prof,
                                                                      i_id_print_list_job => table_number(l_print_list_jobs(j)),
                                                                      o_id_print_list_job => l_print_list_jobs_out,
                                                                      o_error             => o_error)
                        
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    ELSE
                        g_error := 'CALL PK_PRINT_LIST_DB.GET_PRINT_LIST_JOBS_ARGS';
                        IF NOT pk_print_list_db.get_print_list_jobs_args(i_lang               => i_lang,
                                                                         i_prof               => i_prof,
                                                                         i_id_print_list_jobs => table_number(l_print_list_jobs(j)),
                                                                         o_print_args         => l_print_args,
                                                                         o_error              => o_error)
                        
                        THEN
                            RAISE g_other_exception;
                        END IF;
                    
                        l_context_data      := REPLACE(to_char(l_print_job_context_data), i_exam_req_det(i) || '|');
                        l_json_exam_req_det := substr(REPLACE(to_char(l_context_data), '|', ','),
                                                      1,
                                                      length(REPLACE(to_char(l_context_data), '|', ',')) - 1);
                    
                        IF l_json_exam_req_det IS NOT NULL
                        THEN
                            IF l_print_args.exists(1)
                               AND l_print_args(1) IS NOT NULL
                            THEN
                                l_json := json_object_t(l_print_args(1));
                            END IF;
                        
                            IF l_json.has('ID_REQ_DET')
                            THEN
                                -- if found, replace value of parameter ID_REQ_DET without the i_exam_req_det
                                g_error := 'Set ID_REQ_DET';
                                l_json.put('ID_REQ_DET', l_json_exam_req_det);
                            
                                g_error := 'CALL PK_PRINT_LIST_DB.UPDATE_PRINT_LIST_JOBS';
                                IF NOT pk_print_list_db.update_print_list_jobs(i_lang            => i_lang,
                                                                               i_prof            => i_prof,
                                                                               i_print_list_jobs => table_number(l_print_list_jobs(j)),
                                                                               i_context_data    => table_clob(l_context_data),
                                                                               i_print_arguments => table_varchar(l_json.to_string()),
                                                                               o_print_list_jobs => l_print_list_jobs_out,
                                                                               o_error           => o_error)
                                
                                THEN
                                    RAISE g_other_exception;
                                END IF;
                            END IF;
                        ELSE
                            g_error := 'CALL PK_PRINT_LIST_DB.SET_PRINT_JOBS_CANCEL';
                            IF NOT pk_print_list_db.set_print_jobs_cancel(i_lang              => i_lang,
                                                                          i_prof              => i_prof,
                                                                          i_id_print_list_job => table_number(l_print_list_jobs(j)),
                                                                          o_id_print_list_job => l_print_list_jobs_out,
                                                                          o_error             => o_error)
                            
                            THEN
                                RAISE g_other_exception;
                            END IF;
                        END IF;
                    END IF;
                END LOOP;
            END IF;
        
            g_error := 'OPEN C_EPISODE_TYPE';
            OPEN c_episode_type(l_exam_req.id_episode);
            FETCH c_episode_type
                INTO l_episode_type;
            CLOSE c_episode_type;
        
            -- If there is a sheduling attached to the order and the user confirmed the intention to cancel it, 
            -- the exam schedule is also cancelled
            IF i_flg_schedule = pk_exam_constant.g_yes
               AND l_episode_type.id_epis_type NOT IN
               (pk_exam_constant.g_episode_type_rad, pk_exam_constant.g_episode_type_exm)
            THEN
                -- gets a new transaction ID and begins the transaction (for the Scheduler 3.0 transactions)
                g_error          := 'CALL PK_SCHEDULE_API_UPSTREAM.BEGIN_NEW_TRANSACTION';
                l_transaction_id := pk_schedule_api_upstream.begin_new_transaction(i_transaction_id, i_prof);
            
                g_error := 'CALL PK_SCHEDULE_EXAM.CANCEL_REQ_SCHEDULES';
                IF NOT pk_schedule_exam.cancel_req_schedules(i_lang             => i_lang,
                                                             i_prof             => i_prof,
                                                             i_id_req           => l_exam_req.id_exam_req,
                                                             i_ids_exams        => table_number(l_exam_req.id_exam),
                                                             i_id_cancel_reason => 28,
                                                             i_cancel_notes     => l_cancel_notes,
                                                             i_transaction_id   => l_transaction_id,
                                                             o_error            => o_error)
                
                THEN
                    RAISE g_other_exception;
                END IF;
            
                --remote commit on the new SCH 3.0 Doesn't affect PFH.
                IF i_transaction_id IS NULL
                THEN
                    pk_schedule_api_upstream.do_commit(l_transaction_id, i_prof);
                END IF;
            END IF;
        
            -- If there is a procedure associated to the exam order
            g_error := 'CALL TO PK_ICNP_FO_API_DB.SET_SUGGS_STATUS_CANCEL';
            pk_icnp_fo_api_db.set_suggs_status_cancel(i_lang         => i_lang,
                                                      i_prof         => i_prof,
                                                      i_request_ids  => i_exam_req_det,
                                                      i_task_type_id => CASE
                                                                            WHEN l_exam_req.flg_type =
                                                                                 pk_exam_constant.g_type_img THEN
                                                                             pk_alert_constant.g_task_imaging_exams
                                                                            ELSE
                                                                             pk_alert_constant.g_task_other_exams
                                                                        END,
                                                      i_sysdate_tstz => g_sysdate_tstz);
        
            g_error := 'CALL TO SET_FIRST_OBS';
            IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                          i_id_episode          => l_exam_req.id_episode,
                                          i_pat                 => NULL,
                                          i_prof                => i_prof,
                                          i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                          i_dt_last_interaction => g_sysdate_tstz,
                                          i_dt_first_obs        => g_sysdate_tstz,
                                          o_error               => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            g_error := 'CALL TO PK_EXAMS.SET_TECHNICIAN_GRID_STATUS';
            IF NOT pk_exams.set_technician_grid_status(i_lang           => i_lang,
                                                       i_prof           => i_prof,
                                                       i_patient        => l_exam_req.id_patient,
                                                       i_episode        => l_exam_req.id_episode,
                                                       i_exam_req       => l_exam_req.id_exam_req,
                                                       i_flg_contact    => pk_exam_constant.g_exam_cancel,
                                                       i_transaction_id => l_transaction_id,
                                                       o_error          => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            l_intf_cancel_reason := pk_string_utils.str_split(pk_sysconfig.get_config('ALERT_INTF_CANCEL_REASON_EXM',
                                                                                      i_prof),
                                                              '|');
        
            --Checks if the event is likely to generate the Cancelled Exams alert        
            BEGIN
                SELECT /*+opt_estimate(table t rows=1)*/
                DISTINCT 'X'
                  INTO l_char
                  FROM TABLE(l_intf_cancel_reason)
                 WHERE column_value = i_cancel_reason;
            
                l_sys_alert_event.id_sys_alert    := 310;
                l_sys_alert_event.id_software     := i_prof.software;
                l_sys_alert_event.id_institution  := i_prof.institution;
                l_sys_alert_event.id_episode      := l_exam_req.id_episode;
                l_sys_alert_event.id_record       := i_exam_req_det(i);
                l_sys_alert_event.dt_record       := g_sysdate_tstz;
                l_sys_alert_event.id_professional := l_exam_req.id_prof_req;
                l_sys_alert_event.replace1        := 'EXAM.CODE_EXAM.' || l_exam_req.id_exam;
                l_sys_alert_event.id_intf_type    := 2;
                l_sys_alert_event.replace2        := pk_sysconfig.get_config('ALERT_EXAM_TIMEOUT', i_prof);
            
                --Inserts event into sys_alert_event table
                IF NOT pk_alerts.insert_sys_alert_event(i_lang            => i_lang,
                                                        i_prof            => i_prof,
                                                        i_sys_alert_event => l_sys_alert_event,
                                                        i_flg_type_dest   => 'R',
                                                        o_error           => o_error)
                THEN
                    RAISE g_other_exception;
                END IF;
            EXCEPTION
                WHEN no_data_found THEN
                    l_char := NULL;
            END;
        
            IF l_episode_type.id_epis_type IN
               (pk_exam_constant.g_episode_type_rad, pk_exam_constant.g_episode_type_exm)
            THEN
                g_error := 'OPEN C_EPISODE_EXAM';
                OPEN c_episode_exam(l_exam_req.id_episode);
                FETCH c_episode_exam
                    INTO l_episode_exam;
                g_found := c_episode_exam%FOUND;
                CLOSE c_episode_exam;
            
                IF NOT g_found
                THEN
                    IF NOT pk_visit.set_visit_end(i_lang          => i_lang,
                                                  i_prof          => i_prof,
                                                  i_prof_cat_type => pk_prof_utils.get_category(i_lang, i_prof),
                                                  i_id_visit      => l_episode_type.id_visit,
                                                  o_error         => o_error)
                    THEN
                        RAISE g_other_exception;
                    END IF;
                END IF;
            END IF;
        
            -- Updates the technicians' grids
            g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
            IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                      i_prof         => i_prof,
                                                      i_patient      => l_exam_req.id_patient,
                                                      i_episode      => l_exam_req.id_episode,
                                                      i_exam_req     => l_exam_req.id_exam_req,
                                                      i_exam_req_det => i_exam_req_det(i),
                                                      o_error        => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CANCEL_EXAM_REQUEST',
                                              o_error);
            pk_schedule_api_upstream.do_rollback(l_transaction_id, i_prof);
            RETURN FALSE;
    END cancel_exam_request;

    FUNCTION cancel_exam_perform
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_exam_req_det  IN exam_req_det.id_exam_req_det%TYPE,
        i_cancel_reason IN cancel_reason.id_cancel_reason%TYPE,
        i_notes_cancel  IN exam_req_det.notes_cancel%TYPE,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_req IS
            SELECT erd.id_exam,
                   e.flg_type,
                   er.id_episode,
                   erd.id_exam_req,
                   er.flg_time,
                   er.id_prof_req,
                   er.dt_begin_tstz,
                   er.dt_pend_req_tstz,
                   er.dt_req_tstz,
                   erd.id_prof_performed,
                   erd.id_epis_doc_perform id_epis_documentation
              FROM exam_req_det erd, exam e, exam_req er
             WHERE erd.id_exam_req_det = i_exam_req_det
               AND er.id_exam_req = erd.id_exam_req
               AND e.id_exam = erd.id_exam;
    
        CURSOR c_supply_workflow IS
            SELECT sw.id_supply_workflow
              FROM supply_workflow sw
             WHERE sw.id_context = i_exam_req_det
               AND sw.flg_context IN (pk_exam_constant.g_type_img, pk_exam_constant.g_type_exm)
               AND sw.flg_status != pk_supplies_constant.g_sww_cancelled;
    
        CURSOR c_exam_time_out IS
            SELECT eto.*
              FROM exam_time_out eto
             WHERE eto.id_exam_req_det = i_exam_req_det;
    
        l_exam_req      c_exam_req%ROWTYPE;
        l_exam_time_out c_exam_time_out%ROWTYPE;
    
        l_exam_req_det      exam_req_det%ROWTYPE;
        l_exam_req_det_hist exam_req_det_hist%ROWTYPE;
    
        l_exam_question_response t_tbl_exam_question_response;
    
        l_previous_exam_req_status     exam_req.flg_status%TYPE;
        l_previous_exam_req_det_status exam_req_det.flg_status%TYPE;
    
        l_id_supply_workflow table_number;
    
        l_flg_show  sys_message.desc_message%TYPE;
        l_msg_title sys_message.desc_message%TYPE;
        l_msg_text  sys_message.desc_message%TYPE;
        l_button    sys_message.desc_message%TYPE;
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        -- Get exam_req and exam_req_det information
        g_error := 'OPEN C_EXAM_REQ';
        OPEN c_exam_req;
        FETCH c_exam_req
            INTO l_exam_req;
        CLOSE c_exam_req;
    
        -- cancel template info 
        IF l_exam_req.id_epis_documentation IS NOT NULL
        THEN
            IF NOT pk_touch_option.cancel_epis_doc_no_commit(i_lang          => i_lang,
                                                             i_prof          => i_prof,
                                                             i_id_epis_doc   => l_exam_req.id_epis_documentation,
                                                             i_notes         => i_notes_cancel,
                                                             i_test          => pk_alert_constant.g_no,
                                                             i_cancel_reason => i_cancel_reason,
                                                             o_flg_show      => l_flg_show,
                                                             o_msg_title     => l_msg_title,
                                                             o_msg_text      => l_msg_text,
                                                             o_button        => l_button,
                                                             o_error         => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        IF l_exam_req.flg_time != pk_exam_constant.g_flg_time_r
        THEN
            --get the previous status of exam_req_det on ti_log
            g_error := 'GET PREVIOUS EXAM_REQ_DET STATUS';
            SELECT flg_status
              INTO l_previous_exam_req_det_status
              FROM (SELECT flg_status, rownum line
                      FROM (SELECT t.flg_status
                              FROM ti_log t
                             WHERE t.flg_type = pk_exam_constant.g_exam_type_det
                               AND t.id_episode = l_exam_req.id_episode
                               AND t.flg_status NOT IN (pk_exam_constant.g_exam_result,
                                                        pk_exam_constant.g_exam_read,
                                                        pk_exam_constant.g_exam_exec)
                               AND t.id_record = i_exam_req_det
                             ORDER BY t.dt_creation_tstz DESC))
             WHERE line = 1;
        
            -- inserts the execution    
            g_error := 'CALL PK_EXAM_CORE.SET_EXAM_HISTORY';
            IF NOT pk_exam_core.set_exam_history(i_lang         => i_lang,
                                                 i_prof         => i_prof,
                                                 i_exam_req     => NULL,
                                                 i_exam_req_det => table_number(i_exam_req_det),
                                                 o_error        => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            -- inserts the cancelled record
            g_error := 'GET EXAM_REQ_DET:' || i_exam_req_det;
            SELECT erd.*
              INTO l_exam_req_det
              FROM exam_req_det erd
             WHERE erd.id_exam_req_det = i_exam_req_det;
        
            l_exam_req_det_hist.id_exam_req_det        := l_exam_req_det.id_exam_req_det;
            l_exam_req_det_hist.id_erd_parent          := l_exam_req_det.id_erd_parent;
            l_exam_req_det_hist.id_exam_req            := l_exam_req_det.id_exam_req;
            l_exam_req_det_hist.id_exam                := l_exam_req_det.id_exam;
            l_exam_req_det_hist.flg_status             := pk_exam_constant.g_exam_cancel;
            l_exam_req_det_hist.notes                  := l_exam_req_det.notes;
            l_exam_req_det_hist.flg_pre_req            := l_exam_req_det.flg_pre_req;
            l_exam_req_det_hist.id_movement            := l_exam_req_det.id_movement;
            l_exam_req_det_hist.id_prof_cancel         := i_prof.id;
            l_exam_req_det_hist.notes_cancel           := i_notes_cancel;
            l_exam_req_det_hist.barcode                := l_exam_req_det.barcode;
            l_exam_req_det_hist.id_room                := l_exam_req_det.id_room;
            l_exam_req_det_hist.notes_tech             := l_exam_req_det.notes_tech;
            l_exam_req_det_hist.id_pat_pregnancy       := l_exam_req_det.id_pat_pregnancy;
            l_exam_req_det_hist.dt_target_tstz         := l_exam_req_det.dt_target_tstz;
            l_exam_req_det_hist.dt_final_target_tstz   := l_exam_req_det.dt_final_target_tstz;
            l_exam_req_det_hist.dt_final_result_tstz   := l_exam_req_det.dt_final_result_tstz;
            l_exam_req_det_hist.dt_cancel_tstz         := g_sysdate_tstz;
            l_exam_req_det_hist.id_prof_performed      := l_exam_req_det.id_prof_performed;
            l_exam_req_det_hist.start_time             := l_exam_req_det.start_time;
            l_exam_req_det_hist.end_time               := l_exam_req_det.end_time;
            l_exam_req_det_hist.flg_referral           := l_exam_req_det.flg_referral;
            l_exam_req_det_hist.id_cancel_reason       := i_cancel_reason;
            l_exam_req_det_hist.id_clinical_purpose    := l_exam_req_det.id_clinical_purpose;
            l_exam_req_det_hist.flg_location           := l_exam_req_det.flg_location;
            l_exam_req_det_hist.id_exec_institution    := l_exam_req_det.id_exec_institution;
            l_exam_req_det_hist.id_exam_codification   := l_exam_req_det.id_exam_codification;
            l_exam_req_det_hist.id_task_dependency     := l_exam_req_det.id_task_dependency;
            l_exam_req_det_hist.flg_req_origin_module  := l_exam_req_det.flg_req_origin_module;
            l_exam_req_det_hist.id_prof_performed_reg  := l_exam_req_det.id_prof_performed_reg;
            l_exam_req_det_hist.dt_performed_reg       := l_exam_req_det.dt_performed_reg;
            l_exam_req_det_hist.id_order_recurrence    := l_exam_req_det.id_order_recurrence;
            l_exam_req_det_hist.flg_fasting            := l_exam_req_det.flg_fasting;
            l_exam_req_det_hist.flg_prn                := l_exam_req_det.flg_prn;
            l_exam_req_det_hist.prn_notes              := l_exam_req_det.prn_notes;
            l_exam_req_det_hist.id_pat_health_plan     := l_exam_req_det.id_pat_health_plan;
            l_exam_req_det_hist.id_cdr                 := l_exam_req_det.id_cdr;
            l_exam_req_det_hist.flg_laterality         := l_exam_req_det.flg_laterality;
            l_exam_req_det_hist.clinical_purpose_notes := l_exam_req_det.clinical_purpose_notes;
            l_exam_req_det_hist.dt_exam_req_det_hist   := current_timestamp;
            l_exam_req_det_hist.id_exam_group          := l_exam_req_det.id_exam_group;
            l_exam_req_det_hist.flg_priority           := l_exam_req_det.flg_priority;
            l_exam_req_det_hist.notes_patient          := l_exam_req_det.notes_patient;
            l_exam_req_det_hist.prof_dep_clin_serv     := l_exam_req_det.prof_dep_clin_serv;
            l_exam_req_det_hist.id_prof_last_update    := l_exam_req_det.id_prof_last_update;
            l_exam_req_det_hist.dt_last_update_tstz    := l_exam_req_det.dt_last_update_tstz;
            l_exam_req_det_hist.id_pat_exemption       := l_exam_req_det.id_pat_exemption;
            l_exam_req_det_hist.id_epis_doc_perform    := l_exam_req_det.id_epis_doc_perform;
        
            l_exam_req_det_hist.operation_type := 'U';
            l_exam_req_det_hist.operation_time := current_timestamp;
            l_exam_req_det_hist.operation_user := i_prof.id;
        
            g_error := 'INSERT INTO EXAM_REQ_DET_HIST';
            ts_exam_req_det_hist.ins(rec_in          => l_exam_req_det_hist,
                                     gen_pky_in      => TRUE,
                                     sequence_in     => 'SEQ_EXAM_REQ_DET_HIST',
                                     handle_error_in => TRUE);
        
            --updates EXAM_REQ_DET to previous status
            g_error := 'UPDATE EXAM_REQ_DET';
            ts_exam_req_det.upd(id_exam_req_det_in        => i_exam_req_det,
                                flg_status_in             => l_previous_exam_req_det_status,
                                id_prof_performed_reg_in  => NULL,
                                id_prof_performed_reg_nin => FALSE,
                                dt_performed_reg_in       => NULL,
                                dt_performed_reg_nin      => FALSE,
                                id_prof_performed_in      => NULL,
                                id_prof_performed_nin     => FALSE,
                                start_time_in             => NULL,
                                start_time_nin            => FALSE,
                                end_time_in               => NULL,
                                end_time_nin              => FALSE,
                                prof_dep_clin_serv_in     => NULL,
                                prof_dep_clin_serv_nin    => FALSE,
                                id_epis_doc_perform_in    => NULL,
                                id_epis_doc_perform_nin   => FALSE,
                                rows_out                  => l_rows_out);
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ_DET',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            -- insert in status log
            IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                    i_prof       => i_prof,
                                    i_id_episode => l_exam_req.id_episode,
                                    i_flg_status => l_previous_exam_req_det_status,
                                    i_id_record  => i_exam_req_det,
                                    i_flg_type   => pk_exam_constant.g_exam_type_det,
                                    o_error      => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            --get the previous status of exam_req on ti_log
            g_error := 'GET PREVIOUS EXAM_REQ STATUS';
            SELECT flg_status
              INTO l_previous_exam_req_status
              FROM (SELECT flg_status, rownum line
                      FROM (SELECT t.flg_status
                              FROM ti_log t
                             WHERE t.flg_type = pk_exam_constant.g_exam_type_req
                               AND t.id_episode = l_exam_req.id_episode
                               AND t.flg_status NOT IN (pk_exam_constant.g_exam_result,
                                                        pk_exam_constant.g_exam_read,
                                                        pk_exam_constant.g_exam_read_partial,
                                                        pk_exam_constant.g_exam_partial,
                                                        pk_exam_constant.g_exam_exec)
                               AND t.id_record = l_exam_req.id_exam_req
                             ORDER BY t.dt_creation_tstz DESC))
             WHERE line = 1;
        
            --updates EXAM_REQ to the previous status before the set of the result                  
            l_rows_out := NULL;
        
            g_error := 'UPDATE EXAM_REQ';
            ts_exam_req.upd(id_exam_req_in => l_exam_req.id_exam_req,
                            flg_status_in  => l_previous_exam_req_status,
                            rows_out       => l_rows_out);
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            -- insert in status log
            IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                    i_prof       => i_prof,
                                    i_id_episode => l_exam_req.id_episode,
                                    i_flg_status => l_previous_exam_req_status,
                                    i_id_record  => l_exam_req.id_exam_req,
                                    i_flg_type   => pk_exam_constant.g_exam_type_req,
                                    o_error      => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        ELSE
            l_rows_out := NULL;
        
            g_error := 'UPDATE EXAM_REQ_DET';
            ts_exam_req_det.upd(id_exam_req_det_in   => i_exam_req_det,
                                flg_status_in        => pk_exam_constant.g_exam_cancel,
                                id_prof_cancel_in    => i_prof.id,
                                dt_cancel_tstz_in    => g_sysdate_tstz,
                                dt_cancel_tstz_nin   => FALSE,
                                id_cancel_reason_in  => 32,
                                id_cancel_reason_nin => FALSE,
                                rows_out             => l_rows_out);
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ_DET',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                    i_prof       => i_prof,
                                    i_id_episode => l_exam_req.id_episode,
                                    i_flg_status => pk_exam_constant.g_exam_cancel,
                                    i_id_record  => i_exam_req_det,
                                    i_flg_type   => pk_exam_constant.g_exam_type_det,
                                    o_error      => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        
            l_rows_out := NULL;
        
            g_error := 'UPDATE EXAM_REQ';
            ts_exam_req.upd(id_exam_req_in    => l_exam_req.id_exam_req,
                            flg_status_in     => pk_exam_constant.g_exam_cancel,
                            id_prof_cancel_in => i_prof.id,
                            dt_cancel_tstz_in => g_sysdate_tstz,
                            rows_out          => l_rows_out);
        
            g_error := 'CALL PROCESS_UPDATE';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EXAM_REQ',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
            IF NOT t_ti_log.ins_log(i_lang       => i_lang,
                                    i_prof       => i_prof,
                                    i_id_episode => l_exam_req.id_episode,
                                    i_flg_status => pk_exam_constant.g_exam_cancel,
                                    i_id_record  => l_exam_req.id_exam_req,
                                    i_flg_type   => pk_exam_constant.g_exam_type_req,
                                    o_error      => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        -- Verify if the exam has supplies workflow
        OPEN c_supply_workflow;
        FETCH c_supply_workflow BULK COLLECT
            INTO l_id_supply_workflow;
        g_found := c_supply_workflow%FOUND;
        CLOSE c_supply_workflow;
    
        -- if the request of supplies has been in the context of the request for a exam then updates it to cancelled status
        g_error := 'CALL PK_SUPPLIES_API_DB.UPDATE_SUPPLY_WORKFLOW_STATUS';
        IF g_found
        THEN
            IF NOT pk_supplies_api_db.update_supply_workflow_status(i_lang             => i_lang,
                                                                    i_prof             => i_prof,
                                                                    i_supplies         => l_id_supply_workflow,
                                                                    i_id_prof_cancel   => i_prof.id,
                                                                    i_cancel_notes     => i_notes_cancel,
                                                                    i_id_cancel_reason => i_cancel_reason,
                                                                    i_dt_cancel        => g_sysdate_tstz,
                                                                    i_flg_status       => pk_supplies_constant.g_sww_cancelled,
                                                                    i_notes            => table_varchar(NULL),
                                                                    o_error            => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        -- cancel exam_time_out template info      
        OPEN c_exam_time_out;
        FETCH c_exam_time_out
            INTO l_exam_time_out;
        g_found := c_exam_time_out%FOUND;
        CLOSE c_exam_time_out;
    
        IF g_found
           AND l_exam_time_out.id_exam_req_det IS NOT NULL
        THEN
            IF NOT pk_touch_option.cancel_epis_doc_no_commit(i_lang          => i_lang,
                                                             i_prof          => i_prof,
                                                             i_id_epis_doc   => l_exam_time_out.id_epis_documentation,
                                                             i_notes         => i_notes_cancel,
                                                             i_test          => pk_alert_constant.g_no,
                                                             i_cancel_reason => i_cancel_reason,
                                                             o_flg_show      => l_flg_show,
                                                             o_msg_title     => l_msg_title,
                                                             o_msg_text      => l_msg_text,
                                                             o_button        => l_button,
                                                             o_error         => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        -- Cancel clinical questions    
        SELECT t_rec_exam_question_response(id_exam_question_response,
                                            id_questionnaire,
                                            id_response,
                                            id_episode,
                                            notes,
                                            dt_last_update_tstz,
                                            id_prof_last_update)
          BULK COLLECT
          INTO l_exam_question_response
          FROM exam_question_response eqr
         WHERE eqr.id_exam_req_det = i_exam_req_det
           AND eqr.flg_time = pk_exam_constant.g_exam_cq_after_execute;
    
        IF l_exam_question_response.count > 0
        THEN
            FOR i IN 1 .. l_exam_question_response.count
            LOOP
                g_error := 'INSERT INTO EXAM_QUESTION_RESP_HIST';
                INSERT INTO exam_question_response_hist
                    (dt_exam_question_resp_hist,
                     id_exam_question_response,
                     id_episode,
                     id_exam_req_det,
                     flg_time,
                     id_questionnaire,
                     id_response,
                     notes,
                     id_prof_last_update,
                     dt_last_update_tstz)
                VALUES
                    (g_sysdate_tstz,
                     l_exam_question_response(i).id_exam_question_response,
                     l_exam_question_response(i).id_episode,
                     i_exam_req_det,
                     pk_exam_constant.g_exam_cq_after_execute,
                     l_exam_question_response(i).id_questionnaire,
                     l_exam_question_response(i).id_response,
                     l_exam_question_response(i).notes,
                     l_exam_question_response(i).id_prof_last_update,
                     l_exam_question_response(i).dt_last_update_tstz);
            
                l_rows_out := NULL;
                ts_exam_question_response.del(id_exam_question_response_in => l_exam_question_response(i).id_exam_question_response,
                                              rows_out                     => l_rows_out);
            END LOOP;
        END IF;
    
        g_error := 'CALL TO PK_IA_EVENT_IMAGE.EXAM_EXECUTION_CANCEL';
        pk_ia_event_image.exam_execution_cancel(i_id_exam_req_det => i_exam_req_det,
                                                i_id_institution  => i_prof.institution);
    
        g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
        IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                  i_prof         => i_prof,
                                                  i_patient      => NULL,
                                                  i_episode      => l_exam_req.id_episode,
                                                  i_exam_req     => l_exam_req.id_exam_req,
                                                  i_exam_req_det => i_exam_req_det,
                                                  o_error        => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'CALL TO SET_FIRST_OBS';
        IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                      i_id_episode          => l_exam_req.id_episode,
                                      i_pat                 => NULL,
                                      i_prof                => i_prof,
                                      i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                      i_dt_last_interaction => g_sysdate_tstz,
                                      i_dt_first_obs        => g_sysdate_tstz,
                                      o_error               => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CANCEL_EXAM_PERFORM',
                                              o_error);
            RETURN FALSE;
    END cancel_exam_perform;

    FUNCTION cancel_exam_result
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_exam_req_det  IN exam_req_det.id_exam_req_det%TYPE,
        i_exam_result   IN exam_result.id_exam_result%TYPE,
        i_cancel_reason IN cancel_reason.id_cancel_reason%TYPE,
        i_notes_cancel  IN exam_result.notes_cancel%TYPE,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_req IS
            SELECT erd.id_exam,
                   e.flg_type,
                   er.id_episode,
                   erd.id_exam_req,
                   er.flg_time,
                   er.id_prof_req,
                   er.dt_begin_tstz,
                   er.dt_pend_req_tstz,
                   er.dt_req_tstz,
                   erd.id_prof_performed
              FROM exam_req_det erd, exam e, exam_req er
             WHERE erd.id_exam_req_det = i_exam_req_det
               AND er.id_exam_req = erd.id_exam_req
               AND e.id_exam = erd.id_exam;
    
        l_exam_req c_exam_req%ROWTYPE;
    
        l_exam_result_status exam_result.flg_status%TYPE;
        l_epis_documentation exam_result.id_epis_documentation%TYPE;
    
        l_flg_show  sys_message.desc_message%TYPE;
        l_msg_title sys_message.desc_message%TYPE;
        l_msg_text  sys_message.desc_message%TYPE;
        l_button    sys_message.desc_message%TYPE;
    
        l_sys_alert_event sys_alert_event%ROWTYPE;
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        --check if the exam result is already canceled
        g_error := 'CHECK IF EXAM RESULT IS ALREADY CANCELED';
        SELECT er.flg_status, er.id_epis_documentation
          INTO l_exam_result_status, l_epis_documentation
          FROM exam_result er
         WHERE er.id_exam_result = i_exam_result;
    
        --if exam result is already canceled raise error
        IF l_exam_result_status != pk_exam_constant.g_exam_result_active
        THEN
            g_error := 'EXAM RESULT IS ALREADY CANCELED';
            RAISE g_other_exception;
        END IF;
    
        -- inserts the execution    
        g_error := 'CALL PK_EXAM_CORE.SET_EXAM_RESULT_HISTORY';
        IF NOT pk_exam_core.set_exam_result_history(i_lang        => i_lang,
                                                    i_prof        => i_prof,
                                                    i_exam_result => table_number(i_exam_result),
                                                    o_error       => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'UPDATE EXAM_RESULT';
        ts_exam_result.upd(id_exam_result_in             => i_exam_result,
                           flg_status_in                 => pk_exam_constant.g_exam_result_cancel,
                           id_result_status_in           => 2,
                           id_prof_cancel_in             => i_prof.id,
                           dt_exam_result_cancel_tstz_in => g_sysdate_tstz,
                           id_cancel_reason_in           => i_cancel_reason,
                           notes_cancel_in               => i_notes_cancel,
                           rows_out                      => l_rows_out);
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_RESULT',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        -- cancel template info   
        IF l_epis_documentation IS NOT NULL
        THEN
            g_error := 'CALL TO PK_TOUCH_OPTION.CANCEL_EPIS_DOCUMENTATION';
            IF NOT pk_touch_option.cancel_epis_documentation(i_lang          => i_lang,
                                                             i_prof          => i_prof,
                                                             i_id_epis_doc   => l_epis_documentation,
                                                             i_notes         => i_notes_cancel,
                                                             i_test          => pk_alert_constant.g_no,
                                                             i_cancel_reason => i_cancel_reason,
                                                             o_flg_show      => l_flg_show,
                                                             o_msg_title     => l_msg_title,
                                                             o_msg_text      => l_msg_text,
                                                             o_button        => l_button,
                                                             o_error         => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        -- Get exam_req and exam_req_det information
        g_error := 'OPEN C_EXAM_REQ';
        OPEN c_exam_req;
        FETCH c_exam_req
            INTO l_exam_req;
        CLOSE c_exam_req;
    
        l_sys_alert_event.id_sys_alert := 3;
        l_sys_alert_event.id_episode   := l_exam_req.id_episode;
        l_sys_alert_event.id_record    := i_exam_result;
    
        IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                i_prof            => i_prof,
                                                i_sys_alert_event => l_sys_alert_event,
                                                o_error           => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'PK_EXAMS_API_DB.SET_EXAM_GRID_TASK';
        IF NOT pk_exams_api_db.set_exam_grid_task(i_lang         => i_lang,
                                                  i_prof         => i_prof,
                                                  i_patient      => NULL,
                                                  i_episode      => l_exam_req.id_episode,
                                                  i_exam_req     => l_exam_req.id_exam_req,
                                                  i_exam_req_det => i_exam_req_det,
                                                  o_error        => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'CALL TO SET_FIRST_OBS';
        IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                      i_id_episode          => l_exam_req.id_episode,
                                      i_pat                 => NULL,
                                      i_prof                => i_prof,
                                      i_prof_cat_type       => pk_prof_utils.get_category(i_lang, i_prof),
                                      i_dt_last_interaction => g_sysdate_tstz,
                                      i_dt_first_obs        => g_sysdate_tstz,
                                      o_error               => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CANCEL_EXAM_RESULT',
                                              o_error);
            RETURN FALSE;
    END cancel_exam_result;

    FUNCTION cancel_exam_doc_associated
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_exam_req_det IN exam_req_det.id_exam_req_det%TYPE,
        i_doc_external IN doc_external.id_doc_external%TYPE,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        g_error := 'UPDATE EXAM_MEDIA_ARCHIVE';
        ts_exam_media_archive.upd(flg_status_in          => pk_exam_constant.g_inactive,
                                  id_prof_last_update_in => i_prof.id,
                                  dt_last_update_tstz_in => g_sysdate_tstz,
                                  where_in               => 'id_exam_req_det = ' || i_exam_req_det ||
                                                            ' AND id_doc_external = ' || i_doc_external,
                                  rows_out               => l_rows_out);
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_MEDIA_ARCHIVE',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CANCEL_EXAM_DOC_ASSOCIATED',
                                              o_error);
            RETURN FALSE;
    END cancel_exam_doc_associated;

    FUNCTION cancel_exam_schedule
    (
        i_lang     IN language.id_language%TYPE,
        i_prof     IN profissional,
        i_exam_req IN exam_req.id_exam_req%TYPE,
        o_error    OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_req IS
            SELECT erd.id_exam_req_det
              FROM exam_req_det erd
             WHERE erd.id_exam_req = i_exam_req;
    
        l_exam_req c_exam_req%ROWTYPE;
    
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        g_sysdate_tstz := current_timestamp;
    
        g_error := 'UPDATE EXAM_REQ';
        ts_exam_req.upd(id_exam_req_in    => i_exam_req,
                        dt_begin_tstz_in  => NULL,
                        dt_begin_tstz_nin => FALSE,
                        rows_out          => l_rows_out);
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_REQ',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        g_error := 'OPEN C_EXAM_REQ';
        OPEN c_exam_req;
        FETCH c_exam_req
            INTO l_exam_req;
        CLOSE c_exam_req;
    
        l_rows_out := NULL;
    
        g_error := 'UPDATE EXAM_REQ_DET';
        ts_exam_req_det.upd(id_exam_req_det_in => l_exam_req.id_exam_req_det,
                            dt_target_tstz_in  => NULL,
                            dt_target_tstz_nin => FALSE,
                            rows_out           => l_rows_out);
    
        g_error := 'CALL PROCESS_UPDATE';
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EXAM_REQ',
                                      i_rowids     => l_rows_out,
                                      o_error      => o_error);
    
        g_error := 'CALL TO PK_EXAM_CORE.SET_EXAM_STATUS';
        IF NOT pk_exam_core.set_exam_status(i_lang            => i_lang,
                                            i_prof            => i_prof,
                                            i_exam_req_det    => table_number(l_exam_req.id_exam_req_det),
                                            i_status          => pk_exam_constant.g_exam_tosched,
                                            i_notes           => table_varchar(NULL),
                                            i_notes_scheduler => table_varchar(NULL),
                                            o_error           => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'CANCEL_EXAM_SCHEDULE',
                                              o_error);
            RETURN FALSE;
    END cancel_exam_schedule;

    FUNCTION get_exam_selection_list
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_patient       IN patient.id_patient%TYPE,
        i_episode       IN episode.id_episode%TYPE,
        i_exam_type     IN exam.flg_type%TYPE,
        i_flg_type      IN VARCHAR2 DEFAULT pk_exam_constant.g_exam_institution,
        i_codification  IN codification.id_codification%TYPE DEFAULT NULL,
        i_dep_clin_serv IN exam_cat_dcs.id_dep_clin_serv%TYPE DEFAULT NULL
    ) RETURN t_tbl_exams_for_selection IS
    
        CURSOR c_pat IS
            SELECT gender, trunc(months_between(SYSDATE, dt_birth) / 12) age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_pat           c_pat%ROWTYPE;
        l_prof_cat_type category.flg_type%TYPE;
        l_complaint     table_number;
        l_prof_access   PLS_INTEGER;
        l_msg           sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T117');
    
        l_list t_tbl_exams_for_selection;
    
        l_error t_error_out;
    
        PRAGMA AUTONOMOUS_TRANSACTION;
    
    BEGIN
    
        IF i_patient IS NOT NULL
        THEN
            g_error := 'OPEN C_PAT';
            OPEN c_pat;
            FETCH c_pat
                INTO l_pat;
            CLOSE c_pat;
        
            g_error := 'CALL PK_COMPLAINT.GET_EPIS_ACT_COMPLAINT';
            IF NOT pk_complaint.get_epis_act_complaint(i_lang         => i_lang,
                                                       i_prof         => i_prof,
                                                       i_episode      => i_episode,
                                                       o_id_complaint => l_complaint,
                                                       o_error        => l_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        g_error := 'GET PROF ACCESS';
        BEGIN
            SELECT COUNT(1)
              INTO l_prof_access
              FROM group_access ga
             INNER JOIN group_access_prof gaf
                ON gaf.id_group_access = ga.id_group_access
             INNER JOIN group_access_record gar
                ON gar.id_group_access = ga.id_group_access
             INNER JOIN exam e
                ON e.id_exam = gar.id_record
             WHERE gaf.id_professional = i_prof.id
               AND gaf.flg_available = pk_exam_constant.g_available
               AND ga.id_institution IN (i_prof.institution, 0)
               AND ga.id_software IN (i_prof.software, 0)
               AND ga.flg_type = 'E'
               AND ga.flg_available = pk_exam_constant.g_available
               AND gar.flg_type = 'E'
               AND e.flg_type = i_exam_type;
        EXCEPTION
            WHEN no_data_found THEN
                l_prof_access := 0;
        END;
    
        IF i_flg_type = pk_exam_constant.g_exam_institution
        THEN
            DELETE FROM tbl_temp;
        
            g_error := 'GET EXAMS';
        
            INSERT INTO tbl_temp
                (num_1, vc_1, vc_2, vc_3, num_2)
                (SELECT id_exam, desc_perform, flg_clinical_question, TYPE, rank
                   FROM (SELECT id_exam,
                                desc_perform,
                                flg_clinical_question,
                                TYPE,
                                decode(TYPE,
                                       'E',
                                       (SELECT pk_exam_utils.get_exam_rank(i_lang, i_prof, id_exam, i_flg_type, NULL)
                                          FROM dual),
                                       (SELECT pk_exam_utils.get_exam_group_rank(i_lang, i_prof, id_exam, NULL)
                                          FROM dual)) rank
                           FROM (SELECT DISTINCT e.id_exam,
                                                 decode(eis.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                                                 decode(eq.id_exam,
                                                        NULL,
                                                        pk_exam_constant.g_no,
                                                        decode(instr(nvl(eq.flg_mandatory, pk_exam_constant.g_no),
                                                                     pk_exam_constant.g_yes),
                                                               0,
                                                               pk_exam_constant.g_yes,
                                                               'M')) flg_clinical_question,
                                                 'E' TYPE
                                   FROM exam e,
                                        (SELECT *
                                           FROM exam_dep_clin_serv
                                          WHERE flg_type = pk_exam_constant.g_exam_can_req
                                            AND id_software = i_prof.software
                                            AND id_institution = i_prof.institution) eis,
                                        (SELECT id_exam, concatenate(flg_mandatory) flg_mandatory
                                           FROM (SELECT DISTINCT id_exam, flg_mandatory
                                                   FROM exam_questionnaire
                                                  WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                                    AND id_institution = i_prof.institution
                                                    AND flg_available = pk_exam_constant.g_available)
                                          GROUP BY id_exam) eq,
                                        (SELECT DISTINCT gar.id_record id_exam
                                           FROM group_access ga
                                          INNER JOIN group_access_prof gaf
                                             ON gaf.id_group_access = ga.id_group_access
                                          INNER JOIN group_access_record gar
                                             ON gar.id_group_access = ga.id_group_access
                                          WHERE gaf.id_professional = i_prof.id
                                            AND ga.id_institution IN (i_prof.institution, 0)
                                            AND ga.id_software IN (i_prof.software, 0)
                                            AND ga.flg_type = 'E'
                                            AND gar.flg_type = 'E'
                                            AND ga.flg_available = pk_exam_constant.g_available
                                            AND gaf.flg_available = pk_exam_constant.g_available
                                            AND gar.flg_available = pk_exam_constant.g_available) ecs
                                  WHERE e.flg_type = i_exam_type
                                    AND e.flg_available = pk_exam_constant.g_available
                                    AND e.id_exam = eis.id_exam
                                    AND e.id_exam = eq.id_exam(+)
                                    AND e.id_exam = ecs.id_exam(+)
                                    AND (l_prof_access = 0 OR (l_prof_access != 0 AND ecs.id_exam IS NOT NULL))
                                    AND (i_patient IS NULL OR
                                        (((l_pat.gender IS NOT NULL AND
                                        coalesce(e.gender, 'I', 'U', 'N') IN ('I', 'U', 'N', l_pat.gender)) OR
                                        l_pat.gender IS NULL OR l_pat.gender IN ('I', 'U', 'N')) AND
                                        (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND
                                        nvl(e.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                                    AND rownum > 0 -- to solve performance problem when no records are returned
                                 UNION ALL
                                 SELECT DISTINCT eg.id_exam_group id_exam,
                                                 decode(egis.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                                                 decode(eq.id_exam_group,
                                                        NULL,
                                                        pk_exam_constant.g_no,
                                                        pk_exam_constant.g_yes) flg_clinical_question,
                                                 'G' TYPE
                                   FROM exam_group eg,
                                        exam_egp ee,
                                        exam e,
                                        (SELECT *
                                           FROM exam_dep_clin_serv
                                          WHERE flg_type = pk_exam_constant.g_exam_can_req
                                            AND id_software = i_prof.software
                                            AND id_institution = i_prof.institution) egis,
                                        (SELECT *
                                           FROM exam_dep_clin_serv
                                          WHERE flg_type = pk_exam_constant.g_exam_can_req
                                            AND id_software = i_prof.software
                                            AND id_institution = i_prof.institution) eis,
                                        (SELECT id_exam_group, concatenate(flg_mandatory) flg_mandatory
                                           FROM (SELECT DISTINCT id_exam_group, flg_mandatory
                                                   FROM exam_questionnaire
                                                  WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                                    AND id_institution = i_prof.institution
                                                    AND flg_available = pk_exam_constant.g_available)
                                          GROUP BY id_exam_group) eq
                                  WHERE eg.id_group_parent IS NOT NULL
                                    AND eg.id_exam_group = egis.id_exam_group
                                    AND eg.id_exam_group = ee.id_exam_group
                                    AND ee.id_exam = e.id_exam
                                    AND e.flg_type = i_exam_type
                                    AND e.id_exam = eis.id_exam
                                    AND e.flg_available = pk_exam_constant.g_available
                                    AND eg.id_exam_group = egis.id_exam_group
                                    AND eg.id_exam_group = eq.id_exam_group(+)
                                    AND (l_prof_access = 0 OR
                                        (l_prof_access != 0 AND EXISTS
                                         (SELECT 1
                                             FROM exam_group eg1,
                                                  exam_egp egp,
                                                  (SELECT DISTINCT gar.id_record id_exam
                                                     FROM group_access ga
                                                    INNER JOIN group_access_prof gaf
                                                       ON gaf.id_group_access = ga.id_group_access
                                                    INNER JOIN group_access_record gar
                                                       ON gar.id_group_access = ga.id_group_access
                                                    WHERE gaf.id_professional = i_prof.id
                                                      AND ga.id_institution IN (i_prof.institution, 0)
                                                      AND ga.id_software IN (i_prof.software, 0)
                                                      AND ga.flg_type = 'E'
                                                      AND gar.flg_type = 'E'
                                                      AND ga.flg_available = pk_exam_constant.g_available
                                                      AND gaf.flg_available = pk_exam_constant.g_available
                                                      AND gar.flg_available = pk_exam_constant.g_available) ecs
                                            WHERE eg1.id_exam_group = eg.id_exam_group
                                              AND eg1.id_exam_group = egp.id_exam_group
                                              AND egp.id_exam = ecs.id_exam
                                              AND egp.id_exam = ee.id_exam)))
                                    AND (i_patient IS NULL OR
                                        (((l_pat.gender IS NOT NULL AND
                                        coalesce(e.gender, 'I', 'U', 'N') IN ('I', 'U', 'N', l_pat.gender)) OR
                                        l_pat.gender IS NULL OR l_pat.gender IN ('I', 'U', 'N')) AND
                                        (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND
                                        nvl(e.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                                    AND rownum > 0)));
        
            g_error := 'GET CURSOR';
            SELECT t_exams_for_selection(id_exam,
                                         desc_exam,
                                         desc_perform,
                                         flg_clinical_question,
                                         flg_laterality_mcdt,
                                         TYPE,
                                         rank)
              BULK COLLECT
              INTO l_list
              FROM (SELECT id_exam,
                           decode(TYPE,
                                  'E',
                                  (SELECT pk_exam_utils.get_alias_translation(i_lang,
                                                                              i_prof,
                                                                              'EXAM.CODE_EXAM.' || id_exam,
                                                                              NULL)
                                     FROM dual) ||
                                  decode(i_flg_type,
                                         pk_exam_constant.g_exam_freq,
                                         (SELECT pk_exam_utils.get_exam_with_codification(i_lang, i_prof, id_exam)
                                            FROM dual),
                                         ''),
                                  (SELECT pk_translation.get_translation(i_lang, 'EXAM_GROUP.CODE_EXAM_GROUP.' || id_exam)
                                     FROM dual)) desc_exam,
                           desc_perform,
                           flg_clinical_question,
                           decode(TYPE,
                                  'E',
                                  (SELECT pk_mcdt.check_mcdt_laterality(i_lang, i_prof, 'E', id_exam)
                                     FROM dual),
                                  NULL) flg_laterality_mcdt,
                           TYPE,
                           rank
                      FROM (SELECT num_1 id_exam,
                                   vc_1 desc_perform,
                                   vc_2 flg_clinical_question,
                                   vc_3 TYPE,
                                   num_2 rank,
                                   row_number() over(PARTITION BY num_1, vc_2 ORDER BY num_2 DESC) rn
                              FROM tbl_temp) e
                     WHERE rn = 1
                     ORDER BY rank, desc_exam);
        
        ELSIF i_flg_type IN (pk_exam_constant.g_exam_clinical_service, pk_exam_constant.g_past_hist_freq_treat)
        THEN
            l_prof_cat_type := pk_prof_utils.get_category(i_lang, i_prof);
        
            DELETE FROM tbl_temp;
        
            g_error := 'GET EXAMS';
        
            INSERT INTO tbl_temp
                (num_1, vc_1, vc_2, vc_3, num_2)
                (SELECT id_exam, desc_perform, flg_clinical_question, TYPE, rank
                   FROM (SELECT id_exam,
                                desc_perform,
                                flg_clinical_question,
                                TYPE,
                                decode(TYPE,
                                       'E',
                                       (SELECT pk_exam_utils.get_exam_rank(i_lang,
                                                                           i_prof,
                                                                           id_exam,
                                                                           i_flg_type,
                                                                           id_dep_clin_serv)
                                          FROM dual),
                                       (SELECT pk_exam_utils.get_exam_group_rank(i_lang, i_prof, id_exam, id_dep_clin_serv)
                                          FROM dual)) rank
                           FROM (SELECT DISTINCT e.id_exam,
                                                 decode(edcs1.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                                                 decode(eq.id_exam,
                                                        NULL,
                                                        pk_exam_constant.g_no,
                                                        decode(instr(nvl(eq.flg_mandatory, pk_exam_constant.g_no),
                                                                     pk_exam_constant.g_yes),
                                                               0,
                                                               pk_exam_constant.g_yes,
                                                               'M')) flg_clinical_question,
                                                 'E' TYPE,
                                                 edcs.id_dep_clin_serv
                                   FROM exam e,
                                        (SELECT *
                                           FROM exam_dep_clin_serv edcs
                                          WHERE flg_type = i_flg_type
                                            AND id_software = i_prof.software
                                            AND (EXISTS (SELECT 1
                                                           FROM prof_dep_clin_serv pdcs
                                                          WHERE pdcs.id_professional = i_prof.id
                                                            AND pdcs.id_institution = i_prof.institution
                                                            AND pdcs.flg_status = pk_exam_constant.g_selected
                                                            AND pdcs.id_dep_clin_serv = edcs.id_dep_clin_serv))
                                         UNION ALL
                                         SELECT *
                                           FROM exam_dep_clin_serv edcs
                                          WHERE flg_type = i_flg_type
                                            AND id_software = i_prof.software
                                            AND edcs.id_professional = i_prof.id) edcs,
                                        (SELECT *
                                           FROM exam_dep_clin_serv
                                          WHERE flg_type = pk_exam_constant.g_exam_can_req
                                            AND id_software = i_prof.software
                                            AND id_institution = i_prof.institution) edcs1,
                                        (SELECT id_exam, concatenate(flg_mandatory) flg_mandatory
                                           FROM (SELECT DISTINCT id_exam, flg_mandatory
                                                   FROM exam_questionnaire
                                                  WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                                    AND id_institution = i_prof.institution
                                                    AND flg_available = pk_exam_constant.g_available)
                                          GROUP BY id_exam) eq,
                                        (SELECT DISTINCT gar.id_record id_exam
                                           FROM group_access ga
                                          INNER JOIN group_access_prof gaf
                                             ON gaf.id_group_access = ga.id_group_access
                                          INNER JOIN group_access_record gar
                                             ON gar.id_group_access = ga.id_group_access
                                          WHERE gaf.id_professional = i_prof.id
                                            AND ga.id_institution IN (i_prof.institution, 0)
                                            AND ga.id_software IN (i_prof.software, 0)
                                            AND ga.flg_type = 'E'
                                            AND gar.flg_type = 'E'
                                            AND ga.flg_available = pk_exam_constant.g_available
                                            AND gaf.flg_available = pk_exam_constant.g_available
                                            AND gar.flg_available = pk_exam_constant.g_available) ecs
                                  WHERE e.flg_type = i_exam_type
                                    AND e.flg_available = pk_exam_constant.g_available
                                    AND (i_dep_clin_serv IS NULL OR
                                        (i_dep_clin_serv IS NOT NULL AND
                                        e.id_exam_cat IN
                                        (SELECT ecd.id_exam_cat
                                             FROM exam_cat_dcs ecd
                                            WHERE ecd.id_dep_clin_serv = i_dep_clin_serv)))
                                    AND ((EXISTS (SELECT 1
                                                    FROM prof_dep_clin_serv pdcs, exam_cat_dcs ecd
                                                   WHERE pdcs.id_professional = i_prof.id
                                                     AND pdcs.flg_status = pk_exam_constant.g_selected
                                                     AND pdcs.id_institution = i_prof.institution
                                                     AND pdcs.id_dep_clin_serv = ecd.id_dep_clin_serv
                                                     AND ecd.id_exam_cat = e.id_exam_cat) AND
                                         l_prof_cat_type != pk_alert_constant.g_cat_type_doc) OR
                                        l_prof_cat_type = pk_alert_constant.g_cat_type_doc)
                                    AND e.id_exam = edcs.id_exam
                                    AND e.id_exam = edcs1.id_exam
                                    AND e.id_exam = eq.id_exam(+)
                                    AND e.id_exam = ecs.id_exam(+)
                                    AND (l_prof_access = 0 OR (l_prof_access != 0 AND ecs.id_exam IS NOT NULL))
                                    AND (i_patient IS NULL OR
                                        (((l_pat.gender IS NOT NULL AND
                                        coalesce(e.gender, 'I', 'U', 'N') IN ('I', 'U', 'N', l_pat.gender)) OR
                                        l_pat.gender IS NULL OR l_pat.gender IN ('I', 'U', 'N')) AND
                                        (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND
                                        nvl(e.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                                    AND rownum > 0 -- to solve performance problem when no records are returned
                                 UNION ALL
                                 SELECT DISTINCT eg.id_exam_group id_exam,
                                                 decode(egdcs.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                                                 decode(eq.id_exam_group,
                                                        NULL,
                                                        pk_exam_constant.g_no,
                                                        pk_exam_constant.g_yes) flg_clinical_question,
                                                 'G' TYPE,
                                                 egdcs.id_dep_clin_serv
                                   FROM exam_group eg,
                                        exam_egp ee,
                                        exam e,
                                        (SELECT *
                                           FROM exam_dep_clin_serv edcs
                                          WHERE flg_type = i_flg_type
                                            AND id_software = i_prof.software
                                            AND (EXISTS (SELECT 1
                                                           FROM prof_dep_clin_serv pdcs
                                                          WHERE pdcs.id_professional = i_prof.id
                                                            AND pdcs.id_institution = i_prof.institution
                                                            AND pdcs.flg_status = pk_exam_constant.g_selected
                                                            AND pdcs.id_dep_clin_serv = edcs.id_dep_clin_serv))
                                         UNION ALL
                                         SELECT *
                                           FROM exam_dep_clin_serv edcs
                                          WHERE flg_type = i_flg_type
                                            AND id_software = i_prof.software
                                            AND edcs.id_professional = i_prof.id) edcs1,
                                        (SELECT *
                                           FROM exam_dep_clin_serv
                                          WHERE flg_type = pk_exam_constant.g_exam_can_req
                                            AND id_software = i_prof.software
                                            AND id_institution = i_prof.institution) egdcs,
                                        (SELECT *
                                           FROM exam_dep_clin_serv
                                          WHERE flg_type = pk_exam_constant.g_exam_can_req
                                            AND id_software = i_prof.software
                                            AND id_institution = i_prof.institution) edcs,
                                        (SELECT id_exam_group, concatenate(flg_mandatory) flg_mandatory
                                           FROM (SELECT DISTINCT id_exam_group, flg_mandatory
                                                   FROM exam_questionnaire
                                                  WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                                    AND id_institution = i_prof.institution
                                                    AND flg_available = pk_exam_constant.g_available)
                                          GROUP BY id_exam_group) eq
                                  WHERE eg.id_group_parent IS NOT NULL
                                    AND eg.id_exam_group = egdcs.id_exam_group
                                    AND eg.id_exam_group = ee.id_exam_group
                                    AND ee.id_exam = e.id_exam
                                    AND e.flg_type = i_exam_type
                                    AND e.id_exam = edcs.id_exam
                                    AND e.flg_available = pk_exam_constant.g_available
                                    AND (i_dep_clin_serv IS NULL OR
                                        (i_dep_clin_serv IS NOT NULL AND
                                        e.id_exam_cat IN
                                        (SELECT ecd.id_exam_cat
                                             FROM exam_cat_dcs ecd
                                            WHERE ecd.id_dep_clin_serv = i_dep_clin_serv)))
                                    AND ((EXISTS (SELECT 1
                                                    FROM prof_dep_clin_serv pdcs, exam_cat_dcs ecd
                                                   WHERE id_professional = i_prof.id
                                                     AND pdcs.id_institution = i_prof.institution
                                                     AND pdcs.flg_status = pk_exam_constant.g_selected
                                                     AND pdcs.id_dep_clin_serv = ecd.id_dep_clin_serv
                                                     AND ecd.id_exam_cat = e.id_exam_cat) AND
                                         l_prof_cat_type != pk_alert_constant.g_cat_type_doc) OR
                                        l_prof_cat_type = pk_alert_constant.g_cat_type_doc)
                                    AND eg.id_exam_group = edcs1.id_exam_group
                                    AND eg.id_exam_group = eq.id_exam_group(+)
                                    AND (l_prof_access = 0 OR
                                        (l_prof_access != 0 AND EXISTS
                                         (SELECT 1
                                             FROM exam_group eg1,
                                                  exam_egp egp,
                                                  (SELECT DISTINCT gar.id_record id_exam
                                                     FROM group_access ga
                                                    INNER JOIN group_access_prof gaf
                                                       ON gaf.id_group_access = ga.id_group_access
                                                    INNER JOIN group_access_record gar
                                                       ON gar.id_group_access = ga.id_group_access
                                                    WHERE gaf.id_professional = i_prof.id
                                                      AND ga.id_institution IN (i_prof.institution, 0)
                                                      AND ga.id_software IN (i_prof.software, 0)
                                                      AND ga.flg_type = 'E'
                                                      AND gar.flg_type = 'E'
                                                      AND ga.flg_available = pk_exam_constant.g_available
                                                      AND gaf.flg_available = pk_exam_constant.g_available
                                                      AND gar.flg_available = pk_exam_constant.g_available) ecs
                                            WHERE eg1.id_exam_group = eg.id_exam_group
                                              AND eg1.id_exam_group = egp.id_exam_group
                                              AND egp.id_exam = ecs.id_exam
                                              AND egp.id_exam = ee.id_exam)))
                                    AND (i_patient IS NULL OR
                                        (((l_pat.gender IS NOT NULL AND
                                        coalesce(e.gender, 'I', 'U', 'N') IN ('I', 'U', 'N', l_pat.gender)) OR
                                        l_pat.gender IS NULL OR l_pat.gender IN ('I', 'U', 'N')) AND
                                        (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND
                                        nvl(e.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                                    AND rownum > 0)));
        
            g_error := 'GET CURSOR';
            SELECT t_exams_for_selection(id_exam,
                                         desc_exam,
                                         desc_perform,
                                         flg_clinical_question,
                                         flg_laterality_mcdt,
                                         TYPE,
                                         rank)
              BULK COLLECT
              INTO l_list
              FROM (SELECT id_exam,
                           decode(TYPE,
                                  'E',
                                  (SELECT pk_exam_utils.get_alias_translation(i_lang,
                                                                              i_prof,
                                                                              'EXAM.CODE_EXAM.' || id_exam,
                                                                              NULL)
                                     FROM dual) ||
                                  decode(i_flg_type,
                                         pk_exam_constant.g_exam_freq,
                                         (SELECT pk_exam_utils.get_exam_with_codification(i_lang, i_prof, id_exam)
                                            FROM dual),
                                         ''),
                                  (SELECT pk_translation.get_translation(i_lang, 'EXAM_GROUP.CODE_EXAM_GROUP.' || id_exam)
                                     FROM dual)) desc_exam,
                           desc_perform,
                           flg_clinical_question,
                           decode(TYPE,
                                  'E',
                                  (SELECT pk_mcdt.check_mcdt_laterality(i_lang, i_prof, 'E', id_exam)
                                     FROM dual),
                                  NULL) flg_laterality_mcdt,
                           TYPE,
                           rank
                      FROM (SELECT num_1 id_exam,
                                   vc_1 desc_perform,
                                   vc_2 flg_clinical_question,
                                   vc_3 TYPE,
                                   num_2 rank,
                                   row_number() over(PARTITION BY num_1, vc_2 ORDER BY num_2 DESC) rn
                              FROM tbl_temp) e
                     WHERE rn = 1
                     ORDER BY rank, desc_exam);
        
        ELSIF i_flg_type = pk_exam_constant.g_exam_complaint
              AND l_complaint IS NOT NULL
              AND l_complaint.count > 0
        THEN
            g_error := 'OPEN O_LIST';
            SELECT t_exams_for_selection(id_exam,
                                         desc_exam,
                                         desc_perform,
                                         flg_clinical_question,
                                         flg_laterality_mcdt,
                                         TYPE,
                                         rank)
              BULK COLLECT
              INTO l_list
              FROM (SELECT DISTINCT e.id_exam,
                                    (SELECT pk_exam_utils.get_alias_translation(i_lang, i_prof, e.code_exam, NULL)
                                       FROM dual) ||
                                    (SELECT pk_exam_utils.get_exam_with_codification(i_lang, i_prof, e.id_exam)
                                       FROM dual) desc_exam,
                                    decode(edcs.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                                    decode(eq.id_exam, NULL, pk_exam_constant.g_no, pk_exam_constant.g_yes) flg_clinical_question,
                                    (SELECT pk_mcdt.check_mcdt_laterality(i_lang, i_prof, 'E', e.id_exam)
                                       FROM dual) flg_laterality_mcdt,
                                    'E' TYPE,
                                    (SELECT pk_exam_utils.get_exam_rank(i_lang, i_prof, e.id_exam, NULL, NULL)
                                       FROM dual) rank
                      FROM exam e,
                           (SELECT *
                              FROM exam_complaint ec
                             WHERE ec.id_complaint IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                        *
                                                         FROM TABLE(l_complaint) t)
                               AND ec.flg_available = pk_exam_constant.g_available) ec,
                           (SELECT *
                              FROM exam_dep_clin_serv
                             WHERE flg_type = pk_exam_constant.g_exam_can_req
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution) edcs,
                           (SELECT id_exam, concatenate(flg_mandatory) flg_mandatory
                              FROM (SELECT DISTINCT id_exam, flg_mandatory
                                      FROM exam_questionnaire
                                     WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_exam_constant.g_available)
                             GROUP BY id_exam) eq,
                           (SELECT DISTINCT gar.id_record id_exam
                              FROM group_access ga
                             INNER JOIN group_access_prof gaf
                                ON gaf.id_group_access = ga.id_group_access
                             INNER JOIN group_access_record gar
                                ON gar.id_group_access = ga.id_group_access
                             WHERE gaf.id_professional = i_prof.id
                               AND ga.id_institution IN (i_prof.institution, 0)
                               AND ga.id_software IN (i_prof.software, 0)
                               AND ga.flg_type = 'E'
                               AND gar.flg_type = 'E'
                               AND ga.flg_available = pk_exam_constant.g_available
                               AND gaf.flg_available = pk_exam_constant.g_available
                               AND gar.flg_available = pk_exam_constant.g_available) ecs
                     WHERE e.flg_type = i_exam_type
                       AND e.flg_available = pk_exam_constant.g_available
                       AND e.id_exam = ec.id_exam
                       AND e.id_exam = edcs.id_exam
                       AND e.id_exam = eq.id_exam(+)
                       AND e.id_exam = ecs.id_exam(+)
                       AND (l_prof_access = 0 OR (l_prof_access != 0 AND ecs.id_exam IS NOT NULL))
                       AND (i_patient IS NULL OR (((l_pat.gender IS NOT NULL AND
                           coalesce(e.gender, 'I', 'U', 'N') IN ('I', 'U', 'N', l_pat.gender)) OR
                           l_pat.gender IS NULL OR l_pat.gender IN ('I', 'U', 'N')) AND
                           (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND
                           nvl(e.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                       AND rownum > 0 -- to solve performance problem when no records are returned
                    UNION ALL
                    SELECT DISTINCT eg.id_exam_group id_exam,
                                    pk_translation.get_translation(i_lang, eg.code_exam_group) desc_exam,
                                    decode(edcs.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                                    decode(eq.id_exam_group,
                                           NULL,
                                           pk_exam_constant.g_no,
                                           decode(instr(nvl(eq.flg_mandatory, pk_exam_constant.g_no),
                                                        pk_exam_constant.g_yes),
                                                  0,
                                                  pk_exam_constant.g_yes,
                                                  'M')) flg_clinical_question,
                                    NULL flg_laterality_mcdt,
                                    'G' TYPE,
                                    pk_exam_utils.get_exam_group_rank(i_lang, i_prof, eg.id_exam_group, NULL) rank
                      FROM exam_group eg,
                           exam_egp ee,
                           exam e,
                           (SELECT *
                              FROM exam_complaint ec
                             WHERE ec.id_complaint IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                        *
                                                         FROM TABLE(l_complaint) t)
                               AND ec.flg_available = pk_exam_constant.g_available) ec,
                           (SELECT *
                              FROM exam_dep_clin_serv
                             WHERE flg_type = pk_exam_constant.g_exam_can_req
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution) edcs,
                           (SELECT id_exam_group, concatenate(flg_mandatory) flg_mandatory
                              FROM (SELECT DISTINCT id_exam_group, flg_mandatory
                                      FROM exam_questionnaire
                                     WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_exam_constant.g_available)
                             GROUP BY id_exam_group) eq
                     WHERE eg.id_group_parent IS NOT NULL
                       AND eg.id_exam_group = ee.id_exam_group
                       AND ee.id_exam = e.id_exam
                       AND e.flg_type = i_exam_type
                       AND e.flg_available = pk_exam_constant.g_available
                       AND e.id_exam = ec.id_exam
                       AND e.id_exam = edcs.id_exam
                       AND eg.id_exam_group = eq.id_exam_group(+)
                       AND (l_prof_access = 0 OR (l_prof_access != 0 AND EXISTS
                            (SELECT 1
                                                     FROM exam_group eg1,
                                                          exam_egp egp,
                                                          (SELECT DISTINCT gar.id_record id_exam
                                                             FROM group_access ga
                                                            INNER JOIN group_access_prof gaf
                                                               ON gaf.id_group_access = ga.id_group_access
                                                            INNER JOIN group_access_record gar
                                                               ON gar.id_group_access = ga.id_group_access
                                                            WHERE gaf.id_professional = i_prof.id
                                                              AND ga.id_institution IN (i_prof.institution, 0)
                                                              AND ga.id_software IN (i_prof.software, 0)
                                                              AND ga.flg_type = 'E'
                                                              AND gar.flg_type = 'E'
                                                              AND ga.flg_available = pk_exam_constant.g_available
                                                              AND gaf.flg_available = pk_exam_constant.g_available
                                                              AND gar.flg_available = pk_exam_constant.g_available) ecs
                                                    WHERE eg1.id_exam_group = eg.id_exam_group
                                                      AND eg1.id_exam_group = egp.id_exam_group
                                                      AND egp.id_exam = ecs.id_exam
                                                      AND egp.id_exam = ee.id_exam)))
                       AND (i_patient IS NULL OR (((l_pat.gender IS NOT NULL AND
                           coalesce(e.gender, 'I', 'U', 'N') IN ('I', 'U', 'N', l_pat.gender)) OR
                           l_pat.gender IS NULL OR l_pat.gender IN ('I', 'U', 'N')) AND
                           (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND
                           nvl(e.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                       AND rownum > 0 -- to solve performance problem when no records are returned
                     ORDER BY rank, desc_exam);
        
        ELSIF i_flg_type = pk_exam_constant.g_exam_codification
              AND i_codification IS NOT NULL
        THEN
            g_error := 'OPEN O_LIST';
            SELECT t_exams_for_selection(id_exam,
                                         desc_exam,
                                         desc_perform,
                                         flg_clinical_question,
                                         flg_laterality_mcdt,
                                         TYPE,
                                         rank)
              BULK COLLECT
              INTO l_list
              FROM (SELECT DISTINCT e.id_exam,
                                    (SELECT pk_exam_utils.get_alias_translation(i_lang, i_prof, e.code_exam, NULL)
                                       FROM dual) desc_exam,
                                    decode(edcs.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                                    decode(eq.id_exam,
                                           NULL,
                                           pk_exam_constant.g_no,
                                           decode(instr(nvl(eq.flg_mandatory, pk_exam_constant.g_no),
                                                        pk_exam_constant.g_yes),
                                                  0,
                                                  pk_exam_constant.g_yes,
                                                  'M')) flg_clinical_question,
                                    (SELECT pk_mcdt.check_mcdt_laterality(i_lang, i_prof, 'E', e.id_exam)
                                       FROM dual) flg_laterality_mcdt,
                                    'E' TYPE,
                                    (SELECT pk_exam_utils.get_exam_rank(i_lang, i_prof, e.id_exam, NULL, NULL)
                                       FROM dual) rank
                      FROM exam e,
                           (SELECT *
                              FROM exam_dep_clin_serv
                             WHERE flg_type = pk_exam_constant.g_exam_can_req
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution) edcs,
                           (SELECT id_exam, concatenate(flg_mandatory) flg_mandatory
                              FROM (SELECT DISTINCT id_exam, flg_mandatory
                                      FROM exam_questionnaire
                                     WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_exam_constant.g_available)
                             GROUP BY id_exam) eq,
                           (SELECT DISTINCT gar.id_record id_exam
                              FROM group_access ga
                             INNER JOIN group_access_prof gaf
                                ON gaf.id_group_access = ga.id_group_access
                             INNER JOIN group_access_record gar
                                ON gar.id_group_access = ga.id_group_access
                             WHERE gaf.id_professional = i_prof.id
                               AND ga.id_institution IN (i_prof.institution, 0)
                               AND ga.id_software IN (i_prof.software, 0)
                               AND ga.flg_type = 'E'
                               AND gar.flg_type = 'E'
                               AND ga.flg_available = pk_exam_constant.g_available
                               AND gaf.flg_available = pk_exam_constant.g_available
                               AND gar.flg_available = pk_exam_constant.g_available) ecs
                     WHERE e.flg_type = i_exam_type
                       AND e.flg_available = pk_exam_constant.g_available
                       AND e.id_exam = edcs.id_exam
                       AND EXISTS
                     (SELECT 1
                              FROM codification_instit_soft cis, exam_codification ec
                             WHERE cis.id_codification = i_codification
                               AND cis.id_institution = i_prof.institution
                               AND cis.id_software = i_prof.software
                               AND cis.id_codification = ec.id_codification
                               AND ec.flg_available = pk_exam_constant.g_available
                               AND ec.id_exam = e.id_exam)
                       AND e.id_exam = eq.id_exam(+)
                       AND e.id_exam = ecs.id_exam(+)
                       AND (l_prof_access = 0 OR (l_prof_access = 0 AND ecs.id_exam IS NOT NULL))
                       AND (i_patient IS NULL OR (((l_pat.gender IS NOT NULL AND
                           coalesce(e.gender, 'I', 'U', 'N') IN ('I', 'U', 'N', l_pat.gender)) OR
                           l_pat.gender IS NULL OR l_pat.gender IN ('I', 'U', 'N')) AND
                           (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND
                           nvl(e.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                       AND rownum > 0 -- to solve performance problem when no records are returned
                    UNION ALL
                    SELECT DISTINCT eg.id_exam_group id_exam,
                                    pk_translation.get_translation(i_lang, eg.code_exam_group) desc_exam,
                                    decode(edcs.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                                    decode(eq.id_exam_group,
                                           NULL,
                                           pk_exam_constant.g_no,
                                           decode(instr(nvl(eq.flg_mandatory, pk_exam_constant.g_no),
                                                        pk_exam_constant.g_yes),
                                                  0,
                                                  pk_exam_constant.g_yes,
                                                  'M')) flg_clinical_question,
                                    NULL flg_laterality_mcdt,
                                    'G' TYPE,
                                    pk_exam_utils.get_exam_group_rank(i_lang, i_prof, eg.id_exam_group, NULL) rank
                      FROM exam_group eg,
                           exam_egp ee,
                           exam e,
                           (SELECT *
                              FROM exam_dep_clin_serv
                             WHERE flg_type = pk_exam_constant.g_exam_can_req
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution) egdcs,
                           (SELECT *
                              FROM exam_dep_clin_serv
                             WHERE flg_type = pk_exam_constant.g_exam_can_req
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution) edcs,
                           (SELECT id_exam_group, concatenate(flg_mandatory) flg_mandatory
                              FROM (SELECT DISTINCT id_exam_group, flg_mandatory
                                      FROM exam_questionnaire
                                     WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_exam_constant.g_available)
                             GROUP BY id_exam_group) eq
                     WHERE eg.id_group_parent IS NOT NULL
                       AND eg.id_exam_group = egdcs.id_exam_group
                       AND eg.id_exam_group = ee.id_exam_group
                       AND ee.id_exam = e.id_exam
                       AND e.flg_type = i_exam_type
                       AND e.id_exam = edcs.id_exam
                       AND e.flg_available = pk_exam_constant.g_available
                       AND EXISTS
                     (SELECT 1
                              FROM codification_instit_soft cis, exam_codification ec
                             WHERE cis.id_codification = i_codification
                               AND cis.id_institution = i_prof.institution
                               AND cis.id_software = i_prof.software
                               AND cis.id_codification = ec.id_codification
                               AND ec.flg_available = pk_exam_constant.g_available
                               AND ec.id_exam = e.id_exam)
                       AND eg.id_exam_group = egdcs.id_exam_group
                       AND eg.id_exam_group = eq.id_exam_group(+)
                       AND (l_prof_access = 0 OR (l_prof_access != 0 AND EXISTS
                            (SELECT 1
                                                     FROM exam_group eg1,
                                                          exam_egp egp,
                                                          (SELECT DISTINCT gar.id_record id_exam
                                                             FROM group_access ga
                                                            INNER JOIN group_access_prof gaf
                                                               ON gaf.id_group_access = ga.id_group_access
                                                            INNER JOIN group_access_record gar
                                                               ON gar.id_group_access = ga.id_group_access
                                                            WHERE gaf.id_professional = i_prof.id
                                                              AND ga.id_institution IN (i_prof.institution, 0)
                                                              AND ga.id_software IN (i_prof.software, 0)
                                                              AND ga.flg_type = 'E'
                                                              AND gar.flg_type = 'E'
                                                              AND ga.flg_available = pk_exam_constant.g_available
                                                              AND gaf.flg_available = pk_exam_constant.g_available
                                                              AND gar.flg_available = pk_exam_constant.g_available) ecs
                                                    WHERE eg1.id_exam_group = eg.id_exam_group
                                                      AND eg1.id_exam_group = egp.id_exam_group
                                                      AND egp.id_exam = ecs.id_exam
                                                      AND egp.id_exam = ee.id_exam)))
                       AND (i_patient IS NULL OR (((l_pat.gender IS NOT NULL AND
                           coalesce(e.gender, 'I', 'U', 'N') IN ('I', 'U', 'N', l_pat.gender)) OR
                           l_pat.gender IS NULL OR l_pat.gender IN ('I', 'U', 'N')) AND
                           (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND
                           nvl(e.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                       AND rownum > 0
                     ORDER BY rank, desc_exam);
        END IF;
    
        COMMIT;
    
        RETURN l_list;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_SELECTION_LIST',
                                              l_error);
            RETURN NULL;
    END get_exam_selection_list;

    FUNCTION get_exam_search
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_patient       IN patient.id_patient%TYPE,
        i_exam_type     IN exam.flg_type%TYPE,
        i_flg_type      IN exam_dep_clin_serv.flg_type%TYPE DEFAULT pk_exam_constant.g_exam_can_req,
        i_codification  IN codification.id_codification%TYPE,
        i_dep_clin_serv IN exam_cat_dcs.id_dep_clin_serv%TYPE,
        i_value         IN VARCHAR2
    ) RETURN t_table_exams_search IS
    
        PRAGMA AUTONOMOUS_TRANSACTION;
    
        CURSOR c_pat IS
            SELECT gender, trunc(months_between(SYSDATE, dt_birth) / 12) age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_pat c_pat%ROWTYPE;
    
        l_prof_cat_type category.flg_type%TYPE;
    
        l_prof_access PLS_INTEGER;
        l_msg         sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T117');
    
        l_list t_table_exams_search;
    
        l_error t_error_out;
    
    BEGIN
    
        IF i_patient IS NOT NULL
        THEN
            g_error := 'OPEN C_PAT';
            OPEN c_pat;
            FETCH c_pat
                INTO l_pat;
            CLOSE c_pat;
        END IF;
    
        l_prof_cat_type := pk_prof_utils.get_category(i_lang, i_prof);
    
        g_error := 'GET PROF ACCESS';
        BEGIN
            SELECT COUNT(1)
              INTO l_prof_access
              FROM group_access ga
             INNER JOIN group_access_prof gaf
                ON gaf.id_group_access = ga.id_group_access
             INNER JOIN group_access_record gar
                ON gar.id_group_access = ga.id_group_access
             INNER JOIN exam e
                ON e.id_exam = gar.id_record
             WHERE gaf.id_professional = i_prof.id
               AND gaf.flg_available = pk_exam_constant.g_available
               AND ga.id_institution IN (i_prof.institution, 0)
               AND ga.id_software IN (i_prof.software, 0)
               AND ga.flg_type = 'E'
               AND ga.flg_available = pk_exam_constant.g_available
               AND gar.flg_type = 'E'
               AND e.flg_type = i_exam_type;
        EXCEPTION
            WHEN no_data_found THEN
                l_prof_access := 0;
        END;
    
        DELETE FROM tbl_temp;
    
        g_error := 'GET EXAMS';
        INSERT INTO tbl_temp
            (num_1, vc_1, vc_2, vc_3, num_2)
            WITH search AS
             (SELECT /*+materialize opt_estimate(table t rows=1)*/
               t.*, pk_lucene_utils.format_column_name(t.code_translation) table_name
                FROM TABLE(pk_translation.get_search_translation(i_lang,
                                                                 i_value,
                                                                 'EXAM.CODE_EXAM OR EXAM_ALIAS.CODE_EXAM_ALIAS OR EXAM_GROUP.CODE_EXAM_GROUP')) t)
            SELECT id_exam, desc_perform, flg_clinical_question, TYPE, position
              FROM (SELECT e.id_exam,
                           decode(edcs.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                           decode(eq.id_exam,
                                  NULL,
                                  pk_exam_constant.g_no,
                                  decode(instr(nvl(eq.flg_mandatory, pk_exam_constant.g_no), pk_exam_constant.g_yes),
                                         0,
                                         pk_exam_constant.g_yes,
                                         'M')) flg_clinical_question,
                           'E' TYPE,
                           t.position
                      FROM exam e,
                           (SELECT *
                              FROM search
                             WHERE table_name = 'EXAM.CODE_EXAM') t,
                           (SELECT *
                              FROM exam_dep_clin_serv
                             WHERE flg_type = i_flg_type
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution) edcs,
                           (SELECT id_exam, concatenate(flg_mandatory) flg_mandatory
                              FROM (SELECT DISTINCT id_exam, flg_mandatory
                                      FROM exam_questionnaire
                                     WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_exam_constant.g_available)
                             GROUP BY id_exam) eq,
                           (SELECT DISTINCT gar.id_record id_exam
                              FROM group_access ga
                             INNER JOIN group_access_prof gaf
                                ON gaf.id_group_access = ga.id_group_access
                             INNER JOIN group_access_record gar
                                ON gar.id_group_access = ga.id_group_access
                             WHERE gaf.id_professional = i_prof.id
                               AND ga.id_institution IN (i_prof.institution, 0)
                               AND ga.id_software IN (i_prof.software, 0)
                               AND ga.flg_type = 'E'
                               AND gar.flg_type = 'E'
                               AND ga.flg_available = pk_exam_constant.g_available
                               AND gaf.flg_available = pk_exam_constant.g_available
                               AND gar.flg_available = pk_exam_constant.g_available) ecs
                     WHERE t.code_translation = e.code_exam
                       AND t.desc_translation IS NOT NULL
                       AND e.flg_type = i_exam_type
                       AND e.flg_available = pk_exam_constant.g_available
                       AND (i_dep_clin_serv IS NULL OR
                           (i_dep_clin_serv IS NOT NULL AND
                           e.id_exam_cat IN (SELECT ecd.id_exam_cat
                                                 FROM exam_cat_dcs ecd
                                                WHERE ecd.id_dep_clin_serv = i_dep_clin_serv)))
                       AND ((EXISTS (SELECT 1
                                       FROM prof_dep_clin_serv pdcs, exam_cat_dcs ecd
                                      WHERE pdcs.id_professional = i_prof.id
                                        AND pdcs.id_institution = i_prof.institution
                                        AND pdcs.flg_status = pk_exam_constant.g_selected
                                        AND pdcs.id_dep_clin_serv = ecd.id_dep_clin_serv
                                        AND ecd.id_exam_cat = e.id_exam_cat) AND
                            l_prof_cat_type != pk_alert_constant.g_cat_type_doc) OR
                           l_prof_cat_type = pk_alert_constant.g_cat_type_doc OR l_prof_cat_type IS NULL)
                       AND e.id_exam = edcs.id_exam
                       AND (i_codification IS NULL OR (i_codification IS NOT NULL AND EXISTS
                            (SELECT 1
                                                          FROM codification_instit_soft cis, exam_codification ec
                                                         WHERE cis.id_codification = i_codification
                                                           AND cis.id_institution = i_prof.institution
                                                           AND cis.id_software = i_prof.software
                                                           AND cis.id_codification = ec.id_codification
                                                           AND ec.flg_available = pk_exam_constant.g_available
                                                           AND ec.id_exam = e.id_exam)))
                       AND e.id_exam = eq.id_exam(+)
                       AND e.id_exam = ecs.id_exam(+)
                       AND (l_prof_access = 0 OR (l_prof_access != 0 AND ecs.id_exam IS NOT NULL))
                       AND (i_patient IS NULL OR
                           (((l_pat.gender IS NOT NULL AND coalesce(e.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                           ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                           l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                           (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND nvl(e.age_max, nvl(l_pat.age, 0)) OR
                           l_pat.age IS NULL)))
                    UNION
                    SELECT e.id_exam,
                           decode(edcs.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                           decode(eq.id_exam,
                                  NULL,
                                  pk_exam_constant.g_no,
                                  decode(instr(nvl(eq.flg_mandatory, pk_exam_constant.g_no), pk_exam_constant.g_yes),
                                         0,
                                         pk_exam_constant.g_yes,
                                         'M')) flg_clinical_question,
                           'E' TYPE,
                           t.position
                      FROM exam e,
                           exam_alias ea,
                           (SELECT *
                              FROM search
                             WHERE table_name = 'EXAM_ALIAS.CODE_EXAM_ALIAS') t,
                           (SELECT *
                              FROM exam_dep_clin_serv
                             WHERE flg_type = i_flg_type
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution) edcs,
                           (SELECT id_exam, concatenate(flg_mandatory) flg_mandatory
                              FROM (SELECT DISTINCT id_exam, flg_mandatory
                                      FROM exam_questionnaire
                                     WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_exam_constant.g_available)
                             GROUP BY id_exam) eq,
                           (SELECT DISTINCT gar.id_record id_exam
                              FROM group_access ga
                             INNER JOIN group_access_prof gaf
                                ON gaf.id_group_access = ga.id_group_access
                             INNER JOIN group_access_record gar
                                ON gar.id_group_access = ga.id_group_access
                             WHERE gaf.id_professional = i_prof.id
                               AND ga.id_institution IN (i_prof.institution, 0)
                               AND ga.id_software IN (i_prof.software, 0)
                               AND ga.flg_type = 'E'
                               AND gar.flg_type = 'E'
                               AND ga.flg_available = pk_exam_constant.g_available
                               AND gaf.flg_available = pk_exam_constant.g_available
                               AND gar.flg_available = pk_exam_constant.g_available) ecs
                     WHERE t.code_translation = ea.code_exam_alias
                       AND t.desc_translation IS NOT NULL
                       AND decode(ea.id_institution, 0, nvl(i_prof.institution, 0), ea.id_institution) =
                           nvl(i_prof.institution, 0)
                       AND decode(ea.id_software, 0, nvl(i_prof.software, 0), ea.id_software) = nvl(i_prof.software, 0)
                       AND decode(nvl(ea.id_professional, 0), 0, nvl(i_prof.id, 0), ea.id_professional) =
                           nvl(i_prof.id, 0)
                       AND ea.id_exam = e.id_exam
                       AND e.flg_type = i_exam_type
                       AND e.flg_available = pk_exam_constant.g_available
                       AND (i_dep_clin_serv IS NULL OR
                           (i_dep_clin_serv IS NOT NULL AND
                           e.id_exam_cat IN (SELECT ecd.id_exam_cat
                                                 FROM exam_cat_dcs ecd
                                                WHERE ecd.id_dep_clin_serv = i_dep_clin_serv)))
                       AND ((EXISTS (SELECT 1
                                       FROM prof_dep_clin_serv pdcs, exam_cat_dcs ecd
                                      WHERE pdcs.id_professional = i_prof.id
                                        AND pdcs.id_institution = i_prof.institution
                                        AND pdcs.flg_status = pk_exam_constant.g_selected
                                        AND pdcs.id_dep_clin_serv = ecd.id_dep_clin_serv
                                        AND ecd.id_exam_cat = e.id_exam_cat) AND
                            l_prof_cat_type != pk_alert_constant.g_cat_type_doc) OR
                           l_prof_cat_type = pk_alert_constant.g_cat_type_doc OR l_prof_cat_type IS NULL)
                       AND e.id_exam = edcs.id_exam
                       AND (i_codification IS NULL OR (i_codification IS NOT NULL AND EXISTS
                            (SELECT 1
                                                          FROM codification_instit_soft cis, exam_codification ec
                                                         WHERE cis.id_codification = i_codification
                                                           AND cis.id_institution = i_prof.institution
                                                           AND cis.id_software = i_prof.software
                                                           AND cis.id_codification = ec.id_codification
                                                           AND ec.flg_available = pk_exam_constant.g_available
                                                           AND ec.id_exam = e.id_exam)))
                       AND e.id_exam = eq.id_exam(+)
                       AND e.id_exam = ecs.id_exam(+)
                       AND (l_prof_access = 0 OR (l_prof_access != 0 AND ecs.id_exam IS NOT NULL))
                       AND (i_patient IS NULL OR
                           (((l_pat.gender IS NOT NULL AND coalesce(e.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                           ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                           l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                           (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND nvl(e.age_max, nvl(l_pat.age, 0)) OR
                           l_pat.age IS NULL)))
                    UNION
                    SELECT eg.id_exam_group id_exam,
                           decode(edcs.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                           decode(eq.id_exam_group,
                                  NULL,
                                  pk_exam_constant.g_no,
                                  decode(instr(nvl(eq.flg_mandatory, pk_exam_constant.g_no), pk_exam_constant.g_yes),
                                         0,
                                         pk_exam_constant.g_yes,
                                         'M')) flg_clinical_question,
                           'G' TYPE,
                           t.position
                      FROM exam_group eg,
                           exam_egp ee,
                           exam e,
                           (SELECT *
                              FROM search
                             WHERE table_name = 'EXAM_GROUP.CODE_EXAM_GROUP') t,
                           (SELECT *
                              FROM exam_dep_clin_serv
                             WHERE flg_type = i_flg_type
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution) egdcs,
                           (SELECT *
                              FROM exam_dep_clin_serv
                             WHERE flg_type = i_flg_type
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution) edcs,
                           (SELECT id_exam_group, concatenate(flg_mandatory) flg_mandatory
                              FROM (SELECT DISTINCT id_exam_group, flg_mandatory
                                      FROM exam_questionnaire
                                     WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_exam_constant.g_available)
                             GROUP BY id_exam_group) eq
                     WHERE t.code_translation = eg.code_exam_group
                       AND t.desc_translation IS NOT NULL
                       AND eg.id_group_parent IS NOT NULL
                       AND eg.id_exam_group = ee.id_exam_group
                       AND eg.id_exam_group = egdcs.id_exam_group
                       AND ee.id_exam = e.id_exam
                       AND e.flg_type = i_exam_type
                       AND e.id_exam = edcs.id_exam
                       AND e.flg_available = pk_exam_constant.g_available
                       AND (i_dep_clin_serv IS NULL OR
                           (i_dep_clin_serv IS NOT NULL AND
                           e.id_exam_cat IN (SELECT ecd.id_exam_cat
                                                 FROM exam_cat_dcs ecd
                                                WHERE ecd.id_dep_clin_serv = i_dep_clin_serv)))
                       AND ((EXISTS (SELECT 1
                                       FROM prof_dep_clin_serv pdcs, exam_cat_dcs ecd
                                      WHERE pdcs.id_professional = i_prof.id
                                        AND pdcs.id_institution = i_prof.institution
                                        AND pdcs.flg_status = pk_exam_constant.g_selected
                                        AND pdcs.id_dep_clin_serv = ecd.id_dep_clin_serv
                                        AND ecd.id_exam_cat = e.id_exam_cat) AND
                            l_prof_cat_type != pk_alert_constant.g_cat_type_doc) OR
                           l_prof_cat_type = pk_alert_constant.g_cat_type_doc OR l_prof_cat_type IS NULL)
                       AND eg.id_exam_group = eq.id_exam_group(+)
                       AND (l_prof_access = 0 OR (l_prof_access != 0 AND EXISTS
                            (SELECT 1
                                                     FROM exam_group eg1,
                                                          exam_egp egp,
                                                          (SELECT DISTINCT gar.id_record id_exam
                                                             FROM group_access ga
                                                            INNER JOIN group_access_prof gaf
                                                               ON gaf.id_group_access = ga.id_group_access
                                                            INNER JOIN group_access_record gar
                                                               ON gar.id_group_access = ga.id_group_access
                                                            WHERE gaf.id_professional = i_prof.id
                                                              AND ga.id_institution IN (i_prof.institution, 0)
                                                              AND ga.id_software IN (i_prof.software, 0)
                                                              AND ga.flg_type = 'E'
                                                              AND gar.flg_type = 'E'
                                                              AND ga.flg_available = pk_exam_constant.g_available
                                                              AND gaf.flg_available = pk_exam_constant.g_available
                                                              AND gar.flg_available = pk_exam_constant.g_available) ecs
                                                    WHERE eg1.id_exam_group = eg.id_exam_group
                                                      AND eg1.id_exam_group = egp.id_exam_group
                                                      AND egp.id_exam = ecs.id_exam
                                                      AND egp.id_exam = ee.id_exam)))
                       AND (i_patient IS NULL OR
                           (((l_pat.gender IS NOT NULL AND coalesce(e.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                           ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                           l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                           (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND nvl(e.age_max, nvl(l_pat.age, 0)) OR
                           l_pat.age IS NULL))));
    
        g_error := 'GET CURSOR';
        SELECT t_rec_exams_search(e.id_exam,
                                  decode(e.type,
                                         'E',
                                         pk_exam_utils.get_alias_translation(i_lang,
                                                                             i_prof,
                                                                             'EXAM.CODE_EXAM.' || e.id_exam,
                                                                             NULL) ||
                                         decode(i_codification,
                                                NULL,
                                                pk_exam_utils.get_exam_with_codification(i_lang, i_prof, e.id_exam),
                                                ''),
                                         pk_translation.get_translation(i_lang,
                                                                        'EXAM_GROUP.CODE_EXAM_GROUP.' || e.id_exam)),
                                  e.type,
                                  e.desc_perform,
                                  e.flg_clinical_question,
                                  decode(e.type,
                                         'E',
                                         pk_mcdt.check_mcdt_laterality(i_lang, i_prof, 'E', e.id_exam),
                                         NULL),
                                  pk_touch_option.get_doc_template_internal(i_lang,
                                                                            i_prof,
                                                                            NULL,
                                                                            NULL,
                                                                            pk_exam_constant.g_doc_area_exam,
                                                                            e.id_exam),
                                  pk_touch_option.get_doc_template_internal(i_lang,
                                                                            i_prof,
                                                                            NULL,
                                                                            NULL,
                                                                            pk_exam_constant.g_doc_area_exam_result,
                                                                            e.id_exam))
          BULK COLLECT
          INTO l_list
          FROM (SELECT num_1 id_exam,
                       vc_3 TYPE,
                       vc_1 desc_perform,
                       vc_2 flg_clinical_question,
                       num_2 position,
                       row_number() over(PARTITION BY num_1 ORDER BY num_2) rn
                  FROM tbl_temp) e
         WHERE rn = 1
         ORDER BY position;
    
        COMMIT;
    
        RETURN l_list;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_SEARCH_FILTER',
                                              l_error);
            RETURN NULL;
    END get_exam_search;

    FUNCTION get_exam_search
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_patient       IN patient.id_patient%TYPE,
        i_exam_type     IN exam.flg_type%TYPE,
        i_flg_type      IN exam_dep_clin_serv.flg_type%TYPE DEFAULT pk_exam_constant.g_exam_can_req,
        i_codification  IN codification.id_codification%TYPE,
        i_dep_clin_serv IN exam_cat_dcs.id_dep_clin_serv%TYPE,
        i_value         IN VARCHAR2,
        o_flg_show      OUT VARCHAR2,
        o_msg           OUT VARCHAR2,
        o_msg_title     OUT VARCHAR2,
        o_list          OUT pk_types.cursor_type,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_count PLS_INTEGER;
    
        l_limit sys_config.desc_sys_config%TYPE := pk_sysconfig.get_config('NUM_RECORD_SEARCH', i_prof);
    
    BEGIN
    
        o_flg_show := pk_exam_constant.g_no;
    
        g_error := 'GET COUNT';
        SELECT /*+opt_estimate(table t rows=1)*/
         COUNT(0)
          INTO l_count
          FROM TABLE(pk_exam_core.get_exam_search(i_lang          => i_lang,
                                                  i_prof          => i_prof,
                                                  i_patient       => i_patient,
                                                  i_exam_type     => i_exam_type,
                                                  i_flg_type      => i_flg_type,
                                                  i_codification  => i_codification,
                                                  i_dep_clin_serv => NULL,
                                                  i_value         => i_value)) t;
    
        IF l_count > l_limit
        THEN
            o_flg_show  := pk_exam_constant.g_yes;
            o_msg       := pk_search.get_overlimit_message(i_lang           => i_lang,
                                                           i_prof           => i_prof,
                                                           i_flg_has_action => pk_exam_constant.g_yes,
                                                           i_limit          => l_limit);
            o_msg_title := pk_message.get_message(i_lang, i_prof, 'SEARCH_CRITERIA_T011');
        ELSIF l_count = 0
        THEN
            o_flg_show  := pk_exam_constant.g_yes;
            o_msg       := pk_message.get_message(i_lang, i_prof, 'COMMON_M117');
            o_msg_title := pk_message.get_message(i_lang, i_prof, 'SEARCH_CRITERIA_T011');
        
            pk_types.open_my_cursor(o_list);
        
            RETURN TRUE;
        END IF;
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT /*+opt_estimate(table t rows=1)*/
             id_exam,
             desc_exam,
             TYPE,
             desc_perform,
             flg_clinical_question,
             flg_laterality_mcdt,
             doc_template_exam,
             doc_template_exam_result
              FROM TABLE(pk_exam_core.get_exam_search(i_lang          => i_lang,
                                                      i_prof          => i_prof,
                                                      i_patient       => i_patient,
                                                      i_exam_type     => i_exam_type,
                                                      i_codification  => i_codification,
                                                      i_dep_clin_serv => NULL,
                                                      i_value         => i_value)) t
             WHERE rownum <= l_limit;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_SEARCH_FILTER',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_search;

    FUNCTION get_exam_category_search
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_patient       IN patient.id_patient%TYPE,
        i_exam_type     IN exam.flg_type%TYPE,
        i_codification  IN codification.id_codification%TYPE DEFAULT NULL,
        i_dep_clin_serv IN exam_cat_dcs.id_dep_clin_serv%TYPE DEFAULT NULL,
        o_list          OUT pk_types.cursor_type,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_pat IS
            SELECT gender, trunc(months_between(SYSDATE, dt_birth) / 12) age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_pat           c_pat%ROWTYPE;
        l_prof_cat_type category.flg_type%TYPE;
        l_prof_access   PLS_INTEGER;
    
    BEGIN
    
        g_error := 'OPEN C_PAT';
        OPEN c_pat;
        FETCH c_pat
            INTO l_pat;
        CLOSE c_pat;
    
        l_prof_cat_type := pk_prof_utils.get_category(i_lang, i_prof);
    
        g_error := 'GET PROF ACCESS';
        BEGIN
            SELECT COUNT(1)
              INTO l_prof_access
              FROM group_access ga
             INNER JOIN group_access_prof gaf
                ON gaf.id_group_access = ga.id_group_access
             INNER JOIN group_access_record gar
                ON gar.id_group_access = ga.id_group_access
             INNER JOIN exam e
                ON e.id_exam = gar.id_record
             WHERE gaf.id_professional = i_prof.id
               AND gaf.flg_available = pk_exam_constant.g_available
               AND ga.id_institution IN (i_prof.institution, 0)
               AND ga.id_software IN (i_prof.software, 0)
               AND ga.flg_type = 'E'
               AND ga.flg_available = pk_exam_constant.g_available
               AND gar.flg_type = 'E'
               AND e.flg_type = i_exam_type;
        EXCEPTION
            WHEN no_data_found THEN
                l_prof_access := 0;
        END;
    
        g_error := 'OPEN O_LIST';
        OPEN o_list FOR
            SELECT id_category, desc_category
              FROM (SELECT DISTINCT e.id_exam_cat id_category,
                                    pk_translation.get_translation(i_lang, ec.code_exam_cat) desc_category,
                                    ec.rank
                      FROM exam e,
                           exam_cat ec,
                           (SELECT *
                              FROM exam_dep_clin_serv
                             WHERE flg_type = pk_exam_constant.g_exam_can_req
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution) edcs,
                           (SELECT DISTINCT gar.id_record id_exam
                              FROM group_access ga
                             INNER JOIN group_access_prof gaf
                                ON gaf.id_group_access = ga.id_group_access
                             INNER JOIN group_access_record gar
                                ON gar.id_group_access = ga.id_group_access
                             WHERE gaf.id_professional = i_prof.id
                               AND ga.id_institution IN (i_prof.institution, 0)
                               AND ga.id_software IN (i_prof.software, 0)
                               AND ga.flg_type = 'E'
                               AND gar.flg_type = 'E'
                               AND ga.flg_available = pk_exam_constant.g_available
                               AND gaf.flg_available = pk_exam_constant.g_available
                               AND gar.flg_available = pk_exam_constant.g_available) ecs
                     WHERE e.flg_type = i_exam_type
                       AND e.flg_available = pk_exam_constant.g_available
                       AND (i_dep_clin_serv IS NULL OR
                           (i_dep_clin_serv IS NOT NULL AND
                           e.id_exam_cat IN (SELECT ecd.id_exam_cat
                                                 FROM exam_cat_dcs ecd
                                                WHERE ecd.id_dep_clin_serv = i_dep_clin_serv)))
                       AND ((EXISTS (SELECT 1
                                       FROM prof_dep_clin_serv pdcs, exam_cat_dcs ecd
                                      WHERE id_professional = i_prof.id
                                        AND pdcs.id_institution = i_prof.institution
                                        AND pdcs.flg_status = pk_exam_constant.g_selected
                                        AND pdcs.id_dep_clin_serv = ecd.id_dep_clin_serv
                                        AND ecd.id_exam_cat = e.id_exam_cat) AND
                            l_prof_cat_type != pk_alert_constant.g_cat_type_doc) OR
                           l_prof_cat_type = pk_alert_constant.g_cat_type_doc)
                       AND e.id_exam_cat = ec.id_exam_cat
                       AND ec.flg_available = pk_exam_constant.g_available
                       AND e.id_exam = edcs.id_exam
                       AND (i_codification IS NULL OR (i_codification IS NOT NULL AND EXISTS
                            (SELECT 1
                                                          FROM codification_instit_soft cis, exam_codification ec
                                                         WHERE cis.id_codification = i_codification
                                                           AND cis.id_institution = i_prof.institution
                                                           AND cis.id_software = i_prof.software
                                                           AND cis.id_codification = ec.id_codification
                                                           AND ec.flg_available = pk_exam_constant.g_available
                                                           AND ec.id_exam = e.id_exam)))
                       AND e.id_exam = ecs.id_exam(+)
                       AND (l_prof_access = 0 OR (l_prof_access != 0 AND ecs.id_exam IS NOT NULL))
                       AND (i_patient IS NULL OR
                           (((l_pat.gender IS NOT NULL AND coalesce(e.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                           ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                           l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                           (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND nvl(e.age_max, nvl(l_pat.age, 0)) OR
                           l_pat.age IS NULL)))
                       AND rownum > 0) -- to solve performance problem when no records are returned
             ORDER BY rank, desc_category;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_CATEGORY_SEARCH',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_category_search;

    FUNCTION get_exam_body_part_search
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_patient      IN patient.id_patient%TYPE,
        i_mcs_concept  IN body_structure_rel.id_mcs_concept%TYPE,
        i_exam_cat     IN exam.id_exam_cat%TYPE,
        i_exam_type    IN exam.flg_type%TYPE,
        i_codification IN codification.id_codification%TYPE,
        o_list         OUT pk_types.cursor_type,
        o_exam_list    OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_pat IS
            SELECT gender, trunc(months_between(SYSDATE, dt_birth) / 12) age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_pat           c_pat%ROWTYPE;
        l_prof_cat_type category.flg_type%TYPE;
        l_msg           sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T117');
        l_mcs_concept   body_structure_rel.id_mcs_concept%TYPE;
        l_prof_access   PLS_INTEGER;
    BEGIN
    
        -- Populate local variables
        g_error         := 'Populate local variables';
        l_prof_cat_type := pk_prof_utils.get_category(i_lang, i_prof);
        l_mcs_concept   := i_mcs_concept;
    
        -- Get Patient data
        g_error := 'OPEN C_PAT';
        OPEN c_pat;
        FETCH c_pat
            INTO l_pat;
        CLOSE c_pat;
    
        g_error := 'GET PROF ACCESS';
        BEGIN
            SELECT COUNT(1)
              INTO l_prof_access
              FROM group_access ga
             INNER JOIN group_access_prof gaf
                ON gaf.id_group_access = ga.id_group_access
             INNER JOIN group_access_record gar
                ON gar.id_group_access = ga.id_group_access
             INNER JOIN exam e
                ON e.id_exam = gar.id_record
             WHERE ga.flg_type = 'E'
               AND ga.id_institution IN (i_prof.institution, 0)
               AND ga.id_software IN (i_prof.software, 0)
               AND ga.flg_available = pk_exam_constant.g_available
               AND gaf.id_professional = i_prof.id
               AND gaf.flg_available = pk_exam_constant.g_available
               AND gar.flg_type = 'E'
               AND e.flg_type = i_exam_type;
        EXCEPTION
            WHEN no_data_found THEN
                l_prof_access := 0;
        END;
    
        -- Get exams that are possible to be requested for this patient
        g_error := 'Delete TBL_TEMP records';
        DELETE FROM tbl_temp;
    
        g_error := 'Get Exams that are requestable for this patient';
        INSERT INTO tbl_temp
            (num_1)
            (SELECT e.id_exam
               FROM exam e,
                    exam_cat ec,
                    (SELECT *
                       FROM exam_dep_clin_serv
                      WHERE flg_type = pk_exam_constant.g_exam_can_req
                        AND id_software = i_prof.software
                        AND id_institution = i_prof.institution) edcs,
                    (SELECT DISTINCT gar.id_record id_exam
                       FROM group_access ga
                      INNER JOIN group_access_prof gaf
                         ON gaf.id_group_access = ga.id_group_access
                      INNER JOIN group_access_record gar
                         ON gar.id_group_access = ga.id_group_access
                      WHERE gaf.id_professional = i_prof.id
                        AND ga.flg_type = 'E'
                        AND ga.id_institution IN (i_prof.institution, 0)
                        AND ga.id_software IN (i_prof.software, 0)
                        AND ga.flg_available = pk_exam_constant.g_available
                        AND gaf.flg_available = pk_exam_constant.g_available
                        AND gar.flg_type = 'E'
                        AND gar.flg_available = pk_exam_constant.g_available) ecs
              WHERE e.flg_type = i_exam_type
                AND e.flg_available = pk_exam_constant.g_available
                AND e.id_exam_cat = ec.id_exam_cat
                AND ec.flg_available = pk_exam_constant.g_available
                AND (i_exam_cat IS NULL OR (i_exam_cat IS NOT NULL AND e.id_exam_cat = i_exam_cat))
                AND ((EXISTS
                     (SELECT 1
                         FROM prof_dep_clin_serv pdcs, exam_cat_dcs ecd
                        WHERE id_professional = i_prof.id
                          AND pdcs.id_institution = i_prof.institution
                          AND pdcs.flg_status = pk_exam_constant.g_selected
                          AND pdcs.id_dep_clin_serv = ecd.id_dep_clin_serv
                          AND ecd.id_exam_cat = e.id_exam_cat) AND l_prof_cat_type != pk_alert_constant.g_cat_type_doc) OR
                    l_prof_cat_type = pk_alert_constant.g_cat_type_doc)
                AND e.id_exam = edcs.id_exam
                AND (i_codification IS NULL OR (i_codification IS NOT NULL AND EXISTS
                     (SELECT 1
                                                   FROM codification_instit_soft cis, exam_codification ec
                                                  WHERE cis.id_codification = i_codification
                                                    AND cis.id_institution = i_prof.institution
                                                    AND cis.id_software = i_prof.software
                                                    AND cis.id_codification = ec.id_codification
                                                    AND ec.flg_available = pk_exam_constant.g_available
                                                    AND ec.id_exam = e.id_exam)))
                AND e.id_exam = ecs.id_exam(+)
                AND (l_prof_access = 0 OR (l_prof_access != 0 AND ecs.id_exam IS NOT NULL))
                AND (i_patient IS NULL OR
                    (((l_pat.gender IS NOT NULL AND coalesce(e.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                    ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                    l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                    (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND nvl(e.age_max, nvl(l_pat.age, 0)) OR
                    l_pat.age IS NULL)))
                AND rownum > 0 -- to solve performance problem when no records are returned
             UNION ALL
             SELECT eg.id_exam_group id_exam
               FROM exam_group eg,
                    exam_egp ee,
                    exam e,
                    exam_cat ec,
                    (SELECT *
                       FROM exam_dep_clin_serv
                      WHERE flg_type = pk_exam_constant.g_exam_can_req
                        AND id_software = i_prof.software
                        AND id_institution = i_prof.institution) egdcs,
                    (SELECT *
                       FROM exam_dep_clin_serv
                      WHERE flg_type = pk_exam_constant.g_exam_can_req
                        AND id_software = i_prof.software
                        AND id_institution = i_prof.institution) edcs
              WHERE eg.id_group_parent IS NOT NULL
                AND eg.id_exam_group = egdcs.id_exam_group
                AND eg.id_exam_group = ee.id_exam_group
                AND ee.id_exam = e.id_exam
                AND e.flg_type = i_exam_type
                AND e.flg_available = pk_exam_constant.g_available
                AND e.id_exam_cat = ec.id_exam_cat
                AND ec.flg_available = pk_exam_constant.g_available
                AND (i_exam_cat IS NULL OR (i_exam_cat IS NOT NULL AND e.id_exam_cat = i_exam_cat))
                AND ((EXISTS
                     (SELECT 1
                         FROM prof_dep_clin_serv pdcs, exam_cat_dcs ecd
                        WHERE id_professional = i_prof.id
                          AND pdcs.id_institution = i_prof.institution
                          AND pdcs.flg_status = pk_exam_constant.g_selected
                          AND pdcs.id_dep_clin_serv = ecd.id_dep_clin_serv
                          AND ecd.id_exam_cat = e.id_exam_cat) AND l_prof_cat_type != pk_alert_constant.g_cat_type_doc) OR
                    l_prof_cat_type = pk_alert_constant.g_cat_type_doc)
                AND e.id_exam = edcs.id_exam
                AND (l_prof_access = 0 OR
                    (l_prof_access != 0 AND EXISTS (SELECT 1
                                                       FROM exam_group eg1,
                                                            exam_egp egp,
                                                            (SELECT DISTINCT gar.id_record id_exam
                                                               FROM group_access ga
                                                              INNER JOIN group_access_prof gaf
                                                                 ON gaf.id_group_access = ga.id_group_access
                                                              INNER JOIN group_access_record gar
                                                                 ON gar.id_group_access = ga.id_group_access
                                                              WHERE ga.flg_type = 'E'
                                                                AND ga.id_institution IN (i_prof.institution, 0)
                                                                AND ga.id_software IN (i_prof.software, 0)
                                                                AND ga.flg_available = pk_exam_constant.g_available
                                                                AND gaf.id_professional = i_prof.id
                                                                AND gaf.flg_available = pk_exam_constant.g_available
                                                                AND gar.flg_type = 'E'
                                                                AND gar.flg_available = pk_exam_constant.g_available) ecs
                                                      WHERE eg1.id_exam_group = eg.id_exam_group
                                                        AND eg1.id_exam_group = egp.id_exam_group
                                                        AND egp.id_exam = ecs.id_exam
                                                        AND egp.id_exam = ee.id_exam)))
                AND (i_patient IS NULL OR
                    (((l_pat.gender IS NOT NULL AND coalesce(e.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                    ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                    l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                    (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND nvl(e.age_max, nvl(l_pat.age, 0)) OR
                    l_pat.age IS NULL)))
                AND rownum > 0); -- to solve performance problem when no records are returned
    
        -- Get Body Structure List CURSOR
        IF l_mcs_concept IS NULL
           AND i_exam_cat IS NULL
        THEN
            l_mcs_concept := pk_sysconfig.get_config('EXAMS_BODY_STRUCTURE_INITIAL_CONCEPT_ID', i_prof);
        
            -- On the first column, the app should show all body structure from the first level
            -- and also those body structure's that are defined for the professional dep clin serv.
            -- Body structure's should be ordered by dep clin serv, and then by the generic ones
            g_error := 'OPEN O_BODY_STRUCTURE_LIST';
            OPEN o_list FOR
            -- Body Structure's with exams or any child node with exams
                SELECT bsr.id_mcs_concept,
                       bsr.id_body_structure,
                       pk_translation.get_translation(i_lang,
                                                      'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' || bsr.id_body_structure) desc_body_structure,
                       bsr.rank
                  FROM ( -- Generic body structure's
                         SELECT DISTINCT bsr.id_mcs_concept,
                                          bs.id_body_structure,
                                          decode(bsdcs.id_dep_clin_serv, NULL, 20, 10) rank
                           FROM body_structure_rel bsr, body_structure_dcs bsdcs, body_structure bs
                          WHERE bsr.id_mcs_concept_parent = l_mcs_concept
                            AND bsr.id_institution = i_prof.institution
                            AND bs.id_mcs_concept = bsr.id_mcs_concept
                            AND bs.flg_available = pk_exam_constant.g_available
                            AND bsdcs.id_body_structure = bs.id_body_structure
                            AND bsdcs.id_institution = i_prof.institution
                            AND bsdcs.flg_available = pk_exam_constant.g_available
                         UNION
                         -- Professional dep clin serv body structure's
                        SELECT DISTINCT bsr.id_mcs_concept,
                                         bs.id_body_structure,
                                         decode(bsdcs.id_dep_clin_serv, NULL, 20, 10) rank
                          FROM body_structure bs,
                                body_structure_dcs bsdcs,
                                (SELECT bsr.id_body_structure_rel, bsr.id_mcs_concept
                                   FROM body_structure_rel bsr
                                  WHERE LEVEL < 2
                                  START WITH bsr.id_mcs_concept_parent = l_mcs_concept
                                         AND bsr.id_institution = i_prof.institution
                                 CONNECT BY nocycle PRIOR bsr.id_mcs_concept = bsr.id_mcs_concept_parent
                                        AND bsr.id_institution = i_prof.institution) bsr,
                                (SELECT pdcs.id_dep_clin_serv
                                   FROM prof_dep_clin_serv pdcs
                                  WHERE pdcs.id_professional = i_prof.id
                                    AND pdcs.id_institution = i_prof.institution
                                    AND pdcs.flg_status = pk_exam_constant.g_selected) pdcs
                         WHERE bs.id_mcs_concept = bsr.id_mcs_concept
                           AND bs.flg_available = pk_exam_constant.g_available
                           AND bsdcs.id_body_structure = bs.id_body_structure
                           AND bsdcs.id_institution = i_prof.institution
                           AND bsdcs.flg_available = pk_exam_constant.g_available
                           AND pdcs.id_dep_clin_serv = bsdcs.id_dep_clin_serv) bsr
                 WHERE pk_exam_utils.body_structure_has_exams(i_lang, i_prof, bsr.id_mcs_concept) =
                       pk_exam_constant.g_yes
                 ORDER BY rank, desc_body_structure;
        
        ELSE
        
            IF l_mcs_concept IS NULL
            THEN
                l_mcs_concept := pk_sysconfig.get_config('EXAMS_BODY_STRUCTURE_INITIAL_CONCEPT_ID', i_prof);
            END IF;
        
            -- This scenario happens:
            -- a) the user selected an Exam Category
            -- b) next interaction's of body structure
            g_error := 'OPEN O_BODY_STRUCTURE_LIST';
            -- Generic body structure's with exams or any child node with exams
            OPEN o_list FOR
                SELECT DISTINCT bsr.id_mcs_concept,
                                bsr.id_body_structure,
                                pk_translation.get_translation(i_lang,
                                                               'BODY_STRUCTURE.CODE_BODY_STRUCTURE.' ||
                                                               bsr.id_body_structure) desc_body_structure
                  FROM (SELECT DISTINCT bsr.id_mcs_concept, bs.id_body_structure
                          FROM body_structure bs, body_structure_rel bsr, body_structure_dcs bsdcs
                         WHERE bsr.id_mcs_concept_parent = l_mcs_concept
                           AND bsr.id_institution = i_prof.institution
                           AND bs.id_mcs_concept = bsr.id_mcs_concept
                           AND bs.flg_available = pk_exam_constant.g_available
                           AND bsdcs.id_body_structure = bs.id_body_structure
                           AND bsdcs.id_institution = i_prof.institution
                           AND bsdcs.flg_available = pk_exam_constant.g_available) bsr
                 WHERE pk_exam_utils.body_structure_has_exams(i_lang, i_prof, bsr.id_mcs_concept) =
                       pk_exam_constant.g_yes
                 ORDER BY desc_body_structure;
        
        END IF;
    
        -- Get Exams List CURSOR
        -- if both input parameters are NULL, exams list should not be retrieved
        IF i_mcs_concept IS NOT NULL
           OR i_exam_cat IS NOT NULL
        THEN
            IF i_mcs_concept IS NULL
               AND i_exam_cat IS NOT NULL
            THEN
                g_error := 'OPEN O_EXAMS_LIST';
                OPEN o_exam_list FOR
                    SELECT id_exam,
                           decode(TYPE,
                                  'E',
                                  pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || id_exam, NULL) ||
                                  pk_exam_utils.get_exam_with_codification(i_lang, i_prof, id_exam),
                                  pk_translation.get_translation(i_lang, 'EXAM_GROUP.CODE_EXAM_GROUP.' || id_exam)) desc_exam,
                           id_exam_cat id_category,
                           pk_translation.get_translation(i_lang, 'EXAM_CAT.CODE_EXAM_CAT.' || id_exam_cat) desc_category,
                           TYPE,
                           desc_perform,
                           flg_clinical_question,
                           decode(TYPE, 'E', pk_mcdt.check_mcdt_laterality(i_lang, i_prof, 'E', id_exam), NULL) flg_laterality_mcdt,
                           pk_touch_option.get_doc_template_internal(i_lang,
                                                                     i_prof,
                                                                     NULL,
                                                                     NULL,
                                                                     pk_exam_constant.g_doc_area_exam,
                                                                     id_exam) doc_template_exam,
                           pk_touch_option.get_doc_template_internal(i_lang,
                                                                     i_prof,
                                                                     NULL,
                                                                     NULL,
                                                                     pk_exam_constant.g_doc_area_exam_result,
                                                                     id_exam) doc_template_exam_result
                      FROM (SELECT NULL id_mcs_concept,
                                   e.id_exam,
                                   e.id_exam_cat,
                                   'E' TYPE,
                                   decode(edcs.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                                   decode(eq.id_exam,
                                          NULL,
                                          pk_exam_constant.g_no,
                                          decode(instr(nvl(eq.flg_mandatory, pk_exam_constant.g_no),
                                                       pk_exam_constant.g_yes),
                                                 0,
                                                 pk_exam_constant.g_yes,
                                                 'M')) flg_clinical_question
                              FROM exam e,
                                   (SELECT *
                                      FROM exam_dep_clin_serv
                                     WHERE flg_type = pk_exam_constant.g_exam_can_req
                                       AND id_software = i_prof.software
                                       AND id_institution = i_prof.institution) edcs,
                                   (SELECT id_exam, concatenate(flg_mandatory) flg_mandatory
                                      FROM (SELECT DISTINCT id_exam, flg_mandatory
                                              FROM exam_questionnaire
                                             WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                               AND id_institution = i_prof.institution
                                               AND flg_available = pk_exam_constant.g_available)
                                     GROUP BY id_exam) eq,
                                   (SELECT DISTINCT gar.id_record id_exam
                                      FROM group_access ga
                                     INNER JOIN group_access_prof gaf
                                        ON gaf.id_group_access = ga.id_group_access
                                     INNER JOIN group_access_record gar
                                        ON gar.id_group_access = ga.id_group_access
                                     WHERE ga.flg_type = 'E'
                                       AND ga.id_institution IN (i_prof.institution, 0)
                                       AND ga.id_software IN (i_prof.software, 0)
                                       AND gaf.id_professional = i_prof.id
                                       AND ga.flg_available = pk_exam_constant.g_available
                                       AND gaf.flg_available = pk_exam_constant.g_available
                                       AND gar.flg_type = 'E'
                                       AND gar.flg_available = pk_exam_constant.g_available) ecs
                             WHERE e.flg_type = i_exam_type
                               AND e.flg_available = pk_exam_constant.g_available
                               AND e.id_exam_cat = i_exam_cat
                               AND ((EXISTS (SELECT 1
                                               FROM prof_dep_clin_serv pdcs, exam_cat_dcs ecd
                                              WHERE id_professional = i_prof.id
                                                AND pdcs.id_institution = i_prof.institution
                                                AND pdcs.flg_status = pk_exam_constant.g_selected
                                                AND pdcs.id_dep_clin_serv = ecd.id_dep_clin_serv
                                                AND ecd.id_exam_cat = e.id_exam_cat) AND
                                    l_prof_cat_type != pk_alert_constant.g_cat_type_doc) OR
                                   l_prof_cat_type = pk_alert_constant.g_cat_type_doc)
                               AND e.id_exam = edcs.id_exam
                               AND e.id_exam = eq.id_exam(+)
                               AND (i_codification IS NULL OR
                                   (i_codification IS NOT NULL AND EXISTS
                                    (SELECT 1
                                        FROM codification_instit_soft cis, exam_codification ec
                                       WHERE cis.id_codification = i_codification
                                         AND cis.id_institution = i_prof.institution
                                         AND cis.id_software = i_prof.software
                                         AND cis.id_codification = ec.id_codification
                                         AND ec.flg_available = pk_exam_constant.g_available
                                         AND ec.id_exam = e.id_exam)))
                               AND e.id_exam = ecs.id_exam(+)
                               AND (l_prof_access = 0 OR (l_prof_access != 0 AND ecs.id_exam IS NOT NULL))
                               AND (i_patient IS NULL OR
                                   (((l_pat.gender IS NOT NULL AND coalesce(e.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                   ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                   l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                   (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND nvl(e.age_max, nvl(l_pat.age, 0)) OR
                                   l_pat.age IS NULL)))
                               AND rownum > 0 -- to solve performance problem when no records are returned
                            UNION ALL
                            SELECT id_mcs_concept, id_exam, id_exam_cat, TYPE, desc_perform, flg_clinical_question
                              FROM (SELECT NULL id_mcs_concept,
                                           eg.id_exam_group id_exam,
                                           e.id_exam_cat,
                                           'G' TYPE,
                                           decode(edcs.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                                           decode(eq.id_exam,
                                                  NULL,
                                                  pk_exam_constant.g_no,
                                                  decode(instr(nvl(eq.flg_mandatory, pk_exam_constant.g_no),
                                                               pk_exam_constant.g_yes),
                                                         0,
                                                         pk_exam_constant.g_yes,
                                                         'M')) flg_clinical_question,
                                           row_number() over(PARTITION BY eg.id_exam_group, eq.flg_mandatory ORDER BY eq.flg_mandatory DESC) rn
                                      FROM exam_group eg,
                                           exam_egp ee,
                                           exam e,
                                           (SELECT *
                                              FROM exam_dep_clin_serv
                                             WHERE flg_type = pk_exam_constant.g_exam_can_req
                                               AND id_software = i_prof.software
                                               AND id_institution = i_prof.institution) egdcs,
                                           (SELECT *
                                              FROM exam_dep_clin_serv
                                             WHERE flg_type = pk_exam_constant.g_exam_can_req
                                               AND id_software = i_prof.software
                                               AND id_institution = i_prof.institution) edcs,
                                           (SELECT id_exam, concatenate(flg_mandatory) flg_mandatory
                                              FROM (SELECT DISTINCT id_exam, flg_mandatory
                                                      FROM exam_questionnaire
                                                     WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                                       AND id_institution = i_prof.institution
                                                       AND flg_available = pk_exam_constant.g_available)
                                             GROUP BY id_exam) eq
                                     WHERE eg.id_group_parent IS NOT NULL
                                       AND eg.id_exam_group = egdcs.id_exam_group
                                       AND eg.id_exam_group = ee.id_exam_group
                                       AND ee.id_exam = e.id_exam
                                       AND e.flg_type = i_exam_type
                                       AND e.flg_available = pk_exam_constant.g_available
                                       AND e.id_exam_cat = i_exam_cat
                                       AND ((EXISTS (SELECT 1
                                                       FROM prof_dep_clin_serv pdcs, exam_cat_dcs ecd
                                                      WHERE id_professional = i_prof.id
                                                        AND pdcs.id_institution = i_prof.institution
                                                        AND pdcs.flg_status = pk_exam_constant.g_selected
                                                        AND pdcs.id_dep_clin_serv = ecd.id_dep_clin_serv
                                                        AND ecd.id_exam_cat = e.id_exam_cat) AND
                                            l_prof_cat_type != pk_alert_constant.g_cat_type_doc) OR
                                           l_prof_cat_type = pk_alert_constant.g_cat_type_doc)
                                       AND e.id_exam = edcs.id_exam
                                       AND e.id_exam = eq.id_exam(+)
                                       AND (l_prof_access = 0 OR
                                           (l_prof_access != 0 AND EXISTS
                                            (SELECT 1
                                                FROM exam_group eg1,
                                                     exam_egp egp,
                                                     (SELECT DISTINCT gar.id_record id_exam
                                                        FROM group_access ga
                                                       INNER JOIN group_access_prof gaf
                                                          ON gaf.id_group_access = ga.id_group_access
                                                       INNER JOIN group_access_record gar
                                                          ON gar.id_group_access = ga.id_group_access
                                                       WHERE ga.flg_type = 'E'
                                                         AND ga.id_institution IN (i_prof.institution, 0)
                                                         AND ga.id_software IN (i_prof.software, 0)
                                                         AND ga.flg_available = pk_exam_constant.g_available
                                                         AND gaf.id_professional = i_prof.id
                                                         AND gaf.flg_available = pk_exam_constant.g_available
                                                         AND gar.flg_type = 'E'
                                                         AND gar.flg_available = pk_exam_constant.g_available) ecs
                                               WHERE eg1.id_exam_group = eg.id_exam_group
                                                 AND eg1.id_exam_group = egp.id_exam_group
                                                 AND egp.id_exam = ecs.id_exam
                                                 AND egp.id_exam = ee.id_exam)))
                                       AND (i_patient IS NULL OR
                                           (((l_pat.gender IS NOT NULL AND
                                           coalesce(e.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                           ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                           l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                           (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND
                                           nvl(e.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                                       AND rownum > 0) -- to solve performance problem when no records are returned
                             WHERE rn = 1)
                     ORDER BY desc_exam;
            ELSE
                -- IF (i_mcs_concept IS NOT NULL AND i_exam_cat IS NULL)
                -- OR
                -- (i_mcs_concept IS NOT NULL AND i_exam_cat IS NOT NULL)
                l_mcs_concept := nvl(i_mcs_concept,
                                     pk_sysconfig.get_config('EXAMS_BODY_STRUCTURE_INITIAL_CONCEPT_ID', i_prof));
            
                g_error := 'OPEN O_EXAMS_LIST';
                OPEN o_exam_list FOR
                    SELECT id_exam,
                           decode(TYPE,
                                  'E',
                                  pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || id_exam, NULL) ||
                                  pk_exam_utils.get_exam_with_codification(i_lang, i_prof, id_exam),
                                  pk_translation.get_translation(i_lang, 'EXAM_GROUP.CODE_EXAM_GROUP.' || id_exam)) desc_exam,
                           id_exam_cat id_category,
                           pk_translation.get_translation(i_lang, 'EXAM_CAT.CODE_EXAM_CAT.' || id_exam_cat) desc_category,
                           TYPE,
                           desc_perform,
                           flg_clinical_question,
                           decode(TYPE, 'E', pk_mcdt.check_mcdt_laterality(i_lang, i_prof, 'E', id_exam), NULL) flg_laterality_mcdt,
                           decode(TYPE,
                                  'E',
                                  pk_touch_option.get_doc_template_internal(i_lang,
                                                                            i_prof,
                                                                            NULL,
                                                                            NULL,
                                                                            pk_exam_constant.g_doc_area_exam,
                                                                            id_exam),
                                  NULL) doc_template_exam,
                           decode(TYPE,
                                  'E',
                                  pk_touch_option.get_doc_template_internal(i_lang,
                                                                            i_prof,
                                                                            NULL,
                                                                            NULL,
                                                                            pk_exam_constant.g_doc_area_exam_result,
                                                                            id_exam),
                                  NULL) doc_template_exam_result
                      FROM (WITH body_structure_data AS ( --- body_structure
                                                         SELECT DISTINCT bsr.id_mcs_concept, ebs.id_exam
                                                           FROM exam_body_structure ebs,
                                                                 body_structure bs,
                                                                 body_structure_dcs bsdcs,
                                                                 (SELECT bsr.id_mcs_concept
                                                                    FROM body_structure_rel bsr
                                                                   WHERE bsr.id_mcs_concept = l_mcs_concept
                                                                     AND bsr.id_institution = i_prof.institution
                                                                  UNION
                                                                  SELECT bsr.id_mcs_concept
                                                                    FROM body_structure_rel bsr
                                                                   WHERE LEVEL < 2
                                                                   START WITH bsr.id_mcs_concept_parent = l_mcs_concept
                                                                          AND bsr.id_institution = i_prof.institution
                                                                  CONNECT BY nocycle
                                                                   PRIOR
                                                                              bsr.id_mcs_concept = bsr.id_mcs_concept_parent
                                                                         AND bsr.id_institution = i_prof.institution) bsr
                                                          WHERE bs.id_mcs_concept = bsr.id_mcs_concept
                                                            AND bs.flg_available = pk_exam_constant.g_available
                                                            AND ebs.id_body_structure = bs.id_body_structure
                                                            AND ebs.flg_available = pk_exam_constant.g_available
                                                            AND bsdcs.id_body_structure = bs.id_body_structure
                                                            AND bsdcs.id_institution = i_prof.institution
                                                            AND bsdcs.flg_available = pk_exam_constant.g_available)
                               SELECT bsd.id_mcs_concept,
                                      e.id_exam,
                                      e.id_exam_cat,
                                      'E' TYPE,
                                      decode(edcs.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                                      decode(eq.id_exam,
                                             NULL,
                                             pk_exam_constant.g_no,
                                             decode(instr(nvl(eq.flg_mandatory, pk_exam_constant.g_no),
                                                          pk_exam_constant.g_yes),
                                                    0,
                                                    pk_exam_constant.g_yes,
                                                    'M')) flg_clinical_question
                                 FROM exam e,
                                      exam_cat ec,
                                      (SELECT *
                                         FROM exam_dep_clin_serv
                                        WHERE flg_type = pk_exam_constant.g_exam_can_req
                                          AND id_software = i_prof.software
                                          AND id_institution = i_prof.institution) edcs,
                                      (SELECT id_exam, concatenate(flg_mandatory) flg_mandatory
                                         FROM (SELECT DISTINCT id_exam, flg_mandatory
                                                 FROM exam_questionnaire
                                                WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                                  AND id_institution = i_prof.institution
                                                  AND flg_available = pk_exam_constant.g_available)
                                        GROUP BY id_exam) eq,
                                      body_structure_data bsd,
                                      (SELECT DISTINCT gar.id_record id_exam
                                         FROM group_access ga
                                        INNER JOIN group_access_prof gaf
                                           ON gaf.id_group_access = ga.id_group_access
                                        INNER JOIN group_access_record gar
                                           ON gar.id_group_access = ga.id_group_access
                                        WHERE ga.flg_type = 'E'
                                          AND ga.id_institution IN (i_prof.institution, 0)
                                          AND ga.id_software IN (i_prof.software, 0)
                                          AND ga.flg_available = pk_exam_constant.g_available
                                          AND gaf.id_professional = i_prof.id
                                          AND gaf.flg_available = pk_exam_constant.g_available
                                          AND gar.flg_type = 'E'
                                          AND gar.flg_available = pk_exam_constant.g_available) ecs
                                WHERE bsd.id_exam = e.id_exam
                                  AND e.flg_type = i_exam_type
                                  AND e.flg_available = pk_exam_constant.g_available
                                  AND e.id_exam_cat = ec.id_exam_cat
                                  AND ec.flg_available = pk_exam_constant.g_available
                                  AND (i_exam_cat IS NULL OR (i_exam_cat IS NOT NULL AND e.id_exam_cat = i_exam_cat))
                                  AND ((EXISTS (SELECT 1
                                                  FROM prof_dep_clin_serv pdcs, exam_cat_dcs ecd
                                                 WHERE id_professional = i_prof.id
                                                   AND pdcs.id_institution = i_prof.institution
                                                   AND pdcs.flg_status = pk_exam_constant.g_selected
                                                   AND pdcs.id_dep_clin_serv = ecd.id_dep_clin_serv
                                                   AND ecd.id_exam_cat = e.id_exam_cat) AND
                                       l_prof_cat_type != pk_alert_constant.g_cat_type_doc) OR
                                      l_prof_cat_type = pk_alert_constant.g_cat_type_doc)
                                  AND e.id_exam = edcs.id_exam
                                  AND (i_codification IS NULL OR
                                      (i_codification IS NOT NULL AND EXISTS
                                       (SELECT 1
                                           FROM codification_instit_soft cis, exam_codification ec
                                          WHERE cis.id_codification = i_codification
                                            AND cis.id_institution = i_prof.institution
                                            AND cis.id_software = i_prof.software
                                            AND cis.id_codification = ec.id_codification
                                            AND ec.flg_available = pk_exam_constant.g_available
                                            AND ec.id_exam = e.id_exam)))
                                  AND e.id_exam = eq.id_exam(+)
                                  AND e.id_exam = ecs.id_exam(+)
                                  AND (l_prof_access = 0 OR (l_prof_access != 0 AND ecs.id_exam IS NOT NULL))
                                  AND (i_patient IS NULL OR
                                      (((l_pat.gender IS NOT NULL AND coalesce(e.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                      ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                      l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                      (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND
                                      nvl(e.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                                  AND rownum > 0 -- to solve performance problem when no records are returned
                               UNION ALL
                               SELECT id_mcs_concept, id_exam, id_exam_cat, TYPE, desc_perform, flg_clinical_question
                                 FROM (SELECT bsd.id_mcs_concept,
                                              eg.id_exam_group id_exam,
                                              e.id_exam_cat,
                                              'G' TYPE,
                                              decode(edcs.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                                              decode(eq.id_exam_group,
                                                     NULL,
                                                     pk_exam_constant.g_no,
                                                     decode(instr(nvl(eq.flg_mandatory, pk_exam_constant.g_no),
                                                                  pk_exam_constant.g_yes),
                                                            0,
                                                            pk_exam_constant.g_yes,
                                                            'M')) flg_clinical_question,
                                              row_number() over(PARTITION BY eg.id_exam_group, eq.flg_mandatory ORDER BY eq.flg_mandatory DESC) rn
                                         FROM exam_group eg,
                                              exam_egp ee,
                                              exam e,
                                              exam_cat ec,
                                              (SELECT *
                                                 FROM exam_dep_clin_serv
                                                WHERE flg_type = pk_exam_constant.g_exam_can_req
                                                  AND id_software = i_prof.software
                                                  AND id_institution = i_prof.institution) egdcs,
                                              (SELECT *
                                                 FROM exam_dep_clin_serv
                                                WHERE flg_type = pk_exam_constant.g_exam_can_req
                                                  AND id_software = i_prof.software
                                                  AND id_institution = i_prof.institution) edcs,
                                              (SELECT id_exam_group, concatenate(flg_mandatory) flg_mandatory
                                                 FROM (SELECT DISTINCT id_exam_group, flg_mandatory
                                                         FROM exam_questionnaire
                                                        WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                                          AND id_institution = i_prof.institution
                                                          AND flg_available = pk_exam_constant.g_available)
                                                GROUP BY id_exam_group) eq,
                                              body_structure_data bsd
                                        WHERE bsd.id_exam = e.id_exam
                                          AND eg.id_group_parent IS NOT NULL
                                          AND eg.id_exam_group = egdcs.id_exam_group
                                          AND eg.id_exam_group = ee.id_exam_group
                                          AND ee.id_exam = e.id_exam
                                          AND e.flg_type = i_exam_type
                                          AND e.flg_available = pk_exam_constant.g_available
                                          AND e.id_exam_cat = ec.id_exam_cat
                                          AND ec.flg_available = pk_exam_constant.g_available
                                          AND (i_exam_cat IS NULL OR
                                              (i_exam_cat IS NOT NULL AND e.id_exam_cat = i_exam_cat))
                                          AND ((EXISTS (SELECT 1
                                                          FROM prof_dep_clin_serv pdcs, exam_cat_dcs ecd
                                                         WHERE id_professional = i_prof.id
                                                           AND pdcs.id_institution = i_prof.institution
                                                           AND pdcs.flg_status = pk_exam_constant.g_selected
                                                           AND pdcs.id_dep_clin_serv = ecd.id_dep_clin_serv
                                                           AND ecd.id_exam_cat = e.id_exam_cat) AND
                                               l_prof_cat_type != pk_alert_constant.g_cat_type_doc) OR
                                              l_prof_cat_type = pk_alert_constant.g_cat_type_doc)
                                          AND e.id_exam = edcs.id_exam
                                          AND eg.id_exam_group = eq.id_exam_group(+)
                                          AND (l_prof_access = 0 OR
                                              (l_prof_access != 0 AND EXISTS
                                               (SELECT 1
                                                   FROM exam_group eg1,
                                                        exam_egp egp,
                                                        (SELECT DISTINCT gar.id_record id_exam
                                                           FROM group_access ga
                                                          INNER JOIN group_access_prof gaf
                                                             ON gaf.id_group_access = ga.id_group_access
                                                          INNER JOIN group_access_record gar
                                                             ON gar.id_group_access = ga.id_group_access
                                                          WHERE ga.flg_type = 'E'
                                                            AND ga.id_institution IN (i_prof.institution, 0)
                                                            AND ga.id_software IN (i_prof.software, 0)
                                                            AND ga.flg_available = pk_exam_constant.g_available
                                                            AND gaf.id_professional = i_prof.id
                                                            AND gaf.flg_available = pk_exam_constant.g_available
                                                            AND gar.flg_type = 'E'
                                                            AND gar.flg_available = pk_exam_constant.g_available) ecs
                                                  WHERE eg1.id_exam_group = eg.id_exam_group
                                                    AND eg1.id_exam_group = egp.id_exam_group
                                                    AND egp.id_exam = ecs.id_exam
                                                    AND egp.id_exam = ee.id_exam)))
                                          AND (i_patient IS NULL OR
                                              (((l_pat.gender IS NOT NULL AND
                                              coalesce(e.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                              ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                              l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                              (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND
                                              nvl(e.age_max, nvl(l_pat.age, 0)) OR l_pat.age IS NULL)))
                                          AND rownum > 0)
                                WHERE rn = 1) -- to solve performance problem when no records are returned
                                ORDER BY desc_exam;
            
            
            END IF;
        END IF;
    
        pk_types.open_cursor_if_closed(o_list);
        pk_types.open_cursor_if_closed(o_exam_list);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_BODY_PART_SEARCH',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            pk_types.open_my_cursor(o_exam_list);
            RETURN FALSE;
    END get_exam_body_part_search;

    FUNCTION get_exam_in_group
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_exam_group   IN exam_group.id_exam_group%TYPE,
        i_codification IN codification.id_codification%TYPE,
        o_list         OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_prof_access PLS_INTEGER;
    
        l_msg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T117');
    
    BEGIN
    
        g_error := 'GET PROF ACCESS';
        BEGIN
            SELECT COUNT(1)
              INTO l_prof_access
              FROM group_access ga
             INNER JOIN group_access_prof gaf
                ON gaf.id_group_access = ga.id_group_access
             INNER JOIN group_access_record gar
                ON gar.id_group_access = ga.id_group_access
             WHERE gaf.id_professional = i_prof.id
               AND gaf.flg_available = pk_exam_constant.g_available
               AND ga.id_institution IN (i_prof.institution, 0)
               AND ga.id_software IN (i_prof.software, 0)
               AND ga.flg_type = 'E'
               AND ga.flg_available = pk_exam_constant.g_available
               AND gar.flg_type = 'E';
        EXCEPTION
            WHEN no_data_found THEN
                l_prof_access := 0;
        END;
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT id_exam_group,
                   id_exam,
                   desc_exam,
                   TYPE,
                   (SELECT pk_mcdt.check_mcdt_laterality(i_lang, i_prof, 'E', id_exam)
                      FROM dual) flg_laterality_mcdt,
                   desc_perform,
                   flg_clinical_question
              FROM (SELECT ee.id_exam_group,
                           e.id_exam,
                           pk_exam_utils.get_alias_translation(i_lang, i_prof, e.code_exam, NULL) ||
                           pk_exam_utils.get_exam_with_codification(i_lang, i_prof, e.id_exam) desc_exam,
                           decode(edcs.flg_execute, pk_exam_constant.g_no, l_msg, NULL) desc_perform,
                           decode(eq.id_exam,
                                  NULL,
                                  pk_exam_constant.g_no,
                                  decode(instr(nvl(eq.flg_mandatory, pk_exam_constant.g_no), pk_exam_constant.g_yes),
                                         0,
                                         pk_exam_constant.g_yes,
                                         'M')) flg_clinical_question,
                           'E' TYPE,
                           ee.rank
                      FROM exam e,
                           exam_egp ee,
                           (SELECT *
                              FROM exam_dep_clin_serv
                             WHERE flg_type = pk_exam_constant.g_exam_can_req
                               AND id_software = i_prof.software
                               AND id_institution = i_prof.institution) edcs,
                           (SELECT id_exam, concatenate(flg_mandatory) flg_mandatory
                              FROM (SELECT DISTINCT id_exam, flg_mandatory
                                      FROM exam_questionnaire
                                     WHERE flg_time = pk_exam_constant.g_exam_cq_on_order
                                       AND id_institution = i_prof.institution
                                       AND flg_available = pk_exam_constant.g_available)
                             GROUP BY id_exam) eq
                     WHERE ee.id_exam_group = i_exam_group
                       AND ee.id_exam = e.id_exam
                       AND e.flg_available = pk_exam_constant.g_available
                       AND e.id_exam = edcs.id_exam
                       AND e.id_exam = eq.id_exam(+)
                       AND (i_codification IS NULL OR (i_codification IS NOT NULL AND EXISTS
                            (SELECT 1
                                                          FROM codification_instit_soft cis, exam_codification ec
                                                         WHERE cis.id_codification = i_codification
                                                           AND cis.id_institution = i_prof.institution
                                                           AND cis.id_software = i_prof.software
                                                           AND cis.id_codification = ec.id_codification
                                                           AND ec.flg_available = pk_exam_constant.g_available
                                                           AND ec.id_exam = e.id_exam)))
                       AND (l_prof_access = 0 OR (l_prof_access != 0 AND EXISTS
                            (SELECT 1
                                                     FROM exam_group eg1,
                                                          exam_egp egp,
                                                          (SELECT DISTINCT gar.id_record id_exam
                                                             FROM group_access ga
                                                            INNER JOIN group_access_prof gaf
                                                               ON gaf.id_group_access = ga.id_group_access
                                                            INNER JOIN group_access_record gar
                                                               ON gar.id_group_access = ga.id_group_access
                                                            WHERE gaf.id_professional = i_prof.id
                                                              AND ga.id_institution IN (i_prof.institution, 0)
                                                              AND ga.id_software IN (i_prof.software, 0)
                                                              AND ga.flg_type = 'E'
                                                              AND gar.flg_type = 'E'
                                                              AND ga.flg_available = pk_exam_constant.g_available
                                                              AND gaf.flg_available = pk_exam_constant.g_available
                                                              AND gar.flg_available = pk_exam_constant.g_available) ecs
                                                    WHERE eg1.id_exam_group = i_exam_group
                                                      AND eg1.id_exam_group = egp.id_exam_group
                                                      AND egp.id_exam = ecs.id_exam
                                                      AND egp.id_exam = ee.id_exam)))
                       AND rownum > 0) -- to solve performance problem when no records are returned
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_IN_GROUP',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_in_group;

    FUNCTION get_exam_in_group
    (
        i_lang       IN language.id_language%TYPE,
        i_exam_group IN exam_group.id_exam_group%TYPE,
        o_exam       OUT table_number,
        o_error      OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_exam_group(i_exam_group IN NUMBER) IS
            SELECT ee.id_exam
              FROM exam_egp ee
             WHERE ee.id_exam_group = i_exam_group;
    
        i NUMBER := 1;
    BEGIN
    
        o_exam := table_number();
    
        g_error := 'OPEN C_EXAM_GROUP';
        FOR r_exam_group IN c_exam_group(i_exam_group)
        LOOP
            o_exam.extend;
            o_exam(i) := r_exam_group.id_exam;
            i := i + 1;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_IN_GROUP',
                                              o_error);
            RETURN FALSE;
    END get_exam_in_group;

    FUNCTION get_exam_thumbnailview
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_patient     IN patient.id_patient%TYPE,
        i_episode     IN exam_req.id_episode%TYPE,
        i_exam_type   IN exam.flg_type%TYPE,
        o_exam_list   OUT pk_types.cursor_type,
        o_filter_list OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_pat IS
            SELECT gender, trunc(months_between(SYSDATE, dt_birth) / 12) age
              FROM patient
             WHERE id_patient = i_patient;
    
        CURSOR c_visit IS
            SELECT v.id_visit, e.id_epis_type
              FROM episode e, visit v
             WHERE e.id_episode = i_episode
               AND v.id_visit = e.id_visit;
    
        l_pat           c_pat%ROWTYPE;
        l_visit         c_visit%ROWTYPE;
        l_prof_cat_type category.flg_type%TYPE;
    
        l_path            sys_config.value%TYPE := pk_sysconfig.get_config('URL_EXTERNAL_DOC', i_prof);
        l_all_episodes    sys_config.value%TYPE := pk_sysconfig.get_config('MCDT_ORDER_LIST_SHOW_ALL_EPISODES', i_prof);
        l_previous_result sys_config.value%TYPE := pk_sysconfig.get_config('PREVIOUS_RESULT', i_prof);
        l_top_result      sys_config.value%TYPE := pk_sysconfig.get_config('EXAMS_RESULTS_ON_TOP', i_prof);
    
        l_msg_notes         sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M097');
        l_msg_not_aplicable sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M036');
    
    BEGIN
    
        g_error := 'OPEN C_PAT';
        OPEN c_pat;
        FETCH c_pat
            INTO l_pat;
        CLOSE c_pat;
    
        l_prof_cat_type := pk_prof_utils.get_category(i_lang, i_prof);
    
        g_error := 'OPEN C_VISIT';
        OPEN c_visit;
        FETCH c_visit
            INTO l_visit;
        CLOSE c_visit;
    
        g_error := 'OPEN O_EXAM_LIST';
        OPEN o_exam_list FOR -- Requisições da visita
            SELECT DISTINCT eea.id_exam_req,
                            eea.id_exam_req_det,
                            eea.id_exam,
                            eea.flg_status_det flg_status,
                            eea.flg_time,
                            eea.id_exam_cat,
                            pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || eea.id_exam, NULL) ||
                            decode(l_visit.id_epis_type,
                                   nvl(t_ti_log.get_epis_type(i_lang,
                                                              i_prof,
                                                              e.id_epis_type,
                                                              eea.flg_status_req,
                                                              eea.id_exam_req,
                                                              pk_exam_constant.g_exam_type_req),
                                       e.id_epis_type),
                                   '',
                                   ' - (' || pk_message.get_message(i_lang,
                                                                    profissional(i_prof.id,
                                                                                 i_prof.institution,
                                                                                 t_ti_log.get_epis_type_soft(i_lang,
                                                                                                             i_prof,
                                                                                                             e.id_epis_type,
                                                                                                             eea.flg_status_req,
                                                                                                             eea.id_exam_req,
                                                                                                             pk_exam_constant.g_exam_type_req)),
                                                                    'IMAGE_T009') || ')') desc_exam,
                            decode(eea.flg_notes, pk_exam_constant.g_no, '', l_msg_notes) msg_notes,
                            decode(eea.flg_time,
                                   pk_exam_constant.g_flg_time_r,
                                   l_msg_not_aplicable,
                                   pk_diagnosis.concat_diag(i_lang, eea.id_exam_req_det, NULL, NULL, i_prof)) desc_diagnosis,
                            pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.PRIORITY', eea.priority, NULL) priority,
                            decode(eea.flg_status_req,
                                   pk_exam_constant.g_exam_tosched,
                                   NULL,
                                   decode(eea.flg_time,
                                          pk_exam_constant.g_flg_time_r,
                                          (SELECT pk_date_utils.dt_chr_hour(i_lang, de.dt_emited, i_prof)
                                             FROM doc_external de, exam_media_archive ema
                                            WHERE de.flg_status = pk_alert_constant.g_active
                                              AND de.id_doc_external = ema.id_doc_external
                                              AND ema.id_exam_result = eea.id_exam_result
                                              AND rownum = 1),
                                          pk_date_utils.date_char_hour_tsz(i_lang,
                                                                           eea.dt_begin,
                                                                           i_prof.institution,
                                                                           i_prof.software))) hr_begin,
                            decode(eea.flg_status_req,
                                   pk_exam_constant.g_exam_tosched,
                                   NULL,
                                   decode(eea.flg_time,
                                          pk_exam_constant.g_flg_time_r,
                                          (SELECT pk_date_utils.dt_chr(i_lang, de.dt_emited, i_prof)
                                             FROM doc_external de, exam_media_archive ema
                                            WHERE de.flg_status = pk_alert_constant.g_active
                                              AND de.id_doc_external = ema.id_doc_external
                                              AND ema.id_exam_result = eea.id_exam_result
                                              AND rownum = 1),
                                          pk_date_utils.dt_chr_tsz(i_lang,
                                                                   eea.dt_begin,
                                                                   i_prof.institution,
                                                                   i_prof.software))) dt_begin,
                            decode(eea.dt_begin,
                                   NULL,
                                   '',
                                   pk_date_utils.date_char_tsz(i_lang, eea.dt_begin, i_prof.institution, i_prof.software) || '; ') ||
                            pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', eea.flg_time, NULL) to_be_perform,
                            decode(eea.flg_referral,
                                   NULL,
                                   pk_sysdomain.get_domain(i_lang,
                                                           i_prof,
                                                           'EXAM_REQ_DET.FLG_STATUS',
                                                           eea.flg_status_det,
                                                           NULL),
                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL', eea.flg_referral, i_lang)) status_string,
                            eea.flg_doc flg_docs,
                            eea.flg_relevant,
                            decode(er.id_external_doc,
                                   NULL,
                                   decode((SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                                   i_prof,
                                                                                   eea.id_exam_req_det,
                                                                                   pk_exam_constant.g_exam_result_pdf)
                                            FROM dual),
                                          pk_exam_constant.g_no,
                                          decode((SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                                          i_prof,
                                                                                          eea.id_exam_req_det,
                                                                                          pk_exam_constant.g_exam_result_url)
                                                   FROM dual),
                                                 pk_exam_constant.g_no,
                                                 pk_doc.get_main_thumb_url(i_lang, i_prof, ema.id_doc_external),
                                                 (SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                                           i_prof,
                                                                                           eea.id_exam_req_det,
                                                                                           pk_exam_constant.g_exam_result_url,
                                                                                           'U')
                                                    FROM dual)),
                                          (SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                                    i_prof,
                                                                                    eea.id_exam_req_det,
                                                                                    pk_exam_constant.g_exam_result_pdf)
                                             FROM dual)),
                                   l_path || er.id_external_doc) thumbnail,
                            decode(er.id_external_doc,
                                   NULL,
                                   decode((SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                                   i_prof,
                                                                                   eea.id_exam_req_det,
                                                                                   pk_exam_constant.g_exam_result_pdf)
                                            FROM dual),
                                          pk_exam_constant.g_no,
                                          decode((SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                                          i_prof,
                                                                                          eea.id_exam_req_det,
                                                                                          pk_exam_constant.g_exam_result_url,
                                                                                          pk_alert_constant.g_yes)
                                                   FROM dual),
                                                 pk_exam_constant.g_no,
                                                 to_char(pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external)),
                                                 'U', -- ultrasound images
                                                 (SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                                           i_prof,
                                                                                           eea.id_exam_req_det,
                                                                                           pk_exam_constant.g_exam_result_url,
                                                                                           'C')
                                                    FROM dual),
                                                 pk_exam_constant.g_exam_result_url),
                                          pk_exam_constant.g_exam_result_pdf),
                                   1) thumbnail_icon,
                            pk_exam_utils.get_exam_codification(i_lang, i_prof, eea.id_exam_codification) id_codification,
                            eea.id_task_dependency,
                            nvl(edcs.flg_timeout, pk_exam_constant.g_no) flg_timeout,
                            pk_exam_utils.get_exam_permission(i_lang,
                                                              i_prof,
                                                              pk_exam_constant.g_exam_area_exams,
                                                              pk_exam_constant.g_exam_button_ok,
                                                              e.id_episode,
                                                              NULL,
                                                              eea.id_exam_req_det,
                                                              pk_exam_constant.g_yes) avail_button_ok,
                            pk_exam_utils.get_exam_permission(i_lang,
                                                              i_prof,
                                                              pk_exam_constant.g_exam_area_exams,
                                                              pk_exam_constant.g_exam_button_cancel,
                                                              e.id_episode,
                                                              NULL,
                                                              eea.id_exam_req_det,
                                                              pk_exam_constant.g_yes) avail_button_cancel,
                            pk_exam_utils.get_exam_permission(i_lang,
                                                              i_prof,
                                                              pk_exam_constant.g_exam_area_exams,
                                                              pk_exam_constant.g_exam_button_edit,
                                                              e.id_episode,
                                                              NULL,
                                                              eea.id_exam_req_det,
                                                              pk_exam_constant.g_yes) avail_button_edit,
                            pk_exam_utils.get_exam_permission(i_lang,
                                                              i_prof,
                                                              pk_exam_constant.g_exam_area_exams,
                                                              pk_exam_constant.g_exam_button_action,
                                                              e.id_episode,
                                                              NULL,
                                                              eea.id_exam_req_det,
                                                              pk_exam_constant.g_yes) avail_button_action,
                            pk_exam_utils.get_exam_permission(i_lang,
                                                              i_prof,
                                                              pk_exam_constant.g_exam_area_exams,
                                                              pk_exam_constant.g_exam_button_read,
                                                              e.id_episode,
                                                              NULL,
                                                              eea.id_exam_req_det,
                                                              pk_exam_constant.g_yes) avail_button_read,
                            eea.id_prof_req id_prof_req,
                            decode(eea.flg_status_det,
                                   pk_exam_constant.g_exam_result,
                                   decode(l_top_result,
                                          pk_exam_constant.g_yes,
                                          0,
                                          rank() over(ORDER BY pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_STATUS',
                                                                     eea.flg_status_det),
                                               coalesce(eea.dt_pend_req, eea.dt_begin, eea.dt_req) DESC)),
                                   pk_exam_constant.g_exam_req,
                                   row_number() over(ORDER BY decode(eea.flg_referral,
                                               NULL,
                                               pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_STATUS',
                                                                     eea.flg_status_det),
                                               pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_REFERRAL',
                                                                     eea.flg_referral)),
                                        coalesce(eea.dt_pend_req, eea.dt_begin, eea.dt_req)),
                                   pk_exam_constant.g_exam_pending,
                                   row_number() over(ORDER BY decode(eea.flg_referral,
                                               NULL,
                                               pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_STATUS',
                                                                     eea.flg_status_det),
                                               pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_REFERRAL',
                                                                     eea.flg_referral)),
                                        coalesce(eea.dt_pend_req, eea.dt_begin, eea.dt_req)),
                                   row_number() over(ORDER BY decode(eea.flg_referral,
                                               NULL,
                                               pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_STATUS',
                                                                     eea.flg_status_det),
                                               pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_REFERRAL',
                                                                     eea.flg_referral)),
                                        coalesce(eea.dt_pend_req, eea.dt_begin, eea.dt_req) DESC)) rank,
                            pk_date_utils.date_send_tsz(i_lang, nvl(eea.dt_begin, eea.dt_req), i_prof) dt_ord
              FROM exams_ea eea,
                   exam_result er,
                   (SELECT *
                      FROM (SELECT e.*,
                                   row_number() over(PARTITION BY e.id_exam_result ORDER BY e.dt_last_update_tstz DESC NULLS FIRST) rn
                              FROM exam_media_archive e
                             WHERE e.flg_type = pk_exam_constant.g_media_archive_exam_result)
                     WHERE rn = 1) ema,
                   episode e,
                   (SELECT *
                      FROM exam_dep_clin_serv
                     WHERE flg_type = pk_exam_constant.g_exam_can_req
                       AND id_institution = i_prof.institution
                       AND id_software = i_prof.software) edcs
             WHERE e.id_visit = l_visit.id_visit
               AND ((e.id_episode = eea.id_episode AND eea.id_episode = i_episode) OR
                   (e.id_episode = eea.id_episode_origin AND eea.id_episode_origin = i_episode))
               AND eea.id_exam_result = er.id_exam_result(+)
               AND er.id_exam_result = ema.id_exam_result(+)
               AND er.flg_status(+) != pk_exam_constant.g_exam_result_cancel
               AND eea.flg_type = i_exam_type
               AND eea.flg_time != pk_exam_constant.g_flg_time_r
               AND eea.flg_status_det != pk_exam_constant.g_exam_draft
               AND eea.id_exam = edcs.id_exam(+)
            UNION ALL
            -- Resultados de visitas anteriores ainda ñ lidos
            SELECT DISTINCT eea.id_exam_req,
                            eea.id_exam_req_det,
                            eea.id_exam,
                            eea.flg_status_det flg_status,
                            eea.flg_time,
                            eea.id_exam_cat,
                            pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || eea.id_exam, NULL) ||
                            decode(l_visit.id_epis_type,
                                   nvl(t_ti_log.get_epis_type(i_lang,
                                                              i_prof,
                                                              e.id_epis_type,
                                                              eea.flg_status_req,
                                                              eea.id_exam_req,
                                                              pk_exam_constant.g_exam_type_req),
                                       e.id_epis_type),
                                   '',
                                   ' - (' || pk_message.get_message(i_lang,
                                                                    profissional(i_prof.id,
                                                                                 i_prof.institution,
                                                                                 t_ti_log.get_epis_type_soft(i_lang,
                                                                                                             i_prof,
                                                                                                             e.id_epis_type,
                                                                                                             eea.flg_status_req,
                                                                                                             eea.id_exam_req,
                                                                                                             pk_exam_constant.g_exam_type_req)),
                                                                    'IMAGE_T009') || ')') desc_exam,
                            decode(eea.flg_notes, pk_exam_constant.g_no, '', l_msg_notes) msg_notes,
                            decode(eea.flg_time,
                                   pk_exam_constant.g_flg_time_r,
                                   l_msg_not_aplicable,
                                   pk_diagnosis.concat_diag(i_lang, eea.id_exam_req_det, NULL, NULL, i_prof)) desc_diagnosis,
                            pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.PRIORITY', eea.priority, NULL) priority,
                            decode(eea.flg_time,
                                   pk_exam_constant.g_flg_time_r,
                                   (SELECT pk_date_utils.dt_chr_hour(i_lang, de.dt_emited, i_prof)
                                      FROM doc_external de, exam_media_archive ema
                                     WHERE de.flg_status = pk_alert_constant.g_active
                                       AND de.id_doc_external = ema.id_doc_external
                                       AND ema.id_exam_result = eea.id_exam_result
                                       AND rownum = 1),
                                   pk_date_utils.date_char_hour_tsz(i_lang,
                                                                    eea.dt_begin,
                                                                    i_prof.institution,
                                                                    i_prof.software)) hr_begin,
                            decode(eea.flg_time,
                                   pk_exam_constant.g_flg_time_r,
                                   (SELECT pk_date_utils.dt_chr(i_lang, de.dt_emited, i_prof)
                                      FROM doc_external de, exam_media_archive ema
                                     WHERE de.flg_status = pk_alert_constant.g_active
                                       AND de.id_doc_external = ema.id_doc_external
                                       AND ema.id_exam_result = eea.id_exam_result
                                       AND rownum = 1),
                                   pk_date_utils.dt_chr_tsz(i_lang, eea.dt_begin, i_prof.institution, i_prof.software)) dt_begin,
                            decode(eea.dt_begin,
                                   NULL,
                                   '',
                                   pk_date_utils.date_char_tsz(i_lang, eea.dt_begin, i_prof.institution, i_prof.software) || '; ') ||
                            pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', eea.flg_time, NULL) to_be_perform,
                            pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ_DET.FLG_STATUS', eea.flg_status_det, NULL) status_string,
                            eea.flg_doc flg_docs,
                            eea.flg_relevant,
                            decode(er.id_external_doc,
                                   NULL,
                                   decode((SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                                   i_prof,
                                                                                   eea.id_exam_req_det,
                                                                                   pk_exam_constant.g_exam_result_pdf)
                                            FROM dual),
                                          pk_exam_constant.g_no,
                                          decode((SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                                          i_prof,
                                                                                          eea.id_exam_req_det,
                                                                                          pk_exam_constant.g_exam_result_url)
                                                   FROM dual),
                                                 pk_exam_constant.g_no,
                                                 pk_doc.get_main_thumb_url(i_lang, i_prof, ema.id_doc_external),
                                                 (SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                                           i_prof,
                                                                                           eea.id_exam_req_det,
                                                                                           pk_exam_constant.g_exam_result_url)
                                                    FROM dual)),
                                          (SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                                    i_prof,
                                                                                    eea.id_exam_req_det,
                                                                                    pk_exam_constant.g_exam_result_pdf)
                                             FROM dual)),
                                   l_path || er.id_external_doc) thumbnail,
                            decode(er.id_external_doc,
                                   NULL,
                                   decode((SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                                   i_prof,
                                                                                   eea.id_exam_req_det,
                                                                                   pk_exam_constant.g_exam_result_pdf)
                                            FROM dual),
                                          pk_exam_constant.g_no,
                                          decode((SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                                          i_prof,
                                                                                          eea.id_exam_req_det,
                                                                                          pk_exam_constant.g_exam_result_url)
                                                   FROM dual),
                                                 pk_exam_constant.g_no,
                                                 to_char(pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external)),
                                                 pk_exam_constant.g_exam_result_url),
                                          pk_exam_constant.g_exam_result_pdf),
                                   1) thumbnail_icon,
                            pk_exam_utils.get_exam_codification(i_lang, i_prof, eea.id_exam_codification) id_codification,
                            eea.id_task_dependency,
                            pk_exam_constant.g_no flg_timeout,
                            pk_exam_utils.get_exam_permission(i_lang,
                                                              i_prof,
                                                              pk_exam_constant.g_exam_area_exams,
                                                              pk_exam_constant.g_exam_button_ok,
                                                              e.id_episode,
                                                              NULL,
                                                              eea.id_exam_req_det,
                                                              pk_exam_constant.g_no) avail_button_ok,
                            pk_exam_utils.get_exam_permission(i_lang,
                                                              i_prof,
                                                              pk_exam_constant.g_exam_area_exams,
                                                              pk_exam_constant.g_exam_button_cancel,
                                                              e.id_episode,
                                                              NULL,
                                                              eea.id_exam_req_det,
                                                              pk_exam_constant.g_no) avail_button_cancel,
                            pk_exam_utils.get_exam_permission(i_lang,
                                                              i_prof,
                                                              pk_exam_constant.g_exam_area_exams,
                                                              pk_exam_constant.g_exam_button_edit,
                                                              e.id_episode,
                                                              NULL,
                                                              eea.id_exam_req_det,
                                                              pk_exam_constant.g_no) avail_button_edit,
                            pk_exam_utils.get_exam_permission(i_lang,
                                                              i_prof,
                                                              pk_exam_constant.g_exam_area_exams,
                                                              pk_exam_constant.g_exam_button_action,
                                                              e.id_episode,
                                                              NULL,
                                                              eea.id_exam_req_det,
                                                              pk_exam_constant.g_no) avail_button_action,
                            pk_exam_utils.get_exam_permission(i_lang,
                                                              i_prof,
                                                              pk_exam_constant.g_exam_area_exams,
                                                              pk_exam_constant.g_exam_button_read,
                                                              e.id_episode,
                                                              NULL,
                                                              eea.id_exam_req_det,
                                                              pk_exam_constant.g_no) avail_button_read,
                            eea.id_prof_req id_prof_req,
                            decode(eea.flg_status_det,
                                   pk_exam_constant.g_exam_result,
                                   decode(l_top_result,
                                          pk_exam_constant.g_yes,
                                          0,
                                          rank() over(ORDER BY pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_STATUS',
                                                                     eea.flg_status_det),
                                               coalesce(eea.dt_pend_req, eea.dt_begin, eea.dt_req) DESC)),
                                   pk_exam_constant.g_exam_req,
                                   rank() over(ORDER BY decode(eea.flg_referral,
                                               NULL,
                                               pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_STATUS',
                                                                     eea.flg_status_det),
                                               pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_REFERRAL',
                                                                     eea.flg_referral)),
                                        coalesce(eea.dt_pend_req, eea.dt_begin, eea.dt_req)),
                                   pk_exam_constant.g_exam_pending,
                                   rank() over(ORDER BY decode(eea.flg_referral,
                                               NULL,
                                               pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_STATUS',
                                                                     eea.flg_status_det),
                                               pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_REFERRAL',
                                                                     eea.flg_referral)),
                                        coalesce(eea.dt_pend_req, eea.dt_begin, eea.dt_req)),
                                   rank() over(ORDER BY decode(eea.flg_referral,
                                               NULL,
                                               pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_STATUS',
                                                                     eea.flg_status_det),
                                               pk_sysdomain.get_rank(i_lang,
                                                                     'EXAM_REQ_DET.FLG_REFERRAL',
                                                                     eea.flg_referral)),
                                        coalesce(eea.dt_pend_req, eea.dt_begin, eea.dt_req) DESC)) rank,
                            pk_date_utils.date_send_tsz(i_lang, nvl(eea.dt_begin, eea.dt_req), i_prof) dt_ord
              FROM exams_ea eea,
                   exam_result er,
                   (SELECT *
                      FROM (SELECT e.*,
                                   row_number() over(PARTITION BY e.id_exam_result ORDER BY e.dt_last_update_tstz DESC NULLS FIRST) rn
                              FROM exam_media_archive e
                             WHERE e.flg_type = pk_exam_constant.g_media_archive_exam_result)
                     WHERE rn = 1) ema,
                   episode e,
                   (SELECT *
                      FROM exam_dep_clin_serv
                     WHERE flg_type = pk_exam_constant.g_exam_can_req
                       AND id_institution = i_prof.institution
                       AND id_software = i_prof.software) edcs
             WHERE e.id_patient = i_patient
               AND e.id_visit != l_visit.id_visit
               AND ((e.id_episode = eea.id_episode AND eea.id_episode = i_episode) OR
                   (e.id_episode = eea.id_episode_origin AND eea.id_episode_origin = i_episode))
               AND (eea.id_episode_origin != i_episode OR eea.id_episode_origin IS NULL)
               AND eea.id_exam_result = er.id_exam_result(+)
               AND er.id_exam_result = ema.id_exam_result(+)
               AND er.flg_status(+) != pk_exam_constant.g_exam_result_cancel
               AND eea.flg_type = i_exam_type
               AND ((eea.id_exam_result IS NULL AND
                   eea.flg_status_det NOT IN (pk_exam_constant.g_exam_draft, pk_exam_constant.g_exam_cancel) AND
                   l_all_episodes = pk_exam_constant.g_yes AND NOT EXISTS
                    (SELECT 1
                        FROM exams_ea eea1
                       WHERE eea1.id_visit = l_visit.id_visit
                         AND eea1.flg_type = i_exam_type
                         AND eea1.flg_time != pk_exam_constant.g_flg_time_r
                         AND eea1.id_exam_req_det = eea.id_exam_req_det)) OR
                   (eea.id_exam_result IS NOT NULL AND
                   eea.flg_status_det NOT IN
                   (pk_exam_constant.g_exam_draft, pk_exam_constant.g_exam_read, pk_exam_constant.g_exam_cancel) AND
                   l_previous_result = pk_exam_constant.g_yes AND NOT EXISTS
                    (SELECT 1
                        FROM exams_ea eea1
                       WHERE eea1.id_visit = l_visit.id_visit
                         AND eea1.flg_type = i_exam_type
                         AND eea1.flg_time != pk_exam_constant.g_flg_time_r
                         AND eea1.id_exam_req_det = eea.id_exam_req_det)))
               AND eea.id_exam = edcs.id_exam(+)
             ORDER BY rank, desc_exam;
    
        g_error := 'OPEN O_FILTER_LIST';
        OPEN o_filter_list FOR
            SELECT id_exam_cat,
                   pk_translation.get_translation(i_lang, 'EXAM_CAT.CODE_EXAM_CAT.' || ec.id_exam_cat) desc_category,
                   ec.num_category
              FROM (SELECT id_exam_cat, nvl(t2.cnt, 0) num_category
                      FROM (SELECT DISTINCT e.id_exam_cat
                              FROM exam e
                             WHERE e.flg_type = i_exam_type
                               AND e.flg_available = pk_exam_constant.g_available
                               AND ((EXISTS (SELECT 1
                                               FROM prof_dep_clin_serv pdcs, exam_cat_dcs ecd
                                              WHERE id_professional = i_prof.id
                                                AND pdcs.id_institution = i_prof.institution
                                                AND pdcs.flg_status = pk_exam_constant.g_selected
                                                AND pdcs.id_dep_clin_serv = ecd.id_dep_clin_serv
                                                AND ecd.id_exam_cat = e.id_exam_cat) AND
                                    l_prof_cat_type != pk_alert_constant.g_cat_type_doc) OR
                                   l_prof_cat_type = pk_alert_constant.g_cat_type_doc)
                               AND ((l_pat.gender IS NOT NULL AND coalesce(e.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                   ('I', 'U', 'N', 'C', 'A', 'B', l_pat.gender)) OR l_pat.gender IS NULL OR
                                   l_pat.gender IN ('I', 'U', 'N', 'C', 'A', 'B'))
                               AND (nvl(l_pat.age, 0) BETWEEN nvl(e.age_min, 0) AND nvl(e.age_max, nvl(l_pat.age, 0)) OR
                                   l_pat.age IS NULL)) t1
                      LEFT JOIN (SELECT id_exam_cat, COUNT(id_exam_req_det) cnt
                                  FROM (SELECT eea.id_exam_cat, eea.id_exam_req_det
                                          FROM exams_ea eea, episode e
                                         WHERE e.id_visit = l_visit.id_visit
                                           AND ((e.id_episode = eea.id_episode AND eea.id_episode = i_episode) OR
                                               (e.id_episode = eea.id_episode_origin AND
                                               eea.id_episode_origin = i_episode))
                                           AND eea.flg_type = i_exam_type
                                           AND eea.flg_time != pk_exam_constant.g_flg_time_r
                                           AND eea.flg_status_det NOT IN
                                               (pk_exam_constant.g_exam_draft, pk_exam_constant.g_exam_cancel)
                                        UNION ALL
                                        SELECT eea.id_exam_cat, eea.id_exam_req_det
                                          FROM exams_ea eea, episode e
                                         WHERE e.id_patient = i_patient
                                           AND e.id_visit != l_visit.id_visit
                                           AND ((e.id_episode = eea.id_episode AND eea.id_episode = i_episode) OR
                                               (e.id_episode = eea.id_episode_origin AND
                                               eea.id_episode_origin = i_episode))
                                           AND (eea.id_episode_origin != i_episode OR eea.id_episode_origin IS NULL)
                                           AND eea.flg_type = i_exam_type
                                           AND ((eea.id_exam_result IS NULL AND
                                               eea.flg_status_det NOT IN
                                               (pk_exam_constant.g_exam_draft, pk_exam_constant.g_exam_cancel) AND
                                               l_all_episodes = pk_exam_constant.g_yes AND NOT EXISTS
                                                (SELECT 1
                                                    FROM exams_ea eea1
                                                   WHERE eea1.id_visit = l_visit.id_visit
                                                     AND eea1.flg_type = i_exam_type
                                                     AND eea1.flg_time != pk_exam_constant.g_flg_time_r
                                                     AND eea1.id_exam_req_det = eea.id_exam_req_det)) OR
                                               (eea.id_exam_result IS NOT NULL AND
                                               eea.flg_status_det NOT IN
                                               (pk_exam_constant.g_exam_draft,
                                                  pk_exam_constant.g_exam_read,
                                                  pk_exam_constant.g_exam_cancel) AND
                                               l_previous_result = pk_exam_constant.g_yes AND NOT EXISTS
                                                (SELECT 1
                                                    FROM exams_ea eea1
                                                   WHERE eea1.id_visit = l_visit.id_visit
                                                     AND eea1.flg_type = i_exam_type
                                                     AND eea1.flg_time != pk_exam_constant.g_flg_time_r
                                                     AND eea1.id_exam_req_det = eea.id_exam_req_det))))
                                 GROUP BY id_exam_cat) t2
                     USING (id_exam_cat)) ec
             WHERE ec.num_category > 0;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_THUMBNAILVIEW',
                                              o_error);
            RETURN FALSE;
    END get_exam_thumbnailview;

    FUNCTION get_exam_timelineview
    (
        i_lang      IN language.id_language%TYPE,
        i_prof      IN profissional,
        i_patient   IN patient.id_patient%TYPE,
        i_exam_type IN exam.flg_type%TYPE,
        o_time_list OUT pk_types.cursor_type,
        o_exam_list OUT pk_types.cursor_type,
        o_error     OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_outp sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_OUTP', i_prof);
        l_care sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_CARE', i_prof);
        l_pp   sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_CLINICS', i_prof);
    
    BEGIN
        g_error := 'OPEN O_TIME_LIST';
        OPEN o_time_list FOR
            SELECT DISTINCT pk_date_utils.trunc_insttimezone_str(i_prof, nvl(eea.start_time, eea.dt_result), 'MI') dt_result,
                            pk_date_utils.date_year_tsz(i_lang,
                                                         nvl(eea.start_time, eea.dt_result),
                                                         i_prof.institution,
                                                         i_prof.software) || '|' ||
                             pk_date_utils.get_month_day(i_lang, i_prof, nvl(eea.start_time, eea.dt_result)) || '|' || CASE
                                 WHEN i_prof.software IN (l_outp, l_care, l_pp) THEN
                                  CASE
                                      WHEN eea.dt_result IN
                                           (SELECT nvl(e.start_time, e.dt_result)
                                              FROM exams_ea e
                                             WHERE pk_date_utils.dt_chr_tsz(i_lang,
                                                                            nvl(eea.start_time, eea.dt_result),
                                                                            i_prof.institution,
                                                                            i_prof.software) =
                                                   pk_date_utils.dt_chr_tsz(i_lang,
                                                                            nvl(e.start_time, e.dt_result),
                                                                            i_prof.institution,
                                                                            i_prof.software)) THEN
                                       pk_date_utils.date_char_hour_tsz(i_lang,
                                                                        nvl(eea.start_time, eea.dt_result),
                                                                        i_prof.institution,
                                                                        i_prof.software)
                                      ELSE
                                       NULL
                                  END
                                 ELSE
                                  pk_date_utils.date_char_hour_tsz(i_lang,
                                                                   nvl(eea.start_time, eea.dt_result),
                                                                   i_prof.institution,
                                                                   i_prof.software)
                             END || '|' || decode(eea.flg_time, pk_exam_constant.g_flg_time_r, 'M') header_desc,
                            NULL id_reg
              FROM exams_ea eea
             WHERE eea.id_patient = i_patient
               AND eea.flg_type = i_exam_type
               AND eea.id_exam_result IS NOT NULL
            UNION ALL
            SELECT DISTINCT pk_date_utils.trunc_insttimezone_str(i_prof, por.dt_periodic_observation_reg, 'MI') dt_result,
                            pk_date_utils.date_year_tsz(i_lang,
                                                        por.dt_periodic_observation_reg,
                                                        i_prof.institution,
                                                        i_prof.software) || '|' ||
                            pk_date_utils.get_month_day(i_lang, i_prof, por.dt_periodic_observation_reg) || '|' || CASE
                                WHEN i_prof.software IN (l_outp, l_care, l_pp) THEN
                                 NULL
                                ELSE
                                 pk_date_utils.date_char_hour_tsz(i_lang,
                                                                  por.dt_periodic_observation_reg,
                                                                  i_prof.institution,
                                                                  i_prof.software)
                            END || '|M' header_desc,
                            por.id_periodic_observation_reg id_reg
              FROM periodic_observation_reg por
             WHERE por.id_patient = i_patient
               AND por.flg_type_param = i_exam_type
               AND por.flg_status = pk_exam_constant.g_active
             ORDER BY 1 ASC;
    
        g_error := 'INSERT INTO TBL_TEMP';
        DELETE tbl_temp;
    
        INSERT INTO tbl_temp
            (num_1, vc_1)
            SELECT eea.id_exam,
                   CASE
                        WHEN COUNT(eea.id_exam) > 1 THEN
                         (SELECT '|T||' || to_char(COUNT(eea1.id_exam)) || '|||GridBigNumber|||'
                            FROM exams_ea eea1
                           WHERE eea1.id_patient = i_patient
                             AND eea1.flg_type = i_exam_type
                             AND eea1.id_exam_result IS NULL
                             AND eea1.flg_status_det != pk_exam_constant.g_exam_cancel
                             AND eea1.id_exam = eea.id_exam
                           GROUP BY eea1.id_exam)
                        ELSE
                         (SELECT status_string
                            FROM (SELECT pk_utils.get_status_string(i_lang,
                                                                    i_prof,
                                                                    eea1.status_str,
                                                                    eea1.status_msg,
                                                                    eea1.status_icon,
                                                                    eea1.status_flg) status_string,
                                         eea1.id_exam,
                                         rownum
                                    FROM exams_ea eea1
                                   WHERE eea1.id_patient = i_patient
                                     AND eea1.flg_type = i_exam_type
                                     AND eea1.id_exam_result IS NULL
                                     AND eea1.flg_status_det != pk_exam_constant.g_exam_cancel
                                   ORDER BY pk_sysdomain.get_rank(i_lang, 'EXAM_REQ_DET.FLG_STATUS', eea1.flg_status_det))
                           WHERE rownum = 1
                             AND id_exam = eea.id_exam)
                    END status_string
              FROM exams_ea eea
             WHERE eea.id_patient = i_patient
               AND eea.flg_type = i_exam_type
               AND eea.id_exam_result IS NULL
               AND eea.flg_status_det != pk_exam_constant.g_exam_cancel
             GROUP BY eea.id_exam;
    
        g_error := 'OPEN O_EXAM_LIST';
        OPEN o_exam_list FOR
        -- Exames parametrizados para o histórico
            SELECT e.id_exam,
                   pk_exam_utils.get_alias_translation(i_lang, i_prof, e.code_exam, NULL) desc_exam,
                   '||' exam_res,
                   NULL status_string,
                   pk_exam_constant.g_no flg_timeout
              FROM exam_dep_clin_serv edcs, exam e
             WHERE edcs.flg_type = pk_exam_constant.g_exam_history
               AND (EXISTS (SELECT 1
                              FROM prof_dep_clin_serv pdcs
                             WHERE pdcs.id_professional = i_prof.id
                               AND pdcs.id_institution = i_prof.institution
                               AND pdcs.flg_status = pk_exam_constant.g_selected
                               AND pdcs.id_dep_clin_serv = edcs.id_dep_clin_serv) OR
                    (edcs.id_software = i_prof.software AND edcs.id_institution = i_prof.institution))
               AND edcs.id_exam = e.id_exam
               AND e.flg_type = i_exam_type
               AND NOT EXISTS (SELECT 1
                      FROM exams_ea eea
                     WHERE eea.id_patient = i_patient
                       AND eea.id_exam = e.id_exam)
            UNION ALL
            -- Exames com requisição
            SELECT eea.id_exam,
                   pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || eea.id_exam, NULL) desc_exam,
                   substr(concatenate(pk_date_utils.trunc_insttimezone_str(i_prof,
                                                                           nvl(eea.start_time, eea.dt_result),
                                                                           'MI') || '|' || eea.id_exam_result || '|' ||
                                      eea.id_exam_req_det || '|' || eea.id_task_dependency || '|' || eea.flg_status_det || '|' ||
                                      pk_sysdomain.get_img(i_lang, 'EXAM_REQ_DET.FLG_STATUS', eea.flg_status_det) || '|' ||
                                      decode(eea.flg_time, pk_exam_constant.g_flg_time_r, 'M') || ';'),
                          1,
                          length(concatenate(pk_date_utils.trunc_insttimezone_str(i_prof,
                                                                                  nvl(eea.start_time, eea.dt_result),
                                                                                  'MI') || '|' || eea.id_exam_result || '|' ||
                                             eea.id_exam_req_det || '|' || eea.id_task_dependency || '|' ||
                                             eea.flg_status_det || '|' ||
                                             pk_sysdomain.get_img(i_lang, 'EXAM_REQ_DET.FLG_STATUS', eea.flg_status_det) || '|' ||
                                             decode(eea.flg_time, pk_exam_constant.g_flg_time_r, 'M') || ';')) - 1) exam_res,
                   t.vc_1 status_string,
                   nvl(edcs.flg_timeout, pk_exam_constant.g_no) flg_timeout
              FROM exams_ea eea,
                   tbl_temp t,
                   (SELECT id_exam, flg_timeout
                      FROM exam_dep_clin_serv
                     WHERE flg_type = pk_exam_constant.g_exam_can_req
                       AND id_institution = i_prof.institution
                       AND id_software = i_prof.software) edcs
             WHERE eea.id_patient = i_patient
               AND eea.flg_type = i_exam_type
               AND eea.id_exam = t.num_1(+)
               AND eea.id_exam = edcs.id_exam(+)
             GROUP BY eea.id_exam, t.vc_1, edcs.flg_timeout
             ORDER BY 2 ASC;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_TIMELINEVIEW',
                                              o_error);
            RETURN FALSE;
    END get_exam_timelineview;

    FUNCTION get_exam_orders
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_patient IN patient.id_patient%TYPE,
        i_exam    IN exam.id_exam%TYPE,
        o_list    OUT pk_types.cursor_type,
        o_error   OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        OPEN o_list FOR
            SELECT DISTINCT eea.id_exam_req_det,
                            REPLACE(pk_translation.get_translation(i_lang,
                                                                   'SOFTWARE.CODE_SOFTWARE.' ||
                                                                   pk_episode.get_soft_by_epis_type(e.id_epis_type,
                                                                                                    e.id_institution)),
                                    '<br>',
                                    ' ') desc_software,
                            pk_translation.get_translation(i_lang,
                                                           'CLINICAL_SERVICE.CODE_CLINICAL_SERVICE.' ||
                                                           e.id_clinical_service) desc_speciality,
                            pk_diagnosis.concat_diag(i_lang, eea.id_exam_req_det, NULL, NULL, i_prof) desc_diagnosis,
                            pk_date_utils.dt_chr_tsz(i_lang, eea.dt_req, i_prof.institution, i_prof.software) dt_req,
                            eea.flg_status_det flg_status,
                            eea.id_prof_performed id_prof_perform,
                            pk_prof_utils.get_name_signature(i_lang, i_prof, eea.id_prof_performed) prof_perform,
                            pk_date_utils.date_send_tsz(i_lang, eea.start_time, i_prof) dt_perform_str,
                            pk_date_utils.dt_chr_tsz(i_lang, eea.start_time, i_prof.institution, i_prof.software) dt_perform,
                            pk_date_utils.date_send_tsz(i_lang, eea.dt_req, i_prof) dt_ord
              FROM exams_ea eea, episode e
             WHERE eea.id_exam = i_exam
               AND eea.id_patient = i_patient
               AND (eea.id_episode = e.id_episode OR eea.id_episode_origin = e.id_episode)
               AND eea.id_exam_result IS NULL
               AND eea.flg_status_det != pk_exam_constant.g_exam_cancel
             ORDER BY dt_ord;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_ORDERS',
                                              o_error);
            RETURN FALSE;
    END get_exam_orders;

    FUNCTION get_exam_questionnaire
    (
        i_lang     IN language.id_language%TYPE,
        i_prof     IN profissional,
        i_patient  IN patient.id_patient%TYPE,
        i_episode  IN episode.id_episode%TYPE,
        i_exam     IN exam.id_exam%TYPE,
        i_flg_type IN VARCHAR2,
        i_flg_time IN VARCHAR2,
        o_list     OUT pk_types.cursor_type,
        o_error    OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_patient IS
            SELECT gender, trunc(months_between(SYSDATE, dt_birth) / 12) age
              FROM patient
             WHERE id_patient = i_patient;
    
        l_patient c_patient%ROWTYPE;
    
    BEGIN
    
        g_error := 'OPEN C_PATIENT';
        OPEN c_patient;
        FETCH c_patient
            INTO l_patient;
        CLOSE c_patient;
    
        IF i_flg_type = 'E'
        THEN
            g_error := 'OPEN O_LIST BY ID_EXAM';
            OPEN o_list FOR
                SELECT q.id_exam,
                       q.id_questionnaire,
                       q.id_questionnaire_parent,
                       q.id_response_parent,
                       pk_mcdt.get_questionnaire_alias(i_lang,
                                                       i_prof,
                                                       'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' || q.id_questionnaire) desc_questionnaire,
                       q.flg_type,
                       q.flg_mandatory,
                       q.flg_copy flg_apply_to_all,
                       q.id_unit_measure,
                       pk_mcdt.get_questionnaire_response(i_lang,
                                                          i_prof,
                                                          i_patient,
                                                          q.id_questionnaire,
                                                          i_exam,
                                                          NULL,
                                                          i_flg_time,
                                                          i_flg_type) desc_response,
                       decode(q.flg_validation,
                              pk_exam_constant.g_yes,
                              --if date then should return the serialized value stored in the field "notes"
                              decode(instr(q.flg_type, 'D'), 0, to_char(eqr.id_response), to_char(eqr.notes)),
                              NULL) episode_id_response,
                       decode(q.flg_validation,
                              pk_exam_constant.g_yes,
                              decode(dbms_lob.getlength(eqr.notes),
                                     NULL,
                                     to_clob(pk_mcdt.get_response_alias(i_lang,
                                                                        i_prof,
                                                                        'RESPONSE.CODE_RESPONSE.' || eqr.id_response)),
                                     pk_exam_utils.get_exam_response(i_lang, i_prof, eqr.notes)),
                              to_clob('')) episode_desc_response
                  FROM (SELECT DISTINCT eq.id_exam,
                                        eq.id_questionnaire,
                                        qr.id_questionnaire_parent,
                                        qr.id_response_parent,
                                        eq.flg_type,
                                        eq.flg_mandatory,
                                        eq.flg_copy,
                                        eq.flg_validation,
                                        eq.id_unit_measure,
                                        eq.rank
                          FROM exam_questionnaire eq, questionnaire_response qr
                         WHERE eq.id_exam = i_exam
                           AND eq.flg_time = i_flg_time
                           AND eq.id_institution = i_prof.institution
                           AND eq.flg_available = pk_exam_constant.g_available
                           AND eq.id_questionnaire = qr.id_questionnaire
                           AND eq.id_response = qr.id_response
                           AND qr.flg_available = pk_exam_constant.g_available
                           AND EXISTS
                         (SELECT 1
                                  FROM questionnaire q
                                 WHERE q.id_questionnaire = eq.id_questionnaire
                                   AND q.flg_available = pk_exam_constant.g_available
                                   AND (((l_patient.gender IS NOT NULL AND
                                       coalesce(q.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                       ('I', 'U', 'N', 'C', 'A', 'B', l_patient.gender)) OR l_patient.gender IS NULL OR
                                       l_patient.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                       (nvl(l_patient.age, 0) BETWEEN nvl(q.age_min, 0) AND
                                       nvl(q.age_max, nvl(l_patient.age, 0)) OR nvl(l_patient.age, 0) = 0)))) q,
                       (SELECT id_questionnaire, id_response, notes
                          FROM (SELECT eqr.id_questionnaire,
                                       pk_exam_utils.get_exam_episode_response(i_lang,
                                                                               i_prof,
                                                                               i_episode,
                                                                               eqr.id_questionnaire) id_response,
                                       eqr.notes,
                                       row_number() over(PARTITION BY eqr.id_questionnaire ORDER BY eqr.dt_last_update_tstz DESC) rn
                                  FROM exam_question_response eqr
                                 WHERE eqr.id_episode = i_episode)
                         WHERE rn = 1) eqr
                 WHERE q.id_questionnaire = eqr.id_questionnaire(+)
                 ORDER BY q.rank;
        ELSE
            g_error := 'OPEN O_LIST BY ID_EXAM_GROUP';
            OPEN o_list FOR
                SELECT q.id_exam,
                       q.id_questionnaire,
                       q.id_questionnaire_parent,
                       q.id_response_parent,
                       pk_mcdt.get_questionnaire_alias(i_lang,
                                                       i_prof,
                                                       'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' || q.id_questionnaire) desc_questionnaire,
                       q.flg_type,
                       q.flg_mandatory,
                       q.flg_copy flg_apply_to_all,
                       q.id_unit_measure,
                       pk_mcdt.get_questionnaire_response(i_lang,
                                                          i_prof,
                                                          i_patient,
                                                          q.id_questionnaire,
                                                          i_exam,
                                                          NULL,
                                                          i_flg_time,
                                                          'E') desc_response,
                       decode(q.flg_validation,
                              pk_exam_constant.g_yes,
                              --if date then should return the serialized value stored in the field "notes"
                              decode(instr(q.flg_type, 'D'), 0, to_char(eqr.id_response), to_char(eqr.notes)),
                              NULL) episode_id_response,
                       decode(q.flg_validation,
                              pk_exam_constant.g_yes,
                              decode(dbms_lob.getlength(eqr.notes),
                                     NULL,
                                     to_clob(pk_mcdt.get_response_alias(i_lang,
                                                                        i_prof,
                                                                        'RESPONSE.CODE_RESPONSE.' || eqr.id_response)),
                                     pk_exam_utils.get_exam_response(i_lang, i_prof, eqr.notes)),
                              to_clob('')) episode_desc_response
                  FROM (SELECT DISTINCT eq.id_exam_group id_exam,
                                        eq.id_questionnaire,
                                        qr.id_questionnaire_parent,
                                        qr.id_response_parent,
                                        eq.flg_type,
                                        eq.flg_mandatory,
                                        eq.flg_copy,
                                        eq.flg_validation,
                                        eq.id_unit_measure,
                                        eq.rank
                          FROM exam_questionnaire eq, questionnaire_response qr
                         WHERE eq.id_exam_group = i_exam
                           AND eq.flg_time = i_flg_time
                           AND eq.id_institution = i_prof.institution
                           AND eq.flg_available = pk_exam_constant.g_available
                           AND eq.id_questionnaire = qr.id_questionnaire
                           AND eq.id_response = qr.id_response
                           AND qr.flg_available = pk_exam_constant.g_available
                           AND EXISTS
                         (SELECT 1
                                  FROM questionnaire q
                                 WHERE q.id_questionnaire = eq.id_questionnaire
                                   AND q.flg_available = pk_exam_constant.g_available
                                   AND (((l_patient.gender IS NOT NULL AND
                                       coalesce(q.gender, 'I', 'U', 'N', 'C', 'A', 'B') IN
                                       ('I', 'U', 'N', 'C', 'A', 'B', l_patient.gender)) OR l_patient.gender IS NULL OR
                                       l_patient.gender IN ('I', 'U', 'N', 'C', 'A', 'B')) AND
                                       (nvl(l_patient.age, 0) BETWEEN nvl(q.age_min, 0) AND
                                       nvl(q.age_max, nvl(l_patient.age, 0)) OR nvl(l_patient.age, 0) = 0)))) q,
                       (SELECT id_questionnaire, id_response, notes
                          FROM (SELECT eqr.id_questionnaire,
                                       eqr.id_response,
                                       eqr.notes,
                                       row_number() over(PARTITION BY eqr.id_questionnaire ORDER BY eqr.dt_last_update_tstz DESC) rn
                                  FROM exam_question_response eqr
                                 WHERE eqr.id_episode = i_episode)
                         WHERE rn = 1) eqr
                 WHERE q.id_questionnaire = eqr.id_questionnaire(+)
                 ORDER BY q.rank;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_QUESTIONNAIRE',
                                              o_error);
            RETURN FALSE;
    END get_exam_questionnaire;

    FUNCTION get_exam_time_out_completion
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_exam_req_det       IN exam_req_det.id_exam_req_det%TYPE,
        i_epis_documentation IN epis_documentation.id_epis_documentation%TYPE,
        o_flg_complete       OUT exam_time_out.flg_complete%TYPE,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'CHECK INPUT PARAMETERS';
        IF i_exam_req_det IS NULL
           AND i_epis_documentation IS NULL
        THEN
            g_error := ' BOTH INPUT PARAMETERS ARE NULL';
            RAISE g_other_exception;
        ELSIF i_exam_req_det IS NULL
              AND i_epis_documentation IS NOT NULL
        THEN
            g_error := 'I_EXAM_REQ_DET IS NULL';
            RAISE g_other_exception;
        ELSE
            g_error := 'I_EPIS_DOCUMENTATION IS NULL';
            RAISE g_other_exception;
        END IF;
    
        BEGIN
            SELECT eto.flg_complete
              INTO o_flg_complete
              FROM exam_time_out eto
             WHERE eto.id_exam_req_det = i_exam_req_det
               AND eto.id_epis_documentation = i_epis_documentation;
        
        EXCEPTION
            WHEN no_data_found THEN
                o_flg_complete := pk_exam_constant.g_no;
        END;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_TIME_OUT_COMPLETION',
                                              o_error);
            RETURN FALSE;
    END get_exam_time_out_completion;

    FUNCTION get_exam_images
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_exam_req_det IN exam_req.id_exam_req%TYPE,
        o_list         OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_url1 sys_config.value%TYPE := pk_sysconfig.get_config('URL_DOC_IMAGE', i_prof);
        l_url2 sys_config.value%TYPE := pk_sysconfig.get_config('URL_EXTERNAL_DOC', i_prof);
    
        l_msg_image sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T104');
    
        l_id_pat_pregnancy pat_pregnancy.id_pat_pregnancy%TYPE;
    
    BEGIN
    
        g_error := 'CHECK ID_PAT_PREGNANCY';
        SELECT erd.id_pat_pregnancy
          INTO l_id_pat_pregnancy
          FROM exam_req_det erd
         WHERE erd.id_exam_req_det = i_exam_req_det;
    
        IF l_id_pat_pregnancy IS NULL
        THEN
            OPEN o_list FOR
                SELECT ema.id_doc_external,
                       di.id_doc_image,
                       di.file_name doc_title,
                       REPLACE(REPLACE(REPLACE(l_url1, '@1', di.id_doc_external), '@2', di.id_doc_image), '@3', '0') url,
                       REPLACE(REPLACE(REPLACE(l_url1, '@1', di.id_doc_external), '@2', di.id_doc_image), '@3', '1') thumbnail,
                       pk_date_utils.date_char_tsz(i_lang, dc.dt_comment, i_prof.institution, i_prof.software) dt_reg,
                       pk_prof_utils.get_name_signature(i_lang, i_prof, dc.id_professional) prof_reg,
                       pk_prof_utils.get_spec_signature(i_lang, i_prof, dc.id_professional, dc.dt_comment, NULL) prof_spec_reg,
                       to_clob(dc.desc_comment) notes
                  FROM exams_ea eea, exam_media_archive ema, doc_image di, doc_comments dc, doc_file_type dt
                 WHERE eea.id_exam_req_det = i_exam_req_det
                   AND eea.id_exam_result = ema.id_exam_result
                   AND ema.id_doc_external = di.id_doc_external
                   AND di.flg_status = pk_exam_constant.g_active
                   AND di.id_doc_external = dc.id_doc_external(+)
                   AND lower(dt.extension) = pk_doc.get_doc_image_extension(i_lang, i_prof, di.id_doc_image)
                UNION ALL
                SELECT er.id_external_doc id_doc_external,
                       er.id_exam_result id_doc_image,
                       l_msg_image || rownum doc_title,
                       l_url2 || id_external_doc url,
                       l_url2 || id_external_doc thumbnail,
                       pk_date_utils.date_char_tsz(i_lang, er.dt_exam_result_tstz, i_prof.institution, i_prof.software) dt_reg,
                       pk_prof_utils.get_name_signature(i_lang, i_prof, er.id_professional) prof_reg,
                       pk_prof_utils.get_spec_signature(i_lang,
                                                        i_prof,
                                                        er.id_professional,
                                                        er.dt_exam_result_tstz,
                                                        NULL) prof_spec_reg,
                       er.notes
                  FROM exam_result er
                 WHERE er.id_exam_req_det = i_exam_req_det
                   AND er.id_external_doc IS NOT NULL
                   AND er.flg_status != pk_exam_constant.g_exam_result_cancel
                 ORDER BY id_doc_image;
        ELSE
            OPEN o_list FOR
                SELECT erbi.id_doc_external,
                       di.id_doc_image,
                       di.file_name doc_title,
                       REPLACE(REPLACE(REPLACE(l_url1, '@1', erbi.id_doc_external), '@2', di.id_doc_image), '@3', '0') url,
                       REPLACE(REPLACE(REPLACE(l_url1, '@1', erbi.id_doc_external), '@2', di.id_doc_image), '@3', '1') thumbnail,
                       pk_date_utils.date_char_tsz(i_lang, dc.dt_comment, i_prof.institution, i_prof.software) dt_reg,
                       pk_prof_utils.get_name_signature(i_lang, i_prof, dc.id_professional) prof_reg,
                       pk_prof_utils.get_spec_signature(i_lang, i_prof, dc.id_professional, dc.dt_comment, NULL) prof_spec_reg,
                       to_clob(dc.desc_comment) notes
                  FROM exam_res_fetus_biom_img erbi,
                       exam_res_fetus_biom     erb,
                       exam_res_pregn_fetus    erf,
                       exam_result_pregnancy   erp,
                       exam_result             er,
                       doc_image               di,
                       doc_comments            dc
                 WHERE er.id_exam_req_det = i_exam_req_det
                   AND er.id_exam_result = erp.id_exam_result
                   AND er.flg_status != pk_exam_constant.g_exam_result_cancel
                   AND erp.id_exam_result_pregnancy = erf.id_exam_result_pregnancy
                   AND erf.id_exam_res_pregn_fetus = erb.id_exam_res_pregn_fetus
                   AND erb.id_exam_res_fetus_biom = erbi.id_exam_res_fetus_biom
                   AND erbi.id_doc_external = di.id_doc_external
                   AND di.id_doc_external = dc.id_doc_external(+)
                UNION ALL
                SELECT er.id_external_doc id_doc_external,
                       er.id_exam_result id_doc_image,
                       l_msg_image || rownum doc_title,
                       l_url2 || id_external_doc url,
                       l_url2 || id_external_doc thumbnail,
                       pk_date_utils.date_char_tsz(i_lang, er.dt_exam_result_tstz, i_prof.institution, i_prof.software) dt_reg,
                       pk_prof_utils.get_name_signature(i_lang, i_prof, er.id_professional) prof_reg,
                       pk_prof_utils.get_spec_signature(i_lang,
                                                        i_prof,
                                                        er.id_professional,
                                                        er.dt_exam_result_tstz,
                                                        NULL) prof_spec_reg,
                       er.notes
                  FROM exam_result er
                 WHERE er.id_exam_req_det = i_exam_req_det
                   AND er.id_external_doc IS NOT NULL
                   AND er.flg_status != pk_exam_constant.g_exam_result_cancel
                 ORDER BY id_doc_image;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_IMAGES',
                                              o_error);
            RETURN FALSE;
    END get_exam_images;

    FUNCTION get_exam_codification_det
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_exam_req_det IN table_number,
        o_list         OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        OPEN o_list FOR
            SELECT erd.id_exam_req_det,
                   pk_translation.get_translation(i_lang,
                                                  'CODIFICATION.CODE_CODIFICATION.' ||
                                                  pk_exam_utils.get_exam_codification(i_lang,
                                                                                      i_prof,
                                                                                      erd.id_exam_codification)) desc_codification,
                   erd.id_exam_codification,
                   erd.flg_referral,
                   er.priority,
                   pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.PRIORITY', er.priority, NULL) desc_priority,
                   erd.id_exec_institution,
                   pk_translation.get_translation(i_lang, 'AB_INSTITUTION.CODE_INSTITUTION.' || erd.id_exec_institution) desc_institution,
                   erd.flg_laterality flg_laterality,
                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LATERALITY', erd.flg_laterality, i_lang) desc_laterality,
                   pk_mcdt.check_mcdt_laterality(i_lang, i_prof, 'E', erd.id_exam) flg_laterality_mcdt,
                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LATERALITY',
                                           pk_mcdt.check_mcdt_laterality(i_lang, i_prof, 'E', erd.id_exam),
                                           i_lang) desc_laterality_mcdt
              FROM exam_req_det erd, exam_req er
             WHERE erd.id_exam_req_det IN (SELECT /*+opt_estimate(table t rows=1)*/
                                            *
                                             FROM TABLE(i_exam_req_det) t)
               AND erd.id_exam_req = er.id_exam_req;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_CODIFICATION_DET',
                                              o_error);
            RETURN FALSE;
    END get_exam_codification_det;

    FUNCTION get_exam_order_detail
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_exam_req           IN exam_req.id_exam_req%TYPE,
        i_flg_report         IN VARCHAR2 DEFAULT 'N',
        o_exam_order         OUT pk_types.cursor_type,
        o_exam_order_barcode OUT pk_types.cursor_type,
        o_exam_order_history OUT pk_types.cursor_type,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
    
        TYPE t_code_messages IS TABLE OF VARCHAR2(1000 CHAR) INDEX BY sys_message.code_message%TYPE;
    
        aa_code_messages t_code_messages;
    
        va_code_messages table_varchar := table_varchar('EXAMS_T138',
                                                        'EXAMS_T033',
                                                        'EXAMS_T035',
                                                        'EXAMS_T034',
                                                        'EXAMS_T037',
                                                        'EXAMS_T189',
                                                        'EXAMS_T025',
                                                        'EXAMS_T009',
                                                        'EXAMS_T207',
                                                        'EXAMS_T187',
                                                        'EXAMS_T222',
                                                        'EXAMS_T188');
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
        l_msg_del sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M106');
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN va_code_messages.first .. va_code_messages.last
        LOOP
            aa_code_messages(va_code_messages(i)) := '<b>' ||
                                                     pk_message.get_message(i_lang, i_prof, va_code_messages(i)) ||
                                                     '</b> ';
        END LOOP;
    
        g_error := 'OPEN O_EXAM_ORDER';
        OPEN o_exam_order FOR
            SELECT er.id_exam_req,
                   l_msg_reg || ' ' ||
                   pk_prof_utils.get_name_signature(i_lang,
                                                    i_prof,
                                                    coalesce(er.id_prof_cancel, er.id_prof_last_update, er.id_prof_req)) ||
                   decode(pk_prof_utils.get_spec_signature(i_lang,
                                                           i_prof,
                                                           coalesce(er.id_prof_cancel,
                                                                    er.id_prof_last_update,
                                                                    er.id_prof_req),
                                                           coalesce(er.dt_cancel_tstz,
                                                                    er.dt_last_update_tstz,
                                                                    er.dt_req_tstz),
                                                           er.id_episode),
                          NULL,
                          '; ',
                          ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                   i_prof,
                                                                   coalesce(er.id_prof_cancel,
                                                                            er.id_prof_last_update,
                                                                            er.id_prof_req),
                                                                   coalesce(er.dt_cancel_tstz,
                                                                            er.dt_last_update_tstz,
                                                                            er.dt_req_tstz),
                                                                   er.id_episode) || '); ') ||
                   pk_date_utils.date_char_tsz(i_lang,
                                               coalesce(er.dt_cancel_tstz, er.dt_last_update_tstz, er.dt_req_tstz),
                                               i_prof.institution,
                                               i_prof.software) registry,
                   decode(i_flg_report,
                          pk_exam_constant.g_no,
                          aa_code_messages('EXAMS_T138') || er.id_exam_req,
                          er.id_exam_req) num_order,
                   decode(er.priority,
                          NULL,
                          NULL,
                          decode(i_flg_report,
                                 pk_exam_constant.g_no,
                                 aa_code_messages('EXAMS_T033') ||
                                 pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.PRIORITY', er.priority, NULL),
                                 pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.PRIORITY', er.priority, NULL))) priority,
                   decode(i_flg_report,
                          pk_exam_constant.g_no,
                          aa_code_messages('EXAMS_T035') ||
                          decode(er.flg_status,
                                 pk_exam_constant.g_exam_sos,
                                 pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', pk_exam_constant.g_exam_req, i_lang),
                                 pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', er.flg_status, i_lang)),
                          decode(er.flg_status,
                                 pk_exam_constant.g_exam_sos,
                                 pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', pk_exam_constant.g_exam_req, i_lang),
                                 pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', er.flg_status, i_lang))) desc_status,
                   decode(i_flg_report,
                          pk_exam_constant.g_no,
                          aa_code_messages('EXAMS_T034') ||
                          decode(er.flg_time,
                                 pk_exam_constant.g_flg_time_e,
                                 pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                 decode(er.dt_begin_tstz,
                                        NULL,
                                        NULL,
                                        ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                            er.dt_begin_tstz,
                                                                            i_prof.institution,
                                                                            i_prof.software) || ')'),
                                 pk_exam_constant.g_flg_time_b,
                                 pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                 decode(er.dt_begin_tstz,
                                        NULL,
                                        NULL,
                                        ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                            er.dt_begin_tstz,
                                                                            i_prof.institution,
                                                                            i_prof.software) || ')'),
                                 pk_exam_constant.g_flg_time_d,
                                 pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                 decode(er.dt_begin_tstz,
                                        NULL,
                                        NULL,
                                        ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                            er.dt_begin_tstz,
                                                                            i_prof.institution,
                                                                            i_prof.software) || ')'),
                                 pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL)),
                          decode(er.flg_time,
                                 pk_exam_constant.g_flg_time_e,
                                 pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                 decode(er.dt_begin_tstz,
                                        NULL,
                                        NULL,
                                        ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                            er.dt_begin_tstz,
                                                                            i_prof.institution,
                                                                            i_prof.software) || ')'),
                                 pk_exam_constant.g_flg_time_b,
                                 pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                 decode(er.dt_begin_tstz,
                                        NULL,
                                        NULL,
                                        ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                            er.dt_begin_tstz,
                                                                            i_prof.institution,
                                                                            i_prof.software) || ')'),
                                 pk_exam_constant.g_flg_time_d,
                                 pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                 decode(er.dt_begin_tstz,
                                        NULL,
                                        NULL,
                                        ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                            er.dt_begin_tstz,
                                                                            i_prof.institution,
                                                                            i_prof.software) || ')'),
                                 pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL))) desc_time,
                   decode(i_flg_report,
                          pk_exam_constant.g_no,
                          decode((SELECT COUNT(erd.id_exam_req_det)
                                   FROM exam_req_det erd
                                  WHERE erd.id_exam_req = er.id_exam_req),
                                 1,
                                 aa_code_messages('EXAMS_T037') ||
                                 (SELECT pk_exams_api_db.get_alias_translation(i_lang,
                                                                               i_prof,
                                                                               'EXAM.CODE_EXAM.' || erd.id_exam,
                                                                               NULL)
                                    FROM exam_req_det erd
                                   WHERE erd.id_exam_req = er.id_exam_req),
                                 aa_code_messages('EXAMS_T037') ||
                                 (SELECT chr(10) || chr(9) || chr(9) ||
                                         replace_clob(substr(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                    i_prof,
                                                                                                                    'EXAM.CODE_EXAM.' ||
                                                                                                                    erd.id_exam,
                                                                                                                    NULL) || ';'),
                                                             1,
                                                             length(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                           i_prof,
                                                                                                                           'EXAM.CODE_EXAM.' ||
                                                                                                                           erd.id_exam,
                                                                                                                           NULL) || ';')) - 1),
                                                      ';',
                                                      chr(10) || chr(9) || chr(9))
                                    FROM exam_req_det erd
                                   WHERE erd.id_exam_req = er.id_exam_req)),
                          (SELECT replace_clob(substr(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                             i_prof,
                                                                                                             'EXAM.CODE_EXAM.' ||
                                                                                                             erd.id_exam,
                                                                                                             NULL) || ';'),
                                                      1,
                                                      length(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                    i_prof,
                                                                                                                    'EXAM.CODE_EXAM.' ||
                                                                                                                    erd.id_exam,
                                                                                                                    NULL) || ';')) - 1),
                                               ';',
                                               chr(10) || chr(9))
                             FROM exam_req_det erd
                            WHERE erd.id_exam_req = er.id_exam_req)) desc_exam,
                   decode(er.id_cancel_reason,
                          NULL,
                          NULL,
                          decode(i_flg_report,
                                 pk_exam_constant.g_no,
                                 aa_code_messages('EXAMS_T025') ||
                                 pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, er.id_cancel_reason),
                                 pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, er.id_cancel_reason))) cancel_reason,
                   decode(er.notes_cancel,
                          NULL,
                          NULL,
                          decode(i_flg_report,
                                 pk_exam_constant.g_no,
                                 aa_code_messages('EXAMS_T009') || er.notes_cancel,
                                 er.notes_cancel)) notes_cancel,
                   pk_date_utils.date_send_tsz(i_lang,
                                               coalesce(er.dt_cancel_tstz, er.dt_last_update_tstz, er.dt_req_tstz),
                                               i_prof) dt_ord
              FROM exam_req er
             WHERE er.id_exam_req = i_exam_req;
    
        g_error := 'OPEN O_EXAM_ORDER_BARCODE';
        OPEN o_exam_order_barcode FOR
            SELECT er.id_exam_req, er.barcode
              FROM exam_req er
             WHERE er.id_exam_req = i_exam_req;
    
        g_error := 'OPEN O_EXAM_ORDER_HISTORY';
        OPEN o_exam_order_history FOR
            SELECT er.id_exam_req,
                   decode(cnt,
                          rn,
                          l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, er.id_prof_req) ||
                          decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                  i_prof,
                                                                  er.id_prof_req,
                                                                  er.dt_req_tstz,
                                                                  er.id_episode),
                                 NULL,
                                 '; ',
                                 ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                          i_prof,
                                                                          er.id_prof_req,
                                                                          er.dt_req_tstz,
                                                                          er.id_episode) || '); ') ||
                          pk_date_utils.date_char_tsz(i_lang, er.dt_req_tstz, i_prof.institution, i_prof.software),
                          l_msg_reg || ' ' ||
                          pk_prof_utils.get_name_signature(i_lang,
                                                           i_prof,
                                                           nvl(er.id_prof_cancel, er.id_prof_last_update)) ||
                          decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                  i_prof,
                                                                  nvl(er.id_prof_cancel, er.id_prof_last_update),
                                                                  nvl(er.dt_cancel_tstz, er.dt_last_update_tstz),
                                                                  er.id_episode),
                                 NULL,
                                 '; ',
                                 ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                          i_prof,
                                                                          nvl(er.id_prof_cancel, er.id_prof_last_update),
                                                                          nvl(er.dt_cancel_tstz, er.dt_last_update_tstz),
                                                                          er.id_episode) || '); ') ||
                          pk_date_utils.date_char_tsz(i_lang,
                                                      nvl(er.dt_cancel_tstz, er.dt_last_update_tstz),
                                                      i_prof.institution,
                                                      i_prof.software)) registry,
                   decode(cnt,
                          rn,
                          decode(i_flg_report,
                                 pk_exam_constant.g_no,
                                 aa_code_messages('EXAMS_T138') || er.id_exam_req,
                                 er.id_exam_req),
                          decode(er.id_exam_req,
                                 er.id_exam_req_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_exam_constant.g_no,
                                        aa_code_messages('EXAMS_T207') || '§' || er.id_exam_req || chr(10) || chr(9) ||
                                        aa_code_messages('EXAMS_T138') || er.id_exam_req_new,
                                        er.id_exam_req || '§' || er.id_exam_req_new))) num_order,
                   decode(cnt,
                          rn,
                          decode(er.priority,
                                 NULL,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_exam_constant.g_no,
                                        aa_code_messages('EXAMS_T033') ||
                                        pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.PRIORITY', er.priority, NULL),
                                        pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.PRIORITY', er.priority, NULL))),
                          decode(er.priority,
                                 er.priority_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_exam_constant.g_no,
                                        aa_code_messages('EXAMS_T187') || '§' ||
                                        decode(er.priority,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'EXAM_REQ.PRIORITY',
                                                                       er.priority,
                                                                       NULL)) ||
                                        decode(er.priority_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('EXAMS_T033') ||
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'EXAM_REQ.PRIORITY',
                                                                       er.priority_new,
                                                                       NULL)),
                                        decode(er.priority,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'EXAM_REQ.PRIORITY',
                                                                       er.priority,
                                                                       NULL)) ||
                                        decode(er.priority_new,
                                               NULL,
                                               NULL,
                                               '§' || pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'EXAM_REQ.PRIORITY',
                                                                              er.priority_new,
                                                                              NULL))))) priority,
                   decode(cnt,
                           rn,
                           decode(er.flg_status,
                                  NULL,
                                  NULL,
                                  decode(i_flg_report,
                                         pk_exam_constant.g_no,
                                         aa_code_messages('EXAMS_T035') ||
                                         decode(er.flg_status,
                                                pk_exam_constant.g_exam_sos,
                                                pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS',
                                                                        pk_exam_constant.g_exam_req,
                                                                        i_lang),
                                                pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', er.flg_status, i_lang)),
                                         decode(er.flg_status,
                                                pk_exam_constant.g_exam_sos,
                                                pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS',
                                                                        pk_exam_constant.g_exam_req,
                                                                        i_lang),
                                                pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', er.flg_status, i_lang)))),
                           decode(er.flg_status,
                                  er.flg_status_new,
                                  NULL,
                                  CASE
                                      WHEN (er.flg_status = pk_exam_constant.g_exam_sos AND
                                           er.flg_status_new = pk_exam_constant.g_exam_req)
                                           OR (er.flg_status = pk_exam_constant.g_exam_req AND
                                           er.flg_status_new = pk_exam_constant.g_exam_sos) THEN
                                       NULL
                                      ELSE
                                       decode(i_flg_report,
                                              pk_exam_constant.g_no,
                                              aa_code_messages('EXAMS_T222') || '§' ||
                                              decode(er.flg_status,
                                                     NULL,
                                                     l_msg_del,
                                                     decode(er.flg_status,
                                                            pk_exam_constant.g_exam_sos,
                                                            pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS',
                                                                                    pk_exam_constant.g_exam_req,
                                                                                    i_lang),
                                                            pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', er.flg_status, i_lang))) ||
                                              decode(er.flg_status_new,
                                                     NULL,
                                                     NULL,
                                                     chr(10) || chr(9) || aa_code_messages('EXAMS_T035') ||
                                                     decode(er.flg_status_new,
                                                            pk_exam_constant.g_exam_sos,
                                                            pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS',
                                                                                    pk_exam_constant.g_exam_req,
                                                                                    i_lang),
                                                            pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', er.flg_status_new, i_lang))),
                                              decode(er.flg_status,
                                                     NULL,
                                                     l_msg_del,
                                                     decode(er.flg_status,
                                                            pk_exam_constant.g_exam_sos,
                                                            pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS',
                                                                                    pk_exam_constant.g_exam_req,
                                                                                    i_lang),
                                                            pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', er.flg_status, i_lang))) ||
                                              decode(er.flg_status_new,
                                                     NULL,
                                                     NULL,
                                                     '§' ||
                                                     decode(er.flg_status,
                                                            pk_exam_constant.g_exam_sos,
                                                            pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS',
                                                                                    pk_exam_constant.g_exam_req,
                                                                                    i_lang),
                                                            pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', er.flg_status_new, i_lang))))
                                  END)) desc_status,
                   decode(cnt,
                          rn,
                          decode(er.dt_begin_tstz,
                                 NULL,
                                 decode(er.dt_schedule_tstz,
                                        NULL,
                                        decode(i_flg_report,
                                               pk_exam_constant.g_no,
                                               aa_code_messages('EXAMS_T034') ||
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'EXAM_REQ.FLG_TIME',
                                                                       er.flg_time,
                                                                       NULL),
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'EXAM_REQ.FLG_TIME',
                                                                       er.flg_time,
                                                                       NULL)),
                                        decode(i_flg_report,
                                               pk_exam_constant.g_no,
                                               aa_code_messages('EXAMS_T034') ||
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'EXAM_REQ.FLG_TIME',
                                                                       er.flg_time,
                                                                       NULL) || ' (' ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           er.dt_schedule_tstz,
                                                                           i_prof.institution,
                                                                           i_prof.software) || ')',
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'EXAM_REQ.FLG_TIME',
                                                                       er.flg_time,
                                                                       NULL) || ' (' ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           er.dt_schedule_tstz,
                                                                           i_prof.institution,
                                                                           i_prof.software) || ')')),
                                 decode(i_flg_report,
                                        pk_exam_constant.g_no,
                                        aa_code_messages('EXAMS_T034') ||
                                        pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) || ' (' ||
                                        pk_date_utils.date_char_tsz(i_lang,
                                                                    er.dt_begin_tstz,
                                                                    i_prof.institution,
                                                                    i_prof.software) || ')',
                                        pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) || ' (' ||
                                        pk_date_utils.date_char_tsz(i_lang,
                                                                    er.dt_begin_tstz,
                                                                    i_prof.institution,
                                                                    i_prof.software) || ')')),
                          decode(er.dt_begin_tstz,
                                 er.dt_begin_tstz_new,
                                 decode(er.dt_schedule_tstz,
                                        er.dt_schedule_tstz_new,
                                        NULL,
                                        decode(i_flg_report,
                                               pk_exam_constant.g_no,
                                               aa_code_messages('EXAMS_T188') || '§' ||
                                               decode(er.dt_schedule_tstz,
                                                      NULL,
                                                      l_msg_del,
                                                      pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'EXAM_REQ.FLG_TIME',
                                                                              er.flg_time,
                                                                              NULL) || ' (' ||
                                                      pk_date_utils.date_char_tsz(i_lang,
                                                                                  er.dt_schedule_tstz,
                                                                                  i_prof.institution,
                                                                                  i_prof.software) || ' )') ||
                                               decode(er.dt_schedule_tstz_new,
                                                      NULL,
                                                      NULL,
                                                      chr(10) || chr(9) || aa_code_messages('EXAMS_T034') ||
                                                      pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'EXAM_REQ.FLG_TIME',
                                                                              er.flg_time,
                                                                              NULL) || ' (' ||
                                                      pk_date_utils.date_char_tsz(i_lang,
                                                                                  er.dt_schedule_tstz_new,
                                                                                  i_prof.institution,
                                                                                  i_prof.software) || ')'),
                                               decode(er.dt_schedule_tstz,
                                                      NULL,
                                                      l_msg_del,
                                                      pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'EXAM_REQ.FLG_TIME',
                                                                              er.flg_time,
                                                                              NULL) || ' (' ||
                                                      pk_date_utils.date_char_tsz(i_lang,
                                                                                  er.dt_schedule_tstz,
                                                                                  i_prof.institution,
                                                                                  i_prof.software) || ')') ||
                                               decode(er.dt_schedule_tstz_new,
                                                      NULL,
                                                      NULL,
                                                      '§' || pk_sysdomain.get_domain(i_lang,
                                                                                     i_prof,
                                                                                     'EXAM_REQ.FLG_TIME',
                                                                                     er.flg_time,
                                                                                     NULL) || ' (' ||
                                                      pk_date_utils.date_char_tsz(i_lang,
                                                                                  er.dt_schedule_tstz_new,
                                                                                  i_prof.institution,
                                                                                  i_prof.software) || ')'))),
                                 decode(i_flg_report,
                                        pk_exam_constant.g_no,
                                        aa_code_messages('EXAMS_T188') || '§' ||
                                        decode(er.dt_begin_tstz,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'EXAM_REQ.FLG_TIME',
                                                                       er.flg_time,
                                                                       NULL) || ' (' ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           er.dt_begin_tstz,
                                                                           i_prof.institution,
                                                                           i_prof.software) || ')') ||
                                        decode(er.dt_begin_tstz_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('EXAMS_T034') ||
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'EXAM_REQ.FLG_TIME',
                                                                       er.flg_time,
                                                                       NULL) || ' (' ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           er.dt_begin_tstz_new,
                                                                           i_prof.institution,
                                                                           i_prof.software) || ')'),
                                        decode(er.dt_begin_tstz,
                                               NULL,
                                               l_msg_del,
                                               pk_sysdomain.get_domain(i_lang,
                                                                       i_prof,
                                                                       'EXAM_REQ.FLG_TIME',
                                                                       er.flg_time,
                                                                       NULL) || ' (' ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           er.dt_begin_tstz,
                                                                           i_prof.institution,
                                                                           i_prof.software) || ')') ||
                                        decode(er.dt_begin_tstz_new,
                                               NULL,
                                               NULL,
                                               '§' || pk_sysdomain.get_domain(i_lang,
                                                                              i_prof,
                                                                              'EXAM_REQ.FLG_TIME',
                                                                              er.flg_time,
                                                                              NULL) || ' (' ||
                                               pk_date_utils.date_char_tsz(i_lang,
                                                                           er.dt_begin_tstz_new,
                                                                           i_prof.institution,
                                                                           i_prof.software) || ')')))) desc_time,
                   decode(cnt,
                           rn,
                           CASE
                               WHEN er.dt_last_update_tstz = er.dt_last_update_tstz_new
                                    OR er.dt_last_update_tstz IS NULL THEN
                                decode(i_flg_report,
                                       pk_exam_constant.g_no,
                                       decode((SELECT COUNT(erd.id_exam_req_det)
                                                FROM exam_req_det erd
                                               WHERE erd.id_exam_req = er.id_exam_req),
                                              1,
                                              to_clob(aa_code_messages('EXAMS_T037') ||
                                                      (SELECT pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                    i_prof,
                                                                                                    'EXAM.CODE_EXAM.' || erd.id_exam,
                                                                                                    NULL)
                                                         FROM exam_req_det erd
                                                        WHERE erd.id_exam_req = er.id_exam_req)),
                                              aa_code_messages('EXAMS_T037') ||
                                              (SELECT chr(10) || chr(9) || chr(9) ||
                                                      replace_clob(substr(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                                 i_prof,
                                                                                                                                 'EXAM.CODE_EXAM.' ||
                                                                                                                                 erd.id_exam,
                                                                                                                                 NULL) || ';'),
                                                                          1,
                                                                          length(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                                        i_prof,
                                                                                                                                        'EXAM.CODE_EXAM.' ||
                                                                                                                                        erd.id_exam,
                                                                                                                                        NULL) || ';')) - 1),
                                                                   ';',
                                                                   chr(10) || chr(9) || chr(9))
                                                 FROM exam_req_det erd
                                                WHERE erd.id_exam_req = er.id_exam_req)),
                                       decode((SELECT COUNT(erd.id_exam_req_det)
                                                FROM exam_req_det erd
                                               WHERE erd.id_exam_req = er.id_exam_req),
                                              1,
                                              to_clob((SELECT pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                   i_prof,
                                                                                                   'EXAM.CODE_EXAM.' || erd.id_exam,
                                                                                                   NULL)
                                                        FROM exam_req_det erd
                                                       WHERE erd.id_exam_req = er.id_exam_req)),
                                              (SELECT chr(10) || chr(9) || chr(9) ||
                                                      replace_clob(substr(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                                 i_prof,
                                                                                                                                 'EXAM.CODE_EXAM.' ||
                                                                                                                                 erd.id_exam,
                                                                                                                                 NULL) || ';'),
                                                                          1,
                                                                          length(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                                        i_prof,
                                                                                                                                        'EXAM.CODE_EXAM.' ||
                                                                                                                                        erd.id_exam,
                                                                                                                                        NULL) || ';')) - 1),
                                                                   ';',
                                                                   chr(10) || chr(9) || chr(9))
                                                 FROM exam_req_det erd
                                                WHERE erd.id_exam_req = er.id_exam_req)))
                               ELSE
                                decode(i_flg_report,
                                       pk_exam_constant.g_no,
                                       aa_code_messages('EXAMS_T037') ||
                                       (SELECT chr(10) || chr(9) || chr(9) ||
                                               replace_clob(substr(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                          i_prof,
                                                                                                                          'EXAM.CODE_EXAM.' ||
                                                                                                                          erdh.id_exam,
                                                                                                                          NULL) || ';'),
                                                                   1,
                                                                   length(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                                 i_prof,
                                                                                                                                 'EXAM.CODE_EXAM.' ||
                                                                                                                                 erdh.id_exam,
                                                                                                                                 NULL) || ';')) - 1),
                                                            ';',
                                                            chr(10) || chr(9) || chr(9))
                                          FROM exam_req_det_hist erdh
                                         WHERE erdh.id_exam_req = er.id_exam_req
                                           AND erdh.dt_exam_req_det_hist = er.dt_exam_req_hist),
                                       (SELECT chr(10) || chr(9) || chr(9) ||
                                               replace_clob(substr(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                          i_prof,
                                                                                                                          'EXAM.CODE_EXAM.' ||
                                                                                                                          erdh.id_exam,
                                                                                                                          NULL) || ';'),
                                                                   1,
                                                                   length(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                                 i_prof,
                                                                                                                                 'EXAM.CODE_EXAM.' ||
                                                                                                                                 erdh.id_exam,
                                                                                                                                 NULL) || ';')) - 1),
                                                            ';',
                                                            chr(10) || chr(9) || chr(9))
                                          FROM exam_req_det_hist erdh
                                         WHERE erdh.id_exam_req = er.id_exam_req
                                           AND erdh.dt_exam_req_det_hist = er.dt_exam_req_hist))
                           END,
                           CASE
                               WHEN er.flg_status = er.flg_status_new
                                    AND er.id_prof_req = er.id_prof_req_new
                                    AND er.dt_req_tstz = er.dt_req_tstz_new
                                    AND nvl(to_char(er.dt_begin_tstz), '0') = nvl(to_char(er.dt_begin_tstz_new), '0')
                                    AND nvl(to_char(er.dt_schedule_tstz), '0') = nvl(to_char(er.dt_schedule_tstz_new), '0')
                                    AND nvl(to_char(er.dt_pend_req_tstz), '0') = nvl(to_char(er.dt_pend_req_tstz_new), '0')
                                    AND nvl(er.priority, '') = nvl(er.priority_new, '')
                                    AND nvl(er.id_exec_institution, 0) = nvl(er.id_exec_institution_new, 0)
                                    AND nvl(er.id_prof_cancel, 0) = nvl(er.id_prof_cancel_new, 0) THEN
                                decode(i_flg_report,
                                       pk_exam_constant.g_no,
                                       aa_code_messages('EXAMS_T189') || '§' ||
                                       (SELECT chr(10) || chr(9) || chr(9) ||
                                               replace_clob(substr(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                          i_prof,
                                                                                                                          'EXAM.CODE_EXAM.' ||
                                                                                                                          erd.id_exam,
                                                                                                                          NULL) || ';'),
                                                                   1,
                                                                   length(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                                 i_prof,
                                                                                                                                 'EXAM.CODE_EXAM.' ||
                                                                                                                                 erd.id_exam,
                                                                                                                                 NULL) || ';')) - 1),
                                                            ';',
                                                            chr(10) || chr(9) || chr(9))
                                          FROM exam_req_det erd
                                         WHERE erd.id_exam_req = er.id_exam_req) || chr(10) || chr(9) ||
                                       aa_code_messages('EXAMS_T037') ||
                                       (SELECT chr(10) || chr(9) || chr(9) ||
                                               replace_clob(substr(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                          i_prof,
                                                                                                                          'EXAM.CODE_EXAM.' ||
                                                                                                                          erdh.id_exam,
                                                                                                                          NULL) || ';'),
                                                                   1,
                                                                   length(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                                 i_prof,
                                                                                                                                 'EXAM.CODE_EXAM.' ||
                                                                                                                                 erdh.id_exam,
                                                                                                                                 NULL) || ';')) - 1),
                                                            ';',
                                                            chr(10) || chr(9) || chr(9))
                                          FROM exam_req_det_hist erdh
                                         WHERE erdh.id_exam_req = er.id_exam_req
                                           AND erdh.dt_exam_req_det_hist = er.dt_exam_req_hist_new),
                                       aa_code_messages('EXAMS_T189') || '§' ||
                                       (SELECT chr(10) || chr(9) || chr(9) ||
                                               replace_clob(substr(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                          i_prof,
                                                                                                                          'EXAM.CODE_EXAM.' ||
                                                                                                                          erd.id_exam,
                                                                                                                          NULL) || ';'),
                                                                   1,
                                                                   length(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                                 i_prof,
                                                                                                                                 'EXAM.CODE_EXAM.' ||
                                                                                                                                 erd.id_exam,
                                                                                                                                 NULL) || ';')) - 1),
                                                            ';',
                                                            chr(10) || chr(9) || chr(9))
                                          FROM exam_req_det erd
                                         WHERE erd.id_exam_req = er.id_exam_req) || chr(10) || chr(9) ||
                                       aa_code_messages('EXAMS_T037') ||
                                       (SELECT chr(10) || chr(9) || chr(9) ||
                                               replace_clob(substr(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                          i_prof,
                                                                                                                          'EXAM.CODE_EXAM.' ||
                                                                                                                          erdh.id_exam,
                                                                                                                          NULL) || ';'),
                                                                   1,
                                                                   length(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                                 i_prof,
                                                                                                                                 'EXAM.CODE_EXAM.' ||
                                                                                                                                 erdh.id_exam,
                                                                                                                                 NULL) || ';')) - 1),
                                                            ';',
                                                            chr(10) || chr(9) || chr(9))
                                          FROM exam_req_det_hist erdh
                                         WHERE erdh.id_exam_req = er.id_exam_req
                                           AND erdh.dt_exam_req_det_hist = er.dt_exam_req_hist_new))
                               ELSE
                                to_clob('')
                           END) desc_exam,
                   decode(cnt,
                          rn,
                          NULL,
                          decode(er.id_cancel_reason,
                                 er.id_cancel_reason_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_exam_constant.g_no,
                                        aa_code_messages('EXAMS_T025') || '§' ||
                                        decode(er.id_cancel_reason,
                                               NULL,
                                               l_msg_del,
                                               pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, er.id_cancel_reason)) ||
                                        decode(er.id_cancel_reason_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('EXAMS_T025') ||
                                               pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                       i_prof,
                                                                                       er.id_cancel_reason_new)),
                                        decode(er.id_cancel_reason,
                                               NULL,
                                               l_msg_del,
                                               pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, er.id_cancel_reason)) ||
                                        decode(er.id_cancel_reason_new,
                                               NULL,
                                               NULL,
                                               '§' ||
                                               pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                       i_prof,
                                                                                       er.id_cancel_reason_new))))) cancel_reason,
                   decode(cnt,
                          rn,
                          NULL,
                          decode(er.notes_cancel,
                                 er.notes_cancel_new,
                                 NULL,
                                 decode(i_flg_report,
                                        pk_exam_constant.g_no,
                                        aa_code_messages('EXAMS_T009') || '§' ||
                                        decode(er.notes_cancel, NULL, l_msg_del, er.notes_cancel) ||
                                        decode(er.notes_cancel_new,
                                               NULL,
                                               NULL,
                                               chr(10) || chr(9) || aa_code_messages('EXAMS_T009') || er.notes_cancel_new),
                                        decode(er.notes_cancel, NULL, l_msg_del, er.notes_cancel) ||
                                        decode(er.notes_cancel_new, NULL, NULL, '§' || er.notes_cancel_new)))) notes_cancel
              FROM (SELECT row_number() over(ORDER BY t.dt_last_update_tstz DESC NULLS FIRST) rn,
                           MAX(rownum) over() cnt,
                           t.id_exam_req,
                           first_value(t.id_exam_req) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_exam_req_new,
                           t.id_episode,
                           t.flg_time,
                           first_value(t.flg_time) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_time_new,
                           t.flg_status,
                           first_value(t.flg_status) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_status_new,
                           t.id_prof_req,
                           first_value(t.id_prof_req) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_req_new,
                           t.dt_req_tstz,
                           first_value(t.dt_req_tstz) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_req_tstz_new,
                           t.dt_begin_tstz,
                           first_value(t.dt_begin_tstz) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_begin_tstz_new,
                           t.dt_schedule_tstz,
                           first_value(t.dt_schedule_tstz) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_schedule_tstz_new,
                           t.dt_pend_req_tstz,
                           first_value(t.dt_pend_req_tstz) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_pend_req_tstz_new,
                           t.priority,
                           first_value(t.priority) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) priority_new,
                           t.id_exec_institution,
                           first_value(t.id_exec_institution) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_exec_institution_new,
                           t.barcode,
                           first_value(t.barcode) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) barcode_new,
                           t.id_prof_cancel,
                           first_value(t.id_prof_cancel) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_cancel_new,
                           t.dt_cancel_tstz,
                           first_value(t.dt_cancel_tstz) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_cancel_tstz_new,
                           t.id_cancel_reason,
                           first_value(t.id_cancel_reason) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_cancel_reason_new,
                           t.notes_cancel,
                           first_value(t.notes_cancel) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_cancel_new,
                           t.id_prof_last_update,
                           first_value(t.id_prof_last_update) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_last_update_new,
                           t.dt_last_update_tstz,
                           first_value(t.dt_last_update_tstz) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_last_update_tstz_new,
                           t.dt_exam_req_hist,
                           first_value(t.dt_exam_req_hist) over(ORDER BY dt_exam_req_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_exam_req_hist_new
                      FROM (SELECT NULL dt_exam_req_hist,
                                   er.id_exam_req,
                                   er.id_episode,
                                   er.flg_time,
                                   er.flg_status,
                                   er.id_prof_req,
                                   er.dt_req_tstz,
                                   er.dt_begin_tstz,
                                   er.dt_schedule_tstz,
                                   er.dt_pend_req_tstz,
                                   er.priority,
                                   er.id_exec_institution,
                                   er.barcode,
                                   er.id_prof_cancel,
                                   er.dt_cancel_tstz,
                                   er.id_cancel_reason,
                                   er.notes_cancel,
                                   er.id_prof_last_update,
                                   er.dt_last_update_tstz
                              FROM exam_req er
                             WHERE er.id_exam_req = i_exam_req
                            UNION ALL
                            SELECT erh.dt_exam_req_hist,
                                   erh.id_exam_req,
                                   erh.id_episode,
                                   erh.flg_time,
                                   erh.flg_status,
                                   erh.id_prof_req,
                                   erh.dt_req_tstz,
                                   erh.dt_begin_tstz,
                                   erh.dt_schedule_tstz,
                                   erh.dt_pend_req_tstz,
                                   erh.priority,
                                   erh.id_exec_institution,
                                   erh.barcode,
                                   erh.id_prof_cancel,
                                   erh.dt_cancel_tstz,
                                   erh.id_cancel_reason,
                                   erh.notes_cancel,
                                   erh.id_prof_last_update,
                                   erh.dt_last_update_tstz
                              FROM exam_req_hist erh
                             WHERE erh.id_exam_req = i_exam_req
                             ORDER BY dt_exam_req_hist DESC NULLS FIRST) t
                     ORDER BY rn) er;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_ORDER_DETAIL',
                                              o_error);
            pk_types.open_my_cursor(o_exam_order);
            pk_types.open_my_cursor(o_exam_order_barcode);
            pk_types.open_my_cursor(o_exam_order_history);
            RETURN FALSE;
    END get_exam_order_detail;

    /*FUNCTION get_exam_order_detail
    (
        i_lang      IN language.id_language%TYPE,
        i_prof      IN profissional,
        i_id_record IN exam_req.id_exam_req%TYPE,
        i_area      IN dd_content.area%TYPE,
        o_detail    OUT pk_types.cursor_type,
        o_error     OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_msg_date sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAM_REQ_M002');
    
        l_id_episode episode.id_episode%TYPE;
    
        l_tab_dd_block_data t_tab_dd_block_data;
    
        l_tab_dd_data      t_tab_dd_data := t_tab_dd_data();
        l_data_source_list table_varchar := table_varchar();
    
    BEGIN
    
        IF i_area = pk_dynamic_detail.g_area_exam_order
        THEN
            SELECT nvl(er.id_episode, er.id_episode_origin)
              INTO l_id_episode
              FROM exam_req_det erd
              JOIN exam_req er
                ON er.id_exam_req = erd.id_exam_req
             WHERE erd.id_exam_req_det = i_id_record;
        END IF;
    
        SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                   ddb.rank,
                                   NULL,
                                   NULL,
                                   ddb.condition_val,
                                   NULL,
                                   NULL,
                                   dd.data_source,
                                   dd.data_source_val,
                                   NULL)
          BULK COLLECT
          INTO l_tab_dd_block_data
          FROM (SELECT data_source, data_source_val
                  FROM (WITH cso_table AS (SELECT *
                                             FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                                                 i_prof,
                                                                                                 l_id_episode,
                                                                                                 NULL)))
                           SELECT NULL order_title,
                                  to_char(er.id_exam_req) order_no,
                                  decode(er.priority,
                                         NULL,
                                         NULL,
                                         pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.PRIORITY', er.priority, NULL)) priority,
                                  decode(er.flg_status,
                                         pk_exam_constant.g_exam_sos,
                                         pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS',
                                                                 pk_exam_constant.g_exam_req,
                                                                 i_lang),
                                         pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', er.flg_status, i_lang)) status,
                                  decode(er.flg_time,
                                         pk_exam_constant.g_flg_time_e,
                                         pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                         decode(er.dt_begin_tstz,
                                                NULL,
                                                NULL,
                                                ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                    er.dt_begin_tstz,
                                                                                    i_prof.institution,
                                                                                    i_prof.software) || ')'),
                                         pk_exam_constant.g_flg_time_b,
                                         pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                         decode(er.dt_begin_tstz,
                                                NULL,
                                                NULL,
                                                ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                    er.dt_begin_tstz,
                                                                                    i_prof.institution,
                                                                                    i_prof.software) || ')'),
                                         pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL)) to_execute,
                                  decode((SELECT COUNT(erd.id_exam_req_det)
                                           FROM exam_req_det erd
                                          WHERE erd.id_exam_req = er.id_exam_req),
                                         1,
                                         (SELECT pk_exams_api_db.get_alias_translation(i_lang,
                                                                                       i_prof,
                                                                                       'EXAM.CODE_EXAM.' || erd.id_exam,
                                                                                       NULL)
                                            FROM exam_req_det erd
                                           WHERE erd.id_exam_req = er.id_exam_req),
                                         (SELECT chr(10) || chr(9) || chr(9) ||
                                                 replace_clob(substr(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                            i_prof,
                                                                                                                            'EXAM.CODE_EXAM.' ||
                                                                                                                            erd.id_exam,
                                                                                                                            NULL) || ';'),
                                                                     1,
                                                                     length(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                                   i_prof,
                                                                                                                                   'EXAM.CODE_EXAM.' ||
                                                                                                                                   erd.id_exam,
                                                                                                                                   NULL) || ';')) - 1),
                                                              ';',
                                                              chr(10) || chr(9) || chr(9))
                                            FROM exam_req_det erd
                                           WHERE erd.id_exam_req = er.id_exam_req)) exam,
                                  decode(er.id_cancel_reason,
                                         NULL,
                                         NULL,
                                         pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, er.id_cancel_reason)) cancel_reason,
                                  decode(er.notes_cancel, NULL, NULL, er.notes_cancel) notes_cancel,
                                  pk_prof_utils.get_name_signature(i_lang,
                                                                   i_prof,
                                                                   coalesce(er.id_prof_cancel,
                                                                            er.id_prof_last_update,
                                                                            er.id_prof_req)) ||
                                  decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                          i_prof,
                                                                          coalesce(er.id_prof_cancel,
                                                                                   er.id_prof_last_update,
                                                                                   er.id_prof_req),
                                                                          coalesce(er.dt_cancel_tstz,
                                                                                   er.dt_last_update_tstz,
                                                                                   er.dt_req_tstz),
                                                                          er.id_episode),
                                         NULL,
                                         '; ',
                                         ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                                  i_prof,
                                                                                  coalesce(er.id_prof_cancel,
                                                                                           er.id_prof_last_update,
                                                                                           er.id_prof_req),
                                                                                  coalesce(er.dt_cancel_tstz,
                                                                                           er.dt_last_update_tstz,
                                                                                           er.dt_req_tstz),
                                                                                  er.id_episode) || '); ') ||
                                  pk_date_utils.date_char_tsz(i_lang,
                                                              coalesce(er.dt_cancel_tstz,
                                                                       er.dt_last_update_tstz,
                                                                       er.dt_req_tstz),
                                                              i_prof.institution,
                                                              i_prof.software) order_registered,
                                  to_char(er.barcode) barcode_b1,
                                  (SELECT pk_exams_api_db.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                'EXAM.CODE_EXAM.' || erd.id_exam,
                                                                                NULL)
                                     FROM dual) desc_exam,
                                  decode(i_area,
                                          pk_dynamic_detail.g_area_exam_order,
                                          CASE
                                              WHEN erd.id_clinical_purpose IS NOT NULL
                                                   OR erd.flg_laterality IS NOT NULL
                                                   OR
                                                   pk_diagnosis.concat_diag(i_lang, erd.id_exam_req_det, NULL, NULL, i_prof) IS NOT NULL THEN
                                               ' '
                                              ELSE
                                               NULL
                                          END,
                                          NULL) clinical_indication,
                                  decode(pk_diagnosis.concat_diag(i_lang, erd.id_exam_req_det, NULL, NULL, i_prof),
                                         NULL,
                                         NULL,
                                         pk_diagnosis.concat_diag(i_lang, erd.id_exam_req_det, NULL, NULL, i_prof)) desc_diagnosis,
                                  decode(erd.id_clinical_purpose,
                                         NULL,
                                         NULL,
                                         decode(erd.id_clinical_purpose,
                                                0,
                                                erd.clinical_purpose_notes,
                                                pk_translation.get_translation(i_lang,
                                                                               'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                                               erd.id_clinical_purpose))) clinical_purpose,
                                  decode(erd.flg_laterality,
                                         NULL,
                                         NULL,
                                         pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LATERALITY', erd.flg_laterality, i_lang)) laterality,
                                  decode(i_area, pk_dynamic_detail.g_area_exam_order, ' ', NULL) instructions,
                                  decode(i_area,
                                         pk_dynamic_detail.g_area_exam_order,
                                         decode(erd.flg_referral,
                                                pk_exam_constant.g_flg_referral_r,
                                                pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL',
                                                                        erd.flg_referral,
                                                                        i_lang),
                                                pk_exam_constant.g_flg_referral_s,
                                                pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL',
                                                                        erd.flg_referral,
                                                                        i_lang),
                                                pk_exam_constant.g_flg_referral_i,
                                                pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL',
                                                                        erd.flg_referral,
                                                                        i_lang),
                                                decode(erd.flg_status,
                                                       pk_exam_constant.g_exam_sos,
                                                       pk_sysdomain.get_domain(i_lang,
                                                                               i_prof,
                                                                               'EXAM_REQ_DET.FLG_STATUS',
                                                                               pk_exam_constant.g_exam_req,
                                                                               NULL),
                                                       pk_sysdomain.get_domain(i_lang,
                                                                               i_prof,
                                                                               'EXAM_REQ_DET.FLG_STATUS',
                                                                               erd.flg_status,
                                                                               NULL))),
                                         NULL) desc_status,
                                  
                                  decode(i_area,
                                         pk_dynamic_detail.g_area_exam_order,
                                         pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                         decode(erd.dt_target_tstz,
                                                NULL,
                                                decode(er.dt_schedule_tstz,
                                                       NULL,
                                                       NULL,
                                                       ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                           er.dt_schedule_tstz,
                                                                                           i_prof.institution,
                                                                                           i_prof.software) || ' - ' ||
                                                       l_msg_date || ')'),
                                                ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                    erd.dt_target_tstz,
                                                                                    i_prof.institution,
                                                                                    i_prof.software) || ')'),
                                         NULL) desc_time,
                                  decode(i_area,
                                         pk_dynamic_detail.g_area_exam_order,
                                         decode(erd.id_order_recurrence,
                                                NULL,
                                                NULL,
                                                pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang,
                                                                                                      i_prof,
                                                                                                      erd.id_order_recurrence)),
                                         NULL) order_recurrence,
                                  decode(erd.flg_prn,
                                         NULL,
                                         NULL,
                                         pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_PRN', erd.flg_prn, i_lang)) prn,
                                  decode(i_area,
                                         pk_dynamic_detail.g_area_exam_order,
                                         decode(dbms_lob.getlength(erd.prn_notes), NULL, NULL, to_char(erd.prn_notes)),
                                         NULL) notes_prn,
                                  CASE
                                       WHEN erd.flg_fasting IS NOT NULL
                                            OR dbms_lob.getlength(erd.notes_patient) IS NOT NULL THEN
                                        ' '
                                       ELSE
                                        NULL
                                   END patient_instructions,
                                  decode(erd.flg_fasting,
                                         NULL,
                                         NULL,
                                         pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_FASTING', erd.flg_fasting, i_lang)) fasting,
                                  decode(dbms_lob.getlength(erd.notes_patient), NULL, NULL, erd.notes_patient) notes_patient,
                                  CASE
                                       WHEN erd.flg_location IS NOT NULL
                                            OR erd.notes_scheduler IS NOT NULL
                                            OR erd.notes_tech IS NOT NULL
                                            OR erd.notes IS NOT NULL THEN
                                        ' '
                                       ELSE
                                        NULL
                                   END execution,
                                  decode(erd.flg_location,
                                         NULL,
                                         NULL,
                                         decode(erd.flg_location,
                                                pk_exam_constant.g_exam_location_interior,
                                                decode(erd.id_room,
                                                       NULL,
                                                       pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION',
                                                                               erd.flg_location,
                                                                               i_lang),
                                                       pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION',
                                                                               erd.flg_location,
                                                                               i_lang) || ' - ' ||
                                                       nvl((SELECT r.desc_room
                                                             FROM room r
                                                            WHERE r.id_room = erd.id_room),
                                                           pk_translation.get_translation(i_lang,
                                                                                          'ROOM.CODE_ROOM.' || erd.id_room))),
                                                decode(erd.id_exec_institution,
                                                       NULL,
                                                       pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION',
                                                                               erd.flg_location,
                                                                               i_lang),
                                                       pk_translation.get_translation(i_lang,
                                                                                      'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                      erd.id_exec_institution)))) perform_location,
                                  decode(erd.notes_scheduler, NULL, NULL, erd.notes_scheduler) notes_scheduler,
                                  decode(erd.notes_tech, NULL, NULL, erd.notes_tech) notes_technician,
                                  decode(erd.notes, NULL, NULL, erd.notes) notes,
                                  CASE
                                       WHEN cso.desc_prof_ordered_by IS NOT NULL
                                            OR cso.dt_ordered_by IS NOT NULL
                                            OR cso.id_order_type IS NOT NULL THEN
                                        ' '
                                       ELSE
                                        NULL
                                   END co_sign,
                                  decode(cso.desc_prof_ordered_by, NULL, NULL, cso.desc_prof_ordered_by) prof_order,
                                  decode(cso.dt_ordered_by,
                                         NULL,
                                         NULL,
                                         pk_date_utils.date_char_tsz(i_lang,
                                                                     cso.dt_ordered_by,
                                                                     i_prof.institution,
                                                                     i_prof.software)) dt_order,
                                  decode(cso.id_order_type, NULL, NULL, cso.desc_order_type) order_type
                             FROM exam_req er
                             LEFT JOIN exam_req_det erd
                               ON erd.id_exam_req = er.id_exam_req
                              AND i_area = pk_dynamic_detail.g_area_exam_order
                             LEFT JOIN cso_table cso
                               ON cso.id_co_sign_hist = erd.id_co_sign_order
                             LEFT JOIN cso_table csc
                               ON csc.id_co_sign_hist = erd.id_co_sign_cancel
                            WHERE (er.id_exam_req = i_id_record AND i_area = pk_dynamic_detail.g_area_exam_order_tech)
                               OR (erd.id_exam_req_det = i_id_record AND i_area = pk_dynamic_detail.g_area_exam_order)) unpivot include NULLS(data_source_val
                              FOR data_source IN(order_title,
                                                 order_no,
                                                 priority,
                                                 status,
                                                 to_execute,
                                                 exam,
                                                 cancel_reason,
                                                 notes_cancel,
                                                 order_registered,
                                                 order_registered,
                                                 barcode_b1,
                                                 desc_exam,
                                                 clinical_indication,
                                                 desc_diagnosis,
                                                 clinical_purpose,
                                                 laterality,
                                                 instructions,
                                                 desc_status,
                                                 priority,
                                                 desc_time,
                                                 order_recurrence,
                                                 prn,
                                                 notes_prn,
                                                 patient_instructions,
                                                 fasting,
                                                 notes_patient,
                                                 execution,
                                                 perform_location,
                                                 notes_scheduler,
                                                 notes_technician,
                                                 notes,
                                                 co_sign,
                                                 prof_order,
                                                 dt_order,
                                                 order_type))
                ) dd
          JOIN dd_content ddc
            ON ddc.area = i_area
           AND ddc.data_source = dd.data_source
           AND ddc.flg_available = pk_alert_constant.g_yes
          JOIN dd_block ddb
            ON ddb.id_dd_block = ddc.id_dd_block
           AND ddb.area = i_area
           AND ddb.flg_available = pk_alert_constant.g_yes
         ORDER BY ddb.rank;
    
        SELECT t_rec_dd_data(CASE
                                  WHEN data_code_message IS NOT NULL THEN
                                   pk_message.get_message(i_lang => i_lang, i_code_mess => data_code_message)
                                  ELSE
                                   NULL
                              END, --DESCR
                              data_source_val, --VAL
                              flg_type), --TYPE
               data_source
          BULK COLLECT
          INTO l_tab_dd_data, l_data_source_list
          FROM (SELECT ddc.data_code_message, flg_type, data_source_val, ddc.data_source, db.rnk, rank
                  FROM TABLE(l_tab_dd_block_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = i_area
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type = 'L1')
                UNION
                --New lines
                SELECT ddc.data_code_message,
                       ddc.flg_type,
                       NULL                  data_source_val,
                       ddc.data_source,
                       ddb.rank              rnk,
                       ddc.rank
                  FROM dd_content ddc
                  JOIN dd_block ddb
                    ON ddb.id_dd_block = ddc.id_dd_block
                   AND ddb.area = i_area
                  JOIN (SELECT DISTINCT id_dd_block --Join to show 'new lines' only for blocks that are available
                         FROM TABLE(l_tab_dd_block_data)
                        WHERE data_source_val IS NOT NULL) t
                    ON t.id_dd_block = ddb.id_dd_block
                 WHERE ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = i_area
                   AND ddc.flg_type = 'WL')
         ORDER BY rnk, rank;
    
        OPEN o_detail FOR
            SELECT descr, val, TYPE
              FROM (SELECT CASE
                                WHEN d.val IS NULL THEN
                                 d.descr
                                WHEN d.descr IS NULL THEN
                                 NULL
                                ELSE
                                 d.descr || ' '
                            END descr,
                           d.val,
                           d.type,
                           d.rn
                      FROM (SELECT rownum rn, descr, val, TYPE
                              FROM TABLE(l_tab_dd_data)) d
                      JOIN (SELECT rownum rn, column_value data_source
                             FROM TABLE(l_data_source_list)) ds
                        ON ds.rn = d.rn)
             ORDER BY rn;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_ORDER_DETAIL',
                                              o_error);
            RETURN FALSE;
    END get_exam_order_detail;*/

    --The following function must be replaced by the previous (which is commented)
    --after the migration of the exams grid 
    FUNCTION get_exam_order_detail
    (
        i_lang      IN language.id_language%TYPE,
        i_prof      IN profissional,
        i_id_record IN exam_req.id_exam_req%TYPE,
        i_area      IN dd_content.area%TYPE,
        o_detail    OUT pk_types.cursor_type,
        o_error     OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_tab_dd_block_data t_tab_dd_block_data;
    
        l_tab_dd_data      t_tab_dd_data := t_tab_dd_data();
        l_data_source_list table_varchar := table_varchar();
    
    BEGIN
    
        SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                   ddb.rank,
                                   NULL,
                                   NULL,
                                   ddb.condition_val,
                                   NULL,
                                   NULL,
                                   dd.data_source,
                                   dd.data_source_val,
                                   NULL)
          BULK COLLECT
          INTO l_tab_dd_block_data
          FROM (SELECT data_source, data_source_val
                  FROM (SELECT NULL order_title,
                               to_char(er.id_exam_req) order_no,
                               decode(er.priority,
                                      NULL,
                                      NULL,
                                      pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.PRIORITY', er.priority, NULL)) priority,
                               decode(er.flg_status,
                                      pk_exam_constant.g_exam_sos,
                                      pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', pk_exam_constant.g_exam_req, i_lang),
                                      pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', er.flg_status, i_lang)) status,
                               decode(er.flg_time,
                                      pk_exam_constant.g_flg_time_e,
                                      pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                      decode(er.dt_begin_tstz,
                                             NULL,
                                             NULL,
                                             ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                 er.dt_begin_tstz,
                                                                                 i_prof.institution,
                                                                                 i_prof.software) || ')'),
                                      pk_exam_constant.g_flg_time_b,
                                      pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                      decode(er.dt_begin_tstz,
                                             NULL,
                                             NULL,
                                             ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                 er.dt_begin_tstz,
                                                                                 i_prof.institution,
                                                                                 i_prof.software) || ')'),
                                      pk_exam_constant.g_flg_time_d,
                                      pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                      decode(er.dt_begin_tstz,
                                             NULL,
                                             NULL,
                                             ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                 er.dt_begin_tstz,
                                                                                 i_prof.institution,
                                                                                 i_prof.software) || ')'),
                                      pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL)) to_execute,
                               decode((SELECT COUNT(erd.id_exam_req_det)
                                        FROM exam_req_det erd
                                       WHERE erd.id_exam_req = er.id_exam_req),
                                      1,
                                      (SELECT pk_exams_api_db.get_alias_translation(i_lang,
                                                                                    i_prof,
                                                                                    'EXAM.CODE_EXAM.' || erd.id_exam,
                                                                                    NULL)
                                         FROM exam_req_det erd
                                        WHERE erd.id_exam_req = er.id_exam_req),
                                      (SELECT chr(10) || chr(9) || chr(9) ||
                                              replace_clob(substr(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                         i_prof,
                                                                                                                         'EXAM.CODE_EXAM.' ||
                                                                                                                         erd.id_exam,
                                                                                                                         NULL) || ';'),
                                                                  1,
                                                                  length(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                                i_prof,
                                                                                                                                'EXAM.CODE_EXAM.' ||
                                                                                                                                erd.id_exam,
                                                                                                                                NULL) || ';')) - 1),
                                                           ';',
                                                           chr(10) || chr(9) || chr(9))
                                         FROM exam_req_det erd
                                        WHERE erd.id_exam_req = er.id_exam_req)) exam,
                               decode(er.id_cancel_reason,
                                      NULL,
                                      NULL,
                                      pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, er.id_cancel_reason)) cancel_reason,
                               decode(er.notes_cancel, NULL, NULL, er.notes_cancel) notes_cancel,
                               pk_prof_utils.get_name_signature(i_lang,
                                                                i_prof,
                                                                coalesce(er.id_prof_cancel,
                                                                         er.id_prof_last_update,
                                                                         er.id_prof_req)) ||
                               decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       coalesce(er.id_prof_cancel,
                                                                                er.id_prof_last_update,
                                                                                er.id_prof_req),
                                                                       coalesce(er.dt_cancel_tstz,
                                                                                er.dt_last_update_tstz,
                                                                                er.dt_req_tstz),
                                                                       er.id_episode),
                                      NULL,
                                      '; ',
                                      ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                               i_prof,
                                                                               coalesce(er.id_prof_cancel,
                                                                                        er.id_prof_last_update,
                                                                                        er.id_prof_req),
                                                                               coalesce(er.dt_cancel_tstz,
                                                                                        er.dt_last_update_tstz,
                                                                                        er.dt_req_tstz),
                                                                               er.id_episode) || '); ') ||
                               pk_date_utils.date_char_tsz(i_lang,
                                                           coalesce(er.dt_cancel_tstz,
                                                                    er.dt_last_update_tstz,
                                                                    er.dt_req_tstz),
                                                           i_prof.institution,
                                                           i_prof.software) order_registered,
                               to_char(er.barcode) barcode_b1
                          FROM exam_req er
                         WHERE er.id_exam_req = i_id_record) unpivot include NULLS(data_source_val FOR data_source IN(order_title,
                                                                                                                      order_no,
                                                                                                                      priority,
                                                                                                                      status,
                                                                                                                      to_execute,
                                                                                                                      exam,
                                                                                                                      cancel_reason,
                                                                                                                      notes_cancel,
                                                                                                                      order_registered,
                                                                                                                      order_registered,
                                                                                                                      barcode_b1))) dd
          JOIN dd_content ddc
            ON ddc.area = pk_dynamic_detail.g_area_exam_order
           AND ddc.data_source = dd.data_source
           AND ddc.flg_available = pk_alert_constant.g_yes
          JOIN dd_block ddb
            ON ddb.id_dd_block = ddc.id_dd_block
           AND ddb.area = pk_dynamic_detail.g_area_exam_order
           AND ddb.flg_available = pk_alert_constant.g_yes
         ORDER BY ddb.rank;
    
        SELECT t_rec_dd_data(CASE
                                  WHEN data_code_message IS NOT NULL THEN
                                   pk_message.get_message(i_lang, data_code_message)
                                  ELSE
                                   NULL
                              END, --DESCR
                              data_source_val, --VAL
                              flg_type,
                              flg_html,
                              NULL,
                              flg_clob), --TYPE
               data_source
          BULK COLLECT
          INTO l_tab_dd_data, l_data_source_list
          FROM (SELECT ddc.data_code_message,
                       flg_type,
                       data_source_val,
                       ddc.data_source,
                       db.rnk,
                       rank,
                       flg_html,
                       flg_clob
                  FROM TABLE(l_tab_dd_block_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = pk_dynamic_detail.g_area_exam_order
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type = 'L1')
                UNION
                --New lines
                SELECT ddc.data_code_message,
                       ddc.flg_type,
                       NULL                  data_source_val,
                       ddc.data_source,
                       ddb.rank              rnk,
                       ddc.rank,
                       flg_html,
                       flg_clob
                  FROM dd_content ddc
                  JOIN dd_block ddb
                    ON ddb.id_dd_block = ddc.id_dd_block
                   AND ddb.area = pk_dynamic_detail.g_area_exam_order
                  JOIN (SELECT DISTINCT id_dd_block --Join to show 'new lines' only for blocks that are available
                         FROM TABLE(l_tab_dd_block_data)
                        WHERE data_source_val IS NOT NULL) t
                    ON t.id_dd_block = ddb.id_dd_block
                 WHERE ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = pk_dynamic_detail.g_area_exam_order
                   AND ddc.flg_type = 'WL')
         ORDER BY rnk, rank;
    
        OPEN o_detail FOR
            SELECT descr, val, flg_type, flg_html, val_clob, flg_clob
              FROM (SELECT CASE
                                WHEN d.val IS NULL THEN
                                 d.descr
                                WHEN d.descr IS NULL THEN
                                 NULL
                                ELSE
                                 d.descr || ' '
                            END descr,
                           d.val,
                           d.flg_type,
                           d.flg_html,
                           d.val_clob,
                           d.flg_clob,
                           d.rn
                      FROM (SELECT rownum rn, descr, val, flg_type, flg_html, val_clob, flg_clob
                              FROM TABLE(l_tab_dd_data)) d
                      JOIN (SELECT rownum rn, column_value data_source
                             FROM TABLE(l_data_source_list)) ds
                        ON ds.rn = d.rn)
             ORDER BY rn;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_ORDER_DETAIL',
                                              o_error);
            RETURN FALSE;
    END get_exam_order_detail;

    FUNCTION get_exam_order_hist
    (
        i_lang      IN language.id_language%TYPE,
        i_prof      IN profissional,
        i_id_record IN exam_req.id_exam_req%TYPE,
        i_area      IN dd_content.area%TYPE,
        o_detail    OUT pk_types.cursor_type,
        o_error     OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_tab_dd_block_data t_tab_dd_block_data;
    
        l_tab_dd_data      t_tab_dd_data := t_tab_dd_data();
        l_data_source_list table_varchar := table_varchar();
    
    BEGIN
    
        --This function is the same as get_exam_order_detail because the technician grid is showing the info
        --regarding exam_req and not exam_req_det. Since it is not possible to edit exam_req, the current history of changes
        --of the technician grid will not show any changes, and so, when functions get_exam_detail and get_exam_detail_history
        --are migrated to HTML, they will also start being used on this grid. 
        SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                   ddb.rank,
                                   NULL,
                                   NULL,
                                   ddb.condition_val,
                                   NULL,
                                   NULL,
                                   dd.data_source,
                                   dd.data_source_val,
                                   NULL)
          BULK COLLECT
          INTO l_tab_dd_block_data
          FROM (SELECT data_source, data_source_val
                  FROM (SELECT NULL order_title,
                               to_char(er.id_exam_req) order_no,
                               decode(er.priority,
                                      NULL,
                                      NULL,
                                      pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.PRIORITY', er.priority, NULL)) priority,
                               decode(er.flg_status,
                                      pk_exam_constant.g_exam_sos,
                                      pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', pk_exam_constant.g_exam_req, i_lang),
                                      pk_sysdomain.get_domain('EXAM_REQ.FLG_STATUS', er.flg_status, i_lang)) status,
                               decode(er.flg_time,
                                      pk_exam_constant.g_flg_time_e,
                                      pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                      decode(er.dt_begin_tstz,
                                             NULL,
                                             NULL,
                                             ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                 er.dt_begin_tstz,
                                                                                 i_prof.institution,
                                                                                 i_prof.software) || ')'),
                                      pk_exam_constant.g_flg_time_b,
                                      pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                      decode(er.dt_begin_tstz,
                                             NULL,
                                             NULL,
                                             ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                 er.dt_begin_tstz,
                                                                                 i_prof.institution,
                                                                                 i_prof.software) || ')'),
                                      pk_exam_constant.g_flg_time_d,
                                      pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                                      decode(er.dt_begin_tstz,
                                             NULL,
                                             NULL,
                                             ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                 er.dt_begin_tstz,
                                                                                 i_prof.institution,
                                                                                 i_prof.software) || ')'),
                                      pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL)) to_execute,
                               decode((SELECT COUNT(erd.id_exam_req_det)
                                        FROM exam_req_det erd
                                       WHERE erd.id_exam_req = er.id_exam_req),
                                      1,
                                      (SELECT pk_exams_api_db.get_alias_translation(i_lang,
                                                                                    i_prof,
                                                                                    'EXAM.CODE_EXAM.' || erd.id_exam,
                                                                                    NULL)
                                         FROM exam_req_det erd
                                        WHERE erd.id_exam_req = er.id_exam_req),
                                      (SELECT chr(10) || chr(9) || chr(9) ||
                                              replace_clob(substr(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                         i_prof,
                                                                                                                         'EXAM.CODE_EXAM.' ||
                                                                                                                         erd.id_exam,
                                                                                                                         NULL) || ';'),
                                                                  1,
                                                                  length(concatenate_clob(pk_exams_api_db.get_alias_translation(i_lang,
                                                                                                                                i_prof,
                                                                                                                                'EXAM.CODE_EXAM.' ||
                                                                                                                                erd.id_exam,
                                                                                                                                NULL) || ';')) - 1),
                                                           ';',
                                                           chr(10) || chr(9) || chr(9))
                                         FROM exam_req_det erd
                                        WHERE erd.id_exam_req = er.id_exam_req)) exam,
                               decode(er.id_cancel_reason,
                                      NULL,
                                      NULL,
                                      pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, er.id_cancel_reason)) cancel_reason,
                               decode(er.notes_cancel, NULL, NULL, er.notes_cancel) notes_cancel,
                               pk_prof_utils.get_name_signature(i_lang,
                                                                i_prof,
                                                                coalesce(er.id_prof_cancel,
                                                                         er.id_prof_last_update,
                                                                         er.id_prof_req)) ||
                               decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       coalesce(er.id_prof_cancel,
                                                                                er.id_prof_last_update,
                                                                                er.id_prof_req),
                                                                       coalesce(er.dt_cancel_tstz,
                                                                                er.dt_last_update_tstz,
                                                                                er.dt_req_tstz),
                                                                       er.id_episode),
                                      NULL,
                                      '; ',
                                      ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                               i_prof,
                                                                               coalesce(er.id_prof_cancel,
                                                                                        er.id_prof_last_update,
                                                                                        er.id_prof_req),
                                                                               coalesce(er.dt_cancel_tstz,
                                                                                        er.dt_last_update_tstz,
                                                                                        er.dt_req_tstz),
                                                                               er.id_episode) || '); ') ||
                               pk_date_utils.date_char_tsz(i_lang,
                                                           coalesce(er.dt_cancel_tstz,
                                                                    er.dt_last_update_tstz,
                                                                    er.dt_req_tstz),
                                                           i_prof.institution,
                                                           i_prof.software) order_registered,
                               to_char(er.barcode) barcode_b1
                          FROM exam_req er
                         WHERE er.id_exam_req = i_id_record) unpivot include NULLS(data_source_val FOR data_source IN(order_title,
                                                                                                                      order_no,
                                                                                                                      priority,
                                                                                                                      status,
                                                                                                                      to_execute,
                                                                                                                      exam,
                                                                                                                      cancel_reason,
                                                                                                                      notes_cancel,
                                                                                                                      order_registered,
                                                                                                                      barcode_b1))) dd
          JOIN dd_content ddc
            ON ddc.area = i_area
           AND ddc.data_source = dd.data_source
           AND ddc.flg_available = pk_alert_constant.g_yes
          JOIN dd_block ddb
            ON ddb.id_dd_block = ddc.id_dd_block
           AND ddb.area = i_area
           AND ddb.flg_available = pk_alert_constant.g_yes
         ORDER BY ddb.rank;
    
        SELECT t_rec_dd_data(CASE
                                  WHEN data_code_message IS NOT NULL THEN
                                   pk_message.get_message(i_lang, data_code_message)
                                  ELSE
                                   NULL
                              END, --DESCR
                              data_source_val, --VAL
                              flg_type, --TYPE
                              flg_html,
                              NULL,
                              flg_clob),
               data_source
          BULK COLLECT
          INTO l_tab_dd_data, l_data_source_list
          FROM (SELECT ddc.data_code_message,
                       flg_type,
                       data_source_val,
                       ddc.data_source,
                       db.rnk,
                       rank,
                       flg_html,
                       flg_clob
                  FROM TABLE(l_tab_dd_block_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = i_area
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type = 'L1')
                UNION
                --New lines
                SELECT ddc.data_code_message,
                       ddc.flg_type,
                       NULL                  data_source_val,
                       ddc.data_source,
                       ddb.rank              rnk,
                       ddc.rank,
                       flg_html,
                       flg_clob
                  FROM dd_content ddc
                  JOIN dd_block ddb
                    ON ddb.id_dd_block = ddc.id_dd_block
                   AND ddb.area = i_area
                  JOIN (SELECT DISTINCT id_dd_block --Join to show 'new lines' only for blocks that are available
                         FROM TABLE(l_tab_dd_block_data)
                        WHERE data_source_val IS NOT NULL) t
                    ON t.id_dd_block = ddb.id_dd_block
                 WHERE ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = i_area
                   AND ddc.flg_type = 'WL')
         ORDER BY rnk, rank;
    
        OPEN o_detail FOR
            SELECT descr, val, flg_type, flg_html, val_clob, flg_clob
              FROM (SELECT CASE
                                WHEN d.val IS NULL THEN
                                 d.descr
                                WHEN d.descr IS NULL THEN
                                 NULL
                                ELSE
                                 d.descr || ' '
                            END descr,
                           d.val,
                           d.flg_type,
                           d.flg_html,
                           d.val_clob,
                           d.flg_clob,
                           d.rn
                      FROM (SELECT rownum rn, descr, val, flg_type, flg_html, val_clob, flg_clob
                              FROM TABLE(l_tab_dd_data)) d
                      JOIN (SELECT rownum rn, column_value data_source
                             FROM TABLE(l_data_source_list)) ds
                        ON ds.rn = d.rn)
             ORDER BY rn;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_ORDER_HIST',
                                              o_error);
            RETURN FALSE;
    END get_exam_order_hist;

    FUNCTION get_exam_detail
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_episode      IN episode.id_episode%TYPE,
        i_exam_req_det IN exam_req_det.id_exam_req_det%TYPE,
        o_detail       OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_exam_order         t_tbl_exams_detail;
        l_exam_cq            t_tbl_exams_cq;
        l_exam_co_sign       t_tbl_exam_co_sign;
        l_exam_perform       t_tbl_exam_perform;
        l_exam_result        t_tbl_exam_result;
        l_exam_result_images t_tbl_exam_result_images;
        l_exam_doc           t_tbl_exam_doc;
        l_exam_review        t_tbl_exam_review;
    
        l_tab_order_data             t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_co_sign_data           t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_perform_data           t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_result_data            t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_result_data_aux        t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_result_images_data     t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_result_images_data_aux t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_doc_data               t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_doc_data_aux           t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_review_data            t_tab_dd_block_data := t_tab_dd_block_data();
    
        l_tab_dd_data      t_tab_dd_data := t_tab_dd_data();
        l_data_source_list table_varchar := table_varchar();
    
        l_clinical_questions CLOB := NULL;
        l_count_cq           PLS_INTEGER := 0;
    
        l_co_sign_notes    CLOB;
        l_perform_note     CLOB;
        l_tbl_result_notes table_clob := table_clob();
    
        l_area dd_area.area%TYPE := 'EXAMS';
    
        l_id_exam_result exam_result.id_exam_result%TYPE := NULL;
        l_result_index   PLS_INTEGER := 0;
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
        LOOP
            aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                  pk_message.get_message(i_lang,
                                                                                                         i_prof,
                                                                                                         pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                  '</b> ';
        END LOOP;
    
        --EXAM ORDER
        g_error      := 'CALLING TF_GET_EXAM_ORDER';
        l_exam_order := pk_exam_core.tf_get_exam_order(i_lang             => i_lang,
                                                       i_prof             => i_prof,
                                                       i_episode          => i_episode,
                                                       i_exam_req_det     => i_exam_req_det,
                                                       i_flg_report       => pk_alert_constant.g_no,
                                                       i_aa_code_messages => aa_code_messages);
    
        IF l_exam_order.count > 0
        THEN
            SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                       ddb.rank,
                                       NULL,
                                       NULL,
                                       ddb.condition_val,
                                       NULL,
                                       NULL,
                                       dd.data_source,
                                       dd.data_source_val,
                                       NULL)
              BULK COLLECT
              INTO l_tab_order_data
              FROM (SELECT data_source, data_source_val
                      FROM (SELECT t.*
                              FROM (SELECT ' ' AS title,
                                           l_exam_order(1).desc_exam desc_exam,
                                           l_exam_order(1).num_order num_order,
                                           CASE
                                                WHEN l_exam_order(1).diagnosis_notes IS NOT NULL
                                                      OR l_exam_order(1).desc_diagnosis IS NOT NULL
                                                      OR l_exam_order(1).clinical_purpose IS NOT NULL
                                                      OR l_exam_order(1).laterality IS NOT NULL THEN
                                                 l_exam_order(1).clinical_indication
                                                ELSE
                                                 NULL
                                            END clinical_indication,
                                           l_exam_order(1).diagnosis_notes diagnosis_notes,
                                           l_exam_order(1).desc_diagnosis desc_diagnosis,
                                           l_exam_order(1).clinical_purpose clinical_purpose,
                                           l_exam_order(1).laterality laterality,
                                           l_exam_order(1).instructions instructions,
                                           l_exam_order(1).priority priority,
                                           l_exam_order(1).desc_status desc_status,
                                           l_exam_order(1).desc_time desc_time,
                                           l_exam_order(1).desc_time_limit desc_time_limit,
                                           l_exam_order(1).order_recurrence order_recurrence,
                                           l_exam_order(1).prn prn,
                                           to_char(l_exam_order(1).notes_prn) notes_prn,
                                           l_exam_order(1).patient_instructions patient_instructions,
                                           l_exam_order(1).fasting fasting,
                                           to_char(l_exam_order(1).notes_patient) notes_patient,
                                           l_exam_order(1).execution execution,
                                           l_exam_order(1).perform_location perform_location,
                                           l_exam_order(1).notes_scheduler notes_scheduler,
                                           l_exam_order(1).notes_technician notes_technician,
                                           l_exam_order(1).notes notes,
                                           CASE
                                                WHEN l_exam_order(1).prof_order IS NOT NULL
                                                      OR l_exam_order(1).dt_order IS NOT NULL
                                                      OR l_exam_order(1).co_sign_status IS NOT NULL
                                                      OR l_exam_order(1).order_type IS NOT NULL THEN
                                                 l_exam_order(1).co_sign
                                                ELSE
                                                 NULL
                                            END co_sign,
                                           l_exam_order(1).prof_order prof_order,
                                           l_exam_order(1).dt_order dt_order,
                                           l_exam_order(1).co_sign_status co_sign_status,
                                           l_exam_order(1).order_type order_type,
                                           CASE
                                                WHEN l_exam_order(1).health_plan IS NOT NULL
                                                      OR l_exam_order(1).insurance_number IS NOT NULL
                                                      OR l_exam_order(1).exemption IS NOT NULL
                                                      OR l_exam_order(1).financial_entity IS NOT NULL THEN
                                                 l_exam_order(1).health_insurance
                                                ELSE
                                                 NULL
                                            END health_insurance,
                                           l_exam_order(1).financial_entity financial_entity,
                                           l_exam_order(1).health_plan health_plan,
                                           l_exam_order(1).insurance_number insurance_number,
                                           l_exam_order(1).exemption exemption,
                                           CASE
                                                WHEN l_exam_order(1).cancel_reason IS NOT NULL
                                                      OR l_exam_order(1).cancel_notes IS NOT NULL
                                                      OR l_exam_order(1).cancel_prof_order IS NOT NULL
                                                      OR l_exam_order(1).cancel_dt_order IS NOT NULL
                                                      OR l_exam_order(1).cancel_order_type IS NOT NULL THEN
                                                 l_exam_order(1).cancellation
                                                ELSE
                                                 NULL
                                            END cancellation,
                                           l_exam_order(1).cancel_reason cancel_reason,
                                           l_exam_order(1).cancel_notes cancel_notes,
                                           l_exam_order(1).cancel_prof_order cancel_prof_order,
                                           l_exam_order(1).cancel_dt_order cancel_dt_order,
                                           l_exam_order(1).cancel_order_type cancel_order_type,
                                           l_exam_order(1).registry AS registry,
                                           ' ' white_line
                                      FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                             desc_exam,
                                                                                                             num_order,
                                                                                                             clinical_indication,
                                                                                                             diagnosis_notes,
                                                                                                             desc_diagnosis,
                                                                                                             clinical_purpose,
                                                                                                             laterality,
                                                                                                             instructions,
                                                                                                             priority,
                                                                                                             desc_status,
                                                                                                             desc_time,
                                                                                                             desc_time_limit,
                                                                                                             order_recurrence,
                                                                                                             prn,
                                                                                                             notes_prn,
                                                                                                             patient_instructions,
                                                                                                             fasting,
                                                                                                             notes_patient,
                                                                                                             execution,
                                                                                                             perform_location,
                                                                                                             notes_scheduler,
                                                                                                             notes_technician,
                                                                                                             notes,
                                                                                                             co_sign,
                                                                                                             prof_order,
                                                                                                             dt_order,
                                                                                                             co_sign_status,
                                                                                                             health_insurance,
                                                                                                             financial_entity,
                                                                                                             health_plan,
                                                                                                             insurance_number,
                                                                                                             exemption,
                                                                                                             cancellation,
                                                                                                             cancel_reason,
                                                                                                             cancel_notes,
                                                                                                             cancel_prof_order,
                                                                                                             cancel_dt_order,
                                                                                                             cancel_order_type,
                                                                                                             registry,
                                                                                                             white_line))) dd
              JOIN dd_block ddb
                ON ddb.area = l_area
               AND ddb.internal_name = 'ORDER'
               AND ddb.flg_available = pk_alert_constant.g_yes;
        END IF;
    
        --EXAM CLINICAL QUESTIONS               
        g_error    := 'CALLING TF_GET_EXAM_CQ';
        l_exam_cq  := pk_exam_core.tf_get_exam_cq(i_lang         => i_lang,
                                                  i_prof         => i_prof,
                                                  i_episode      => i_episode,
                                                  i_exam_req_det => i_exam_req_det,
                                                  i_flg_report   => pk_alert_constant.g_no);
        l_count_cq := l_exam_cq.count;
    
        IF l_exam_cq.count > 0
        THEN
            FOR i IN l_exam_cq.first .. l_exam_cq.last
            LOOP
                l_clinical_questions := l_clinical_questions || l_exam_cq(i).desc_clinical_question || chr(10);
            END LOOP;
        END IF;
    
        --EXAM CO_SIGN
        g_error        := 'CALLING TF_GET_EXAM_CO_SIGN';
        l_exam_co_sign := pk_exam_core.tf_get_exam_co_sign(i_lang             => i_lang,
                                                           i_prof             => i_prof,
                                                           i_episode          => i_episode,
                                                           i_exam_req_det     => i_exam_req_det,
                                                           i_flg_report       => pk_alert_constant.g_no,
                                                           i_aa_code_messages => aa_code_messages);
    
        IF l_exam_co_sign.count > 0
        THEN
            l_co_sign_notes := l_exam_co_sign(1).co_sign_notes;
        
            SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                       ddb.rank,
                                       NULL,
                                       NULL,
                                       ddb.condition_val,
                                       NULL,
                                       NULL,
                                       dd.data_source,
                                       dd.data_source_val,
                                       NULL)
              BULK COLLECT
              INTO l_tab_co_sign_data
              FROM (SELECT data_source, data_source_val
                      FROM (SELECT t.*
                              FROM (SELECT ' ' AS title, ' ' notes,l_exam_co_sign(1).registry AS registry, ' ' white_line
                                      FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                             notes,
                                                                                                             registry,
                                                                                                             white_line))) dd
              JOIN dd_block ddb
                ON ddb.area = l_area
               AND ddb.internal_name = 'ORDER_CO_SIGN'
               AND ddb.flg_available = pk_alert_constant.g_yes;
        END IF;
    
        --EXAM PERFORM
        g_error        := 'CALLING TF_GET_EXAM_PERFORM';
        l_exam_perform := pk_exam_core.tf_get_exam_perform(i_lang             => i_lang,
                                                           i_prof             => i_prof,
                                                           i_episode          => i_episode,
                                                           i_exam_req_det     => i_exam_req_det,
                                                           i_flg_report       => pk_alert_constant.g_no,
                                                           i_aa_code_messages => aa_code_messages);
    
        IF l_exam_perform.count > 0
        THEN
            l_perform_note := l_exam_perform(1).desc_perform;
        
            SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                       ddb.rank,
                                       NULL,
                                       NULL,
                                       ddb.condition_val,
                                       NULL,
                                       NULL,
                                       dd.data_source,
                                       dd.data_source_val,
                                       NULL)
              BULK COLLECT
              INTO l_tab_perform_data
              FROM (SELECT data_source, data_source_val
                      FROM (SELECT t.*
                              FROM (SELECT ' ' AS title,
                                           l_exam_perform(1).desc_exam exam_desc,
                                           l_exam_perform(1).prof_perform executed_by,
                                           l_exam_perform(1).dt_perform date_service,
                                           ' ' notes,
                                           l_exam_perform(1).desc_supplies supplies,
                                           l_exam_perform(1).registry AS registry,
                                           ' ' white_line
                                      FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                             exam_desc,
                                                                                                             executed_by,
                                                                                                             date_service,
                                                                                                             notes,
                                                                                                             supplies,
                                                                                                             registry,
                                                                                                             white_line))) dd
              JOIN dd_block ddb
                ON ddb.area = l_area
               AND ddb.internal_name = 'EXAM_PERFORM'
               AND ddb.flg_available = pk_alert_constant.g_yes;
        END IF;
    
        --EXAM RESULT
        g_error       := 'CALLING TF_GET_EXAM_REVIEW';
        l_exam_result := pk_exam_core.tf_get_exam_result(i_lang             => i_lang,
                                                         i_prof             => i_prof,
                                                         i_episode          => i_episode,
                                                         i_exam_req_det     => i_exam_req_det,
                                                         i_flg_report       => pk_alert_constant.g_no,
                                                         i_aa_code_messages => aa_code_messages);
    
        IF l_exam_result.count > 0
        THEN
            FOR i IN l_exam_result.first .. l_exam_result.last
            LOOP
                l_tbl_result_notes.extend();
                l_tbl_result_notes(l_tbl_result_notes.count) := l_exam_result(i).notes;
            
                SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                           ddb.rank + (i * 1000),
                                           NULL,
                                           NULL,
                                           ddb.condition_val,
                                           NULL,
                                           NULL,
                                           dd.data_source,
                                           dd.data_source_val,
                                           NULL)
                  BULK COLLECT
                  INTO l_tab_result_data_aux
                  FROM (SELECT data_source, data_source_val
                          FROM (SELECT t.*
                                  FROM (SELECT ' ' AS title,
                                               l_exam_result(i).desc_exam exam_desc,
                                               l_exam_result(i).abnormality_level abnormality_level,
                                               l_exam_result(i).result_origin result_origin,
                                               l_exam_result(i).result_origin_notes result_origin_notes,
                                               l_exam_result(i).result_status result_status,
                                               l_exam_result(i).desc_relevant desc_relevant,
                                               ' ' notes,
                                               l_exam_result(i).registry AS registry,
                                               ' ' white_line
                                          FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                                 exam_desc,
                                                                                                                 abnormality_level,
                                                                                                                 result_origin,
                                                                                                                 result_origin_notes,
                                                                                                                 result_status,
                                                                                                                 desc_relevant,
                                                                                                                 notes,
                                                                                                                 registry,
                                                                                                                 white_line))) dd
                  JOIN dd_block ddb
                    ON ddb.area = l_area
                   AND ddb.internal_name = 'EXAM_RESULT'
                   AND ddb.flg_available = pk_alert_constant.g_yes;
            
                FOR j IN l_tab_result_data_aux.first .. l_tab_result_data_aux.last
                LOOP
                    l_tab_result_data.extend();
                    l_tab_result_data(l_tab_result_data.count()) := l_tab_result_data_aux(j);
                END LOOP;
            END LOOP;
        END IF;
    
        --EXAM_RESULT_IMAGES
        g_error              := 'CALLING TF_GET_EXAM_RESULT_IMAGES';
        l_exam_result_images := tf_get_exam_result_images(i_lang             => i_lang,
                                                          i_prof             => i_prof,
                                                          i_episode          => i_episode,
                                                          i_exam_req_det     => i_exam_req_det,
                                                          i_flg_report       => pk_alert_constant.g_no,
                                                          i_aa_code_messages => aa_code_messages);
    
        IF l_exam_result_images.count > 0
        THEN
            FOR i IN l_exam_result_images.first .. l_exam_result_images.last
            LOOP
                IF l_exam_result_images(i).id_exam_result <> l_id_exam_result
                    OR l_id_exam_result IS NULL
                THEN
                    l_result_index   := l_result_index + 1;
                    l_id_exam_result := l_exam_result_images(i).id_exam_result;
                END IF;
            
                SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                           ddb.rank + (l_result_index * 1000) + (i * 100),
                                           NULL,
                                           NULL,
                                           ddb.condition_val,
                                           NULL,
                                           NULL,
                                           dd.data_source,
                                           dd.data_source_val,
                                           NULL)
                  BULK COLLECT
                  INTO l_tab_result_images_data_aux
                  FROM (SELECT data_source, data_source_val
                          FROM (SELECT t.*
                                  FROM (SELECT l_exam_result_images(i).doc_title doc_title,
                                               l_exam_result_images(i).doc_original_type doc_original_type,
                                               l_exam_result_images(i).dt_doc dt_doc,
                                               l_exam_result_images(i).perform_by perform_by,
                                               l_exam_result_images(i).num_img num_img,
                                               l_exam_result_images(i).doc_original_desc doc_original_desc,
                                               l_exam_result_images(i).doc_original_destination doc_original_destination,
                                               l_exam_result_images(i).notes doc_notes,
                                               l_exam_result(l_result_index).registry doc_registry,
                                               ' ' doc_white_line
                                          FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(doc_title,
                                                                                                                 doc_original_type,
                                                                                                                 dt_doc,
                                                                                                                 perform_by,
                                                                                                                 num_img,
                                                                                                                 doc_original_desc,
                                                                                                                 doc_original_destination,
                                                                                                                 doc_notes,
                                                                                                                 doc_registry,
                                                                                                                 doc_white_line))) dd
                  JOIN dd_block ddb
                    ON ddb.area = l_area
                   AND ddb.internal_name = 'EXAM_RESULT'
                   AND ddb.flg_available = pk_alert_constant.g_yes;
            
                FOR j IN l_tab_result_images_data_aux.first .. l_tab_result_images_data_aux.last
                LOOP
                    l_tab_result_images_data.extend();
                    l_tab_result_images_data(l_tab_result_images_data.count()) := l_tab_result_images_data_aux(j);
                END LOOP;
            END LOOP;
        END IF;
    
        --EXAM DOCUMENTS
        g_error    := 'CALLING TF_GET_EXAM_DOC';
        l_exam_doc := pk_exam_core.tf_get_exam_doc(i_lang             => i_lang,
                                                   i_prof             => i_prof,
                                                   i_episode          => i_episode,
                                                   i_exam_req_det     => i_exam_req_det,
                                                   i_flg_report       => pk_alert_constant.g_no,
                                                   i_aa_code_messages => aa_code_messages);
    
        IF l_exam_doc.count > 0
        THEN
            FOR i IN l_exam_doc.first .. l_exam_doc.last
            LOOP
                SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                           ddb.rank + (i * 1000),
                                           NULL,
                                           NULL,
                                           ddb.condition_val,
                                           NULL,
                                           NULL,
                                           dd.data_source,
                                           dd.data_source_val,
                                           NULL)
                  BULK COLLECT
                  INTO l_tab_doc_data_aux
                  FROM (SELECT data_source, data_source_val
                          FROM (SELECT t.*
                                  FROM (SELECT ' ' AS title,
                                               l_exam_doc(i).doc_title doc_title,
                                               l_exam_doc(i).doc_original_type doc_original_type,
                                               l_exam_doc(i).desc_status doc_status,
                                               l_exam_doc(i).dt_doc dt_doc,
                                               l_exam_doc(i).perform_by perform_by,
                                               l_exam_doc(i).num_img num_img,
                                               l_exam_doc(i).doc_original_desc doc_original_desc,
                                               l_exam_doc(i).doc_original_destination doc_original_destination,
                                               l_exam_doc(i).notes doc_notes,
                                               l_exam_doc(i).registry registry,
                                               ' ' white_line
                                          FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                                 doc_title,
                                                                                                                 doc_original_type,
                                                                                                                 doc_status,
                                                                                                                 dt_doc,
                                                                                                                 perform_by,
                                                                                                                 num_img,
                                                                                                                 doc_original_desc,
                                                                                                                 doc_original_destination,
                                                                                                                 doc_notes,
                                                                                                                 registry,
                                                                                                                 white_line))) dd
                  JOIN dd_block ddb
                    ON ddb.area = l_area
                   AND ddb.internal_name = 'EXAM_DOCUMENT'
                   AND ddb.flg_available = pk_alert_constant.g_yes;
            
                FOR j IN l_tab_doc_data_aux.first .. l_tab_doc_data_aux.last
                LOOP
                    l_tab_doc_data.extend();
                    l_tab_doc_data(l_tab_doc_data.count()) := l_tab_doc_data_aux(j);
                END LOOP;
            END LOOP;
        END IF;
    
        --EXAM REVIEW
        g_error       := 'CALLING TF_GET_EXAM_REVIEW';
        l_exam_review := tf_get_exam_review(i_lang             => i_lang,
                                            i_prof             => i_prof,
                                            i_episode          => i_episode,
                                            i_exam_req_det     => i_exam_req_det,
                                            i_flg_report       => pk_alert_constant.g_no,
                                            i_aa_code_messages => aa_code_messages);
    
        IF l_exam_review.count > 0
        THEN
            SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                       ddb.rank,
                                       NULL,
                                       NULL,
                                       ddb.condition_val,
                                       NULL,
                                       NULL,
                                       dd.data_source,
                                       dd.data_source_val,
                                       NULL)
              BULK COLLECT
              INTO l_tab_review_data
              FROM (SELECT data_source, data_source_val
                      FROM (SELECT t.*
                              FROM (SELECT ' ' AS title,
                                           l_exam_review(1).desc_exam exam_desc,
                                           l_exam_review(1).review_notes review_notes,
                                           l_exam_review(1).registry AS registry,
                                           ' ' white_line
                                      FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                             exam_desc,
                                                                                                             review_notes,
                                                                                                             registry,
                                                                                                             white_line))) dd
              JOIN dd_block ddb
                ON ddb.area = l_area
               AND ddb.internal_name = 'EXAM_REVIEW'
               AND ddb.flg_available = pk_alert_constant.g_yes;
        END IF;
    
        SELECT t_rec_dd_data(CASE
                                  WHEN data_code_message IS NOT NULL THEN
                                   pk_message.get_message(i_lang => i_lang, i_code_mess => data_code_message)
                                  ELSE
                                   NULL
                              END,
                              CASE
                                  WHEN flg_type = 'L1' THEN
                                   NULL
                                  ELSE
                                   data_source_val
                              END,
                              flg_type,
                              flg_html,
                              val_clob,
                              flg_clob),
               data_source
          BULK COLLECT
          INTO l_tab_dd_data, l_data_source_list
          FROM (SELECT /*+opt_estimate (table db rows=1)*/
                 ddc.data_code_message,
                 flg_type,
                 data_source_val,
                 ddc.data_source,
                 db.rnk,
                 ddc.rank,
                 db.id_dd_block,
                 flg_html,
                 NULL val_clob,
                 flg_clob
                  FROM TABLE(l_tab_order_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = l_area
                   AND ddc.id_dd_block = 1
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N'))
                UNION ALL
                --clinical questions
                SELECT ddc.data_code_message,
                       ddc.flg_type,
                       NULL,
                       ddc.data_source,
                       db.rank               rnk,
                       ddc.rank,
                       db.id_dd_block,
                       flg_html,
                       l_clinical_questions  val_clob,
                       flg_clob
                  FROM dd_block db
                  JOIN dd_content ddc
                    ON ddc.area = db.area
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND db.id_dd_block = ddc.id_dd_block
                   AND ddc.internal_name = 'CLINICAL_QUESTIONS'
                 WHERE db.area = l_area
                   AND l_count_cq > 0
                UNION ALL
                --CO_SIGN
                SELECT /*+opt_estimate (table db rows=1)*/
                 ddc.data_code_message,
                 flg_type,
                 data_source_val,
                 ddc.data_source,
                 db.rnk,
                 ddc.rank,
                 db.id_dd_block,
                 flg_html,
                 CASE
                     WHEN ddc.flg_clob = pk_alert_constant.g_yes THEN
                      l_co_sign_notes
                 END val_clob,
                 flg_clob
                  FROM TABLE(l_tab_co_sign_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = l_area
                   AND ddc.id_dd_block = 2
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N'))
                --PERFORM
                UNION ALL
                SELECT /*+opt_estimate (table db rows=1)*/
                 ddc.data_code_message,
                 flg_type,
                 data_source_val,
                 ddc.data_source,
                 db.rnk,
                 ddc.rank,
                 db.id_dd_block,
                 flg_html,
                 CASE
                     WHEN ddc.flg_clob = pk_alert_constant.g_yes THEN
                      l_perform_note
                 END val_clob,
                 flg_clob
                  FROM TABLE(l_tab_perform_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = l_area
                   AND ddc.id_dd_block = 3
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N'))
                --RESULT
                UNION ALL (SELECT ddc.data_code_message,
                                 flg_type,
                                 data_source_val,
                                 ddc.data_source,
                                 db.rnk,
                                 ddc.rank,
                                 db.id_dd_block,
                                 flg_html,
                                 CASE
                                      WHEN ddc.flg_clob = pk_alert_constant.g_yes THEN
                                       t_notes.column_value
                                  END val_clob,
                                 flg_clob
                            FROM (SELECT /*+opt_estimate (table t rows=1)*/
                                   t.*, row_number() over(PARTITION BY t.data_source ORDER BY t.rnk) AS rn
                                    FROM TABLE(l_tab_result_data) t) db
                            LEFT JOIN (SELECT /*+opt_estimate (table t rows=1)*/
                                       t.column_value, rownum AS rn
                                        FROM TABLE(l_tbl_result_notes) t) t_notes
                              ON t_notes.rn = db.rn
                            JOIN dd_content ddc
                              ON ddc.data_source = db.data_source
                             AND ddc.flg_available = pk_alert_constant.g_yes
                             AND ddc.area = l_area
                             AND ddc.id_dd_block = 4
                           WHERE ddc.id_dd_block = db.id_dd_block
                             AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N'))
                          UNION ALL
                          SELECT /*+opt_estimate (table db rows=1)*/
                           ddc.data_code_message,
                           flg_type,
                           data_source_val,
                           ddc.data_source,
                           db.rnk,
                           ddc.rank,
                           db.id_dd_block,
                           flg_html,
                           NULL val_clob,
                           flg_clob
                            FROM TABLE(l_tab_result_images_data) db
                            JOIN dd_content ddc
                              ON ddc.data_source = db.data_source
                             AND ddc.flg_available = pk_alert_constant.g_yes
                             AND ddc.area = l_area
                             AND ddc.id_dd_block = 4
                           WHERE ddc.id_dd_block = db.id_dd_block
                             AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N')))
                --EXAM DOCUMENT
                UNION ALL
                SELECT /*+opt_estimate (table db rows=1)*/
                 ddc.data_code_message,
                 flg_type,
                 data_source_val,
                 ddc.data_source,
                 db.rnk,
                 ddc.rank,
                 db.id_dd_block,
                 flg_html,
                 NULL val_clob,
                 flg_clob
                  FROM TABLE(l_tab_doc_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = l_area
                   AND ddc.id_dd_block = 5
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N'))
                --EXAM_REVIEW
                UNION ALL
                SELECT /*+opt_estimate (table db rows=1)*/
                 ddc.data_code_message,
                 flg_type,
                 data_source_val,
                 ddc.data_source,
                 db.rnk,
                 ddc.rank,
                 db.id_dd_block,
                 flg_html,
                 NULL val_clob,
                 flg_clob
                  FROM TABLE(l_tab_review_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = l_area
                   AND ddc.id_dd_block = 7
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N')))
         ORDER BY id_dd_block, rnk, rank;
    
        g_error := 'OPEN O_DETAIL';
        OPEN o_detail FOR
            SELECT descr, val, flg_type, flg_html, val_clob, flg_clob
              FROM (SELECT CASE
                                WHEN d.val IS NULL THEN
                                 d.descr
                                WHEN d.descr IS NULL THEN
                                 NULL
                                ELSE
                                 d.descr || decode(d.flg_type, 'LP', NULL, ': ')
                            END descr,
                           d.val,
                           d.flg_type,
                           flg_html,
                           val_clob,
                           flg_clob,
                           d.rn
                      FROM (SELECT /*+opt_estimate (table t rows=1)*/
                             rownum rn, descr, val, flg_type, flg_html, val_clob, flg_clob
                              FROM TABLE(l_tab_dd_data) t) d
                      JOIN (SELECT /*+opt_estimate (table t rows=1)*/
                            rownum rn, column_value data_source
                             FROM TABLE(l_data_source_list) t) ds
                        ON ds.rn = d.rn);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_package_owner,
                                              i_package  => g_package_name,
                                              i_function => 'GET_EXAM_DETAIL',
                                              o_error    => o_error);
            pk_types.open_my_cursor(i_cursor => o_detail);
            RETURN FALSE;
    END get_exam_detail;

    FUNCTION get_exam_detail_history
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_episode      IN episode.id_episode%TYPE,
        i_exam_req_det IN exam_req_det.id_exam_req_det%TYPE,
        o_detail       OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        l_exam_order_hist    t_tbl_exams_detail;
        l_exam_co_sign       t_tbl_exam_co_sign;
        l_exam_cq            t_tbl_exams_cq;
        l_exam_perform_hist  t_tbl_exam_perform_history;
        l_exam_result_hist   t_tbl_exam_result;
        l_exam_result_images t_tbl_exam_result_images;
        l_exam_doc           t_tbl_exam_doc;
        l_exam_review        t_tbl_exam_review;
    
        l_count_order_hist   PLS_INTEGER := 0;
        l_count_cq           PLS_INTEGER := 0;
        l_count_perform_hist PLS_INTEGER := 0;
        l_count_result_hist  PLS_INTEGER := 0;
    
        l_tab_order_data             t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_order_aux              t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_co_sign_data           t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_perform_data           t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_perform_aux            t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_result_data            t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_result_data_aux        t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_result_images_data     t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_result_images_data_aux t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_doc_data               t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_doc_data_aux           t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_review_data            t_tab_dd_block_data := t_tab_dd_block_data();
    
        l_tab_dd_data      t_tab_dd_data := t_tab_dd_data();
        l_data_source_list table_varchar := table_varchar();
    
        l_clinical_questions table_clob := table_clob();
    
        l_co_sign_notes CLOB;
    
        l_tbl_perform_notes table_clob := table_clob();
        l_tbl_result_notes  table_clob := table_clob();
    
        l_id_exam_result exam_result.id_exam_result%TYPE := NULL;
        l_result_index   PLS_INTEGER := 0;
    
        l_area dd_area.area%TYPE := 'EXAMS';
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
        LOOP
            aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                  pk_message.get_message(i_lang,
                                                                                                         i_prof,
                                                                                                         pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                  '</b> ';
        END LOOP;
    
        g_error := 'GET MESSAGES UPDATE';
        FOR i IN pk_exam_constant.ga_code_messages_exam_detail_upd.first .. pk_exam_constant.ga_code_messages_exam_detail_upd.last
        LOOP
            aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail_upd(i)) := '<span class="emphasizedRedDetail">' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail_upd(i)) ||
                                                                                      '</span> ';
        END LOOP;
    
        --EXAM ORDER HISTORY
        g_error           := 'CALLING TF_GET_EXAM_ORDER';
        l_exam_order_hist := tf_get_exam_order_history(i_lang             => i_lang,
                                                       i_prof             => i_prof,
                                                       i_episode          => i_episode,
                                                       i_exam_req_det     => i_exam_req_det,
                                                       i_flg_report       => pk_alert_constant.g_no,
                                                       i_flg_html         => pk_alert_constant.g_yes,
                                                       i_aa_code_messages => aa_code_messages);
    
        l_count_order_hist := l_exam_order_hist.count;
    
        IF l_exam_order_hist.count > 0
        THEN
            FOR i IN l_exam_order_hist.first .. l_exam_order_hist.last
            LOOP
                SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                           (ddb.rank * i),
                                           NULL,
                                           NULL,
                                           ddb.condition_val,
                                           NULL,
                                           NULL,
                                           dd.data_source,
                                           dd.data_source_val,
                                           NULL)
                  BULK COLLECT
                  INTO l_tab_order_aux
                  FROM (SELECT data_source, data_source_val
                          FROM (SELECT t.*
                                  FROM (SELECT CASE
                                                   WHEN l_count_order_hist = 1
                                                        OR i = l_count_order_hist THEN
                                                    ' '
                                                   ELSE
                                                    NULL
                                               END AS title,
                                               CASE
                                                   WHEN l_count_order_hist > 1
                                                        AND i < l_count_order_hist THEN
                                                    ' '
                                                   ELSE
                                                    NULL
                                               END AS title_update,
                                               l_exam_order_hist(i).desc_exam desc_exam,
                                               l_exam_order_hist(i).num_order num_order,
                                               CASE
                                                   WHEN l_exam_order_hist(i).diagnosis_notes IS NOT NULL
                                                         OR l_exam_order_hist(i).desc_diagnosis IS NOT NULL
                                                         OR l_exam_order_hist(i).clinical_purpose IS NOT NULL
                                                         OR l_exam_order_hist(i).laterality IS NOT NULL THEN
                                                    l_exam_order_hist(i).clinical_indication
                                                   ELSE
                                                    NULL
                                               END clinical_indication,
                                               l_exam_order_hist(i).diagnosis_notes diagnosis_notes,
                                               l_exam_order_hist(i).desc_diagnosis desc_diagnosis,
                                               l_exam_order_hist(i).clinical_purpose clinical_purpose,
                                               l_exam_order_hist(i).laterality laterality,
                                               --                                           
                                               CASE
                                                   WHEN l_exam_order_hist(i).priority IS NOT NULL
                                                         OR l_exam_order_hist(i).desc_status IS NOT NULL
                                                         OR l_exam_order_hist(i).desc_time IS NOT NULL
                                                         OR l_exam_order_hist(i).desc_time_limit IS NOT NULL
                                                         OR l_exam_order_hist(i).order_recurrence IS NOT NULL
                                                         OR l_exam_order_hist(i).prn IS NOT NULL
                                                         OR to_char(l_exam_order_hist(i).notes_prn) IS NOT NULL THEN
                                                    l_exam_order_hist(i).instructions
                                                   ELSE
                                                    NULL
                                               END instructions,
                                               l_exam_order_hist(i).priority priority,
                                               l_exam_order_hist(i).desc_status desc_status,
                                               l_exam_order_hist(i).desc_time desc_time,
                                               l_exam_order_hist(i).desc_time_limit desc_time_limit,
                                               l_exam_order_hist(i).order_recurrence order_recurrence,
                                               l_exam_order_hist(i).prn prn,
                                               to_char(l_exam_order_hist(i).notes_prn) notes_prn,
                                               --
                                               CASE
                                                   WHEN l_exam_order_hist(i).fasting IS NOT NULL
                                                         OR to_char(l_exam_order_hist(i).notes_patient) IS NOT NULL THEN
                                                    l_exam_order_hist(i).patient_instructions
                                                   ELSE
                                                    NULL
                                               END patient_instructions,
                                               l_exam_order_hist(i).fasting fasting,
                                               to_char(l_exam_order_hist(i).notes_patient) notes_patient,
                                               --
                                               CASE
                                                   WHEN l_exam_order_hist(i).perform_location IS NOT NULL
                                                         OR l_exam_order_hist(i).notes_scheduler IS NOT NULL
                                                         OR l_exam_order_hist(i).notes_technician IS NOT NULL
                                                         OR l_exam_order_hist(i).notes IS NOT NULL THEN
                                                    l_exam_order_hist(i).execution
                                                   ELSE
                                                    NULL
                                               END execution,
                                               l_exam_order_hist(i).perform_location perform_location,
                                               l_exam_order_hist(i).notes_scheduler notes_scheduler,
                                               l_exam_order_hist(i).notes_technician notes_technician,
                                               l_exam_order_hist(i).notes notes,
                                               --
                                               CASE
                                                   WHEN l_exam_order_hist(i).prof_order IS NOT NULL
                                                         OR l_exam_order_hist(i).dt_order IS NOT NULL
                                                         OR l_exam_order_hist(i).co_sign_status IS NOT NULL
                                                         OR l_exam_order_hist(i).order_type IS NOT NULL THEN
                                                    l_exam_order_hist(i).co_sign
                                                   ELSE
                                                    NULL
                                               END co_sign,
                                               l_exam_order_hist(i).prof_order prof_order,
                                               l_exam_order_hist(i).dt_order dt_order,
                                               l_exam_order_hist(i).co_sign_status co_sign_status,
                                               l_exam_order_hist(i).order_type order_type,
                                               --
                                               CASE
                                                   WHEN l_exam_order_hist(i).health_plan IS NOT NULL
                                                         OR l_exam_order_hist(i).insurance_number IS NOT NULL
                                                         OR l_exam_order_hist(i).exemption IS NOT NULL
                                                         OR l_exam_order_hist(i).financial_entity IS NOT NULL THEN
                                                    l_exam_order_hist(i).health_insurance
                                                   ELSE
                                                    NULL
                                               END health_insurance,
                                               l_exam_order_hist(i).financial_entity financial_entity,
                                               l_exam_order_hist(i).health_plan health_plan,
                                               l_exam_order_hist(i).insurance_number insurance_number,
                                               l_exam_order_hist(i).exemption exemption,
                                               --
                                               CASE
                                                   WHEN l_exam_order_hist(i).cancel_reason IS NOT NULL
                                                         OR l_exam_order_hist(i).cancel_notes IS NOT NULL
                                                         OR l_exam_order_hist(i).cancel_prof_order IS NOT NULL
                                                         OR l_exam_order_hist(i).cancel_dt_order IS NOT NULL
                                                         OR l_exam_order_hist(i).cancel_order_type IS NOT NULL THEN
                                                    l_exam_order_hist(i).cancellation
                                                   ELSE
                                                    NULL
                                               END cancellation,
                                               l_exam_order_hist(i).cancel_reason cancel_reason,
                                               l_exam_order_hist(i).cancel_notes cancel_notes,
                                               l_exam_order_hist(i).cancel_prof_order cancel_prof_order,
                                               l_exam_order_hist(i).cancel_dt_order cancel_dt_order,
                                               l_exam_order_hist(i).cancel_order_type cancel_order_type,
                                               l_exam_order_hist(i).registry AS registry,
                                               ' ' white_line
                                          FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                                 title_update,
                                                                                                                 desc_exam,
                                                                                                                 num_order,
                                                                                                                 clinical_indication,
                                                                                                                 diagnosis_notes,
                                                                                                                 desc_diagnosis,
                                                                                                                 clinical_purpose,
                                                                                                                 laterality,
                                                                                                                 instructions,
                                                                                                                 priority,
                                                                                                                 desc_status,
                                                                                                                 desc_time,
                                                                                                                 desc_time_limit,
                                                                                                                 order_recurrence,
                                                                                                                 prn,
                                                                                                                 notes_prn,
                                                                                                                 patient_instructions,
                                                                                                                 fasting,
                                                                                                                 notes_patient,
                                                                                                                 execution,
                                                                                                                 perform_location,
                                                                                                                 notes_scheduler,
                                                                                                                 notes_technician,
                                                                                                                 notes,
                                                                                                                 co_sign,
                                                                                                                 prof_order,
                                                                                                                 dt_order,
                                                                                                                 co_sign_status,
                                                                                                                 health_insurance,
                                                                                                                 financial_entity,
                                                                                                                 health_plan,
                                                                                                                 insurance_number,
                                                                                                                 exemption,
                                                                                                                 cancellation,
                                                                                                                 cancel_reason,
                                                                                                                 cancel_notes,
                                                                                                                 cancel_prof_order,
                                                                                                                 cancel_dt_order,
                                                                                                                 cancel_order_type,
                                                                                                                 registry,
                                                                                                                 white_line))) dd
                  JOIN dd_block ddb
                    ON ddb.area = l_area
                   AND ddb.internal_name = 'ORDER'
                   AND ddb.flg_available = pk_alert_constant.g_yes;
            
                IF l_tab_order_aux.count > 0
                THEN
                    FOR j IN l_tab_order_aux.first .. l_tab_order_aux.last
                    LOOP
                        l_tab_order_data.extend();
                        l_tab_order_data(l_tab_order_data.count) := l_tab_order_aux(j);
                    END LOOP;
                END IF;
            
            END LOOP;
        END IF;
    
        --EXAM CLINICAL QUESTIONS               
        g_error   := 'CALLING TF_GET_EXAM_CQ';
        l_exam_cq := pk_exam_core.tf_get_exam_cq_history(i_lang         => i_lang,
                                                         i_prof         => i_prof,
                                                         i_episode      => i_episode,
                                                         i_exam_req_det => i_exam_req_det,
                                                         i_flg_report   => pk_alert_constant.g_no,
                                                         i_flg_html     => pk_alert_constant.g_yes);
        SELECT COUNT(1)
          INTO l_count_cq
          FROM (SELECT DISTINCT (t.rn)
                  FROM TABLE(l_exam_cq) t);
    
        IF l_exam_cq.count > 0
        THEN
            FOR i IN 1 .. l_count_cq
            LOOP
                l_clinical_questions.extend();
                FOR j IN l_exam_cq.first .. l_exam_cq.last
                LOOP
                    IF l_exam_cq(j).rn = i
                    THEN
                        l_clinical_questions(l_clinical_questions.count) := l_clinical_questions(l_clinical_questions.count) || l_exam_cq(j).desc_clinical_question ||
                                                                            chr(10);
                    END IF;
                END LOOP;
            END LOOP;
        END IF;
    
        --EXAM CO_SIGN
        g_error        := 'CALLING TF_GET_EXAM_CO_SIGN';
        l_exam_co_sign := pk_exam_core.tf_get_exam_co_sign_history(i_lang             => i_lang,
                                                                   i_prof             => i_prof,
                                                                   i_episode          => i_episode,
                                                                   i_exam_req_det     => i_exam_req_det,
                                                                   i_flg_report       => pk_alert_constant.g_no,
                                                                   i_flg_html         => pk_alert_constant.g_yes,
                                                                   i_aa_code_messages => aa_code_messages);
    
        IF l_exam_co_sign.count > 0
        THEN
            l_co_sign_notes := l_exam_co_sign(1).co_sign_notes;
        
            SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                       ddb.rank,
                                       NULL,
                                       NULL,
                                       ddb.condition_val,
                                       NULL,
                                       NULL,
                                       dd.data_source,
                                       dd.data_source_val,
                                       NULL)
              BULK COLLECT
              INTO l_tab_co_sign_data
              FROM (SELECT data_source, data_source_val
                      FROM (SELECT t.*
                              FROM (SELECT ' ' AS title, ' ' notes,l_exam_co_sign(1).registry AS registry, ' ' white_line
                                      FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                             notes,
                                                                                                             registry,
                                                                                                             white_line))) dd
              JOIN dd_block ddb
                ON ddb.area = l_area
               AND ddb.internal_name = 'ORDER_CO_SIGN'
               AND ddb.flg_available = pk_alert_constant.g_yes;
        END IF;
    
        --EXAM PERFORM HISTORY
        g_error             := 'CALLING TF_GET_EXAM_PERFORM_HISTORY';
        l_exam_perform_hist := tf_get_exam_perform_history(i_lang             => i_lang,
                                                           i_prof             => i_prof,
                                                           i_episode          => i_episode,
                                                           i_exam_req_det     => i_exam_req_det,
                                                           i_flg_report       => pk_alert_constant.g_no,
                                                           i_flg_html         => pk_alert_constant.g_yes,
                                                           i_aa_code_messages => aa_code_messages);
    
        l_count_perform_hist := l_exam_perform_hist.count;
    
        IF l_exam_perform_hist.count > 0
        THEN
            FOR i IN l_exam_perform_hist.first .. l_exam_perform_hist.last
            LOOP
            
                l_tbl_perform_notes.extend();
                l_tbl_perform_notes(l_tbl_perform_notes.count) := l_exam_perform_hist(i).desc_perform;
            
                SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                           (ddb.rank * i),
                                           NULL,
                                           NULL,
                                           ddb.condition_val,
                                           NULL,
                                           NULL,
                                           dd.data_source,
                                           dd.data_source_val,
                                           NULL)
                  BULK COLLECT
                  INTO l_tab_perform_aux
                  FROM (SELECT data_source, data_source_val
                          FROM (SELECT t.*
                                  FROM (SELECT CASE
                                                    WHEN l_count_perform_hist = 1
                                                         OR i = l_count_perform_hist THEN
                                                     ' '
                                                    ELSE
                                                     NULL
                                                END AS title,
                                               CASE
                                                    WHEN l_count_perform_hist > 1
                                                         AND i < l_count_perform_hist THEN
                                                     ' '
                                                    ELSE
                                                     NULL
                                                END AS title_update,
                                               l_exam_perform_hist(i).desc_exam exam_desc,
                                               l_exam_perform_hist(i).prof_perform executed_by,
                                               l_exam_perform_hist(i).dt_perform date_service,
                                               ' ' notes,
                                               l_exam_perform_hist(i).desc_supplies supplies,
                                               l_exam_perform_hist(i).cancel_reason cancel_reason,
                                               l_exam_perform_hist(i).notes_cancel notes_cancel,
                                               l_exam_perform_hist(i).registry AS registry,
                                               ' ' white_line
                                          FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                                 title_update,
                                                                                                                 exam_desc,
                                                                                                                 executed_by,
                                                                                                                 date_service,
                                                                                                                 notes,
                                                                                                                 supplies,
                                                                                                                 cancel_reason,
                                                                                                                 notes_cancel,
                                                                                                                 registry,
                                                                                                                 white_line))) dd
                  JOIN dd_block ddb
                    ON ddb.area = l_area
                   AND ddb.internal_name = 'EXAM_PERFORM'
                   AND ddb.flg_available = pk_alert_constant.g_yes;
            
                IF l_tab_perform_aux.count > 0
                THEN
                    FOR j IN l_tab_perform_aux.first .. l_tab_perform_aux.last
                    LOOP
                        l_tab_perform_data.extend();
                        l_tab_perform_data(l_tab_perform_data.count) := l_tab_perform_aux(j);
                    END LOOP;
                END IF;
            END LOOP;
        END IF;
    
        --EXAM RESULT HISTORY
        g_error            := 'CALLING TF_GET_EXAM_RESULT_HISTORY';
        l_exam_result_hist := tf_get_exam_result_history(i_lang             => i_lang,
                                                         i_prof             => i_prof,
                                                         i_episode          => i_episode,
                                                         i_exam_req_det     => i_exam_req_det,
                                                         i_flg_report       => pk_alert_constant.g_no,
                                                         i_flg_html         => pk_alert_constant.g_yes,
                                                         i_aa_code_messages => aa_code_messages);
    
        l_count_result_hist := l_exam_result_hist.count;
    
        IF l_exam_result_hist.count > 0
        THEN
            FOR i IN l_exam_result_hist.first .. l_exam_result_hist.last
            LOOP
                l_tbl_result_notes.extend();
                l_tbl_result_notes(l_tbl_result_notes.count) := l_exam_result_hist(i).notes;
            
                SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                           ddb.rank + (i * 1000),
                                           NULL,
                                           NULL,
                                           ddb.condition_val,
                                           NULL,
                                           NULL,
                                           dd.data_source,
                                           dd.data_source_val,
                                           NULL)
                  BULK COLLECT
                  INTO l_tab_result_data_aux
                  FROM (SELECT data_source, data_source_val
                          FROM (SELECT t.*
                                  FROM (SELECT CASE
                                                    WHEN l_count_result_hist = 1
                                                         OR i = l_count_result_hist THEN
                                                     ' '
                                                    ELSE
                                                     NULL
                                                END AS title,
                                               CASE
                                                    WHEN l_count_result_hist > 1
                                                         AND i < l_count_result_hist THEN
                                                     ' '
                                                    ELSE
                                                     NULL
                                                END AS title_update,
                                               l_exam_result_hist(i).desc_exam exam_desc,
                                               l_exam_result_hist(i).abnormality_level abnormality_level,
                                               l_exam_result_hist(i).result_origin result_origin,
                                               l_exam_result_hist(i).result_origin_notes result_origin_notes,
                                               l_exam_result_hist(i).result_status result_status,
                                               l_exam_result_hist(i).desc_relevant desc_relevant,
                                               ' ' notes,
                                               l_exam_result_hist(i).cancel_reason cancel_reason,
                                               l_exam_result_hist(i).notes_cancel notes_cancel,
                                               l_exam_result_hist(i).registry AS registry,
                                               ' ' white_line
                                          FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                                 title_update,
                                                                                                                 exam_desc,
                                                                                                                 abnormality_level,
                                                                                                                 result_origin,
                                                                                                                 result_origin_notes,
                                                                                                                 result_status,
                                                                                                                 desc_relevant,
                                                                                                                 notes,
                                                                                                                 cancel_reason,
                                                                                                                 notes_cancel,
                                                                                                                 registry,
                                                                                                                 white_line))) dd
                  JOIN dd_block ddb
                    ON ddb.area = l_area
                   AND ddb.internal_name = 'EXAM_RESULT'
                   AND ddb.flg_available = pk_alert_constant.g_yes;
            
                FOR j IN l_tab_result_data_aux.first .. l_tab_result_data_aux.last
                LOOP
                    l_tab_result_data.extend();
                    l_tab_result_data(l_tab_result_data.count()) := l_tab_result_data_aux(j);
                END LOOP;
            END LOOP;
        
            --EXAM_RESULT_IMAGES
            g_error              := 'CALLING TF_GET_EXAM_RESULT_IMAGES_HISTORY';
            l_exam_result_images := tf_get_exam_result_images_history(i_lang             => i_lang,
                                                                      i_prof             => i_prof,
                                                                      i_episode          => i_episode,
                                                                      i_exam_req_det     => i_exam_req_det,
                                                                      i_flg_report       => pk_alert_constant.g_no,
                                                                      i_flg_html         => pk_alert_constant.g_yes,
                                                                      i_aa_code_messages => aa_code_messages);
        
            IF l_exam_result_images.count > 0
            THEN
                FOR j IN l_exam_result_hist.first .. l_exam_result_hist.last
                LOOP
                    FOR i IN l_exam_result_images.first .. l_exam_result_images.last
                    LOOP
                        IF l_exam_result_images(i).id_exam_result = l_exam_result_hist(j).id_exam_result
                        THEN
                            IF l_exam_result_images(i).dt_last_update <= l_exam_result_hist(j).dt_last_update
                            THEN
                                IF l_exam_result_images(i).id_exam_result <> l_id_exam_result
                                    OR l_id_exam_result IS NULL
                                THEN
                                    l_result_index   := l_result_index + 1;
                                    l_id_exam_result := l_exam_result_images(i).id_exam_result;
                                END IF;
                            
                                SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                                           ddb.rank + (j * 1000) + (i * 100),
                                                           NULL,
                                                           NULL,
                                                           ddb.condition_val,
                                                           NULL,
                                                           NULL,
                                                           dd.data_source,
                                                           dd.data_source_val,
                                                           NULL)
                                  BULK COLLECT
                                  INTO l_tab_result_images_data_aux
                                  FROM (SELECT data_source, data_source_val
                                          FROM (SELECT t.*
                                                  FROM (SELECT l_exam_result_images(i).doc_title doc_title,
                                                               l_exam_result_images(i).doc_original_type doc_original_type,
                                                               l_exam_result_images(i).dt_doc dt_doc,
                                                               l_exam_result_images(i).perform_by perform_by,
                                                               l_exam_result_images(i).num_img num_img,
                                                               l_exam_result_images(i).doc_original_desc doc_original_desc,
                                                               l_exam_result_images(i).doc_original_destination doc_original_destination,
                                                               l_exam_result_images(i).notes doc_notes,
                                                               l_exam_result_hist(j).registry doc_registry,
                                                               ' ' doc_white_line
                                                          FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(doc_title,
                                                                                                                                 doc_original_type,
                                                                                                                                 dt_doc,
                                                                                                                                 perform_by,
                                                                                                                                 num_img,
                                                                                                                                 doc_original_desc,
                                                                                                                                 doc_original_destination,
                                                                                                                                 doc_notes,
                                                                                                                                 doc_registry,
                                                                                                                                 doc_white_line))) dd
                                  JOIN dd_block ddb
                                    ON ddb.area = l_area
                                   AND ddb.internal_name = 'EXAM_RESULT'
                                   AND ddb.flg_available = pk_alert_constant.g_yes;
                            
                                FOR j IN l_tab_result_images_data_aux.first .. l_tab_result_images_data_aux.last
                                LOOP
                                    l_tab_result_images_data.extend();
                                    l_tab_result_images_data(l_tab_result_images_data.count()) := l_tab_result_images_data_aux(j);
                                END LOOP;
                            END IF;
                        END IF;
                    END LOOP;
                END LOOP;
            END IF;
        END IF;
    
        --EXAM DOCUMENTS
        g_error    := 'CALLING TF_GET_EXAM_DOC';
        l_exam_doc := pk_exam_core.tf_get_exam_doc_history(i_lang             => i_lang,
                                                           i_prof             => i_prof,
                                                           i_episode          => i_episode,
                                                           i_exam_req_det     => i_exam_req_det,
                                                           i_flg_report       => pk_alert_constant.g_no,
                                                           i_flg_html         => pk_alert_constant.g_yes,
                                                           i_aa_code_messages => aa_code_messages);
    
        IF l_exam_doc.count > 0
        THEN
            FOR i IN l_exam_doc.first .. l_exam_doc.last
            LOOP
                SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                           ddb.rank + (i * 1000),
                                           NULL,
                                           NULL,
                                           ddb.condition_val,
                                           NULL,
                                           NULL,
                                           dd.data_source,
                                           dd.data_source_val,
                                           NULL)
                  BULK COLLECT
                  INTO l_tab_doc_data_aux
                  FROM (SELECT data_source, data_source_val
                          FROM (SELECT t.*
                                  FROM (SELECT ' ' AS title,
                                               l_exam_doc(i).doc_title doc_title,
                                               l_exam_doc(i).doc_original_type doc_original_type,
                                               l_exam_doc(i).desc_status doc_status,
                                               l_exam_doc(i).dt_doc dt_doc,
                                               l_exam_doc(i).perform_by perform_by,
                                               l_exam_doc(i).num_img num_img,
                                               l_exam_doc(i).doc_original_desc doc_original_desc,
                                               l_exam_doc(i).doc_original_destination doc_original_destination,
                                               l_exam_doc(i).notes doc_notes,
                                               l_exam_doc(i).registry registry,
                                               ' ' white_line
                                          FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                                 doc_title,
                                                                                                                 doc_original_type,
                                                                                                                 doc_status,
                                                                                                                 dt_doc,
                                                                                                                 perform_by,
                                                                                                                 num_img,
                                                                                                                 doc_original_desc,
                                                                                                                 doc_original_destination,
                                                                                                                 doc_notes,
                                                                                                                 registry,
                                                                                                                 white_line))) dd
                  JOIN dd_block ddb
                    ON ddb.area = l_area
                   AND ddb.internal_name = 'EXAM_DOCUMENT'
                   AND ddb.flg_available = pk_alert_constant.g_yes;
            
                FOR j IN l_tab_doc_data_aux.first .. l_tab_doc_data_aux.last
                LOOP
                    l_tab_doc_data.extend();
                    l_tab_doc_data(l_tab_doc_data.count()) := l_tab_doc_data_aux(j);
                END LOOP;
            END LOOP;
        END IF;
    
        --EXAM REVIEW
        g_error       := 'CALLING TF_GET_EXAM_REVIEW';
        l_exam_review := tf_get_exam_review_history(i_lang             => i_lang,
                                                    i_prof             => i_prof,
                                                    i_episode          => i_episode,
                                                    i_exam_req_det     => i_exam_req_det,
                                                    i_flg_report       => pk_alert_constant.g_no,
                                                    i_flg_html         => pk_alert_constant.g_yes,
                                                    i_aa_code_messages => aa_code_messages);
    
        IF l_exam_review.count > 0
        THEN
            SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                       ddb.rank,
                                       NULL,
                                       NULL,
                                       ddb.condition_val,
                                       NULL,
                                       NULL,
                                       dd.data_source,
                                       dd.data_source_val,
                                       NULL)
              BULK COLLECT
              INTO l_tab_review_data
              FROM (SELECT data_source, data_source_val
                      FROM (SELECT t.*
                              FROM (SELECT ' ' AS title,
                                           l_exam_review(1).desc_exam exam_desc,
                                           l_exam_review(1).review_notes review_notes,
                                           l_exam_review(1).registry AS registry,
                                           ' ' white_line
                                      FROM dual) t) unpivot include NULLS(data_source_val FOR data_source IN(title,
                                                                                                             exam_desc,
                                                                                                             review_notes,
                                                                                                             registry,
                                                                                                             white_line))) dd
              JOIN dd_block ddb
                ON ddb.area = l_area
               AND ddb.internal_name = 'EXAM_REVIEW'
               AND ddb.flg_available = pk_alert_constant.g_yes;
        END IF;
    
        SELECT t_rec_dd_data(CASE
                                  WHEN data_code_message IS NOT NULL THEN
                                   pk_message.get_message(i_lang => i_lang, i_code_mess => data_code_message)
                                  ELSE
                                   NULL
                              END,
                              CASE
                                  WHEN flg_type = 'L1' THEN
                                   NULL
                                  ELSE
                                   data_source_val
                              END,
                              flg_type,
                              flg_html,
                              val_clob,
                              flg_clob),
               data_source
          BULK COLLECT
          INTO l_tab_dd_data, l_data_source_list
          FROM (SELECT ddc.data_code_message,
                       flg_type,
                       data_source_val,
                       ddc.data_source,
                       db.rnk,
                       ddc.rank,
                       db.id_dd_block,
                       flg_html,
                       NULL val_clob,
                       flg_clob
                  FROM TABLE(l_tab_order_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = 'EXAMS'
                   AND ddc.id_dd_block = 1
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N'))
                UNION ALL
                --clinical questions
                SELECT ddc.data_code_message,
                       ddc.flg_type,
                       NULL,
                       ddc.data_source,
                       (db.rank * tt.rn),
                       ddc.rank,
                       db.id_dd_block,
                       flg_html,
                       tt.column_value val_clob,
                       flg_clob
                  FROM (SELECT column_value, rownum AS rn
                          FROM TABLE(l_clinical_questions) t) tt
                  JOIN dd_block db
                    ON db.area = 'EXAMS'
                   AND db.internal_name = 'ORDER'
                  JOIN dd_content ddc
                    ON ddc.area = db.area
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.id_dd_block = 1
                   AND ddc.internal_name = 'CLINICAL_QUESTIONS'
                 WHERE db.area = 'EXAMS'
                   AND l_count_cq > 0
                --CO_SIGN
                UNION ALL
                SELECT /*+opt_estimate (table db rows=1)*/
                 ddc.data_code_message,
                 flg_type,
                 data_source_val,
                 ddc.data_source,
                 db.rnk,
                 ddc.rank,
                 db.id_dd_block,
                 flg_html,
                 CASE
                     WHEN ddc.flg_clob = pk_alert_constant.g_yes THEN
                      l_co_sign_notes
                 END val_clob,
                 flg_clob
                  FROM TABLE(l_tab_co_sign_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = l_area
                   AND ddc.id_dd_block = 2
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N'))
                --PERFORM
                UNION ALL
                SELECT /*+opt_estimate (table db rows=1)*/
                 ddc.data_code_message,
                 flg_type,
                 data_source_val,
                 ddc.data_source,
                 db.rnk,
                 ddc.rank,
                 db.id_dd_block,
                 flg_html,
                 CASE
                     WHEN ddc.flg_clob = pk_alert_constant.g_yes THEN
                      t_notes.column_value
                 END val_clob,
                 flg_clob
                  FROM (SELECT /*+opt_estimate (table t rows=1)*/
                         t.*, row_number() over(PARTITION BY t.data_source ORDER BY t.rnk) AS rn
                          FROM TABLE(l_tab_perform_data) t) db
                  LEFT JOIN (SELECT /*+opt_estimate (table t rows=1)*/
                             t.column_value, rownum AS rn
                              FROM TABLE(l_tbl_perform_notes) t) t_notes
                    ON t_notes.rn = db.rn
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = l_area
                   AND ddc.id_dd_block = 3
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N'))
                --RESULT
                UNION ALL (SELECT ddc.data_code_message,
                                 flg_type,
                                 data_source_val,
                                 ddc.data_source,
                                 db.rnk,
                                 ddc.rank,
                                 db.id_dd_block,
                                 flg_html,
                                 CASE
                                      WHEN ddc.flg_clob = pk_alert_constant.g_yes THEN
                                       t_notes.column_value
                                  END val_clob,
                                 flg_clob
                            FROM (SELECT /*+opt_estimate (table t rows=1)*/
                                   t.*, row_number() over(PARTITION BY t.data_source ORDER BY t.rnk) AS rn
                                    FROM TABLE(l_tab_result_data) t) db
                            LEFT JOIN (SELECT /*+opt_estimate (table t rows=1)*/
                                       t.column_value, rownum AS rn
                                        FROM TABLE(l_tbl_result_notes) t) t_notes
                              ON t_notes.rn = db.rn
                            JOIN dd_content ddc
                              ON ddc.data_source = db.data_source
                             AND ddc.flg_available = pk_alert_constant.g_yes
                             AND ddc.area = l_area
                             AND ddc.id_dd_block = 4
                           WHERE ddc.id_dd_block = db.id_dd_block
                             AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N'))
                          UNION ALL
                          SELECT /*+opt_estimate (table db rows=1)*/
                           ddc.data_code_message,
                           flg_type,
                           data_source_val,
                           ddc.data_source,
                           db.rnk,
                           ddc.rank,
                           db.id_dd_block,
                           flg_html,
                           NULL val_clob,
                           flg_clob
                            FROM TABLE(l_tab_result_images_data) db
                            JOIN dd_content ddc
                              ON ddc.data_source = db.data_source
                             AND ddc.flg_available = pk_alert_constant.g_yes
                             AND ddc.area = l_area
                             AND ddc.id_dd_block = 4
                           WHERE ddc.id_dd_block = db.id_dd_block
                             AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N')))
                --EXAM DOCUMENT
                UNION ALL
                SELECT /*+opt_estimate (table db rows=1)*/
                 ddc.data_code_message,
                 flg_type,
                 data_source_val,
                 ddc.data_source,
                 db.rnk,
                 ddc.rank,
                 db.id_dd_block,
                 flg_html,
                 NULL val_clob,
                 flg_clob
                  FROM TABLE(l_tab_doc_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = l_area
                   AND ddc.id_dd_block = 5
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N'))
                --EXAM_REVIEW
                UNION ALL
                SELECT /*+opt_estimate (table db rows=1)*/
                 ddc.data_code_message,
                 flg_type,
                 data_source_val,
                 ddc.data_source,
                 db.rnk,
                 ddc.rank,
                 db.id_dd_block,
                 flg_html,
                 NULL val_clob,
                 flg_clob
                  FROM TABLE(l_tab_review_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = l_area
                   AND ddc.id_dd_block = 7
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N')))
         ORDER BY id_dd_block, rnk, rank;
    
        g_error := 'OPEN O_DETAIL';
        OPEN o_detail FOR
            SELECT descr, val, flg_type, flg_html, val_clob, flg_clob
              FROM (SELECT CASE
                                WHEN d.val IS NULL THEN
                                 d.descr
                                WHEN d.descr IS NULL THEN
                                 NULL
                                ELSE
                                 d.descr || decode(d.flg_type, 'LP', NULL, ': ')
                            END descr,
                           d.val,
                           d.flg_type,
                           flg_html,
                           val_clob,
                           flg_clob,
                           d.rn
                      FROM (SELECT rownum rn, descr, val, flg_type, flg_html, val_clob, flg_clob
                              FROM TABLE(l_tab_dd_data)) d
                      JOIN (SELECT rownum rn, column_value data_source
                             FROM TABLE(l_data_source_list)) ds
                        ON ds.rn = d.rn);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_package_owner,
                                              i_package  => g_package_name,
                                              i_function => 'GET_EXAM_DETAIL_HISTORY',
                                              o_error    => o_error);
            pk_types.open_my_cursor(i_cursor => o_detail);
            RETURN FALSE;
    END get_exam_detail_history;

    FUNCTION get_exam_order
    (
        i_lang                    IN language.id_language%TYPE,
        i_prof                    IN profissional,
        i_episode                 IN episode.id_episode%TYPE,
        i_exam_req_det            IN exam_req_det.id_exam_req_det%TYPE,
        o_exam                    OUT pk_types.cursor_type,
        o_exam_clinical_questions OUT pk_types.cursor_type,
        o_error                   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        CURSOR c_schedule IS
            SELECT sg.flg_ref_type, sg.id_prof_ref, sg.id_inst_ref
              FROM sch_group sg, schedule_exam se
             WHERE sg.id_schedule = se.id_schedule;
    
        l_msg_date sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAM_REQ_M002');
    
        l_health_insurance sys_config.value%TYPE := pk_sysconfig.get_config('MCDT_HEALTH_INSURANCE', i_prof);
        l_dbc              sys_config.value%TYPE := pk_sysconfig.get_config('MCDT_DBC', i_prof);
    
        l_schedule c_schedule%ROWTYPE;
    
    BEGIN
    
        g_error := 'OPEN C_SCHEDULE';
        OPEN c_schedule;
        FETCH c_schedule
            INTO l_schedule;
        CLOSE c_schedule;
    
        g_error := 'OPEN O_EXAM';
        OPEN o_exam FOR
            WITH cso_table AS
             (SELECT *
                FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                    i_prof,
                                                                    i_episode,
                                                                    NULL,
                                                                    NULL,
                                                                    NULL,
                                                                    i_exam_req_det))),
            pregnancy AS
             (SELECT *
                FROM TABLE(pk_pregnancy_exam.tf_get_pregn_result_det(i_lang, i_prof, i_exam_req_det)))
            SELECT /*+ opt_estimate(table p rows=1) opt_estimate(table cso rows=2) opt_estimate(table csc rows=2) */
             er.id_patient,
             erd.id_exam_req_det,
             pk_date_utils.date_char_tsz(i_lang, er.dt_req_tstz, i_prof.institution, i_prof.software) dt_reg,
             pk_prof_utils.get_name_signature(i_lang, i_prof, er.id_prof_req) prof_reg,
             pk_prof_utils.get_spec_signature(i_lang, i_prof, er.id_prof_req, er.dt_req_tstz, er.id_episode) prof_spec_reg,
             pk_exam_utils.get_alias_translation(i_lang, i_prof, e.code_exam, NULL) desc_exam,
             erd.id_exam_req num_order,
             pk_diagnosis.concat_diag(i_lang, erd.id_exam_req_det, NULL, NULL, i_prof) desc_diagnosis,
             decode(erd.id_clinical_purpose,
                    0,
                    erd.clinical_purpose_notes,
                    pk_translation.get_translation(i_lang,
                                                   'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                   erd.id_clinical_purpose)) clinical_purpose,
             pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LATERALITY', erd.flg_laterality, i_lang) laterality,
             pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.PRIORITY', er.priority, NULL) priority,
             decode(erd.flg_referral,
                    pk_exam_constant.g_flg_referral_r,
                    pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL', erd.flg_referral, i_lang),
                    pk_exam_constant.g_flg_referral_s,
                    pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL', erd.flg_referral, i_lang),
                    pk_exam_constant.g_flg_referral_i,
                    pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL', erd.flg_referral, i_lang),
                    pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ_DET.FLG_STATUS', erd.flg_status, NULL)) desc_status,
             pk_api_order_sets.get_order_set_title(i_lang,
                                                   i_prof,
                                                   erd.id_exam_req_det,
                                                   decode(e.flg_type,
                                                          pk_exam_constant.g_type_img,
                                                          pk_order_sets.g_odst_task_image_exam,
                                                          pk_exam_constant.g_type_exm,
                                                          pk_order_sets.g_odst_task_other_exam)) title_order_set,
             pk_tde_db.get_task_depend_str(i_lang, i_prof, erd.id_task_dependency) task_depend,
             decode(er.flg_time,
                    pk_exam_constant.g_flg_time_e,
                    pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                    decode(erd.dt_target_tstz,
                           NULL,
                           decode(er.dt_schedule_tstz,
                                  NULL,
                                  '',
                                  ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                      er.dt_schedule_tstz,
                                                                      i_prof.institution,
                                                                      i_prof.software) || l_msg_date || ')'),
                           ' (' ||
                           pk_date_utils.date_char_tsz(i_lang, erd.dt_target_tstz, i_prof.institution, i_prof.software) || ')'),
                    pk_exam_constant.g_flg_time_b,
                    pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                    decode(erd.dt_target_tstz,
                           NULL,
                           decode(er.dt_schedule_tstz,
                                  NULL,
                                  '',
                                  '; ' || pk_date_utils.date_char_tsz(i_lang,
                                                                      er.dt_schedule_tstz,
                                                                      i_prof.institution,
                                                                      i_prof.software) || ' ' || l_msg_date),
                           ' (' ||
                           pk_date_utils.date_char_tsz(i_lang, erd.dt_target_tstz, i_prof.institution, i_prof.software) || ')'),
                    pk_exam_constant.g_flg_time_d,
                    pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                    decode(erd.dt_target_tstz,
                           NULL,
                           decode(er.dt_schedule_tstz,
                                  NULL,
                                  '',
                                  '; ' || pk_date_utils.date_char_tsz(i_lang,
                                                                      er.dt_schedule_tstz,
                                                                      i_prof.institution,
                                                                      i_prof.software) || ' ' || l_msg_date),
                           ' (' ||
                           pk_date_utils.date_char_tsz(i_lang, erd.dt_target_tstz, i_prof.institution, i_prof.software) || ')'),
                    pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL)) desc_time,
             pk_date_utils.date_char_tsz(i_lang, erd.dt_final_target_tstz, i_prof.institution, i_prof.software) desc_time_limit,
             pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang, i_prof, erd.id_order_recurrence) order_recurrence,
             p.weeks_pregnant,
             p.trimester,
             pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_PRN', erd.flg_prn, i_lang) prn,
             erd.prn_notes notes_prn,
             pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_FASTING', erd.flg_fasting, i_lang) fasting,
             erd.notes_patient notes_patient,
             decode(erd.flg_location,
                    pk_exam_constant.g_exam_location_interior,
                    decode(erd.id_room,
                           NULL,
                           pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION', erd.flg_location, i_lang),
                           pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION', erd.flg_location, i_lang) || ' - ' ||
                           nvl((SELECT r.desc_room
                                 FROM room r
                                WHERE r.id_room = erd.id_room),
                               pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || erd.id_room))),
                    decode(erd.id_exec_institution,
                           NULL,
                           pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION', erd.flg_location, i_lang),
                           pk_translation.get_translation(i_lang,
                                                          'AB_INSTITUTION.CODE_INSTITUTION.' || erd.id_exec_institution))) perform_location,
             erd.notes_scheduler notes_scheduler,
             erd.notes_tech notes_technician,
             erd.notes notes,
             cso.desc_prof_ordered_by prof_order,
             pk_date_utils.date_char_tsz(i_lang, cso.dt_ordered_by, i_prof.institution, i_prof.software) dt_order,
             cso.desc_order_type order_type,
             decode(l_health_insurance,
                    pk_exam_constant.g_no,
                    NULL,
                    pk_adt.get_pat_health_plan_info(i_lang, i_prof, erd.id_pat_health_plan, 'F')) financial_entity,
             decode(l_health_insurance,
                    pk_exam_constant.g_no,
                    NULL,
                    pk_adt.get_pat_health_plan_info(i_lang, i_prof, erd.id_pat_health_plan, 'H')) health_plan,
             decode(l_health_insurance,
                    pk_exam_constant.g_no,
                    NULL,
                    pk_adt.get_pat_health_plan_info(i_lang, i_prof, erd.id_pat_health_plan, 'N')) insurance_number,
             decode(l_health_insurance,
                    pk_exam_constant.g_no,
                    NULL,
                    pk_adt.get_pat_exemption_detail(i_lang, i_prof, erd.id_pat_exemption)) exemption,
             decode(l_dbc,
                    pk_exam_constant.g_no,
                    NULL,
                    pk_sysdomain.get_domain('SCH_GROUP.FLG_REF_TYPE', l_schedule.flg_ref_type, i_lang)) ref_type,
             decode(l_dbc,
                    pk_exam_constant.g_no,
                    NULL,
                    decode(l_schedule.id_prof_ref,
                           NULL,
                           pk_translation.get_translation(i_lang,
                                                          'AB_INSTITUTION.CODE_INSTITUTION.' || l_schedule.id_inst_ref),
                           pk_prof_utils.get_name_signature(i_lang, i_prof, l_schedule.id_prof_ref))) referrer,
             pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, erd.id_cancel_reason) cancel_reason,
             erd.notes_cancel cancel_notes,
             csc.desc_prof_ordered_by cancel_prof_order,
             pk_date_utils.date_char_tsz(i_lang, csc.dt_ordered_by, i_prof.institution, i_prof.software) cancel_dt_order,
             csc.desc_order_type cancel_order_type,
             pk_date_utils.date_send_tsz(i_lang, er.dt_req_tstz, i_prof) dt_ord
              FROM exam_req_det erd, exam_req er, exam e, pregnancy p, cso_table cso, cso_table csc
             WHERE erd.id_exam_req_det = i_exam_req_det
               AND erd.id_exam_req = er.id_exam_req
               AND erd.id_exam = e.id_exam
               AND erd.id_pat_pregnancy = p.id_pat_pregnancy(+)
               AND erd.id_co_sign_order = cso.id_co_sign_hist(+)
               AND erd.id_co_sign_cancel = csc.id_co_sign_hist(+);
    
        g_error := 'OPEN O_EXAM_CLINICAL_QUESTIONS';
        OPEN o_exam_clinical_questions FOR
            SELECT id_exam_req_det, desc_clinical_question, to_clob(desc_response) desc_response
              FROM (SELECT DISTINCT eqr1.id_exam_req_det,
                                    pk_mcdt.get_questionnaire_alias(i_lang,
                                                                    i_prof,
                                                                    'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' ||
                                                                    eqr1.id_questionnaire) desc_clinical_question,
                                    dbms_lob.substr(decode(dbms_lob.getlength(eqr.notes),
                                                           NULL,
                                                           to_clob(decode(eqr1.desc_response,
                                                                          NULL,
                                                                          '---',
                                                                          eqr1.desc_response)),
                                                           pk_exam_utils.get_exam_response(i_lang, i_prof, eqr.notes)),
                                                    3800) desc_response,
                                    pk_exam_utils.get_exam_questionnaire_rank(i_lang,
                                                                              i_prof,
                                                                              erd.id_exam,
                                                                              eqr.id_questionnaire,
                                                                              eqr.flg_time) rank
                      FROM (SELECT eqr.id_exam_req_det,
                                   eqr.id_questionnaire,
                                   listagg(pk_mcdt.get_response_alias(i_lang,
                                                                      i_prof,
                                                                      'RESPONSE.CODE_RESPONSE.' || eqr.id_response),
                                           '; ') within GROUP(ORDER BY eqr.id_response) desc_response,
                                   eqr.dt_last_update_tstz,
                                   row_number() over(PARTITION BY eqr.id_questionnaire ORDER BY eqr.dt_last_update_tstz DESC NULLS FIRST) rn
                              FROM exam_question_response eqr
                             WHERE eqr.id_exam_req_det = i_exam_req_det
                               AND eqr.flg_time = pk_exam_constant.g_exam_cq_on_order
                             GROUP BY eqr.id_exam_req_det, eqr.id_questionnaire, eqr.dt_last_update_tstz) eqr1,
                           exam_question_response eqr,
                           exam_req_det erd
                     WHERE eqr1.rn = 1
                       AND eqr1.id_exam_req_det = eqr.id_exam_req_det
                       AND eqr1.id_questionnaire = eqr.id_questionnaire
                       AND eqr1.dt_last_update_tstz = eqr.dt_last_update_tstz
                       AND eqr.flg_time = pk_exam_constant.g_exam_cq_on_order
                       AND eqr.id_exam_req_det = erd.id_exam_req_det)
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_ORDER',
                                              o_error);
            pk_types.open_my_cursor(o_exam);
            pk_types.open_my_cursor(o_exam_clinical_questions);
            RETURN FALSE;
    END get_exam_order;

    FUNCTION get_exam_perform
    (
        i_lang                    IN language.id_language%TYPE,
        i_prof                    IN profissional,
        i_episode                 IN episode.id_episode%TYPE,
        i_exam_req_det            IN exam_req_det.id_exam_req_det%TYPE,
        o_exam                    OUT pk_types.cursor_type,
        o_exam_clinical_questions OUT pk_types.cursor_type,
        o_error                   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        TYPE t_code_messages IS TABLE OF VARCHAR2(1000 CHAR) INDEX BY sys_message.code_message%TYPE;
    
        aa_code_messages t_code_messages;
    
        va_code_messages table_varchar := table_varchar('EXAMS_T037',
                                                        'EXAMS_T077',
                                                        'EXAMS_T078',
                                                        'EXAMS_T079',
                                                        'EXAMS_T100');
    
        l_outp sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_OUTP', i_prof);
        l_care sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_CARE', i_prof);
        l_pp   sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_CLINICS', i_prof);
    
        l_epis_documentation NUMBER;
        l_notes1             CLOB;
        l_notes2             CLOB;
    
        l_cur_exam_time_out_val pk_touch_option_out.t_cur_plain_text_entry;
        l_exam_time_out_val     pk_touch_option_out.t_rec_plain_text_entry;
        l_cur_exam_doc_val      pk_touch_option_out.t_cur_plain_text_entry;
        l_exam_doc_val          pk_touch_option_out.t_rec_plain_text_entry;
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN va_code_messages.first .. va_code_messages.last
        LOOP
            aa_code_messages(va_code_messages(i)) := '<b>' ||
                                                     pk_message.get_message(i_lang, i_prof, va_code_messages(i)) ||
                                                     '</b> ';
        END LOOP;
    
        BEGIN
            SELECT ed.id_epis_documentation
              INTO l_epis_documentation
              FROM epis_documentation ed
             WHERE ed.id_episode = i_episode
               AND ed.id_doc_area = pk_exam_constant.g_doc_area_exam_time_out
               AND ed.id_epis_context = i_exam_req_det;
        
            g_error := 'CALL PK_TOUCH_OPTION_OUT.GET_PLAIN_TEXT_ENTRIES 1';
            pk_touch_option_out.get_plain_text_entries(i_lang                    => i_lang,
                                                       i_prof                    => i_prof,
                                                       i_epis_documentation_list => table_number(l_epis_documentation),
                                                       i_use_html_format         => pk_exam_constant.g_no,
                                                       o_entries                 => l_cur_exam_time_out_val);
        
            FETCH l_cur_exam_time_out_val
                INTO l_exam_time_out_val;
            CLOSE l_cur_exam_time_out_val;
        
            l_notes1 := REPLACE(l_exam_time_out_val.plain_text_entry, chr(10) || chr(10), chr(10));
            l_notes1 := REPLACE(l_notes1, chr(10), chr(10) || chr(9));
        EXCEPTION
            WHEN no_data_found THEN
                NULL;
        END;
    
        BEGIN
            SELECT eea.id_epis_doc_perform
              INTO l_epis_documentation
              FROM exams_ea eea
             WHERE eea.id_exam_req_det = i_exam_req_det;
        
            g_error := 'CALL PK_TOUCH_OPTION_OUT.GET_PLAIN_TEXT_ENTRIES 2';
            pk_touch_option_out.get_plain_text_entries(i_lang                    => i_lang,
                                                       i_prof                    => i_prof,
                                                       i_epis_documentation_list => table_number(l_epis_documentation),
                                                       i_use_html_format         => pk_exam_constant.g_no,
                                                       o_entries                 => l_cur_exam_doc_val);
        
            FETCH l_cur_exam_doc_val
                INTO l_exam_doc_val;
            CLOSE l_cur_exam_doc_val;
        
            l_notes2 := REPLACE(l_exam_doc_val.plain_text_entry, chr(10) || chr(10), chr(10));
            l_notes2 := REPLACE(l_notes2, chr(10), chr(10) || chr(9));
        EXCEPTION
            WHEN no_data_found THEN
                NULL;
        END;
    
        g_error := 'OPEN O_EXAM';
        OPEN o_exam FOR
            SELECT eea.id_patient,
                   eea.id_exam_req_det,
                   eea.id_exam,
                   erd.id_epis_doc_perform,
                   pk_date_utils.date_char_tsz(i_lang, erd.dt_performed_reg, i_prof.institution, i_prof.software) dt_reg,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, erd.id_prof_performed_reg) prof_reg,
                   pk_prof_utils.get_spec_signature(i_lang,
                                                    i_prof,
                                                    erd.id_prof_performed_reg,
                                                    erd.dt_performed_reg,
                                                    eea.id_episode) prof_spec_reg,
                   decode(eea.id_prof_performed,
                          NULL,
                          pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || eea.id_exam, NULL),
                          aa_code_messages('EXAMS_T037') ||
                          pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || eea.id_exam, NULL)) desc_exam,
                   eea.id_prof_performed id_prof_performed,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, eea.id_prof_performed) prof_performed_desc,
                   decode(eea.id_prof_performed,
                          NULL,
                          NULL,
                          aa_code_messages('EXAMS_T077') ||
                          pk_prof_utils.get_name_signature(i_lang, i_prof, eea.id_prof_performed)) prof_perform,
                   decode(erd.start_time,
                           NULL,
                           NULL,
                           CASE
                               WHEN i_prof.software IN (l_outp, l_care, l_pp)
                                    AND eea.flg_time = pk_exam_constant.g_flg_time_r THEN
                                CASE
                                    WHEN eea.start_time IN
                                         (SELECT e.start_time
                                            FROM exams_ea e
                                           WHERE pk_date_utils.dt_chr_tsz(i_lang, eea.start_time, i_prof.institution, i_prof.software) =
                                                 pk_date_utils.dt_chr_tsz(i_lang, e.start_time, i_prof.institution, i_prof.software)) THEN
                                     aa_code_messages('EXAMS_T078') ||
                                     pk_date_utils.date_char_tsz(i_lang, eea.start_time, i_prof.institution, i_prof.software)
                                    ELSE
                                     NULL
                                END
                               ELSE
                                aa_code_messages('EXAMS_T078') ||
                                pk_date_utils.date_char_tsz(i_lang, eea.start_time, i_prof.institution, i_prof.software)
                           END) dt_perform,
                   decode(erd.start_time,
                           NULL,
                           NULL,
                           CASE
                               WHEN i_prof.software IN (l_outp, l_care, l_pp)
                                    AND eea.flg_time = pk_exam_constant.g_flg_time_r THEN
                                CASE
                                    WHEN eea.start_time IN
                                         (SELECT e.start_time
                                            FROM exams_ea e
                                           WHERE pk_date_utils.dt_chr_tsz(i_lang, eea.start_time, i_prof.institution, i_prof.software) =
                                                 pk_date_utils.dt_chr_tsz(i_lang, e.start_time, i_prof.institution, i_prof.software)) THEN
                                     pk_date_utils.date_send_tsz(i_lang, eea.start_time, i_prof)
                                    ELSE
                                     NULL
                                END
                               ELSE
                                pk_date_utils.date_send_tsz(i_lang, eea.start_time, i_prof)
                           END) dt_perform_reg,
                   decode(pk_supplies_external_api_db.get_supplies_request(i_lang, i_prof, i_exam_req_det, eea.flg_type),
                          NULL,
                          NULL,
                          aa_code_messages('EXAMS_T079') ||
                          pk_supplies_external_api_db.get_supplies_request(i_lang, i_prof, i_exam_req_det, eea.flg_type)) desc_supplies,
                   decode(pk_supplies_external_api_db.get_supplies_request(i_lang, i_prof, i_exam_req_det, eea.flg_type),
                          NULL,
                          NULL,
                          pk_supplies_external_api_db.get_supplies_request(i_lang, i_prof, i_exam_req_det, eea.flg_type)) desc_supplies_reg,
                   decode(dbms_lob.getlength(l_notes1), NULL, to_clob(''), l_notes1) desc_time_out,
                   decode(dbms_lob.getlength(l_notes2),
                          NULL,
                          to_clob(''),
                          decode(instr(lower(l_notes2), '<b>'),
                                 0,
                                 to_clob(aa_code_messages('EXAMS_T100')) || l_notes2,
                                 l_notes2)) desc_perform,
                   pk_touch_option.get_doc_template_internal(i_lang,
                                                             i_prof,
                                                             NULL,
                                                             eea.id_episode,
                                                             pk_exam_constant.g_doc_area_exam,
                                                             eea.id_exam) id_doc_template,
                   decode(eqbe.id_exam,
                          NULL,
                          pk_exam_constant.g_no,
                          decode((SELECT 1
                                   FROM exam_question_response eqr
                                  WHERE eqr.id_exam_req_det = erd.id_exam_req_det
                                    AND eqr.flg_time = pk_exam_constant.g_exam_cq_before_execute
                                    AND rownum = 1),
                                 1,
                                 pk_exam_constant.g_no,
                                 pk_exam_constant.g_yes)) flg_clinical_question_be,
                   decode(eqae.id_exam,
                          NULL,
                          pk_exam_constant.g_no,
                          decode((SELECT 1
                                   FROM exam_question_response eqr
                                  WHERE eqr.id_exam_req_det = erd.id_exam_req_det
                                    AND eqr.flg_time = pk_exam_constant.g_exam_cq_after_execute
                                    AND rownum = 1),
                                 1,
                                 pk_exam_constant.g_no,
                                 pk_exam_constant.g_yes)) flg_clinical_question_ae_exec,
                   decode(eqae.id_exam,
                          NULL,
                          pk_exam_constant.g_no,
                          decode((SELECT 1
                                   FROM exam_question_response eqr
                                  WHERE eqr.id_exam_req_det = erd.id_exam_req_det
                                    AND eqr.flg_time = pk_exam_constant.g_exam_cq_after_execute
                                    AND rownum = 1),
                                 1,
                                 pk_exam_constant.g_yes,
                                 pk_exam_constant.g_no)) flg_clinical_question_ae_edit,
                   pk_exam_utils.get_exam_permission(i_lang,
                                                     i_prof,
                                                     pk_exam_constant.g_exam_area_perform,
                                                     pk_exam_constant.g_exam_button_ok,
                                                     eea.id_episode,
                                                     NULL,
                                                     eea.id_exam_req_det,
                                                     pk_exam_constant.g_yes) avail_button_create
              FROM exams_ea eea,
                   exam_req_det erd,
                   (SELECT DISTINCT id_exam
                      FROM exam_questionnaire
                     WHERE flg_time = pk_exam_constant.g_exam_cq_before_execute
                       AND id_institution = i_prof.institution
                       AND flg_available = pk_exam_constant.g_available) eqbe,
                   (SELECT DISTINCT id_exam
                      FROM exam_questionnaire
                     WHERE flg_time = pk_exam_constant.g_exam_cq_after_execute
                       AND id_institution = i_prof.institution
                       AND flg_available = pk_exam_constant.g_available) eqae
             WHERE eea.id_exam_req_det = i_exam_req_det
               AND eea.id_exam_req_det = erd.id_exam_req_det
               AND eea.id_exam = eqbe.id_exam(+)
               AND eea.id_exam = eqae.id_exam(+);
    
        g_error := 'OPEN O_EXAM_CLINICAL_QUESTIONS';
        OPEN o_exam_clinical_questions FOR
            SELECT id_exam_req_det, flg_time, dt_reg, prof_reg, prof_spec_reg, desc_clinical_question, desc_response
              FROM (SELECT DISTINCT eqr.id_exam_req_det,
                                    eqr.flg_time,
                                    pk_date_utils.date_char_tsz(i_lang,
                                                                eqr.dt_last_update_tstz,
                                                                i_prof.institution,
                                                                i_prof.software) dt_reg,
                                    pk_prof_utils.get_name_signature(i_lang, i_prof, eqr.id_prof_last_update) prof_reg,
                                    pk_prof_utils.get_spec_signature(i_lang,
                                                                     i_prof,
                                                                     eqr.id_prof_last_update,
                                                                     eqr.dt_last_update_tstz,
                                                                     eqr.id_episode) prof_spec_reg,
                                    '<b>' || pk_mcdt.get_questionnaire_alias(i_lang,
                                                                             i_prof,
                                                                             'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' ||
                                                                             eqr1.id_questionnaire) || ':</b>' desc_clinical_question,
                                    decode(dbms_lob.getlength(eqr.notes),
                                           NULL,
                                           decode(eqr1.desc_response, NULL, '---', eqr1.desc_response),
                                           dbms_lob.substr(pk_exam_utils.get_exam_response(i_lang, i_prof, eqr.notes),
                                                           3800)) desc_response,
                                    pk_exam_utils.get_exam_questionnaire_rank(i_lang,
                                                                              i_prof,
                                                                              erd.id_exam,
                                                                              eqr.id_questionnaire,
                                                                              eqr.flg_time) rank
                      FROM (SELECT eqr.id_exam_req_det,
                                   eqr.id_questionnaire,
                                   eqr.flg_time,
                                   listagg(pk_mcdt.get_response_alias(i_lang,
                                                                      i_prof,
                                                                      'RESPONSE.CODE_RESPONSE.' || eqr.id_response),
                                           '; ') within GROUP(ORDER BY eqr.id_response) desc_response
                              FROM exam_question_response eqr
                             WHERE eqr.id_exam_req_det = i_exam_req_det
                               AND eqr.flg_time IN
                                   (pk_exam_constant.g_exam_cq_before_execute, pk_exam_constant.g_exam_cq_after_execute)
                             GROUP BY eqr.id_exam_req_det, eqr.id_questionnaire, eqr.flg_time) eqr1,
                           exam_question_response eqr,
                           exam_req_det erd
                     WHERE eqr.id_exam_req_det = eqr1.id_exam_req_det
                       AND eqr.id_questionnaire = eqr1.id_questionnaire
                       AND eqr.flg_time = eqr1.flg_time
                       AND eqr.id_exam_req_det = erd.id_exam_req_det)
             ORDER BY flg_time, rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_PERFORM',
                                              o_error);
            pk_types.open_my_cursor(o_exam);
            pk_types.open_my_cursor(o_exam_clinical_questions);
            RETURN FALSE;
    END get_exam_perform;

    FUNCTION get_exam_result
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_exam_req_det IN table_number,
        o_exam         OUT pk_types.cursor_type,
        o_exam_result  OUT pk_types.cursor_type,
        o_exam_images  OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_path sys_config.value%TYPE := pk_sysconfig.get_config('URL_EXTERNAL_DOC', i_prof);
    
        l_msg_image1 sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T103');
        l_msg_image2 sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T104');
    
    BEGIN
    
        g_error := 'OPEN O_EXAM';
        OPEN o_exam FOR
            SELECT eea.id_exam_req_det,
                   pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || eea.id_exam, NULL) desc_exam,
                   eea.flg_status_det flg_status,
                   pk_exam_utils.get_exam_permission(i_lang,
                                                     i_prof,
                                                     pk_exam_constant.g_exam_area_exams,
                                                     pk_exam_constant.g_exam_button_ok,
                                                     eea.id_episode,
                                                     NULL,
                                                     eea.id_exam_req_det,
                                                     pk_exam_constant.g_yes) avail_button_create,
                   decode(eea.flg_status_det,
                          pk_exam_constant.g_exam_cancel,
                          pk_exam_constant.g_no,
                          pk_exam_constant.g_exam_pending,
                          pk_exam_constant.g_no,
                          pk_exam_constant.g_exam_exec,
                          pk_exam_constant.g_yes,
                          pk_exam_constant.g_exam_result,
                          pk_exam_utils.get_exam_permission(i_lang,
                                                            i_prof,
                                                            pk_exam_constant.g_exam_area_exams,
                                                            pk_exam_constant.g_exam_button_read,
                                                            eea.id_episode,
                                                            NULL,
                                                            eea.id_exam_req_det,
                                                            pk_exam_constant.g_yes),
                          pk_exam_constant.g_exam_read,
                          pk_exam_utils.get_exam_permission(i_lang,
                                                            i_prof,
                                                            pk_exam_constant.g_exam_area_exams,
                                                            pk_exam_constant.g_exam_button_read,
                                                            eea.id_episode,
                                                            NULL,
                                                            eea.id_exam_req_det,
                                                            pk_exam_constant.g_yes)) avail_button_ok,
                   decode(eea.id_external_sys, NULL, pk_exam_constant.g_no, pk_exam_constant.g_yes) avail_button_import,
                   nvl(eea.flg_result_notes, pk_exam_constant.g_no) flg_result_notes
              FROM (SELECT eea.id_exam_req_det,
                           eea.id_exam,
                           eea.flg_status_det,
                           eea.id_episode,
                           edcs.id_external_sys,
                           edcs.flg_result_notes
                      FROM exams_ea eea,
                           (SELECT *
                              FROM exam_dep_clin_serv
                             WHERE flg_type = pk_exam_constant.g_exam_can_req
                               AND id_institution = i_prof.institution
                               AND id_software = i_prof.software) edcs
                     WHERE eea.id_exam_req_det IN (SELECT /*+opt_estimate (table t rows=1)*/
                                                    *
                                                     FROM TABLE(i_exam_req_det) t)
                       AND eea.id_exam = edcs.id_exam(+)) eea;
    
        g_error := 'OPEN O_EXAM_RESULT';
        OPEN o_exam_result FOR
            SELECT er.id_exam_result,
                   er.id_exam_req_det,
                   decode(er.id_result_status, 2, pk_exam_constant.g_exam_cancel) flg_status,
                   pk_date_utils.date_char_tsz(i_lang, er.dt_exam_result_tstz, i_prof.institution, i_prof.software) dt_reg,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, er.id_professional) prof_reg,
                   decode(pk_prof_utils.get_spec_signature(i_lang,
                                                           i_prof,
                                                           er.id_professional,
                                                           er.dt_exam_result_tstz,
                                                           er.id_episode),
                          NULL,
                          NULL,
                          '(' || pk_prof_utils.get_spec_signature(i_lang,
                                                                  i_prof,
                                                                  er.id_professional,
                                                                  er.dt_exam_result_tstz,
                                                                  er.id_episode) || ')') prof_spec_reg,
                   er.flg_result_origin,
                   pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_RESULT.FLG_RESULT_ORIGIN', er.flg_result_origin, NULL) result_origin,
                   er.result_origin_notes,
                   er.id_result_status,
                   pk_translation.get_translation(i_lang,
                                                  'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' || er.id_result_status) result_status,
                   er.id_abnormality,
                   pk_translation.get_translation(i_lang, 'ABNORMALITY.SHORT_CODE_ABNORMALITY.' || er.id_abnormality) abnormality_level,
                   er.flg_relevant,
                   pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_RESULT.FLG_RELEVANT', er.flg_relevant, NULL) desc_relevant,
                   er.id_epis_documentation,
                   pk_touch_option.get_doc_template_internal(i_lang,
                                                             i_prof,
                                                             NULL,
                                                             er.id_episode,
                                                             pk_exam_constant.g_doc_area_exam_result,
                                                             er.id_exam) id_doc_template_result,
                   pk_exam_utils.get_exam_result_notes(i_lang,
                                                       i_prof,
                                                       NULL,
                                                       pk_exam_constant.g_no,
                                                       er.id_epis_documentation) notes,
                   pk_translation.get_translation(i_lang, 'RESULT_NOTES.CODE_RESULT_NOTES.' || er.id_result_notes) desc_result_notes,
                   er.notes_result,
                   pk_diagnosis.concat_diag(i_lang, NULL, NULL, NULL, i_prof, NULL, er.id_exam_result) desc_result_diagnosis,
                   pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, er.id_cancel_reason) cancel_reason,
                   er.notes_cancel,
                   pk_date_utils.date_send_tsz(i_lang, er.dt_exam_result_tstz, i_prof) dt_ord
              FROM exam_result er
             WHERE er.id_exam_req_det IN (SELECT /*+opt_estimate (table t rows=1)*/
                                           *
                                            FROM TABLE(i_exam_req_det) t)
             ORDER BY dt_ord DESC;
    
        g_error := 'OPEN O_EXAM_IMAGES';
        OPEN o_exam_images FOR
            SELECT id_exam_result,
                   id_exam_req_det,
                   NULL id_doc_external,
                   NULL id_doc_type,
                   l_msg_image1 doc_title,
                   id_professional id_prof_perform_by,
                   pk_prof_utils.get_nickname(i_lang, id_professional) perform_by,
                   pk_date_utils.date_send_tsz(i_lang, dt_exam_result_tstz, i_prof) dt_doc_str,
                   pk_date_utils.dt_chr_tsz(i_lang, dt_exam_result_tstz, i_prof) dt_doc,
                   NULL id_doc_destination,
                   NULL doc_original_destination,
                   NULL id_doc_original_type,
                   NULL doc_original_type,
                   NULL num_img,
                   NULL id_doc_original,
                   NULL doc_original_desc,
                   NULL notes,
                   result_url thumbnail_img,
                   result_pdf thumbnail_report,
                   NULL thumbnail,
                   decode(result_url, pk_exam_constant.g_no, NULL, pk_exam_constant.g_exam_result_url) thumbnail_img_icon,
                   decode(result_pdf, pk_exam_constant.g_no, NULL, pk_exam_constant.g_exam_result_pdf) thumbnail_report_icon,
                   NULL thumbnail_icon,
                   pk_date_utils.date_send_tsz(i_lang, dt_exam_result_tstz, i_prof) dt_ord
              FROM (SELECT er.id_exam_result,
                           er.id_exam_req_det,
                           er.id_professional,
                           er.dt_exam_result_tstz,
                           er.result_url,
                           er.result_pdf
                      FROM (SELECT er.id_exam_result,
                                   er.id_exam_req_det,
                                   er.id_professional,
                                   er.dt_exam_result_tstz,
                                   (SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                             i_prof,
                                                                             er.id_exam_req_det,
                                                                             pk_exam_constant.g_exam_result_url)
                                      FROM dual) result_url,
                                   (SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                             i_prof,
                                                                             er.id_exam_req_det,
                                                                             pk_exam_constant.g_exam_result_pdf)
                                      FROM dual) result_pdf
                              FROM exam_result er
                             WHERE er.id_exam_req_det IN (SELECT /*+opt_estimate (table t rows=1)*/
                                                           *
                                                            FROM TABLE(i_exam_req_det) t)
                               AND er.flg_status != pk_exam_constant.g_exam_result_cancel
                               AND rownum > 0) er
                     WHERE er.result_url != pk_exam_constant.g_no
                        OR er.result_pdf != pk_exam_constant.g_no)
            UNION ALL
            SELECT er.id_exam_result,
                   er.id_exam_req_det,
                   ema.id_doc_external,
                   de.id_doc_type,
                   de.title doc_title,
                   de.id_prof_perf_by id_prof_perform_by,
                   de.desc_perf_by perform_by,
                   pk_date_utils.date_send_tsz(i_lang, de.dt_emited, i_prof) dt_doc_str,
                   pk_date_utils.dt_chr(i_lang, de.dt_emited, i_prof) dt_doc,
                   de.id_doc_destination,
                   decode(de.desc_doc_destination,
                          NULL,
                          pk_translation.get_translation(i_lang,
                                                         'DOC_TYPE.CODE_DOC_DESTINATION.' || de.id_doc_destination),
                          de.desc_doc_destination) doc_original_destination,
                   de.id_doc_ori_type id_doc_original_type,
                   decode(de.desc_doc_ori_type,
                          NULL,
                          pk_translation.get_translation(i_lang, 'DOC_ORI_TYPE.CODE_DOC_ORI_TYPE.' || de.id_doc_ori_type),
                          de.desc_doc_ori_type) doc_original_type,
                   pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external) num_img,
                   de.id_doc_original,
                   decode(de.desc_doc_original,
                          NULL,
                          pk_translation.get_translation(i_lang, 'DOC_ORIGINAL.CODE_DOC_ORIGINAL.' || de.id_doc_original),
                          de.desc_doc_original) doc_original_desc,
                   pk_doc.get_doc_last_comment(i_lang, i_prof, ema.id_doc_external) notes,
                   NULL thumbnail_img,
                   NULL thumbnail_report,
                   pk_doc.get_main_thumb_url(i_lang, i_prof, ema.id_doc_external) thumbnail,
                   NULL thumbnail_img_icon,
                   NULL thumbnail_report_icon,
                   to_char(pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external)) thumbnail_icon,
                   pk_date_utils.date_send_tsz(i_lang, er.dt_exam_result_tstz, i_prof) dt_ord
              FROM exam_result er, exam_media_archive ema, doc_external de
             WHERE er.id_exam_req_det IN (SELECT /*+opt_estimate (table t rows=1)*/
                                           *
                                            FROM TABLE(i_exam_req_det) t)
               AND er.flg_status != pk_exam_constant.g_exam_result_cancel
               AND er.id_exam_result = ema.id_exam_result
               AND ema.flg_type = pk_exam_constant.g_media_archive_exam_result
               AND ema.id_doc_external = de.id_doc_external
               AND de.flg_status = pk_alert_constant.g_active
            UNION ALL
            SELECT er.id_exam_result,
                   er.id_exam_req_det,
                   er.id_external_doc id_doc_external,
                   NULL id_doc_type,
                   l_msg_image2 || rownum doc_title,
                   er.id_professional id_prof_perform_by,
                   pk_prof_utils.get_nickname(i_lang, er.id_professional) perform_by,
                   pk_date_utils.date_send_tsz(i_lang, er.dt_exam_result_tstz, i_prof) dt_doc_str,
                   pk_date_utils.dt_chr_tsz(i_lang, er.dt_exam_result_tstz, i_prof) dt_doc,
                   NULL id_doc_destination,
                   NULL doc_original_destination,
                   NULL id_doc_original_type,
                   NULL doc_original_type,
                   NULL num_img,
                   NULL id_doc_original,
                   NULL doc_original_desc,
                   NULL notes,
                   NULL thumbnail_img,
                   NULL thumbnail_report,
                   l_path || id_external_doc thumbnail,
                   NULL thumbnail_img_icon,
                   NULL thumbnail_report_icon,
                   '1' thumbnail_icon,
                   pk_date_utils.date_send_tsz(i_lang, er.dt_exam_result_tstz, i_prof) dt_ord
              FROM exam_result er
             WHERE er.id_exam_req_det IN (SELECT /*+opt_estimate (table t rows=1)*/
                                           *
                                            FROM TABLE(i_exam_req_det) t)
               AND er.id_external_doc IS NOT NULL
               AND er.flg_status != pk_exam_constant.g_exam_result_cancel
             ORDER BY dt_ord DESC;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_RESULT',
                                              o_error);
            pk_types.open_my_cursor(o_exam);
            pk_types.open_my_cursor(o_exam_result);
            pk_types.open_my_cursor(o_exam_images);
            RETURN FALSE;
    END get_exam_result;

    FUNCTION get_exam_doc_associated
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_exam_req_det IN exam_req_det.id_exam_req_det%TYPE,
        o_exam_doc     OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        -- Obter detalhes
        g_error := 'OPEN O_EXAM_DOC';
        OPEN o_exam_doc FOR
            SELECT ema.id_exam_req_det,
                   ema.id_doc_external,
                   pk_date_utils.date_char_tsz(i_lang, de.dt_inserted, i_prof.institution, i_prof.software) dt_reg,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, de.id_professional) prof_reg,
                   pk_prof_utils.get_spec_signature(i_lang, i_prof, de.id_professional, de.dt_inserted, NULL) prof_spec_reg,
                   de.title doc_title,
                   decode(de.desc_doc_ori_type,
                          NULL,
                          pk_translation.get_translation(i_lang, 'DOC_ORI_TYPE.CODE_DOC_ORI_TYPE.' || de.id_doc_ori_type),
                          de.desc_doc_ori_type) doc_original_type,
                   pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', de.flg_status, i_lang) desc_status,
                   pk_date_utils.dt_chr(i_lang, de.dt_emited, i_prof) dt_doc,
                   de.desc_perf_by perform_by,
                   pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external) num_img,
                   decode(de.desc_doc_original,
                          NULL,
                          pk_translation.get_translation(i_lang, 'DOC_ORIGINAL.CODE_DOC_ORIGINAL.' || de.id_doc_original),
                          de.desc_doc_original) doc_original_desc,
                   decode(de.desc_doc_destination,
                          NULL,
                          pk_translation.get_translation(i_lang,
                                                         'DOC_TYPE.CODE_DOC_DESTINATION.' || de.id_doc_destination),
                          de.desc_doc_destination) doc_original_destination,
                   pk_doc.get_doc_last_comment(i_lang, i_prof, ema.id_doc_external) notes,
                   pk_doc.get_main_thumb_url(i_lang, i_prof, ema.id_doc_external) thumbnail,
                   pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external) thumbnail_icon
              FROM exam_media_archive ema, doc_external de
             WHERE ema.id_exam_req_det = i_exam_req_det
               AND ema.flg_type = pk_exam_constant.g_media_archive_exam_doc
               AND ema.flg_status = pk_exam_constant.g_active
               AND ema.id_doc_external = de.id_doc_external
             ORDER BY de.flg_status, de.dt_inserted DESC;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_DOC_ASSOCIATED',
                                              o_error);
            pk_types.open_my_cursor(o_exam_doc);
            RETURN FALSE;
    END get_exam_doc_associated;

    FUNCTION get_exam_to_edit
    (
        i_lang                    IN language.id_language%TYPE,
        i_prof                    IN profissional,
        i_episode                 IN episode.id_episode%TYPE,
        i_exam_req_det            IN table_number,
        o_exam                    OUT pk_types.cursor_type,
        o_exam_clinical_questions OUT pk_types.cursor_type,
        o_error                   OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'OPEN O_EXAM';
        OPEN o_exam FOR
            WITH cso_table AS
             (SELECT *
                FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang, i_prof, i_episode, NULL)))
            SELECT /*+ opt_estimate(table cso rows=1) */
             er.id_exam_req,
             erd.id_exam_req_det,
             erd.id_exam,
             erd.flg_status,
             decode(nvl(er.id_episode, er.id_episode_origin), NULL, NULL, er.flg_time) flg_time,
             decode(nvl(er.id_episode, er.id_episode_origin),
                    NULL,
                    NULL,
                    pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL)) desc_time,
             pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || erd.id_exam, NULL) desc_exam,
             decode(er.flg_time,
                    pk_exam_constant.g_flg_time_b,
                    pk_date_utils.trunc_insttimezone_str(i_prof, er.dt_schedule_tstz, 'MI'),
                    pk_exam_constant.g_flg_time_d,
                    pk_date_utils.trunc_insttimezone_str(i_prof, er.dt_schedule_tstz, 'MI'),
                    pk_date_utils.trunc_insttimezone_str(i_prof, erd.dt_target_tstz, 'MI')) dt_begin_str,
             decode(er.flg_time,
                    pk_exam_constant.g_flg_time_b,
                    pk_date_utils.date_char_tsz(i_lang, er.dt_schedule_tstz, i_prof.institution, i_prof.software),
                    pk_exam_constant.g_flg_time_d,
                    pk_date_utils.date_char_tsz(i_lang, er.dt_schedule_tstz, i_prof.institution, i_prof.software),
                    pk_date_utils.date_char_tsz(i_lang, erd.dt_target_tstz, i_prof.institution, i_prof.software)) dt_begin,
             erd.flg_priority flg_priority,
             pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ_DET.FLG_PRIORITY', erd.flg_priority, NULL) priority,
             erd.id_order_recurrence,
             decode(erd.id_order_recurrence,
                    NULL,
                    pk_translation.get_translation(i_lang, 'ORDER_RECURR_OPTION.CODE_ORDER_RECURR_OPTION.0'),
                    pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang, i_prof, erd.id_order_recurrence)) order_recurrence,
             erd.flg_prn,
             pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ_DET.FLG_PRN', erd.flg_prn, NULL) prn,
             erd.prn_notes notes_prn,
             erd.id_room id_location_room,
             erd.id_exec_institution,
             decode(erd.flg_location,
                    pk_exam_constant.g_exam_location_interior,
                    decode(erd.id_room,
                           NULL,
                           pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION', erd.flg_location, i_lang),
                           nvl((SELECT r.desc_room
                                 FROM room r
                                WHERE r.id_room = erd.id_room),
                               pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || erd.id_room))),
                    decode(erd.id_exec_institution,
                           NULL,
                           pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION', erd.flg_location, i_lang),
                           pk_translation.get_translation(i_lang,
                                                          'AB_INSTITUTION.CODE_INSTITUTION.' || erd.id_exec_institution))) perform_location,
             erd.notes notes,
             erd.notes_scheduler notes_scheduler,
             erd.notes_tech notes_technician,
             erd.notes_patient notes_patient,
             erd.diagnosis_notes diagnosis_notes,
             pk_diagnosis.concat_diag_id(i_lang, erd.id_exam_req_det, NULL, NULL, i_prof, 'D') id_diagnosis,
             pk_diagnosis.concat_diag_id(i_lang, erd.id_exam_req_det, NULL, NULL, i_prof, 'S') id_alert_diagnosis,
             pk_diagnosis.concat_diag_id(i_lang, erd.id_exam_req_det, NULL, NULL, i_prof, 'C') code_diagnosis,
             pk_diagnosis.concat_diag_id(i_lang,
                                         erd.id_exam_req_det,
                                         NULL,
                                         NULL,
                                         i_prof,
                                         'T',
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         pk_alert_constant.g_no) desc_diagnosis,
             erd.id_clinical_purpose,
             erd.clinical_purpose_notes,
             decode(erd.id_clinical_purpose,
                    0,
                    erd.clinical_purpose_notes,
                    pk_translation.get_translation(i_lang,
                                                   'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                   erd.id_clinical_purpose)) clinical_purpose,
             erd.flg_laterality,
             pk_mcdt.check_mcdt_laterality(i_lang, i_prof, 'E', id_exam) flg_laterality_mcdt,
             pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LATERALITY', erd.flg_laterality, i_lang) laterality,
             erd.flg_fasting,
             pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_FASTING', erd.flg_fasting, i_lang) fasting,
             pk_exam_utils.get_exam_codification(i_lang, i_prof, erd.id_exam_codification) id_codification,
             pk_translation.get_translation(i_lang,
                                            'CODIFICATION.CODE_CODIFICATION.' ||
                                            pk_exam_utils.get_exam_codification(i_lang, i_prof, erd.id_exam_codification)) desc_codification,
             erd.id_pat_health_plan,
             pk_adt.get_pat_health_plan_info(i_lang, i_prof, erd.id_pat_health_plan, 'F') financial_entity,
             pk_adt.get_pat_health_plan_info(i_lang, i_prof, erd.id_pat_health_plan, 'H') health_plan,
             pk_adt.get_pat_health_plan_info(i_lang, i_prof, erd.id_pat_health_plan, 'N') insurance_number,
             erd.id_pat_exemption,
             pk_adt.get_pat_exemption_detail(i_lang, i_prof, erd.id_pat_exemption) exemption,
             erd.id_co_sign_order,
             cso.id_prof_ordered_by id_prof_order,
             cso.desc_prof_ordered_by prof_order,
             pk_date_utils.date_send_tsz(i_lang, cso.dt_ordered_by, i_prof) dt_order_str,
             pk_date_utils.date_char_tsz(i_lang, cso.dt_ordered_by, i_prof.institution, i_prof.software) dt_order,
             cso.id_order_type,
             cso.desc_order_type order_type
              FROM exam_req_det erd, exam_req er, cso_table cso
             WHERE erd.id_exam_req_det IN (SELECT /*+opt_estimate(table t rows=1)*/
                                            *
                                             FROM TABLE(i_exam_req_det) t)
               AND erd.id_exam_req = er.id_exam_req
               AND erd.id_co_sign_order = cso.id_co_sign_hist(+);
    
        g_error := 'OPEN O_EXAM_CLINICAL_QUESTIONS';
        OPEN o_exam_clinical_questions FOR
            SELECT eqr1.id_exam_req_det,
                   eqr1.id_questionnaire,
                   pk_mcdt.get_questionnaire_alias(i_lang,
                                                   i_prof,
                                                   'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' || eqr1.id_questionnaire) desc_clinical_question,
                   decode(instr(pk_exam_utils.get_exam_question_type(i_lang,
                                                                     i_prof,
                                                                     erd.id_exam,
                                                                     pk_exam_constant.g_exam_cq_on_order,
                                                                     eqr.id_questionnaire,
                                                                     eqr.id_response),
                                'D'),
                          0,
                          to_char(eqr1.id_response),
                          to_char(eqr.notes)) id_response,
                   decode(dbms_lob.getlength(eqr.notes),
                          NULL,
                          to_clob(eqr1.desc_response),
                          pk_exam_utils.get_exam_response(i_lang, i_prof, eqr.notes)) desc_response
              FROM (SELECT eqr.id_exam_req_det,
                           eqr.id_questionnaire,
                           substr(concatenate(eqr.id_response || '; '),
                                  1,
                                  length(concatenate(eqr.id_response || '; ')) - 2) id_response,
                           listagg(pk_mcdt.get_response_alias(i_lang,
                                                              i_prof,
                                                              'RESPONSE.CODE_RESPONSE.' || eqr.id_response),
                                   '; ') within GROUP(ORDER BY eqr.id_response) desc_response,
                           eqr.dt_last_update_tstz,
                           row_number() over(PARTITION BY eqr.id_questionnaire ORDER BY eqr.dt_last_update_tstz DESC NULLS FIRST) rn
                      FROM exam_question_response eqr
                     WHERE eqr.id_exam_req_det IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                    *
                                                     FROM TABLE(i_exam_req_det) t)
                       AND eqr.flg_time = pk_exam_constant.g_exam_cq_on_order
                     GROUP BY eqr.id_exam_req_det, eqr.id_questionnaire, eqr.dt_last_update_tstz) eqr1,
                   exam_question_response eqr,
                   exam_req_det erd
             WHERE eqr1.rn = 1
               AND eqr1.id_exam_req_det = eqr.id_exam_req_det
               AND eqr1.id_questionnaire = eqr.id_questionnaire
               AND eqr1.dt_last_update_tstz = eqr.dt_last_update_tstz
               AND eqr.id_exam_req_det = erd.id_exam_req_det;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_TO_EDIT',
                                              o_error);
            pk_types.open_my_cursor(o_exam);
            pk_types.open_my_cursor(o_exam_clinical_questions);
            RETURN FALSE;
    END get_exam_to_edit;

    FUNCTION get_exam_import_list
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_episode IN episode.id_episode%TYPE,
        i_exam    IN exam.id_exam%TYPE,
        o_list    OUT pk_types.cursor_type,
        o_error   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_path      sys_config.value%TYPE := pk_sysconfig.get_config('URL_EXTERNAL_DOC', i_prof);
        l_msg_image sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T104');
    
        l_external_sys exam_dep_clin_serv.id_external_sys%TYPE;
    
    BEGIN
    
        BEGIN
            SELECT a.id_external_sys
              INTO l_external_sys
              FROM exam_dep_clin_serv a
             WHERE a.id_exam = i_exam
               AND a.id_institution = i_prof.institution
               AND a.flg_type = pk_exam_constant.g_exam_can_req
               AND a.id_software = i_prof.software;
        EXCEPTION
            WHEN no_data_found THEN
                l_external_sys := NULL;
        END;
    
        OPEN o_list FOR
            SELECT id_external_doc,
                   id_ext,
                   l_msg_image || rownum doc_exam_desc,
                   l_path || id_external_doc url,
                   pk_date_utils.date_char_tsz(i_lang, dt_exec_ext, i_prof.institution, i_prof.software) dt_reg
              FROM external_doc ed
             WHERE ed.flg_state != 'F'
               AND (id_external_doc NOT IN (SELECT id_external_doc
                                              FROM external_doc_cancel edc
                                             WHERE edc.id_external_doc = ed.id_external_doc
                                               AND id_episode = i_episode))
               AND (ed.id_ext = (SELECT pk_barcode.get_pat_barcode(i_lang,
                                                                   i_prof,
                                                                   i_episode,
                                                                   epis.id_patient,
                                                                   epis.barcode,
                                                                   cr.num_clin_record)
                                   FROM episode epis
                                   JOIN clin_record cr
                                     ON cr.id_patient = epis.id_patient
                                  WHERE epis.id_episode = i_episode
                                    AND cr.id_institution = i_prof.institution
                                    AND cr.flg_status = pk_alert_constant.g_active) OR
                   ed.id_ext = (SELECT ees.value
                                   FROM epis_ext_sys ees
                                  WHERE ees.id_episode = i_episode
                                    AND ees.id_external_sys = pk_sysconfig.get_config('ID_EXTERNAL_SYS', i_prof)
                                    AND ees.id_institution = i_prof.institution))
               AND ed.id_external_sys = l_external_sys;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_IMPORT_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_import_list;

    FUNCTION get_exam_order_list
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'OPEN O_LIST';
        OPEN o_list FOR
            SELECT /*+opt_estimate(table s rows=1)*/
             s.val id_request,
             NULL id_parent,
             NULL to_state,
             s.desc_val desc_request,
             NULL icon,
             NULL flg_default,
             'A' flg_active,
             s.val request_type
              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang, i_prof, 'EXAMS_REQUEST_TYPE', NULL)) s
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_ORDER_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_order_list;

    FUNCTION get_exam_filter_list
    (
        i_lang      IN language.id_language%TYPE,
        i_prof      IN profissional,
        i_patient   IN patient.id_patient%TYPE,
        i_episode   IN episode.id_episode%TYPE,
        i_exam_type IN exam.flg_type%TYPE,
        o_list      OUT pk_types.cursor_type,
        o_error     OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_complaint table_number;
    
        l_has_complaint_results    VARCHAR2(1 CHAR) := pk_exam_constant.g_no;
        l_has_specialty_results    VARCHAR2(1 CHAR) := pk_exam_constant.g_no;
        l_has_codification_results VARCHAR2(1 CHAR) := pk_exam_constant.g_no;
    
    BEGIN
    
        IF i_episode IS NOT NULL
        THEN
            g_error := 'GET PK_COMPLAINT.GET_EPIS_ACT_COMPLAINT';
            IF NOT pk_complaint.get_epis_act_complaint(i_lang         => i_lang,
                                                       i_prof         => i_prof,
                                                       i_episode      => i_episode,
                                                       o_id_complaint => l_complaint,
                                                       o_error        => o_error)
            THEN
                RAISE g_other_exception;
            END IF;
        END IF;
    
        IF l_complaint IS NOT NULL
           AND l_complaint.count > 0
        THEN
            g_error := 'PK_EXAM_CORE.GET_EXAM_SELECTION_LIST';
            BEGIN
                SELECT /*+opt_estimate(table t rows=1)*/
                DISTINCT pk_exam_constant.g_yes
                  INTO l_has_complaint_results
                  FROM TABLE(pk_exam_core.get_exam_selection_list(i_lang         => i_lang,
                                                                  i_prof         => i_prof,
                                                                  i_patient      => i_patient,
                                                                  i_episode      => i_episode,
                                                                  i_exam_type    => i_exam_type,
                                                                  i_flg_type     => pk_exam_constant.g_exam_complaint,
                                                                  i_codification => NULL)) t;
            EXCEPTION
                WHEN no_data_found THEN
                    l_has_complaint_results := pk_exam_constant.g_no;
            END;
        END IF;
    
        IF l_has_complaint_results = pk_exam_constant.g_no
        THEN
            g_error := 'GET PK_EXAM_CORE.GET_EXAM_SELECTION_LIST';
            BEGIN
                SELECT /*+opt_estimate(table t rows=1)*/
                DISTINCT pk_exam_constant.g_yes
                  INTO l_has_specialty_results
                  FROM TABLE(pk_exam_core.get_exam_selection_list(i_lang          => i_lang,
                                                                  i_prof          => i_prof,
                                                                  i_patient       => i_patient,
                                                                  i_episode       => i_episode,
                                                                  i_exam_type     => i_exam_type,
                                                                  i_flg_type      => pk_exam_constant.g_exam_freq,
                                                                  i_codification  => NULL,
                                                                  i_dep_clin_serv => NULL)) t;
            EXCEPTION
                WHEN no_data_found THEN
                    l_has_specialty_results := pk_exam_constant.g_no;
            END;
        END IF;
    
        BEGIN
            SELECT DISTINCT pk_exam_constant.g_yes
              INTO l_has_codification_results
              FROM codification_instit_soft cis
             WHERE cis.id_institution = i_prof.institution
               AND cis.id_software = i_prof.software
               AND cis.flg_available = pk_exam_constant.g_available
               AND EXISTS (SELECT 1
                      FROM exam_codification ec,
                           (SELECT e.id_exam
                              FROM exam e, exam_dep_clin_serv edcs
                             WHERE e.flg_type = i_exam_type
                               AND e.flg_available = pk_exam_constant.g_available
                               AND edcs.flg_type = pk_exam_constant.g_exam_can_req
                               AND edcs.id_software = i_prof.software
                               AND edcs.id_institution = i_prof.institution) edcs
                     WHERE cis.id_codification = ec.id_codification
                       AND ec.flg_available = pk_exam_constant.g_available
                       AND ec.id_exam = edcs.id_exam);
        EXCEPTION
            WHEN no_data_found THEN
                l_has_codification_results := pk_exam_constant.g_no;
        END;
    
        g_error := 'OPEN CURSOR';
        OPEN o_list FOR
            SELECT id_action, id_parent, to_state, desc_action, icon, flg_default, flg_active, action
              FROM (SELECT sd.val id_action,
                           NULL id_parent,
                           NULL to_state,
                           sd.desc_val desc_action,
                           sd.img_name icon,
                           decode(sd.val,
                                  pk_exam_constant.g_exam_institution,
                                  pk_exam_constant.g_yes,
                                  pk_exam_constant.g_no) flg_default,
                           decode(sd.val,
                                  pk_exam_constant.g_exam_clinical_service,
                                  decode(l_has_specialty_results,
                                         pk_exam_constant.g_yes,
                                         pk_exam_constant.g_active,
                                         pk_exam_constant.g_inactive),
                                  pk_exam_constant.g_exam_complaint,
                                  decode(l_has_complaint_results,
                                         pk_exam_constant.g_yes,
                                         pk_exam_constant.g_active,
                                         pk_exam_constant.g_inactive),
                                  pk_exam_constant.g_exam_codification,
                                  decode(l_has_codification_results,
                                         pk_exam_constant.g_yes,
                                         pk_exam_constant.g_active,
                                         pk_exam_constant.g_inactive),
                                  pk_exam_constant.g_active) flg_active,
                           sd.val action,
                           sd.rank
                      FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang,
                                                                          i_prof,
                                                                          'EXAM_SELECTION_LIST_FILTER',
                                                                          NULL)) sd
                    UNION ALL
                    SELECT to_char(cis.id_codification) id_action,
                           pk_exam_constant.g_exam_codification id_parent,
                           NULL to_state,
                           pk_translation.get_translation(i_lang,
                                                          'CODIFICATION.CODE_CODIFICATION.' || cis.id_codification) desc_action,
                           NULL icon,
                           pk_exam_constant.g_no flg_default,
                           pk_exam_constant.g_active flg_active,
                           NULL action,
                           NULL rank
                      FROM codification_instit_soft cis
                     WHERE cis.id_institution = i_prof.institution
                       AND cis.id_software = i_prof.software
                       AND cis.flg_available = pk_exam_constant.g_available
                       AND EXISTS (SELECT 1
                              FROM exam_codification ec,
                                   (SELECT e.id_exam
                                      FROM exam e, exam_dep_clin_serv edcs
                                     WHERE e.flg_type = i_exam_type
                                       AND e.flg_available = pk_exam_constant.g_available
                                       AND edcs.flg_type = pk_exam_constant.g_exam_can_req
                                       AND edcs.id_software = i_prof.software
                                       AND edcs.id_institution = i_prof.institution) edcs
                             WHERE cis.id_codification = ec.id_codification
                               AND ec.flg_available = pk_exam_constant.g_available
                               AND ec.id_exam = edcs.id_exam))
             ORDER BY rank, desc_action;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_FILTER_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_filter_list;

    FUNCTION get_exam_time_list
    (
        i_lang      IN language.id_language%TYPE,
        i_prof      IN profissional,
        i_epis_type IN epis_type.id_epis_type%TYPE,
        i_exam_type IN exam.flg_type%TYPE,
        o_list      OUT pk_types.cursor_type,
        o_error     OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_software software.id_software%TYPE;
        l_flg_time sys_config.value%TYPE;
        l_config   sys_config.id_sys_config%TYPE;
    
    BEGIN
    
        IF i_exam_type = pk_exam_constant.g_type_img
        THEN
            l_config := 'IMG_FLG_TIME_E';
        ELSIF i_exam_type = pk_exam_constant.g_type_exm
        THEN
            l_config := 'EXM_FLG_TIME_E';
        ELSE
            g_error := 'Invalid exam type: ' || i_exam_type;
            RAISE g_user_exception;
        END IF;
    
        g_error    := 'Call pk_sysconfig.get_config / ID_SYS_CONFIG=' || l_config;
        l_flg_time := pk_sysconfig.get_config(l_config, i_prof.institution, i_prof.software);
    
        SELECT MAX(etsi.id_software) keep(dense_rank FIRST ORDER BY etsi.id_institution DESC) id_software
          INTO l_software
          FROM epis_type_soft_inst etsi
         WHERE etsi.id_institution IN (0, i_prof.institution)
           AND etsi.id_epis_type = i_epis_type;
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT val data,
                   rank,
                   desc_val label,
                   decode(l_flg_time, val, pk_exam_constant.g_yes, pk_exam_constant.g_no) flg_default
              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang,
                                                                  decode(i_epis_type,
                                                                         NULL,
                                                                         i_prof,
                                                                         profissional(i_prof.id,
                                                                                      i_prof.institution,
                                                                                      l_software)),
                                                                  'EXAM_REQ.FLG_TIME',
                                                                  NULL))
             WHERE val != pk_exam_constant.g_flg_time_r;
    
        pk_backoffice_translation.set_read_translation('EXAM_REQ.FLG_TIME', 'SYS_DOMAIN');
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN g_user_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_TIME_LIST',
                                              'U',
                                              g_error,
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_TIME_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_time_list;

    FUNCTION get_exam_priority_list
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        i_exam  IN table_number,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT val data,
                   rank,
                   desc_val label,
                   (CAST(MULTISET (SELECT edcs.id_exam
                            FROM exam_dep_clin_serv edcs
                           WHERE edcs.id_institution = i_prof.institution
                             AND edcs.id_software = i_prof.software
                             AND edcs.flg_type = pk_exam_constant.g_exam_can_req
                             AND edcs.flg_execute = pk_exam_constant.g_yes
                             AND edcs.flg_priority = s.val
                             AND edcs.id_exam IN (SELECT /*+opt_estimate (table t rows=1)*/
                                                   *
                                                    FROM TABLE(i_exam) t)) AS table_number)) id_default
              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang, i_prof, 'EXAM_REQ.PRIORITY', NULL)) s
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_PRIORITY_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_priority_list;

    FUNCTION get_exam_default_priority
    (
        i_lang       IN language.id_language%TYPE,
        i_prof       IN profissional,
        i_exam       IN exam.id_exam%TYPE,
        i_value      IN OUT VARCHAR2,
        i_desc_value IN OUT VARCHAR2
    ) RETURN BOOLEAN IS
        l_error t_error_out;
    BEGIN
    
        g_error := 'GET DEFAULT PRIORITY VALUE';
        SELECT tt.data, tt.label
          INTO i_value, i_desc_value
          FROM (SELECT t.data, t.label
                  FROM (SELECT /*+opt_estimate(table s rows=1)*/
                         val data, desc_val label, -1 rank
                          FROM exam_dep_clin_serv edcs
                          JOIN TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang, i_prof, 'EXAM_REQ.PRIORITY', NULL)) s
                            ON s.val = edcs.flg_priority
                         WHERE edcs.id_institution = i_prof.institution
                           AND edcs.id_software = i_prof.software
                           AND edcs.flg_type = pk_exam_constant.g_exam_can_req
                           AND edcs.flg_execute = pk_exam_constant.g_yes
                           AND edcs.flg_priority = s.val
                           AND edcs.id_exam = i_exam
                        UNION ALL
                        SELECT /*+opt_estimate(table s rows=1)*/
                         s.val data, s.desc_val label, s.rank
                          FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang, i_prof, 'EXAM_REQ.PRIORITY', NULL)) s) t
                 WHERE t.data IS NOT NULL
                   AND t.label IS NOT NULL
                 ORDER BY rank) tt
         WHERE rownum = 1;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_DEFAULT_PRIORITY',
                                              l_error);
            RETURN FALSE;
    END get_exam_default_priority;

    FUNCTION get_exam_diagnosis_list
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_episode IN episode.id_episode%TYPE,
        o_list    OUT pk_types.cursor_type,
        o_error   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_search_diagnosis sys_config.value%TYPE := pk_sysconfig.get_config('PERMISSION_FOR_SEARCH_DIAGNOSIS', i_prof);
    
        l_profile_template profile_template.id_profile_template%TYPE := pk_prof_utils.get_prof_profile_template(i_prof);
    
        l_tbl_diags t_coll_diagnosis_config := t_coll_diagnosis_config();
    BEGIN
    
        IF i_episode IS NOT NULL
        THEN
            l_tbl_diags := pk_diagnosis.get_associated_diagnosis_tf(i_lang, i_prof, i_episode, pk_alert_constant.g_yes);
        END IF;
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT id_diagnosis, desc_diagnosis, code_icd, flg_other, rank, id_alert_diagnosis
              FROM (SELECT NULL id_diagnosis,
                           pk_message.get_message(i_lang, i_prof, 'EXAMS_M005') desc_diagnosis,
                           NULL code_icd,
                           NULL flg_other,
                           10 rank,
                           NULL id_alert_diagnosis
                      FROM dual
                     WHERE instr(nvl(l_search_diagnosis, '#'), l_profile_template) != 0
                    UNION ALL
                    SELECT /*+opt_estimate (table t rows=1)*/
                     t.id_diagnosis, t.desc_diagnosis, t.code_icd, t.flg_other, 20 rank, t.id_alert_diagnosis
                      FROM TABLE(l_tbl_diags) t)
             ORDER BY rank ASC, desc_diagnosis ASC;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_DIAGNOSIS_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_diagnosis_list;

    FUNCTION get_exam_location_list
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        i_exam  IN table_number,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_inst pk_types.cursor_type;
    
        l_id_institution           institution.id_institution%TYPE;
        l_institution_name         pk_translation.t_desc_translation;
        l_institution_abbreviation institution.abbreviation%TYPE;
    
        l_default     VARCHAR2(1 CHAR);
        l_default_aux VARCHAR2(1 CHAR);
    
        l_id_exam  exam.id_exam%TYPE;
        l_exam_aux table_number := table_number();
    BEGIN
    
        -- Get common institution based on all required exams
        IF NOT pk_p1_exam.get_exam_inst(i_lang  => i_lang,
                                        i_prof  => i_prof,
                                        i_exams => i_exam,
                                        o_inst  => l_inst,
                                        o_error => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        DELETE tbl_temp;
    
        --Check if the perform location is the institution where the exam is ordered
        IF pk_sysconfig.get_config('EXAMS_PERFORM_LOCATION', i_prof) = pk_exam_constant.g_yes
        THEN
            l_default     := pk_exam_constant.g_yes;
            l_default_aux := pk_exam_constant.g_yes;
        ELSE
            l_default     := pk_exam_constant.g_no;
            l_default_aux := pk_exam_constant.g_no;
        END IF;
    
        INSERT INTO tbl_temp
            (num_1, num_2, vc_1, vc_2, vc_3, num_3)
            SELECT /*+opt_estimate(table t rows=1)*/
             er.id_room,
             10,
             nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) desc_room,
             decode(edcs.flg_execute,
                    pk_exam_constant.g_yes,
                    decode(l_default, pk_exam_constant.g_yes, er.flg_default, pk_exam_constant.g_no),
                    pk_exam_constant.g_no) flg_default,
             'R',
             er.id_exam
              FROM exam_room er,
                   TABLE(i_exam) t,
                   room r,
                   department d,
                   (SELECT *
                      FROM exam_dep_clin_serv
                     WHERE flg_type = pk_exam_constant.g_exam_can_req
                       AND id_software = i_prof.software
                       AND id_institution = i_prof.institution
                       AND flg_execute = pk_exam_constant.g_yes) edcs
             WHERE er.id_exam = t.column_value
               AND er.flg_available = pk_exam_constant.g_available
               AND (er.id_exam_dep_clin_serv IS NULL OR EXISTS
                    (SELECT 1
                       FROM exam_dep_clin_serv edcs2
                      WHERE edcs2.id_exam_dep_clin_serv = er.id_exam_dep_clin_serv
                        AND edcs2.id_exam_dep_clin_serv = edcs.id_exam_dep_clin_serv))
               AND er.id_room = r.id_room
               AND r.id_department = d.id_department
               AND r.flg_available = pk_exam_constant.g_available
               AND d.id_institution = i_prof.institution
               AND er.id_exam = edcs.id_exam
             ORDER BY desc_room;
    
        --CHECK IF, FROM THE LIST OF GIVEN EXAMS, THERE ARE EXAMS WITHOUT ROOMS
        --In this, it is added the 'In this facility' option to the list
        FOR i IN i_exam.first .. i_exam.last
        LOOP
            BEGIN
                SELECT DISTINCT tt.num_3
                  INTO l_id_exam
                  FROM tbl_temp tt
                 WHERE tt.num_3 = i_exam(i);
            
            EXCEPTION
                WHEN no_data_found THEN
                    l_exam_aux.extend();
                    l_exam_aux(l_exam_aux.count) := i_exam(i);
                    CONTINUE;
            END;
        END LOOP;
    
        IF l_exam_aux.count > 0
        THEN
            INSERT INTO tbl_temp
                (num_1, num_2, vc_1, vc_2, vc_3, num_3)
                SELECT /*+opt_estimate(table t rows=1)*/
                 i_prof.institution,
                 10,
                 pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION', pk_exam_constant.g_exam_location_interior, i_lang),
                 l_default,
                 'I',
                 edcs.id_exam
                  FROM TABLE(l_exam_aux) t,
                       (SELECT *
                          FROM exam_dep_clin_serv
                         WHERE flg_type = pk_exam_constant.g_exam_can_req
                           AND id_software = i_prof.software
                           AND id_institution = i_prof.institution
                           AND flg_execute = pk_exam_constant.g_yes) edcs
                 WHERE edcs.id_exam = t.column_value;
        END IF;
    
        --Add the 'Other' or 'Exterior' Facility
        LOOP
            FETCH l_inst
                INTO l_id_institution, l_institution_name, l_institution_abbreviation;
            EXIT WHEN l_inst%NOTFOUND;
        
            IF l_id_institution = pk_sysconfig.get_config('REF_EXTERNAL_INST', i_prof)
            THEN
                IF SQL%ROWCOUNT = 0
                THEN
                    l_default := pk_exam_constant.g_yes;
                ELSE
                    IF pk_sysconfig.get_config('EXAMS_PERFORM_LOCATION', i_prof) = pk_exam_constant.g_yes
                    THEN
                        l_default := pk_exam_constant.g_no;
                    ELSE
                        l_default := pk_exam_constant.g_yes;
                    END IF;
                END IF;
            ELSE
                l_default := pk_exam_constant.g_no;
            END IF;
        
            INSERT INTO tbl_temp
                (num_1, num_2, vc_1, vc_2, vc_3)
            VALUES
                (l_id_institution,
                 20,
                 l_institution_name,
                 l_default,
                 CASE WHEN l_default = pk_alert_constant.g_yes THEN 'E' ELSE 'I' END);
        END LOOP;
        CLOSE l_inst;
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT t.data,
                   t.rank,
                   t.label,
                   t.flg_default,
                   t.flg_type,
                   CASE
                        WHEN t.flg_type = 'R' THEN
                         (CAST(MULTISET (SELECT DISTINCT er.id_exam
                                  FROM exam_room er
                                  JOIN room r
                                    ON r.id_room = er.id_room
                                  JOIN department d
                                    ON d.id_department = r.id_department
                                  JOIN (SELECT *
                                         FROM exam_dep_clin_serv
                                        WHERE flg_type = pk_exam_constant.g_exam_can_req
                                          AND id_software = i_prof.software
                                          AND id_institution = i_prof.institution
                                          AND flg_execute = pk_exam_constant.g_yes) edcs
                                    ON edcs.id_exam = er.id_exam
                                 WHERE er.id_exam IN (SELECT /*+opt_estimate(table e rows=1)*/
                                                       *
                                                        FROM TABLE(i_exam) e)
                                   AND (er.id_exam_dep_clin_serv IS NULL OR EXISTS
                                        (SELECT 1
                                           FROM exam_dep_clin_serv edcs2
                                          WHERE edcs2.id_exam_dep_clin_serv = er.id_exam_dep_clin_serv
                                            AND edcs2.id_exam_dep_clin_serv = edcs.id_exam_dep_clin_serv))
                                   AND er.id_room = t.data
                                   AND er.flg_available = pk_exam_constant.g_available
                                   AND r.flg_available = pk_exam_constant.g_available
                                   AND d.id_institution = i_prof.institution
                                   AND (decode(edcs.flg_execute,
                                               pk_exam_constant.g_yes,
                                               decode(l_default_aux,
                                                      pk_exam_constant.g_yes,
                                                      er.flg_default,
                                                      pk_exam_constant.g_no),
                                               pk_exam_constant.g_no)) = pk_alert_constant.g_yes) AS table_number))
                        WHEN t.flg_type = 'I'
                             AND (SELECT COUNT(1) -- Clause to not show id_exam when dealing
                                    FROM tbl_temp tt -- with information obtained through cursor l_inst
                                   WHERE tt.num_1 = t.data
                                     AND tt.num_3 IS NOT NULL) > 0 THEN
                         (CAST(MULTISET (SELECT DISTINCT edcs.id_exam
                                  FROM exam_dep_clin_serv edcs
                                 WHERE flg_type = pk_exam_constant.g_exam_can_req
                                   AND id_software = i_prof.software
                                   AND id_institution = i_prof.institution
                                   AND flg_execute = pk_exam_constant.g_yes
                                   AND l_default_aux = pk_alert_constant.g_yes
                                   AND edcs.id_exam IN (SELECT /*+opt_estimate(TABLE e rows = 1) */
                                                         *
                                                          FROM TABLE(l_exam_aux) e)) AS table_number))
                        WHEN t.flg_type = 'E' THEN
                         CASE
                             WHEN l_default_aux = pk_alert_constant.g_no THEN
                              i_exam
                             ELSE
                              (CAST(MULTISET (SELECT DISTINCT edcs.id_exam
                                       FROM exam_dep_clin_serv edcs
                                      WHERE flg_type = pk_exam_constant.g_exam_can_req
                                        AND id_software = i_prof.software
                                        AND id_institution = i_prof.institution
                                        AND flg_execute = pk_exam_constant.g_no
                                        AND edcs.id_exam IN (SELECT /*+opt_estimate(TABLE e rows = 1) */
                                                              *
                                                               FROM TABLE(l_exam_aux) e)) AS table_number))
                         END
                    END id_exam
              FROM (SELECT DISTINCT data, MAX(rank) rank, label, MAX(flg_default) flg_default, flg_type
                      FROM (SELECT num_1 data, num_2 rank, vc_1 label, vc_2 flg_default, vc_3 flg_type
                              FROM tbl_temp)
                     GROUP BY data, label, flg_type
                     ORDER BY rank, label) t;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_LOCATION_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_location_list;

    FUNCTION get_exam_location
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_exams   IN table_number,
        i_default IN VARCHAR2 DEFAULT pk_alert_constant.g_no
    ) RETURN t_tbl_core_domain IS
    
        l_inst pk_types.cursor_type;
    
        l_id_institution           institution.id_institution%TYPE;
        l_institution_name         pk_translation.t_desc_translation;
        l_institution_abbreviation institution.abbreviation%TYPE;
    
        l_default     VARCHAR2(1 CHAR);
        l_default_aux VARCHAR2(1 CHAR);
    
        l_id_exam exam.id_exam%TYPE;
        l_count   PLS_INTEGER := 0;
    
        l_ret t_tbl_core_domain;
    
        l_error t_error_out;
    
    BEGIN
        -- Get common institution based on all required exams
        g_error := 'GET EXAM INSTITUTION';
        IF NOT pk_p1_exam.get_exam_inst(i_lang  => i_lang,
                                        i_prof  => i_prof,
                                        i_exams => i_exams,
                                        o_inst  => l_inst,
                                        o_error => l_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        g_error := 'DELETE TBL_TEMP';
        DELETE tbl_temp;
    
        --Check if the perform location is the institution where the exam is ordered    
        IF pk_sysconfig.get_config('EXAMS_PERFORM_LOCATION', i_prof) = pk_exam_constant.g_yes
        THEN
            l_default     := pk_exam_constant.g_yes;
            l_default_aux := pk_exam_constant.g_yes;
        ELSE
            l_default     := pk_exam_constant.g_no;
            l_default_aux := pk_exam_constant.g_no;
        END IF;
    
        INSERT INTO tbl_temp
            (num_1, num_2, vc_1, vc_2, vc_3, num_3)
            SELECT /*+opt_estimate(table t rows=1)*/
             er.id_room,
             10,
             nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) desc_room,
             decode(edcs.flg_execute,
                    pk_exam_constant.g_yes,
                    decode(l_default, pk_exam_constant.g_yes, er.flg_default, pk_exam_constant.g_no),
                    pk_exam_constant.g_no) flg_default,
             'R',
             er.id_exam
              FROM exam_room er
              JOIN room r
                ON er.id_room = r.id_room
              JOIN department d
                ON r.id_department = d.id_department
              JOIN (SELECT *
                      FROM exam_dep_clin_serv
                     WHERE flg_type = pk_exam_constant.g_exam_can_req
                       AND id_software = i_prof.software
                       AND id_institution = i_prof.institution
                       AND flg_execute = pk_exam_constant.g_yes
                       AND id_exam IN (SELECT /*+opt_estimate (table t rows=1)*/
                                        t.*
                                         FROM TABLE(i_exams) t)) edcs
                ON er.id_exam = edcs.id_exam
             WHERE er.id_exam IN (SELECT /*+opt_estimate (table t rows=1)*/
                                   t.*
                                    FROM TABLE(i_exams) t)
               AND er.flg_available = pk_exam_constant.g_available
               AND (er.id_exam_dep_clin_serv IS NULL OR EXISTS
                    (SELECT 1
                       FROM exam_dep_clin_serv edcs2
                      WHERE edcs2.id_exam_dep_clin_serv = er.id_exam_dep_clin_serv
                        AND edcs2.id_exam_dep_clin_serv = edcs.id_exam_dep_clin_serv))
               AND r.flg_available = pk_exam_constant.g_available
               AND d.id_institution = i_prof.institution
             ORDER BY desc_room;
    
        SELECT COUNT(1)
          INTO l_count
          FROM tbl_temp;
    
        --CHECK IF, FROM THE LIST OF GIVEN EXAMS, THERE ARE EXAMS WITHOUT ROOMS    
        IF l_count = 0
        THEN
            INSERT INTO tbl_temp
                (num_1, num_2, vc_1, vc_2, vc_3, num_3)
                SELECT i_prof.institution,
                       10,
                       pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION',
                                               pk_exam_constant.g_exam_location_interior,
                                               i_lang),
                       l_default,
                       'I',
                       edcs.id_exam
                  FROM exam_dep_clin_serv edcs
                 WHERE flg_type = pk_exam_constant.g_exam_can_req
                   AND id_software = i_prof.software
                   AND id_institution = i_prof.institution
                   AND flg_execute = pk_exam_constant.g_yes
                   AND edcs.id_exam IN (SELECT /*+opt_estimate (table t rows=1)*/
                                         t.*
                                          FROM TABLE(i_exams) t);
        END IF;
    
        LOOP
            FETCH l_inst
                INTO l_id_institution, l_institution_name, l_institution_abbreviation;
            EXIT WHEN l_inst%NOTFOUND;
        
            IF l_id_institution = pk_sysconfig.get_config('REF_EXTERNAL_INST', i_prof)
            THEN
                IF SQL%ROWCOUNT = 0
                THEN
                    l_default := pk_exam_constant.g_yes;
                ELSE
                    IF pk_sysconfig.get_config('EXAMS_PERFORM_LOCATION', i_prof) = pk_exam_constant.g_yes
                    THEN
                        l_default := pk_exam_constant.g_no;
                    ELSE
                        l_default := pk_exam_constant.g_yes;
                    END IF;
                END IF;
            ELSE
                l_default := pk_exam_constant.g_no;
            END IF;
        
            INSERT INTO tbl_temp
                (num_1, num_2, vc_1, vc_2, vc_3)
            VALUES
                (l_id_institution,
                 20,
                 l_institution_name,
                 l_default,
                 CASE WHEN l_default = pk_alert_constant.g_yes THEN 'E' ELSE 'I' END);
        END LOOP;
        CLOSE l_inst;
    
        g_error := 'GET CURSOR';
        SELECT *
          BULK COLLECT
          INTO l_ret
          FROM (SELECT t_row_core_domain(NULL, t.label, t.data, t.rank, NULL)
                  FROM (SELECT DISTINCT data, MAX(rank) rank, label, MAX(flg_default) flg_default, flg_type
                          FROM (SELECT num_1 data, num_2 rank, vc_1 label, vc_2 flg_default, vc_3 flg_type
                                  FROM tbl_temp)
                         GROUP BY data, label, flg_type
                         ORDER BY rank, label) t
                 WHERE i_default = pk_alert_constant.g_no
                    OR (i_default = pk_alert_constant.g_yes AND t.flg_default = pk_alert_constant.g_yes))
         WHERE i_default = pk_alert_constant.g_no
            OR rownum = 1;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_LOCATION',
                                              l_error);
            RETURN t_tbl_core_domain();
    END get_exam_location;

    FUNCTION get_exam_clinical_purpose_list
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT id_multichoice_option data, rank, desc_option label, NULL flg_default
              FROM TABLE(pk_multichoice.tf_multichoice_options(i_lang, i_prof, 'EXAM_REQ_DET.ID_CLINICAL_PURPOSE'))
             ORDER BY rank ASC, desc_option;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_CLINICAL_PURPOSE_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_clinical_purpose_list;

    FUNCTION get_exam_prn_list
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT s.val data,
                   s.rank,
                   s.desc_val label,
                   decode(s.val, pk_exam_constant.g_no, pk_exam_constant.g_yes, pk_exam_constant.g_no) flg_default
              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang, i_prof, 'EXAM_REQ_DET.FLG_PRN', NULL)) s
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_PRN_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_prn_list;

    FUNCTION get_exam_fasting_list
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_flg_fast_default sys_config.value%TYPE;
    
    BEGIN
    
        l_flg_fast_default := pk_sysconfig.get_config('EXM_OTHR_REQ_FLG_FASTING_DEFAULT', i_prof);
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT s.val data,
                   s.rank,
                   s.desc_val label,
                   decode(s.val, l_flg_fast_default, pk_exam_constant.g_yes, pk_exam_constant.g_no) flg_default
              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang, i_prof, 'EXAM_REQ_DET.FLG_FASTING', NULL)) s
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_FASTING_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_fasting_list;

    FUNCTION get_exam_codification_list
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        i_exam  IN table_number,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT DISTINCT ec.id_codification data,
                            NULL rank,
                            pk_translation.get_translation(i_lang,
                                                           'CODIFICATION.CODE_CODIFICATION.' || ec.id_codification) label,
                            cis.flg_default
              FROM exam_codification ec, codification_instit_soft cis
             WHERE ec.id_exam IN (SELECT /*+opt_estimate(table t rows=1)*/
                                   *
                                    FROM TABLE(i_exam) t)
               AND ec.flg_available = pk_exam_constant.g_available
               AND ec.id_codification = cis.id_codification
               AND cis.id_institution = i_prof.institution
               AND cis.id_software = i_prof.software
               AND cis.flg_available = pk_exam_constant.g_available
               AND EXISTS (SELECT 1
                      FROM codification c
                     WHERE cis.id_codification = c.id_codification
                       AND c.flg_available = pk_exam_constant.g_available)
             ORDER BY label;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_CODIFICATION_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_codification_list;

    FUNCTION get_exam_codification_list
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_exams       IN VARCHAR2,
        i_flg_default IN VARCHAR2 DEFAULT pk_alert_constant.g_no
    ) RETURN t_tbl_core_domain IS
    
        l_tbl_exams table_number := table_number();
    
        l_ret t_tbl_core_domain;
    
        l_error t_error_out;
    
    BEGIN
    
        l_tbl_exams := pk_utils.str_split_n(i_list => i_exams, i_delim => '|');
    
        g_error := 'OPEN L_RET';
        SELECT *
          BULK COLLECT
          INTO l_ret
          FROM (SELECT t_row_core_domain(NULL, t.label, t.data, t.rank, NULL)
                  FROM (SELECT DISTINCT ec.id_codification data,
                                        NULL rank,
                                        pk_translation.get_translation(i_lang,
                                                                       'CODIFICATION.CODE_CODIFICATION.' ||
                                                                       ec.id_codification) label,
                                        cis.flg_default
                          FROM exam_codification ec, codification_instit_soft cis
                         WHERE ec.id_exam IN (SELECT /*+opt_estimate(table t rows=1)*/
                                               *
                                                FROM TABLE(l_tbl_exams) t)
                           AND ec.flg_available = pk_exam_constant.g_available
                           AND ec.id_codification = cis.id_codification
                           AND cis.id_institution = i_prof.institution
                           AND cis.id_software = i_prof.software
                           AND cis.flg_available = pk_exam_constant.g_available
                           AND EXISTS
                         (SELECT 1
                                  FROM codification c
                                 WHERE cis.id_codification = c.id_codification
                                   AND c.flg_available = pk_exam_constant.g_available)
                           AND (i_flg_default = pk_alert_constant.g_no OR cis.flg_default = i_flg_default)
                         ORDER BY label) t
                 WHERE i_flg_default = pk_alert_constant.g_no
                    OR (i_flg_default = pk_alert_constant.g_yes AND rownum = 1));
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_CODIFICATION_LIST',
                                              l_error);
            RETURN t_tbl_core_domain();
    END get_exam_codification_list;

    FUNCTION get_exam_health_plan_list
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_patient IN patient.id_patient%TYPE,
        o_list    OUT pk_types.cursor_type,
        o_error   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_list                    pk_types.cursor_type;
        l_id_pat_health_plan      pat_health_plan.id_pat_health_plan%TYPE;
        l_id_health_plan_entity   health_plan.id_health_plan_entity%TYPE;
        l_desc_health_plan_entity pk_translation.t_desc_translation;
        l_id_health_plan          health_plan.id_health_plan%TYPE;
        l_desc_health_plan        pk_translation.t_desc_translation;
        l_num_health_plan         pat_health_plan.num_health_plan%TYPE;
    
    BEGIN
    
        IF NOT pk_adt.get_pat_health_plans(i_lang            => i_lang,
                                           i_prof            => i_prof,
                                           i_id_patient      => i_patient,
                                           o_pat_health_plan => l_list,
                                           o_error           => o_error)
        THEN
            RAISE g_other_exception;
        END IF;
    
        DELETE tbl_temp;
    
        INSERT INTO tbl_temp
            (num_1, num_2, vc_1, num_3, vc_2, vc_3, num_4)
        VALUES
            (NULL, NULL, pk_message.get_message(i_lang, i_prof, 'LAB_TESTS_M002'), NULL, NULL, NULL, 10);
    
        LOOP
            FETCH l_list
                INTO l_id_pat_health_plan,
                     l_id_health_plan,
                     l_desc_health_plan,
                     l_desc_health_plan_entity,
                     l_id_health_plan_entity,
                     l_num_health_plan;
            EXIT WHEN l_list%NOTFOUND;
        
            INSERT INTO tbl_temp
                (num_1, num_2, vc_1, num_3, vc_2, vc_3, num_4)
            VALUES
                (l_id_pat_health_plan,
                 l_id_health_plan_entity,
                 l_desc_health_plan_entity,
                 l_id_health_plan,
                 l_desc_health_plan,
                 l_num_health_plan,
                 20);
        END LOOP;
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT num_1 id_pat_health_plan,
                   num_2 id_health_plan_entity,
                   vc_1  desc_health_plan_entity,
                   num_2 id_health_plan,
                   vc_2  desc_health_plan,
                   vc_3  num_health_plan
              FROM tbl_temp
             ORDER BY num_3;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_HEALTH_PLAN_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_health_plan_list;

    FUNCTION get_exam_time_out_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_episode         IN episode.id_episode%TYPE,
        i_exam_req_det    IN exam_req_det.id_exam_req_det%TYPE,
        o_id_doc_template OUT doc_template.id_doc_template%TYPE,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        SELECT pk_touch_option.get_doc_template_internal(i_lang,
                                                         i_prof,
                                                         NULL,
                                                         i_episode,
                                                         pk_exam_constant.g_doc_area_exam_time_out,
                                                         eea.id_exam) doc_template_exam
          INTO o_id_doc_template
          FROM exams_ea eea
         WHERE eea.id_exam_req_det = i_exam_req_det;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_TIME_OUT_LIST',
                                              o_error);
            RETURN FALSE;
    END get_exam_time_out_list;

    FUNCTION get_exam_documentation_list
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT val data, rank, desc_val label, NULL flg_default
              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang, i_prof, 'EXAM_DOCUMENTATION_MODE', NULL)) s
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_DOCUMENTATION_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_documentation_list;

    FUNCTION get_exam_result_status_list
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'OPEN O_LIST';
        OPEN o_list FOR
            SELECT rs.id_result_status data,
                   rs.flg_default flg_default,
                   pk_translation.get_translation(i_lang, rs.short_code_result_status) label,
                   rs.value flg_value
              FROM result_status rs
             WHERE rs.flg_multichoice = pk_exam_constant.g_yes;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_RESULT_STATUS_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_result_status_list;

    FUNCTION get_exam_result_abnormal_list
    (
        i_lang  IN language.id_language%TYPE, --1
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'OPEN O_LIST';
        OPEN o_list FOR
            SELECT a.id_abnormality data,
                   NULL rank,
                   pk_translation.get_translation(i_lang, a.short_code_abnormality) label,
                   NULL flg_default
              FROM abnormality a
             WHERE a.flg_multichoice = pk_exam_constant.g_yes
               AND a.flg_visible = pk_exam_constant.g_yes;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_RESULT_ABNORMAL_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_result_abnormal_list;

    FUNCTION get_exam_result_origin_list
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT val data, rank, desc_val label, NULL flg_default
              FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang, i_prof, 'EXAM_RESULT.FLG_RESULT_ORIGIN', NULL)) s
             ORDER BY rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_RESULT_ORIGIN_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_exam_result_origin_list;

    FUNCTION get_exam_result_notes_list
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        o_result_notes OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'OPEN CURSOR';
        OPEN o_result_notes FOR
            SELECT id_result_notes, desc_result_notes, flg_free_text
              FROM (SELECT r.id_result_notes,
                           pk_translation.get_translation(i_lang, r.code_result_notes) desc_result_notes,
                           r.flg_free_text,
                           r.rank
                      FROM (SELECT rn.id_result_notes,
                                   rn.code_result_notes,
                                   rn.flg_free_text,
                                   rnis.rank,
                                   row_number() over(PARTITION BY rnis.id_result_notes ORDER BY rnis.id_institution DESC, rnis.id_software DESC) rn
                              FROM result_notes_instit_soft rnis
                             INNER JOIN result_notes rn
                                ON rn.id_result_notes = rnis.id_result_notes
                             WHERE rnis.id_institution = i_prof.institution
                               AND rnis.id_software IN (0, i_prof.software)
                               AND rnis.flg_available = pk_exam_constant.g_yes) r
                     WHERE r.rn = 1)
             ORDER BY rank, desc_result_notes;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_RESULT_NOTES_LIST',
                                              o_error);
        
            pk_types.open_my_cursor(o_result_notes);
            RETURN FALSE;
    END get_exam_result_notes_list;

    FUNCTION get_exam_result_diagnosis_list
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_exam_req_det IN table_number,
        o_list         OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_search_diagnosis sys_config.value%TYPE := pk_sysconfig.get_config('PERMISSION_FOR_SEARCH_DIAGNOSIS', i_prof);
    
        l_search_diagnosis_exam sys_config.value%TYPE := pk_sysconfig.get_config('EXAMS_RESULT_DIAGNOSIS_SEARCH',
                                                                                 i_prof);
    
        l_profile_template profile_template.id_profile_template%TYPE := pk_prof_utils.get_prof_profile_template(i_prof);
    
        l_task_type  table_number;
        l_id_content table_varchar;
    
    BEGIN
    
        SELECT decode(e.flg_type,
                      pk_exam_constant.g_type_img,
                      pk_alert_constant.g_task_diag_result_exams,
                      pk_alert_constant.g_task_diag_result_oth_exams),
               e.id_content
          BULK COLLECT
          INTO l_task_type, l_id_content
          FROM exam_req_det erd, exam e
         WHERE erd.id_exam_req_det IN (SELECT /*+opt_estimate (table t rows=1)*/
                                        *
                                         FROM TABLE(i_exam_req_det) t)
           AND erd.id_exam = e.id_exam;
    
        g_error := 'GET CURSOR';
        OPEN o_list FOR
            SELECT id_diagnosis, desc_diagnosis, code_icd, flg_other, rank, id_alert_diagnosis
              FROM (SELECT NULL id_diagnosis,
                           pk_message.get_message(i_lang, i_prof, 'EXAMS_M005') || ' (' || desc_terminology || ')' desc_diagnosis,
                           NULL code_icd,
                           NULL flg_other,
                           10 rank,
                           NULL id_alert_diagnosis
                      FROM TABLE(pk_diagnosis_core.tf_diag_terminologies(i_lang, i_prof, l_task_type))
                     WHERE l_search_diagnosis_exam = pk_alert_constant.g_yes
                       AND instr(nvl(l_search_diagnosis, '#'), l_profile_template) != 0
                    UNION ALL
                    SELECT id_diagnosis, desc_diagnosis, code_icd, flg_other, 20 rank, id_alert_diagnosis
                      FROM TABLE(pk_diagnosis_core.tf_diag_terminologies(i_lang,
                                                                         i_prof,
                                                                         l_task_type,
                                                                         l_id_content,
                                                                         'INTERPRETS')))
             ORDER BY rank ASC, desc_diagnosis ASC;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_RESULT_DIAGNOSIS_LIST',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
        
    END get_exam_result_diagnosis_list;

    FUNCTION get_exam_result_category_list
    (
        i_lang      IN language.id_language%TYPE,
        i_prof      IN profissional,
        i_patient   IN patient.id_patient%TYPE,
        i_exam_type IN exam.flg_type%TYPE,
        o_list      OUT pk_types.cursor_type,
        o_error     OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'OPEN O_LIST';
        OPEN o_list FOR
            SELECT id_exam_cat,
                   pk_translation.get_translation(i_lang, 'EXAM_CAT.CODE_EXAM_CAT.' || id_exam_cat) desc_category,
                   nvl(t.cnt, 0) num_category
              FROM (SELECT id_exam_cat, COUNT(id_exam_req_det) cnt
                      FROM (SELECT eea.id_exam_cat, eea.id_exam_req_det
                              FROM exams_ea eea
                             WHERE eea.id_patient = i_patient
                               AND (eea.flg_type = i_exam_type OR i_exam_type = 'A')
                               AND eea.id_exam_result IS NOT NULL)
                     GROUP BY id_exam_cat) t;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_RESULT_CATEGORY_LIST',
                                              o_error);
            RETURN FALSE;
    END get_exam_result_category_list;

    PROCEDURE l_______________(i_lang IN language.id_language%TYPE) IS
    BEGIN
        dbms_output.put_line(i_lang);
    END;

    FUNCTION get_exam_questionnaire_resp
    (
        i_lang                   IN language.id_language%TYPE,
        i_prof                   IN profissional,
        i_exam_req_det           IN exam_question_response.id_exam_req_det%TYPE,
        i_flg_time               IN exam_question_response.flg_time%TYPE,
        o_exam_question_response OUT pk_types.cursor_type,
        o_error                  OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'OPEN O_EXAM_QUESTION_RESPONSE';
        OPEN o_exam_question_response FOR
            SELECT eqr.id_questionnaire, eqr.id_response, eqr.desc_response
              FROM (SELECT eqr.id_questionnaire,
                           eqr.id_response,
                           decode(eqr.id_response,
                                  NULL,
                                  pk_exam_utils.get_exam_response(i_lang, i_prof, eqr.notes),
                                  pk_translation.get_translation(i_lang, 'RESPONSE.CODE_RESPONSE.' || eqr.id_response)) desc_response,
                           row_number() over(PARTITION BY eqr.id_questionnaire ORDER BY eqr.dt_last_update_tstz DESC NULLS FIRST) rn
                      FROM exam_question_response eqr
                     WHERE eqr.id_exam_req_det = i_exam_req_det
                       AND eqr.flg_time = i_flg_time) eqr
             WHERE rn = 1;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_QUESTIONNAIRE_RESP',
                                              o_error);
            RETURN FALSE;
    END get_exam_questionnaire_resp;

    FUNCTION get_exam_documents_list
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_exam_req_det IN exam_question_response.id_exam_req_det%TYPE,
        o_list         OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_msg_image2 sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T104');
    
    BEGIN
    
        g_error := 'OPEN O_LIST';
        OPEN o_list FOR
            SELECT id_doc_external flg_type, doc_title, num_img, dt_doc
              FROM (SELECT t.flg_type,
                           t.id_doc_external,
                           t.doc_title,
                           t.num_img,
                           t.dt_exam_result_tstz dt_doc,
                           1 rank_section,
                           row_number() over(PARTITION BY t.id_exam_req_det ORDER BY t.dt_exam_result_tstz DESC) AS rank
                      FROM (SELECT er.id_exam_req_det,
                                   ema.flg_type,
                                   ema.id_doc_external,
                                   de.title doc_title,
                                   pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external) num_img,
                                   er.dt_exam_result_tstz
                              FROM exam_result er
                              JOIN exam_media_archive ema
                                ON er.id_exam_result = ema.id_exam_result
                              JOIN doc_external de
                                ON ema.id_doc_external = de.id_doc_external
                             WHERE er.id_exam_req_det = i_exam_req_det
                               AND ema.flg_type = pk_exam_constant.g_media_archive_exam_result
                               AND de.flg_status = pk_alert_constant.g_active
                            UNION ALL
                            SELECT er.id_exam_req_det,
                                   pk_exam_constant.g_media_archive_exam_result flg_type,
                                   er.id_external_doc id_doc_external,
                                   l_msg_image2 || rownum doc_title,
                                   NULL num_img,
                                   er.dt_exam_result_tstz
                              FROM exam_result er
                             WHERE er.id_exam_req_det = i_exam_req_det
                               AND er.id_external_doc IS NOT NULL) t
                    UNION ALL
                    SELECT t.flg_type,
                           t.id_doc_external,
                           t.doc_title,
                           t.num_img,
                           t.dt_inserted dt_doc,
                           2 rank_section,
                           row_number() over(PARTITION BY t.id_exam_req_det ORDER BY t.dt_inserted DESC) AS rank
                      FROM (SELECT ema.id_exam_req_det,
                                   ema.flg_type,
                                   ema.id_doc_external,
                                   de.title doc_title,
                                   pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external) num_img,
                                   de.dt_inserted
                              FROM exam_media_archive ema
                              JOIN doc_external de
                                ON ema.id_doc_external = de.id_doc_external
                             WHERE ema.id_exam_req_det = i_exam_req_det
                               AND ema.flg_type = pk_exam_constant.g_media_archive_exam_doc
                               AND ema.flg_status = pk_exam_constant.g_active) t
                     ORDER BY rank_section, rank);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_DOCUMENTS_LIST',
                                              o_error);
            RETURN FALSE;
    END get_exam_documents_list;

    FUNCTION get_exam_default_values
    (
        i_lang           IN NUMBER,
        i_prof           IN profissional,
        i_episode        IN NUMBER,
        i_patient        IN NUMBER,
        i_action         IN NUMBER,
        i_root_name      IN VARCHAR2,
        i_curr_component IN NUMBER,
        i_idx            IN NUMBER DEFAULT 1,
        i_tbl_id_pk      IN table_number,
        i_tbl_mkt_rel    IN table_number,
        i_tbl_int_name   IN table_varchar,
        i_value          IN table_table_varchar,
        i_value_desc     IN table_table_varchar,
        i_tbl_data       IN table_table_varchar,
        i_value_clob     IN table_clob,
        i_tbl_result     IN OUT t_tbl_ds_get_value,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
        l_epis_type             epis_type.id_epis_type%TYPE;
        l_value_to_execute      VARCHAR2(4000);
        l_value_to_execute_desc VARCHAR2(4000);
        l_flg_time              sys_config.value%TYPE;
        l_flg_fast_default      sys_config.value%TYPE;
    
        l_ds_internal_name ds_component.internal_name%TYPE;
        l_id_ds_component  ds_component.id_ds_component%TYPE;
    
        l_value      VARCHAR2(4000);
        l_value_desc VARCHAR2(4000);
    
        l_tbl_varchar_aux table_varchar := table_varchar();
        l_tbl_aux         t_tbl_core_domain := t_tbl_core_domain();
    
        l_dummy_cursor pk_types.cursor_type;
    
        l_tbl_supplies pk_supplies_core.tbl_supplies_by_context := pk_supplies_core.tbl_supplies_by_context();
    
    BEGIN
    
        FOR i IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
        LOOP
            l_value      := NULL;
            l_value_desc := NULL;
        
            IF i_tbl_int_name(i) = pk_orders_constant.g_ds_priority
            THEN
                l_id_ds_component := pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i));
            
                IF NOT pk_exam_core.get_exam_default_priority(i_lang       => i_lang,
                                                              i_prof       => i_prof,
                                                              i_exam       => to_number(i_tbl_data(i_idx) (1)),
                                                              i_value      => l_value,
                                                              i_desc_value => l_value_desc)
                THEN
                    l_value      := NULL;
                    l_value_desc := NULL;
                END IF;
            
                i_tbl_result.extend();
                i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                       id_ds_component    => l_id_ds_component,
                                                                       internal_name      => i_tbl_int_name(i),
                                                                       VALUE              => l_value,
                                                                       value_clob         => NULL,
                                                                       min_value          => NULL,
                                                                       max_value          => NULL,
                                                                       desc_value         => l_value_desc,
                                                                       desc_clob          => NULL,
                                                                       id_unit_measure    => NULL,
                                                                       desc_unit_measure  => NULL,
                                                                       flg_validation     => pk_orders_constant.g_component_valid,
                                                                       err_msg            => NULL,
                                                                       flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                       flg_multi_status   => pk_alert_constant.g_no,
                                                                       idx                => i_idx);
            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_prn
            THEN
                l_id_ds_component := pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i));
            
                SELECT data, label
                  INTO l_value, l_value_desc
                  FROM (SELECT data, label
                          FROM (SELECT /*+opt_estimate(table s rows=1)*/
                                 s.val data,
                                 s.rank,
                                 s.desc_val label,
                                 decode(s.val, pk_exam_constant.g_no, pk_exam_constant.g_yes, pk_exam_constant.g_no) flg_default
                                  FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang,
                                                                                      i_prof,
                                                                                      'EXAM_REQ_DET.FLG_PRN',
                                                                                      NULL)) s)
                         WHERE (flg_default = pk_alert_constant.g_yes AND rownum = 1));
            
                i_tbl_result.extend();
                i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                       id_ds_component    => l_id_ds_component,
                                                                       internal_name      => i_tbl_int_name(i),
                                                                       VALUE              => l_value,
                                                                       min_value          => NULL,
                                                                       max_value          => NULL,
                                                                       value_clob         => NULL,
                                                                       desc_value         => l_value_desc,
                                                                       desc_clob          => NULL,
                                                                       id_unit_measure    => NULL,
                                                                       desc_unit_measure  => NULL,
                                                                       flg_validation     => pk_orders_constant.g_component_valid,
                                                                       err_msg            => NULL,
                                                                       flg_event_type     => pk_orders_constant.g_component_active,
                                                                       flg_multi_status   => NULL,
                                                                       idx                => i_idx);
            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_fasting
            THEN
                l_id_ds_component := pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i));
            
                l_flg_fast_default := pk_sysconfig.get_config('EXM_OTHR_REQ_FLG_FASTING_DEFAULT', i_prof);
            
                SELECT data, label
                  INTO l_value, l_value_desc
                  FROM (SELECT data, label
                          FROM (SELECT /*+opt_estimate(table s rows=1)*/
                                 s.val data,
                                 s.rank,
                                 s.desc_val label,
                                 decode(s.val, l_flg_fast_default, pk_exam_constant.g_yes, pk_exam_constant.g_no) flg_default
                                  FROM TABLE(pk_sysdomain.get_values_domain_pipelined(i_lang,
                                                                                      i_prof,
                                                                                      'EXAM_REQ_DET.FLG_FASTING',
                                                                                      NULL)) s)
                         WHERE (flg_default = pk_alert_constant.g_yes AND rownum = 1));
            
                i_tbl_result.extend();
                i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                       id_ds_component    => l_id_ds_component,
                                                                       internal_name      => i_tbl_int_name(i),
                                                                       VALUE              => l_value,
                                                                       min_value          => NULL,
                                                                       max_value          => NULL,
                                                                       value_clob         => NULL,
                                                                       desc_value         => l_value_desc,
                                                                       desc_clob          => NULL,
                                                                       id_unit_measure    => NULL,
                                                                       desc_unit_measure  => NULL,
                                                                       flg_validation     => pk_orders_constant.g_component_valid,
                                                                       err_msg            => NULL,
                                                                       flg_event_type     => pk_orders_constant.g_component_active,
                                                                       flg_multi_status   => NULL,
                                                                       idx                => i_idx);
            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_location
            THEN
                l_id_ds_component := pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i));
            
                l_tbl_aux := pk_exam_core.get_exam_location(i_lang    => i_lang,
                                                            i_prof    => i_prof,
                                                            i_exams   => table_number(to_number(i_tbl_data(i_idx) (1))),
                                                            i_default => pk_alert_constant.g_yes);
            
                IF l_tbl_aux.count > 0
                THEN
                    l_value      := l_tbl_aux(1).domain_value;
                    l_value_desc := l_tbl_aux(1).desc_domain;
                END IF;
            
                IF l_value IS NOT NULL
                THEN
                    i_tbl_result.extend();
                    i_tbl_result(i_tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                           id_ds_component    => l_id_ds_component,
                                                                           internal_name      => i_tbl_int_name(i),
                                                                           VALUE              => l_value,
                                                                           min_value          => NULL,
                                                                           max_value          => NULL,
                                                                           value_clob         => NULL,
                                                                           desc_value         => l_value_desc,
                                                                           desc_clob          => NULL,
                                                                           id_unit_measure    => NULL,
                                                                           desc_unit_measure  => NULL,
                                                                           flg_validation     => NULL,
                                                                           err_msg            => NULL,
                                                                           flg_event_type     => pk_orders_constant.g_component_active,
                                                                           flg_multi_status   => NULL,
                                                                           idx                => i_idx);
                END IF;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_package_owner,
                                              g_package_name,
                                              'GET_EXAM_DEFAULT_VALUES',
                                              o_error);
            RETURN FALSE;
    END get_exam_default_values;

    FUNCTION tf_get_exam_order
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exams_detail IS
    
        CURSOR c_schedule IS
            SELECT sg.flg_ref_type, sg.id_prof_ref, sg.id_inst_ref
              FROM sch_group sg, schedule_exam se
             WHERE sg.id_schedule = se.id_schedule;
    
        l_schedule c_schedule%ROWTYPE;
    
        l_msg_reg  sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
        l_msg_date sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAM_REQ_M002');
    
        l_health_insurance sys_config.value%TYPE := pk_sysconfig.get_config('MCDT_HEALTH_INSURANCE', i_prof);
        l_dbc              sys_config.value%TYPE := pk_sysconfig.get_config('MCDT_DBC', i_prof);
    
        l_ret t_tbl_exams_detail := t_tbl_exams_detail();
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        g_error := 'OPEN C_SCHEDULE';
        OPEN c_schedule;
        FETCH c_schedule
            INTO l_schedule;
        CLOSE c_schedule;
    
        WITH cso_table AS
         (SELECT *
            FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                i_prof,
                                                                i_episode,
                                                                NULL,
                                                                NULL,
                                                                NULL,
                                                                i_exam_req_det)))
        SELECT t_exams_detail(id_exam_req_det,
                              registry,
                              desc_exam,
                              num_order,
                              clinical_indication,
                              diagnosis_notes,
                              desc_diagnosis,
                              clinical_purpose,
                              laterality,
                              instructions,
                              priority,
                              desc_status,
                              title_order_set,
                              task_depend,
                              desc_time,
                              desc_time_limit,
                              order_recurrence,
                              weeks_pregnant,
                              trimester,
                              prn,
                              notes_prn,
                              patient_instructions,
                              fasting,
                              notes_patient,
                              execution,
                              perform_location,
                              notes_scheduler,
                              notes_technician,
                              notes,
                              co_sign,
                              prof_order,
                              dt_order,
                              order_type,
                              co_sign_status,
                              health_insurance,
                              financial_entity,
                              health_plan,
                              insurance_number,
                              exemption,
                              ref_type,
                              referrer,
                              cancellation,
                              cancel_reason,
                              cancel_notes,
                              cancel_prof_order,
                              cancel_dt_order,
                              cancel_order_type,
                              dt_last_update,
                              dt_ord)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT /*+ opt_estimate(table p rows=1) opt_estimate(table cso rows=2) opt_estimate(table csc rows=2) */
                 erd.id_exam_req_det,
                 l_msg_reg || ' ' ||
                 pk_prof_utils.get_name_signature(i_lang,
                                                  i_prof,
                                                  coalesce(erd.id_prof_cancel, erd.id_prof_last_update, er.id_prof_req)) ||
                 decode(pk_prof_utils.get_spec_signature(i_lang,
                                                         i_prof,
                                                         coalesce(erd.id_prof_cancel,
                                                                  erd.id_prof_last_update,
                                                                  er.id_prof_req),
                                                         coalesce(erd.dt_cancel_tstz,
                                                                  erd.dt_last_update_tstz,
                                                                  er.dt_req_tstz),
                                                         er.id_episode),
                        NULL,
                        '; ',
                        ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                 i_prof,
                                                                 coalesce(erd.id_prof_cancel,
                                                                          erd.id_prof_last_update,
                                                                          er.id_prof_req),
                                                                 coalesce(erd.dt_cancel_tstz,
                                                                          erd.dt_last_update_tstz,
                                                                          er.dt_req_tstz),
                                                                 er.id_episode) || '); ') ||
                 pk_date_utils.date_char_tsz(i_lang,
                                             coalesce(erd.dt_cancel_tstz, erd.dt_last_update_tstz, er.dt_req_tstz),
                                             i_prof.institution,
                                             i_prof.software) registry,
                 decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T037'), '') ||
                 pk_exam_utils.get_alias_translation(i_lang, i_prof, e.code_exam, NULL) desc_exam,
                 decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T138'), '') || erd.id_exam_req num_order,
                 aa_code_messages('EXAMS_T046') clinical_indication,
                 decode(erd.diagnosis_notes,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T047'), '') ||
                        erd.diagnosis_notes) diagnosis_notes,
                 decode(pk_diagnosis.concat_diag(i_lang, erd.id_exam_req_det, NULL, NULL, i_prof),
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('COMMON_T062'), '') ||
                        pk_diagnosis.concat_diag(i_lang, erd.id_exam_req_det, NULL, NULL, i_prof)) desc_diagnosis,
                 decode(erd.id_clinical_purpose,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T054'), '') ||
                        decode(erd.id_clinical_purpose,
                               0,
                               erd.clinical_purpose_notes,
                               pk_translation.get_translation(i_lang,
                                                              'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                              erd.id_clinical_purpose))) clinical_purpose,
                 decode(erd.flg_laterality,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T223'), '') ||
                        pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LATERALITY', erd.flg_laterality, i_lang)) laterality,
                 aa_code_messages('EXAMS_T016') instructions,
                 decode(erd.flg_priority,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T033'), '') ||
                        pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ_DET.FLG_PRIORITY', erd.flg_priority, NULL)) priority,
                 decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T035'), '') ||
                 decode(erd.flg_referral,
                        pk_exam_constant.g_flg_referral_r,
                        pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL', erd.flg_referral, i_lang),
                        pk_exam_constant.g_flg_referral_s,
                        pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL', erd.flg_referral, i_lang),
                        pk_exam_constant.g_flg_referral_i,
                        pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL', erd.flg_referral, i_lang),
                        decode(erd.flg_status,
                               pk_exam_constant.g_exam_sos,
                               pk_sysdomain.get_domain(i_lang,
                                                       i_prof,
                                                       'EXAM_REQ_DET.FLG_STATUS',
                                                       pk_exam_constant.g_exam_req,
                                                       NULL),
                               pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ_DET.FLG_STATUS', erd.flg_status, NULL))) desc_status,
                 decode(pk_api_order_sets.get_order_set_title(i_lang,
                                                              i_prof,
                                                              erd.id_exam_req_det,
                                                              decode(e.flg_type,
                                                                     pk_exam_constant.g_type_img,
                                                                     pk_order_sets.g_odst_task_image_exam,
                                                                     pk_exam_constant.g_type_exm,
                                                                     pk_order_sets.g_odst_task_other_exam)),
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T139'), '') ||
                        pk_api_order_sets.get_order_set_title(i_lang,
                                                              i_prof,
                                                              erd.id_exam_req_det,
                                                              decode(e.flg_type,
                                                                     pk_exam_constant.g_type_img,
                                                                     pk_order_sets.g_odst_task_image_exam,
                                                                     pk_exam_constant.g_type_exm,
                                                                     pk_order_sets.g_odst_task_other_exam))) title_order_set,
                 decode(pk_tde_db.get_task_depend_str(i_lang, i_prof, erd.id_task_dependency),
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T141'), '') ||
                        pk_tde_db.get_task_depend_str(i_lang, i_prof, erd.id_task_dependency)) task_depend,
                 decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T034'), '') ||
                 pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', er.flg_time, NULL) ||
                 decode(erd.dt_target_tstz,
                        NULL,
                        decode(er.dt_schedule_tstz,
                               NULL,
                               NULL,
                               ' (' || decode(i_flg_report, pk_exam_constant.g_yes, '<b>') ||
                               decode(i_flg_report,
                                      pk_exam_constant.g_yes,
                                      pk_date_utils.date_chr_short_read_tsz(i_lang,
                                                                            er.dt_schedule_tstz,
                                                                            i_prof.institution,
                                                                            i_prof.software),
                                      pk_date_utils.date_char_tsz(i_lang,
                                                                  er.dt_schedule_tstz,
                                                                  i_prof.institution,
                                                                  i_prof.software)) ||
                               decode(i_flg_report, pk_exam_constant.g_yes, '</b> ') || ' - ' || l_msg_date || ')'),
                        ' (' || decode(i_flg_report, pk_exam_constant.g_yes, '<b>') ||
                        decode(i_flg_report,
                               pk_exam_constant.g_yes,
                               pk_date_utils.date_chr_short_read_tsz(i_lang,
                                                                     erd.dt_target_tstz,
                                                                     i_prof.institution,
                                                                     i_prof.software),
                               pk_date_utils.date_char_tsz(i_lang, erd.dt_target_tstz, i_prof.institution, i_prof.software)) ||
                        decode(i_flg_report, pk_exam_constant.g_yes, '</b>') || ')') desc_time,
                 decode(erd.dt_final_target_tstz,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T174'), '') ||
                        pk_date_utils.date_char_tsz(i_lang, erd.dt_final_target_tstz, i_prof.institution, i_prof.software)) desc_time_limit,
                 decode(erd.id_order_recurrence,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T159'), '') ||
                        pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang, i_prof, erd.id_order_recurrence)) order_recurrence,
                 decode(p.weeks_pregnant,
                        NULL,
                        NULL,
                        decode(i_flg_report,
                               pk_exam_constant.g_no,
                               '<b>' || p.label_weeks || '</b> ' || p.weeks_pregnant,
                               p.weeks_pregnant)) weeks_pregnant,
                 decode(p.trimester,
                        NULL,
                        NULL,
                        decode(i_flg_report,
                               pk_exam_constant.g_no,
                               '<b>' || p.label_trimester || '</b> ' || p.trimester,
                               p.trimester)) trimester,
                 decode(erd.flg_prn,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T164'), '') ||
                        pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_PRN', erd.flg_prn, i_lang)) prn,
                 decode(dbms_lob.getlength(erd.prn_notes),
                        NULL,
                        to_clob(''),
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T165'), '') || erd.prn_notes) notes_prn,
                 aa_code_messages('EXAMS_T166') patient_instructions,
                 decode(erd.flg_fasting,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T167'), '') ||
                        pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_FASTING', erd.flg_fasting, i_lang)) fasting,
                 decode(dbms_lob.getlength(erd.notes_patient),
                        NULL,
                        to_clob(''),
                        0,
                        to_clob(''),
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T020'), '') ||
                        erd.notes_patient) notes_patient,
                 aa_code_messages('EXAMS_T176') execution,
                 decode(erd.flg_location,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T053'), '') ||
                        decode(erd.flg_location,
                               pk_exam_constant.g_exam_location_interior,
                               decode(erd.id_room,
                                      NULL,
                                      pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION', erd.flg_location, i_lang),
                                      pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION', erd.flg_location, i_lang) ||
                                      ' - ' ||
                                      nvl((SELECT r.desc_room
                                            FROM room r
                                           WHERE r.id_room = erd.id_room),
                                          pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || erd.id_room))),
                               decode(erd.id_exec_institution,
                                      NULL,
                                      pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION', erd.flg_location, i_lang),
                                      pk_translation.get_translation(i_lang,
                                                                     'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                     erd.id_exec_institution)))) perform_location,
                 decode(erd.notes_scheduler,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T019'), '') ||
                        erd.notes_scheduler) notes_scheduler,
                 decode(erd.notes_tech,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T059'), '') || erd.notes_tech) notes_technician,
                 decode(erd.notes,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T258'), '') || erd.notes) notes,
                 aa_code_messages('EXAMS_T172') co_sign,
                 decode(cso.desc_prof_ordered_by,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T031'), '') ||
                        cso.desc_prof_ordered_by) prof_order,
                 decode(cso.dt_ordered_by,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T058'), '') ||
                        pk_date_utils.date_char_tsz(i_lang, cso.dt_ordered_by, i_prof.institution, i_prof.software)) dt_order,
                 decode(cso.id_order_type,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T126'), '') ||
                        cso.desc_order_type) order_type,
                 cso.flg_status co_sign_status,
                 aa_code_messages('EXAMS_T168') health_insurance,
                 decode(l_health_insurance,
                        pk_exam_constant.g_no,
                        NULL,
                        decode(erd.id_pat_health_plan,
                               NULL,
                               NULL,
                               decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T169'), '') ||
                               pk_adt.get_pat_health_plan_info(i_lang, i_prof, erd.id_pat_health_plan, 'F'))) financial_entity,
                 decode(l_health_insurance,
                        pk_exam_constant.g_no,
                        NULL,
                        decode(erd.id_pat_health_plan,
                               NULL,
                               NULL,
                               decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T170'), '') ||
                               pk_adt.get_pat_health_plan_info(i_lang, i_prof, erd.id_pat_health_plan, 'H'))) health_plan,
                 decode(l_health_insurance,
                        pk_exam_constant.g_no,
                        NULL,
                        decode(erd.id_pat_health_plan,
                               NULL,
                               NULL,
                               decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T171'), '') ||
                               pk_adt.get_pat_health_plan_info(i_lang, i_prof, erd.id_pat_health_plan, 'N'))) insurance_number,
                 decode(l_health_insurance,
                        pk_exam_constant.g_no,
                        NULL,
                        decode(erd.id_pat_exemption,
                               NULL,
                               NULL,
                               decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T246'), '') ||
                               pk_adt.get_pat_exemption_detail(i_lang, i_prof, erd.id_pat_exemption))) exemption,
                 decode(l_dbc,
                        pk_exam_constant.g_no,
                        NULL,
                        decode(l_schedule.flg_ref_type,
                               NULL,
                               NULL,
                               decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T126'), '') ||
                               pk_sysdomain.get_domain('SCH_GROUP.FLG_REF_TYPE', l_schedule.flg_ref_type, i_lang))) ref_type,
                 decode(l_dbc,
                        pk_exam_constant.g_no,
                        NULL,
                        decode(l_schedule.id_prof_ref,
                               NULL,
                               decode(l_schedule.id_inst_ref,
                                      NULL,
                                      NULL,
                                      decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T126'), '') ||
                                      pk_translation.get_translation(i_lang,
                                                                     'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                     l_schedule.id_inst_ref)),
                               aa_code_messages('EXAMS_T126') ||
                               pk_prof_utils.get_name_signature(i_lang, i_prof, l_schedule.id_prof_ref))) referrer,
                 CASE
                      WHEN erd.flg_status = pk_exam_constant.g_exam_read
                           AND erd.id_cancel_reason IS NOT NULL THEN
                       aa_code_messages('COMMON_M035')
                      ELSE
                       aa_code_messages('EXAMS_T256')
                  END cancellation,
                 decode(erd.id_cancel_reason,
                         NULL,
                         NULL,
                         decode(i_flg_report,
                                pk_exam_constant.g_no,
                                CASE
                                    WHEN erd.flg_status = pk_exam_constant.g_exam_read
                                         AND erd.id_cancel_reason IS NOT NULL THEN
                                     aa_code_messages('EXAMS_T268')
                                    ELSE
                                     aa_code_messages('EXAMS_T025')
                                END,
                                '') || pk_cancel_reason.get_cancel_reason_desc(i_lang, i_prof, erd.id_cancel_reason)) cancel_reason,
                 decode(erd.notes_cancel,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T009'), '') ||
                        erd.notes_cancel) cancel_notes,
                 decode(csc.desc_prof_ordered_by,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T031'), '') ||
                        csc.desc_prof_ordered_by) cancel_prof_order,
                 decode(csc.dt_ordered_by,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T058'), '') ||
                        pk_date_utils.date_char_tsz(i_lang, csc.dt_ordered_by, i_prof.institution, i_prof.software)) cancel_dt_order,
                 decode(csc.id_order_type,
                        NULL,
                        NULL,
                        decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T126'), '') ||
                        csc.desc_order_type) cancel_order_type,
                 NULL dt_last_update,
                 pk_date_utils.date_send_tsz(i_lang, er.dt_req_tstz, i_prof) dt_ord
                  FROM exam_req_det erd,
                       exam_req er,
                       exam e,
                       TABLE(pk_pregnancy_exam.tf_get_pregn_result_det(i_lang, i_prof, i_exam_req_det)) p,
                       cso_table cso,
                       cso_table csc
                 WHERE erd.id_exam_req_det = i_exam_req_det
                   AND erd.id_exam_req = er.id_exam_req
                   AND erd.id_exam = e.id_exam
                   AND erd.id_pat_pregnancy = p.id_pat_pregnancy(+)
                   AND erd.id_co_sign_order = cso.id_co_sign_hist(+)
                   AND erd.id_co_sign_cancel = csc.id_co_sign_hist(+));
        RETURN l_ret;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exams_detail();
    END tf_get_exam_order;

    FUNCTION tf_get_exam_order_history
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_flg_html         IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exams_detail IS
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        l_msg_reg  sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
        l_msg_date sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAM_REQ_M002');
        l_msg_del  sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M106');
    
        l_health_insurance sys_config.value%TYPE := pk_sysconfig.get_config('MCDT_HEALTH_INSURANCE', i_prof);
    
        l_formated_text VARCHAR2(100 CHAR) := CASE i_flg_html
                                                  WHEN pk_alert_constant.g_yes THEN
                                                   '<br> '
                                                  ELSE
                                                   '<br>' || chr(9) || chr(32) || chr(32)
                                              END;
    
        l_update_tag_flash VARCHAR2(1 CHAR) := CASE i_flg_html
                                                   WHEN pk_alert_constant.g_yes THEN
                                                    NULL
                                                   ELSE
                                                    '§'
                                               END;
    
        l_ret t_tbl_exams_detail := t_tbl_exams_detail();
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        
            g_error := 'GET MESSAGES UPDATE';
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail_upd.first .. pk_exam_constant.ga_code_messages_exam_detail_upd.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail_upd(i)) := CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '<span class="emphasizedRedDetail">'
                                                                                              ELSE
                                                                                               '<b>'
                                                                                          END ||
                                                                                          pk_message.get_message(i_lang,
                                                                                                                 i_prof,
                                                                                                                 pk_exam_constant.ga_code_messages_exam_detail_upd(i)) ||
                                                                                          CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '</span> '
                                                                                              ELSE
                                                                                               '</b> '
                                                                                          END;
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        g_error := 'OPEN O_EXAM_ORDER';
        WITH cso_table AS
         (SELECT *
            FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                i_prof,
                                                                i_episode,
                                                                NULL,
                                                                NULL,
                                                                NULL,
                                                                i_exam_req_det)))
        SELECT t_exams_detail(id_exam_req_det,
                              registry,
                              desc_exam,
                              num_order,
                              clinical_indication,
                              diagnosis_notes,
                              desc_diagnosis,
                              clinical_purpose,
                              laterality,
                              instructions,
                              priority,
                              desc_status,
                              title_order_set,
                              task_depend,
                              desc_time,
                              desc_time_limit,
                              order_recurrence,
                              weeks_pregnant,
                              trimester,
                              prn,
                              notes_prn,
                              patient_instructions,
                              fasting,
                              notes_patient,
                              execution,
                              perform_location,
                              notes_scheduler,
                              notes_technician,
                              notes,
                              co_sign,
                              prof_order,
                              dt_order,
                              order_type,
                              co_sign_status,
                              health_insurance,
                              financial_entity,
                              health_plan,
                              insurance_number,
                              exemption,
                              ref_type,
                              referrer,
                              cancellation,
                              cancel_reason,
                              cancel_notes,
                              cancel_prof_order,
                              cancel_dt_order,
                              cancel_order_type,
                              dt_last_update,
                              dt_ord)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT erd.id_exam_req_det,
                       decode(cnt,
                              rn,
                              l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, erd.id_prof_req) ||
                              decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                      i_prof,
                                                                      erd.id_prof_req,
                                                                      erd.dt_req_tstz,
                                                                      erd.id_episode),
                                     NULL,
                                     '; ',
                                     ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                              i_prof,
                                                                              erd.id_prof_req,
                                                                              erd.dt_req_tstz,
                                                                              erd.id_episode) || '); ') ||
                              pk_date_utils.date_char_tsz(i_lang, erd.dt_req_tstz, i_prof.institution, i_prof.software),
                              l_msg_reg || ' ' ||
                              pk_prof_utils.get_name_signature(i_lang,
                                                               i_prof,
                                                               coalesce(erd.operation_user_new,
                                                                        erd.id_prof_cancel,
                                                                        erd.id_prof_req)) ||
                              decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                      i_prof,
                                                                      coalesce(erd.operation_user_new,
                                                                               erd.id_prof_cancel,
                                                                               erd.id_prof_req),
                                                                      coalesce(erd.operation_time_new,
                                                                               erd.dt_cancel_tstz,
                                                                               erd.dt_req_tstz),
                                                                      erd.id_episode),
                                     NULL,
                                     '; ',
                                     ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                              i_prof,
                                                                              coalesce(erd.operation_user_new,
                                                                                       erd.id_prof_cancel,
                                                                                       erd.id_prof_req),
                                                                              coalesce(erd.operation_time_new,
                                                                                       erd.dt_cancel_tstz,
                                                                                       erd.dt_req_tstz),
                                                                              erd.id_episode) || '); ') ||
                              pk_date_utils.date_char_tsz(i_lang,
                                                          coalesce(erd.operation_time_new,
                                                                   erd.dt_cancel_tstz,
                                                                   erd.dt_req_tstz),
                                                          i_prof.institution,
                                                          i_prof.software)) registry,
                       decode(cnt,
                              rn,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T037'), '') ||
                              pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || erd.id_exam, NULL),
                              decode(erd.id_exam,
                                     erd.id_exam_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T189') || l_update_tag_flash ||
                                            pk_exam_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                'EXAM.CODE_EXAM.' || erd.id_exam,
                                                                                NULL) || l_formated_text ||
                                            aa_code_messages('EXAMS_T037') ||
                                            pk_exam_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                'EXAM.CODE_EXAM.' || erd.id_exam_new,
                                                                                NULL),
                                            pk_exam_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                'EXAM.CODE_EXAM.' || erd.id_exam,
                                                                                NULL) || l_update_tag_flash ||
                                            pk_exam_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                'EXAM.CODE_EXAM.' || erd.id_exam_new,
                                                                                NULL)))) desc_exam,
                       decode(cnt,
                              rn,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T138'), '') ||
                              erd.id_exam_req,
                              decode(erd.id_exam_req,
                                     erd.id_exam_req_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T207') || l_update_tag_flash || erd.id_exam_req ||
                                            l_formated_text || aa_code_messages('EXAMS_T138') || erd.id_exam_req_new,
                                            erd.id_exam_req || l_update_tag_flash || erd.id_exam_req_new))) num_order,
                       aa_code_messages('EXAMS_T046') clinical_indication,
                       decode(cnt,
                              rn,
                              decode(erd.diagnosis_notes,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T047'), '') ||
                                     erd.diagnosis_notes),
                              decode(erd.diagnosis_notes,
                                     erd.diagnosis_notes_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T190') || l_update_tag_flash ||
                                            decode(erd.diagnosis_notes, NULL, l_msg_del, erd.diagnosis_notes) ||
                                            decode(erd.diagnosis_notes_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T047') ||
                                                   erd.diagnosis_notes_new),
                                            decode(erd.diagnosis_notes, NULL, l_msg_del, erd.diagnosis_notes) ||
                                            decode(erd.diagnosis_notes_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash || erd.diagnosis_notes_new)))) diagnosis_notes,
                       decode(cnt,
                              rn,
                              decode(erd.id_diagnosis_list,
                                     NULL,
                                     decode(pk_diagnosis.concat_diag(i_lang, NULL, erd.id_exam_req_det, NULL, i_prof),
                                            NULL,
                                            NULL,
                                            decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('COMMON_T062'), '') ||
                                            pk_diagnosis.concat_diag(i_lang, NULL, erd.id_exam_req_det, NULL, i_prof)),
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('COMMON_T062'), '') ||
                                     pk_exam_utils.get_exam_diagnosis(i_lang, i_prof, erd.id_diagnosis_list)),
                              decode(erd.id_diagnosis_list,
                                     erd.id_diagnosis_list_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('COMMON_T061') || l_update_tag_flash ||
                                            decode(erd.id_diagnosis_list,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_exam_utils.get_exam_diagnosis(i_lang, i_prof, erd.id_diagnosis_list)) ||
                                            decode(erd.id_diagnosis_list_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('COMMON_T062') ||
                                                   pk_exam_utils.get_exam_diagnosis(i_lang,
                                                                                    i_prof,
                                                                                    erd.id_diagnosis_list_new)),
                                            decode(erd.id_diagnosis_list,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_exam_utils.get_exam_diagnosis(i_lang, i_prof, erd.id_diagnosis_list)) ||
                                            decode(erd.id_diagnosis_list_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_exam_utils.get_exam_diagnosis(i_lang,
                                                                                    i_prof,
                                                                                    erd.id_diagnosis_list_new))))) desc_diagnosis,
                       decode(cnt,
                              rn,
                              decode(erd.id_clinical_purpose,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T054'), '') ||
                                     decode(erd.id_clinical_purpose,
                                            0,
                                            erd.clinical_purpose_notes,
                                            pk_translation.get_translation(i_lang,
                                                                           'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                                           erd.id_clinical_purpose))),
                              decode(erd.id_clinical_purpose,
                                     erd.id_clinical_purpose_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T192') || l_update_tag_flash ||
                                            decode(erd.id_clinical_purpose,
                                                   NULL,
                                                   l_msg_del,
                                                   decode(erd.id_clinical_purpose,
                                                          0,
                                                          erd.clinical_purpose_notes,
                                                          pk_translation.get_translation(i_lang,
                                                                                         'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                                                         erd.id_clinical_purpose))) ||
                                            decode(erd.id_clinical_purpose_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T054') ||
                                                   decode(erd.id_clinical_purpose_new,
                                                          0,
                                                          erd.clinical_purpose_notes,
                                                          pk_translation.get_translation(i_lang,
                                                                                         'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                                                         erd.id_clinical_purpose_new))),
                                            decode(erd.id_clinical_purpose,
                                                   NULL,
                                                   l_msg_del,
                                                   decode(erd.id_clinical_purpose,
                                                          0,
                                                          erd.clinical_purpose_notes,
                                                          pk_translation.get_translation(i_lang,
                                                                                         'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                                                         erd.id_clinical_purpose))) ||
                                            decode(erd.id_clinical_purpose_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   decode(erd.id_clinical_purpose_new,
                                                          0,
                                                          erd.clinical_purpose_notes,
                                                          pk_translation.get_translation(i_lang,
                                                                                         'MULTICHOICE_OPTION.CODE_MULTICHOICE_OPTION.' ||
                                                                                         erd.id_clinical_purpose_new)))))) clinical_purpose,
                       decode(cnt,
                              rn,
                              decode(erd.flg_laterality,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T223'), '') ||
                                     pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LATERALITY', erd.flg_laterality, i_lang)),
                              decode(erd.flg_laterality,
                                     erd.flg_laterality_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T235') || l_update_tag_flash ||
                                            decode(erd.flg_laterality,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LATERALITY',
                                                                           erd.flg_laterality,
                                                                           i_lang)) ||
                                            decode(erd.flg_laterality_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T223') ||
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LATERALITY',
                                                                           erd.flg_laterality_new,
                                                                           i_lang)),
                                            decode(erd.flg_laterality,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LATERALITY',
                                                                           erd.flg_laterality,
                                                                           i_lang)) ||
                                            decode(erd.flg_laterality_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LATERALITY',
                                                                           erd.flg_laterality_new,
                                                                           i_lang))))) laterality,
                       aa_code_messages('EXAMS_T016') instructions,
                       decode(cnt,
                              rn,
                              decode(erd.priority,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T033'), '') ||
                                     pk_sysdomain.get_domain(i_lang,
                                                             i_prof,
                                                             'EXAM_REQ_DET.FLG_PRIORITY',
                                                             erd.priority,
                                                             NULL)),
                              decode(erd.priority,
                                     erd.priority_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T187') || l_update_tag_flash ||
                                            decode(erd.priority,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'EXAM_REQ_DET.FLG_PRIORITY',
                                                                           erd.priority,
                                                                           NULL)) ||
                                            decode(erd.priority_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T033') ||
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'EXAM_REQ_DET.FLG_PRIORITY',
                                                                           erd.priority_new,
                                                                           NULL)),
                                            decode(erd.priority,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'EXAM_REQ_DET.FLG_PRIORITY',
                                                                           erd.priority,
                                                                           NULL)) ||
                                            decode(erd.priority_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash || pk_sysdomain.get_domain(i_lang,
                                                                                                 i_prof,
                                                                                                 'EXAM_REQ_DET.FLG_PRIORITY',
                                                                                                 erd.priority_new,
                                                                                                 NULL))))) priority,
                       decode(cnt,
                               rn,
                               decode(erd.flg_referral,
                                      NULL,
                                      decode(erd.flg_status,
                                             NULL,
                                             NULL,
                                             decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T035'), '') ||
                                             decode(erd.flg_status,
                                                    pk_exam_constant.g_exam_sos,
                                                    pk_sysdomain.get_domain(i_lang,
                                                                            i_prof,
                                                                            'EXAM_REQ_DET.FLG_STATUS',
                                                                            pk_exam_constant.g_exam_req,
                                                                            NULL),
                                                    pk_sysdomain.get_domain(i_lang,
                                                                            i_prof,
                                                                            'EXAM_REQ_DET.FLG_STATUS',
                                                                            erd.flg_status,
                                                                            NULL))),
                                      decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T035'), '') ||
                                      pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL', erd.flg_referral, i_lang)),
                               decode(erd.flg_referral,
                                      erd.flg_referral_new,
                                      decode(erd.flg_status,
                                             erd.flg_status_new,
                                             NULL,
                                             CASE
                                                 WHEN (erd.flg_status = pk_exam_constant.g_exam_sos AND
                                                      erd.flg_status_new = pk_exam_constant.g_exam_req)
                                                      OR (erd.flg_status = pk_exam_constant.g_exam_req AND
                                                      erd.flg_status_new = pk_exam_constant.g_exam_sos) THEN
                                                  NULL
                                                 ELSE
                                                  decode(i_flg_report,
                                                         pk_exam_constant.g_no,
                                                         aa_code_messages('EXAMS_T222') || l_update_tag_flash ||
                                                         decode(erd.flg_status,
                                                                NULL,
                                                                l_msg_del,
                                                                decode(erd.flg_status,
                                                                       pk_exam_constant.g_exam_sos,
                                                                       pk_sysdomain.get_domain(i_lang,
                                                                                               i_prof,
                                                                                               'EXAM_REQ_DET.FLG_STATUS',
                                                                                               pk_exam_constant.g_exam_req,
                                                                                               NULL),
                                                                       pk_sysdomain.get_domain(i_lang,
                                                                                               i_prof,
                                                                                               'EXAM_REQ_DET.FLG_STATUS',
                                                                                               erd.flg_status,
                                                                                               NULL))) ||
                                                         decode(erd.flg_status_new,
                                                                NULL,
                                                                NULL,
                                                                l_formated_text || aa_code_messages('EXAMS_T035') ||
                                                                decode(erd.flg_status_new,
                                                                       pk_exam_constant.g_exam_sos,
                                                                       pk_sysdomain.get_domain(i_lang,
                                                                                               i_prof,
                                                                                               'EXAM_REQ_DET.FLG_STATUS',
                                                                                               pk_exam_constant.g_exam_req,
                                                                                               NULL),
                                                                       pk_sysdomain.get_domain(i_lang,
                                                                                               i_prof,
                                                                                               'EXAM_REQ_DET.FLG_STATUS',
                                                                                               erd.flg_status_new,
                                                                                               NULL))),
                                                         decode(erd.flg_status,
                                                                NULL,
                                                                l_msg_del,
                                                                decode(erd.flg_status,
                                                                       pk_exam_constant.g_exam_sos,
                                                                       pk_sysdomain.get_domain(i_lang,
                                                                                               i_prof,
                                                                                               'EXAM_REQ_DET.FLG_STATUS',
                                                                                               pk_exam_constant.g_exam_req,
                                                                                               NULL),
                                                                       pk_sysdomain.get_domain(i_lang,
                                                                                               i_prof,
                                                                                               'EXAM_REQ_DET.FLG_STATUS',
                                                                                               erd.flg_status,
                                                                                               NULL))) ||
                                                         decode(erd.flg_status_new,
                                                                NULL,
                                                                NULL,
                                                                l_update_tag_flash || decode(erd.flg_status,
                                                                                             pk_exam_constant.g_exam_sos,
                                                                                             pk_sysdomain.get_domain(i_lang,
                                                                                                                     i_prof,
                                                                                                                     'EXAM_REQ_DET.FLG_STATUS',
                                                                                                                     pk_exam_constant.g_exam_req,
                                                                                                                     NULL),
                                                                                             pk_sysdomain.get_domain(i_lang,
                                                                                                                     i_prof,
                                                                                                                     'EXAM_REQ_DET.FLG_STATUS',
                                                                                                                     erd.flg_status_new,
                                                                                                                     NULL))))
                                             END),
                                      decode(i_flg_report,
                                             pk_exam_constant.g_no,
                                             aa_code_messages('EXAMS_T222') || l_update_tag_flash ||
                                             decode(erd.flg_referral,
                                                    NULL,
                                                    l_msg_del,
                                                    pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL',
                                                                            erd.flg_referral,
                                                                            i_lang)) ||
                                             decode(erd.flg_referral_new,
                                                    NULL,
                                                    NULL,
                                                    l_formated_text || aa_code_messages('EXAMS_T035') ||
                                                    pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL',
                                                                            erd.flg_referral_new,
                                                                            i_lang)),
                                             decode(erd.flg_referral,
                                                    NULL,
                                                    l_msg_del,
                                                    pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL',
                                                                            erd.flg_referral,
                                                                            i_lang)) ||
                                             decode(erd.flg_referral_new,
                                                    NULL,
                                                    NULL,
                                                    l_update_tag_flash ||
                                                    pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_REFERRAL',
                                                                            erd.flg_referral_new,
                                                                            i_lang))))) desc_status,
                       NULL title_order_set,
                       NULL task_depend,
                       decode(cnt,
                              rn,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T034'), '') ||
                              pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ.FLG_TIME', erd.flg_time, NULL) ||
                              decode(erd.dt_target_tstz,
                                     NULL,
                                     decode(erd.dt_schedule_tstz,
                                            NULL,
                                            NULL,
                                            ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                                erd.dt_schedule_tstz,
                                                                                i_prof.institution,
                                                                                i_prof.software) || ' - ' || l_msg_date || ')'),
                                     ' (' || pk_date_utils.date_char_tsz(i_lang,
                                                                         erd.dt_target_tstz,
                                                                         i_prof.institution,
                                                                         i_prof.software) || ')'),
                              decode(erd.dt_target_tstz,
                                     erd.dt_target_tstz_new,
                                     decode(erd.dt_schedule_tstz,
                                            erd.dt_schedule_tstz_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_exam_constant.g_no,
                                                   aa_code_messages('EXAMS_T188') || l_update_tag_flash ||
                                                   decode(erd.dt_schedule_tstz,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_sysdomain.get_domain(i_lang,
                                                                                  i_prof,
                                                                                  'EXAM_REQ.FLG_TIME',
                                                                                  erd.flg_time,
                                                                                  NULL) || ' (' ||
                                                          pk_date_utils.date_char_tsz(i_lang,
                                                                                      erd.dt_schedule_tstz,
                                                                                      i_prof.institution,
                                                                                      i_prof.software) || ' )') ||
                                                   decode(erd.dt_schedule_tstz_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('EXAMS_T034') ||
                                                          pk_sysdomain.get_domain(i_lang,
                                                                                  i_prof,
                                                                                  'EXAM_REQ.FLG_TIME',
                                                                                  erd.flg_time,
                                                                                  NULL) || ' (' ||
                                                          pk_date_utils.date_char_tsz(i_lang,
                                                                                      erd.dt_schedule_tstz_new,
                                                                                      i_prof.institution,
                                                                                      i_prof.software) || ')'),
                                                   decode(erd.dt_schedule_tstz,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_sysdomain.get_domain(i_lang,
                                                                                  i_prof,
                                                                                  'EXAM_REQ.FLG_TIME',
                                                                                  erd.flg_time,
                                                                                  NULL) || ' (' ||
                                                          pk_date_utils.date_char_tsz(i_lang,
                                                                                      erd.dt_schedule_tstz,
                                                                                      i_prof.institution,
                                                                                      i_prof.software) || ')') ||
                                                   decode(erd.dt_schedule_tstz_new,
                                                          NULL,
                                                          NULL,
                                                          l_update_tag_flash ||
                                                          pk_sysdomain.get_domain(i_lang,
                                                                                  i_prof,
                                                                                  'EXAM_REQ.FLG_TIME',
                                                                                  erd.flg_time,
                                                                                  NULL) || ' (' ||
                                                          pk_date_utils.date_char_tsz(i_lang,
                                                                                      erd.dt_schedule_tstz_new,
                                                                                      i_prof.institution,
                                                                                      i_prof.software) || ')'))),
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T188') || l_update_tag_flash ||
                                            decode(erd.dt_target_tstz,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'EXAM_REQ.FLG_TIME',
                                                                           erd.flg_time,
                                                                           NULL) || ' (' ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_target_tstz,
                                                                               i_prof.institution,
                                                                               i_prof.software) || ')') ||
                                            decode(erd.dt_target_tstz_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T034') ||
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'EXAM_REQ.FLG_TIME',
                                                                           erd.flg_time,
                                                                           NULL) || ' (' ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_target_tstz_new,
                                                                               i_prof.institution,
                                                                               i_prof.software) || ')'),
                                            decode(erd.dt_target_tstz,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'EXAM_REQ.FLG_TIME',
                                                                           erd.flg_time,
                                                                           NULL) || ' (' ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_target_tstz,
                                                                               i_prof.institution,
                                                                               i_prof.software) || ')') ||
                                            decode(erd.dt_target_tstz_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash || pk_sysdomain.get_domain(i_lang,
                                                                                                 i_prof,
                                                                                                 'EXAM_REQ.FLG_TIME',
                                                                                                 erd.flg_time,
                                                                                                 NULL) || ' (' ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_target_tstz_new,
                                                                               i_prof.institution,
                                                                               i_prof.software) || ')')))) desc_time,
                       decode(cnt,
                              rn,
                              decode(erd.dt_final_target_tstz,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T174'), '') ||
                                     pk_date_utils.date_char_tsz(i_lang,
                                                                 erd.dt_final_target_tstz,
                                                                 i_prof.institution,
                                                                 i_prof.software)),
                              decode(erd.dt_final_target_tstz,
                                     erd.dt_final_target_tstz_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T217') || l_update_tag_flash ||
                                            decode(erd.dt_final_target_tstz,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_final_target_tstz,
                                                                               i_prof.institution,
                                                                               i_prof.software)) ||
                                            decode(erd.dt_final_target_tstz_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T174') ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_final_target_tstz_new,
                                                                               i_prof.institution,
                                                                               i_prof.software)),
                                            decode(erd.dt_final_target_tstz,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_final_target_tstz,
                                                                               i_prof.institution,
                                                                               i_prof.software)) ||
                                            decode(erd.dt_final_target_tstz_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_final_target_tstz_new,
                                                                               i_prof.institution,
                                                                               i_prof.software))))) desc_time_limit,
                       decode(cnt,
                              rn,
                              decode(erd.id_order_recurrence,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T159'), '') ||
                                     pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang,
                                                                                           i_prof,
                                                                                           erd.id_order_recurrence)),
                              decode(erd.id_order_recurrence,
                                     erd.id_order_recurrence_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T210') || l_update_tag_flash ||
                                            decode(erd.id_order_recurrence,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang,
                                                                                                         i_prof,
                                                                                                         erd.id_order_recurrence)) ||
                                            decode(erd.id_order_recurrence_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T159') ||
                                                   pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang,
                                                                                                         i_prof,
                                                                                                         erd.id_order_recurrence_new)),
                                            decode(erd.id_order_recurrence,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang,
                                                                                                         i_prof,
                                                                                                         erd.id_order_recurrence)) ||
                                            decode(erd.id_order_recurrence_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_order_recurrence_api_db.get_order_recurr_plan_desc(i_lang,
                                                                                                         i_prof,
                                                                                                         erd.id_order_recurrence_new))))) order_recurrence,
                       NULL weeks_pregnant,
                       NULL trimester,
                       decode(cnt,
                              rn,
                              decode(erd.flg_prn,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T164'), '') ||
                                     pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_PRN', erd.flg_prn, i_lang)),
                              decode(erd.flg_prn,
                                     erd.flg_prn_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T211') || l_update_tag_flash ||
                                            decode(erd.flg_prn,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_PRN', erd.flg_prn, i_lang)) ||
                                            decode(erd.flg_prn_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T164') ||
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_PRN', erd.flg_prn_new, i_lang)),
                                            decode(erd.flg_prn,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_PRN', erd.flg_prn, i_lang)) ||
                                            decode(erd.flg_prn_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_PRN', erd.flg_prn_new, i_lang))))) prn,
                       decode(cnt,
                              rn,
                              decode(erd.notes_prn,
                                     NULL,
                                     to_clob(''),
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T165'), '') ||
                                     erd.notes_prn),
                              decode(erd.notes_prn,
                                     erd.notes_prn_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T212') || l_update_tag_flash ||
                                            decode(erd.notes_prn, NULL, l_msg_del, erd.notes_prn) ||
                                            decode(erd.notes_prn_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T165') || erd.notes_prn_new),
                                            decode(erd.notes_prn, NULL, l_msg_del, erd.notes_prn) ||
                                            decode(erd.notes_prn_new, NULL, NULL, l_update_tag_flash || erd.notes_prn_new)))) notes_prn,
                       aa_code_messages('EXAMS_T166') patient_instructions,
                       decode(cnt,
                              rn,
                              decode(erd.flg_fasting,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T167'), '') ||
                                     pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_FASTING', erd.flg_fasting, i_lang)),
                              decode(erd.flg_fasting,
                                     erd.flg_fasting_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T213') || l_update_tag_flash ||
                                            decode(erd.flg_fasting,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_FASTING',
                                                                           erd.flg_fasting,
                                                                           i_lang)) ||
                                            decode(erd.flg_fasting_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T167') ||
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_FASTING',
                                                                           erd.flg_fasting_new,
                                                                           i_lang)),
                                            decode(erd.flg_fasting,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_FASTING',
                                                                           erd.flg_fasting,
                                                                           i_lang)) ||
                                            decode(erd.flg_fasting_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_FASTING',
                                                                           erd.flg_fasting_new,
                                                                           i_lang))))) fasting,
                       decode(cnt,
                              rn,
                              decode(erd.notes_patient,
                                     NULL,
                                     to_clob(''),
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T020'), '') ||
                                     erd.notes_patient),
                              decode(erd.notes_patient,
                                     erd.notes_patient_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T186') || l_update_tag_flash ||
                                            decode(erd.notes_patient, NULL, l_msg_del, erd.notes_patient) ||
                                            decode(erd.notes_patient_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T020') ||
                                                   erd.notes_patient_new),
                                            decode(erd.notes_patient, NULL, l_msg_del, erd.notes_patient) ||
                                            decode(erd.notes_patient_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash || erd.notes_patient_new)))) notes_patient,
                       aa_code_messages('EXAMS_T176') execution,
                       decode(cnt,
                              rn,
                              decode(erd.flg_location,
                                     pk_exam_constant.g_exam_location_interior,
                                     decode(erd.id_room,
                                            NULL,
                                            decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T053'), '') ||
                                            pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION', erd.flg_location, i_lang),
                                            decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T053'), '') ||
                                            pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION', erd.flg_location, i_lang) ||
                                            ' - ' ||
                                            nvl((SELECT r.desc_room
                                                  FROM room r
                                                 WHERE r.id_room = erd.id_room),
                                                pk_translation.get_translation(i_lang, 'ROOM.CODE_ROOM.' || erd.id_room))),
                                     decode(erd.id_exec_institution,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_exam_constant.g_no,
                                                   aa_code_messages('EXAMS_T053') ||
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION',
                                                                           erd.flg_location,
                                                                           i_lang),
                                                   pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION',
                                                                           erd.flg_location,
                                                                           i_lang)),
                                            decode(i_flg_report,
                                                   pk_exam_constant.g_no,
                                                   aa_code_messages('EXAMS_T053') ||
                                                   pk_translation.get_translation(i_lang,
                                                                                  'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                  erd.id_exec_institution),
                                                   pk_translation.get_translation(i_lang,
                                                                                  'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                  erd.id_exec_institution)))),
                              decode(erd.flg_location,
                                     erd.flg_location_new,
                                     decode(erd.flg_location,
                                            pk_exam_constant.g_exam_location_interior,
                                            decode(erd.id_room,
                                                   erd.id_room_new,
                                                   NULL,
                                                   decode(i_flg_report,
                                                          pk_exam_constant.g_no,
                                                          aa_code_messages('EXAMS_T191') || l_update_tag_flash ||
                                                          decode(erd.id_room,
                                                                 NULL,
                                                                 l_msg_del,
                                                                 pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION',
                                                                                         erd.flg_location,
                                                                                         i_lang) || ' - ' ||
                                                                 nvl((SELECT r.desc_room
                                                                       FROM room r
                                                                      WHERE r.id_room = erd.id_room),
                                                                     pk_translation.get_translation(i_lang,
                                                                                                    'ROOM.CODE_ROOM.' ||
                                                                                                    erd.id_room))) ||
                                                          decode(erd.id_room_new,
                                                                 NULL,
                                                                 NULL,
                                                                 l_formated_text || aa_code_messages('EXAMS_T053') ||
                                                                 pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION',
                                                                                         erd.flg_location,
                                                                                         i_lang) || ' - ' ||
                                                                 nvl((SELECT r.desc_room
                                                                       FROM room r
                                                                      WHERE r.id_room = erd.id_room_new),
                                                                     pk_translation.get_translation(i_lang,
                                                                                                    'ROOM.CODE_ROOM.' ||
                                                                                                    erd.id_room_new))),
                                                          decode(erd.id_room,
                                                                 NULL,
                                                                 l_msg_del,
                                                                 pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION',
                                                                                         erd.flg_location,
                                                                                         i_lang) || ' - ' ||
                                                                 nvl((SELECT r.desc_room
                                                                       FROM room r
                                                                      WHERE r.id_room = erd.id_room),
                                                                     pk_translation.get_translation(i_lang,
                                                                                                    'ROOM.CODE_ROOM.' ||
                                                                                                    erd.id_room))) ||
                                                          decode(erd.id_room_new,
                                                                 NULL,
                                                                 NULL,
                                                                 pk_sysdomain.get_domain('EXAM_REQ_DET.FLG_LOCATION',
                                                                                         erd.flg_location,
                                                                                         i_lang) || ' - ' ||
                                                                 nvl((SELECT r.desc_room
                                                                       FROM room r
                                                                      WHERE r.id_room = erd.id_room_new),
                                                                     pk_translation.get_translation(i_lang,
                                                                                                    'ROOM.CODE_ROOM.' ||
                                                                                                    erd.id_room_new))))),
                                            decode(erd.id_exec_institution,
                                                   erd.id_exec_institution_new,
                                                   NULL,
                                                   decode(i_flg_report,
                                                          pk_exam_constant.g_no,
                                                          aa_code_messages('EXAMS_T191') || l_update_tag_flash ||
                                                          decode(erd.id_exec_institution,
                                                                 NULL,
                                                                 l_msg_del,
                                                                 pk_translation.get_translation(i_lang,
                                                                                                'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                                erd.id_exec_institution)) ||
                                                          decode(erd.id_exec_institution_new,
                                                                 NULL,
                                                                 NULL,
                                                                 l_formated_text || aa_code_messages('EXAMS_T053') ||
                                                                 pk_translation.get_translation(i_lang,
                                                                                                'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                                erd.id_exec_institution_new)),
                                                          decode(erd.id_exec_institution,
                                                                 NULL,
                                                                 l_msg_del,
                                                                 pk_translation.get_translation(i_lang,
                                                                                                'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                                erd.id_exec_institution)) ||
                                                          decode(erd.id_exec_institution_new,
                                                                 NULL,
                                                                 NULL,
                                                                 l_update_tag_flash ||
                                                                 pk_translation.get_translation(i_lang,
                                                                                                'AB_INSTITUTION.CODE_INSTITUTION.' ||
                                                                                                erd.id_exec_institution_new))))))) perform_location,
                       decode(cnt,
                              rn,
                              decode(erd.notes_scheduler,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T019'), '') ||
                                     erd.notes_scheduler),
                              decode(erd.notes_scheduler,
                                     erd.notes_scheduler_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T185') || l_update_tag_flash ||
                                            decode(erd.notes_scheduler, NULL, l_msg_del, erd.notes_scheduler) ||
                                            decode(erd.notes_scheduler_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T019') ||
                                                   erd.notes_scheduler_new),
                                            decode(erd.notes_scheduler, NULL, l_msg_del, erd.notes_scheduler) ||
                                            decode(erd.notes_scheduler_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash || erd.notes_scheduler_new)))) notes_scheduler,
                       decode(cnt,
                              rn,
                              decode(erd.notes_tech,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T059'), '') ||
                                     erd.notes_tech),
                              decode(erd.notes_tech,
                                     erd.notes_tech_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T193') || l_update_tag_flash ||
                                            decode(erd.notes_tech, NULL, l_msg_del, erd.notes_tech) ||
                                            decode(erd.notes_tech_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T059') || erd.notes_tech_new),
                                            decode(erd.notes_tech, NULL, l_msg_del, erd.notes_tech) ||
                                            decode(erd.notes_tech_new, NULL, NULL, l_update_tag_flash || erd.notes_tech_new)))) notes_technician,
                       decode(cnt,
                              rn,
                              decode(erd.notes,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T258'), '') ||
                                     erd.notes),
                              decode(erd.notes,
                                     erd.notes_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T259') || l_update_tag_flash ||
                                            decode(erd.notes, NULL, l_msg_del, erd.notes) ||
                                            decode(erd.notes_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T258') || erd.notes_new),
                                            decode(erd.notes, NULL, l_msg_del, erd.notes) ||
                                            decode(erd.notes_new, NULL, NULL, l_update_tag_flash || erd.notes_new)))) notes,
                       aa_code_messages('EXAMS_T172') co_sign,
                       decode(cnt,
                              rn,
                              decode(erd.prof_ordered_by,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T031'), '') ||
                                     erd.prof_ordered_by),
                              decode(erd.prof_ordered_by,
                                     erd.prof_ordered_by_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T177') || l_update_tag_flash ||
                                            decode(erd.prof_ordered_by, NULL, l_msg_del, erd.prof_ordered_by) ||
                                            decode(erd.prof_ordered_by_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T031') ||
                                                   erd.prof_ordered_by_new),
                                            decode(erd.prof_ordered_by, NULL, l_msg_del, erd.prof_ordered_by) ||
                                            decode(erd.prof_ordered_by_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash || erd.prof_ordered_by_new)))) prof_order,
                       decode(cnt,
                              rn,
                              decode(erd.dt_ordered_by,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T058'), '') ||
                                     pk_date_utils.date_char_tsz(i_lang,
                                                                 erd.dt_ordered_by,
                                                                 i_prof.institution,
                                                                 i_prof.software)),
                              decode(erd.dt_ordered_by,
                                     erd.dt_ordered_by_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T178') || l_update_tag_flash ||
                                            decode(erd.dt_ordered_by,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_ordered_by,
                                                                               i_prof.institution,
                                                                               i_prof.software)) ||
                                            decode(erd.dt_ordered_by_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T058') ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_ordered_by_new,
                                                                               i_prof.institution,
                                                                               i_prof.software)),
                                            decode(erd.dt_ordered_by,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_ordered_by,
                                                                               i_prof.institution,
                                                                               i_prof.software)) ||
                                            decode(erd.dt_ordered_by_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_ordered_by_new,
                                                                               i_prof.institution,
                                                                               i_prof.software))))) dt_order,
                       decode(cnt,
                              rn,
                              decode(erd.id_order_type,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T126'), '') ||
                                     erd.desc_order_type),
                              decode(erd.id_order_type,
                                     erd.id_order_type_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T179') || l_update_tag_flash ||
                                            decode(erd.id_order_type, NULL, l_msg_del, erd.desc_order_type) ||
                                            decode(erd.id_order_type_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T126') ||
                                                   erd.desc_order_type_new),
                                            decode(erd.id_order_type, NULL, l_msg_del, erd.desc_order_type) ||
                                            decode(erd.id_order_type_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash || erd.desc_order_type_new)))) order_type,
                       NULL co_sign_status,
                       aa_code_messages('EXAMS_T168') health_insurance,
                       decode(l_health_insurance,
                              pk_exam_constant.g_no,
                              NULL,
                              decode(cnt,
                                     rn,
                                     decode(erd.id_pat_health_plan,
                                            NULL,
                                            NULL,
                                            decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T169'), '') ||
                                            pk_adt.get_pat_health_plan_info(i_lang, i_prof, erd.id_pat_health_plan, 'F')),
                                     decode(erd.id_pat_health_plan,
                                            erd.id_pat_health_plan_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_exam_constant.g_no,
                                                   aa_code_messages('EXAMS_T214') || l_update_tag_flash ||
                                                   decode(erd.id_pat_health_plan,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_health_plan,
                                                                                          'F')) ||
                                                   decode(erd.id_pat_health_plan_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('EXAMS_T169') ||
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_health_plan_new,
                                                                                          'F')),
                                                   decode(erd.id_pat_health_plan,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_health_plan,
                                                                                          'F')) ||
                                                   decode(erd.id_pat_health_plan_new,
                                                          NULL,
                                                          NULL,
                                                          l_update_tag_flash ||
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_health_plan_new,
                                                                                          'F')))))) financial_entity,
                       decode(l_health_insurance,
                              pk_exam_constant.g_no,
                              NULL,
                              decode(cnt,
                                     rn,
                                     decode(erd.id_pat_health_plan,
                                            NULL,
                                            NULL,
                                            decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T170'), '') ||
                                            pk_adt.get_pat_health_plan_info(i_lang, i_prof, erd.id_pat_health_plan, 'H')),
                                     decode(erd.id_pat_health_plan,
                                            erd.id_pat_health_plan_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_exam_constant.g_no,
                                                   aa_code_messages('EXAMS_T215') || l_update_tag_flash ||
                                                   decode(erd.id_pat_health_plan,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_health_plan,
                                                                                          'H')) ||
                                                   decode(erd.id_pat_health_plan_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('EXAMS_T170') ||
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_health_plan_new,
                                                                                          'H')),
                                                   decode(erd.id_pat_health_plan,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_health_plan,
                                                                                          'H')) ||
                                                   decode(erd.id_pat_health_plan_new,
                                                          NULL,
                                                          NULL,
                                                          l_update_tag_flash ||
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_health_plan_new,
                                                                                          'H')))))) health_plan,
                       decode(l_health_insurance,
                              pk_exam_constant.g_no,
                              NULL,
                              decode(cnt,
                                     rn,
                                     decode(erd.id_pat_health_plan,
                                            NULL,
                                            NULL,
                                            decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T171'), '') ||
                                            pk_adt.get_pat_health_plan_info(i_lang, i_prof, erd.id_pat_health_plan, 'N')),
                                     decode(erd.id_pat_health_plan,
                                            erd.id_pat_health_plan_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_exam_constant.g_no,
                                                   aa_code_messages('EXAMS_T216') || l_update_tag_flash ||
                                                   decode(erd.id_pat_health_plan,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_health_plan,
                                                                                          'N')) ||
                                                   decode(erd.id_pat_health_plan_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('EXAMS_T171') ||
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_health_plan_new,
                                                                                          'N')),
                                                   decode(erd.id_pat_health_plan,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_health_plan,
                                                                                          'N')) ||
                                                   decode(erd.id_pat_health_plan_new,
                                                          NULL,
                                                          NULL,
                                                          l_update_tag_flash ||
                                                          pk_adt.get_pat_health_plan_info(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_health_plan_new,
                                                                                          'N')))))) insurance_number,
                       decode(l_health_insurance,
                              pk_exam_constant.g_no,
                              NULL,
                              decode(cnt,
                                     rn,
                                     decode(erd.id_pat_exemption,
                                            NULL,
                                            NULL,
                                            decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T246'), '') ||
                                            pk_adt.get_pat_exemption_detail(i_lang, i_prof, erd.id_pat_exemption)),
                                     decode(erd.id_pat_exemption,
                                            erd.id_pat_exemption_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_exam_constant.g_no,
                                                   aa_code_messages('EXAMS_T247') || l_update_tag_flash ||
                                                   decode(erd.id_pat_exemption,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_exemption_detail(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_exemption)) ||
                                                   decode(erd.id_pat_exemption_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('EXAMS_T246') ||
                                                          pk_adt.get_pat_exemption_detail(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_exemption_new)),
                                                   decode(erd.id_pat_exemption,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_adt.get_pat_exemption_detail(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_exemption)) ||
                                                   decode(erd.id_pat_exemption_new,
                                                          NULL,
                                                          NULL,
                                                          l_update_tag_flash ||
                                                          pk_adt.get_pat_exemption_detail(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_pat_exemption_new)))))) exemption,
                       NULL ref_type,
                       NULL referrer,
                       CASE
                            WHEN erd.flg_status = pk_exam_constant.g_exam_read
                                 AND erd.id_cancel_reason IS NOT NULL THEN
                             aa_code_messages('COMMON_M035')
                            ELSE
                             aa_code_messages('EXAMS_T256')
                        END cancellation,
                       decode(cnt,
                               rn,
                               NULL,
                               decode(erd.id_cancel_reason,
                                      erd.id_cancel_reason_new,
                                      NULL,
                                      decode(erd.flg_status_new,
                                             pk_exam_constant.g_exam_exec,
                                             NULL,
                                             decode(i_flg_report,
                                                    pk_exam_constant.g_no,
                                                    CASE
                                                        WHEN erd.flg_status = pk_exam_constant.g_exam_read
                                                             AND erd.id_cancel_reason IS NOT NULL THEN
                                                         aa_code_messages('EXAMS_T268')
                                                        ELSE
                                                         aa_code_messages('EXAMS_T025')
                                                    END || l_update_tag_flash ||
                                                    decode(erd.id_cancel_reason,
                                                           NULL,
                                                           l_msg_del,
                                                           pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                                   i_prof,
                                                                                                   erd.id_cancel_reason)) ||
                                                    decode(erd.id_cancel_reason_new,
                                                           NULL,
                                                           NULL,
                                                           l_formated_text || CASE
                                                               WHEN erd.flg_status = pk_exam_constant.g_exam_read
                                                                    AND erd.id_cancel_reason IS NOT NULL THEN
                                                                aa_code_messages('EXAMS_T268')
                                                               ELSE
                                                                aa_code_messages('EXAMS_T025')
                                                           END ||
                                                           pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                                   i_prof,
                                                                                                   erd.id_cancel_reason_new)),
                                                    decode(erd.id_cancel_reason,
                                                           NULL,
                                                           l_msg_del,
                                                           pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                                   i_prof,
                                                                                                   erd.id_cancel_reason)) ||
                                                    decode(erd.id_cancel_reason_new,
                                                           NULL,
                                                           NULL,
                                                           l_update_tag_flash ||
                                                           pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                                   i_prof,
                                                                                                   erd.id_cancel_reason_new)))))) cancel_reason,
                       decode(cnt,
                              rn,
                              NULL,
                              decode(erd.notes_cancel,
                                     erd.notes_cancel_new,
                                     NULL,
                                     decode(erd.flg_status_new,
                                            pk_exam_constant.g_exam_exec,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_exam_constant.g_no,
                                                   aa_code_messages('EXAMS_T009') || l_update_tag_flash ||
                                                   decode(erd.notes_cancel, NULL, l_msg_del, erd.notes_cancel) ||
                                                   decode(erd.notes_cancel_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('EXAMS_T009') ||
                                                          erd.notes_cancel_new),
                                                   decode(erd.notes_cancel, NULL, l_msg_del, erd.notes_cancel) ||
                                                   decode(erd.notes_cancel_new,
                                                          NULL,
                                                          NULL,
                                                          l_update_tag_flash || erd.notes_cancel_new))))) cancel_notes,
                       decode(cnt,
                              rn,
                              NULL,
                              decode(erd.prof_ordered_by_cancel,
                                     erd.prof_ordered_by_cancel_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T177') || l_update_tag_flash ||
                                            decode(erd.prof_ordered_by_cancel, NULL, l_msg_del, erd.prof_ordered_by_cancel) ||
                                            decode(erd.prof_ordered_by_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T031') ||
                                                   erd.prof_ordered_by_cancel_new),
                                            decode(erd.prof_ordered_by_cancel, NULL, l_msg_del, erd.prof_ordered_by_cancel) ||
                                            decode(erd.prof_ordered_by_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash || erd.prof_ordered_by_cancel_new)))) cancel_prof_order,
                       decode(cnt,
                              rn,
                              NULL,
                              decode(erd.dt_ordered_cancel,
                                     erd.dt_ordered_cancel_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T178') || l_update_tag_flash ||
                                            decode(erd.dt_ordered_cancel,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_ordered_cancel,
                                                                               i_prof.institution,
                                                                               i_prof.software)) ||
                                            decode(erd.dt_ordered_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T058') ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_ordered_cancel_new,
                                                                               i_prof.institution,
                                                                               i_prof.software)),
                                            decode(erd.dt_ordered_cancel,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_ordered_cancel,
                                                                               i_prof.institution,
                                                                               i_prof.software)) ||
                                            decode(erd.dt_ordered_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_date_utils.date_char_tsz(i_lang,
                                                                               erd.dt_ordered_cancel_new,
                                                                               i_prof.institution,
                                                                               i_prof.software))))) cancel_dt_order,
                       decode(cnt,
                              rn,
                              NULL,
                              decode(erd.id_order_type_cancel,
                                     erd.id_order_type_cancel_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T179') || l_update_tag_flash ||
                                            decode(erd.id_order_type_cancel, NULL, l_msg_del, erd.desc_order_type_cancel) ||
                                            decode(erd.id_order_type_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T126') ||
                                                   erd.desc_order_type_cancel_new),
                                            decode(erd.id_order_type_cancel, NULL, l_msg_del, erd.desc_order_type_cancel) ||
                                            decode(erd.id_order_type_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash || erd.desc_order_type_cancel_new)))) cancel_order_type,
                       erd.dt_last_update,
                       pk_date_utils.date_send_tsz(i_lang, erd.dt_req_tstz, i_prof) dt_ord
                  FROM (SELECT row_number() over(ORDER BY t.operation_time DESC NULLS FIRST) rn,
                               MAX(rownum) over() cnt,
                               t.id_exam_req_det,
                               first_value(t.id_exam_req_det) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_exam_req_det_new,
                               t.id_exam_req,
                               first_value(t.id_exam_req) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_exam_req_new,
                               t.id_exam,
                               first_value(t.id_exam) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_exam_new,
                               t.id_episode,
                               t.dt_req_tstz,
                               first_value(t.dt_req_tstz) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) dt_req_tstz_new,
                               t.dt_last_update_tstz dt_last_update,
                               first_value(t.dt_last_update_tstz) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) dt_last_update_new,
                               t.id_prof_req,
                               first_value(t.id_prof_req) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_req_new,
                               t.flg_time,
                               first_value(t.flg_time) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) flg_time_new,
                               t.dt_begin_tstz,
                               first_value(t.dt_begin_tstz) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) dt_begin_tstz_new,
                               t.dt_schedule_tstz,
                               first_value(t.dt_schedule_tstz) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) dt_schedule_tstz_new,
                               t.flg_status,
                               first_value(t.flg_status) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) flg_status_new,
                               t.priority,
                               first_value(t.priority) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) priority_new,
                               t.id_diagnosis_list,
                               first_value(t.id_diagnosis_list) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_diagnosis_list_new,
                               t.notes,
                               first_value(t.notes) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) notes_new,
                               t.id_prof_cancel,
                               first_value(t.id_prof_cancel) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_cancel_new,
                               t.notes_cancel,
                               first_value(t.notes_cancel) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) notes_cancel_new,
                               t.id_room,
                               first_value(t.id_room) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_room_new,
                               dbms_lob.substr(t.notes_patient, 3800) notes_patient,
                               first_value(dbms_lob.substr(t.notes_patient, 3800)) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) notes_patient_new,
                               t.notes_tech,
                               first_value(t.notes_tech) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) notes_tech_new,
                               t.id_pat_pregnancy,
                               first_value(t.id_pat_pregnancy) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_pat_pregnancy_new,
                               t.dt_target_tstz,
                               first_value(t.dt_target_tstz) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) dt_target_tstz_new,
                               t.dt_final_target_tstz,
                               first_value(t.dt_final_target_tstz) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) dt_final_target_tstz_new,
                               t.dt_cancel_tstz,
                               first_value(t.dt_cancel_tstz) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) dt_cancel_tstz_new,
                               t.id_prof_performed,
                               first_value(t.id_prof_performed) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_performed_new,
                               t.start_time,
                               first_value(t.start_time) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) start_time_new,
                               t.end_time,
                               first_value(t.end_time) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) end_time_new,
                               t.flg_referral,
                               first_value(t.flg_referral) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) flg_referral_new,
                               t.id_cancel_reason,
                               first_value(t.id_cancel_reason) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_cancel_reason_new,
                               t.id_clinical_purpose,
                               first_value(t.id_clinical_purpose) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_clinical_purpose_new,
                               t.clinical_purpose_notes,
                               first_value(t.clinical_purpose_notes) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) clinical_purpose_notes_new,
                               t.flg_location,
                               first_value(t.flg_location) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) flg_location_new,
                               t.id_exec_institution,
                               first_value(t.id_exec_institution) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_exec_institution_new,
                               t.id_task_dependency,
                               first_value(t.id_task_dependency) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_task_dependency_new,
                               t.id_prof_performed_reg,
                               first_value(t.id_prof_performed_reg) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_performed_reg_new,
                               t.dt_performed_reg,
                               first_value(t.dt_performed_reg) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) dt_performed_reg_new,
                               t.id_order_recurrence,
                               first_value(t.id_order_recurrence) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_order_recurrence_new,
                               t.flg_fasting,
                               first_value(t.flg_fasting) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) flg_fasting_new,
                               t.flg_prn,
                               first_value(t.flg_prn) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) flg_prn_new,
                               dbms_lob.substr(t.notes_prn, 3800) notes_prn,
                               first_value(dbms_lob.substr(t.notes_prn, 3800)) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) notes_prn_new,
                               t.id_pat_health_plan,
                               first_value(t.id_pat_health_plan) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_pat_health_plan_new,
                               t.id_pat_exemption,
                               first_value(t.id_pat_exemption) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_pat_exemption_new,
                               t.id_cdr,
                               first_value(t.id_cdr) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_cdr_new,
                               t.flg_laterality,
                               first_value(t.flg_laterality) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) flg_laterality_new,
                               t.id_prof_ordered_by,
                               first_value(t.id_prof_ordered_by) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_ordered_by_new,
                               t.prof_ordered_by,
                               first_value(t.prof_ordered_by) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) prof_ordered_by_new,
                               t.dt_ordered_by,
                               first_value(t.dt_ordered_by) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) dt_ordered_by_new,
                               t.id_order_type,
                               first_value(t.id_order_type) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_order_type_new,
                               desc_order_type,
                               first_value(t.desc_order_type) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) desc_order_type_new,
                               t.id_prof_ordered_by_cancel,
                               first_value(t.id_prof_ordered_by_cancel) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_ordered_by_cancel_new,
                               t.prof_ordered_by_cancel,
                               first_value(t.prof_ordered_by_cancel) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) prof_ordered_by_cancel_new,
                               t.dt_ordered_cancel,
                               first_value(t.dt_ordered_cancel) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) dt_ordered_cancel_new,
                               t.id_order_type_cancel,
                               first_value(t.id_order_type_cancel) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_order_type_cancel_new,
                               desc_order_type_cancel,
                               first_value(t.desc_order_type_cancel) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) desc_order_type_cancel_new,
                               notes_scheduler,
                               first_value(t.notes_scheduler) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) notes_scheduler_new,
                               t.operation_time,
                               first_value(t.operation_time) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) operation_time_new,
                               t.operation_user,
                               first_value(t.operation_user) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) operation_user_new,
                               t.diagnosis_notes,
                               first_value(t.diagnosis_notes) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) diagnosis_notes_new
                          FROM (SELECT /*+ opt_estimate(table cso rows=1) opt_estimate(table csc rows=2) */
                                 erd.id_exam_req_det,
                                 erd.id_exam_req,
                                 erd.id_exam,
                                 er.id_episode,
                                 er.dt_req_tstz,
                                 pk_date_utils.date_send_tsz(i_lang, erd.dt_last_update_tstz, i_prof) dt_last_update_tstz,
                                 er.id_prof_req,
                                 er.flg_time,
                                 er.dt_begin_tstz,
                                 er.dt_schedule_tstz,
                                 erd.flg_status,
                                 erd.flg_priority priority,
                                 erd.notes,
                                 erd.id_prof_cancel,
                                 erd.notes_cancel,
                                 erd.id_room,
                                 dbms_lob.substr(erd.notes_patient, 3800) notes_patient,
                                 erd.notes_tech,
                                 erd.id_pat_pregnancy,
                                 erd.dt_target_tstz,
                                 erd.dt_final_target_tstz,
                                 erd.dt_cancel_tstz,
                                 erd.id_prof_performed,
                                 erd.start_time,
                                 erd.end_time,
                                 erd.flg_referral,
                                 erd.id_cancel_reason,
                                 erd.id_clinical_purpose,
                                 erd.clinical_purpose_notes,
                                 erd.flg_location,
                                 erd.id_exec_institution,
                                 erd.id_task_dependency,
                                 erd.id_prof_performed_reg,
                                 erd.dt_performed_reg,
                                 erd.id_order_recurrence,
                                 erd.flg_fasting,
                                 erd.flg_prn,
                                 dbms_lob.substr(erd.prn_notes, 3800) notes_prn,
                                 erd.id_pat_health_plan,
                                 erd.id_pat_exemption,
                                 erd.id_cdr,
                                 erd.flg_laterality,
                                 pk_utils.concat_table(CAST(MULTISET (SELECT mrd.id_mcdt_req_diagnosis
                                                               FROM mcdt_req_diagnosis mrd
                                                              WHERE mrd.id_exam_req_det = erd.id_exam_req_det
                                                                AND nvl(mrd.flg_status, '@') != 'C') AS table_number),
                                                       ';') id_diagnosis_list,
                                 cso.id_prof_ordered_by,
                                 cso.desc_prof_ordered_by prof_ordered_by,
                                 cso.dt_ordered_by,
                                 cso.id_order_type,
                                 cso.desc_order_type,
                                 csc.id_prof_ordered_by id_prof_ordered_by_cancel,
                                 csc.desc_prof_ordered_by prof_ordered_by_cancel,
                                 csc.dt_ordered_by dt_ordered_cancel,
                                 csc.id_order_type id_order_type_cancel,
                                 csc.desc_order_type desc_order_type_cancel,
                                 erd.notes_scheduler,
                                 NULL operation_time,
                                 NULL operation_user,
                                 erd.diagnosis_notes
                                  FROM exam_req_det erd, exam_req er, cso_table cso, cso_table csc
                                 WHERE erd.id_exam_req_det = i_exam_req_det
                                   AND erd.id_exam_req = er.id_exam_req
                                   AND erd.id_co_sign_order = cso.id_co_sign_hist(+)
                                   AND erd.id_co_sign_cancel = csc.id_co_sign_hist(+)
                                UNION ALL
                                SELECT /*+ opt_estimate(table cso rows=1) opt_estimate(table csc rows=2) */
                                 erdh.id_exam_req_det,
                                 erdh.id_exam_req,
                                 erdh.id_exam,
                                 er.id_episode,
                                 er.dt_req_tstz,
                                 pk_date_utils.date_send_tsz(i_lang, erdh.dt_last_update_tstz, i_prof) dt_last_update_tstz,
                                 er.id_prof_req,
                                 er.flg_time,
                                 er.dt_begin_tstz,
                                 er.dt_schedule_tstz,
                                 erdh.flg_status,
                                 erdh.flg_priority priority,
                                 erdh.notes,
                                 erdh.id_prof_cancel,
                                 erdh.notes_cancel,
                                 erdh.id_room,
                                 dbms_lob.substr(erdh.notes_patient, 3800) notes_patient,
                                 erdh.notes_tech,
                                 erdh.id_pat_pregnancy,
                                 erdh.dt_target_tstz,
                                 erdh.dt_final_target_tstz,
                                 erdh.dt_cancel_tstz,
                                 erdh.id_prof_performed,
                                 erdh.start_time,
                                 erdh.end_time,
                                 erdh.flg_referral,
                                 erdh.id_cancel_reason,
                                 erdh.id_clinical_purpose,
                                 erdh.clinical_purpose_notes,
                                 erdh.flg_location,
                                 erdh.id_exec_institution,
                                 erdh.id_task_dependency,
                                 erdh.id_prof_performed_reg,
                                 erdh.dt_performed_reg,
                                 erdh.id_order_recurrence,
                                 erdh.flg_fasting,
                                 erdh.flg_prn,
                                 dbms_lob.substr(erdh.prn_notes, 3800) notes_prn,
                                 erdh.id_pat_health_plan,
                                 erdh.id_pat_exemption,
                                 erdh.id_cdr,
                                 erdh.flg_laterality,
                                 erdh.id_diagnosis_list,
                                 cso.id_prof_ordered_by,
                                 cso.desc_prof_ordered_by prof_ordered_by,
                                 cso.dt_ordered_by,
                                 cso.id_order_type,
                                 cso.desc_order_type,
                                 csc.id_prof_ordered_by id_prof_ordered_by_cancel,
                                 csc.desc_prof_ordered_by prof_ordered_by_cancel,
                                 csc.dt_ordered_by dt_ordered_cancel,
                                 csc.id_order_type id_order_type_cancel,
                                 csc.desc_order_type desc_order_type_cancel,
                                 erdh.notes_scheduler,
                                 erdh.operation_time,
                                 erdh.operation_user,
                                 erdh.diagnosis_notes
                                  FROM exam_req_det_hist erdh, exam_req er, cso_table cso, cso_table csc
                                 WHERE erdh.id_exam_req_det = i_exam_req_det
                                   AND erdh.id_exam_req = er.id_exam_req
                                   AND erdh.flg_status NOT IN
                                       (pk_exam_constant.g_exam_cancel, pk_exam_constant.g_exam_draft)
                                   AND erdh.id_co_sign_order = cso.id_co_sign_hist(+)
                                   AND erdh.id_co_sign_cancel = csc.id_co_sign_hist(+)
                                 ORDER BY operation_time DESC NULLS FIRST) t
                         ORDER BY rn) erd);
    
        RETURN l_ret;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exams_detail();
    END tf_get_exam_order_history;

    FUNCTION tf_get_exam_cq
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_episode      IN episode.id_episode%TYPE,
        i_exam_req_det IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report   IN VARCHAR2 DEFAULT pk_exam_constant.g_no
    ) RETURN t_tbl_exams_cq IS
    
        l_ret t_tbl_exams_cq := t_tbl_exams_cq();
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        va_code_messages table_varchar := table_varchar('EXAMS_T251');
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN va_code_messages.first .. va_code_messages.last
        LOOP
            aa_code_messages(va_code_messages(i)) := '<b>' ||
                                                     pk_message.get_message(i_lang, i_prof, va_code_messages(i)) ||
                                                     '</b> ';
        END LOOP;
    
        g_error := 'OPEN O_EXAM_CLINICAL_QUESTIONS';
        SELECT t_exams_cq(id_exam_req_det,
                          id_content,
                          flg_time,
                          desc_clinical_question,
                          desc_response,
                          NULL,
                          NULL,
                          NULL)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT id_exam_req_det,
                       id_content,
                       flg_time,
                       id_questionnaire,
                       decode(i_flg_report,
                              pk_exam_constant.g_no,
                              decode(rownum, 1, aa_code_messages('EXAMS_T251') || chr(10), NULL) || '    ' ||
                              desc_clinical_question || desc_response,
                              desc_clinical_question) desc_clinical_question,
                       decode(i_flg_report, pk_exam_constant.g_no, to_clob(''), to_clob(desc_response)) desc_response
                  FROM (SELECT id_exam_req_det,
                               id_content,
                               flg_time,
                               id_questionnaire,
                               desc_clinical_question,
                               desc_response
                          FROM (SELECT DISTINCT eqr1.id_exam_req_det,
                                                eqr1.id_content,
                                                eqr1.flg_time,
                                                eqr1.id_questionnaire,
                                                decode(i_flg_report,
                                                       pk_exam_constant.g_no,
                                                       '<b>' ||
                                                       pk_mcdt.get_questionnaire_alias(i_lang,
                                                                                       i_prof,
                                                                                       'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' ||
                                                                                       eqr1.id_questionnaire) || ':</b> ',
                                                       pk_mcdt.get_questionnaire_alias(i_lang,
                                                                                       i_prof,
                                                                                       'QUESTIONNAIRE.CODE_QUESTIONNAIRE.' ||
                                                                                       eqr1.id_questionnaire)) desc_clinical_question,
                                                dbms_lob.substr(decode(dbms_lob.getlength(eqr.notes),
                                                                       NULL,
                                                                       to_clob(decode(eqr1.desc_response,
                                                                                      NULL,
                                                                                      '---',
                                                                                      eqr1.desc_response)),
                                                                       pk_exam_utils.get_exam_response(i_lang,
                                                                                                       i_prof,
                                                                                                       eqr.notes)),
                                                                3800) desc_response,
                                                pk_exam_utils.get_exam_questionnaire_rank(i_lang,
                                                                                          i_prof,
                                                                                          erd.id_exam,
                                                                                          eqr.id_questionnaire,
                                                                                          eqr.flg_time) rank
                                  FROM (SELECT eqr.id_exam_req_det,
                                               eqr.id_questionnaire,
                                               listagg(pk_exam_utils.get_questionnaire_id_content(i_lang,
                                                                                                  i_prof,
                                                                                                  eqr.id_questionnaire,
                                                                                                  eqr.id_response),
                                                       '; ') within GROUP(ORDER BY eqr.id_response) id_content,
                                               eqr.flg_time,
                                               listagg(pk_mcdt.get_response_alias(i_lang,
                                                                                  i_prof,
                                                                                  'RESPONSE.CODE_RESPONSE.' ||
                                                                                  eqr.id_response),
                                                       '; ') within GROUP(ORDER BY eqr.id_response) desc_response,
                                               eqr.dt_last_update_tstz,
                                               row_number() over(PARTITION BY eqr.id_questionnaire, eqr.flg_time ORDER BY eqr.dt_last_update_tstz DESC NULLS FIRST) rn
                                          FROM exam_question_response eqr
                                         WHERE eqr.id_exam_req_det = i_exam_req_det
                                         GROUP BY eqr.id_exam_req_det,
                                                  eqr.id_questionnaire,
                                                  eqr.flg_time,
                                                  eqr.dt_last_update_tstz) eqr1,
                                       exam_question_response eqr,
                                       exam_req_det erd
                                 WHERE eqr1.rn = 1
                                   AND eqr1.id_exam_req_det = eqr.id_exam_req_det
                                   AND eqr1.id_questionnaire = eqr.id_questionnaire
                                   AND eqr1.dt_last_update_tstz = eqr.dt_last_update_tstz
                                   AND eqr1.flg_time = eqr.flg_time
                                   AND eqr.id_exam_req_det = erd.id_exam_req_det)
                         ORDER BY flg_time, rank));
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exams_cq();
    END tf_get_exam_cq;

    FUNCTION tf_get_exam_cq_history
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_episode      IN episode.id_episode%TYPE,
        i_exam_req_det IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report   IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_flg_html     IN VARCHAR2 DEFAULT pk_exam_constant.g_no
    ) RETURN t_tbl_exams_cq IS
    
        l_ret t_tbl_exams_cq := t_tbl_exams_cq();
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        va_code_messages table_varchar := table_varchar('EXAMS_T251', 'EXAMS_T267');
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        FOR i IN va_code_messages.first .. va_code_messages.last
        LOOP
            aa_code_messages(va_code_messages(i)) := '<b>' ||
                                                     pk_message.get_message(i_lang, i_prof, va_code_messages(i)) ||
                                                     '</b> ';
        END LOOP;
    
        g_error := 'OPEN O_EXAM_CLINICAL_QUESTIONS';
        SELECT t_exams_cq(id_exam_req_det, id_content, flg_time, desc_clinical_question, NULL, dt_last_update, NULL, rn)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT id_exam_req_det,
                       id_content,
                       flg_time,
                       desc_clinical_question,
                       dt_last_update,
                       num_clinical_question,
                       rn
                  FROM (SELECT t.id_exam_req_det,
                               t.id_content,
                               t.flg_time,
                               decode(i_flg_report, pk_exam_constant.g_no, t.desc_clinical_question, NULL) desc_clinical_question,
                               t.dt_last_update,
                               row_number() over(PARTITION BY t.id_exam_req_det, t.current_rownum ORDER BY t.current_rownum DESC) + 1 num_clinical_question,
                               t.current_rownum rn
                          FROM (SELECT eqr.id_exam_req_det,
                                       q.id_content,
                                       eqr.flg_time,
                                       decode(i_flg_report,
                                               pk_exam_constant.g_no,
                                               CASE
                                                   WHEN eqr.previous_rownum IS NULL THEN
                                                    '<b>' || '    ' || pk_translation.get_translation(i_lang, q.code_questionnaire) ||
                                                    ':</b> ' || CASE
                                                        WHEN eqr.current_questionnaire IS NULL THEN
                                                         '---'
                                                        ELSE
                                                         to_char(eqr.current_questionnaire)
                                                    END
                                                   WHEN eqr.flg_new = pk_exam_constant.g_yes THEN
                                                    CASE i_flg_html
                                                        WHEN pk_alert_constant.g_no THEN
                                                         '<b>'
                                                        ELSE
                                                         '<span class="emphasizedRedDetail">'
                                                    END || '    ' || pk_translation.get_translation(i_lang, q.code_questionnaire) || ' ' ||
                                                    lower(pk_message.get_message(i_lang, i_prof, 'EXAMS_T267')) ||
                                                    CASE i_flg_html
                                                        WHEN pk_alert_constant.g_no THEN
                                                         '</b>' || '§'
                                                        ELSE
                                                         '</span>'
                                                    END || CASE
                                                        WHEN eqr.current_questionnaire IS NULL THEN
                                                         '---'
                                                        ELSE
                                                         to_char(eqr.current_questionnaire)
                                                    END || chr(10) || '<b>' || '    ' ||
                                                    pk_translation.get_translation(i_lang, q.code_questionnaire) || ':</b> ' || CASE
                                                        WHEN eqr.previous_questionnaire IS NULL THEN
                                                         '---'
                                                        ELSE
                                                         to_char(eqr.previous_questionnaire)
                                                    END
                                                   ELSE --WHEN THE ANSWER HAS NOT BEEN CHANGED => SHOW NONTHELESS
                                                    '<b>' || '    ' || pk_translation.get_translation(i_lang, q.code_questionnaire) ||
                                                    ':</b> ' || CASE
                                                        WHEN eqr.previous_questionnaire IS NULL THEN
                                                         '---'
                                                        ELSE
                                                         to_char(eqr.previous_questionnaire)
                                                    END
                                               END,
                                               NULL) desc_clinical_question,
                                       eqr.current_rownum,
                                       eqr.id_questionnaire,
                                       eqr.dt_last_update,
                                       rank
                                  FROM (SELECT erd1.id_questionnaire id_questionnaire,
                                               erd1.id_exam_req_det,
                                               erd1.notes current_questionnaire,
                                               erd1.flg_time,
                                               erd1.dt_last_update_tstz,
                                               erd1.rn current_rownum,
                                               erd2.notes previous_questionnaire,
                                               erd2.rn previous_rownum,
                                               erd1.dt_last_update,
                                               CASE
                                                    WHEN erd2.rn IS NULL THEN
                                                     pk_exam_constant.g_yes
                                                    WHEN to_char(erd1.notes) IS NULL
                                                         AND to_char(erd2.notes) IS NULL THEN
                                                     pk_exam_constant.g_no
                                                    WHEN to_char(erd1.notes) = to_char(erd2.notes) THEN
                                                     pk_exam_constant.g_no
                                                    ELSE
                                                     pk_exam_constant.g_yes
                                                END AS flg_new,
                                               pk_exam_utils.get_exam_questionnaire_rank(i_lang,
                                                                                         i_prof,
                                                                                         id_exam,
                                                                                         erd1.id_questionnaire,
                                                                                         erd1.flg_time) rank
                                          FROM (SELECT id_questionnaire,
                                                       id_exam_req_det,
                                                       notes,
                                                       flg_time,
                                                       dt_last_update_tstz,
                                                       row_number() over(PARTITION BY id_questionnaire ORDER BY id_questionnaire ASC, dt_last_update_tstz DESC) rn,
                                                       id_exam,
                                                       dt_last_update
                                                  FROM (SELECT *
                                                          FROM (SELECT eqr.id_exam_question_response,
                                                                       eqr.id_exam_req_det,
                                                                       eqr.id_questionnaire,
                                                                       eqr.dt_last_update_tstz,
                                                                       eqr.notes,
                                                                       eqr.flg_time,
                                                                       row_number() over(PARTITION BY eqr.id_questionnaire, eqr.dt_last_update_tstz ORDER BY eqr.id_exam_question_response) AS rn,
                                                                       erd.id_exam,
                                                                       pk_date_utils.date_send_tsz(i_lang,
                                                                                                   eqr.dt_last_update_tstz,
                                                                                                   i_prof) dt_last_update
                                                                  FROM exam_question_response eqr
                                                                  JOIN exam_req_det erd
                                                                    ON erd.id_exam_req_det = eqr.id_exam_req_det
                                                                 WHERE eqr.id_exam_req_det = i_exam_req_det)
                                                         WHERE rn = 1)) erd1
                                          LEFT JOIN (SELECT id_questionnaire,
                                                           id_exam_req_det,
                                                           notes,
                                                           dt_last_update_tstz,
                                                           row_number() over(PARTITION BY id_questionnaire ORDER BY id_questionnaire ASC, dt_last_update_tstz DESC) rn
                                                      FROM (SELECT *
                                                              FROM (SELECT eqr.id_exam_question_response,
                                                                           eqr.id_exam_req_det,
                                                                           eqr.id_questionnaire,
                                                                           eqr.dt_last_update_tstz,
                                                                           eqr.notes,
                                                                           row_number() over(PARTITION BY eqr.id_questionnaire, eqr.dt_last_update_tstz ORDER BY eqr.id_exam_question_response) AS rn --Because of multichoice options
                                                                      FROM exam_question_response eqr
                                                                     WHERE eqr.id_exam_req_det = i_exam_req_det)
                                                             WHERE rn = 1)) erd2
                                            ON erd2.id_questionnaire = erd1.id_questionnaire
                                           AND erd2.id_exam_req_det = erd1.id_exam_req_det
                                           AND erd1.rn = (erd2.rn - 1)
                                         ORDER BY erd1.rn ASC, rank ASC) eqr
                                  JOIN questionnaire q
                                    ON q.id_questionnaire = eqr.id_questionnaire) t
                        UNION ALL
                        SELECT t.id_exam_req_det,
                               NULL id_content,
                               t.flg_time,
                               '<b>' || pk_message.get_message(i_lang, i_prof, 'EXAMS_T251') || '</b> ' desc_clinical_question,
                               t.dt_last_update,
                               1 num_clinical_question, --First row of every set
                               row_number() over(PARTITION BY t.id_exam_req_det ORDER BY t.id_exam_req_det) rn
                          FROM (SELECT DISTINCT eqr.id_exam_req_det,
                                                eqr.flg_time,
                                                eqr.dt_last_update_tstz,
                                                pk_date_utils.date_send_tsz(i_lang, eqr.dt_last_update_tstz, i_prof) dt_last_update
                                  FROM exam_question_response eqr
                                 WHERE eqr.id_exam_req_det = i_exam_req_det) t)
                 ORDER BY rn, num_clinical_question ASC);
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exams_cq();
    END tf_get_exam_cq_history;

    FUNCTION tf_get_exam_co_sign
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exam_co_sign IS
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
    
        l_ret t_tbl_exam_co_sign := t_tbl_exam_co_sign();
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        SELECT t_exam_co_sign(id_exam_req_det => id_exam_req_det,
                              prof_order      => prof_order,
                              dt_order        => dt_order,
                              order_type      => order_type,
                              co_sign_prof    => co_sign_prof,
                              co_sign_date    => co_sign_date,
                              registry        => registry,
                              flg_status      => flg_status,
                              co_sign_notes   => co_sign_notes)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT i_exam_req_det id_exam_req_det,
                       csh.desc_prof_ordered_by prof_order,
                       pk_date_utils.date_char_tsz(i_lang, csh.dt_ordered_by, i_prof.institution, i_prof.software) dt_order,
                       csh.desc_order_type order_type,
                       pk_prof_utils.get_name_signature(i_lang, i_prof, cs.id_prof_co_signed) co_sign_prof,
                       pk_date_utils.date_char_tsz(i_lang, cs.dt_co_signed, i_prof.institution, i_prof.software) co_sign_date,
                       l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, cs.id_prof_co_signed) ||
                       decode(pk_prof_utils.get_spec_signature(i_lang,
                                                               i_prof,
                                                               cs.id_prof_co_signed,
                                                               cs.dt_co_signed,
                                                               cs.id_episode),
                              NULL,
                              '; ',
                              ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       cs.id_prof_co_signed,
                                                                       cs.dt_co_signed,
                                                                       cs.id_episode) || '); ') ||
                       pk_date_utils.date_char_tsz(i_lang, cs.dt_co_signed, i_prof.institution, i_prof.software) registry,
                       decode(pk_co_sign.get_id_action(pk_co_sign_api.g_cosign_action_def_add, NULL),
                              cs.id_action,
                              pk_exam_constant.g_exam_req,
                              pk_exam_constant.g_exam_cancel) flg_status,
                       decode(dbms_lob.getlength(cs.co_sign_notes),
                              NULL,
                              to_clob(''),
                              0,
                              to_clob(''),
                              decode(i_flg_report,
                                     pk_exam_constant.g_no,
                                     aa_code_messages('EXAMS_T100') || cs.co_sign_notes,
                                     cs.co_sign_notes)) co_sign_notes,
                       row_number() over(PARTITION BY cs.id_action ORDER BY cs.dt_created DESC NULLS FIRST) rn
                  FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                      i_prof,
                                                                      i_episode,
                                                                      NULL,
                                                                      NULL,
                                                                      NULL,
                                                                      i_exam_req_det)) cs
                 INNER JOIN TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang, i_prof, i_episode, NULL, NULL, NULL, i_exam_req_det)) csh
                    ON cs.id_task_type = csh.id_task_type
                   AND cs.id_task = csh.id_task
                 WHERE cs.flg_status = pk_co_sign_api.g_cosign_flg_status_cs
                   AND csh.flg_status = pk_co_sign_api.g_cosign_flg_status_p)
         WHERE rn = 1;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exam_co_sign();
    END tf_get_exam_co_sign;

    FUNCTION tf_get_exam_co_sign_history
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_flg_html         IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exam_co_sign IS
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
    
        l_ret t_tbl_exam_co_sign := t_tbl_exam_co_sign();
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        
            g_error := 'GET MESSAGES UPDATE';
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail_upd.first .. pk_exam_constant.ga_code_messages_exam_detail_upd.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail_upd(i)) := CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '<span class="emphasizedRedDetail">'
                                                                                              ELSE
                                                                                               '<b>'
                                                                                          END ||
                                                                                          pk_message.get_message(i_lang,
                                                                                                                 i_prof,
                                                                                                                 pk_exam_constant.ga_code_messages_exam_detail_upd(i)) ||
                                                                                          CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '</span> '
                                                                                              ELSE
                                                                                               '</b> '
                                                                                          END;
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        SELECT t_exam_co_sign(id_exam_req_det => id_exam_req_det,
                              prof_order      => NULL,
                              dt_order        => NULL,
                              order_type      => NULL,
                              co_sign_prof    => NULL,
                              co_sign_date    => NULL,
                              registry        => registry,
                              flg_status      => flg_status,
                              co_sign_notes   => co_sign_notes)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT i_exam_req_det id_exam_req_det,
                       l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, cs.id_prof_co_signed) ||
                       decode(pk_prof_utils.get_spec_signature(i_lang,
                                                               i_prof,
                                                               cs.id_prof_co_signed,
                                                               cs.dt_co_signed,
                                                               cs.id_episode),
                              NULL,
                              '; ',
                              ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       cs.id_prof_co_signed,
                                                                       cs.dt_co_signed,
                                                                       cs.id_episode) || '); ') ||
                       pk_date_utils.date_char_tsz(i_lang, cs.dt_co_signed, i_prof.institution, i_prof.software) registry,
                       decode(pk_co_sign.get_id_action(pk_co_sign_api.g_cosign_action_def_add, NULL),
                              cs.id_action,
                              pk_exam_constant.g_exam_req,
                              pk_exam_constant.g_exam_cancel) flg_status,
                       decode(dbms_lob.getlength(cs.co_sign_notes),
                              NULL,
                              to_clob(''),
                              0,
                              to_clob(''),
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T100'), '') ||
                              cs.co_sign_notes) co_sign_notes,
                       row_number() over(PARTITION BY cs.id_action ORDER BY cs.dt_created DESC NULLS FIRST) rn
                  FROM TABLE(pk_co_sign_api.tf_co_sign_task_hist_info(i_lang,
                                                                      i_prof,
                                                                      i_episode,
                                                                      NULL,
                                                                      NULL,
                                                                      NULL,
                                                                      i_exam_req_det)) cs
                 WHERE cs.flg_status = pk_co_sign_api.g_cosign_flg_status_cs)
         WHERE rn = 1;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exam_co_sign();
    END tf_get_exam_co_sign_history;

    FUNCTION tf_get_exam_perform
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exam_perform IS
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        l_epis_documentation NUMBER;
        l_notes1             CLOB;
        l_notes2             CLOB;
    
        l_cur_exam_time_out_val pk_touch_option_out.t_cur_plain_text_entry;
        l_exam_time_out_val     pk_touch_option_out.t_rec_plain_text_entry;
        l_cur_exam_doc_val      pk_touch_option_out.t_cur_plain_text_entry;
        l_exam_doc_val          pk_touch_option_out.t_rec_plain_text_entry;
    
        l_outp sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_OUTP', i_prof);
        l_care sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_CARE', i_prof);
        l_pp   sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_CLINICS', i_prof);
    
        l_ret t_tbl_exam_perform := t_tbl_exam_perform();
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        BEGIN
            SELECT ed.id_epis_documentation
              INTO l_epis_documentation
              FROM epis_documentation ed
             WHERE ed.id_episode = i_episode
               AND ed.id_doc_area = pk_exam_constant.g_doc_area_exam_time_out
               AND ed.id_epis_context = i_exam_req_det;
        
            g_error := 'CALL PK_TOUCH_OPTION_OUT.GET_PLAIN_TEXT_ENTRIES 1';
            pk_touch_option_out.get_plain_text_entries(i_lang                    => i_lang,
                                                       i_prof                    => i_prof,
                                                       i_epis_documentation_list => table_number(l_epis_documentation),
                                                       i_use_html_format         => CASE
                                                                                        WHEN i_flg_report = pk_exam_constant.g_no THEN
                                                                                         pk_exam_constant.g_yes
                                                                                        ELSE
                                                                                         pk_exam_constant.g_no
                                                                                    END,
                                                       o_entries                 => l_cur_exam_time_out_val);
        
            FETCH l_cur_exam_time_out_val
                INTO l_exam_time_out_val;
            CLOSE l_cur_exam_time_out_val;
        
            l_notes1 := REPLACE(l_exam_time_out_val.plain_text_entry, chr(10) || chr(10), chr(10));
            l_notes1 := REPLACE(l_notes1, chr(10), chr(10) || chr(9));
        EXCEPTION
            WHEN no_data_found THEN
                NULL;
        END;
    
        BEGIN
            SELECT eea.id_epis_doc_perform
              INTO l_epis_documentation
              FROM exams_ea eea
             WHERE eea.id_exam_req_det = i_exam_req_det;
        
            g_error := 'CALL PK_TOUCH_OPTION_OUT.GET_PLAIN_TEXT_ENTRIES 2';
            pk_touch_option_out.get_plain_text_entries(i_lang                    => i_lang,
                                                       i_prof                    => i_prof,
                                                       i_epis_documentation_list => table_number(l_epis_documentation),
                                                       i_use_html_format         => CASE
                                                                                        WHEN i_flg_report = pk_exam_constant.g_no THEN
                                                                                         pk_exam_constant.g_yes
                                                                                        ELSE
                                                                                         pk_exam_constant.g_no
                                                                                    END,
                                                       o_entries                 => l_cur_exam_doc_val);
        
            FETCH l_cur_exam_doc_val
                INTO l_exam_doc_val;
            CLOSE l_cur_exam_doc_val;
        
            l_notes2 := REPLACE(l_exam_doc_val.plain_text_entry, chr(10) || chr(10), chr(10));
            l_notes2 := REPLACE(l_notes2, chr(10), chr(10) || chr(9));
        EXCEPTION
            WHEN no_data_found THEN
                NULL;
        END;
    
        SELECT t_exam_perform(id_exam_req_det => t.id_exam_req_det,
                              registry        => t.registry,
                              desc_exam       => t.desc_exam,
                              prof_perform    => t.prof_perform,
                              dt_perform      => t.dt_perform,
                              desc_supplies   => t.desc_supplies,
                              desc_time_out   => t.desc_time_out,
                              desc_perform    => t.desc_perform,
                              dt_ord          => t.dt_ord)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT erd.id_exam_req_det,
                       l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, erd.id_prof_performed_reg) ||
                       decode(pk_prof_utils.get_spec_signature(i_lang,
                                                               i_prof,
                                                               erd.id_prof_performed_reg,
                                                               erd.dt_performed_reg,
                                                               eea.id_episode),
                              NULL,
                              '; ',
                              ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       erd.id_prof_performed_reg,
                                                                       erd.dt_performed_reg,
                                                                       eea.id_episode) || '); ') ||
                       pk_date_utils.date_char_tsz(i_lang, erd.dt_performed_reg, i_prof.institution, i_prof.software) registry,
                       decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T037'), '') ||
                       pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || erd.id_exam, NULL) desc_exam,
                       decode(erd.id_prof_performed,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T077'), '') ||
                              pk_prof_utils.get_name_signature(i_lang, i_prof, erd.id_prof_performed)) prof_perform,
                       decode(erd.start_time,
                               NULL,
                               NULL,
                               CASE
                                   WHEN i_prof.software IN (l_outp, l_care, l_pp)
                                        AND eea.flg_time = pk_exam_constant.g_flg_time_r THEN
                                    CASE
                                        WHEN eea.start_time IN
                                             (SELECT e.start_time
                                                FROM exams_ea e
                                               WHERE pk_date_utils.dt_chr_tsz(i_lang,
                                                                              eea.start_time,
                                                                              i_prof.institution,
                                                                              i_prof.software) =
                                                     pk_date_utils.dt_chr_tsz(i_lang, e.start_time, i_prof.institution, i_prof.software)) THEN
                                         decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T078'), '') ||
                                         pk_date_utils.date_char_tsz(i_lang, eea.start_time, i_prof.institution, i_prof.software)
                                        ELSE
                                         NULL
                                    END
                                   ELSE
                                    decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T078'), '') ||
                                    pk_date_utils.date_char_tsz(i_lang, eea.start_time, i_prof.institution, i_prof.software)
                               END) dt_perform,
                       decode(pk_supplies_external_api_db.get_supplies_request(i_lang,
                                                                               i_prof,
                                                                               i_exam_req_det,
                                                                               eea.flg_type),
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T079'), '') ||
                              pk_supplies_external_api_db.get_supplies_request(i_lang,
                                                                               i_prof,
                                                                               i_exam_req_det,
                                                                               eea.flg_type)) desc_supplies,
                       decode(dbms_lob.getlength(l_notes1), NULL, to_clob(''), l_notes1) desc_time_out,
                       decode(dbms_lob.getlength(l_notes2),
                              NULL,
                              to_clob(''),
                              decode(i_flg_report,
                                     pk_exam_constant.g_no,
                                     decode(instr(lower(l_notes2), '<b>'),
                                            0,
                                            to_clob(aa_code_messages('EXAMS_T100')) || l_notes2,
                                            l_notes2),
                                     l_notes2)) desc_perform,
                       pk_date_utils.date_send_tsz(i_lang, erd.start_time, i_prof) dt_ord
                  FROM exam_req_det erd, exams_ea eea
                 WHERE erd.id_exam_req_det = i_exam_req_det
                   AND erd.id_exam_req_det = eea.id_exam_req_det
                   AND erd.start_time IS NOT NULL) t;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exam_perform();
    END tf_get_exam_perform;

    FUNCTION tf_get_exam_perform_history
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_flg_html         IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exam_perform_history IS
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        l_epis_documentation NUMBER;
        l_notes1             CLOB;
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
        l_msg_del sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M106');
    
        l_outp sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_OUTP', i_prof);
        l_care sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_CARE', i_prof);
        l_pp   sys_config.value%TYPE := pk_sysconfig.get_config('SOFTWARE_ID_CLINICS', i_prof);
    
        l_formated_text VARCHAR2(100 CHAR) := CASE i_flg_html
                                                  WHEN pk_alert_constant.g_yes THEN
                                                   '<br> '
                                                  ELSE
                                                   '<br>' || chr(9) || chr(10)
                                              END;
    
        l_update_tag_flash VARCHAR2(1 CHAR) := CASE i_flg_html
                                                   WHEN pk_alert_constant.g_yes THEN
                                                    NULL
                                                   ELSE
                                                    '§'
                                               END;
    
        l_cur_exam_time_out_val pk_touch_option_out.t_cur_plain_text_entry;
        l_exam_time_out_val     pk_touch_option_out.t_rec_plain_text_entry;
    
        l_ret t_tbl_exam_perform_history := t_tbl_exam_perform_history();
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        
            g_error := 'GET MESSAGES UPDATE';
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail_upd.first .. pk_exam_constant.ga_code_messages_exam_detail_upd.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail_upd(i)) := CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '<span class="emphasizedRedDetail">'
                                                                                              ELSE
                                                                                               '<b>'
                                                                                          END ||
                                                                                          pk_message.get_message(i_lang,
                                                                                                                 i_prof,
                                                                                                                 pk_exam_constant.ga_code_messages_exam_detail_upd(i)) ||
                                                                                          CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '</span> '
                                                                                              ELSE
                                                                                               '</b> '
                                                                                          END;
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        BEGIN
            SELECT ed.id_epis_documentation
              INTO l_epis_documentation
              FROM epis_documentation ed
             WHERE ed.id_episode = i_episode
               AND ed.id_doc_area = pk_exam_constant.g_doc_area_exam_time_out
               AND ed.id_epis_context = i_exam_req_det;
        
            g_error := 'CALL PK_TOUCH_OPTION_OUT.GET_PLAIN_TEXT_ENTRIES 1';
            pk_touch_option_out.get_plain_text_entries(i_lang                    => i_lang,
                                                       i_prof                    => i_prof,
                                                       i_epis_documentation_list => table_number(l_epis_documentation),
                                                       i_use_html_format         => CASE
                                                                                        WHEN i_flg_report = pk_exam_constant.g_no THEN
                                                                                         pk_exam_constant.g_yes
                                                                                        ELSE
                                                                                         pk_exam_constant.g_no
                                                                                    END,
                                                       o_entries                 => l_cur_exam_time_out_val);
        
            FETCH l_cur_exam_time_out_val
                INTO l_exam_time_out_val;
            CLOSE l_cur_exam_time_out_val;
        
            l_notes1 := REPLACE(l_exam_time_out_val.plain_text_entry, chr(10) || chr(10), chr(10));
            l_notes1 := REPLACE(l_notes1, chr(10), chr(10) || chr(9));
        EXCEPTION
            WHEN no_data_found THEN
                NULL;
        END;
    
        SELECT t_exam_perform_history(id_exam_req_det => t.id_exam_req_det,
                                      flg_status      => t.flg_status,
                                      registry        => t.registry,
                                      desc_exam       => t.desc_exam,
                                      prof_perform    => t.prof_perform,
                                      dt_perform      => t.dt_perform,
                                      desc_supplies   => t.desc_supplies,
                                      desc_time_out   => t.desc_time_out,
                                      desc_perform    => t.desc_perform,
                                      cancel_reason   => t.cancel_reason,
                                      notes_cancel    => t.notes_cancel,
                                      dt_ord          => t.dt_ord)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT erd.id_exam_req_det,
                       erd.flg_status,
                       l_msg_reg || ' ' ||
                       pk_prof_utils.get_name_signature(i_lang,
                                                        i_prof,
                                                        nvl(erd.id_prof_cancel, erd.id_prof_performed_reg)) ||
                       decode(pk_prof_utils.get_spec_signature(i_lang,
                                                               i_prof,
                                                               nvl(erd.id_prof_cancel, erd.id_prof_performed_reg),
                                                               nvl(erd.dt_cancel_tstz, erd.dt_performed_reg),
                                                               erd.id_episode),
                              NULL,
                              '; ',
                              ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       nvl(erd.id_prof_cancel, erd.id_prof_performed_reg),
                                                                       nvl(erd.dt_cancel_tstz, erd.dt_performed_reg),
                                                                       erd.id_episode) || '); ') ||
                       pk_date_utils.date_char_tsz(i_lang,
                                                   nvl(erd.dt_cancel_tstz, erd.dt_performed_reg),
                                                   i_prof.institution,
                                                   i_prof.software) registry,
                       decode(cnt,
                              rn,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T037'), '') ||
                              pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || erd.id_exam, NULL)) desc_exam,
                       
                       decode(cnt,
                              rn,
                              decode(erd.id_prof_performed,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T077'), '') ||
                                     pk_prof_utils.get_name_signature(i_lang, i_prof, erd.id_prof_performed)),
                              decode(erd.id_prof_performed,
                                     erd.id_prof_performed_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T194') || l_update_tag_flash ||
                                            decode(erd.id_prof_performed,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_prof_utils.get_name_signature(i_lang, i_prof, erd.id_prof_performed)) ||
                                            decode(erd.id_prof_performed_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T077') ||
                                                   pk_prof_utils.get_name_signature(i_lang,
                                                                                    i_prof,
                                                                                    erd.id_prof_performed_new)),
                                            decode(erd.id_prof_performed,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_prof_utils.get_name_signature(i_lang, i_prof, erd.id_prof_performed)) ||
                                            decode(erd.id_prof_performed_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_prof_utils.get_name_signature(i_lang,
                                                                                    i_prof,
                                                                                    erd.id_prof_performed_new))))) prof_perform,
                       decode(cnt,
                               rn,
                               decode(erd.start_time,
                                      NULL,
                                      NULL,
                                      decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T078'), '') ||
                                      pk_date_utils.date_char_tsz(i_lang,
                                                                  erd.start_time,
                                                                  i_prof.institution,
                                                                  i_prof.software)),
                               decode(erd.start_time,
                                      erd.start_time_new,
                                      NULL,
                                      decode(i_flg_report,
                                             pk_exam_constant.g_no,
                                             aa_code_messages('EXAMS_T195') || l_update_tag_flash ||
                                             decode(erd.start_time,
                                                    NULL,
                                                    l_msg_del,
                                                    CASE
                                                        WHEN i_prof.software IN (l_outp, l_care, l_pp)
                                                             AND erd.flg_time = pk_exam_constant.g_flg_time_r THEN
                                                         CASE
                                                             WHEN erd.start_time IN
                                                                  (SELECT e.start_time
                                                                     FROM exams_ea e
                                                                    WHERE pk_date_utils.dt_chr_tsz(i_lang,
                                                                                                   erd.start_time,
                                                                                                   i_prof.institution,
                                                                                                   i_prof.software) =
                                                                          pk_date_utils.dt_chr_tsz(i_lang, e.start_time, i_prof.institution, i_prof.software)) THEN
                                                              pk_date_utils.date_char_tsz(i_lang, erd.start_time, i_prof.institution, i_prof.software)
                                                             ELSE
                                                              NULL
                                                         END
                                                        ELSE
                                                         pk_date_utils.date_char_tsz(i_lang, erd.start_time, i_prof.institution, i_prof.software)
                                                    END) || decode(erd.start_time_new,
                                                                   NULL,
                                                                   NULL,
                                                                   l_formated_text || aa_code_messages('EXAMS_T078') || CASE
                                                                       WHEN i_prof.software IN (l_outp, l_care, l_pp)
                                                                            AND erd.flg_time = pk_exam_constant.g_flg_time_r THEN
                                                                        CASE
                                                                            WHEN erd.start_time_new IN
                                                                                 (SELECT e.start_time
                                                                                    FROM exams_ea e
                                                                                   WHERE pk_date_utils.dt_chr_tsz(i_lang,
                                                                                                                  erd.start_time_new,
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software) =
                                                                                         pk_date_utils.dt_chr_tsz(i_lang, e.start_time, i_prof.institution, i_prof.software)) THEN
                                                                             pk_date_utils.date_char_tsz(i_lang, erd.start_time_new, i_prof.institution, i_prof.software)
                                                                            ELSE
                                                                             NULL
                                                                        END
                                                                       ELSE
                                                                        pk_date_utils.date_char_tsz(i_lang, erd.start_time_new, i_prof.institution, i_prof.software)
                                                                   END),
                                             decode(erd.start_time,
                                                    NULL,
                                                    l_msg_del,
                                                    CASE
                                                        WHEN i_prof.software IN (l_outp, l_care, l_pp)
                                                             AND erd.flg_time = pk_exam_constant.g_flg_time_r THEN
                                                         CASE
                                                             WHEN erd.start_time IN
                                                                  (SELECT e.start_time
                                                                     FROM exams_ea e
                                                                    WHERE pk_date_utils.dt_chr_tsz(i_lang,
                                                                                                   erd.start_time,
                                                                                                   i_prof.institution,
                                                                                                   i_prof.software) =
                                                                          pk_date_utils.dt_chr_tsz(i_lang, e.start_time, i_prof.institution, i_prof.software)) THEN
                                                              pk_date_utils.date_char_tsz(i_lang, erd.start_time, i_prof.institution, i_prof.software)
                                                             ELSE
                                                              NULL
                                                         END
                                                        ELSE
                                                         pk_date_utils.date_char_tsz(i_lang, erd.start_time, i_prof.institution, i_prof.software)
                                                    END) || decode(erd.start_time_new,
                                                                   NULL,
                                                                   NULL,
                                                                   l_update_tag_flash || CASE
                                                                       WHEN i_prof.software IN (l_outp, l_care, l_pp)
                                                                            AND erd.flg_time = pk_exam_constant.g_flg_time_r THEN
                                                                        CASE
                                                                            WHEN erd.start_time_new IN
                                                                                 (SELECT e.start_time
                                                                                    FROM exams_ea e
                                                                                   WHERE pk_date_utils.dt_chr_tsz(i_lang,
                                                                                                                  erd.start_time_new,
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software) =
                                                                                         pk_date_utils.dt_chr_tsz(i_lang, e.start_time, i_prof.institution, i_prof.software)) THEN
                                                                             pk_date_utils.date_char_tsz(i_lang, erd.start_time_new, i_prof.institution, i_prof.software)
                                                                            ELSE
                                                                             NULL
                                                                        END
                                                                       ELSE
                                                                        pk_date_utils.date_char_tsz(i_lang, erd.start_time_new, i_prof.institution, i_prof.software)
                                                                   END)))) dt_perform,
                       decode(cnt,
                              rn,
                              decode(pk_supplies_external_api_db.get_supplies_request(i_lang,
                                                                                      i_prof,
                                                                                      i_exam_req_det,
                                                                                      erd.flg_type),
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T079'), '') ||
                                     pk_supplies_external_api_db.get_supplies_request(i_lang,
                                                                                      i_prof,
                                                                                      i_exam_req_det,
                                                                                      erd.flg_type)),
                              decode(rn,
                                     1,
                                     decode(pk_supplies_external_api_db.get_supplies_request(i_lang,
                                                                                             i_prof,
                                                                                             i_exam_req_det,
                                                                                             erd.flg_type),
                                            pk_supplies_external_api_db.get_supplies_request_history(i_lang,
                                                                                                     i_prof,
                                                                                                     erd.id_exam_req_det_hist_new,
                                                                                                     erd.flg_type),
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_exam_constant.g_no,
                                                   aa_code_messages('EXAMS_T196') || l_update_tag_flash ||
                                                   decode(pk_supplies_external_api_db.get_supplies_request(i_lang,
                                                                                                           i_prof,
                                                                                                           i_exam_req_det,
                                                                                                           erd.flg_type),
                                                          NULL,
                                                          l_msg_del,
                                                          pk_supplies_external_api_db.get_supplies_request(i_lang,
                                                                                                           i_prof,
                                                                                                           i_exam_req_det,
                                                                                                           erd.flg_type) ||
                                                          
                                                          decode(pk_supplies_external_api_db.get_supplies_request_history(i_lang,
                                                                                                                          i_prof,
                                                                                                                          erd.id_exam_req_det_hist_new,
                                                                                                                          erd.flg_type),
                                                                 NULL,
                                                                 l_msg_del,
                                                                 l_formated_text || aa_code_messages('EXAMS_T079') ||
                                                                 pk_supplies_external_api_db.get_supplies_request_history(i_lang,
                                                                                                                          i_prof,
                                                                                                                          erd.id_exam_req_det_hist_new,
                                                                                                                          erd.flg_type))),
                                                   
                                                   pk_supplies_external_api_db.get_supplies_request_history(i_lang,
                                                                                                            i_prof,
                                                                                                            erd.id_exam_req_det_hist,
                                                                                                            erd.flg_type) ||
                                                   l_update_tag_flash ||
                                                   pk_supplies_external_api_db.get_supplies_request_history(i_lang,
                                                                                                            i_prof,
                                                                                                            erd.id_exam_req_det_hist_new,
                                                                                                            erd.flg_type))),
                                     decode(pk_supplies_external_api_db.get_supplies_request_history(i_lang,
                                                                                                     i_prof,
                                                                                                     erd.id_exam_req_det_hist,
                                                                                                     erd.flg_type),
                                            pk_supplies_external_api_db.get_supplies_request_history(i_lang,
                                                                                                     i_prof,
                                                                                                     erd.id_exam_req_det_hist_new,
                                                                                                     erd.flg_type),
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_exam_constant.g_no,
                                                   aa_code_messages('EXAMS_T196') || l_update_tag_flash ||
                                                   decode(pk_supplies_external_api_db.get_supplies_request_history(i_lang,
                                                                                                                   i_prof,
                                                                                                                   erd.id_exam_req_det_hist,
                                                                                                                   erd.flg_type),
                                                          NULL,
                                                          l_msg_del,
                                                          pk_supplies_external_api_db.get_supplies_request_history(i_lang,
                                                                                                                   i_prof,
                                                                                                                   erd.id_exam_req_det_hist,
                                                                                                                   erd.flg_type) ||
                                                          
                                                          decode(pk_supplies_external_api_db.get_supplies_request_history(i_lang,
                                                                                                                          i_prof,
                                                                                                                          erd.id_exam_req_det_hist_new,
                                                                                                                          erd.flg_type),
                                                                 NULL,
                                                                 l_msg_del,
                                                                 l_formated_text || aa_code_messages('EXAMS_T079') ||
                                                                 pk_supplies_external_api_db.get_supplies_request_history(i_lang,
                                                                                                                          i_prof,
                                                                                                                          erd.id_exam_req_det_hist_new,
                                                                                                                          erd.flg_type))),
                                                   
                                                   pk_supplies_external_api_db.get_supplies_request_history(i_lang,
                                                                                                            i_prof,
                                                                                                            erd.id_exam_req_det_hist,
                                                                                                            erd.flg_type) ||
                                                   l_update_tag_flash ||
                                                   pk_supplies_external_api_db.get_supplies_request_history(i_lang,
                                                                                                            i_prof,
                                                                                                            erd.id_exam_req_det_hist_new,
                                                                                                            erd.flg_type))))) desc_supplies,
                       
                       decode(cnt,
                              rn,
                              decode(dbms_lob.getlength(notes1),
                                     NULL,
                                     to_clob(''),
                                     decode(i_flg_report, pk_exam_constant.g_no, notes1, notes1)),
                              decode(notes1,
                                     notes1_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T205') || l_update_tag_flash ||
                                            decode(notes1, NULL, l_msg_del, notes1) ||
                                            decode(notes1_new, NULL, to_clob(''), chr(10) || chr(9) || notes1_new),
                                            decode(notes1, NULL, l_msg_del, notes1) ||
                                            decode(notes1_new, NULL, NULL, l_update_tag_flash || notes1_new)))) desc_time_out,
                       
                       decode(cnt,
                              rn,
                              decode(dbms_lob.getlength(notes2),
                                     NULL,
                                     to_clob(''),
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T100'), '') ||
                                     notes2),
                              decode(notes2,
                                     notes2_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T205') || l_update_tag_flash ||
                                            decode(notes2, NULL, l_msg_del, notes2) ||
                                            decode(notes2_new,
                                                   NULL,
                                                   to_clob(''),
                                                   l_formated_text || aa_code_messages('EXAMS_T100') || notes2_new),
                                            decode(notes2, NULL, l_msg_del, notes2) ||
                                            decode(notes2_new, NULL, NULL, l_update_tag_flash || notes2_new)))) desc_perform,
                       
                       decode(cnt,
                              rn,
                              NULL,
                              decode(erd.flg_status,
                                     pk_exam_constant.g_exam_cancel,
                                     decode(erd.id_cancel_reason,
                                            erd.id_cancel_reason_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_exam_constant.g_no,
                                                   aa_code_messages('COMMON_M161') || l_update_tag_flash ||
                                                   decode(erd.id_cancel_reason,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                                  i_prof,
                                                                                                  erd.id_cancel_reason)) ||
                                                   decode(erd.id_cancel_reason_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('COMMON_M161') ||
                                                          pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                                  i_prof,
                                                                                                  erd.id_cancel_reason_new)),
                                                   decode(erd.id_cancel_reason,
                                                          NULL,
                                                          l_msg_del,
                                                          pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                                  i_prof,
                                                                                                  erd.id_cancel_reason)) ||
                                                   decode(erd.id_cancel_reason_new,
                                                          NULL,
                                                          NULL,
                                                          l_update_tag_flash ||
                                                          pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                                  i_prof,
                                                                                                  erd.id_cancel_reason_new)))),
                                     NULL)) cancel_reason,
                       decode(cnt,
                              rn,
                              NULL,
                              decode(erd.flg_status,
                                     pk_exam_constant.g_exam_cancel,
                                     decode(erd.notes_cancel,
                                            erd.notes_cancel_new,
                                            NULL,
                                            decode(i_flg_report,
                                                   pk_exam_constant.g_no,
                                                   aa_code_messages('COMMON_M044') || l_update_tag_flash ||
                                                   decode(erd.notes_cancel, NULL, l_msg_del, erd.notes_cancel) ||
                                                   decode(erd.notes_cancel_new,
                                                          NULL,
                                                          NULL,
                                                          l_formated_text || aa_code_messages('EXAMS_T009') ||
                                                          erd.notes_cancel_new),
                                                   decode(erd.notes_cancel, NULL, l_msg_del, erd.notes_cancel) ||
                                                   decode(erd.notes_cancel_new,
                                                          NULL,
                                                          NULL,
                                                          l_update_tag_flash || erd.notes_cancel_new))),
                                     NULL)) notes_cancel,
                       pk_date_utils.date_send_tsz(i_lang, erd.start_time, i_prof) dt_ord
                  FROM (SELECT row_number() over(ORDER BY t.operation_time DESC NULLS FIRST) rn,
                               MAX(rownum) over() cnt,
                               t.id_exam_req_det_hist,
                               first_value(t.id_exam_req_det_hist) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_exam_req_det_hist_new,
                               t.id_exam_req_det,
                               t.flg_type,
                               t.id_episode,
                               first_value(t.id_episode) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_episode_new,
                               t.id_exam,
                               t.flg_status,
                               first_value(t.flg_status) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) flg_status_new,
                               t.id_prof_performed,
                               first_value(t.id_prof_performed) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_performed_new,
                               t.start_time,
                               first_value(t.start_time) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) start_time_new,
                               t.end_time,
                               first_value(t.end_time) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) end_time_new,
                               t.id_prof_performed_reg,
                               first_value(t.id_prof_performed_reg) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_performed_reg_new,
                               t.dt_performed_reg,
                               first_value(t.dt_performed_reg) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) dt_performed_reg_new,
                               dbms_lob.substr(t.notes1, 3800) notes1,
                               first_value(dbms_lob.substr(t.notes1, 3800)) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) notes1_new,
                               dbms_lob.substr(t.notes2, 3800) notes2,
                               first_value(dbms_lob.substr(t.notes2, 3800)) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) notes2_new,
                               t.flg_time,
                               t.id_prof_cancel,
                               first_value(t.id_prof_cancel) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_cancel_new,
                               t.id_cancel_reason,
                               t.dt_cancel_tstz,
                               first_value(t.dt_cancel_tstz) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) dt_cancel_tstz_new,
                               first_value(t.id_cancel_reason) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) id_cancel_reason_new,
                               t.notes_cancel,
                               first_value(t.notes_cancel) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) notes_cancel_new,
                               t.operation_time,
                               first_value(t.operation_time) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) operation_time_new,
                               t.operation_user,
                               first_value(t.operation_user) over(ORDER BY operation_time rows BETWEEN 1 preceding AND CURRENT ROW) operation_user_new
                          FROM (SELECT NULL id_exam_req_det_hist,
                                       erd.id_exam_req_det,
                                       eea.id_episode,
                                       eea.flg_type,
                                       erd.id_exam,
                                       erd.flg_status,
                                       erd.id_prof_performed,
                                       erd.start_time,
                                       erd.end_time,
                                       erd.id_prof_performed_reg,
                                       erd.dt_performed_reg,
                                       l_notes1 notes1,
                                       pk_exam_utils.get_exam_result_notes(i_lang,
                                                                           i_prof,
                                                                           NULL,
                                                                           pk_exam_constant.g_no,
                                                                           eea.id_epis_doc_perform) notes2,
                                       erd.id_prof_cancel,
                                       erd.dt_cancel_tstz,
                                       erd.id_cancel_reason,
                                       erd.notes_cancel,
                                       NULL operation_time,
                                       NULL operation_user,
                                       eea.flg_time
                                  FROM exam_req_det erd, exams_ea eea
                                 WHERE erd.id_exam_req_det = i_exam_req_det
                                   AND erd.id_exam_req_det = eea.id_exam_req_det
                                   AND erd.flg_status NOT IN (pk_exam_constant.g_exam_sos,
                                                              pk_exam_constant.g_exam_exterior,
                                                              pk_exam_constant.g_exam_nr,
                                                              pk_exam_constant.g_exam_pending,
                                                              pk_exam_constant.g_exam_req,
                                                              pk_exam_constant.g_exam_draft,
                                                              pk_exam_constant.g_exam_tosched,
                                                              pk_exam_constant.g_exam_sched,
                                                              pk_exam_constant.g_exam_toexec,
                                                              pk_exam_constant.g_exam_cancel)
                                   AND (erd.start_time IS NOT NULL OR
                                       (erd.start_time IS NULL AND EXISTS
                                        (SELECT 1
                                            FROM exam_req_det_hist erdh
                                           WHERE erdh.id_exam_req_det = erd.id_exam_req_det HAVING COUNT(*) > 1)))
                                UNION ALL
                                SELECT erdh.id_exam_req_det_hist,
                                       erdh.id_exam_req_det,
                                       eea.id_episode,
                                       eea.flg_type,
                                       erdh.id_exam,
                                       erdh.flg_status,
                                       erdh.id_prof_performed,
                                       erdh.start_time,
                                       erdh.end_time,
                                       erdh.id_prof_performed_reg,
                                       erdh.dt_performed_reg,
                                       NULL notes1,
                                       pk_exam_utils.get_exam_result_notes(i_lang,
                                                                           i_prof,
                                                                           NULL,
                                                                           pk_exam_constant.g_no,
                                                                           erdh.id_epis_doc_perform) notes2,
                                       erdh.id_prof_cancel,
                                       erdh.dt_cancel_tstz,
                                       erdh.id_cancel_reason,
                                       erdh.notes_cancel,
                                       erdh.operation_time,
                                       erdh.operation_user,
                                       eea.flg_time
                                  FROM exam_req_det_hist erdh, exams_ea eea
                                 WHERE erdh.id_exam_req_det = i_exam_req_det
                                   AND erdh.id_exam_req_det = eea.id_exam_req_det
                                   AND erdh.flg_status NOT IN (pk_exam_constant.g_exam_sos,
                                                               pk_exam_constant.g_exam_exterior,
                                                               pk_exam_constant.g_exam_nr,
                                                               pk_exam_constant.g_exam_pending,
                                                               pk_exam_constant.g_exam_req,
                                                               pk_exam_constant.g_exam_draft,
                                                               pk_exam_constant.g_exam_tosched,
                                                               pk_exam_constant.g_exam_sched,
                                                               pk_exam_constant.g_exam_toexec,
                                                               pk_exam_constant.g_exam_result,
                                                               pk_exam_constant.g_exam_read)
                                 ORDER BY operation_time DESC NULLS FIRST) t
                         ORDER BY rn) erd) t;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exam_perform_history();
    END tf_get_exam_perform_history;

    FUNCTION tf_get_exam_result
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exam_result IS
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        l_ret t_tbl_exam_result := t_tbl_exam_result();
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        SELECT t_exam_result(id_exam_req_det       => t.id_exam_req_det,
                             id_exam_result        => t.id_exam_result,
                             id_exam_result_parent => t.id_exam_result_parent,
                             id_result_status      => t.id_result_status,
                             registry              => t.registry,
                             desc_exam             => t.desc_exam,
                             result_origin         => t.result_origin,
                             result_origin_notes   => t.result_origin_notes,
                             result_status         => t.result_status,
                             abnormality_level     => t.abnormality_level,
                             desc_relevant         => t.desc_relevant,
                             notes                 => t.notes,
                             desc_result_notes     => t.desc_result_notes,
                             desc_result_diagnosis => t.desc_result_diagnosis,
                             notes_result          => t.notes_result,
                             cancel_reason         => NULL,
                             notes_cancel          => NULL,
                             dt_ord                => t.dt_ord,
                             dt_last_update        => NULL)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT er.id_exam_req_det,
                       er.id_exam_result,
                       er.id_exam_result_parent,
                       er.id_result_status,
                       l_msg_reg || ' ' ||
                       pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(er.id_prof_read, er.id_professional)) ||
                       decode(pk_prof_utils.get_spec_signature(i_lang,
                                                               i_prof,
                                                               nvl(er.id_prof_read, er.id_professional),
                                                               nvl(er.dt_prof_read_tstz, er.dt_exam_result_tstz),
                                                               er.id_episode),
                              NULL,
                              '; ',
                              ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       nvl(er.id_prof_read, er.id_professional),
                                                                       nvl(er.dt_prof_read_tstz, er.dt_exam_result_tstz),
                                                                       er.id_episode) || '); ') ||
                       pk_date_utils.date_char_tsz(i_lang,
                                                   nvl(er.dt_prof_read_tstz, er.dt_exam_result_tstz),
                                                   i_prof.institution,
                                                   i_prof.software) registry,
                       decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T037'), '') ||
                       pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || erd.id_exam, NULL) desc_exam,
                       decode(er.flg_result_origin,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T098'), '') ||
                              pk_sysdomain.get_domain(i_lang,
                                                      i_prof,
                                                      'EXAM_RESULT.FLG_RESULT_ORIGIN',
                                                      er.flg_result_origin,
                                                      NULL)) result_origin,
                       decode(er.result_origin_notes,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T053'), '') ||
                              er.result_origin_notes) result_origin_notes,
                       decode(er.id_result_status,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T035'), '') ||
                              pk_translation.get_translation(i_lang,
                                                             'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                             er.id_result_status)) result_status,
                       decode(er.id_abnormality,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T242'), '') ||
                              pk_translation.get_translation(i_lang,
                                                             'ABNORMALITY.SHORT_CODE_ABNORMALITY.' || er.id_abnormality)) abnormality_level,
                       decode(er.flg_relevant,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T265'), '') ||
                              pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_RESULT.FLG_RELEVANT', er.flg_relevant, NULL)) desc_relevant,
                       pk_exam_utils.get_exam_result_notes(i_lang,
                                                           i_prof,
                                                           aa_code_messages('EXAMS_T099'),
                                                           i_flg_report,
                                                           er.id_epis_documentation) notes,
                       decode(er.id_result_notes,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T226'), '') ||
                              pk_translation.get_translation(i_lang,
                                                             'RESULT_NOTES.CODE_RESULT_NOTES.' || er.id_result_notes)) desc_result_notes,
                       decode(pk_diagnosis.concat_diag(i_lang, NULL, NULL, NULL, i_prof, NULL, er.id_exam_result),
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T253'), '') ||
                              pk_diagnosis.concat_diag(i_lang, NULL, NULL, NULL, i_prof, NULL, er.id_exam_result)) desc_result_diagnosis,
                       decode(dbms_lob.getlength(er.notes_result),
                              NULL,
                              to_clob(''),
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T228'), '') ||
                              er.notes_result) notes_result,
                       pk_date_utils.date_send_tsz(i_lang, er.dt_exam_result_tstz, i_prof) dt_ord
                  FROM exam_result er, exam_req_det erd
                 WHERE erd.id_exam_req_det = i_exam_req_det
                   AND erd.id_exam_req_det = er.id_exam_req_det
                 ORDER BY dt_ord DESC) t;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exam_result();
    END tf_get_exam_result;

    FUNCTION tf_get_exam_result_history
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_flg_html         IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exam_result IS
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
        l_msg_del sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M106');
    
        l_formated_text VARCHAR2(100 CHAR) := CASE i_flg_html
                                                  WHEN pk_alert_constant.g_yes THEN
                                                   '<br> '
                                                  ELSE
                                                   '<br>' || chr(9) || chr(10)
                                              END;
    
        l_update_tag_flash VARCHAR2(1 CHAR) := CASE i_flg_html
                                                   WHEN pk_alert_constant.g_yes THEN
                                                    NULL
                                                   ELSE
                                                    '§'
                                               END;
    
        l_ret t_tbl_exam_result := t_tbl_exam_result();
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        
            g_error := 'GET MESSAGES UPDATE';
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail_upd.first .. pk_exam_constant.ga_code_messages_exam_detail_upd.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail_upd(i)) := CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '<span class="emphasizedRedDetail">'
                                                                                              ELSE
                                                                                               '<b>'
                                                                                          END ||
                                                                                          pk_message.get_message(i_lang,
                                                                                                                 i_prof,
                                                                                                                 pk_exam_constant.ga_code_messages_exam_detail_upd(i)) ||
                                                                                          CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '</span> '
                                                                                              ELSE
                                                                                               '</b> '
                                                                                          END;
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        SELECT t_exam_result(id_exam_req_det       => t.id_exam_req_det,
                             id_exam_result        => t.id_exam_result,
                             id_exam_result_parent => NULL,
                             id_result_status      => NULL,
                             registry              => t.registry,
                             desc_exam             => t.desc_exam,
                             result_origin         => t.result_origin,
                             result_origin_notes   => t.result_origin_notes,
                             result_status         => t.result_status,
                             abnormality_level     => t.abnormality_level,
                             desc_relevant         => t.desc_relevant,
                             notes                 => t.notes,
                             desc_result_notes     => t.desc_result_notes,
                             desc_result_diagnosis => t.desc_result_diagnosis,
                             notes_result          => t.notes_result,
                             cancel_reason         => t.cancel_reason,
                             notes_cancel          => t.notes_cancel,
                             dt_ord                => NULL,
                             dt_last_update        => t.dt_last_update)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT er.id_exam_req_det,
                       er.id_exam_result,
                       decode(cnt,
                              rn,
                              l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, er.id_professional) ||
                              decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                      i_prof,
                                                                      er.id_professional,
                                                                      er.dt_exam_result_tstz,
                                                                      er.id_episode),
                                     NULL,
                                     '; ',
                                     ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                              i_prof,
                                                                              er.id_professional,
                                                                              er.dt_exam_result_tstz,
                                                                              er.id_episode) || '); ') ||
                              pk_date_utils.date_char_tsz(i_lang,
                                                          er.dt_exam_result_tstz,
                                                          i_prof.institution,
                                                          i_prof.software),
                              l_msg_reg || ' ' ||
                              pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(er.id_prof_cancel, er.id_professional)) ||
                              decode(pk_prof_utils.get_spec_signature(i_lang,
                                                                      i_prof,
                                                                      nvl(er.id_prof_cancel, er.id_professional),
                                                                      nvl(er.dt_exam_result_cancel_tstz,
                                                                          er.dt_exam_result_tstz),
                                                                      er.id_episode),
                                     NULL,
                                     '; ',
                                     ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                              i_prof,
                                                                              nvl(er.id_prof_cancel, er.id_professional),
                                                                              nvl(er.dt_exam_result_cancel_tstz,
                                                                                  er.dt_exam_result_tstz),
                                                                              er.id_episode) || '); ') ||
                              pk_date_utils.date_char_tsz(i_lang,
                                                          nvl(er.dt_exam_result_cancel_tstz, er.dt_exam_result_tstz),
                                                          i_prof.institution,
                                                          i_prof.software)) registry,
                       decode(cnt,
                              rn,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T037'), '') ||
                              pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || er.id_exam, NULL),
                              decode(er.id_exam,
                                     er.id_exam_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T189') || l_update_tag_flash ||
                                            pk_exam_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                'EXAM.CODE_EXAM.' || er.id_exam,
                                                                                NULL) || chr(10) || chr(9) ||
                                            aa_code_messages('EXAMS_T037') ||
                                            pk_exam_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                'EXAM.CODE_EXAM.' || er.id_exam_new,
                                                                                NULL),
                                            pk_exam_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                'EXAM.CODE_EXAM.' || er.id_exam,
                                                                                NULL) || l_update_tag_flash ||
                                            pk_exam_utils.get_alias_translation(i_lang,
                                                                                i_prof,
                                                                                'EXAM.CODE_EXAM.' || er.id_exam_new,
                                                                                NULL)))) desc_exam,
                       decode(cnt,
                              rn,
                              decode(er.flg_result_origin,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T098'), '') ||
                                     pk_sysdomain.get_domain('EXAM_RESULT.FLG_RESULT_ORIGIN', er.flg_result_origin, i_lang)),
                              decode(er.flg_result_origin,
                                     er.flg_result_origin_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T203') || l_update_tag_flash ||
                                            decode(er.flg_result_origin,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain('EXAM_RESULT.FLG_RESULT_ORIGIN',
                                                                           er.flg_result_origin,
                                                                           i_lang)) ||
                                            decode(er.flg_result_origin_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T098') ||
                                                   pk_sysdomain.get_domain('EXAM_RESULT.FLG_RESULT_ORIGIN',
                                                                           er.flg_result_origin_new,
                                                                           i_lang)),
                                            decode(er.flg_result_origin,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain('EXAM_RESULT.FLG_RESULT_ORIGIN',
                                                                           er.flg_result_origin,
                                                                           i_lang)) ||
                                            decode(er.flg_result_origin_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_sysdomain.get_domain('EXAM_RESULT.FLG_RESULT_ORIGIN',
                                                                           er.flg_result_origin_new,
                                                                           i_lang))))) result_origin,
                       decode(cnt,
                              rn,
                              decode(er.result_origin_notes,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T053'), '') ||
                                     er.result_origin_notes),
                              decode(er.result_origin_notes,
                                     er.result_origin_notes_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T191') || l_update_tag_flash ||
                                            decode(er.result_origin_notes, NULL, l_msg_del, er.result_origin_notes) ||
                                            decode(er.result_origin_notes_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T053') ||
                                                   er.result_origin_notes_new),
                                            decode(er.result_origin_notes, NULL, l_msg_del, er.result_origin_notes) ||
                                            decode(er.result_origin_notes_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash || er.result_origin_notes_new)))) result_origin_notes,
                       decode(cnt,
                              rn,
                              decode(er.id_result_status,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T035'), '') ||
                                     pk_translation.get_translation(i_lang,
                                                                    'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                    er.id_result_status)),
                              decode(er.id_result_status,
                                     er.id_result_status_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T222') || l_update_tag_flash ||
                                            decode(er.id_result_status,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_translation.get_translation(i_lang,
                                                                                  'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                                  er.id_result_status)) ||
                                            decode(er.id_result_status_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T035') ||
                                                   pk_translation.get_translation(i_lang,
                                                                                  'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                                  er.id_result_status_new)),
                                            decode(er.id_result_status,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_translation.get_translation(i_lang,
                                                                                  'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                                  er.id_result_status)) ||
                                            decode(er.id_result_status_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_translation.get_translation(i_lang,
                                                                                  'RESULT_STATUS.SHORT_CODE_RESULT_STATUS.' ||
                                                                                  er.id_result_status_new))))) result_status,
                       decode(cnt,
                              rn,
                              decode(er.id_abnormality,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T242'), '') ||
                                     pk_translation.get_translation(i_lang,
                                                                    'ABNORMALITY.SHORT_CODE_ABNORMALITY.' ||
                                                                    er.id_abnormality)),
                              decode(er.id_abnormality,
                                     er.id_abnormality_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T243') || l_update_tag_flash ||
                                            decode(er.id_abnormality,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_translation.get_translation(i_lang,
                                                                                  'ABNORMALITY.SHORT_CODE_ABNORMALITY.' ||
                                                                                  er.id_abnormality)) ||
                                            decode(er.id_abnormality_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T242') ||
                                                   pk_translation.get_translation(i_lang,
                                                                                  'ABNORMALITY.SHORT_CODE_ABNORMALITY.' ||
                                                                                  er.id_abnormality_new)),
                                            decode(er.id_abnormality,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_translation.get_translation(i_lang,
                                                                                  'ABNORMALITY.SHORT_CODE_ABNORMALITY.' ||
                                                                                  er.id_abnormality)) ||
                                            decode(er.id_abnormality_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_translation.get_translation(i_lang,
                                                                                  'ABNORMALITY.SHORT_CODE_ABNORMALITY.' ||
                                                                                  er.id_abnormality_new))))) abnormality_level,
                       decode(cnt,
                              rn,
                              decode(er.flg_relevant,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T265'), '') ||
                                     pk_sysdomain.get_domain(i_lang,
                                                             i_prof,
                                                             'EXAM_RESULT.FLG_RELEVANT',
                                                             er.flg_relevant,
                                                             NULL)),
                              decode(er.flg_relevant,
                                     er.flg_relevant_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T266') || l_update_tag_flash ||
                                            decode(er.flg_relevant,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'EXAM_RESULT.FLG_RELEVANT',
                                                                           er.flg_relevant,
                                                                           NULL)) ||
                                            decode(er.flg_relevant_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T265') ||
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'EXAM_RESULT.FLG_RELEVANT',
                                                                           er.flg_relevant_new,
                                                                           NULL)),
                                            decode(er.flg_relevant,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_sysdomain.get_domain(i_lang,
                                                                           i_prof,
                                                                           'EXAM_RESULT.FLG_RELEVANT',
                                                                           er.flg_relevant,
                                                                           NULL)) ||
                                            decode(er.flg_relevant_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash || pk_sysdomain.get_domain(i_lang,
                                                                                                 i_prof,
                                                                                                 'EXAM_RESULT.FLG_RELEVANT',
                                                                                                 er.flg_relevant_new,
                                                                                                 NULL))))) desc_relevant,
                       decode(cnt,
                              rn,
                              decode(dbms_lob.getlength(er.notes),
                                     NULL,
                                     to_clob(''),
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T099'), '') ||
                                     er.notes),
                              decode(er.notes,
                                     er.notes_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T204') || l_update_tag_flash ||
                                            decode(er.notes, NULL, l_msg_del, er.notes) ||
                                            decode(er.notes_new,
                                                   NULL,
                                                   to_clob(''),
                                                   l_formated_text || aa_code_messages('EXAMS_T099') || er.notes_new),
                                            decode(er.notes, NULL, l_msg_del, er.notes) ||
                                            decode(er.notes_new, NULL, NULL, l_update_tag_flash || er.notes_new)))) notes,
                       decode(cnt,
                              rn,
                              decode(er.id_result_notes,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T226'), '') ||
                                     pk_translation.get_translation(i_lang,
                                                                    'RESULT_NOTES.CODE_RESULT_NOTES.' || er.id_result_notes)),
                              decode(er.id_result_notes,
                                     er.id_result_notes_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T229') || l_update_tag_flash ||
                                            decode(er.id_result_notes,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_translation.get_translation(i_lang,
                                                                                  'RESULT_NOTES.CODE_RESULT_NOTES.' ||
                                                                                  er.id_result_notes)) ||
                                            decode(er.id_result_notes_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T226') ||
                                                   pk_translation.get_translation(i_lang,
                                                                                  'RESULT_NOTES.CODE_RESULT_NOTES.' ||
                                                                                  er.id_result_notes_new)),
                                            decode(er.id_result_notes,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_translation.get_translation(i_lang,
                                                                                  'RESULT_NOTES.CODE_RESULT_NOTES.' ||
                                                                                  er.id_result_notes)) ||
                                            decode(er.id_result_notes_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_translation.get_translation(i_lang,
                                                                                  'RESULT_NOTES.CODE_RESULT_NOTES.' ||
                                                                                  er.id_result_notes_new))))) desc_result_notes,
                       decode(cnt,
                              rn,
                              decode(dbms_lob.getlength(er.notes_result),
                                     NULL,
                                     to_clob(''),
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T228'), '') ||
                                     er.notes_result),
                              decode(er.notes_result,
                                     er.notes_result_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T230') || l_update_tag_flash ||
                                            decode(er.notes_result, NULL, l_msg_del, er.notes_result) ||
                                            decode(er.notes_result_new,
                                                   NULL,
                                                   to_clob(''),
                                                   l_formated_text || aa_code_messages('EXAMS_T228') || er.notes_result_new),
                                            decode(er.notes_result, NULL, l_msg_del, er.notes_result) ||
                                            decode(er.notes_result_new,
                                                   NULL,
                                                   to_clob(''),
                                                   l_update_tag_flash || er.notes_result_new)))) notes_result,
                       decode(cnt,
                              rn,
                              NULL,
                              decode(pk_diagnosis.concat_diag(i_lang, NULL, NULL, NULL, i_prof, NULL, er.id_exam_result),
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T253'), '') ||
                                     pk_diagnosis.concat_diag(i_lang, NULL, NULL, NULL, i_prof, NULL, er.id_exam_result))) desc_result_diagnosis,
                       decode(cnt,
                              rn,
                              NULL,
                              decode(er.id_cancel_reason,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('COMMON_M161') || l_update_tag_flash ||
                                            decode(er.id_cancel_reason,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                           i_prof,
                                                                                           er.id_cancel_reason)) ||
                                            decode(er.id_cancel_reason_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T025') ||
                                                   pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                           i_prof,
                                                                                           er.id_cancel_reason_new)),
                                            decode(er.id_cancel_reason,
                                                   NULL,
                                                   l_msg_del,
                                                   pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                           i_prof,
                                                                                           er.id_cancel_reason)) ||
                                            decode(er.id_cancel_reason_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash ||
                                                   pk_cancel_reason.get_cancel_reason_desc(i_lang,
                                                                                           i_prof,
                                                                                           er.id_cancel_reason_new))))) cancel_reason,
                       decode(cnt,
                              rn,
                              NULL,
                              decode(er.notes_cancel,
                                     er.notes_cancel_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('COMMON_M044') || l_update_tag_flash ||
                                            decode(er.notes_cancel, NULL, l_msg_del, er.notes_cancel) ||
                                            decode(er.notes_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T009') || er.notes_cancel_new),
                                            decode(er.notes_cancel, NULL, l_msg_del, er.notes_cancel) ||
                                            decode(er.notes_cancel_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash || er.notes_cancel_new)))) notes_cancel,
                       er.dt_last_update
                  FROM (SELECT row_number() over(ORDER BY t.id_exam_result, t.dt_exam_result_hist DESC NULLS FIRST) rn,
                               MAX(rownum) over(ORDER BY t.id_exam_result) cnt,
                               t.dt_exam_result_hist,
                               t.id_exam_req_det,
                               t.id_exam_result,
                               t.id_exam,
                               first_value(t.id_exam) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_exam_new,
                               t.id_professional,
                               first_value(t.id_professional) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_professional_new,
                               t.id_episode,
                               t.dt_exam_result_tstz,
                               first_value(t.dt_exam_result_tstz) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_exam_result_tstz_new,
                               t.id_prof_cancel,
                               first_value(t.id_prof_cancel) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_cancel_new,
                               t.dt_exam_result_cancel_tstz,
                               first_value(t.dt_exam_result_cancel_tstz) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) dt_exam_result_cancel_tstz_new,
                               t.flg_result_origin,
                               first_value(t.flg_result_origin) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_result_origin_new,
                               t.result_origin_notes,
                               first_value(t.result_origin_notes) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) result_origin_notes_new,
                               t.id_result_status,
                               first_value(t.id_result_status) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_result_status_new,
                               t.id_abnormality,
                               first_value(t.id_abnormality) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_abnormality_new,
                               t.flg_relevant,
                               first_value(t.flg_relevant) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) flg_relevant_new,
                               dbms_lob.substr(t.notes, 3800) notes,
                               first_value(dbms_lob.substr(t.notes, 3800)) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_new,
                               t.id_result_notes,
                               first_value(t.id_result_notes) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_result_notes_new,
                               dbms_lob.substr(t.notes_result, 3800) notes_result,
                               first_value(dbms_lob.substr(t.notes_result, 3800)) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_result_new,
                               t.id_cancel_reason,
                               first_value(t.id_cancel_reason) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) id_cancel_reason_new,
                               dbms_lob.substr(t.notes_cancel, 3800) notes_cancel,
                               first_value(dbms_lob.substr(t.notes_cancel, 3800)) over(ORDER BY t.id_exam_result, t.dt_exam_result_hist rows BETWEEN 1 preceding AND CURRENT ROW) notes_cancel_new,
                               t.dt_last_update
                          FROM (SELECT NULL dt_exam_result_hist,
                                       er.id_exam_result,
                                       er.id_exam,
                                       er.id_exam_req_det,
                                       nvl(er.id_prof_read, er.id_professional) id_professional,
                                       er.id_patient,
                                       er.flg_type,
                                       er.id_institution,
                                       er.id_prof_mov_begin,
                                       er.id_prof_mov_end,
                                       er.id_episode,
                                       er.id_episode_write,
                                       nvl(er.dt_prof_read_tstz, er.dt_exam_result_tstz) dt_exam_result_tstz,
                                       er.dt_mov_begin_tstz,
                                       er.dt_mov_end_tstz,
                                       er.id_external_doc,
                                       er.flg_status,
                                       er.dt_exam_result_cancel_tstz,
                                       er.id_prof_cancel,
                                       er.flg_result_origin,
                                       er.result_origin_notes,
                                       er.id_result_status,
                                       pk_exam_utils.get_exam_result_notes(i_lang,
                                                                           i_prof,
                                                                           NULL,
                                                                           pk_exam_constant.g_no,
                                                                           er.id_epis_documentation) notes,
                                       er.id_result_notes,
                                       er.notes_result,
                                       er.id_abnormality,
                                       er.flg_relevant,
                                       er.id_cancel_reason,
                                       er.notes_cancel,
                                       er.dt_exam_result_tstz dt_last_update
                                  FROM exam_req_det erd, exam_result er
                                 WHERE erd.id_exam_req_det = i_exam_req_det
                                   AND erd.flg_status NOT IN
                                       (pk_exam_constant.g_exam_cancel, pk_exam_constant.g_exam_draft)
                                   AND erd.id_exam_req_det = er.id_exam_req_det
                                UNION ALL
                                SELECT erh.dt_exam_result_hist,
                                       erh.id_exam_result,
                                       erh.id_exam,
                                       erh.id_exam_req_det,
                                       nvl(erh.id_prof_read, erh.id_professional) id_professional,
                                       erh.id_patient,
                                       erh.flg_type,
                                       erh.id_institution,
                                       erh.id_prof_mov_begin,
                                       erh.id_prof_mov_end,
                                       erh.id_episode,
                                       erh.id_episode_write,
                                       nvl(erh.dt_prof_read_tstz, erh.dt_exam_result_tstz) dt_exam_result_tstz,
                                       erh.dt_mov_begin_tstz,
                                       erh.dt_mov_end_tstz,
                                       erh.id_external_doc,
                                       erh.flg_status,
                                       erh.dt_exam_result_cancel_tstz,
                                       erh.id_prof_cancel,
                                       erh.flg_result_origin,
                                       erh.result_origin_notes,
                                       erh.id_result_status,
                                       pk_exam_utils.get_exam_result_notes(i_lang,
                                                                           i_prof,
                                                                           NULL,
                                                                           pk_exam_constant.g_no,
                                                                           erh.id_epis_documentation) notes,
                                       erh.id_result_notes,
                                       erh.notes_result,
                                       erh.id_abnormality,
                                       erh.flg_relevant,
                                       erh.id_cancel_reason,
                                       erh.notes_cancel,
                                       erh.dt_exam_result_tstz dt_last_update
                                  FROM exam_req_det erd, exam_result_hist erh
                                 WHERE erd.id_exam_req_det = i_exam_req_det
                                   AND erd.flg_status NOT IN
                                       (pk_exam_constant.g_exam_cancel, pk_exam_constant.g_exam_draft)
                                   AND erd.id_exam_req_det = erh.id_exam_req_det
                                 ORDER BY id_exam_result, dt_exam_result_hist DESC NULLS FIRST) t
                         ORDER BY rn) er
                 ORDER BY id_exam_result DESC, dt_exam_result_hist DESC NULLS FIRST) t;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exam_result();
    END tf_get_exam_result_history;

    FUNCTION tf_get_exam_review
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exam_review IS
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        l_ret t_tbl_exam_review := t_tbl_exam_review();
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        SELECT t_exam_review(id_exam_req_det => t.id_exam_req_det,
                             registry        => t.registry,
                             desc_exam       => t.desc_exam,
                             review_notes    => t.review_notes,
                             dt_ord          => t.dt_ord)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT erd.id_exam_req_det,
                       l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, tr.id_professional) ||
                       decode(pk_prof_utils.get_spec_signature(i_lang,
                                                               i_prof,
                                                               tr.id_professional,
                                                               tr.dt_creation_tstz,
                                                               NULL),
                              NULL,
                              '; ',
                              ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       tr.id_professional,
                                                                       tr.dt_creation_tstz,
                                                                       NULL) || '); ') ||
                       pk_date_utils.date_char_tsz(i_lang, tr.dt_creation_tstz, i_prof.institution, i_prof.software) registry,
                       decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T037'), '') ||
                       pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || erd.id_exam, NULL) desc_exam,
                       decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T130'), '') ||
                       tr.desc_tests_review review_notes,
                       pk_date_utils.date_send_tsz(i_lang, tr.dt_creation_tstz, i_prof) dt_ord
                  FROM exam_req_det erd, tests_review tr
                 WHERE erd.id_exam_req_det = i_exam_req_det
                   AND erd.id_exam_req_det = tr.id_request
                   AND tr.flg_type = pk_medical_decision.g_tests_type_exam
                 ORDER BY dt_ord DESC) t;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exam_review();
    END tf_get_exam_review;

    FUNCTION tf_get_exam_review_history
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_flg_html         IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exam_review IS
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
        l_msg_del sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M106');
    
        l_formated_text VARCHAR2(100 CHAR) := CASE i_flg_html
                                                  WHEN pk_alert_constant.g_yes THEN
                                                   '<br> '
                                                  ELSE
                                                   '<br>' || chr(9) || chr(10)
                                              END;
    
        l_update_tag_flash VARCHAR2(1 CHAR) := CASE i_flg_html
                                                   WHEN pk_alert_constant.g_yes THEN
                                                    NULL
                                                   ELSE
                                                    '§'
                                               END;
    
        l_ret t_tbl_exam_review := t_tbl_exam_review();
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        
            g_error := 'GET MESSAGES UPDATE';
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail_upd.first .. pk_exam_constant.ga_code_messages_exam_detail_upd.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail_upd(i)) := CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '<span class="emphasizedRedDetail">'
                                                                                              ELSE
                                                                                               '<b>'
                                                                                          END ||
                                                                                          pk_message.get_message(i_lang,
                                                                                                                 i_prof,
                                                                                                                 pk_exam_constant.ga_code_messages_exam_detail_upd(i)) ||
                                                                                          CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '</span> '
                                                                                              ELSE
                                                                                               '</b> '
                                                                                          END;
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        SELECT t_exam_review(id_exam_req_det => t.id_exam_req_det,
                             registry        => t.registry,
                             desc_exam       => t.desc_exam,
                             review_notes    => t.review_notes,
                             dt_ord          => t.dt_ord)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT erd.id_exam_req_det,
                       l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, tr.id_professional) ||
                       decode(pk_prof_utils.get_spec_signature(i_lang,
                                                               i_prof,
                                                               tr.id_professional,
                                                               tr.dt_creation_tstz,
                                                               NULL),
                              NULL,
                              '; ',
                              ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       tr.id_professional,
                                                                       tr.dt_creation_tstz,
                                                                       NULL) || '); ') ||
                       pk_date_utils.date_char_tsz(i_lang, tr.dt_creation_tstz, i_prof.institution, i_prof.software) registry,
                       decode(i_flg_report,
                              pk_exam_constant.g_no,
                              aa_code_messages('EXAMS_T037') ||
                              pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || erd.id_exam, NULL),
                              pk_exam_utils.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || erd.id_exam, NULL)) desc_exam,
                       decode(cnt,
                              rn,
                              decode(tr.desc_tests_review,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T130') || tr.desc_tests_review,
                                            tr.desc_tests_review)),
                              decode(tr.desc_tests_review,
                                     tr.desc_tests_review_new,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T206') || l_update_tag_flash ||
                                            decode(tr.desc_tests_review, NULL, l_msg_del, tr.desc_tests_review) ||
                                            decode(tr.desc_tests_review_new,
                                                   NULL,
                                                   NULL,
                                                   l_formated_text || aa_code_messages('EXAMS_T130') ||
                                                   tr.desc_tests_review_new),
                                            decode(tr.desc_tests_review, NULL, l_msg_del, tr.desc_tests_review) ||
                                            decode(tr.desc_tests_review_new,
                                                   NULL,
                                                   NULL,
                                                   l_update_tag_flash || tr.desc_tests_review_new)))) review_notes,
                       pk_date_utils.date_send_tsz(i_lang, tr.dt_creation_tstz, i_prof) dt_ord
                  FROM (SELECT row_number() over(PARTITION BY t.id_request ORDER BY t.dt_creation_tstz DESC) rn,
                               COUNT(1) over(PARTITION BY t.id_request) cnt,
                               t.id_request,
                               t.id_tests_review,
                               first_value(t.id_tests_review) over(PARTITION BY id_request ORDER BY dt_creation_tstz rows BETWEEN 1 preceding AND CURRENT ROW) id_tests_review_new,
                               t.desc_tests_review,
                               first_value(t.desc_tests_review) over(PARTITION BY id_request ORDER BY dt_creation_tstz rows BETWEEN 1 preceding AND CURRENT ROW) desc_tests_review_new,
                               t.id_professional,
                               first_value(t.id_professional) over(PARTITION BY id_request ORDER BY dt_creation_tstz rows BETWEEN 1 preceding AND CURRENT ROW) id_professional_new,
                               t.dt_creation_tstz,
                               first_value(t.dt_creation_tstz) over(PARTITION BY id_request ORDER BY dt_creation_tstz rows BETWEEN 1 preceding AND CURRENT ROW) dt_creation_tstz_new
                          FROM (SELECT tr.id_tests_review,
                                       tr.id_request,
                                       tr.desc_tests_review,
                                       tr.flg_type,
                                       tr.id_professional,
                                       tr.dt_creation_tstz
                                  FROM tests_review tr
                                 WHERE tr.id_request = i_exam_req_det
                                   AND tr.flg_type = pk_medical_decision.g_tests_type_exam) t
                         ORDER BY rn) tr,
                       exam_req_det erd
                 WHERE erd.id_exam_req_det = i_exam_req_det
                   AND erd.id_exam_req_det = tr.id_request
                 ORDER BY dt_ord DESC) t;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exam_review();
    END tf_get_exam_review_history;

    FUNCTION tf_get_exam_result_images
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exam_result_images IS
    
        l_msg_image1 sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T103');
        l_msg_image2 sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T104');
    
        l_path sys_config.value%TYPE := pk_sysconfig.get_config('URL_EXTERNAL_DOC', i_prof);
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        l_ret t_tbl_exam_result_images := t_tbl_exam_result_images();
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        SELECT t_exam_result_images(id_exam_result           => t.id_exam_result,
                                    id_exam_result_parent    => t.id_exam_result_parent,
                                    id_doc_external          => t.id_doc_external,
                                    doc_title                => t.doc_title,
                                    perform_by               => t.perform_by,
                                    dt_doc                   => t.dt_doc,
                                    doc_original_destination => t.doc_original_destination,
                                    doc_original_type        => t.doc_original_type,
                                    num_img                  => t.num_img,
                                    doc_original_desc        => t.doc_original_desc,
                                    notes                    => t.notes,
                                    thumbnail_img            => t.thumbnail_img,
                                    thumbnail_report         => t.thumbnail_report,
                                    thumbnail                => t.thumbnail,
                                    thumbnail_img_icon       => t.thumbnail_img_icon,
                                    thumbnail_report_icon    => t.thumbnail_report_icon,
                                    thumbnail_icon           => t.thumbnail_icon,
                                    dt_ord                   => t.dt_ord,
                                    dt_last_update           => NULL)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT er.id_exam_result,
                       er.id_exam_result_parent,
                       NULL id_doc_external,
                       decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T094'), '') || l_msg_image1 doc_title,
                       decode(er.id_professional,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T077'), '') ||
                              pk_prof_utils.get_nickname(i_lang, er.id_professional)) perform_by,
                       decode(er.dt_exam_result_tstz,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T090'), '') ||
                              pk_date_utils.dt_chr_tsz(i_lang, er.dt_exam_result_tstz, i_prof)) dt_doc,
                       NULL doc_original_destination,
                       NULL doc_original_type,
                       NULL num_img,
                       NULL doc_original_desc,
                       NULL notes,
                       (SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                 i_prof,
                                                                 er.id_exam_req_det,
                                                                 pk_exam_constant.g_exam_result_url)
                          FROM dual) thumbnail_img,
                       (SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                 i_prof,
                                                                 er.id_exam_req_det,
                                                                 pk_exam_constant.g_exam_result_pdf)
                          FROM dual) thumbnail_report,
                       NULL thumbnail,
                       decode((SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                       i_prof,
                                                                       er.id_exam_req_det,
                                                                       pk_exam_constant.g_exam_result_url)
                                FROM dual),
                              pk_exam_constant.g_no,
                              NULL,
                              pk_exam_constant.g_exam_result_url) thumbnail_img_icon,
                       decode((SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                       i_prof,
                                                                       er.id_exam_req_det,
                                                                       pk_exam_constant.g_exam_result_pdf)
                                FROM dual),
                              pk_exam_constant.g_no,
                              NULL,
                              pk_exam_constant.g_exam_result_pdf) thumbnail_report_icon,
                       NULL thumbnail_icon,
                       pk_date_utils.date_send_tsz(i_lang, er.dt_exam_result_tstz, i_prof) dt_ord
                  FROM exam_result er
                 WHERE er.id_exam_req_det = i_exam_req_det
                   AND ((pk_exam_utils.get_exam_result_url(i_lang,
                                                           i_prof,
                                                           er.id_exam_req_det,
                                                           pk_exam_constant.g_exam_result_url) !=
                       pk_exam_constant.g_no) OR (pk_exam_utils.get_exam_result_url(i_lang,
                                                                                     i_prof,
                                                                                     er.id_exam_req_det,
                                                                                     pk_exam_constant.g_exam_result_pdf) !=
                       pk_exam_constant.g_no))
                UNION ALL
                SELECT er.id_exam_result,
                       er.id_exam_result_parent,
                       ema.id_doc_external,
                       decode(de.title,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T094'), '') || de.title) doc_title,
                       decode(de.desc_perf_by,
                              NULL,
                              decode(er.id_professional,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T077'), '') ||
                                     pk_prof_utils.get_nickname(i_lang, er.id_professional)),
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T077'), '') ||
                              de.desc_perf_by) perform_by,
                       decode(de.dt_emited,
                              NULL,
                              decode(er.dt_exam_result_tstz,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T090'), '') ||
                                     pk_date_utils.dt_chr_tsz(i_lang, er.dt_exam_result_tstz, i_prof)),
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T090'), '') ||
                              pk_date_utils.dt_chr(i_lang, de.dt_emited, i_prof)) dt_doc,
                       decode(de.desc_doc_destination,
                              NULL,
                              decode(de.id_doc_destination,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T097'), '') ||
                                     pk_translation.get_translation(i_lang,
                                                                    'DOC_TYPE.CODE_DOC_DESTINATION.' ||
                                                                    de.id_doc_destination)),
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T097'), '') ||
                              de.desc_doc_destination) doc_original_destination,
                       decode(de.desc_doc_ori_type,
                              NULL,
                              decode(de.id_doc_ori_type,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T255') ||
                                            pk_translation.get_translation(i_lang,
                                                                           'DOC_ORI_TYPE.CODE_DOC_ORI_TYPE.' ||
                                                                           de.id_doc_ori_type),
                                            pk_translation.get_translation(i_lang,
                                                                           'DOC_ORI_TYPE.CODE_DOC_ORI_TYPE.' ||
                                                                           de.id_doc_ori_type))),
                              decode(i_flg_report,
                                     pk_exam_constant.g_no,
                                     aa_code_messages('EXAMS_T255') || de.desc_doc_ori_type,
                                     de.desc_doc_ori_type)) doc_original_type,
                       decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T091'), '') ||
                       pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external) num_img,
                       decode(de.desc_doc_original,
                              NULL,
                              decode(de.id_doc_original,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T096'), '') ||
                                     pk_translation.get_translation(i_lang,
                                                                    'DOC_ORIGINAL.CODE_DOC_ORIGINAL.' || de.id_doc_original)),
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T096'), '') ||
                              de.desc_doc_original) doc_original_desc,
                       decode(pk_doc.get_doc_last_comment(i_lang, i_prof, ema.id_doc_external),
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T100'), '') ||
                              pk_doc.get_doc_last_comment(i_lang, i_prof, ema.id_doc_external)) notes,
                       NULL thumbnail_img,
                       NULL thumbnail_report,
                       pk_doc.get_main_thumb_url(i_lang, i_prof, ema.id_doc_external) thumbnail,
                       NULL thumbnail_img_icon,
                       NULL thumbnail_report_icon,
                       to_char(pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external)) thumbnail_icon,
                       pk_date_utils.date_send_tsz(i_lang, er.dt_exam_result_tstz, i_prof) dt_ord
                  FROM exam_result er, exam_media_archive ema, doc_external de
                 WHERE er.id_exam_req_det = i_exam_req_det
                   AND er.id_exam_result = ema.id_exam_result
                   AND ema.flg_type = pk_exam_constant.g_media_archive_exam_result
                   AND ema.id_doc_external = de.id_doc_external
                   AND de.flg_status = pk_alert_constant.g_active
                UNION ALL
                SELECT er.id_exam_result,
                       er.id_exam_result_parent,
                       er.id_external_doc id_doc_external,
                       decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T094'), '') || l_msg_image2 ||
                       rownum doc_title,
                       decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T077'), '') ||
                       pk_prof_utils.get_nickname(i_lang, er.id_professional) perform_by,
                       decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T090'), '') ||
                       pk_date_utils.dt_chr_tsz(i_lang, er.dt_exam_result_tstz, i_prof) dt_doc,
                       NULL doc_original_destination,
                       NULL doc_original_type,
                       NULL num_img,
                       NULL doc_original_desc,
                       NULL notes,
                       NULL thumbnail_img,
                       NULL thumbnail_report,
                       l_path || id_external_doc thumbnail,
                       NULL thumbnail_img_icon,
                       NULL thumbnail_report_icon,
                       '1' thumbnail_icon,
                       pk_date_utils.date_send_tsz(i_lang, er.dt_exam_result_tstz, i_prof) dt_ord
                  FROM exam_result er
                 WHERE er.id_exam_req_det = i_exam_req_det
                   AND er.id_external_doc IS NOT NULL
                 ORDER BY dt_ord DESC) t;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exam_result_images();
    END tf_get_exam_result_images;

    FUNCTION tf_get_exam_result_images_history
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_flg_html         IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exam_result_images IS
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        l_msg_image1 sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T103');
        l_msg_image2 sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'EXAMS_T104');
    
        l_path sys_config.value%TYPE := pk_sysconfig.get_config('URL_EXTERNAL_DOC', i_prof);
    
        l_ret t_tbl_exam_result_images := t_tbl_exam_result_images();
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        
            g_error := 'GET MESSAGES UPDATE';
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail_upd.first .. pk_exam_constant.ga_code_messages_exam_detail_upd.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail_upd(i)) := CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '<span class="emphasizedRedDetail">'
                                                                                              ELSE
                                                                                               '<b>'
                                                                                          END ||
                                                                                          pk_message.get_message(i_lang,
                                                                                                                 i_prof,
                                                                                                                 pk_exam_constant.ga_code_messages_exam_detail_upd(i)) ||
                                                                                          CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '</span> '
                                                                                              ELSE
                                                                                               '</b> '
                                                                                          END;
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        SELECT t_exam_result_images(id_exam_result           => t.id_exam_result,
                                    id_exam_result_parent    => NULL,
                                    id_doc_external          => t.id_doc_external,
                                    doc_title                => t.doc_title,
                                    perform_by               => t.perform_by,
                                    dt_doc                   => t.dt_doc,
                                    doc_original_destination => t.doc_original_destination,
                                    doc_original_type        => t.doc_original_type,
                                    num_img                  => t.num_img,
                                    doc_original_desc        => t.doc_original_desc,
                                    notes                    => t.notes,
                                    thumbnail_img            => t.thumbnail_img,
                                    thumbnail_report         => t.thumbnail_report,
                                    thumbnail                => t.thumbnail,
                                    thumbnail_img_icon       => t.thumbnail_img_icon,
                                    thumbnail_report_icon    => t.thumbnail_report_icon,
                                    thumbnail_icon           => t.thumbnail_icon,
                                    dt_ord                   => t.dt_ord,
                                    dt_last_update           => t.dt_last_update)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT er.id_exam_result,
                       NULL id_doc_external,
                       decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T094'), '') || l_msg_image1 doc_title,
                       decode(er.id_professional,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T077'), '') ||
                              pk_prof_utils.get_nickname(i_lang, er.id_professional)) perform_by,
                       decode(er.dt_exam_result_tstz,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T090'), '') ||
                              pk_date_utils.dt_chr_tsz(i_lang, er.dt_exam_result_tstz, i_prof)) dt_doc,
                       NULL doc_original_destination,
                       NULL doc_original_type,
                       NULL num_img,
                       NULL doc_original_desc,
                       NULL notes,
                       (SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                 i_prof,
                                                                 er.id_exam_req_det,
                                                                 pk_exam_constant.g_exam_result_url)
                          FROM dual) thumbnail_img,
                       (SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                 i_prof,
                                                                 er.id_exam_req_det,
                                                                 pk_exam_constant.g_exam_result_pdf)
                          FROM dual) thumbnail_report,
                       NULL thumbnail,
                       decode((SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                       i_prof,
                                                                       er.id_exam_req_det,
                                                                       pk_exam_constant.g_exam_result_url)
                                FROM dual),
                              pk_exam_constant.g_no,
                              NULL,
                              pk_exam_constant.g_exam_result_url) thumbnail_img_icon,
                       decode((SELECT pk_exam_utils.get_exam_result_url(i_lang,
                                                                       i_prof,
                                                                       er.id_exam_req_det,
                                                                       pk_exam_constant.g_exam_result_pdf)
                                FROM dual),
                              pk_exam_constant.g_no,
                              NULL,
                              pk_exam_constant.g_exam_result_pdf) thumbnail_report_icon,
                       NULL thumbnail_icon,
                       pk_date_utils.date_send_tsz(i_lang, er.dt_exam_result_tstz, i_prof) dt_ord,
                       er.dt_exam_result_tstz dt_last_update
                  FROM exam_result er
                 WHERE er.id_exam_req_det = i_exam_req_det
                   AND ((pk_exam_utils.get_exam_result_url(i_lang,
                                                           i_prof,
                                                           er.id_exam_req_det,
                                                           pk_exam_constant.g_exam_result_url) !=
                       pk_exam_constant.g_no) OR (pk_exam_utils.get_exam_result_url(i_lang,
                                                                                     i_prof,
                                                                                     er.id_exam_req_det,
                                                                                     pk_exam_constant.g_exam_result_pdf) !=
                       pk_exam_constant.g_no))
                UNION ALL
                SELECT er.id_exam_result,
                       ema.id_doc_external,
                       decode(de.title,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T094'), '') || de.title) doc_title,
                       decode(de.desc_perf_by,
                              NULL,
                              decode(er.id_professional,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T077'), '') ||
                                     pk_prof_utils.get_nickname(i_lang, er.id_professional)),
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T077'), '') ||
                              de.desc_perf_by) perform_by,
                       decode(de.dt_emited,
                              NULL,
                              decode(er.dt_exam_result_tstz,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T090'), '') ||
                                     pk_date_utils.dt_chr_tsz(i_lang, er.dt_exam_result_tstz, i_prof)),
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T090'), '') ||
                              pk_date_utils.dt_chr(i_lang, de.dt_emited, i_prof)) dt_doc,
                       decode(de.desc_doc_destination,
                              NULL,
                              decode(de.id_doc_destination,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T097'), '') ||
                                     pk_translation.get_translation(i_lang,
                                                                    'DOC_TYPE.CODE_DOC_DESTINATION.' ||
                                                                    de.id_doc_destination)),
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T097'), '') ||
                              de.desc_doc_destination) doc_original_destination,
                       decode(de.desc_doc_ori_type,
                              NULL,
                              decode(de.id_doc_ori_type,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T255') ||
                                            pk_translation.get_translation(i_lang,
                                                                           'DOC_ORI_TYPE.CODE_DOC_ORI_TYPE.' ||
                                                                           de.id_doc_ori_type),
                                            pk_translation.get_translation(i_lang,
                                                                           'DOC_ORI_TYPE.CODE_DOC_ORI_TYPE.' ||
                                                                           de.id_doc_ori_type))),
                              decode(i_flg_report,
                                     pk_exam_constant.g_no,
                                     aa_code_messages('EXAMS_T255') || de.desc_doc_ori_type,
                                     de.desc_doc_ori_type)) doc_original_type,
                       decode(i_flg_report,
                              pk_exam_constant.g_no,
                              aa_code_messages('EXAMS_T091') ||
                              pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external),
                              pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external)) num_img,
                       decode(de.desc_doc_original,
                              NULL,
                              decode(de.id_doc_original,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T096') ||
                                            pk_translation.get_translation(i_lang,
                                                                           'DOC_ORIGINAL.CODE_DOC_ORIGINAL.' ||
                                                                           de.id_doc_original),
                                            pk_translation.get_translation(i_lang,
                                                                           'DOC_ORIGINAL.CODE_DOC_ORIGINAL.' ||
                                                                           de.id_doc_original))),
                              decode(i_flg_report,
                                     pk_exam_constant.g_no,
                                     aa_code_messages('EXAMS_T096') || de.desc_doc_original,
                                     de.desc_doc_original)) doc_original_desc,
                       decode(pk_doc.get_doc_last_comment(i_lang, i_prof, ema.id_doc_external),
                              NULL,
                              NULL,
                              decode(i_flg_report,
                                     pk_exam_constant.g_no,
                                     aa_code_messages('EXAMS_T100') ||
                                     pk_doc.get_doc_last_comment(i_lang, i_prof, ema.id_doc_external),
                                     pk_doc.get_doc_last_comment(i_lang, i_prof, ema.id_doc_external))) notes,
                       NULL thumbnail_img,
                       NULL thumbnail_report,
                       pk_doc.get_main_thumb_url(i_lang, i_prof, ema.id_doc_external) thumbnail,
                       NULL thumbnail_img_icon,
                       NULL thumbnail_report_icon,
                       to_char(pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external)) thumbnail_icon,
                       pk_date_utils.date_send_tsz(i_lang, er.dt_exam_result_tstz, i_prof) dt_ord,
                       ema.dt_last_update_tstz dt_last_update
                  FROM exam_result er, exam_media_archive ema, doc_external de
                 WHERE er.id_exam_req_det = i_exam_req_det
                   AND er.id_exam_result = ema.id_exam_result
                   AND ema.flg_type = pk_exam_constant.g_media_archive_exam_result
                   AND ema.id_doc_external = de.id_doc_external
                   AND de.flg_status = pk_alert_constant.g_active
                UNION ALL
                SELECT er.id_exam_result,
                       er.id_external_doc id_doc_external,
                       decode(i_flg_report,
                              pk_exam_constant.g_no,
                              aa_code_messages('EXAMS_T094') || l_msg_image2 || rownum,
                              l_msg_image2 || rownum) doc_title,
                       decode(i_flg_report,
                              pk_exam_constant.g_no,
                              aa_code_messages('EXAMS_T077') || pk_prof_utils.get_nickname(i_lang, er.id_professional),
                              pk_prof_utils.get_nickname(i_lang, er.id_professional)) perform_by,
                       decode(i_flg_report,
                              pk_exam_constant.g_no,
                              aa_code_messages('EXAMS_T090') ||
                              pk_date_utils.dt_chr_tsz(i_lang, er.dt_exam_result_tstz, i_prof)) dt_doc,
                       NULL doc_original_destination,
                       NULL doc_original_type,
                       NULL num_img,
                       NULL doc_original_desc,
                       NULL notes,
                       NULL thumbnail_img,
                       NULL thumbnail_report,
                       l_path || id_external_doc thumbnail,
                       NULL thumbnail_img_icon,
                       NULL thumbnail_report_icon,
                       '1' thumbnail_icon,
                       pk_date_utils.date_send_tsz(i_lang, er.dt_exam_result_tstz, i_prof) dt_ord,
                       er.dt_exam_result_tstz dt_last_update
                  FROM exam_result er
                 WHERE er.id_exam_req_det = i_exam_req_det
                   AND er.id_external_doc IS NOT NULL
                 ORDER BY dt_ord DESC) t;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exam_result_images();
    END tf_get_exam_result_images_history;

    FUNCTION tf_get_exam_doc
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exam_doc IS
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        l_ret t_tbl_exam_doc := t_tbl_exam_doc();
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        SELECT t_exam_doc(id_exam_req_det          => t.id_exam_req_det,
                          id_doc_external          => t.id_doc_external,
                          registry                 => t.registry,
                          doc_title                => t.doc_title,
                          doc_original_type        => t.doc_original_type,
                          desc_status              => t.desc_status,
                          dt_doc                   => t.dt_doc,
                          perform_by               => t.perform_by,
                          num_img                  => t.num_img,
                          doc_original_desc        => t.doc_original_desc,
                          doc_original_destination => t.doc_original_destination,
                          notes                    => t.notes,
                          thumbnail                => t.thumbnail,
                          thumbnail_icon           => t.thumbnail_icon,
                          dt_ord                   => t.dt_ord)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT ema.id_exam_req_det,
                       ema.id_doc_external,
                       l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, ema.id_prof_last_update) ||
                       decode(pk_prof_utils.get_spec_signature(i_lang,
                                                               i_prof,
                                                               ema.id_prof_last_update,
                                                               ema.dt_last_update_tstz,
                                                               NULL),
                              NULL,
                              '; ',
                              ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       ema.id_prof_last_update,
                                                                       ema.dt_last_update_tstz,
                                                                       NULL) || '); ') ||
                       pk_date_utils.date_char_tsz(i_lang, ema.dt_last_update_tstz, i_prof.institution, i_prof.software) registry,
                       decode(de.title,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T094'), '') || de.title) doc_title,
                       decode(de.desc_doc_ori_type,
                              NULL,
                              decode(de.id_doc_ori_type,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T255'), '') ||
                                     pk_translation.get_translation(i_lang,
                                                                    'DOC_ORI_TYPE.CODE_DOC_ORI_TYPE.' || de.id_doc_ori_type)),
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T255'), '') ||
                              de.desc_doc_ori_type) doc_original_type,
                       decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T035'), '') ||
                       pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', de.flg_status, i_lang) desc_status,
                       decode(de.dt_emited,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T090'), '') ||
                              pk_date_utils.dt_chr(i_lang, de.dt_emited, i_prof)) dt_doc,
                       decode(de.desc_perf_by,
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T077'), '') ||
                              de.desc_perf_by) perform_by,
                       decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T091'), '') ||
                       pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external) num_img,
                       decode(de.desc_doc_original,
                              NULL,
                              decode(de.id_doc_original,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T096'), '') ||
                                     pk_translation.get_translation(i_lang,
                                                                    'DOC_ORIGINAL.CODE_DOC_ORIGINAL.' || de.id_doc_original)),
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T096'), '') ||
                              de.desc_doc_original) doc_original_desc,
                       decode(de.desc_doc_destination,
                              NULL,
                              decode(de.id_doc_destination,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T097'), '') ||
                                     pk_translation.get_translation(i_lang,
                                                                    'DOC_TYPE.CODE_DOC_DESTINATION.' ||
                                                                    de.id_doc_destination)),
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T097'), '') ||
                              de.desc_doc_destination) doc_original_destination,
                       decode(pk_doc.get_doc_last_comment(i_lang, i_prof, ema.id_doc_external),
                              NULL,
                              NULL,
                              decode(i_flg_report, pk_exam_constant.g_no, aa_code_messages('EXAMS_T100'), '') ||
                              pk_doc.get_doc_last_comment(i_lang, i_prof, ema.id_doc_external)) notes,
                       pk_doc.get_main_thumb_url(i_lang, i_prof, ema.id_doc_external) thumbnail,
                       pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external) thumbnail_icon,
                       pk_date_utils.date_send_tsz(i_lang, ema.dt_last_update_tstz, i_prof) dt_ord
                  FROM exam_media_archive ema, doc_external de
                 WHERE ema.id_exam_req_det = i_exam_req_det
                   AND ema.flg_type = pk_exam_constant.g_media_archive_exam_doc
                   AND ema.flg_status = pk_exam_constant.g_active
                   AND ema.id_doc_external = de.id_doc_external
                 ORDER BY dt_ord DESC) t;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exam_doc();
    END tf_get_exam_doc;

    FUNCTION tf_get_exam_doc_history
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_episode          IN episode.id_episode%TYPE,
        i_exam_req_det     IN exam_req_det.id_exam_req_det%TYPE,
        i_flg_report       IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_flg_html         IN VARCHAR2 DEFAULT pk_exam_constant.g_no,
        i_aa_code_messages IN pk_exam_constant.t_tbl_code_messages DEFAULT pk_exam_constant.t_tbl_code_messages()
    ) RETURN t_tbl_exam_doc IS
    
        aa_code_messages pk_exam_constant.t_tbl_code_messages;
    
        l_msg_reg sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M107');
    
        l_formated_text VARCHAR2(100 CHAR) := CASE i_flg_html
                                                  WHEN pk_alert_constant.g_yes THEN
                                                   '<br> '
                                                  ELSE
                                                   '<br>' || chr(9) || chr(10)
                                              END;
    
        l_update_tag_flash VARCHAR2(1 CHAR) := CASE i_flg_html
                                                   WHEN pk_alert_constant.g_yes THEN
                                                    NULL
                                                   ELSE
                                                    '§'
                                               END;
    
        l_ret t_tbl_exam_doc := t_tbl_exam_doc();
    
    BEGIN
    
        g_error := 'GET MESSAGES';
        IF i_aa_code_messages.count = 0
        THEN
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail.first .. pk_exam_constant.ga_code_messages_exam_detail.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail(i)) := '<b>' ||
                                                                                      pk_message.get_message(i_lang,
                                                                                                             i_prof,
                                                                                                             pk_exam_constant.ga_code_messages_exam_detail(i)) ||
                                                                                      '</b> ';
            END LOOP;
        
            g_error := 'GET MESSAGES UPDATE';
            FOR i IN pk_exam_constant.ga_code_messages_exam_detail_upd.first .. pk_exam_constant.ga_code_messages_exam_detail_upd.last
            LOOP
                aa_code_messages(pk_exam_constant.ga_code_messages_exam_detail_upd(i)) := CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '<span class="emphasizedRedDetail">'
                                                                                              ELSE
                                                                                               '<b>'
                                                                                          END ||
                                                                                          pk_message.get_message(i_lang,
                                                                                                                 i_prof,
                                                                                                                 pk_exam_constant.ga_code_messages_exam_detail_upd(i)) ||
                                                                                          CASE i_flg_html
                                                                                              WHEN pk_alert_constant.g_yes THEN
                                                                                               '</span> '
                                                                                              ELSE
                                                                                               '</b> '
                                                                                          END;
            END LOOP;
        ELSE
            aa_code_messages := i_aa_code_messages;
        END IF;
    
        SELECT t_exam_doc(id_exam_req_det          => t.id_exam_req_det,
                          id_doc_external          => t.id_doc_external,
                          registry                 => t.registry,
                          doc_title                => t.doc_title,
                          doc_original_type        => t.doc_original_type,
                          desc_status              => t.desc_status,
                          dt_doc                   => t.dt_doc,
                          perform_by               => t.perform_by,
                          num_img                  => t.num_img,
                          doc_original_desc        => t.doc_original_desc,
                          doc_original_destination => t.doc_original_destination,
                          notes                    => t.notes,
                          thumbnail                => t.thumbnail,
                          thumbnail_icon           => t.thumbnail_icon,
                          dt_ord                   => t.dt_ord)
          BULK COLLECT
          INTO l_ret
          FROM (SELECT ema.id_exam_req_det,
                       ema.id_doc_external,
                       l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, ema.id_prof_last_update) ||
                       decode(pk_prof_utils.get_spec_signature(i_lang,
                                                               i_prof,
                                                               ema.id_prof_last_update,
                                                               ema.dt_last_update_tstz,
                                                               NULL),
                              NULL,
                              '; ',
                              ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       ema.id_prof_last_update,
                                                                       ema.dt_last_update_tstz,
                                                                       NULL) || '); ') ||
                       pk_date_utils.date_char_tsz(i_lang, ema.dt_last_update_tstz, i_prof.institution, i_prof.software) registry,
                       decode(de.title,
                              NULL,
                              NULL,
                              decode(i_flg_report,
                                     pk_exam_constant.g_no,
                                     aa_code_messages('EXAMS_T094') || de.title,
                                     de.title)) doc_title,
                       decode(de.desc_doc_ori_type,
                              NULL,
                              decode(de.id_doc_ori_type,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T255') ||
                                            pk_translation.get_translation(i_lang,
                                                                           'DOC_ORI_TYPE.CODE_DOC_ORI_TYPE.' ||
                                                                           de.id_doc_ori_type),
                                            pk_translation.get_translation(i_lang,
                                                                           'DOC_ORI_TYPE.CODE_DOC_ORI_TYPE.' ||
                                                                           de.id_doc_ori_type))),
                              decode(i_flg_report, pk_exam_constant.g_no, de.desc_doc_ori_type, de.desc_doc_ori_type)) doc_original_type,
                       decode(i_flg_report,
                              pk_exam_constant.g_no,
                              aa_code_messages('EXAMS_T035') ||
                              pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', de.flg_status, i_lang),
                              pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', de.flg_status, i_lang)) desc_status,
                       decode(de.dt_emited,
                              NULL,
                              NULL,
                              decode(i_flg_report,
                                     pk_exam_constant.g_no,
                                     aa_code_messages('EXAMS_T090') || pk_date_utils.dt_chr(i_lang, de.dt_emited, i_prof))) dt_doc,
                       decode(de.desc_perf_by,
                              NULL,
                              NULL,
                              decode(i_flg_report,
                                     pk_exam_constant.g_no,
                                     aa_code_messages('EXAMS_T077') || de.desc_perf_by,
                                     de.desc_perf_by)) perform_by,
                       decode(i_flg_report,
                              pk_exam_constant.g_no,
                              aa_code_messages('EXAMS_T091') ||
                              pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external),
                              pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external)) num_img,
                       decode(de.desc_doc_original,
                              NULL,
                              decode(de.id_doc_original,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T096') ||
                                            pk_translation.get_translation(i_lang,
                                                                           'DOC_ORIGINAL.CODE_DOC_ORIGINAL.' ||
                                                                           de.id_doc_original),
                                            pk_translation.get_translation(i_lang,
                                                                           'DOC_ORIGINAL.CODE_DOC_ORIGINAL.' ||
                                                                           de.id_doc_original))),
                              decode(i_flg_report,
                                     pk_exam_constant.g_no,
                                     aa_code_messages('EXAMS_T096') || de.desc_doc_original,
                                     de.desc_doc_original)) doc_original_desc,
                       decode(de.desc_doc_destination,
                              NULL,
                              decode(de.id_doc_destination,
                                     NULL,
                                     NULL,
                                     decode(i_flg_report,
                                            pk_exam_constant.g_no,
                                            aa_code_messages('EXAMS_T097') ||
                                            pk_translation.get_translation(i_lang,
                                                                           'DOC_TYPE.CODE_DOC_DESTINATION.' ||
                                                                           de.id_doc_destination),
                                            pk_translation.get_translation(i_lang,
                                                                           'DOC_TYPE.CODE_DOC_DESTINATION.' ||
                                                                           de.id_doc_destination))
                                     
                                     ),
                              decode(i_flg_report,
                                     pk_exam_constant.g_no,
                                     aa_code_messages('EXAMS_T097') || de.desc_doc_destination,
                                     de.desc_doc_destination)) doc_original_destination,
                       decode(pk_doc.get_doc_last_comment(i_lang, i_prof, ema.id_doc_external),
                              NULL,
                              NULL,
                              decode(i_flg_report,
                                     pk_exam_constant.g_no,
                                     aa_code_messages('EXAMS_T100') ||
                                     pk_doc.get_doc_last_comment(i_lang, i_prof, ema.id_doc_external),
                                     pk_doc.get_doc_last_comment(i_lang, i_prof, ema.id_doc_external))) notes,
                       pk_doc.get_main_thumb_url(i_lang, i_prof, ema.id_doc_external) thumbnail,
                       pk_doc.get_count_image(i_lang, i_prof, ema.id_doc_external) thumbnail_icon,
                       pk_date_utils.date_send_tsz(i_lang, ema.dt_last_update_tstz, i_prof) dt_ord
                  FROM exam_media_archive ema, doc_external de
                 WHERE ema.id_exam_req_det = i_exam_req_det
                   AND ema.flg_type = pk_exam_constant.g_media_archive_exam_doc
                   AND ema.id_doc_external = de.id_doc_external
                UNION ALL
                SELECT ema.id_exam_req_det,
                       ema.id_doc_external,
                       l_msg_reg || ' ' || pk_prof_utils.get_name_signature(i_lang, i_prof, ema.id_prof_last_update) ||
                       decode(pk_prof_utils.get_spec_signature(i_lang,
                                                               i_prof,
                                                               ema.id_prof_last_update,
                                                               ema.dt_last_update_tstz,
                                                               NULL),
                              NULL,
                              '; ',
                              ' (' || pk_prof_utils.get_spec_signature(i_lang,
                                                                       i_prof,
                                                                       ema.id_prof_last_update,
                                                                       ema.dt_last_update_tstz,
                                                                       NULL) || '); ') ||
                       pk_date_utils.date_char_tsz(i_lang, ema.dt_last_update_tstz, i_prof.institution, i_prof.software) registry,
                       NULL doc_title,
                       NULL doc_original_type,
                       decode(i_flg_report,
                              pk_exam_constant.g_no,
                              aa_code_messages('EXAMS_T222') || l_update_tag_flash ||
                              pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', pk_exam_constant.g_inactive, i_lang) ||
                              l_formated_text || aa_code_messages('EXAMS_T035') ||
                              pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', pk_exam_constant.g_active, i_lang),
                              pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', pk_exam_constant.g_inactive, i_lang) ||
                              l_update_tag_flash ||
                              pk_sysdomain.get_domain('DOC_EXTERNAL.FLG_STATUS', pk_exam_constant.g_active, i_lang)) desc_status,
                       NULL dt_doc,
                       NULL perform_by,
                       NULL num_img,
                       NULL doc_original_desc,
                       NULL doc_original_destination,
                       NULL notes,
                       NULL thumbnail,
                       NULL thumbnail_icon,
                       pk_date_utils.date_send_tsz(i_lang, ema.dt_last_update_tstz, i_prof) dt_ord
                  FROM exam_media_archive ema
                 WHERE ema.id_exam_req_det = i_exam_req_det
                   AND ema.flg_type = pk_exam_constant.g_media_archive_exam_doc
                   AND ema.flg_status = pk_exam_constant.g_inactive
                 ORDER BY id_doc_external, dt_ord DESC) t;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN t_tbl_exam_doc();
    END tf_get_exam_doc_history;

BEGIN

    pk_alertlog.who_am_i(g_package_owner, g_package_name);
    pk_alertlog.log_init(g_package_name);

END pk_exam_core;
/
