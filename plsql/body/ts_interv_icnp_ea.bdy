/*-- Last Change Revision: $Rev: 2028238 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:36 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_interv_icnp_ea
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Agosto 19, 2011 15:8:30
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_icnp_epis_interv_in   IN interv_icnp_ea.id_icnp_epis_interv%TYPE,
        id_composition_interv_in IN interv_icnp_ea.id_composition_interv%TYPE DEFAULT NULL,
        id_icnp_epis_diag_in     IN interv_icnp_ea.id_icnp_epis_diag%TYPE DEFAULT NULL,
        id_composition_diag_in   IN interv_icnp_ea.id_composition_diag%TYPE DEFAULT NULL,
        flg_time_in              IN interv_icnp_ea.flg_time%TYPE DEFAULT NULL,
        status_str_in            IN interv_icnp_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in            IN interv_icnp_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in           IN interv_icnp_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in            IN interv_icnp_ea.status_flg%TYPE DEFAULT NULL,
        flg_status_in            IN interv_icnp_ea.flg_status%TYPE DEFAULT NULL,
        flg_type_in              IN interv_icnp_ea.flg_type%TYPE DEFAULT NULL,
        dt_next_in               IN interv_icnp_ea.dt_next%TYPE DEFAULT NULL,
        dt_plan_in               IN interv_icnp_ea.dt_plan%TYPE DEFAULT NULL,
        id_vs_in                 IN interv_icnp_ea.id_vs%TYPE DEFAULT NULL,
        id_prof_close_in         IN interv_icnp_ea.id_prof_close%TYPE DEFAULT NULL,
        dt_close_in              IN interv_icnp_ea.dt_close%TYPE DEFAULT NULL,
        dt_icnp_epis_interv_in   IN interv_icnp_ea.dt_icnp_epis_interv%TYPE DEFAULT NULL,
        id_prof_in               IN interv_icnp_ea.id_prof%TYPE DEFAULT NULL,
        id_episode_origin_in     IN interv_icnp_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_in            IN interv_icnp_ea.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN interv_icnp_ea.id_patient%TYPE DEFAULT NULL,
        flg_status_plan_in       IN interv_icnp_ea.flg_status_plan%TYPE DEFAULT NULL,
        id_prof_take_in          IN interv_icnp_ea.id_prof_take%TYPE DEFAULT NULL,
        freq_in                  IN interv_icnp_ea.freq%TYPE DEFAULT NULL,
        notes_in                 IN interv_icnp_ea.notes%TYPE DEFAULT NULL,
        notes_close_in           IN interv_icnp_ea.notes_close%TYPE DEFAULT NULL,
        dt_begin_in              IN interv_icnp_ea.dt_begin%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN interv_icnp_ea.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN interv_icnp_ea.duration%TYPE DEFAULT NULL,
        num_take_in              IN interv_icnp_ea.num_take%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN interv_icnp_ea.flg_interval_unit%TYPE DEFAULT NULL,
        interval_in              IN interv_icnp_ea.interval%TYPE DEFAULT NULL,
        dt_take_ea_in            IN interv_icnp_ea.dt_take_ea%TYPE DEFAULT NULL,
        dt_dg_last_update_in     IN interv_icnp_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        create_user_in           IN interv_icnp_ea.create_user%TYPE DEFAULT NULL,
        create_time_in           IN interv_icnp_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN interv_icnp_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN interv_icnp_ea.update_user%TYPE DEFAULT NULL,
        update_time_in           IN interv_icnp_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN interv_icnp_ea.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN interv_icnp_ea.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN interv_icnp_ea.flg_prn%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO interv_icnp_ea
            (id_icnp_epis_interv,
             id_composition_interv,
             id_icnp_epis_diag,
             id_composition_diag,
             flg_time,
             status_str,
             status_msg,
             status_icon,
             status_flg,
             flg_status,
             flg_type,
             dt_next,
             dt_plan,
             id_vs,
             id_prof_close,
             dt_close,
             dt_icnp_epis_interv,
             id_prof,
             id_episode_origin,
             id_episode,
             id_patient,
             flg_status_plan,
             id_prof_take,
             freq,
             notes,
             notes_close,
             dt_begin,
             flg_duration_unit,
             duration,
             num_take,
             flg_interval_unit,
             INTERVAL,
             dt_take_ea,
             dt_dg_last_update,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_order_recurr_plan,
             flg_prn)
        VALUES
            (id_icnp_epis_interv_in,
             id_composition_interv_in,
             id_icnp_epis_diag_in,
             id_composition_diag_in,
             flg_time_in,
             status_str_in,
             status_msg_in,
             status_icon_in,
             status_flg_in,
             flg_status_in,
             flg_type_in,
             dt_next_in,
             dt_plan_in,
             id_vs_in,
             id_prof_close_in,
             dt_close_in,
             dt_icnp_epis_interv_in,
             id_prof_in,
             id_episode_origin_in,
             id_episode_in,
             id_patient_in,
             flg_status_plan_in,
             id_prof_take_in,
             freq_in,
             notes_in,
             notes_close_in,
             dt_begin_in,
             flg_duration_unit_in,
             duration_in,
             num_take_in,
             flg_interval_unit_in,
             interval_in,
             dt_take_ea_in,
             dt_dg_last_update_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_order_recurr_plan_in,
             flg_prn_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'INTERV_ICNP_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    IF l_name = 'IIA_EPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'IIA_EPE_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'IIA_IEI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ICNP_EPIS_DIAG',
                                                        value_in           => id_icnp_epis_diag_in);
                    END IF;
                    IF l_name = 'IIA_IEN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ICNP_EPIS_INTERV',
                                                        value_in           => id_icnp_epis_interv_in);
                    END IF;
                    IF l_name = 'IIA_ORP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ORDER_RECURR_PLAN',
                                                        value_in           => id_order_recurr_plan_in);
                    END IF;
                    IF l_name = 'IIA_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'IIA_PRL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CLOSE',
                                                        value_in           => id_prof_close_in);
                    END IF;
                    IF l_name = 'IIA_PRL_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF',
                                                        value_in           => id_prof_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_icnp_epis_interv_in   IN interv_icnp_ea.id_icnp_epis_interv%TYPE,
        id_composition_interv_in IN interv_icnp_ea.id_composition_interv%TYPE DEFAULT NULL,
        id_icnp_epis_diag_in     IN interv_icnp_ea.id_icnp_epis_diag%TYPE DEFAULT NULL,
        id_composition_diag_in   IN interv_icnp_ea.id_composition_diag%TYPE DEFAULT NULL,
        flg_time_in              IN interv_icnp_ea.flg_time%TYPE DEFAULT NULL,
        status_str_in            IN interv_icnp_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in            IN interv_icnp_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in           IN interv_icnp_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in            IN interv_icnp_ea.status_flg%TYPE DEFAULT NULL,
        flg_status_in            IN interv_icnp_ea.flg_status%TYPE DEFAULT NULL,
        flg_type_in              IN interv_icnp_ea.flg_type%TYPE DEFAULT NULL,
        dt_next_in               IN interv_icnp_ea.dt_next%TYPE DEFAULT NULL,
        dt_plan_in               IN interv_icnp_ea.dt_plan%TYPE DEFAULT NULL,
        id_vs_in                 IN interv_icnp_ea.id_vs%TYPE DEFAULT NULL,
        id_prof_close_in         IN interv_icnp_ea.id_prof_close%TYPE DEFAULT NULL,
        dt_close_in              IN interv_icnp_ea.dt_close%TYPE DEFAULT NULL,
        dt_icnp_epis_interv_in   IN interv_icnp_ea.dt_icnp_epis_interv%TYPE DEFAULT NULL,
        id_prof_in               IN interv_icnp_ea.id_prof%TYPE DEFAULT NULL,
        id_episode_origin_in     IN interv_icnp_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_in            IN interv_icnp_ea.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN interv_icnp_ea.id_patient%TYPE DEFAULT NULL,
        flg_status_plan_in       IN interv_icnp_ea.flg_status_plan%TYPE DEFAULT NULL,
        id_prof_take_in          IN interv_icnp_ea.id_prof_take%TYPE DEFAULT NULL,
        freq_in                  IN interv_icnp_ea.freq%TYPE DEFAULT NULL,
        notes_in                 IN interv_icnp_ea.notes%TYPE DEFAULT NULL,
        notes_close_in           IN interv_icnp_ea.notes_close%TYPE DEFAULT NULL,
        dt_begin_in              IN interv_icnp_ea.dt_begin%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN interv_icnp_ea.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN interv_icnp_ea.duration%TYPE DEFAULT NULL,
        num_take_in              IN interv_icnp_ea.num_take%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN interv_icnp_ea.flg_interval_unit%TYPE DEFAULT NULL,
        interval_in              IN interv_icnp_ea.interval%TYPE DEFAULT NULL,
        dt_take_ea_in            IN interv_icnp_ea.dt_take_ea%TYPE DEFAULT NULL,
        dt_dg_last_update_in     IN interv_icnp_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        create_user_in           IN interv_icnp_ea.create_user%TYPE DEFAULT NULL,
        create_time_in           IN interv_icnp_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN interv_icnp_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN interv_icnp_ea.update_user%TYPE DEFAULT NULL,
        update_time_in           IN interv_icnp_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN interv_icnp_ea.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN interv_icnp_ea.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN interv_icnp_ea.flg_prn%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_icnp_epis_interv_in   => id_icnp_epis_interv_in,
            id_composition_interv_in => id_composition_interv_in,
            id_icnp_epis_diag_in     => id_icnp_epis_diag_in,
            id_composition_diag_in   => id_composition_diag_in,
            flg_time_in              => flg_time_in,
            status_str_in            => status_str_in,
            status_msg_in            => status_msg_in,
            status_icon_in           => status_icon_in,
            status_flg_in            => status_flg_in,
            flg_status_in            => flg_status_in,
            flg_type_in              => flg_type_in,
            dt_next_in               => dt_next_in,
            dt_plan_in               => dt_plan_in,
            id_vs_in                 => id_vs_in,
            id_prof_close_in         => id_prof_close_in,
            dt_close_in              => dt_close_in,
            dt_icnp_epis_interv_in   => dt_icnp_epis_interv_in,
            id_prof_in               => id_prof_in,
            id_episode_origin_in     => id_episode_origin_in,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            flg_status_plan_in       => flg_status_plan_in,
            id_prof_take_in          => id_prof_take_in,
            freq_in                  => freq_in,
            notes_in                 => notes_in,
            notes_close_in           => notes_close_in,
            dt_begin_in              => dt_begin_in,
            flg_duration_unit_in     => flg_duration_unit_in,
            duration_in              => duration_in,
            num_take_in              => num_take_in,
            flg_interval_unit_in     => flg_interval_unit_in,
            interval_in              => interval_in,
            dt_take_ea_in            => dt_take_ea_in,
            dt_dg_last_update_in     => dt_dg_last_update_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_order_recurr_plan_in  => id_order_recurr_plan_in,
            flg_prn_in               => flg_prn_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN interv_icnp_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec interv_icnp_ea%ROWTYPE := rec_in;
    BEGIN
        ins(id_icnp_epis_interv_in   => l_rec.id_icnp_epis_interv,
            id_composition_interv_in => l_rec.id_composition_interv,
            id_icnp_epis_diag_in     => l_rec.id_icnp_epis_diag,
            id_composition_diag_in   => l_rec.id_composition_diag,
            flg_time_in              => l_rec.flg_time,
            status_str_in            => l_rec.status_str,
            status_msg_in            => l_rec.status_msg,
            status_icon_in           => l_rec.status_icon,
            status_flg_in            => l_rec.status_flg,
            flg_status_in            => l_rec.flg_status,
            flg_type_in              => l_rec.flg_type,
            dt_next_in               => l_rec.dt_next,
            dt_plan_in               => l_rec.dt_plan,
            id_vs_in                 => l_rec.id_vs,
            id_prof_close_in         => l_rec.id_prof_close,
            dt_close_in              => l_rec.dt_close,
            dt_icnp_epis_interv_in   => l_rec.dt_icnp_epis_interv,
            id_prof_in               => l_rec.id_prof,
            id_episode_origin_in     => l_rec.id_episode_origin,
            id_episode_in            => l_rec.id_episode,
            id_patient_in            => l_rec.id_patient,
            flg_status_plan_in       => l_rec.flg_status_plan,
            id_prof_take_in          => l_rec.id_prof_take,
            freq_in                  => l_rec.freq,
            notes_in                 => l_rec.notes,
            notes_close_in           => l_rec.notes_close,
            dt_begin_in              => l_rec.dt_begin,
            flg_duration_unit_in     => l_rec.flg_duration_unit,
            duration_in              => l_rec.duration,
            num_take_in              => l_rec.num_take,
            flg_interval_unit_in     => l_rec.flg_interval_unit,
            interval_in              => l_rec.interval,
            dt_take_ea_in            => l_rec.dt_take_ea,
            dt_dg_last_update_in     => l_rec.dt_dg_last_update,
            create_user_in           => l_rec.create_user,
            create_time_in           => l_rec.create_time,
            create_institution_in    => l_rec.create_institution,
            update_user_in           => l_rec.update_user,
            update_time_in           => l_rec.update_time,
            update_institution_in    => l_rec.update_institution,
            id_order_recurr_plan_in  => l_rec.id_order_recurr_plan,
            flg_prn_in               => l_rec.flg_prn,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN interv_icnp_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN interv_icnp_ea_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO interv_icnp_ea
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ICNP_EPIS_INTERV _' || indx,
                                                        value_in           => rows_in(indx).id_icnp_epis_interv,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION_INTERV _' || indx,
                                                        value_in           => rows_in(indx).id_composition_interv,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ICNP_EPIS_DIAG _' || indx,
                                                        value_in           => rows_in(indx).id_icnp_epis_diag,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION_DIAG _' || indx,
                                                        value_in           => rows_in(indx).id_composition_diag,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TIME _' || indx,
                                                        value_in           => rows_in(indx).flg_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_STR _' || indx,
                                                        value_in           => rows_in(indx).status_str,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_MSG _' || indx,
                                                        value_in           => rows_in(indx).status_msg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_ICON _' || indx,
                                                        value_in           => rows_in(indx).status_icon,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'STATUS_FLG _' || indx,
                                                        value_in           => rows_in(indx).status_flg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_NEXT _' || indx,
                                                        value_in           => rows_in(indx).dt_next,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PLAN _' || indx,
                                                        value_in           => rows_in(indx).dt_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VS _' || indx,
                                                        value_in           => rows_in(indx).id_vs,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CLOSE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_close,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CLOSE _' || indx,
                                                        value_in           => rows_in(indx).dt_close,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ICNP_EPIS_INTERV _' || indx,
                                                        value_in           => rows_in(indx).dt_icnp_epis_interv,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF _' || indx,
                                                        value_in           => rows_in(indx).id_prof,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN _' || indx,
                                                        value_in           => rows_in(indx).id_episode_origin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS_PLAN _' || indx,
                                                        value_in           => rows_in(indx).flg_status_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_TAKE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_take,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FREQ _' || indx,
                                                        value_in           => rows_in(indx).freq,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CLOSE _' || indx,
                                                        value_in           => rows_in(indx).notes_close,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BEGIN _' || indx,
                                                        value_in           => rows_in(indx).dt_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_DURATION_UNIT _' || indx,
                                                        value_in           => rows_in(indx).flg_duration_unit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DURATION _' || indx,
                                                        value_in           => rows_in(indx).duration,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_TAKE _' || indx,
                                                        value_in           => rows_in(indx).num_take,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_INTERVAL_UNIT _' || indx,
                                                        value_in           => rows_in(indx).flg_interval_unit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'INTERVAL _' || indx,
                                                        value_in           => rows_in(indx).interval,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_TAKE_EA _' || indx,
                                                        value_in           => rows_in(indx).dt_take_ea,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_DG_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).dt_dg_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ORDER_RECURR_PLAN _' || indx,
                                                        value_in           => rows_in(indx).id_order_recurr_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_PRN _' || indx,
                                                        value_in           => rows_in(indx).flg_prn,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'INTERV_ICNP_EA',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN interv_icnp_ea_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_icnp_epis_interv_in    IN interv_icnp_ea.id_icnp_epis_interv%TYPE,
        id_composition_interv_in  IN interv_icnp_ea.id_composition_interv%TYPE DEFAULT NULL,
        id_composition_interv_nin IN BOOLEAN := TRUE,
        id_icnp_epis_diag_in      IN interv_icnp_ea.id_icnp_epis_diag%TYPE DEFAULT NULL,
        id_icnp_epis_diag_nin     IN BOOLEAN := TRUE,
        id_composition_diag_in    IN interv_icnp_ea.id_composition_diag%TYPE DEFAULT NULL,
        id_composition_diag_nin   IN BOOLEAN := TRUE,
        flg_time_in               IN interv_icnp_ea.flg_time%TYPE DEFAULT NULL,
        flg_time_nin              IN BOOLEAN := TRUE,
        status_str_in             IN interv_icnp_ea.status_str%TYPE DEFAULT NULL,
        status_str_nin            IN BOOLEAN := TRUE,
        status_msg_in             IN interv_icnp_ea.status_msg%TYPE DEFAULT NULL,
        status_msg_nin            IN BOOLEAN := TRUE,
        status_icon_in            IN interv_icnp_ea.status_icon%TYPE DEFAULT NULL,
        status_icon_nin           IN BOOLEAN := TRUE,
        status_flg_in             IN interv_icnp_ea.status_flg%TYPE DEFAULT NULL,
        status_flg_nin            IN BOOLEAN := TRUE,
        flg_status_in             IN interv_icnp_ea.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        flg_type_in               IN interv_icnp_ea.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        dt_next_in                IN interv_icnp_ea.dt_next%TYPE DEFAULT NULL,
        dt_next_nin               IN BOOLEAN := TRUE,
        dt_plan_in                IN interv_icnp_ea.dt_plan%TYPE DEFAULT NULL,
        dt_plan_nin               IN BOOLEAN := TRUE,
        id_vs_in                  IN interv_icnp_ea.id_vs%TYPE DEFAULT NULL,
        id_vs_nin                 IN BOOLEAN := TRUE,
        id_prof_close_in          IN interv_icnp_ea.id_prof_close%TYPE DEFAULT NULL,
        id_prof_close_nin         IN BOOLEAN := TRUE,
        dt_close_in               IN interv_icnp_ea.dt_close%TYPE DEFAULT NULL,
        dt_close_nin              IN BOOLEAN := TRUE,
        dt_icnp_epis_interv_in    IN interv_icnp_ea.dt_icnp_epis_interv%TYPE DEFAULT NULL,
        dt_icnp_epis_interv_nin   IN BOOLEAN := TRUE,
        id_prof_in                IN interv_icnp_ea.id_prof%TYPE DEFAULT NULL,
        id_prof_nin               IN BOOLEAN := TRUE,
        id_episode_origin_in      IN interv_icnp_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin     IN BOOLEAN := TRUE,
        id_episode_in             IN interv_icnp_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN interv_icnp_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        flg_status_plan_in        IN interv_icnp_ea.flg_status_plan%TYPE DEFAULT NULL,
        flg_status_plan_nin       IN BOOLEAN := TRUE,
        id_prof_take_in           IN interv_icnp_ea.id_prof_take%TYPE DEFAULT NULL,
        id_prof_take_nin          IN BOOLEAN := TRUE,
        freq_in                   IN interv_icnp_ea.freq%TYPE DEFAULT NULL,
        freq_nin                  IN BOOLEAN := TRUE,
        notes_in                  IN interv_icnp_ea.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        notes_close_in            IN interv_icnp_ea.notes_close%TYPE DEFAULT NULL,
        notes_close_nin           IN BOOLEAN := TRUE,
        dt_begin_in               IN interv_icnp_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin              IN BOOLEAN := TRUE,
        flg_duration_unit_in      IN interv_icnp_ea.flg_duration_unit%TYPE DEFAULT NULL,
        flg_duration_unit_nin     IN BOOLEAN := TRUE,
        duration_in               IN interv_icnp_ea.duration%TYPE DEFAULT NULL,
        duration_nin              IN BOOLEAN := TRUE,
        num_take_in               IN interv_icnp_ea.num_take%TYPE DEFAULT NULL,
        num_take_nin              IN BOOLEAN := TRUE,
        flg_interval_unit_in      IN interv_icnp_ea.flg_interval_unit%TYPE DEFAULT NULL,
        flg_interval_unit_nin     IN BOOLEAN := TRUE,
        interval_in               IN interv_icnp_ea.interval%TYPE DEFAULT NULL,
        interval_nin              IN BOOLEAN := TRUE,
        dt_take_ea_in             IN interv_icnp_ea.dt_take_ea%TYPE DEFAULT NULL,
        dt_take_ea_nin            IN BOOLEAN := TRUE,
        dt_dg_last_update_in      IN interv_icnp_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin     IN BOOLEAN := TRUE,
        create_user_in            IN interv_icnp_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN interv_icnp_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN interv_icnp_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN interv_icnp_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN interv_icnp_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN interv_icnp_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_order_recurr_plan_in   IN interv_icnp_ea.id_order_recurr_plan%TYPE DEFAULT NULL,
        id_order_recurr_plan_nin  IN BOOLEAN := TRUE,
        flg_prn_in                IN interv_icnp_ea.flg_prn%TYPE DEFAULT NULL,
        flg_prn_nin               IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out                table_varchar;
        l_id_composition_interv_n NUMBER(1);
        l_id_icnp_epis_diag_n     NUMBER(1);
        l_id_composition_diag_n   NUMBER(1);
        l_flg_time_n              NUMBER(1);
        l_status_str_n            NUMBER(1);
        l_status_msg_n            NUMBER(1);
        l_status_icon_n           NUMBER(1);
        l_status_flg_n            NUMBER(1);
        l_flg_status_n            NUMBER(1);
        l_flg_type_n              NUMBER(1);
        l_dt_next_n               NUMBER(1);
        l_dt_plan_n               NUMBER(1);
        l_id_vs_n                 NUMBER(1);
        l_id_prof_close_n         NUMBER(1);
        l_dt_close_n              NUMBER(1);
        l_dt_icnp_epis_interv_n   NUMBER(1);
        l_id_prof_n               NUMBER(1);
        l_id_episode_origin_n     NUMBER(1);
        l_id_episode_n            NUMBER(1);
        l_id_patient_n            NUMBER(1);
        l_flg_status_plan_n       NUMBER(1);
        l_id_prof_take_n          NUMBER(1);
        l_freq_n                  NUMBER(1);
        l_notes_n                 NUMBER(1);
        l_notes_close_n           NUMBER(1);
        l_dt_begin_n              NUMBER(1);
        l_flg_duration_unit_n     NUMBER(1);
        l_duration_n              NUMBER(1);
        l_num_take_n              NUMBER(1);
        l_flg_interval_unit_n     NUMBER(1);
        l_interval_n              NUMBER(1);
        l_dt_take_ea_n            NUMBER(1);
        l_dt_dg_last_update_n     NUMBER(1);
        l_create_user_n           NUMBER(1);
        l_create_time_n           NUMBER(1);
        l_create_institution_n    NUMBER(1);
        l_update_user_n           NUMBER(1);
        l_update_time_n           NUMBER(1);
        l_update_institution_n    NUMBER(1);
        l_id_order_recurr_plan_n  NUMBER(1);
        l_flg_prn_n               NUMBER(1);
    BEGIN
    
        l_id_composition_interv_n := sys.diutil.bool_to_int(id_composition_interv_nin);
        l_id_icnp_epis_diag_n     := sys.diutil.bool_to_int(id_icnp_epis_diag_nin);
        l_id_composition_diag_n   := sys.diutil.bool_to_int(id_composition_diag_nin);
        l_flg_time_n              := sys.diutil.bool_to_int(flg_time_nin);
        l_status_str_n            := sys.diutil.bool_to_int(status_str_nin);
        l_status_msg_n            := sys.diutil.bool_to_int(status_msg_nin);
        l_status_icon_n           := sys.diutil.bool_to_int(status_icon_nin);
        l_status_flg_n            := sys.diutil.bool_to_int(status_flg_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_type_n              := sys.diutil.bool_to_int(flg_type_nin);
        l_dt_next_n               := sys.diutil.bool_to_int(dt_next_nin);
        l_dt_plan_n               := sys.diutil.bool_to_int(dt_plan_nin);
        l_id_vs_n                 := sys.diutil.bool_to_int(id_vs_nin);
        l_id_prof_close_n         := sys.diutil.bool_to_int(id_prof_close_nin);
        l_dt_close_n              := sys.diutil.bool_to_int(dt_close_nin);
        l_dt_icnp_epis_interv_n   := sys.diutil.bool_to_int(dt_icnp_epis_interv_nin);
        l_id_prof_n               := sys.diutil.bool_to_int(id_prof_nin);
        l_id_episode_origin_n     := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_episode_n            := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n            := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_status_plan_n       := sys.diutil.bool_to_int(flg_status_plan_nin);
        l_id_prof_take_n          := sys.diutil.bool_to_int(id_prof_take_nin);
        l_freq_n                  := sys.diutil.bool_to_int(freq_nin);
        l_notes_n                 := sys.diutil.bool_to_int(notes_nin);
        l_notes_close_n           := sys.diutil.bool_to_int(notes_close_nin);
        l_dt_begin_n              := sys.diutil.bool_to_int(dt_begin_nin);
        l_flg_duration_unit_n     := sys.diutil.bool_to_int(flg_duration_unit_nin);
        l_duration_n              := sys.diutil.bool_to_int(duration_nin);
        l_num_take_n              := sys.diutil.bool_to_int(num_take_nin);
        l_flg_interval_unit_n     := sys.diutil.bool_to_int(flg_interval_unit_nin);
        l_interval_n              := sys.diutil.bool_to_int(interval_nin);
        l_dt_take_ea_n            := sys.diutil.bool_to_int(dt_take_ea_nin);
        l_dt_dg_last_update_n     := sys.diutil.bool_to_int(dt_dg_last_update_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
        l_id_order_recurr_plan_n  := sys.diutil.bool_to_int(id_order_recurr_plan_nin);
        l_flg_prn_n               := sys.diutil.bool_to_int(flg_prn_nin);
    
        UPDATE interv_icnp_ea
           SET id_composition_interv = decode(l_id_composition_interv_n,
                                              0,
                                              id_composition_interv_in,
                                              nvl(id_composition_interv_in, id_composition_interv)),
               id_icnp_epis_diag     = decode(l_id_icnp_epis_diag_n,
                                              0,
                                              id_icnp_epis_diag_in,
                                              nvl(id_icnp_epis_diag_in, id_icnp_epis_diag)),
               id_composition_diag   = decode(l_id_composition_diag_n,
                                              0,
                                              id_composition_diag_in,
                                              nvl(id_composition_diag_in, id_composition_diag)),
               flg_time              = decode(l_flg_time_n, 0, flg_time_in, nvl(flg_time_in, flg_time)),
               status_str            = decode(l_status_str_n, 0, status_str_in, nvl(status_str_in, status_str)),
               status_msg            = decode(l_status_msg_n, 0, status_msg_in, nvl(status_msg_in, status_msg)),
               status_icon           = decode(l_status_icon_n, 0, status_icon_in, nvl(status_icon_in, status_icon)),
               status_flg            = decode(l_status_flg_n, 0, status_flg_in, nvl(status_flg_in, status_flg)),
               flg_status            = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               flg_type              = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               dt_next               = decode(l_dt_next_n, 0, dt_next_in, nvl(dt_next_in, dt_next)),
               dt_plan               = decode(l_dt_plan_n, 0, dt_plan_in, nvl(dt_plan_in, dt_plan)),
               id_vs                 = decode(l_id_vs_n, 0, id_vs_in, nvl(id_vs_in, id_vs)),
               id_prof_close         = decode(l_id_prof_close_n,
                                              0,
                                              id_prof_close_in,
                                              nvl(id_prof_close_in, id_prof_close)),
               dt_close              = decode(l_dt_close_n, 0, dt_close_in, nvl(dt_close_in, dt_close)),
               dt_icnp_epis_interv   = decode(l_dt_icnp_epis_interv_n,
                                              0,
                                              dt_icnp_epis_interv_in,
                                              nvl(dt_icnp_epis_interv_in, dt_icnp_epis_interv)),
               id_prof               = decode(l_id_prof_n, 0, id_prof_in, nvl(id_prof_in, id_prof)),
               id_episode_origin     = decode(l_id_episode_origin_n,
                                              0,
                                              id_episode_origin_in,
                                              nvl(id_episode_origin_in, id_episode_origin)),
               id_episode            = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_patient            = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               flg_status_plan       = decode(l_flg_status_plan_n,
                                              0,
                                              flg_status_plan_in,
                                              nvl(flg_status_plan_in, flg_status_plan)),
               id_prof_take          = decode(l_id_prof_take_n, 0, id_prof_take_in, nvl(id_prof_take_in, id_prof_take)),
               freq                  = decode(l_freq_n, 0, freq_in, nvl(freq_in, freq)),
               notes                 = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               notes_close           = decode(l_notes_close_n, 0, notes_close_in, nvl(notes_close_in, notes_close)),
               dt_begin              = decode(l_dt_begin_n, 0, dt_begin_in, nvl(dt_begin_in, dt_begin)),
               flg_duration_unit     = decode(l_flg_duration_unit_n,
                                              0,
                                              flg_duration_unit_in,
                                              nvl(flg_duration_unit_in, flg_duration_unit)),
               duration              = decode(l_duration_n, 0, duration_in, nvl(duration_in, duration)),
               num_take              = decode(l_num_take_n, 0, num_take_in, nvl(num_take_in, num_take)),
               flg_interval_unit     = decode(l_flg_interval_unit_n,
                                              0,
                                              flg_interval_unit_in,
                                              nvl(flg_interval_unit_in, flg_interval_unit)),
               INTERVAL              = decode(l_interval_n, 0, interval_in, nvl(interval_in, INTERVAL)),
               dt_take_ea            = decode(l_dt_take_ea_n, 0, dt_take_ea_in, nvl(dt_take_ea_in, dt_take_ea)),
               dt_dg_last_update     = nvl(dt_dg_last_update_in, current_timestamp),
               create_user           = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time           = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution    = decode(l_create_institution_n,
                                              0,
                                              create_institution_in,
                                              nvl(create_institution_in, create_institution)),
               update_user           = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time           = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution    = decode(l_update_institution_n,
                                              0,
                                              update_institution_in,
                                              nvl(update_institution_in, update_institution)),
               id_order_recurr_plan  = decode(l_id_order_recurr_plan_n,
                                              0,
                                              id_order_recurr_plan_in,
                                              nvl(id_order_recurr_plan_in, id_order_recurr_plan)),
               flg_prn               = decode(l_flg_prn_n, 0, flg_prn_in, nvl(flg_prn_in, flg_prn))
         WHERE id_icnp_epis_interv = id_icnp_epis_interv_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'INTERV_ICNP_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    IF l_name = 'IIA_EPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'IIA_EPE_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'IIA_IEI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ICNP_EPIS_DIAG',
                                                        value_in           => id_icnp_epis_diag_in);
                    END IF;
                    IF l_name = 'IIA_IEN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ICNP_EPIS_INTERV',
                                                        value_in           => id_icnp_epis_interv_in);
                    END IF;
                    IF l_name = 'IIA_ORP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ORDER_RECURR_PLAN',
                                                        value_in           => id_order_recurr_plan_in);
                    END IF;
                    IF l_name = 'IIA_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'IIA_PRL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CLOSE',
                                                        value_in           => id_prof_close_in);
                    END IF;
                    IF l_name = 'IIA_PRL_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF',
                                                        value_in           => id_prof_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_icnp_epis_interv_in    IN interv_icnp_ea.id_icnp_epis_interv%TYPE,
        id_composition_interv_in  IN interv_icnp_ea.id_composition_interv%TYPE DEFAULT NULL,
        id_composition_interv_nin IN BOOLEAN := TRUE,
        id_icnp_epis_diag_in      IN interv_icnp_ea.id_icnp_epis_diag%TYPE DEFAULT NULL,
        id_icnp_epis_diag_nin     IN BOOLEAN := TRUE,
        id_composition_diag_in    IN interv_icnp_ea.id_composition_diag%TYPE DEFAULT NULL,
        id_composition_diag_nin   IN BOOLEAN := TRUE,
        flg_time_in               IN interv_icnp_ea.flg_time%TYPE DEFAULT NULL,
        flg_time_nin              IN BOOLEAN := TRUE,
        status_str_in             IN interv_icnp_ea.status_str%TYPE DEFAULT NULL,
        status_str_nin            IN BOOLEAN := TRUE,
        status_msg_in             IN interv_icnp_ea.status_msg%TYPE DEFAULT NULL,
        status_msg_nin            IN BOOLEAN := TRUE,
        status_icon_in            IN interv_icnp_ea.status_icon%TYPE DEFAULT NULL,
        status_icon_nin           IN BOOLEAN := TRUE,
        status_flg_in             IN interv_icnp_ea.status_flg%TYPE DEFAULT NULL,
        status_flg_nin            IN BOOLEAN := TRUE,
        flg_status_in             IN interv_icnp_ea.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        flg_type_in               IN interv_icnp_ea.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        dt_next_in                IN interv_icnp_ea.dt_next%TYPE DEFAULT NULL,
        dt_next_nin               IN BOOLEAN := TRUE,
        dt_plan_in                IN interv_icnp_ea.dt_plan%TYPE DEFAULT NULL,
        dt_plan_nin               IN BOOLEAN := TRUE,
        id_vs_in                  IN interv_icnp_ea.id_vs%TYPE DEFAULT NULL,
        id_vs_nin                 IN BOOLEAN := TRUE,
        id_prof_close_in          IN interv_icnp_ea.id_prof_close%TYPE DEFAULT NULL,
        id_prof_close_nin         IN BOOLEAN := TRUE,
        dt_close_in               IN interv_icnp_ea.dt_close%TYPE DEFAULT NULL,
        dt_close_nin              IN BOOLEAN := TRUE,
        dt_icnp_epis_interv_in    IN interv_icnp_ea.dt_icnp_epis_interv%TYPE DEFAULT NULL,
        dt_icnp_epis_interv_nin   IN BOOLEAN := TRUE,
        id_prof_in                IN interv_icnp_ea.id_prof%TYPE DEFAULT NULL,
        id_prof_nin               IN BOOLEAN := TRUE,
        id_episode_origin_in      IN interv_icnp_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin     IN BOOLEAN := TRUE,
        id_episode_in             IN interv_icnp_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN interv_icnp_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        flg_status_plan_in        IN interv_icnp_ea.flg_status_plan%TYPE DEFAULT NULL,
        flg_status_plan_nin       IN BOOLEAN := TRUE,
        id_prof_take_in           IN interv_icnp_ea.id_prof_take%TYPE DEFAULT NULL,
        id_prof_take_nin          IN BOOLEAN := TRUE,
        freq_in                   IN interv_icnp_ea.freq%TYPE DEFAULT NULL,
        freq_nin                  IN BOOLEAN := TRUE,
        notes_in                  IN interv_icnp_ea.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        notes_close_in            IN interv_icnp_ea.notes_close%TYPE DEFAULT NULL,
        notes_close_nin           IN BOOLEAN := TRUE,
        dt_begin_in               IN interv_icnp_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin              IN BOOLEAN := TRUE,
        flg_duration_unit_in      IN interv_icnp_ea.flg_duration_unit%TYPE DEFAULT NULL,
        flg_duration_unit_nin     IN BOOLEAN := TRUE,
        duration_in               IN interv_icnp_ea.duration%TYPE DEFAULT NULL,
        duration_nin              IN BOOLEAN := TRUE,
        num_take_in               IN interv_icnp_ea.num_take%TYPE DEFAULT NULL,
        num_take_nin              IN BOOLEAN := TRUE,
        flg_interval_unit_in      IN interv_icnp_ea.flg_interval_unit%TYPE DEFAULT NULL,
        flg_interval_unit_nin     IN BOOLEAN := TRUE,
        interval_in               IN interv_icnp_ea.interval%TYPE DEFAULT NULL,
        interval_nin              IN BOOLEAN := TRUE,
        dt_take_ea_in             IN interv_icnp_ea.dt_take_ea%TYPE DEFAULT NULL,
        dt_take_ea_nin            IN BOOLEAN := TRUE,
        dt_dg_last_update_in      IN interv_icnp_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin     IN BOOLEAN := TRUE,
        create_user_in            IN interv_icnp_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN interv_icnp_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN interv_icnp_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN interv_icnp_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN interv_icnp_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN interv_icnp_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_order_recurr_plan_in   IN interv_icnp_ea.id_order_recurr_plan%TYPE DEFAULT NULL,
        id_order_recurr_plan_nin  IN BOOLEAN := TRUE,
        flg_prn_in                IN interv_icnp_ea.flg_prn%TYPE DEFAULT NULL,
        flg_prn_nin               IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_icnp_epis_interv_in    => id_icnp_epis_interv_in,
            id_composition_interv_in  => id_composition_interv_in,
            id_composition_interv_nin => id_composition_interv_nin,
            id_icnp_epis_diag_in      => id_icnp_epis_diag_in,
            id_icnp_epis_diag_nin     => id_icnp_epis_diag_nin,
            id_composition_diag_in    => id_composition_diag_in,
            id_composition_diag_nin   => id_composition_diag_nin,
            flg_time_in               => flg_time_in,
            flg_time_nin              => flg_time_nin,
            status_str_in             => status_str_in,
            status_str_nin            => status_str_nin,
            status_msg_in             => status_msg_in,
            status_msg_nin            => status_msg_nin,
            status_icon_in            => status_icon_in,
            status_icon_nin           => status_icon_nin,
            status_flg_in             => status_flg_in,
            status_flg_nin            => status_flg_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            flg_type_in               => flg_type_in,
            flg_type_nin              => flg_type_nin,
            dt_next_in                => dt_next_in,
            dt_next_nin               => dt_next_nin,
            dt_plan_in                => dt_plan_in,
            dt_plan_nin               => dt_plan_nin,
            id_vs_in                  => id_vs_in,
            id_vs_nin                 => id_vs_nin,
            id_prof_close_in          => id_prof_close_in,
            id_prof_close_nin         => id_prof_close_nin,
            dt_close_in               => dt_close_in,
            dt_close_nin              => dt_close_nin,
            dt_icnp_epis_interv_in    => dt_icnp_epis_interv_in,
            dt_icnp_epis_interv_nin   => dt_icnp_epis_interv_nin,
            id_prof_in                => id_prof_in,
            id_prof_nin               => id_prof_nin,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_origin_nin     => id_episode_origin_nin,
            id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            flg_status_plan_in        => flg_status_plan_in,
            flg_status_plan_nin       => flg_status_plan_nin,
            id_prof_take_in           => id_prof_take_in,
            id_prof_take_nin          => id_prof_take_nin,
            freq_in                   => freq_in,
            freq_nin                  => freq_nin,
            notes_in                  => notes_in,
            notes_nin                 => notes_nin,
            notes_close_in            => notes_close_in,
            notes_close_nin           => notes_close_nin,
            dt_begin_in               => dt_begin_in,
            dt_begin_nin              => dt_begin_nin,
            flg_duration_unit_in      => flg_duration_unit_in,
            flg_duration_unit_nin     => flg_duration_unit_nin,
            duration_in               => duration_in,
            duration_nin              => duration_nin,
            num_take_in               => num_take_in,
            num_take_nin              => num_take_nin,
            flg_interval_unit_in      => flg_interval_unit_in,
            flg_interval_unit_nin     => flg_interval_unit_nin,
            interval_in               => interval_in,
            interval_nin              => interval_nin,
            dt_take_ea_in             => dt_take_ea_in,
            dt_take_ea_nin            => dt_take_ea_nin,
            dt_dg_last_update_in      => dt_dg_last_update_in,
            dt_dg_last_update_nin     => dt_dg_last_update_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            id_order_recurr_plan_in   => id_order_recurr_plan_in,
            id_order_recurr_plan_nin  => id_order_recurr_plan_nin,
            flg_prn_in                => flg_prn_in,
            flg_prn_nin               => flg_prn_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_composition_interv_in  IN interv_icnp_ea.id_composition_interv%TYPE DEFAULT NULL,
        id_composition_interv_nin IN BOOLEAN := TRUE,
        id_icnp_epis_diag_in      IN interv_icnp_ea.id_icnp_epis_diag%TYPE DEFAULT NULL,
        id_icnp_epis_diag_nin     IN BOOLEAN := TRUE,
        id_composition_diag_in    IN interv_icnp_ea.id_composition_diag%TYPE DEFAULT NULL,
        id_composition_diag_nin   IN BOOLEAN := TRUE,
        flg_time_in               IN interv_icnp_ea.flg_time%TYPE DEFAULT NULL,
        flg_time_nin              IN BOOLEAN := TRUE,
        status_str_in             IN interv_icnp_ea.status_str%TYPE DEFAULT NULL,
        status_str_nin            IN BOOLEAN := TRUE,
        status_msg_in             IN interv_icnp_ea.status_msg%TYPE DEFAULT NULL,
        status_msg_nin            IN BOOLEAN := TRUE,
        status_icon_in            IN interv_icnp_ea.status_icon%TYPE DEFAULT NULL,
        status_icon_nin           IN BOOLEAN := TRUE,
        status_flg_in             IN interv_icnp_ea.status_flg%TYPE DEFAULT NULL,
        status_flg_nin            IN BOOLEAN := TRUE,
        flg_status_in             IN interv_icnp_ea.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        flg_type_in               IN interv_icnp_ea.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        dt_next_in                IN interv_icnp_ea.dt_next%TYPE DEFAULT NULL,
        dt_next_nin               IN BOOLEAN := TRUE,
        dt_plan_in                IN interv_icnp_ea.dt_plan%TYPE DEFAULT NULL,
        dt_plan_nin               IN BOOLEAN := TRUE,
        id_vs_in                  IN interv_icnp_ea.id_vs%TYPE DEFAULT NULL,
        id_vs_nin                 IN BOOLEAN := TRUE,
        id_prof_close_in          IN interv_icnp_ea.id_prof_close%TYPE DEFAULT NULL,
        id_prof_close_nin         IN BOOLEAN := TRUE,
        dt_close_in               IN interv_icnp_ea.dt_close%TYPE DEFAULT NULL,
        dt_close_nin              IN BOOLEAN := TRUE,
        dt_icnp_epis_interv_in    IN interv_icnp_ea.dt_icnp_epis_interv%TYPE DEFAULT NULL,
        dt_icnp_epis_interv_nin   IN BOOLEAN := TRUE,
        id_prof_in                IN interv_icnp_ea.id_prof%TYPE DEFAULT NULL,
        id_prof_nin               IN BOOLEAN := TRUE,
        id_episode_origin_in      IN interv_icnp_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin     IN BOOLEAN := TRUE,
        id_episode_in             IN interv_icnp_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN interv_icnp_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        flg_status_plan_in        IN interv_icnp_ea.flg_status_plan%TYPE DEFAULT NULL,
        flg_status_plan_nin       IN BOOLEAN := TRUE,
        id_prof_take_in           IN interv_icnp_ea.id_prof_take%TYPE DEFAULT NULL,
        id_prof_take_nin          IN BOOLEAN := TRUE,
        freq_in                   IN interv_icnp_ea.freq%TYPE DEFAULT NULL,
        freq_nin                  IN BOOLEAN := TRUE,
        notes_in                  IN interv_icnp_ea.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        notes_close_in            IN interv_icnp_ea.notes_close%TYPE DEFAULT NULL,
        notes_close_nin           IN BOOLEAN := TRUE,
        dt_begin_in               IN interv_icnp_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin              IN BOOLEAN := TRUE,
        flg_duration_unit_in      IN interv_icnp_ea.flg_duration_unit%TYPE DEFAULT NULL,
        flg_duration_unit_nin     IN BOOLEAN := TRUE,
        duration_in               IN interv_icnp_ea.duration%TYPE DEFAULT NULL,
        duration_nin              IN BOOLEAN := TRUE,
        num_take_in               IN interv_icnp_ea.num_take%TYPE DEFAULT NULL,
        num_take_nin              IN BOOLEAN := TRUE,
        flg_interval_unit_in      IN interv_icnp_ea.flg_interval_unit%TYPE DEFAULT NULL,
        flg_interval_unit_nin     IN BOOLEAN := TRUE,
        interval_in               IN interv_icnp_ea.interval%TYPE DEFAULT NULL,
        interval_nin              IN BOOLEAN := TRUE,
        dt_take_ea_in             IN interv_icnp_ea.dt_take_ea%TYPE DEFAULT NULL,
        dt_take_ea_nin            IN BOOLEAN := TRUE,
        dt_dg_last_update_in      IN interv_icnp_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin     IN BOOLEAN := TRUE,
        create_user_in            IN interv_icnp_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN interv_icnp_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN interv_icnp_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN interv_icnp_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN interv_icnp_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN interv_icnp_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_order_recurr_plan_in   IN interv_icnp_ea.id_order_recurr_plan%TYPE DEFAULT NULL,
        id_order_recurr_plan_nin  IN BOOLEAN := TRUE,
        flg_prn_in                IN interv_icnp_ea.flg_prn%TYPE DEFAULT NULL,
        flg_prn_nin               IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_composition_interv_n NUMBER(1);
        l_id_icnp_epis_diag_n     NUMBER(1);
        l_id_composition_diag_n   NUMBER(1);
        l_flg_time_n              NUMBER(1);
        l_status_str_n            NUMBER(1);
        l_status_msg_n            NUMBER(1);
        l_status_icon_n           NUMBER(1);
        l_status_flg_n            NUMBER(1);
        l_flg_status_n            NUMBER(1);
        l_flg_type_n              NUMBER(1);
        l_dt_next_n               NUMBER(1);
        l_dt_plan_n               NUMBER(1);
        l_id_vs_n                 NUMBER(1);
        l_id_prof_close_n         NUMBER(1);
        l_dt_close_n              NUMBER(1);
        l_dt_icnp_epis_interv_n   NUMBER(1);
        l_id_prof_n               NUMBER(1);
        l_id_episode_origin_n     NUMBER(1);
        l_id_episode_n            NUMBER(1);
        l_id_patient_n            NUMBER(1);
        l_flg_status_plan_n       NUMBER(1);
        l_id_prof_take_n          NUMBER(1);
        l_freq_n                  NUMBER(1);
        l_notes_n                 NUMBER(1);
        l_notes_close_n           NUMBER(1);
        l_dt_begin_n              NUMBER(1);
        l_flg_duration_unit_n     NUMBER(1);
        l_duration_n              NUMBER(1);
        l_num_take_n              NUMBER(1);
        l_flg_interval_unit_n     NUMBER(1);
        l_interval_n              NUMBER(1);
        l_dt_take_ea_n            NUMBER(1);
        l_dt_dg_last_update_n     NUMBER(1);
        l_create_user_n           NUMBER(1);
        l_create_time_n           NUMBER(1);
        l_create_institution_n    NUMBER(1);
        l_update_user_n           NUMBER(1);
        l_update_time_n           NUMBER(1);
        l_update_institution_n    NUMBER(1);
        l_id_order_recurr_plan_n  NUMBER(1);
        l_flg_prn_n               NUMBER(1);
        id_icnp_epis_interv_in    interv_icnp_ea.id_icnp_epis_interv%TYPE;
    BEGIN
    
        l_id_composition_interv_n := sys.diutil.bool_to_int(id_composition_interv_nin);
        l_id_icnp_epis_diag_n     := sys.diutil.bool_to_int(id_icnp_epis_diag_nin);
        l_id_composition_diag_n   := sys.diutil.bool_to_int(id_composition_diag_nin);
        l_flg_time_n              := sys.diutil.bool_to_int(flg_time_nin);
        l_status_str_n            := sys.diutil.bool_to_int(status_str_nin);
        l_status_msg_n            := sys.diutil.bool_to_int(status_msg_nin);
        l_status_icon_n           := sys.diutil.bool_to_int(status_icon_nin);
        l_status_flg_n            := sys.diutil.bool_to_int(status_flg_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_type_n              := sys.diutil.bool_to_int(flg_type_nin);
        l_dt_next_n               := sys.diutil.bool_to_int(dt_next_nin);
        l_dt_plan_n               := sys.diutil.bool_to_int(dt_plan_nin);
        l_id_vs_n                 := sys.diutil.bool_to_int(id_vs_nin);
        l_id_prof_close_n         := sys.diutil.bool_to_int(id_prof_close_nin);
        l_dt_close_n              := sys.diutil.bool_to_int(dt_close_nin);
        l_dt_icnp_epis_interv_n   := sys.diutil.bool_to_int(dt_icnp_epis_interv_nin);
        l_id_prof_n               := sys.diutil.bool_to_int(id_prof_nin);
        l_id_episode_origin_n     := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_episode_n            := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n            := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_status_plan_n       := sys.diutil.bool_to_int(flg_status_plan_nin);
        l_id_prof_take_n          := sys.diutil.bool_to_int(id_prof_take_nin);
        l_freq_n                  := sys.diutil.bool_to_int(freq_nin);
        l_notes_n                 := sys.diutil.bool_to_int(notes_nin);
        l_notes_close_n           := sys.diutil.bool_to_int(notes_close_nin);
        l_dt_begin_n              := sys.diutil.bool_to_int(dt_begin_nin);
        l_flg_duration_unit_n     := sys.diutil.bool_to_int(flg_duration_unit_nin);
        l_duration_n              := sys.diutil.bool_to_int(duration_nin);
        l_num_take_n              := sys.diutil.bool_to_int(num_take_nin);
        l_flg_interval_unit_n     := sys.diutil.bool_to_int(flg_interval_unit_nin);
        l_interval_n              := sys.diutil.bool_to_int(interval_nin);
        l_dt_take_ea_n            := sys.diutil.bool_to_int(dt_take_ea_nin);
        l_dt_dg_last_update_n     := sys.diutil.bool_to_int(dt_dg_last_update_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
        l_id_order_recurr_plan_n  := sys.diutil.bool_to_int(id_order_recurr_plan_nin);
        l_flg_prn_n               := sys.diutil.bool_to_int(flg_prn_nin);
    
        l_sql := 'UPDATE INTERV_ICNP_EA SET ' || ' ID_COMPOSITION_INTERV = decode (' || l_id_composition_interv_n ||
                 ',0,:id_composition_interv_in, NVL (:id_composition_interv_in, ID_COMPOSITION_INTERV)) ' || ',' ||
                 ' ID_ICNP_EPIS_DIAG = decode (' || l_id_icnp_epis_diag_n ||
                 ',0,:id_icnp_epis_diag_in, NVL (:id_icnp_epis_diag_in, ID_ICNP_EPIS_DIAG)) ' || ',' ||
                 ' ID_COMPOSITION_DIAG = decode (' || l_id_composition_diag_n ||
                 ',0,:id_composition_diag_in, NVL (:id_composition_diag_in, ID_COMPOSITION_DIAG)) ' || ',' ||
                 ' FLG_TIME = decode (' || l_flg_time_n || ',0,:flg_time_in, NVL (:flg_time_in, FLG_TIME)) ' || ',' ||
                 ' STATUS_STR = decode (' || l_status_str_n || ',0,:status_str_in, NVL (:status_str_in, STATUS_STR)) ' || ',' ||
                 ' STATUS_MSG = decode (' || l_status_msg_n || ',0,:status_msg_in, NVL (:status_msg_in, STATUS_MSG)) ' || ',' ||
                 ' STATUS_ICON = decode (' || l_status_icon_n ||
                 ',0,:status_icon_in, NVL (:status_icon_in, STATUS_ICON)) ' || ',' || ' STATUS_FLG = decode (' ||
                 l_status_flg_n || ',0,:status_flg_in, NVL (:status_flg_in, STATUS_FLG)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' FLG_TYPE = decode (' || l_flg_type_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' ||
                 ' DT_NEXT = decode (' || l_dt_next_n || ',0,:dt_next_in, NVL (:dt_next_in, DT_NEXT)) ' || ',' ||
                 ' DT_PLAN = decode (' || l_dt_plan_n || ',0,:dt_plan_in, NVL (:dt_plan_in, DT_PLAN)) ' || ',' ||
                 ' ID_VS = decode (' || l_id_vs_n || ',0,:id_vs_in, NVL (:id_vs_in, ID_VS)) ' || ',' ||
                 ' ID_PROF_CLOSE = decode (' || l_id_prof_close_n ||
                 ',0,:id_prof_close_in, NVL (:id_prof_close_in, ID_PROF_CLOSE)) ' || ',' || ' DT_CLOSE = decode (' ||
                 l_dt_close_n || ',0,:dt_close_in, NVL (:dt_close_in, DT_CLOSE)) ' || ',' ||
                 ' DT_ICNP_EPIS_INTERV = decode (' || l_dt_icnp_epis_interv_n ||
                 ',0,:dt_icnp_epis_interv_in, NVL (:dt_icnp_epis_interv_in, DT_ICNP_EPIS_INTERV)) ' || ',' ||
                 ' ID_PROF = decode (' || l_id_prof_n || ',0,:id_prof_in, NVL (:id_prof_in, ID_PROF)) ' || ',' ||
                 ' ID_EPISODE_ORIGIN = decode (' || l_id_episode_origin_n ||
                 ',0,:id_episode_origin_in, NVL (:id_episode_origin_in, ID_EPISODE_ORIGIN)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' FLG_STATUS_PLAN = decode (' || l_flg_status_plan_n ||
                 ',0,:flg_status_plan_in, NVL (:flg_status_plan_in, FLG_STATUS_PLAN)) ' || ',' ||
                 ' ID_PROF_TAKE = decode (' || l_id_prof_take_n ||
                 ',0,:id_prof_take_in, NVL (:id_prof_take_in, ID_PROF_TAKE)) ' || ',' || ' FREQ = decode (' || l_freq_n ||
                 ',0,:freq_in, NVL (:freq_in, FREQ)) ' || ',' || ' NOTES = decode (' || l_notes_n ||
                 ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' || ' NOTES_CLOSE = decode (' || l_notes_close_n ||
                 ',0,:notes_close_in, NVL (:notes_close_in, NOTES_CLOSE)) ' || ',' || ' DT_BEGIN = decode (' ||
                 l_dt_begin_n || ',0,:dt_begin_in, NVL (:dt_begin_in, DT_BEGIN)) ' || ',' ||
                 ' FLG_DURATION_UNIT = decode (' || l_flg_duration_unit_n ||
                 ',0,:flg_duration_unit_in, NVL (:flg_duration_unit_in, FLG_DURATION_UNIT)) ' || ',' ||
                 ' DURATION = decode (' || l_duration_n || ',0,:duration_in, NVL (:duration_in, DURATION)) ' || ',' ||
                 ' NUM_TAKE = decode (' || l_num_take_n || ',0,:num_take_in, NVL (:num_take_in, NUM_TAKE)) ' || ',' ||
                 ' FLG_INTERVAL_UNIT = decode (' || l_flg_interval_unit_n ||
                 ',0,:flg_interval_unit_in, NVL (:flg_interval_unit_in, FLG_INTERVAL_UNIT)) ' || ',' ||
                 ' INTERVAL = decode (' || l_interval_n || ',0,:interval_in, NVL (:interval_in, INTERVAL)) ' || ',' ||
                 ' DT_TAKE_EA = decode (' || l_dt_take_ea_n || ',0,:dt_take_ea_in, NVL (:dt_take_ea_in, DT_TAKE_EA)) ' || ',' ||
                 ' DT_DG_LAST_UPDATE = nvl(:dt_dg_last_update_in,current_timestamp) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_ORDER_RECURR_PLAN = decode (' || l_id_order_recurr_plan_n ||
                 ',0,:id_order_recurr_plan_in, NVL (:id_order_recurr_plan_in, ID_ORDER_RECURR_PLAN)) ' || ',' ||
                 ' FLG_PRN = decode (' || l_flg_prn_n || ',0,:flg_prn_in, NVL (:flg_prn_in, FLG_PRN)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_composition_interv_in, id_icnp_epis_diag_in, id_composition_diag_in, flg_time_in, status_str_in, status_msg_in, status_icon_in, status_flg_in, flg_status_in, flg_type_in, dt_next_in, dt_plan_in, id_vs_in, id_prof_close_in, dt_close_in, dt_icnp_epis_interv_in, id_prof_in, id_episode_origin_in, id_episode_in, id_patient_in, flg_status_plan_in, id_prof_take_in, freq_in, notes_in, notes_close_in, dt_begin_in, flg_duration_unit_in, duration_in, num_take_in, flg_interval_unit_in, interval_in, dt_take_ea_in, dt_dg_last_update_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_order_recurr_plan_in, flg_prn_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'INTERV_ICNP_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    IF l_name = 'IIA_EPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'IIA_EPE_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'IIA_IEI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ICNP_EPIS_DIAG',
                                                        value_in           => id_icnp_epis_diag_in);
                    END IF;
                    IF l_name = 'IIA_IEN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ICNP_EPIS_INTERV',
                                                        value_in           => id_icnp_epis_interv_in);
                    END IF;
                    IF l_name = 'IIA_ORP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ORDER_RECURR_PLAN',
                                                        value_in           => id_order_recurr_plan_in);
                    END IF;
                    IF l_name = 'IIA_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'IIA_PRL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CLOSE',
                                                        value_in           => id_prof_close_in);
                    END IF;
                    IF l_name = 'IIA_PRL_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF',
                                                        value_in           => id_prof_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_composition_interv_in  IN interv_icnp_ea.id_composition_interv%TYPE DEFAULT NULL,
        id_composition_interv_nin IN BOOLEAN := TRUE,
        id_icnp_epis_diag_in      IN interv_icnp_ea.id_icnp_epis_diag%TYPE DEFAULT NULL,
        id_icnp_epis_diag_nin     IN BOOLEAN := TRUE,
        id_composition_diag_in    IN interv_icnp_ea.id_composition_diag%TYPE DEFAULT NULL,
        id_composition_diag_nin   IN BOOLEAN := TRUE,
        flg_time_in               IN interv_icnp_ea.flg_time%TYPE DEFAULT NULL,
        flg_time_nin              IN BOOLEAN := TRUE,
        status_str_in             IN interv_icnp_ea.status_str%TYPE DEFAULT NULL,
        status_str_nin            IN BOOLEAN := TRUE,
        status_msg_in             IN interv_icnp_ea.status_msg%TYPE DEFAULT NULL,
        status_msg_nin            IN BOOLEAN := TRUE,
        status_icon_in            IN interv_icnp_ea.status_icon%TYPE DEFAULT NULL,
        status_icon_nin           IN BOOLEAN := TRUE,
        status_flg_in             IN interv_icnp_ea.status_flg%TYPE DEFAULT NULL,
        status_flg_nin            IN BOOLEAN := TRUE,
        flg_status_in             IN interv_icnp_ea.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        flg_type_in               IN interv_icnp_ea.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        dt_next_in                IN interv_icnp_ea.dt_next%TYPE DEFAULT NULL,
        dt_next_nin               IN BOOLEAN := TRUE,
        dt_plan_in                IN interv_icnp_ea.dt_plan%TYPE DEFAULT NULL,
        dt_plan_nin               IN BOOLEAN := TRUE,
        id_vs_in                  IN interv_icnp_ea.id_vs%TYPE DEFAULT NULL,
        id_vs_nin                 IN BOOLEAN := TRUE,
        id_prof_close_in          IN interv_icnp_ea.id_prof_close%TYPE DEFAULT NULL,
        id_prof_close_nin         IN BOOLEAN := TRUE,
        dt_close_in               IN interv_icnp_ea.dt_close%TYPE DEFAULT NULL,
        dt_close_nin              IN BOOLEAN := TRUE,
        dt_icnp_epis_interv_in    IN interv_icnp_ea.dt_icnp_epis_interv%TYPE DEFAULT NULL,
        dt_icnp_epis_interv_nin   IN BOOLEAN := TRUE,
        id_prof_in                IN interv_icnp_ea.id_prof%TYPE DEFAULT NULL,
        id_prof_nin               IN BOOLEAN := TRUE,
        id_episode_origin_in      IN interv_icnp_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin     IN BOOLEAN := TRUE,
        id_episode_in             IN interv_icnp_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN interv_icnp_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        flg_status_plan_in        IN interv_icnp_ea.flg_status_plan%TYPE DEFAULT NULL,
        flg_status_plan_nin       IN BOOLEAN := TRUE,
        id_prof_take_in           IN interv_icnp_ea.id_prof_take%TYPE DEFAULT NULL,
        id_prof_take_nin          IN BOOLEAN := TRUE,
        freq_in                   IN interv_icnp_ea.freq%TYPE DEFAULT NULL,
        freq_nin                  IN BOOLEAN := TRUE,
        notes_in                  IN interv_icnp_ea.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        notes_close_in            IN interv_icnp_ea.notes_close%TYPE DEFAULT NULL,
        notes_close_nin           IN BOOLEAN := TRUE,
        dt_begin_in               IN interv_icnp_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin              IN BOOLEAN := TRUE,
        flg_duration_unit_in      IN interv_icnp_ea.flg_duration_unit%TYPE DEFAULT NULL,
        flg_duration_unit_nin     IN BOOLEAN := TRUE,
        duration_in               IN interv_icnp_ea.duration%TYPE DEFAULT NULL,
        duration_nin              IN BOOLEAN := TRUE,
        num_take_in               IN interv_icnp_ea.num_take%TYPE DEFAULT NULL,
        num_take_nin              IN BOOLEAN := TRUE,
        flg_interval_unit_in      IN interv_icnp_ea.flg_interval_unit%TYPE DEFAULT NULL,
        flg_interval_unit_nin     IN BOOLEAN := TRUE,
        interval_in               IN interv_icnp_ea.interval%TYPE DEFAULT NULL,
        interval_nin              IN BOOLEAN := TRUE,
        dt_take_ea_in             IN interv_icnp_ea.dt_take_ea%TYPE DEFAULT NULL,
        dt_take_ea_nin            IN BOOLEAN := TRUE,
        dt_dg_last_update_in      IN interv_icnp_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin     IN BOOLEAN := TRUE,
        create_user_in            IN interv_icnp_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN interv_icnp_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN interv_icnp_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN interv_icnp_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN interv_icnp_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN interv_icnp_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_order_recurr_plan_in   IN interv_icnp_ea.id_order_recurr_plan%TYPE DEFAULT NULL,
        id_order_recurr_plan_nin  IN BOOLEAN := TRUE,
        flg_prn_in                IN interv_icnp_ea.flg_prn%TYPE DEFAULT NULL,
        flg_prn_nin               IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_composition_interv_in  => id_composition_interv_in,
            id_composition_interv_nin => id_composition_interv_nin,
            id_icnp_epis_diag_in      => id_icnp_epis_diag_in,
            id_icnp_epis_diag_nin     => id_icnp_epis_diag_nin,
            id_composition_diag_in    => id_composition_diag_in,
            id_composition_diag_nin   => id_composition_diag_nin,
            flg_time_in               => flg_time_in,
            flg_time_nin              => flg_time_nin,
            status_str_in             => status_str_in,
            status_str_nin            => status_str_nin,
            status_msg_in             => status_msg_in,
            status_msg_nin            => status_msg_nin,
            status_icon_in            => status_icon_in,
            status_icon_nin           => status_icon_nin,
            status_flg_in             => status_flg_in,
            status_flg_nin            => status_flg_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            flg_type_in               => flg_type_in,
            flg_type_nin              => flg_type_nin,
            dt_next_in                => dt_next_in,
            dt_next_nin               => dt_next_nin,
            dt_plan_in                => dt_plan_in,
            dt_plan_nin               => dt_plan_nin,
            id_vs_in                  => id_vs_in,
            id_vs_nin                 => id_vs_nin,
            id_prof_close_in          => id_prof_close_in,
            id_prof_close_nin         => id_prof_close_nin,
            dt_close_in               => dt_close_in,
            dt_close_nin              => dt_close_nin,
            dt_icnp_epis_interv_in    => dt_icnp_epis_interv_in,
            dt_icnp_epis_interv_nin   => dt_icnp_epis_interv_nin,
            id_prof_in                => id_prof_in,
            id_prof_nin               => id_prof_nin,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_origin_nin     => id_episode_origin_nin,
            id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            flg_status_plan_in        => flg_status_plan_in,
            flg_status_plan_nin       => flg_status_plan_nin,
            id_prof_take_in           => id_prof_take_in,
            id_prof_take_nin          => id_prof_take_nin,
            freq_in                   => freq_in,
            freq_nin                  => freq_nin,
            notes_in                  => notes_in,
            notes_nin                 => notes_nin,
            notes_close_in            => notes_close_in,
            notes_close_nin           => notes_close_nin,
            dt_begin_in               => dt_begin_in,
            dt_begin_nin              => dt_begin_nin,
            flg_duration_unit_in      => flg_duration_unit_in,
            flg_duration_unit_nin     => flg_duration_unit_nin,
            duration_in               => duration_in,
            duration_nin              => duration_nin,
            num_take_in               => num_take_in,
            num_take_nin              => num_take_nin,
            flg_interval_unit_in      => flg_interval_unit_in,
            flg_interval_unit_nin     => flg_interval_unit_nin,
            interval_in               => interval_in,
            interval_nin              => interval_nin,
            dt_take_ea_in             => dt_take_ea_in,
            dt_take_ea_nin            => dt_take_ea_nin,
            dt_dg_last_update_in      => dt_dg_last_update_in,
            dt_dg_last_update_nin     => dt_dg_last_update_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            id_order_recurr_plan_in   => id_order_recurr_plan_in,
            id_order_recurr_plan_nin  => id_order_recurr_plan_nin,
            flg_prn_in                => flg_prn_in,
            flg_prn_nin               => flg_prn_nin,
            where_in                  => where_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN interv_icnp_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_icnp_epis_interv_in   => rec_in.id_icnp_epis_interv,
            id_composition_interv_in => rec_in.id_composition_interv,
            id_icnp_epis_diag_in     => rec_in.id_icnp_epis_diag,
            id_composition_diag_in   => rec_in.id_composition_diag,
            flg_time_in              => rec_in.flg_time,
            status_str_in            => rec_in.status_str,
            status_msg_in            => rec_in.status_msg,
            status_icon_in           => rec_in.status_icon,
            status_flg_in            => rec_in.status_flg,
            flg_status_in            => rec_in.flg_status,
            flg_type_in              => rec_in.flg_type,
            dt_next_in               => rec_in.dt_next,
            dt_plan_in               => rec_in.dt_plan,
            id_vs_in                 => rec_in.id_vs,
            id_prof_close_in         => rec_in.id_prof_close,
            dt_close_in              => rec_in.dt_close,
            dt_icnp_epis_interv_in   => rec_in.dt_icnp_epis_interv,
            id_prof_in               => rec_in.id_prof,
            id_episode_origin_in     => rec_in.id_episode_origin,
            id_episode_in            => rec_in.id_episode,
            id_patient_in            => rec_in.id_patient,
            flg_status_plan_in       => rec_in.flg_status_plan,
            id_prof_take_in          => rec_in.id_prof_take,
            freq_in                  => rec_in.freq,
            notes_in                 => rec_in.notes,
            notes_close_in           => rec_in.notes_close,
            dt_begin_in              => rec_in.dt_begin,
            flg_duration_unit_in     => rec_in.flg_duration_unit,
            duration_in              => rec_in.duration,
            num_take_in              => rec_in.num_take,
            flg_interval_unit_in     => rec_in.flg_interval_unit,
            interval_in              => rec_in.interval,
            dt_take_ea_in            => rec_in.dt_take_ea,
            dt_dg_last_update_in     => rec_in.dt_dg_last_update,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            id_order_recurr_plan_in  => rec_in.id_order_recurr_plan,
            flg_prn_in               => rec_in.flg_prn
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN interv_icnp_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_icnp_epis_interv_in   => rec_in.id_icnp_epis_interv,
            id_composition_interv_in => rec_in.id_composition_interv,
            id_icnp_epis_diag_in     => rec_in.id_icnp_epis_diag,
            id_composition_diag_in   => rec_in.id_composition_diag,
            flg_time_in              => rec_in.flg_time,
            status_str_in            => rec_in.status_str,
            status_msg_in            => rec_in.status_msg,
            status_icon_in           => rec_in.status_icon,
            status_flg_in            => rec_in.status_flg,
            flg_status_in            => rec_in.flg_status,
            flg_type_in              => rec_in.flg_type,
            dt_next_in               => rec_in.dt_next,
            dt_plan_in               => rec_in.dt_plan,
            id_vs_in                 => rec_in.id_vs,
            id_prof_close_in         => rec_in.id_prof_close,
            dt_close_in              => rec_in.dt_close,
            dt_icnp_epis_interv_in   => rec_in.dt_icnp_epis_interv,
            id_prof_in               => rec_in.id_prof,
            id_episode_origin_in     => rec_in.id_episode_origin,
            id_episode_in            => rec_in.id_episode,
            id_patient_in            => rec_in.id_patient,
            flg_status_plan_in       => rec_in.flg_status_plan,
            id_prof_take_in          => rec_in.id_prof_take,
            freq_in                  => rec_in.freq,
            notes_in                 => rec_in.notes,
            notes_close_in           => rec_in.notes_close,
            dt_begin_in              => rec_in.dt_begin,
            flg_duration_unit_in     => rec_in.flg_duration_unit,
            duration_in              => rec_in.duration,
            num_take_in              => rec_in.num_take,
            flg_interval_unit_in     => rec_in.flg_interval_unit,
            interval_in              => rec_in.interval,
            dt_take_ea_in            => rec_in.dt_take_ea,
            dt_dg_last_update_in     => rec_in.dt_dg_last_update,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            id_order_recurr_plan_in  => rec_in.id_order_recurr_plan,
            flg_prn_in               => rec_in.flg_prn
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_icnp_epis_interv_in   IN interv_icnp_ea.id_icnp_epis_interv%TYPE,
        id_composition_interv_in IN interv_icnp_ea.id_composition_interv%TYPE DEFAULT NULL,
        id_icnp_epis_diag_in     IN interv_icnp_ea.id_icnp_epis_diag%TYPE DEFAULT NULL,
        id_composition_diag_in   IN interv_icnp_ea.id_composition_diag%TYPE DEFAULT NULL,
        flg_time_in              IN interv_icnp_ea.flg_time%TYPE DEFAULT NULL,
        status_str_in            IN interv_icnp_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in            IN interv_icnp_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in           IN interv_icnp_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in            IN interv_icnp_ea.status_flg%TYPE DEFAULT NULL,
        flg_status_in            IN interv_icnp_ea.flg_status%TYPE DEFAULT NULL,
        flg_type_in              IN interv_icnp_ea.flg_type%TYPE DEFAULT NULL,
        dt_next_in               IN interv_icnp_ea.dt_next%TYPE DEFAULT NULL,
        dt_plan_in               IN interv_icnp_ea.dt_plan%TYPE DEFAULT NULL,
        id_vs_in                 IN interv_icnp_ea.id_vs%TYPE DEFAULT NULL,
        id_prof_close_in         IN interv_icnp_ea.id_prof_close%TYPE DEFAULT NULL,
        dt_close_in              IN interv_icnp_ea.dt_close%TYPE DEFAULT NULL,
        dt_icnp_epis_interv_in   IN interv_icnp_ea.dt_icnp_epis_interv%TYPE DEFAULT NULL,
        id_prof_in               IN interv_icnp_ea.id_prof%TYPE DEFAULT NULL,
        id_episode_origin_in     IN interv_icnp_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_in            IN interv_icnp_ea.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN interv_icnp_ea.id_patient%TYPE DEFAULT NULL,
        flg_status_plan_in       IN interv_icnp_ea.flg_status_plan%TYPE DEFAULT NULL,
        id_prof_take_in          IN interv_icnp_ea.id_prof_take%TYPE DEFAULT NULL,
        freq_in                  IN interv_icnp_ea.freq%TYPE DEFAULT NULL,
        notes_in                 IN interv_icnp_ea.notes%TYPE DEFAULT NULL,
        notes_close_in           IN interv_icnp_ea.notes_close%TYPE DEFAULT NULL,
        dt_begin_in              IN interv_icnp_ea.dt_begin%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN interv_icnp_ea.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN interv_icnp_ea.duration%TYPE DEFAULT NULL,
        num_take_in              IN interv_icnp_ea.num_take%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN interv_icnp_ea.flg_interval_unit%TYPE DEFAULT NULL,
        interval_in              IN interv_icnp_ea.interval%TYPE DEFAULT NULL,
        dt_take_ea_in            IN interv_icnp_ea.dt_take_ea%TYPE DEFAULT NULL,
        dt_dg_last_update_in     IN interv_icnp_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        create_user_in           IN interv_icnp_ea.create_user%TYPE DEFAULT NULL,
        create_time_in           IN interv_icnp_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN interv_icnp_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN interv_icnp_ea.update_user%TYPE DEFAULT NULL,
        update_time_in           IN interv_icnp_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN interv_icnp_ea.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN interv_icnp_ea.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN interv_icnp_ea.flg_prn%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        upd(id_icnp_epis_interv_in   => id_icnp_epis_interv_in,
            id_composition_interv_in => id_composition_interv_in,
            id_icnp_epis_diag_in     => id_icnp_epis_diag_in,
            id_composition_diag_in   => id_composition_diag_in,
            flg_time_in              => flg_time_in,
            status_str_in            => status_str_in,
            status_msg_in            => status_msg_in,
            status_icon_in           => status_icon_in,
            status_flg_in            => status_flg_in,
            flg_status_in            => flg_status_in,
            flg_type_in              => flg_type_in,
            dt_next_in               => dt_next_in,
            dt_plan_in               => dt_plan_in,
            id_vs_in                 => id_vs_in,
            id_prof_close_in         => id_prof_close_in,
            dt_close_in              => dt_close_in,
            dt_icnp_epis_interv_in   => dt_icnp_epis_interv_in,
            id_prof_in               => id_prof_in,
            id_episode_origin_in     => id_episode_origin_in,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            flg_status_plan_in       => flg_status_plan_in,
            id_prof_take_in          => id_prof_take_in,
            freq_in                  => freq_in,
            notes_in                 => notes_in,
            notes_close_in           => notes_close_in,
            dt_begin_in              => dt_begin_in,
            flg_duration_unit_in     => flg_duration_unit_in,
            duration_in              => duration_in,
            num_take_in              => num_take_in,
            flg_interval_unit_in     => flg_interval_unit_in,
            interval_in              => interval_in,
            dt_take_ea_in            => dt_take_ea_in,
            dt_dg_last_update_in     => dt_dg_last_update_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_order_recurr_plan_in  => id_order_recurr_plan_in,
            flg_prn_in               => flg_prn_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_icnp_epis_interv_in   => id_icnp_epis_interv_in,
                id_composition_interv_in => id_composition_interv_in,
                id_icnp_epis_diag_in     => id_icnp_epis_diag_in,
                id_composition_diag_in   => id_composition_diag_in,
                flg_time_in              => flg_time_in,
                status_str_in            => status_str_in,
                status_msg_in            => status_msg_in,
                status_icon_in           => status_icon_in,
                status_flg_in            => status_flg_in,
                flg_status_in            => flg_status_in,
                flg_type_in              => flg_type_in,
                dt_next_in               => dt_next_in,
                dt_plan_in               => dt_plan_in,
                id_vs_in                 => id_vs_in,
                id_prof_close_in         => id_prof_close_in,
                dt_close_in              => dt_close_in,
                dt_icnp_epis_interv_in   => dt_icnp_epis_interv_in,
                id_prof_in               => id_prof_in,
                id_episode_origin_in     => id_episode_origin_in,
                id_episode_in            => id_episode_in,
                id_patient_in            => id_patient_in,
                flg_status_plan_in       => flg_status_plan_in,
                id_prof_take_in          => id_prof_take_in,
                freq_in                  => freq_in,
                notes_in                 => notes_in,
                notes_close_in           => notes_close_in,
                dt_begin_in              => dt_begin_in,
                flg_duration_unit_in     => flg_duration_unit_in,
                duration_in              => duration_in,
                num_take_in              => num_take_in,
                flg_interval_unit_in     => flg_interval_unit_in,
                interval_in              => interval_in,
                dt_take_ea_in            => dt_take_ea_in,
                dt_dg_last_update_in     => dt_dg_last_update_in,
                create_user_in           => create_user_in,
                create_time_in           => create_time_in,
                create_institution_in    => create_institution_in,
                update_user_in           => update_user_in,
                update_time_in           => update_time_in,
                update_institution_in    => update_institution_in,
                id_order_recurr_plan_in  => id_order_recurr_plan_in,
                flg_prn_in               => flg_prn_in,
                handle_error_in          => handle_error_in,
                rows_out                 => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_icnp_epis_interv_in   IN interv_icnp_ea.id_icnp_epis_interv%TYPE,
        id_composition_interv_in IN interv_icnp_ea.id_composition_interv%TYPE DEFAULT NULL,
        id_icnp_epis_diag_in     IN interv_icnp_ea.id_icnp_epis_diag%TYPE DEFAULT NULL,
        id_composition_diag_in   IN interv_icnp_ea.id_composition_diag%TYPE DEFAULT NULL,
        flg_time_in              IN interv_icnp_ea.flg_time%TYPE DEFAULT NULL,
        status_str_in            IN interv_icnp_ea.status_str%TYPE DEFAULT NULL,
        status_msg_in            IN interv_icnp_ea.status_msg%TYPE DEFAULT NULL,
        status_icon_in           IN interv_icnp_ea.status_icon%TYPE DEFAULT NULL,
        status_flg_in            IN interv_icnp_ea.status_flg%TYPE DEFAULT NULL,
        flg_status_in            IN interv_icnp_ea.flg_status%TYPE DEFAULT NULL,
        flg_type_in              IN interv_icnp_ea.flg_type%TYPE DEFAULT NULL,
        dt_next_in               IN interv_icnp_ea.dt_next%TYPE DEFAULT NULL,
        dt_plan_in               IN interv_icnp_ea.dt_plan%TYPE DEFAULT NULL,
        id_vs_in                 IN interv_icnp_ea.id_vs%TYPE DEFAULT NULL,
        id_prof_close_in         IN interv_icnp_ea.id_prof_close%TYPE DEFAULT NULL,
        dt_close_in              IN interv_icnp_ea.dt_close%TYPE DEFAULT NULL,
        dt_icnp_epis_interv_in   IN interv_icnp_ea.dt_icnp_epis_interv%TYPE DEFAULT NULL,
        id_prof_in               IN interv_icnp_ea.id_prof%TYPE DEFAULT NULL,
        id_episode_origin_in     IN interv_icnp_ea.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_in            IN interv_icnp_ea.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN interv_icnp_ea.id_patient%TYPE DEFAULT NULL,
        flg_status_plan_in       IN interv_icnp_ea.flg_status_plan%TYPE DEFAULT NULL,
        id_prof_take_in          IN interv_icnp_ea.id_prof_take%TYPE DEFAULT NULL,
        freq_in                  IN interv_icnp_ea.freq%TYPE DEFAULT NULL,
        notes_in                 IN interv_icnp_ea.notes%TYPE DEFAULT NULL,
        notes_close_in           IN interv_icnp_ea.notes_close%TYPE DEFAULT NULL,
        dt_begin_in              IN interv_icnp_ea.dt_begin%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN interv_icnp_ea.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN interv_icnp_ea.duration%TYPE DEFAULT NULL,
        num_take_in              IN interv_icnp_ea.num_take%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN interv_icnp_ea.flg_interval_unit%TYPE DEFAULT NULL,
        interval_in              IN interv_icnp_ea.interval%TYPE DEFAULT NULL,
        dt_take_ea_in            IN interv_icnp_ea.dt_take_ea%TYPE DEFAULT NULL,
        dt_dg_last_update_in     IN interv_icnp_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        create_user_in           IN interv_icnp_ea.create_user%TYPE DEFAULT NULL,
        create_time_in           IN interv_icnp_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN interv_icnp_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN interv_icnp_ea.update_user%TYPE DEFAULT NULL,
        update_time_in           IN interv_icnp_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN interv_icnp_ea.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN interv_icnp_ea.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN interv_icnp_ea.flg_prn%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_icnp_epis_interv_in,
                id_composition_interv_in,
                id_icnp_epis_diag_in,
                id_composition_diag_in,
                flg_time_in,
                status_str_in,
                status_msg_in,
                status_icon_in,
                status_flg_in,
                flg_status_in,
                flg_type_in,
                dt_next_in,
                dt_plan_in,
                id_vs_in,
                id_prof_close_in,
                dt_close_in,
                dt_icnp_epis_interv_in,
                id_prof_in,
                id_episode_origin_in,
                id_episode_in,
                id_patient_in,
                flg_status_plan_in,
                id_prof_take_in,
                freq_in,
                notes_in,
                notes_close_in,
                dt_begin_in,
                flg_duration_unit_in,
                duration_in,
                num_take_in,
                flg_interval_unit_in,
                interval_in,
                dt_take_ea_in,
                dt_dg_last_update_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_order_recurr_plan_in,
                flg_prn_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN interv_icnp_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_icnp_epis_interv   id_icnp_epis_interv_cc;
        l_id_composition_interv id_composition_interv_cc;
        l_id_icnp_epis_diag     id_icnp_epis_diag_cc;
        l_id_composition_diag   id_composition_diag_cc;
        l_flg_time              flg_time_cc;
        l_status_str            status_str_cc;
        l_status_msg            status_msg_cc;
        l_status_icon           status_icon_cc;
        l_status_flg            status_flg_cc;
        l_flg_status            flg_status_cc;
        l_flg_type              flg_type_cc;
        l_dt_next               dt_next_cc;
        l_dt_plan               dt_plan_cc;
        l_id_vs                 id_vs_cc;
        l_id_prof_close         id_prof_close_cc;
        l_dt_close              dt_close_cc;
        l_dt_icnp_epis_interv   dt_icnp_epis_interv_cc;
        l_id_prof               id_prof_cc;
        l_id_episode_origin     id_episode_origin_cc;
        l_id_episode            id_episode_cc;
        l_id_patient            id_patient_cc;
        l_flg_status_plan       flg_status_plan_cc;
        l_id_prof_take          id_prof_take_cc;
        l_freq                  freq_cc;
        l_notes                 notes_cc;
        l_notes_close           notes_close_cc;
        l_dt_begin              dt_begin_cc;
        l_flg_duration_unit     flg_duration_unit_cc;
        l_duration              duration_cc;
        l_num_take              num_take_cc;
        l_flg_interval_unit     flg_interval_unit_cc;
        l_interval              interval_cc;
        l_dt_take_ea            dt_take_ea_cc;
        l_dt_dg_last_update     dt_dg_last_update_cc;
        l_create_user           create_user_cc;
        l_create_time           create_time_cc;
        l_create_institution    create_institution_cc;
        l_update_user           update_user_cc;
        l_update_time           update_time_cc;
        l_update_institution    update_institution_cc;
        l_id_order_recurr_plan  id_order_recurr_plan_cc;
        l_flg_prn               flg_prn_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_icnp_epis_interv(i) := col_in(i).id_icnp_epis_interv;
            l_id_composition_interv(i) := col_in(i).id_composition_interv;
            l_id_icnp_epis_diag(i) := col_in(i).id_icnp_epis_diag;
            l_id_composition_diag(i) := col_in(i).id_composition_diag;
            l_flg_time(i) := col_in(i).flg_time;
            l_status_str(i) := col_in(i).status_str;
            l_status_msg(i) := col_in(i).status_msg;
            l_status_icon(i) := col_in(i).status_icon;
            l_status_flg(i) := col_in(i).status_flg;
            l_flg_status(i) := col_in(i).flg_status;
            l_flg_type(i) := col_in(i).flg_type;
            l_dt_next(i) := col_in(i).dt_next;
            l_dt_plan(i) := col_in(i).dt_plan;
            l_id_vs(i) := col_in(i).id_vs;
            l_id_prof_close(i) := col_in(i).id_prof_close;
            l_dt_close(i) := col_in(i).dt_close;
            l_dt_icnp_epis_interv(i) := col_in(i).dt_icnp_epis_interv;
            l_id_prof(i) := col_in(i).id_prof;
            l_id_episode_origin(i) := col_in(i).id_episode_origin;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_patient(i) := col_in(i).id_patient;
            l_flg_status_plan(i) := col_in(i).flg_status_plan;
            l_id_prof_take(i) := col_in(i).id_prof_take;
            l_freq(i) := col_in(i).freq;
            l_notes(i) := col_in(i).notes;
            l_notes_close(i) := col_in(i).notes_close;
            l_dt_begin(i) := col_in(i).dt_begin;
            l_flg_duration_unit(i) := col_in(i).flg_duration_unit;
            l_duration(i) := col_in(i).duration;
            l_num_take(i) := col_in(i).num_take;
            l_flg_interval_unit(i) := col_in(i).flg_interval_unit;
            l_interval(i) := col_in(i).interval;
            l_dt_take_ea(i) := col_in(i).dt_take_ea;
            l_dt_dg_last_update(i) := col_in(i).dt_dg_last_update;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_order_recurr_plan(i) := col_in(i).id_order_recurr_plan;
            l_flg_prn(i) := col_in(i).flg_prn;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE interv_icnp_ea
                   SET id_composition_interv = nvl(l_id_composition_interv(i), id_composition_interv),
                       id_icnp_epis_diag     = nvl(l_id_icnp_epis_diag(i), id_icnp_epis_diag),
                       id_composition_diag   = nvl(l_id_composition_diag(i), id_composition_diag),
                       flg_time              = nvl(l_flg_time(i), flg_time),
                       status_str            = nvl(l_status_str(i), status_str),
                       status_msg            = nvl(l_status_msg(i), status_msg),
                       status_icon           = nvl(l_status_icon(i), status_icon),
                       status_flg            = nvl(l_status_flg(i), status_flg),
                       flg_status            = nvl(l_flg_status(i), flg_status),
                       flg_type              = nvl(l_flg_type(i), flg_type),
                       dt_next               = nvl(l_dt_next(i), dt_next),
                       dt_plan               = nvl(l_dt_plan(i), dt_plan),
                       id_vs                 = nvl(l_id_vs(i), id_vs),
                       id_prof_close         = nvl(l_id_prof_close(i), id_prof_close),
                       dt_close              = nvl(l_dt_close(i), dt_close),
                       dt_icnp_epis_interv   = nvl(l_dt_icnp_epis_interv(i), dt_icnp_epis_interv),
                       id_prof               = nvl(l_id_prof(i), id_prof),
                       id_episode_origin     = nvl(l_id_episode_origin(i), id_episode_origin),
                       id_episode            = nvl(l_id_episode(i), id_episode),
                       id_patient            = nvl(l_id_patient(i), id_patient),
                       flg_status_plan       = nvl(l_flg_status_plan(i), flg_status_plan),
                       id_prof_take          = nvl(l_id_prof_take(i), id_prof_take),
                       freq                  = nvl(l_freq(i), freq),
                       notes                 = nvl(l_notes(i), notes),
                       notes_close           = nvl(l_notes_close(i), notes_close),
                       dt_begin              = nvl(l_dt_begin(i), dt_begin),
                       flg_duration_unit     = nvl(l_flg_duration_unit(i), flg_duration_unit),
                       duration              = nvl(l_duration(i), duration),
                       num_take              = nvl(l_num_take(i), num_take),
                       flg_interval_unit     = nvl(l_flg_interval_unit(i), flg_interval_unit),
                       INTERVAL              = nvl(l_interval(i), INTERVAL),
                       dt_take_ea            = nvl(l_dt_take_ea(i), dt_take_ea),
                       dt_dg_last_update     = nvl(l_dt_dg_last_update(i), current_timestamp),
                       create_user           = nvl(l_create_user(i), create_user),
                       create_time           = nvl(l_create_time(i), create_time),
                       create_institution    = nvl(l_create_institution(i), create_institution),
                       update_user           = nvl(l_update_user(i), update_user),
                       update_time           = nvl(l_update_time(i), update_time),
                       update_institution    = nvl(l_update_institution(i), update_institution),
                       id_order_recurr_plan  = nvl(l_id_order_recurr_plan(i), id_order_recurr_plan),
                       flg_prn               = nvl(l_flg_prn(i), flg_prn)
                 WHERE id_icnp_epis_interv = l_id_icnp_epis_interv(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE interv_icnp_ea
                   SET id_composition_interv = l_id_composition_interv(i),
                       id_icnp_epis_diag     = l_id_icnp_epis_diag(i),
                       id_composition_diag   = l_id_composition_diag(i),
                       flg_time              = l_flg_time(i),
                       status_str            = l_status_str(i),
                       status_msg            = l_status_msg(i),
                       status_icon           = l_status_icon(i),
                       status_flg            = l_status_flg(i),
                       flg_status            = l_flg_status(i),
                       flg_type              = l_flg_type(i),
                       dt_next               = l_dt_next(i),
                       dt_plan               = l_dt_plan(i),
                       id_vs                 = l_id_vs(i),
                       id_prof_close         = l_id_prof_close(i),
                       dt_close              = l_dt_close(i),
                       dt_icnp_epis_interv   = l_dt_icnp_epis_interv(i),
                       id_prof               = l_id_prof(i),
                       id_episode_origin     = l_id_episode_origin(i),
                       id_episode            = l_id_episode(i),
                       id_patient            = l_id_patient(i),
                       flg_status_plan       = l_flg_status_plan(i),
                       id_prof_take          = l_id_prof_take(i),
                       freq                  = l_freq(i),
                       notes                 = l_notes(i),
                       notes_close           = l_notes_close(i),
                       dt_begin              = l_dt_begin(i),
                       flg_duration_unit     = l_flg_duration_unit(i),
                       duration              = l_duration(i),
                       num_take              = l_num_take(i),
                       flg_interval_unit     = l_flg_interval_unit(i),
                       INTERVAL              = l_interval(i),
                       dt_take_ea            = l_dt_take_ea(i),
                       dt_dg_last_update     = nvl(l_dt_dg_last_update(i), current_timestamp),
                       create_user           = l_create_user(i),
                       create_time           = l_create_time(i),
                       create_institution    = l_create_institution(i),
                       update_user           = l_update_user(i),
                       update_time           = l_update_time(i),
                       update_institution    = l_update_institution(i),
                       id_order_recurr_plan  = l_id_order_recurr_plan(i),
                       flg_prn               = l_flg_prn(i)
                 WHERE id_icnp_epis_interv = l_id_icnp_epis_interv(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN interv_icnp_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE INTERV_ICNP_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE INTERV_ICNP_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE INTERV_ICNP_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE INTERV_ICNP_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_icnp_epis_interv_in IN interv_icnp_ea.id_icnp_epis_interv%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_icnp_ea
         WHERE id_icnp_epis_interv = id_icnp_epis_interv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_icnp_epis_interv_in IN interv_icnp_ea.id_icnp_epis_interv%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_icnp_epis_interv_in => id_icnp_epis_interv_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_ICNP_EPIS_INTERV
    PROCEDURE del_id_icnp_epis_interv
    (
        id_icnp_epis_interv_in IN interv_icnp_ea.id_icnp_epis_interv%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_icnp_ea
         WHERE id_icnp_epis_interv = id_icnp_epis_interv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_icnp_epis_interv;

    -- Delete all rows for primary key column ID_ICNP_EPIS_INTERV
    PROCEDURE del_id_icnp_epis_interv
    (
        id_icnp_epis_interv_in IN interv_icnp_ea.id_icnp_epis_interv%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_icnp_epis_interv(id_icnp_epis_interv_in => id_icnp_epis_interv_in,
                                handle_error_in        => handle_error_in,
                                rows_out               => rows_out);
    END del_id_icnp_epis_interv;

    PROCEDURE del_iia_epe_fk
    (
        id_episode_origin_in IN interv_icnp_ea.id_episode_origin%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_icnp_ea
         WHERE id_episode_origin = del_iia_epe_fk.id_episode_origin_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_iia_epe_fk;

    PROCEDURE del_iia_epe_fk
    (
        id_episode_origin_in IN interv_icnp_ea.id_episode_origin%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_iia_epe_fk(id_episode_origin_in => id_episode_origin_in,
                       handle_error_in      => handle_error_in,
                       rows_out             => rows_out);
    END del_iia_epe_fk;

    PROCEDURE del_iia_epe_fk2
    (
        id_episode_in   IN interv_icnp_ea.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_icnp_ea
         WHERE id_episode = del_iia_epe_fk2.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_iia_epe_fk2;

    PROCEDURE del_iia_epe_fk2
    (
        id_episode_in   IN interv_icnp_ea.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_iia_epe_fk2(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_iia_epe_fk2;

    PROCEDURE del_iia_iei_fk
    (
        id_icnp_epis_diag_in IN interv_icnp_ea.id_icnp_epis_diag%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_icnp_ea
         WHERE id_icnp_epis_diag = del_iia_iei_fk.id_icnp_epis_diag_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_iia_iei_fk;

    PROCEDURE del_iia_iei_fk
    (
        id_icnp_epis_diag_in IN interv_icnp_ea.id_icnp_epis_diag%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_iia_iei_fk(id_icnp_epis_diag_in => id_icnp_epis_diag_in,
                       handle_error_in      => handle_error_in,
                       rows_out             => rows_out);
    END del_iia_iei_fk;

    PROCEDURE del_iia_ien_fk
    (
        id_icnp_epis_interv_in IN interv_icnp_ea.id_icnp_epis_interv%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_icnp_ea
         WHERE id_icnp_epis_interv = del_iia_ien_fk.id_icnp_epis_interv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_iia_ien_fk;

    PROCEDURE del_iia_ien_fk
    (
        id_icnp_epis_interv_in IN interv_icnp_ea.id_icnp_epis_interv%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_iia_ien_fk(id_icnp_epis_interv_in => id_icnp_epis_interv_in,
                       handle_error_in        => handle_error_in,
                       rows_out               => rows_out);
    END del_iia_ien_fk;

    PROCEDURE del_iia_orp_fk
    (
        id_order_recurr_plan_in IN interv_icnp_ea.id_order_recurr_plan%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_icnp_ea
         WHERE id_order_recurr_plan = del_iia_orp_fk.id_order_recurr_plan_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_iia_orp_fk;

    PROCEDURE del_iia_orp_fk
    (
        id_order_recurr_plan_in IN interv_icnp_ea.id_order_recurr_plan%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_iia_orp_fk(id_order_recurr_plan_in => id_order_recurr_plan_in,
                       handle_error_in         => handle_error_in,
                       rows_out                => rows_out);
    END del_iia_orp_fk;

    PROCEDURE del_iia_pat_fk
    (
        id_patient_in   IN interv_icnp_ea.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_icnp_ea
         WHERE id_patient = del_iia_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_iia_pat_fk;

    PROCEDURE del_iia_pat_fk
    (
        id_patient_in   IN interv_icnp_ea.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_iia_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_iia_pat_fk;

    PROCEDURE del_iia_prl_fk
    (
        id_prof_close_in IN interv_icnp_ea.id_prof_close%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_icnp_ea
         WHERE id_prof_close = del_iia_prl_fk.id_prof_close_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_iia_prl_fk;

    PROCEDURE del_iia_prl_fk
    (
        id_prof_close_in IN interv_icnp_ea.id_prof_close%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_iia_prl_fk(id_prof_close_in => id_prof_close_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_iia_prl_fk;

    PROCEDURE del_iia_prl_fk2
    (
        id_prof_in      IN interv_icnp_ea.id_prof%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_icnp_ea
         WHERE id_prof = del_iia_prl_fk2.id_prof_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_iia_prl_fk2;

    PROCEDURE del_iia_prl_fk2
    (
        id_prof_in      IN interv_icnp_ea.id_prof%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_iia_prl_fk2(id_prof_in => id_prof_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_iia_prl_fk2;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM INTERV_ICNP_EA';
        ELSE
            RETURN 'DELETE FROM INTERV_ICNP_EA WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_ICNP_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_ICNP_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(interv_icnp_ea_inout IN OUT interv_icnp_ea%ROWTYPE) IS
    BEGIN
        interv_icnp_ea_inout.id_icnp_epis_interv   := NULL;
        interv_icnp_ea_inout.id_composition_interv := NULL;
        interv_icnp_ea_inout.id_icnp_epis_diag     := NULL;
        interv_icnp_ea_inout.id_composition_diag   := NULL;
        interv_icnp_ea_inout.flg_time              := NULL;
        interv_icnp_ea_inout.status_str            := NULL;
        interv_icnp_ea_inout.status_msg            := NULL;
        interv_icnp_ea_inout.status_icon           := NULL;
        interv_icnp_ea_inout.status_flg            := NULL;
        interv_icnp_ea_inout.flg_status            := NULL;
        interv_icnp_ea_inout.flg_type              := NULL;
        interv_icnp_ea_inout.dt_next               := NULL;
        interv_icnp_ea_inout.dt_plan               := NULL;
        interv_icnp_ea_inout.id_vs                 := NULL;
        interv_icnp_ea_inout.id_prof_close         := NULL;
        interv_icnp_ea_inout.dt_close              := NULL;
        interv_icnp_ea_inout.dt_icnp_epis_interv   := NULL;
        interv_icnp_ea_inout.id_prof               := NULL;
        interv_icnp_ea_inout.id_episode_origin     := NULL;
        interv_icnp_ea_inout.id_episode            := NULL;
        interv_icnp_ea_inout.id_patient            := NULL;
        interv_icnp_ea_inout.flg_status_plan       := NULL;
        interv_icnp_ea_inout.id_prof_take          := NULL;
        interv_icnp_ea_inout.freq                  := NULL;
        interv_icnp_ea_inout.notes                 := NULL;
        interv_icnp_ea_inout.notes_close           := NULL;
        interv_icnp_ea_inout.dt_begin              := NULL;
        interv_icnp_ea_inout.flg_duration_unit     := NULL;
        interv_icnp_ea_inout.duration              := NULL;
        interv_icnp_ea_inout.num_take              := NULL;
        interv_icnp_ea_inout.flg_interval_unit     := NULL;
        interv_icnp_ea_inout.interval              := NULL;
        interv_icnp_ea_inout.dt_take_ea            := NULL;
        interv_icnp_ea_inout.dt_dg_last_update     := current_timestamp;
        interv_icnp_ea_inout.create_user           := NULL;
        interv_icnp_ea_inout.create_time           := NULL;
        interv_icnp_ea_inout.create_institution    := NULL;
        interv_icnp_ea_inout.update_user           := NULL;
        interv_icnp_ea_inout.update_time           := NULL;
        interv_icnp_ea_inout.update_institution    := NULL;
        interv_icnp_ea_inout.id_order_recurr_plan  := NULL;
        interv_icnp_ea_inout.flg_prn               := NULL;
    END initrec;

    FUNCTION initrec RETURN interv_icnp_ea%ROWTYPE IS
        l_interv_icnp_ea interv_icnp_ea%ROWTYPE;
    BEGIN
        l_interv_icnp_ea.dt_dg_last_update := current_timestamp;
        RETURN l_interv_icnp_ea;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN interv_icnp_ea_tc IS
        data interv_icnp_ea_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM interv_icnp_ea
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN interv_icnp_ea_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data interv_icnp_ea_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_interv_icnp_ea;
/
