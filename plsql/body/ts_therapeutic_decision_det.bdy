/*-- Last Change Revision: $Rev: 2028404 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:34 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_therapeutic_decision_det
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Junho 25, 2009 11:18:37
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_therapeutic_dec_det_in  IN therapeutic_decision_det.id_therapeutic_dec_det%TYPE,
        id_therapeutic_decision_in IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_professional_in         IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        flg_status_in              IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        dt_creation_in             IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        flg_presence_in            IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        dt_presence_in             IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        id_prof_presence_in        IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        flg_opinion_in             IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        dt_opinion_in              IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        flg_leader_in              IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        create_user_in             IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_time_in             IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_time_in             IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO therapeutic_decision_det
            (id_therapeutic_dec_det,
             id_therapeutic_decision,
             id_professional,
             flg_status,
             dt_creation,
             flg_presence,
             dt_presence,
             id_prof_presence,
             flg_opinion,
             dt_opinion,
             flg_leader,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_therapeutic_dec_det_in,
             id_therapeutic_decision_in,
             id_professional_in,
             flg_status_in,
             dt_creation_in,
             flg_presence_in,
             dt_presence_in,
             id_prof_presence_in,
             flg_opinion_in,
             dt_opinion_in,
             flg_leader_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'THERAPEUTIC_DECISION_DET');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    IF l_name = 'THDD_THD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_THERAPEUTIC_DECISION',
                                                        value_in           => id_therapeutic_decision_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_therapeutic_dec_det_in  IN therapeutic_decision_det.id_therapeutic_dec_det%TYPE,
        id_therapeutic_decision_in IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_professional_in         IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        flg_status_in              IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        dt_creation_in             IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        flg_presence_in            IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        dt_presence_in             IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        id_prof_presence_in        IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        flg_opinion_in             IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        dt_opinion_in              IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        flg_leader_in              IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        create_user_in             IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_time_in             IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_time_in             IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_therapeutic_dec_det_in  => id_therapeutic_dec_det_in,
            id_therapeutic_decision_in => id_therapeutic_decision_in,
            id_professional_in         => id_professional_in,
            flg_status_in              => flg_status_in,
            dt_creation_in             => dt_creation_in,
            flg_presence_in            => flg_presence_in,
            dt_presence_in             => dt_presence_in,
            id_prof_presence_in        => id_prof_presence_in,
            flg_opinion_in             => flg_opinion_in,
            dt_opinion_in              => dt_opinion_in,
            flg_leader_in              => flg_leader_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN therapeutic_decision_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec therapeutic_decision_det%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_therapeutic_dec_det := next_key(sequence_in);
        END IF;
        ins(id_therapeutic_dec_det_in  => l_rec.id_therapeutic_dec_det,
            id_therapeutic_decision_in => l_rec.id_therapeutic_decision,
            id_professional_in         => l_rec.id_professional,
            flg_status_in              => l_rec.flg_status,
            dt_creation_in             => l_rec.dt_creation,
            flg_presence_in            => l_rec.flg_presence,
            dt_presence_in             => l_rec.dt_presence,
            id_prof_presence_in        => l_rec.id_prof_presence,
            flg_opinion_in             => l_rec.flg_opinion,
            dt_opinion_in              => l_rec.dt_opinion,
            flg_leader_in              => l_rec.flg_leader,
            create_user_in             => l_rec.create_user,
            create_time_in             => l_rec.create_time,
            create_institution_in      => l_rec.create_institution,
            update_user_in             => l_rec.update_user,
            update_time_in             => l_rec.update_time,
            update_institution_in      => l_rec.update_institution,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN therapeutic_decision_det%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN therapeutic_decision_det.id_therapeutic_dec_det%TYPE
    
     IS
        retval therapeutic_decision_det.id_therapeutic_dec_det%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_therapeutic_decision_det.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_THERAPEUTIC_DECISION_DET'));
    END next_key;

    PROCEDURE ins
    (
        id_therapeutic_decision_in IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_professional_in         IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        flg_status_in              IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        dt_creation_in             IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        flg_presence_in            IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        dt_presence_in             IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        id_prof_presence_in        IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        flg_opinion_in             IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        dt_opinion_in              IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        flg_leader_in              IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        create_user_in             IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_time_in             IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_time_in             IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        id_therapeutic_dec_det_out IN OUT therapeutic_decision_det.id_therapeutic_dec_det%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky therapeutic_decision_det.id_therapeutic_dec_det%TYPE := next_key;
    BEGIN
        ins(id_therapeutic_dec_det_in  => l_pky,
            id_therapeutic_decision_in => id_therapeutic_decision_in,
            id_professional_in         => id_professional_in,
            flg_status_in              => flg_status_in,
            dt_creation_in             => dt_creation_in,
            flg_presence_in            => flg_presence_in,
            dt_presence_in             => dt_presence_in,
            id_prof_presence_in        => id_prof_presence_in,
            flg_opinion_in             => flg_opinion_in,
            dt_opinion_in              => dt_opinion_in,
            flg_leader_in              => flg_leader_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        id_therapeutic_dec_det_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_therapeutic_decision_in IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_professional_in         IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        flg_status_in              IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        dt_creation_in             IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        flg_presence_in            IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        dt_presence_in             IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        id_prof_presence_in        IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        flg_opinion_in             IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        dt_opinion_in              IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        flg_leader_in              IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        create_user_in             IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_time_in             IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_time_in             IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        id_therapeutic_dec_det_out IN OUT therapeutic_decision_det.id_therapeutic_dec_det%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_therapeutic_decision_in => id_therapeutic_decision_in,
            id_professional_in         => id_professional_in,
            flg_status_in              => flg_status_in,
            dt_creation_in             => dt_creation_in,
            flg_presence_in            => flg_presence_in,
            dt_presence_in             => dt_presence_in,
            id_prof_presence_in        => id_prof_presence_in,
            flg_opinion_in             => flg_opinion_in,
            dt_opinion_in              => dt_opinion_in,
            flg_leader_in              => flg_leader_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_therapeutic_dec_det_out => id_therapeutic_dec_det_out,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    FUNCTION ins
    (
        id_therapeutic_decision_in IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_professional_in         IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        flg_status_in              IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        dt_creation_in             IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        flg_presence_in            IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        dt_presence_in             IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        id_prof_presence_in        IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        flg_opinion_in             IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        dt_opinion_in              IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        flg_leader_in              IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        create_user_in             IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_time_in             IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_time_in             IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) RETURN therapeutic_decision_det.id_therapeutic_dec_det%TYPE IS
        l_pky therapeutic_decision_det.id_therapeutic_dec_det%TYPE := next_key;
    BEGIN
        ins(id_therapeutic_dec_det_in  => l_pky,
            id_therapeutic_decision_in => id_therapeutic_decision_in,
            id_professional_in         => id_professional_in,
            flg_status_in              => flg_status_in,
            dt_creation_in             => dt_creation_in,
            flg_presence_in            => flg_presence_in,
            dt_presence_in             => dt_presence_in,
            id_prof_presence_in        => id_prof_presence_in,
            flg_opinion_in             => flg_opinion_in,
            dt_opinion_in              => dt_opinion_in,
            flg_leader_in              => flg_leader_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_therapeutic_decision_in IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_professional_in         IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        flg_status_in              IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        dt_creation_in             IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        flg_presence_in            IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        dt_presence_in             IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        id_prof_presence_in        IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        flg_opinion_in             IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        dt_opinion_in              IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        flg_leader_in              IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        create_user_in             IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_time_in             IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_time_in             IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) RETURN therapeutic_decision_det.id_therapeutic_dec_det%TYPE IS
        l_pky    therapeutic_decision_det.id_therapeutic_dec_det%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_therapeutic_dec_det_in  => l_pky,
            id_therapeutic_decision_in => id_therapeutic_decision_in,
            id_professional_in         => id_professional_in,
            flg_status_in              => flg_status_in,
            dt_creation_in             => dt_creation_in,
            flg_presence_in            => flg_presence_in,
            dt_presence_in             => dt_presence_in,
            id_prof_presence_in        => id_prof_presence_in,
            flg_opinion_in             => flg_opinion_in,
            dt_opinion_in              => dt_opinion_in,
            flg_leader_in              => flg_leader_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_therapeutic_decision_in IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_professional_in         IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        flg_status_in              IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        dt_creation_in             IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        flg_presence_in            IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        dt_presence_in             IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        id_prof_presence_in        IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        flg_opinion_in             IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        dt_opinion_in              IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        flg_leader_in              IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        create_user_in             IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_time_in             IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_time_in             IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky therapeutic_decision_det.id_therapeutic_dec_det%TYPE := next_key;
    BEGIN
        ins(id_therapeutic_dec_det_in  => l_pky,
            id_therapeutic_decision_in => id_therapeutic_decision_in,
            id_professional_in         => id_professional_in,
            flg_status_in              => flg_status_in,
            dt_creation_in             => dt_creation_in,
            flg_presence_in            => flg_presence_in,
            dt_presence_in             => dt_presence_in,
            id_prof_presence_in        => id_prof_presence_in,
            flg_opinion_in             => flg_opinion_in,
            dt_opinion_in              => dt_opinion_in,
            flg_leader_in              => flg_leader_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_therapeutic_decision_in IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_professional_in         IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        flg_status_in              IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        dt_creation_in             IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        flg_presence_in            IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        dt_presence_in             IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        id_prof_presence_in        IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        flg_opinion_in             IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        dt_opinion_in              IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        flg_leader_in              IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        create_user_in             IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_time_in             IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_time_in             IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        l_pky    therapeutic_decision_det.id_therapeutic_dec_det%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_therapeutic_dec_det_in  => l_pky,
            id_therapeutic_decision_in => id_therapeutic_decision_in,
            id_professional_in         => id_professional_in,
            flg_status_in              => flg_status_in,
            dt_creation_in             => dt_creation_in,
            flg_presence_in            => flg_presence_in,
            dt_presence_in             => dt_presence_in,
            id_prof_presence_in        => id_prof_presence_in,
            flg_opinion_in             => flg_opinion_in,
            dt_opinion_in              => dt_opinion_in,
            flg_leader_in              => flg_leader_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN therapeutic_decision_det_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO therapeutic_decision_det
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_THERAPEUTIC_DEC_DET _' || indx,
                                                        value_in           => rows_in(indx).id_therapeutic_dec_det,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_THERAPEUTIC_DECISION _' || indx,
                                                        value_in           => rows_in(indx).id_therapeutic_decision,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CREATION _' || indx,
                                                        value_in           => rows_in(indx).dt_creation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_PRESENCE _' || indx,
                                                        value_in           => rows_in(indx).flg_presence,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PRESENCE _' || indx,
                                                        value_in           => rows_in(indx).dt_presence,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_PRESENCE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_presence,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_OPINION _' || indx,
                                                        value_in           => rows_in(indx).flg_opinion,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_OPINION _' || indx,
                                                        value_in           => rows_in(indx).dt_opinion,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_LEADER _' || indx,
                                                        value_in           => rows_in(indx).flg_leader,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'THERAPEUTIC_DECISION_DET',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN therapeutic_decision_det_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_therapeutic_dec_det_in   IN therapeutic_decision_det.id_therapeutic_dec_det%TYPE,
        id_therapeutic_decision_in  IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_therapeutic_decision_nin IN BOOLEAN := TRUE,
        id_professional_in          IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        id_professional_nin         IN BOOLEAN := TRUE,
        flg_status_in               IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        dt_creation_in              IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin             IN BOOLEAN := TRUE,
        flg_presence_in             IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        flg_presence_nin            IN BOOLEAN := TRUE,
        dt_presence_in              IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        dt_presence_nin             IN BOOLEAN := TRUE,
        id_prof_presence_in         IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        id_prof_presence_nin        IN BOOLEAN := TRUE,
        flg_opinion_in              IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        flg_opinion_nin             IN BOOLEAN := TRUE,
        dt_opinion_in               IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        dt_opinion_nin              IN BOOLEAN := TRUE,
        flg_leader_in               IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        flg_leader_nin              IN BOOLEAN := TRUE,
        create_user_in              IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_rows_out                  table_varchar;
        l_id_therapeutic_decision_n NUMBER(1);
        l_id_professional_n         NUMBER(1);
        l_flg_status_n              NUMBER(1);
        l_dt_creation_n             NUMBER(1);
        l_flg_presence_n            NUMBER(1);
        l_dt_presence_n             NUMBER(1);
        l_id_prof_presence_n        NUMBER(1);
        l_flg_opinion_n             NUMBER(1);
        l_dt_opinion_n              NUMBER(1);
        l_flg_leader_n              NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
    BEGIN
    
        l_id_therapeutic_decision_n := sys.diutil.bool_to_int(id_therapeutic_decision_nin);
        l_id_professional_n         := sys.diutil.bool_to_int(id_professional_nin);
        l_flg_status_n              := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_creation_n             := sys.diutil.bool_to_int(dt_creation_nin);
        l_flg_presence_n            := sys.diutil.bool_to_int(flg_presence_nin);
        l_dt_presence_n             := sys.diutil.bool_to_int(dt_presence_nin);
        l_id_prof_presence_n        := sys.diutil.bool_to_int(id_prof_presence_nin);
        l_flg_opinion_n             := sys.diutil.bool_to_int(flg_opinion_nin);
        l_dt_opinion_n              := sys.diutil.bool_to_int(dt_opinion_nin);
        l_flg_leader_n              := sys.diutil.bool_to_int(flg_leader_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE therapeutic_decision_det
           SET id_therapeutic_decision = decode(l_id_therapeutic_decision_n,
                                                0,
                                                id_therapeutic_decision_in,
                                                nvl(id_therapeutic_decision_in, id_therapeutic_decision)),
               id_professional         = decode(l_id_professional_n,
                                                0,
                                                id_professional_in,
                                                nvl(id_professional_in, id_professional)),
               flg_status              = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               dt_creation             = decode(l_dt_creation_n, 0, dt_creation_in, nvl(dt_creation_in, dt_creation)),
               flg_presence            = decode(l_flg_presence_n, 0, flg_presence_in, nvl(flg_presence_in, flg_presence)),
               dt_presence             = decode(l_dt_presence_n, 0, dt_presence_in, nvl(dt_presence_in, dt_presence)),
               id_prof_presence        = decode(l_id_prof_presence_n,
                                                0,
                                                id_prof_presence_in,
                                                nvl(id_prof_presence_in, id_prof_presence)),
               flg_opinion             = decode(l_flg_opinion_n, 0, flg_opinion_in, nvl(flg_opinion_in, flg_opinion)),
               dt_opinion              = decode(l_dt_opinion_n, 0, dt_opinion_in, nvl(dt_opinion_in, dt_opinion)),
               flg_leader              = decode(l_flg_leader_n, 0, flg_leader_in, nvl(flg_leader_in, flg_leader)),
               create_user             = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time             = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution      = decode(l_create_institution_n,
                                                0,
                                                create_institution_in,
                                                nvl(create_institution_in, create_institution)),
               update_user             = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time             = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution      = decode(l_update_institution_n,
                                                0,
                                                update_institution_in,
                                                nvl(update_institution_in, update_institution))
         WHERE id_therapeutic_dec_det = id_therapeutic_dec_det_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'THERAPEUTIC_DECISION_DET');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    IF l_name = 'THDD_THD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_THERAPEUTIC_DECISION',
                                                        value_in           => id_therapeutic_decision_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_therapeutic_dec_det_in   IN therapeutic_decision_det.id_therapeutic_dec_det%TYPE,
        id_therapeutic_decision_in  IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_therapeutic_decision_nin IN BOOLEAN := TRUE,
        id_professional_in          IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        id_professional_nin         IN BOOLEAN := TRUE,
        flg_status_in               IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        dt_creation_in              IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin             IN BOOLEAN := TRUE,
        flg_presence_in             IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        flg_presence_nin            IN BOOLEAN := TRUE,
        dt_presence_in              IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        dt_presence_nin             IN BOOLEAN := TRUE,
        id_prof_presence_in         IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        id_prof_presence_nin        IN BOOLEAN := TRUE,
        flg_opinion_in              IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        flg_opinion_nin             IN BOOLEAN := TRUE,
        dt_opinion_in               IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        dt_opinion_nin              IN BOOLEAN := TRUE,
        flg_leader_in               IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        flg_leader_nin              IN BOOLEAN := TRUE,
        create_user_in              IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_therapeutic_dec_det_in   => id_therapeutic_dec_det_in,
            id_therapeutic_decision_in  => id_therapeutic_decision_in,
            id_therapeutic_decision_nin => id_therapeutic_decision_nin,
            id_professional_in          => id_professional_in,
            id_professional_nin         => id_professional_nin,
            flg_status_in               => flg_status_in,
            flg_status_nin              => flg_status_nin,
            dt_creation_in              => dt_creation_in,
            dt_creation_nin             => dt_creation_nin,
            flg_presence_in             => flg_presence_in,
            flg_presence_nin            => flg_presence_nin,
            dt_presence_in              => dt_presence_in,
            dt_presence_nin             => dt_presence_nin,
            id_prof_presence_in         => id_prof_presence_in,
            id_prof_presence_nin        => id_prof_presence_nin,
            flg_opinion_in              => flg_opinion_in,
            flg_opinion_nin             => flg_opinion_nin,
            dt_opinion_in               => dt_opinion_in,
            dt_opinion_nin              => dt_opinion_nin,
            flg_leader_in               => flg_leader_in,
            flg_leader_nin              => flg_leader_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_therapeutic_decision_in  IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_therapeutic_decision_nin IN BOOLEAN := TRUE,
        id_professional_in          IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        id_professional_nin         IN BOOLEAN := TRUE,
        flg_status_in               IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        dt_creation_in              IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin             IN BOOLEAN := TRUE,
        flg_presence_in             IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        flg_presence_nin            IN BOOLEAN := TRUE,
        dt_presence_in              IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        dt_presence_nin             IN BOOLEAN := TRUE,
        id_prof_presence_in         IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        id_prof_presence_nin        IN BOOLEAN := TRUE,
        flg_opinion_in              IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        flg_opinion_nin             IN BOOLEAN := TRUE,
        dt_opinion_in               IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        dt_opinion_nin              IN BOOLEAN := TRUE,
        flg_leader_in               IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        flg_leader_nin              IN BOOLEAN := TRUE,
        create_user_in              IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        where_in                    VARCHAR2 DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_sql                       VARCHAR2(32767);
        l_rows_out                  table_varchar;
        l_id_therapeutic_decision_n NUMBER(1);
        l_id_professional_n         NUMBER(1);
        l_flg_status_n              NUMBER(1);
        l_dt_creation_n             NUMBER(1);
        l_flg_presence_n            NUMBER(1);
        l_dt_presence_n             NUMBER(1);
        l_id_prof_presence_n        NUMBER(1);
        l_flg_opinion_n             NUMBER(1);
        l_dt_opinion_n              NUMBER(1);
        l_flg_leader_n              NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
        id_therapeutic_dec_det_in   therapeutic_decision_det.id_therapeutic_dec_det%TYPE;
    BEGIN
    
        l_id_therapeutic_decision_n := sys.diutil.bool_to_int(id_therapeutic_decision_nin);
        l_id_professional_n         := sys.diutil.bool_to_int(id_professional_nin);
        l_flg_status_n              := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_creation_n             := sys.diutil.bool_to_int(dt_creation_nin);
        l_flg_presence_n            := sys.diutil.bool_to_int(flg_presence_nin);
        l_dt_presence_n             := sys.diutil.bool_to_int(dt_presence_nin);
        l_id_prof_presence_n        := sys.diutil.bool_to_int(id_prof_presence_nin);
        l_flg_opinion_n             := sys.diutil.bool_to_int(flg_opinion_nin);
        l_dt_opinion_n              := sys.diutil.bool_to_int(dt_opinion_nin);
        l_flg_leader_n              := sys.diutil.bool_to_int(flg_leader_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE THERAPEUTIC_DECISION_DET SET ' || ' ID_THERAPEUTIC_DECISION = decode (' ||
                 l_id_therapeutic_decision_n ||
                 ',0,:id_therapeutic_decision_in, NVL (:id_therapeutic_decision_in, ID_THERAPEUTIC_DECISION)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' DT_CREATION = decode (' || l_dt_creation_n ||
                 ',0,:dt_creation_in, NVL (:dt_creation_in, DT_CREATION)) ' || ',' || ' FLG_PRESENCE = decode (' ||
                 l_flg_presence_n || ',0,:flg_presence_in, NVL (:flg_presence_in, FLG_PRESENCE)) ' || ',' ||
                 ' DT_PRESENCE = decode (' || l_dt_presence_n ||
                 ',0,:dt_presence_in, NVL (:dt_presence_in, DT_PRESENCE)) ' || ',' || ' ID_PROF_PRESENCE = decode (' ||
                 l_id_prof_presence_n || ',0,:id_prof_presence_in, NVL (:id_prof_presence_in, ID_PROF_PRESENCE)) ' || ',' ||
                 ' FLG_OPINION = decode (' || l_flg_opinion_n ||
                 ',0,:flg_opinion_in, NVL (:flg_opinion_in, FLG_OPINION)) ' || ',' || ' DT_OPINION = decode (' ||
                 l_dt_opinion_n || ',0,:dt_opinion_in, NVL (:dt_opinion_in, DT_OPINION)) ' || ',' ||
                 ' FLG_LEADER = decode (' || l_flg_leader_n || ',0,:flg_leader_in, NVL (:flg_leader_in, FLG_LEADER)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_therapeutic_decision_in, id_professional_in, flg_status_in, dt_creation_in, flg_presence_in, dt_presence_in, id_prof_presence_in, flg_opinion_in, dt_opinion_in, flg_leader_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'THERAPEUTIC_DECISION_DET');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    IF l_name = 'THDD_THD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_THERAPEUTIC_DECISION',
                                                        value_in           => id_therapeutic_decision_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_therapeutic_decision_in  IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_therapeutic_decision_nin IN BOOLEAN := TRUE,
        id_professional_in          IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        id_professional_nin         IN BOOLEAN := TRUE,
        flg_status_in               IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        dt_creation_in              IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin             IN BOOLEAN := TRUE,
        flg_presence_in             IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        flg_presence_nin            IN BOOLEAN := TRUE,
        dt_presence_in              IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        dt_presence_nin             IN BOOLEAN := TRUE,
        id_prof_presence_in         IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        id_prof_presence_nin        IN BOOLEAN := TRUE,
        flg_opinion_in              IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        flg_opinion_nin             IN BOOLEAN := TRUE,
        dt_opinion_in               IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        dt_opinion_nin              IN BOOLEAN := TRUE,
        flg_leader_in               IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        flg_leader_nin              IN BOOLEAN := TRUE,
        create_user_in              IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        where_in                    VARCHAR2 DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_therapeutic_decision_in  => id_therapeutic_decision_in,
            id_therapeutic_decision_nin => id_therapeutic_decision_nin,
            id_professional_in          => id_professional_in,
            id_professional_nin         => id_professional_nin,
            flg_status_in               => flg_status_in,
            flg_status_nin              => flg_status_nin,
            dt_creation_in              => dt_creation_in,
            dt_creation_nin             => dt_creation_nin,
            flg_presence_in             => flg_presence_in,
            flg_presence_nin            => flg_presence_nin,
            dt_presence_in              => dt_presence_in,
            dt_presence_nin             => dt_presence_nin,
            id_prof_presence_in         => id_prof_presence_in,
            id_prof_presence_nin        => id_prof_presence_nin,
            flg_opinion_in              => flg_opinion_in,
            flg_opinion_nin             => flg_opinion_nin,
            dt_opinion_in               => dt_opinion_in,
            dt_opinion_nin              => dt_opinion_nin,
            flg_leader_in               => flg_leader_in,
            flg_leader_nin              => flg_leader_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            where_in                    => where_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN therapeutic_decision_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_therapeutic_dec_det_in  => rec_in.id_therapeutic_dec_det,
            id_therapeutic_decision_in => rec_in.id_therapeutic_decision,
            id_professional_in         => rec_in.id_professional,
            flg_status_in              => rec_in.flg_status,
            dt_creation_in             => rec_in.dt_creation,
            flg_presence_in            => rec_in.flg_presence,
            dt_presence_in             => rec_in.dt_presence,
            id_prof_presence_in        => rec_in.id_prof_presence,
            flg_opinion_in             => rec_in.flg_opinion,
            dt_opinion_in              => rec_in.dt_opinion,
            flg_leader_in              => rec_in.flg_leader,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN therapeutic_decision_det%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_therapeutic_dec_det_in  => rec_in.id_therapeutic_dec_det,
            id_therapeutic_decision_in => rec_in.id_therapeutic_decision,
            id_professional_in         => rec_in.id_professional,
            flg_status_in              => rec_in.flg_status,
            dt_creation_in             => rec_in.dt_creation,
            flg_presence_in            => rec_in.flg_presence,
            dt_presence_in             => rec_in.dt_presence,
            id_prof_presence_in        => rec_in.id_prof_presence,
            flg_opinion_in             => rec_in.flg_opinion,
            dt_opinion_in              => rec_in.dt_opinion,
            flg_leader_in              => rec_in.flg_leader,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_therapeutic_dec_det_in  IN therapeutic_decision_det.id_therapeutic_dec_det%TYPE,
        id_therapeutic_decision_in IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_professional_in         IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        flg_status_in              IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        dt_creation_in             IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        flg_presence_in            IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        dt_presence_in             IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        id_prof_presence_in        IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        flg_opinion_in             IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        dt_opinion_in              IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        flg_leader_in              IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        create_user_in             IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_time_in             IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_time_in             IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        upd(id_therapeutic_dec_det_in  => id_therapeutic_dec_det_in,
            id_therapeutic_decision_in => id_therapeutic_decision_in,
            id_professional_in         => id_professional_in,
            flg_status_in              => flg_status_in,
            dt_creation_in             => dt_creation_in,
            flg_presence_in            => flg_presence_in,
            dt_presence_in             => dt_presence_in,
            id_prof_presence_in        => id_prof_presence_in,
            flg_opinion_in             => flg_opinion_in,
            dt_opinion_in              => dt_opinion_in,
            flg_leader_in              => flg_leader_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_therapeutic_dec_det_in  => id_therapeutic_dec_det_in,
                id_therapeutic_decision_in => id_therapeutic_decision_in,
                id_professional_in         => id_professional_in,
                flg_status_in              => flg_status_in,
                dt_creation_in             => dt_creation_in,
                flg_presence_in            => flg_presence_in,
                dt_presence_in             => dt_presence_in,
                id_prof_presence_in        => id_prof_presence_in,
                flg_opinion_in             => flg_opinion_in,
                dt_opinion_in              => dt_opinion_in,
                flg_leader_in              => flg_leader_in,
                create_user_in             => create_user_in,
                create_time_in             => create_time_in,
                create_institution_in      => create_institution_in,
                update_user_in             => update_user_in,
                update_time_in             => update_time_in,
                update_institution_in      => update_institution_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_therapeutic_dec_det_in  IN therapeutic_decision_det.id_therapeutic_dec_det%TYPE,
        id_therapeutic_decision_in IN therapeutic_decision_det.id_therapeutic_decision%TYPE DEFAULT NULL,
        id_professional_in         IN therapeutic_decision_det.id_professional%TYPE DEFAULT NULL,
        flg_status_in              IN therapeutic_decision_det.flg_status%TYPE DEFAULT NULL,
        dt_creation_in             IN therapeutic_decision_det.dt_creation%TYPE DEFAULT NULL,
        flg_presence_in            IN therapeutic_decision_det.flg_presence%TYPE DEFAULT NULL,
        dt_presence_in             IN therapeutic_decision_det.dt_presence%TYPE DEFAULT NULL,
        id_prof_presence_in        IN therapeutic_decision_det.id_prof_presence%TYPE DEFAULT NULL,
        flg_opinion_in             IN therapeutic_decision_det.flg_opinion%TYPE DEFAULT NULL,
        dt_opinion_in              IN therapeutic_decision_det.dt_opinion%TYPE DEFAULT NULL,
        flg_leader_in              IN therapeutic_decision_det.flg_leader%TYPE DEFAULT NULL,
        create_user_in             IN therapeutic_decision_det.create_user%TYPE DEFAULT NULL,
        create_time_in             IN therapeutic_decision_det.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN therapeutic_decision_det.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN therapeutic_decision_det.update_user%TYPE DEFAULT NULL,
        update_time_in             IN therapeutic_decision_det.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN therapeutic_decision_det.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_therapeutic_dec_det_in,
                id_therapeutic_decision_in,
                id_professional_in,
                flg_status_in,
                dt_creation_in,
                flg_presence_in,
                dt_presence_in,
                id_prof_presence_in,
                flg_opinion_in,
                dt_opinion_in,
                flg_leader_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN therapeutic_decision_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_therapeutic_dec_det  id_therapeutic_dec_det_cc;
        l_id_therapeutic_decision id_therapeutic_decision_cc;
        l_id_professional         id_professional_cc;
        l_flg_status              flg_status_cc;
        l_dt_creation             dt_creation_cc;
        l_flg_presence            flg_presence_cc;
        l_dt_presence             dt_presence_cc;
        l_id_prof_presence        id_prof_presence_cc;
        l_flg_opinion             flg_opinion_cc;
        l_dt_opinion              dt_opinion_cc;
        l_flg_leader              flg_leader_cc;
        l_create_user             create_user_cc;
        l_create_time             create_time_cc;
        l_create_institution      create_institution_cc;
        l_update_user             update_user_cc;
        l_update_time             update_time_cc;
        l_update_institution      update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_therapeutic_dec_det(i) := col_in(i).id_therapeutic_dec_det;
            l_id_therapeutic_decision(i) := col_in(i).id_therapeutic_decision;
            l_id_professional(i) := col_in(i).id_professional;
            l_flg_status(i) := col_in(i).flg_status;
            l_dt_creation(i) := col_in(i).dt_creation;
            l_flg_presence(i) := col_in(i).flg_presence;
            l_dt_presence(i) := col_in(i).dt_presence;
            l_id_prof_presence(i) := col_in(i).id_prof_presence;
            l_flg_opinion(i) := col_in(i).flg_opinion;
            l_dt_opinion(i) := col_in(i).dt_opinion;
            l_flg_leader(i) := col_in(i).flg_leader;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE therapeutic_decision_det
                   SET id_therapeutic_decision = nvl(l_id_therapeutic_decision(i), id_therapeutic_decision),
                       id_professional         = nvl(l_id_professional(i), id_professional),
                       flg_status              = nvl(l_flg_status(i), flg_status),
                       dt_creation             = nvl(l_dt_creation(i), dt_creation),
                       flg_presence            = nvl(l_flg_presence(i), flg_presence),
                       dt_presence             = nvl(l_dt_presence(i), dt_presence),
                       id_prof_presence        = nvl(l_id_prof_presence(i), id_prof_presence),
                       flg_opinion             = nvl(l_flg_opinion(i), flg_opinion),
                       dt_opinion              = nvl(l_dt_opinion(i), dt_opinion),
                       flg_leader              = nvl(l_flg_leader(i), flg_leader),
                       create_user             = nvl(l_create_user(i), create_user),
                       create_time             = nvl(l_create_time(i), create_time),
                       create_institution      = nvl(l_create_institution(i), create_institution),
                       update_user             = nvl(l_update_user(i), update_user),
                       update_time             = nvl(l_update_time(i), update_time),
                       update_institution      = nvl(l_update_institution(i), update_institution)
                 WHERE id_therapeutic_dec_det = l_id_therapeutic_dec_det(i);
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE therapeutic_decision_det
                   SET id_therapeutic_decision = l_id_therapeutic_decision(i),
                       id_professional         = l_id_professional(i),
                       flg_status              = l_flg_status(i),
                       dt_creation             = l_dt_creation(i),
                       flg_presence            = l_flg_presence(i),
                       dt_presence             = l_dt_presence(i),
                       id_prof_presence        = l_id_prof_presence(i),
                       flg_opinion             = l_flg_opinion(i),
                       dt_opinion              = l_dt_opinion(i),
                       flg_leader              = l_flg_leader(i),
                       create_user             = l_create_user(i),
                       create_time             = l_create_time(i),
                       create_institution      = l_create_institution(i),
                       update_user             = l_update_user(i),
                       update_time             = l_update_time(i),
                       update_institution      = l_update_institution(i)
                 WHERE id_therapeutic_dec_det = l_id_therapeutic_dec_det(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN therapeutic_decision_det_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE THERAPEUTIC_DECISION_DET
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE THERAPEUTIC_DECISION_DET
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE THERAPEUTIC_DECISION_DET set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE THERAPEUTIC_DECISION_DET set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_therapeutic_dec_det_in IN therapeutic_decision_det.id_therapeutic_dec_det%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM therapeutic_decision_det
         WHERE id_therapeutic_dec_det = id_therapeutic_dec_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_therapeutic_dec_det_in IN therapeutic_decision_det.id_therapeutic_dec_det%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_therapeutic_dec_det_in => id_therapeutic_dec_det_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_THERAPEUTIC_DEC_DET
    PROCEDURE del_id_therapeutic_dec_det
    (
        id_therapeutic_dec_det_in IN therapeutic_decision_det.id_therapeutic_dec_det%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM therapeutic_decision_det
         WHERE id_therapeutic_dec_det = id_therapeutic_dec_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_therapeutic_dec_det;

    -- Delete all rows for primary key column ID_THERAPEUTIC_DEC_DET
    PROCEDURE del_id_therapeutic_dec_det
    (
        id_therapeutic_dec_det_in IN therapeutic_decision_det.id_therapeutic_dec_det%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_therapeutic_dec_det(id_therapeutic_dec_det_in => id_therapeutic_dec_det_in,
                                   handle_error_in           => handle_error_in,
                                   rows_out                  => rows_out);
    END del_id_therapeutic_dec_det;

    PROCEDURE del_thdd_thd_fk
    (
        id_therapeutic_decision_in IN therapeutic_decision_det.id_therapeutic_decision%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM therapeutic_decision_det
         WHERE id_therapeutic_decision = del_thdd_thd_fk.id_therapeutic_decision_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_thdd_thd_fk;

    PROCEDURE del_thdd_thd_fk
    (
        id_therapeutic_decision_in IN therapeutic_decision_det.id_therapeutic_decision%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_thdd_thd_fk(id_therapeutic_decision_in => id_therapeutic_decision_in,
                        handle_error_in            => handle_error_in,
                        rows_out                   => rows_out);
    END del_thdd_thd_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM THERAPEUTIC_DECISION_DET';
        ELSE
            RETURN 'DELETE FROM THERAPEUTIC_DECISION_DET WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'THERAPEUTIC_DECISION_DET');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'THERAPEUTIC_DECISION_DET');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(therapeutic_decision_det_inout IN OUT therapeutic_decision_det%ROWTYPE) IS
    BEGIN
        therapeutic_decision_det_inout.id_therapeutic_dec_det  := NULL;
        therapeutic_decision_det_inout.id_therapeutic_decision := NULL;
        therapeutic_decision_det_inout.id_professional         := NULL;
        therapeutic_decision_det_inout.flg_status              := NULL;
        therapeutic_decision_det_inout.dt_creation             := NULL;
        therapeutic_decision_det_inout.flg_presence            := NULL;
        therapeutic_decision_det_inout.dt_presence             := NULL;
        therapeutic_decision_det_inout.id_prof_presence        := NULL;
        therapeutic_decision_det_inout.flg_opinion             := NULL;
        therapeutic_decision_det_inout.dt_opinion              := NULL;
        therapeutic_decision_det_inout.flg_leader              := NULL;
        therapeutic_decision_det_inout.create_user             := NULL;
        therapeutic_decision_det_inout.create_time             := NULL;
        therapeutic_decision_det_inout.create_institution      := NULL;
        therapeutic_decision_det_inout.update_user             := NULL;
        therapeutic_decision_det_inout.update_time             := NULL;
        therapeutic_decision_det_inout.update_institution      := NULL;
    END initrec;

    FUNCTION initrec RETURN therapeutic_decision_det%ROWTYPE IS
        l_therapeutic_decision_det therapeutic_decision_det%ROWTYPE;
    BEGIN
        RETURN l_therapeutic_decision_det;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN therapeutic_decision_det_tc IS
        data therapeutic_decision_det_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM therapeutic_decision_det
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN therapeutic_decision_det_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data therapeutic_decision_det_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_therapeutic_decision_det;
/
