/*-- Last Change Revision: $Rev: 1528631 $*/
/*-- Last Change by: $Author: elisabete.bugalho $*/
/*-- Date of last change: $Date: 2013-11-27 08:51:51 +0000 (qua, 27 nov 2013) $*/
CREATE OR REPLACE PACKAGE BODY ts_pre_hosp_accident
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Novembro 26, 2013 10:49:34
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_pre_hosp_accident_in IN pre_hosp_accident.id_pre_hosp_accident%TYPE,
        id_institution_in       IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        dt_accident_in          IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        name_in                 IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        gender_in               IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        dt_birth_in             IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        age_in                  IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        address_in              IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        city_in                 IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        pat_zip_code_in         IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        dt_report_mka_in        IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        cpa_code_in             IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        transport_number_in     IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        acc_zip_code_in         IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        latitude_in             IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        longitude_in            IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        dt_ride_out_in          IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_arrival_in           IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        flg_mech_inj_in         IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        mech_injury_in          IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        dt_drv_away_in          IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        flg_status_in           IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in       IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_in IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        id_episode_in           IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        create_user_in          IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_time_in          IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_time_in          IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        flg_prot_device_in      IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_rta_pat_typ_in      IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        rta_pat_typ_ft_in       IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        flg_is_driv_own_in      IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_police_involved_in  IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        police_num_in           IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_station_in       IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_accident_num_in  IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        id_amb_trust_code_in    IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pre_hosp_accident
            (id_pre_hosp_accident,
             id_institution,
             id_software,
             dt_accident,
             name,
             gender,
             dt_birth,
             age,
             address,
             city,
             pat_zip_code,
             dt_report_mka,
             cpa_code,
             transport_number,
             acc_zip_code,
             latitude,
             longitude,
             dt_ride_out,
             dt_arrival,
             flg_mech_inj,
             mech_injury,
             dt_drv_away,
             flg_status,
             id_prof_create,
             dt_pre_hosp_accident,
             id_episode,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_prot_device,
             flg_rta_pat_typ,
             rta_pat_typ_ft,
             flg_is_driv_own,
             flg_police_involved,
             police_num,
             police_station,
             police_accident_num,
             id_amb_trust_code)
        VALUES
            (id_pre_hosp_accident_in,
             id_institution_in,
             id_software_in,
             dt_accident_in,
             name_in,
             gender_in,
             dt_birth_in,
             age_in,
             address_in,
             city_in,
             pat_zip_code_in,
             dt_report_mka_in,
             cpa_code_in,
             transport_number_in,
             acc_zip_code_in,
             latitude_in,
             longitude_in,
             dt_ride_out_in,
             dt_arrival_in,
             flg_mech_inj_in,
             mech_injury_in,
             dt_drv_away_in,
             flg_status_in,
             id_prof_create_in,
             dt_pre_hosp_accident_in,
             id_episode_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_prot_device_in,
             flg_rta_pat_typ_in,
             rta_pat_typ_ft_in,
             flg_is_driv_own_in,
             flg_police_involved_in,
             police_num_in,
             police_station_in,
             police_accident_num_in,
             id_amb_trust_code_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PRE_HOSP_ACCIDENT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    IF l_name = 'PR_HSP_ACC_AMB_SL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_AMB_TRUST_CODE',
                                                        value_in           => id_amb_trust_code_in);
                    END IF;
                    IF l_name = 'PR_HSP_ACC_EPI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PR_HSP_ACC_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PR_HSP_ACC_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATE',
                                                        value_in           => id_prof_create_in);
                    END IF;
                    IF l_name = 'PR_HSP_ACC_SOFT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_pre_hosp_accident_in IN pre_hosp_accident.id_pre_hosp_accident%TYPE,
        id_institution_in       IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        dt_accident_in          IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        name_in                 IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        gender_in               IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        dt_birth_in             IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        age_in                  IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        address_in              IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        city_in                 IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        pat_zip_code_in         IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        dt_report_mka_in        IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        cpa_code_in             IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        transport_number_in     IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        acc_zip_code_in         IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        latitude_in             IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        longitude_in            IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        dt_ride_out_in          IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_arrival_in           IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        flg_mech_inj_in         IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        mech_injury_in          IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        dt_drv_away_in          IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        flg_status_in           IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in       IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_in IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        id_episode_in           IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        create_user_in          IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_time_in          IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_time_in          IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        flg_prot_device_in      IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_rta_pat_typ_in      IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        rta_pat_typ_ft_in       IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        flg_is_driv_own_in      IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_police_involved_in  IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        police_num_in           IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_station_in       IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_accident_num_in  IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        id_amb_trust_code_in    IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_pre_hosp_accident_in => id_pre_hosp_accident_in,
            id_institution_in       => id_institution_in,
            id_software_in          => id_software_in,
            dt_accident_in          => dt_accident_in,
            name_in                 => name_in,
            gender_in               => gender_in,
            dt_birth_in             => dt_birth_in,
            age_in                  => age_in,
            address_in              => address_in,
            city_in                 => city_in,
            pat_zip_code_in         => pat_zip_code_in,
            dt_report_mka_in        => dt_report_mka_in,
            cpa_code_in             => cpa_code_in,
            transport_number_in     => transport_number_in,
            acc_zip_code_in         => acc_zip_code_in,
            latitude_in             => latitude_in,
            longitude_in            => longitude_in,
            dt_ride_out_in          => dt_ride_out_in,
            dt_arrival_in           => dt_arrival_in,
            flg_mech_inj_in         => flg_mech_inj_in,
            mech_injury_in          => mech_injury_in,
            dt_drv_away_in          => dt_drv_away_in,
            flg_status_in           => flg_status_in,
            id_prof_create_in       => id_prof_create_in,
            dt_pre_hosp_accident_in => dt_pre_hosp_accident_in,
            id_episode_in           => id_episode_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            flg_prot_device_in      => flg_prot_device_in,
            flg_rta_pat_typ_in      => flg_rta_pat_typ_in,
            rta_pat_typ_ft_in       => rta_pat_typ_ft_in,
            flg_is_driv_own_in      => flg_is_driv_own_in,
            flg_police_involved_in  => flg_police_involved_in,
            police_num_in           => police_num_in,
            police_station_in       => police_station_in,
            police_accident_num_in  => police_accident_num_in,
            id_amb_trust_code_in    => id_amb_trust_code_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pre_hosp_accident%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pre_hosp_accident%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_pre_hosp_accident := next_key(sequence_in);
        END IF;
        ins(id_pre_hosp_accident_in => l_rec.id_pre_hosp_accident,
            id_institution_in       => l_rec.id_institution,
            id_software_in          => l_rec.id_software,
            dt_accident_in          => l_rec.dt_accident,
            name_in                 => l_rec.name,
            gender_in               => l_rec.gender,
            dt_birth_in             => l_rec.dt_birth,
            age_in                  => l_rec.age,
            address_in              => l_rec.address,
            city_in                 => l_rec.city,
            pat_zip_code_in         => l_rec.pat_zip_code,
            dt_report_mka_in        => l_rec.dt_report_mka,
            cpa_code_in             => l_rec.cpa_code,
            transport_number_in     => l_rec.transport_number,
            acc_zip_code_in         => l_rec.acc_zip_code,
            latitude_in             => l_rec.latitude,
            longitude_in            => l_rec.longitude,
            dt_ride_out_in          => l_rec.dt_ride_out,
            dt_arrival_in           => l_rec.dt_arrival,
            flg_mech_inj_in         => l_rec.flg_mech_inj,
            mech_injury_in          => l_rec.mech_injury,
            dt_drv_away_in          => l_rec.dt_drv_away,
            flg_status_in           => l_rec.flg_status,
            id_prof_create_in       => l_rec.id_prof_create,
            dt_pre_hosp_accident_in => l_rec.dt_pre_hosp_accident,
            id_episode_in           => l_rec.id_episode,
            create_user_in          => l_rec.create_user,
            create_time_in          => l_rec.create_time,
            create_institution_in   => l_rec.create_institution,
            update_user_in          => l_rec.update_user,
            update_time_in          => l_rec.update_time,
            update_institution_in   => l_rec.update_institution,
            flg_prot_device_in      => l_rec.flg_prot_device,
            flg_rta_pat_typ_in      => l_rec.flg_rta_pat_typ,
            rta_pat_typ_ft_in       => l_rec.rta_pat_typ_ft,
            flg_is_driv_own_in      => l_rec.flg_is_driv_own,
            flg_police_involved_in  => l_rec.flg_police_involved,
            police_num_in           => l_rec.police_num,
            police_station_in       => l_rec.police_station,
            police_accident_num_in  => l_rec.police_accident_num,
            id_amb_trust_code_in    => l_rec.id_amb_trust_code,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pre_hosp_accident%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN pre_hosp_accident.id_pre_hosp_accident%TYPE
    
     IS
        retval pre_hosp_accident.id_pre_hosp_accident%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_pre_hosp_accident.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PRE_HOSP_ACCIDENT'));
    END next_key;

    PROCEDURE ins
    (
        id_institution_in        IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        dt_accident_in           IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        name_in                  IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        gender_in                IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        dt_birth_in              IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        age_in                   IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        address_in               IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        city_in                  IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        pat_zip_code_in          IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        dt_report_mka_in         IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        cpa_code_in              IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        transport_number_in      IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        acc_zip_code_in          IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        latitude_in              IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        longitude_in             IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        dt_ride_out_in           IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_arrival_in            IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        flg_mech_inj_in          IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        mech_injury_in           IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        dt_drv_away_in           IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        flg_status_in            IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in        IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_in  IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        id_episode_in            IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        create_user_in           IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_time_in           IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_time_in           IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        flg_prot_device_in       IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_rta_pat_typ_in       IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        rta_pat_typ_ft_in        IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        flg_is_driv_own_in       IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_police_involved_in   IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        police_num_in            IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_station_in        IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_accident_num_in   IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        id_amb_trust_code_in     IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        id_pre_hosp_accident_out IN OUT pre_hosp_accident.id_pre_hosp_accident%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
        l_pky pre_hosp_accident.id_pre_hosp_accident%TYPE := next_key;
    BEGIN
        ins(id_pre_hosp_accident_in => l_pky,
            id_institution_in       => id_institution_in,
            id_software_in          => id_software_in,
            dt_accident_in          => dt_accident_in,
            name_in                 => name_in,
            gender_in               => gender_in,
            dt_birth_in             => dt_birth_in,
            age_in                  => age_in,
            address_in              => address_in,
            city_in                 => city_in,
            pat_zip_code_in         => pat_zip_code_in,
            dt_report_mka_in        => dt_report_mka_in,
            cpa_code_in             => cpa_code_in,
            transport_number_in     => transport_number_in,
            acc_zip_code_in         => acc_zip_code_in,
            latitude_in             => latitude_in,
            longitude_in            => longitude_in,
            dt_ride_out_in          => dt_ride_out_in,
            dt_arrival_in           => dt_arrival_in,
            flg_mech_inj_in         => flg_mech_inj_in,
            mech_injury_in          => mech_injury_in,
            dt_drv_away_in          => dt_drv_away_in,
            flg_status_in           => flg_status_in,
            id_prof_create_in       => id_prof_create_in,
            dt_pre_hosp_accident_in => dt_pre_hosp_accident_in,
            id_episode_in           => id_episode_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            flg_prot_device_in      => flg_prot_device_in,
            flg_rta_pat_typ_in      => flg_rta_pat_typ_in,
            rta_pat_typ_ft_in       => rta_pat_typ_ft_in,
            flg_is_driv_own_in      => flg_is_driv_own_in,
            flg_police_involved_in  => flg_police_involved_in,
            police_num_in           => police_num_in,
            police_station_in       => police_station_in,
            police_accident_num_in  => police_accident_num_in,
            id_amb_trust_code_in    => id_amb_trust_code_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
        id_pre_hosp_accident_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_institution_in        IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_software_in           IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        dt_accident_in           IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        name_in                  IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        gender_in                IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        dt_birth_in              IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        age_in                   IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        address_in               IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        city_in                  IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        pat_zip_code_in          IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        dt_report_mka_in         IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        cpa_code_in              IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        transport_number_in      IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        acc_zip_code_in          IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        latitude_in              IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        longitude_in             IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        dt_ride_out_in           IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_arrival_in            IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        flg_mech_inj_in          IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        mech_injury_in           IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        dt_drv_away_in           IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        flg_status_in            IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in        IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_in  IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        id_episode_in            IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        create_user_in           IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_time_in           IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_time_in           IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        flg_prot_device_in       IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_rta_pat_typ_in       IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        rta_pat_typ_ft_in        IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        flg_is_driv_own_in       IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_police_involved_in   IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        police_num_in            IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_station_in        IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_accident_num_in   IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        id_amb_trust_code_in     IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        id_pre_hosp_accident_out IN OUT pre_hosp_accident.id_pre_hosp_accident%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_institution_in        => id_institution_in,
            id_software_in           => id_software_in,
            dt_accident_in           => dt_accident_in,
            name_in                  => name_in,
            gender_in                => gender_in,
            dt_birth_in              => dt_birth_in,
            age_in                   => age_in,
            address_in               => address_in,
            city_in                  => city_in,
            pat_zip_code_in          => pat_zip_code_in,
            dt_report_mka_in         => dt_report_mka_in,
            cpa_code_in              => cpa_code_in,
            transport_number_in      => transport_number_in,
            acc_zip_code_in          => acc_zip_code_in,
            latitude_in              => latitude_in,
            longitude_in             => longitude_in,
            dt_ride_out_in           => dt_ride_out_in,
            dt_arrival_in            => dt_arrival_in,
            flg_mech_inj_in          => flg_mech_inj_in,
            mech_injury_in           => mech_injury_in,
            dt_drv_away_in           => dt_drv_away_in,
            flg_status_in            => flg_status_in,
            id_prof_create_in        => id_prof_create_in,
            dt_pre_hosp_accident_in  => dt_pre_hosp_accident_in,
            id_episode_in            => id_episode_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_prot_device_in       => flg_prot_device_in,
            flg_rta_pat_typ_in       => flg_rta_pat_typ_in,
            rta_pat_typ_ft_in        => rta_pat_typ_ft_in,
            flg_is_driv_own_in       => flg_is_driv_own_in,
            flg_police_involved_in   => flg_police_involved_in,
            police_num_in            => police_num_in,
            police_station_in        => police_station_in,
            police_accident_num_in   => police_accident_num_in,
            id_amb_trust_code_in     => id_amb_trust_code_in,
            id_pre_hosp_accident_out => id_pre_hosp_accident_out,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    FUNCTION ins
    (
        id_institution_in       IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        dt_accident_in          IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        name_in                 IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        gender_in               IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        dt_birth_in             IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        age_in                  IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        address_in              IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        city_in                 IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        pat_zip_code_in         IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        dt_report_mka_in        IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        cpa_code_in             IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        transport_number_in     IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        acc_zip_code_in         IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        latitude_in             IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        longitude_in            IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        dt_ride_out_in          IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_arrival_in           IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        flg_mech_inj_in         IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        mech_injury_in          IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        dt_drv_away_in          IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        flg_status_in           IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in       IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_in IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        id_episode_in           IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        create_user_in          IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_time_in          IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_time_in          IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        flg_prot_device_in      IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_rta_pat_typ_in      IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        rta_pat_typ_ft_in       IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        flg_is_driv_own_in      IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_police_involved_in  IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        police_num_in           IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_station_in       IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_accident_num_in  IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        id_amb_trust_code_in    IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) RETURN pre_hosp_accident.id_pre_hosp_accident%TYPE IS
        l_pky pre_hosp_accident.id_pre_hosp_accident%TYPE := next_key;
    BEGIN
        ins(id_pre_hosp_accident_in => l_pky,
            id_institution_in       => id_institution_in,
            id_software_in          => id_software_in,
            dt_accident_in          => dt_accident_in,
            name_in                 => name_in,
            gender_in               => gender_in,
            dt_birth_in             => dt_birth_in,
            age_in                  => age_in,
            address_in              => address_in,
            city_in                 => city_in,
            pat_zip_code_in         => pat_zip_code_in,
            dt_report_mka_in        => dt_report_mka_in,
            cpa_code_in             => cpa_code_in,
            transport_number_in     => transport_number_in,
            acc_zip_code_in         => acc_zip_code_in,
            latitude_in             => latitude_in,
            longitude_in            => longitude_in,
            dt_ride_out_in          => dt_ride_out_in,
            dt_arrival_in           => dt_arrival_in,
            flg_mech_inj_in         => flg_mech_inj_in,
            mech_injury_in          => mech_injury_in,
            dt_drv_away_in          => dt_drv_away_in,
            flg_status_in           => flg_status_in,
            id_prof_create_in       => id_prof_create_in,
            dt_pre_hosp_accident_in => dt_pre_hosp_accident_in,
            id_episode_in           => id_episode_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            flg_prot_device_in      => flg_prot_device_in,
            flg_rta_pat_typ_in      => flg_rta_pat_typ_in,
            rta_pat_typ_ft_in       => rta_pat_typ_ft_in,
            flg_is_driv_own_in      => flg_is_driv_own_in,
            flg_police_involved_in  => flg_police_involved_in,
            police_num_in           => police_num_in,
            police_station_in       => police_station_in,
            police_accident_num_in  => police_accident_num_in,
            id_amb_trust_code_in    => id_amb_trust_code_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_institution_in       IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        dt_accident_in          IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        name_in                 IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        gender_in               IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        dt_birth_in             IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        age_in                  IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        address_in              IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        city_in                 IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        pat_zip_code_in         IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        dt_report_mka_in        IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        cpa_code_in             IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        transport_number_in     IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        acc_zip_code_in         IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        latitude_in             IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        longitude_in            IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        dt_ride_out_in          IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_arrival_in           IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        flg_mech_inj_in         IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        mech_injury_in          IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        dt_drv_away_in          IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        flg_status_in           IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in       IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_in IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        id_episode_in           IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        create_user_in          IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_time_in          IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_time_in          IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        flg_prot_device_in      IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_rta_pat_typ_in      IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        rta_pat_typ_ft_in       IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        flg_is_driv_own_in      IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_police_involved_in  IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        police_num_in           IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_station_in       IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_accident_num_in  IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        id_amb_trust_code_in    IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) RETURN pre_hosp_accident.id_pre_hosp_accident%TYPE IS
        l_pky    pre_hosp_accident.id_pre_hosp_accident%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pre_hosp_accident_in => l_pky,
            id_institution_in       => id_institution_in,
            id_software_in          => id_software_in,
            dt_accident_in          => dt_accident_in,
            name_in                 => name_in,
            gender_in               => gender_in,
            dt_birth_in             => dt_birth_in,
            age_in                  => age_in,
            address_in              => address_in,
            city_in                 => city_in,
            pat_zip_code_in         => pat_zip_code_in,
            dt_report_mka_in        => dt_report_mka_in,
            cpa_code_in             => cpa_code_in,
            transport_number_in     => transport_number_in,
            acc_zip_code_in         => acc_zip_code_in,
            latitude_in             => latitude_in,
            longitude_in            => longitude_in,
            dt_ride_out_in          => dt_ride_out_in,
            dt_arrival_in           => dt_arrival_in,
            flg_mech_inj_in         => flg_mech_inj_in,
            mech_injury_in          => mech_injury_in,
            dt_drv_away_in          => dt_drv_away_in,
            flg_status_in           => flg_status_in,
            id_prof_create_in       => id_prof_create_in,
            dt_pre_hosp_accident_in => dt_pre_hosp_accident_in,
            id_episode_in           => id_episode_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            flg_prot_device_in      => flg_prot_device_in,
            flg_rta_pat_typ_in      => flg_rta_pat_typ_in,
            rta_pat_typ_ft_in       => rta_pat_typ_ft_in,
            flg_is_driv_own_in      => flg_is_driv_own_in,
            flg_police_involved_in  => flg_police_involved_in,
            police_num_in           => police_num_in,
            police_station_in       => police_station_in,
            police_accident_num_in  => police_accident_num_in,
            id_amb_trust_code_in    => id_amb_trust_code_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_institution_in       IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        dt_accident_in          IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        name_in                 IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        gender_in               IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        dt_birth_in             IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        age_in                  IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        address_in              IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        city_in                 IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        pat_zip_code_in         IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        dt_report_mka_in        IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        cpa_code_in             IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        transport_number_in     IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        acc_zip_code_in         IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        latitude_in             IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        longitude_in            IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        dt_ride_out_in          IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_arrival_in           IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        flg_mech_inj_in         IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        mech_injury_in          IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        dt_drv_away_in          IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        flg_status_in           IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in       IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_in IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        id_episode_in           IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        create_user_in          IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_time_in          IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_time_in          IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        flg_prot_device_in      IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_rta_pat_typ_in      IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        rta_pat_typ_ft_in       IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        flg_is_driv_own_in      IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_police_involved_in  IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        police_num_in           IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_station_in       IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_accident_num_in  IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        id_amb_trust_code_in    IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
        l_pky pre_hosp_accident.id_pre_hosp_accident%TYPE := next_key;
    BEGIN
        ins(id_pre_hosp_accident_in => l_pky,
            id_institution_in       => id_institution_in,
            id_software_in          => id_software_in,
            dt_accident_in          => dt_accident_in,
            name_in                 => name_in,
            gender_in               => gender_in,
            dt_birth_in             => dt_birth_in,
            age_in                  => age_in,
            address_in              => address_in,
            city_in                 => city_in,
            pat_zip_code_in         => pat_zip_code_in,
            dt_report_mka_in        => dt_report_mka_in,
            cpa_code_in             => cpa_code_in,
            transport_number_in     => transport_number_in,
            acc_zip_code_in         => acc_zip_code_in,
            latitude_in             => latitude_in,
            longitude_in            => longitude_in,
            dt_ride_out_in          => dt_ride_out_in,
            dt_arrival_in           => dt_arrival_in,
            flg_mech_inj_in         => flg_mech_inj_in,
            mech_injury_in          => mech_injury_in,
            dt_drv_away_in          => dt_drv_away_in,
            flg_status_in           => flg_status_in,
            id_prof_create_in       => id_prof_create_in,
            dt_pre_hosp_accident_in => dt_pre_hosp_accident_in,
            id_episode_in           => id_episode_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            flg_prot_device_in      => flg_prot_device_in,
            flg_rta_pat_typ_in      => flg_rta_pat_typ_in,
            rta_pat_typ_ft_in       => rta_pat_typ_ft_in,
            flg_is_driv_own_in      => flg_is_driv_own_in,
            flg_police_involved_in  => flg_police_involved_in,
            police_num_in           => police_num_in,
            police_station_in       => police_station_in,
            police_accident_num_in  => police_accident_num_in,
            id_amb_trust_code_in    => id_amb_trust_code_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_institution_in       IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        dt_accident_in          IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        name_in                 IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        gender_in               IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        dt_birth_in             IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        age_in                  IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        address_in              IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        city_in                 IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        pat_zip_code_in         IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        dt_report_mka_in        IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        cpa_code_in             IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        transport_number_in     IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        acc_zip_code_in         IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        latitude_in             IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        longitude_in            IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        dt_ride_out_in          IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_arrival_in           IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        flg_mech_inj_in         IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        mech_injury_in          IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        dt_drv_away_in          IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        flg_status_in           IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in       IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_in IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        id_episode_in           IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        create_user_in          IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_time_in          IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_time_in          IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        flg_prot_device_in      IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_rta_pat_typ_in      IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        rta_pat_typ_ft_in       IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        flg_is_driv_own_in      IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_police_involved_in  IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        police_num_in           IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_station_in       IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_accident_num_in  IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        id_amb_trust_code_in    IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        l_pky    pre_hosp_accident.id_pre_hosp_accident%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pre_hosp_accident_in => l_pky,
            id_institution_in       => id_institution_in,
            id_software_in          => id_software_in,
            dt_accident_in          => dt_accident_in,
            name_in                 => name_in,
            gender_in               => gender_in,
            dt_birth_in             => dt_birth_in,
            age_in                  => age_in,
            address_in              => address_in,
            city_in                 => city_in,
            pat_zip_code_in         => pat_zip_code_in,
            dt_report_mka_in        => dt_report_mka_in,
            cpa_code_in             => cpa_code_in,
            transport_number_in     => transport_number_in,
            acc_zip_code_in         => acc_zip_code_in,
            latitude_in             => latitude_in,
            longitude_in            => longitude_in,
            dt_ride_out_in          => dt_ride_out_in,
            dt_arrival_in           => dt_arrival_in,
            flg_mech_inj_in         => flg_mech_inj_in,
            mech_injury_in          => mech_injury_in,
            dt_drv_away_in          => dt_drv_away_in,
            flg_status_in           => flg_status_in,
            id_prof_create_in       => id_prof_create_in,
            dt_pre_hosp_accident_in => dt_pre_hosp_accident_in,
            id_episode_in           => id_episode_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            flg_prot_device_in      => flg_prot_device_in,
            flg_rta_pat_typ_in      => flg_rta_pat_typ_in,
            rta_pat_typ_ft_in       => rta_pat_typ_ft_in,
            flg_is_driv_own_in      => flg_is_driv_own_in,
            flg_police_involved_in  => flg_police_involved_in,
            police_num_in           => police_num_in,
            police_station_in       => police_station_in,
            police_accident_num_in  => police_accident_num_in,
            id_amb_trust_code_in    => id_amb_trust_code_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pre_hosp_accident_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO pre_hosp_accident
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PRE_HOSP_ACCIDENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_pre_hosp_accident,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_software,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ACCIDENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_accident,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NAME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index).name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'GENDER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .gender,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BIRTH _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_birth,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'AGE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index).age,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ADDRESS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .address,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CITY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index).city,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PAT_ZIP_CODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .pat_zip_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REPORT_MKA _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_report_mka,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CPA_CODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .cpa_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TRANSPORT_NUMBER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .transport_number,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ACC_ZIP_CODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .acc_zip_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LATITUDE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .latitude,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LONGITUDE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .longitude,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_RIDE_OUT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_ride_out,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ARRIVAL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_arrival,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_MECH_INJ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_mech_inj,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MECH_INJURY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .mech_injury,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_DRV_AWAY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_drv_away,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CREATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_create,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PRE_HOSP_ACCIDENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_pre_hosp_accident,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_PROT_DEVICE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_prot_device,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_RTA_PAT_TYP _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_rta_pat_typ,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RTA_PAT_TYP_FT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .rta_pat_typ_ft,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_IS_DRIV_OWN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_is_driv_own,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_POLICE_INVOLVED _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_police_involved,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'POLICE_NUM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .police_num,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'POLICE_STATION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .police_station,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'POLICE_ACCIDENT_NUM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .police_accident_num,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_AMB_TRUST_CODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_amb_trust_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PRE_HOSP_ACCIDENT',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pre_hosp_accident_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_pre_hosp_accident_in  IN pre_hosp_accident.id_pre_hosp_accident%TYPE,
        id_institution_in        IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_institution_nin       IN BOOLEAN := TRUE,
        id_software_in           IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        id_software_nin          IN BOOLEAN := TRUE,
        dt_accident_in           IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        dt_accident_nin          IN BOOLEAN := TRUE,
        name_in                  IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        name_nin                 IN BOOLEAN := TRUE,
        gender_in                IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        gender_nin               IN BOOLEAN := TRUE,
        dt_birth_in              IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        dt_birth_nin             IN BOOLEAN := TRUE,
        age_in                   IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        age_nin                  IN BOOLEAN := TRUE,
        address_in               IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        address_nin              IN BOOLEAN := TRUE,
        city_in                  IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        city_nin                 IN BOOLEAN := TRUE,
        pat_zip_code_in          IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        pat_zip_code_nin         IN BOOLEAN := TRUE,
        dt_report_mka_in         IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        dt_report_mka_nin        IN BOOLEAN := TRUE,
        cpa_code_in              IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        cpa_code_nin             IN BOOLEAN := TRUE,
        transport_number_in      IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        transport_number_nin     IN BOOLEAN := TRUE,
        acc_zip_code_in          IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        acc_zip_code_nin         IN BOOLEAN := TRUE,
        latitude_in              IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        latitude_nin             IN BOOLEAN := TRUE,
        longitude_in             IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        longitude_nin            IN BOOLEAN := TRUE,
        dt_ride_out_in           IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_ride_out_nin          IN BOOLEAN := TRUE,
        dt_arrival_in            IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        dt_arrival_nin           IN BOOLEAN := TRUE,
        flg_mech_inj_in          IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        flg_mech_inj_nin         IN BOOLEAN := TRUE,
        mech_injury_in           IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        mech_injury_nin          IN BOOLEAN := TRUE,
        dt_drv_away_in           IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        dt_drv_away_nin          IN BOOLEAN := TRUE,
        flg_status_in            IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        flg_status_nin           IN BOOLEAN := TRUE,
        id_prof_create_in        IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin       IN BOOLEAN := TRUE,
        dt_pre_hosp_accident_in  IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_nin IN BOOLEAN := TRUE,
        id_episode_in            IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        create_user_in           IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        flg_prot_device_in       IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_prot_device_nin      IN BOOLEAN := TRUE,
        flg_rta_pat_typ_in       IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        flg_rta_pat_typ_nin      IN BOOLEAN := TRUE,
        rta_pat_typ_ft_in        IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        rta_pat_typ_ft_nin       IN BOOLEAN := TRUE,
        flg_is_driv_own_in       IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_is_driv_own_nin      IN BOOLEAN := TRUE,
        flg_police_involved_in   IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        flg_police_involved_nin  IN BOOLEAN := TRUE,
        police_num_in            IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_num_nin           IN BOOLEAN := TRUE,
        police_station_in        IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_station_nin       IN BOOLEAN := TRUE,
        police_accident_num_in   IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        police_accident_num_nin  IN BOOLEAN := TRUE,
        id_amb_trust_code_in     IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        id_amb_trust_code_nin    IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_rows_out               table_varchar;
        l_id_institution_n       NUMBER(1);
        l_id_software_n          NUMBER(1);
        l_dt_accident_n          NUMBER(1);
        l_name_n                 NUMBER(1);
        l_gender_n               NUMBER(1);
        l_dt_birth_n             NUMBER(1);
        l_age_n                  NUMBER(1);
        l_address_n              NUMBER(1);
        l_city_n                 NUMBER(1);
        l_pat_zip_code_n         NUMBER(1);
        l_dt_report_mka_n        NUMBER(1);
        l_cpa_code_n             NUMBER(1);
        l_transport_number_n     NUMBER(1);
        l_acc_zip_code_n         NUMBER(1);
        l_latitude_n             NUMBER(1);
        l_longitude_n            NUMBER(1);
        l_dt_ride_out_n          NUMBER(1);
        l_dt_arrival_n           NUMBER(1);
        l_flg_mech_inj_n         NUMBER(1);
        l_mech_injury_n          NUMBER(1);
        l_dt_drv_away_n          NUMBER(1);
        l_flg_status_n           NUMBER(1);
        l_id_prof_create_n       NUMBER(1);
        l_dt_pre_hosp_accident_n NUMBER(1);
        l_id_episode_n           NUMBER(1);
        l_create_user_n          NUMBER(1);
        l_create_time_n          NUMBER(1);
        l_create_institution_n   NUMBER(1);
        l_update_user_n          NUMBER(1);
        l_update_time_n          NUMBER(1);
        l_update_institution_n   NUMBER(1);
        l_flg_prot_device_n      NUMBER(1);
        l_flg_rta_pat_typ_n      NUMBER(1);
        l_rta_pat_typ_ft_n       NUMBER(1);
        l_flg_is_driv_own_n      NUMBER(1);
        l_flg_police_involved_n  NUMBER(1);
        l_police_num_n           NUMBER(1);
        l_police_station_n       NUMBER(1);
        l_police_accident_num_n  NUMBER(1);
        l_id_amb_trust_code_n    NUMBER(1);
    BEGIN
    
        l_id_institution_n       := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n          := sys.diutil.bool_to_int(id_software_nin);
        l_dt_accident_n          := sys.diutil.bool_to_int(dt_accident_nin);
        l_name_n                 := sys.diutil.bool_to_int(name_nin);
        l_gender_n               := sys.diutil.bool_to_int(gender_nin);
        l_dt_birth_n             := sys.diutil.bool_to_int(dt_birth_nin);
        l_age_n                  := sys.diutil.bool_to_int(age_nin);
        l_address_n              := sys.diutil.bool_to_int(address_nin);
        l_city_n                 := sys.diutil.bool_to_int(city_nin);
        l_pat_zip_code_n         := sys.diutil.bool_to_int(pat_zip_code_nin);
        l_dt_report_mka_n        := sys.diutil.bool_to_int(dt_report_mka_nin);
        l_cpa_code_n             := sys.diutil.bool_to_int(cpa_code_nin);
        l_transport_number_n     := sys.diutil.bool_to_int(transport_number_nin);
        l_acc_zip_code_n         := sys.diutil.bool_to_int(acc_zip_code_nin);
        l_latitude_n             := sys.diutil.bool_to_int(latitude_nin);
        l_longitude_n            := sys.diutil.bool_to_int(longitude_nin);
        l_dt_ride_out_n          := sys.diutil.bool_to_int(dt_ride_out_nin);
        l_dt_arrival_n           := sys.diutil.bool_to_int(dt_arrival_nin);
        l_flg_mech_inj_n         := sys.diutil.bool_to_int(flg_mech_inj_nin);
        l_mech_injury_n          := sys.diutil.bool_to_int(mech_injury_nin);
        l_dt_drv_away_n          := sys.diutil.bool_to_int(dt_drv_away_nin);
        l_flg_status_n           := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_create_n       := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_pre_hosp_accident_n := sys.diutil.bool_to_int(dt_pre_hosp_accident_nin);
        l_id_episode_n           := sys.diutil.bool_to_int(id_episode_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_prot_device_n      := sys.diutil.bool_to_int(flg_prot_device_nin);
        l_flg_rta_pat_typ_n      := sys.diutil.bool_to_int(flg_rta_pat_typ_nin);
        l_rta_pat_typ_ft_n       := sys.diutil.bool_to_int(rta_pat_typ_ft_nin);
        l_flg_is_driv_own_n      := sys.diutil.bool_to_int(flg_is_driv_own_nin);
        l_flg_police_involved_n  := sys.diutil.bool_to_int(flg_police_involved_nin);
        l_police_num_n           := sys.diutil.bool_to_int(police_num_nin);
        l_police_station_n       := sys.diutil.bool_to_int(police_station_nin);
        l_police_accident_num_n  := sys.diutil.bool_to_int(police_accident_num_nin);
        l_id_amb_trust_code_n    := sys.diutil.bool_to_int(id_amb_trust_code_nin);
    
        UPDATE pre_hosp_accident
           SET id_institution       = decode(l_id_institution_n,
                                             0,
                                             id_institution_in,
                                             nvl(id_institution_in, id_institution)),
               id_software          = decode(l_id_software_n, 0, id_software_in, nvl(id_software_in, id_software)),
               dt_accident          = decode(l_dt_accident_n, 0, dt_accident_in, nvl(dt_accident_in, dt_accident)),
               name                 = decode(l_name_n, 0, name_in, nvl(name_in, name)),
               gender               = decode(l_gender_n, 0, gender_in, nvl(gender_in, gender)),
               dt_birth             = decode(l_dt_birth_n, 0, dt_birth_in, nvl(dt_birth_in, dt_birth)),
               age                  = decode(l_age_n, 0, age_in, nvl(age_in, age)),
               address              = decode(l_address_n, 0, address_in, nvl(address_in, address)),
               city                 = decode(l_city_n, 0, city_in, nvl(city_in, city)),
               pat_zip_code         = decode(l_pat_zip_code_n, 0, pat_zip_code_in, nvl(pat_zip_code_in, pat_zip_code)),
               dt_report_mka        = decode(l_dt_report_mka_n,
                                             0,
                                             dt_report_mka_in,
                                             nvl(dt_report_mka_in, dt_report_mka)),
               cpa_code             = decode(l_cpa_code_n, 0, cpa_code_in, nvl(cpa_code_in, cpa_code)),
               transport_number     = decode(l_transport_number_n,
                                             0,
                                             transport_number_in,
                                             nvl(transport_number_in, transport_number)),
               acc_zip_code         = decode(l_acc_zip_code_n, 0, acc_zip_code_in, nvl(acc_zip_code_in, acc_zip_code)),
               latitude             = decode(l_latitude_n, 0, latitude_in, nvl(latitude_in, latitude)),
               longitude            = decode(l_longitude_n, 0, longitude_in, nvl(longitude_in, longitude)),
               dt_ride_out          = decode(l_dt_ride_out_n, 0, dt_ride_out_in, nvl(dt_ride_out_in, dt_ride_out)),
               dt_arrival           = decode(l_dt_arrival_n, 0, dt_arrival_in, nvl(dt_arrival_in, dt_arrival)),
               flg_mech_inj         = decode(l_flg_mech_inj_n, 0, flg_mech_inj_in, nvl(flg_mech_inj_in, flg_mech_inj)),
               mech_injury          = decode(l_mech_injury_n, 0, mech_injury_in, nvl(mech_injury_in, mech_injury)),
               dt_drv_away          = decode(l_dt_drv_away_n, 0, dt_drv_away_in, nvl(dt_drv_away_in, dt_drv_away)),
               flg_status           = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_create       = decode(l_id_prof_create_n,
                                             0,
                                             id_prof_create_in,
                                             nvl(id_prof_create_in, id_prof_create)),
               dt_pre_hosp_accident = decode(l_dt_pre_hosp_accident_n,
                                             0,
                                             dt_pre_hosp_accident_in,
                                             nvl(dt_pre_hosp_accident_in, dt_pre_hosp_accident)),
               id_episode           = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               create_user          = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time          = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution   = decode(l_create_institution_n,
                                             0,
                                             create_institution_in,
                                             nvl(create_institution_in, create_institution)),
               update_user          = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time          = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution   = decode(l_update_institution_n,
                                             0,
                                             update_institution_in,
                                             nvl(update_institution_in, update_institution)),
               flg_prot_device      = decode(l_flg_prot_device_n,
                                             0,
                                             flg_prot_device_in,
                                             nvl(flg_prot_device_in, flg_prot_device)),
               flg_rta_pat_typ      = decode(l_flg_rta_pat_typ_n,
                                             0,
                                             flg_rta_pat_typ_in,
                                             nvl(flg_rta_pat_typ_in, flg_rta_pat_typ)),
               rta_pat_typ_ft       = decode(l_rta_pat_typ_ft_n,
                                             0,
                                             rta_pat_typ_ft_in,
                                             nvl(rta_pat_typ_ft_in, rta_pat_typ_ft)),
               flg_is_driv_own      = decode(l_flg_is_driv_own_n,
                                             0,
                                             flg_is_driv_own_in,
                                             nvl(flg_is_driv_own_in, flg_is_driv_own)),
               flg_police_involved  = decode(l_flg_police_involved_n,
                                             0,
                                             flg_police_involved_in,
                                             nvl(flg_police_involved_in, flg_police_involved)),
               police_num           = decode(l_police_num_n, 0, police_num_in, nvl(police_num_in, police_num)),
               police_station       = decode(l_police_station_n,
                                             0,
                                             police_station_in,
                                             nvl(police_station_in, police_station)),
               police_accident_num  = decode(l_police_accident_num_n,
                                             0,
                                             police_accident_num_in,
                                             nvl(police_accident_num_in, police_accident_num)),
               id_amb_trust_code    = decode(l_id_amb_trust_code_n,
                                             0,
                                             id_amb_trust_code_in,
                                             nvl(id_amb_trust_code_in, id_amb_trust_code))
         WHERE id_pre_hosp_accident = id_pre_hosp_accident_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PRE_HOSP_ACCIDENT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    IF l_name = 'PR_HSP_ACC_AMB_SL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_AMB_TRUST_CODE',
                                                        value_in           => id_amb_trust_code_in);
                    END IF;
                    IF l_name = 'PR_HSP_ACC_EPI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PR_HSP_ACC_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PR_HSP_ACC_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATE',
                                                        value_in           => id_prof_create_in);
                    END IF;
                    IF l_name = 'PR_HSP_ACC_SOFT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pre_hosp_accident_in  IN pre_hosp_accident.id_pre_hosp_accident%TYPE,
        id_institution_in        IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_institution_nin       IN BOOLEAN := TRUE,
        id_software_in           IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        id_software_nin          IN BOOLEAN := TRUE,
        dt_accident_in           IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        dt_accident_nin          IN BOOLEAN := TRUE,
        name_in                  IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        name_nin                 IN BOOLEAN := TRUE,
        gender_in                IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        gender_nin               IN BOOLEAN := TRUE,
        dt_birth_in              IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        dt_birth_nin             IN BOOLEAN := TRUE,
        age_in                   IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        age_nin                  IN BOOLEAN := TRUE,
        address_in               IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        address_nin              IN BOOLEAN := TRUE,
        city_in                  IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        city_nin                 IN BOOLEAN := TRUE,
        pat_zip_code_in          IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        pat_zip_code_nin         IN BOOLEAN := TRUE,
        dt_report_mka_in         IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        dt_report_mka_nin        IN BOOLEAN := TRUE,
        cpa_code_in              IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        cpa_code_nin             IN BOOLEAN := TRUE,
        transport_number_in      IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        transport_number_nin     IN BOOLEAN := TRUE,
        acc_zip_code_in          IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        acc_zip_code_nin         IN BOOLEAN := TRUE,
        latitude_in              IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        latitude_nin             IN BOOLEAN := TRUE,
        longitude_in             IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        longitude_nin            IN BOOLEAN := TRUE,
        dt_ride_out_in           IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_ride_out_nin          IN BOOLEAN := TRUE,
        dt_arrival_in            IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        dt_arrival_nin           IN BOOLEAN := TRUE,
        flg_mech_inj_in          IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        flg_mech_inj_nin         IN BOOLEAN := TRUE,
        mech_injury_in           IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        mech_injury_nin          IN BOOLEAN := TRUE,
        dt_drv_away_in           IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        dt_drv_away_nin          IN BOOLEAN := TRUE,
        flg_status_in            IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        flg_status_nin           IN BOOLEAN := TRUE,
        id_prof_create_in        IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin       IN BOOLEAN := TRUE,
        dt_pre_hosp_accident_in  IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_nin IN BOOLEAN := TRUE,
        id_episode_in            IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        create_user_in           IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        flg_prot_device_in       IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_prot_device_nin      IN BOOLEAN := TRUE,
        flg_rta_pat_typ_in       IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        flg_rta_pat_typ_nin      IN BOOLEAN := TRUE,
        rta_pat_typ_ft_in        IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        rta_pat_typ_ft_nin       IN BOOLEAN := TRUE,
        flg_is_driv_own_in       IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_is_driv_own_nin      IN BOOLEAN := TRUE,
        flg_police_involved_in   IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        flg_police_involved_nin  IN BOOLEAN := TRUE,
        police_num_in            IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_num_nin           IN BOOLEAN := TRUE,
        police_station_in        IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_station_nin       IN BOOLEAN := TRUE,
        police_accident_num_in   IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        police_accident_num_nin  IN BOOLEAN := TRUE,
        id_amb_trust_code_in     IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        id_amb_trust_code_nin    IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pre_hosp_accident_in  => id_pre_hosp_accident_in,
            id_institution_in        => id_institution_in,
            id_institution_nin       => id_institution_nin,
            id_software_in           => id_software_in,
            id_software_nin          => id_software_nin,
            dt_accident_in           => dt_accident_in,
            dt_accident_nin          => dt_accident_nin,
            name_in                  => name_in,
            name_nin                 => name_nin,
            gender_in                => gender_in,
            gender_nin               => gender_nin,
            dt_birth_in              => dt_birth_in,
            dt_birth_nin             => dt_birth_nin,
            age_in                   => age_in,
            age_nin                  => age_nin,
            address_in               => address_in,
            address_nin              => address_nin,
            city_in                  => city_in,
            city_nin                 => city_nin,
            pat_zip_code_in          => pat_zip_code_in,
            pat_zip_code_nin         => pat_zip_code_nin,
            dt_report_mka_in         => dt_report_mka_in,
            dt_report_mka_nin        => dt_report_mka_nin,
            cpa_code_in              => cpa_code_in,
            cpa_code_nin             => cpa_code_nin,
            transport_number_in      => transport_number_in,
            transport_number_nin     => transport_number_nin,
            acc_zip_code_in          => acc_zip_code_in,
            acc_zip_code_nin         => acc_zip_code_nin,
            latitude_in              => latitude_in,
            latitude_nin             => latitude_nin,
            longitude_in             => longitude_in,
            longitude_nin            => longitude_nin,
            dt_ride_out_in           => dt_ride_out_in,
            dt_ride_out_nin          => dt_ride_out_nin,
            dt_arrival_in            => dt_arrival_in,
            dt_arrival_nin           => dt_arrival_nin,
            flg_mech_inj_in          => flg_mech_inj_in,
            flg_mech_inj_nin         => flg_mech_inj_nin,
            mech_injury_in           => mech_injury_in,
            mech_injury_nin          => mech_injury_nin,
            dt_drv_away_in           => dt_drv_away_in,
            dt_drv_away_nin          => dt_drv_away_nin,
            flg_status_in            => flg_status_in,
            flg_status_nin           => flg_status_nin,
            id_prof_create_in        => id_prof_create_in,
            id_prof_create_nin       => id_prof_create_nin,
            dt_pre_hosp_accident_in  => dt_pre_hosp_accident_in,
            dt_pre_hosp_accident_nin => dt_pre_hosp_accident_nin,
            id_episode_in            => id_episode_in,
            id_episode_nin           => id_episode_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            flg_prot_device_in       => flg_prot_device_in,
            flg_prot_device_nin      => flg_prot_device_nin,
            flg_rta_pat_typ_in       => flg_rta_pat_typ_in,
            flg_rta_pat_typ_nin      => flg_rta_pat_typ_nin,
            rta_pat_typ_ft_in        => rta_pat_typ_ft_in,
            rta_pat_typ_ft_nin       => rta_pat_typ_ft_nin,
            flg_is_driv_own_in       => flg_is_driv_own_in,
            flg_is_driv_own_nin      => flg_is_driv_own_nin,
            flg_police_involved_in   => flg_police_involved_in,
            flg_police_involved_nin  => flg_police_involved_nin,
            police_num_in            => police_num_in,
            police_num_nin           => police_num_nin,
            police_station_in        => police_station_in,
            police_station_nin       => police_station_nin,
            police_accident_num_in   => police_accident_num_in,
            police_accident_num_nin  => police_accident_num_nin,
            id_amb_trust_code_in     => id_amb_trust_code_in,
            id_amb_trust_code_nin    => id_amb_trust_code_nin,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_institution_in        IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_institution_nin       IN BOOLEAN := TRUE,
        id_software_in           IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        id_software_nin          IN BOOLEAN := TRUE,
        dt_accident_in           IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        dt_accident_nin          IN BOOLEAN := TRUE,
        name_in                  IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        name_nin                 IN BOOLEAN := TRUE,
        gender_in                IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        gender_nin               IN BOOLEAN := TRUE,
        dt_birth_in              IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        dt_birth_nin             IN BOOLEAN := TRUE,
        age_in                   IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        age_nin                  IN BOOLEAN := TRUE,
        address_in               IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        address_nin              IN BOOLEAN := TRUE,
        city_in                  IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        city_nin                 IN BOOLEAN := TRUE,
        pat_zip_code_in          IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        pat_zip_code_nin         IN BOOLEAN := TRUE,
        dt_report_mka_in         IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        dt_report_mka_nin        IN BOOLEAN := TRUE,
        cpa_code_in              IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        cpa_code_nin             IN BOOLEAN := TRUE,
        transport_number_in      IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        transport_number_nin     IN BOOLEAN := TRUE,
        acc_zip_code_in          IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        acc_zip_code_nin         IN BOOLEAN := TRUE,
        latitude_in              IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        latitude_nin             IN BOOLEAN := TRUE,
        longitude_in             IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        longitude_nin            IN BOOLEAN := TRUE,
        dt_ride_out_in           IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_ride_out_nin          IN BOOLEAN := TRUE,
        dt_arrival_in            IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        dt_arrival_nin           IN BOOLEAN := TRUE,
        flg_mech_inj_in          IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        flg_mech_inj_nin         IN BOOLEAN := TRUE,
        mech_injury_in           IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        mech_injury_nin          IN BOOLEAN := TRUE,
        dt_drv_away_in           IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        dt_drv_away_nin          IN BOOLEAN := TRUE,
        flg_status_in            IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        flg_status_nin           IN BOOLEAN := TRUE,
        id_prof_create_in        IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin       IN BOOLEAN := TRUE,
        dt_pre_hosp_accident_in  IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_nin IN BOOLEAN := TRUE,
        id_episode_in            IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        create_user_in           IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        flg_prot_device_in       IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_prot_device_nin      IN BOOLEAN := TRUE,
        flg_rta_pat_typ_in       IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        flg_rta_pat_typ_nin      IN BOOLEAN := TRUE,
        rta_pat_typ_ft_in        IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        rta_pat_typ_ft_nin       IN BOOLEAN := TRUE,
        flg_is_driv_own_in       IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_is_driv_own_nin      IN BOOLEAN := TRUE,
        flg_police_involved_in   IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        flg_police_involved_nin  IN BOOLEAN := TRUE,
        police_num_in            IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_num_nin           IN BOOLEAN := TRUE,
        police_station_in        IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_station_nin       IN BOOLEAN := TRUE,
        police_accident_num_in   IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        police_accident_num_nin  IN BOOLEAN := TRUE,
        id_amb_trust_code_in     IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        id_amb_trust_code_nin    IN BOOLEAN := TRUE,
        where_in                 VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_sql                    VARCHAR2(32767);
        l_rows_out               table_varchar;
        l_id_institution_n       NUMBER(1);
        l_id_software_n          NUMBER(1);
        l_dt_accident_n          NUMBER(1);
        l_name_n                 NUMBER(1);
        l_gender_n               NUMBER(1);
        l_dt_birth_n             NUMBER(1);
        l_age_n                  NUMBER(1);
        l_address_n              NUMBER(1);
        l_city_n                 NUMBER(1);
        l_pat_zip_code_n         NUMBER(1);
        l_dt_report_mka_n        NUMBER(1);
        l_cpa_code_n             NUMBER(1);
        l_transport_number_n     NUMBER(1);
        l_acc_zip_code_n         NUMBER(1);
        l_latitude_n             NUMBER(1);
        l_longitude_n            NUMBER(1);
        l_dt_ride_out_n          NUMBER(1);
        l_dt_arrival_n           NUMBER(1);
        l_flg_mech_inj_n         NUMBER(1);
        l_mech_injury_n          NUMBER(1);
        l_dt_drv_away_n          NUMBER(1);
        l_flg_status_n           NUMBER(1);
        l_id_prof_create_n       NUMBER(1);
        l_dt_pre_hosp_accident_n NUMBER(1);
        l_id_episode_n           NUMBER(1);
        l_create_user_n          NUMBER(1);
        l_create_time_n          NUMBER(1);
        l_create_institution_n   NUMBER(1);
        l_update_user_n          NUMBER(1);
        l_update_time_n          NUMBER(1);
        l_update_institution_n   NUMBER(1);
        l_flg_prot_device_n      NUMBER(1);
        l_flg_rta_pat_typ_n      NUMBER(1);
        l_rta_pat_typ_ft_n       NUMBER(1);
        l_flg_is_driv_own_n      NUMBER(1);
        l_flg_police_involved_n  NUMBER(1);
        l_police_num_n           NUMBER(1);
        l_police_station_n       NUMBER(1);
        l_police_accident_num_n  NUMBER(1);
        l_id_amb_trust_code_n    NUMBER(1);
        id_pre_hosp_accident_in  pre_hosp_accident.id_pre_hosp_accident%TYPE;
    BEGIN
    
        l_id_institution_n       := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n          := sys.diutil.bool_to_int(id_software_nin);
        l_dt_accident_n          := sys.diutil.bool_to_int(dt_accident_nin);
        l_name_n                 := sys.diutil.bool_to_int(name_nin);
        l_gender_n               := sys.diutil.bool_to_int(gender_nin);
        l_dt_birth_n             := sys.diutil.bool_to_int(dt_birth_nin);
        l_age_n                  := sys.diutil.bool_to_int(age_nin);
        l_address_n              := sys.diutil.bool_to_int(address_nin);
        l_city_n                 := sys.diutil.bool_to_int(city_nin);
        l_pat_zip_code_n         := sys.diutil.bool_to_int(pat_zip_code_nin);
        l_dt_report_mka_n        := sys.diutil.bool_to_int(dt_report_mka_nin);
        l_cpa_code_n             := sys.diutil.bool_to_int(cpa_code_nin);
        l_transport_number_n     := sys.diutil.bool_to_int(transport_number_nin);
        l_acc_zip_code_n         := sys.diutil.bool_to_int(acc_zip_code_nin);
        l_latitude_n             := sys.diutil.bool_to_int(latitude_nin);
        l_longitude_n            := sys.diutil.bool_to_int(longitude_nin);
        l_dt_ride_out_n          := sys.diutil.bool_to_int(dt_ride_out_nin);
        l_dt_arrival_n           := sys.diutil.bool_to_int(dt_arrival_nin);
        l_flg_mech_inj_n         := sys.diutil.bool_to_int(flg_mech_inj_nin);
        l_mech_injury_n          := sys.diutil.bool_to_int(mech_injury_nin);
        l_dt_drv_away_n          := sys.diutil.bool_to_int(dt_drv_away_nin);
        l_flg_status_n           := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_create_n       := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_pre_hosp_accident_n := sys.diutil.bool_to_int(dt_pre_hosp_accident_nin);
        l_id_episode_n           := sys.diutil.bool_to_int(id_episode_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_prot_device_n      := sys.diutil.bool_to_int(flg_prot_device_nin);
        l_flg_rta_pat_typ_n      := sys.diutil.bool_to_int(flg_rta_pat_typ_nin);
        l_rta_pat_typ_ft_n       := sys.diutil.bool_to_int(rta_pat_typ_ft_nin);
        l_flg_is_driv_own_n      := sys.diutil.bool_to_int(flg_is_driv_own_nin);
        l_flg_police_involved_n  := sys.diutil.bool_to_int(flg_police_involved_nin);
        l_police_num_n           := sys.diutil.bool_to_int(police_num_nin);
        l_police_station_n       := sys.diutil.bool_to_int(police_station_nin);
        l_police_accident_num_n  := sys.diutil.bool_to_int(police_accident_num_nin);
        l_id_amb_trust_code_n    := sys.diutil.bool_to_int(id_amb_trust_code_nin);
    
        l_sql := 'UPDATE PRE_HOSP_ACCIDENT SET ' || ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' ID_SOFTWARE = decode (' || l_id_software_n ||
                 ',0,:id_software_in, NVL (:id_software_in, ID_SOFTWARE)) ' || ',' || ' DT_ACCIDENT = decode (' ||
                 l_dt_accident_n || ',0,:dt_accident_in, NVL (:dt_accident_in, DT_ACCIDENT)) ' || ',' ||
                 ' NAME = decode (' || l_name_n || ',0,:name_in, NVL (:name_in, NAME)) ' || ',' || ' GENDER = decode (' ||
                 l_gender_n || ',0,:gender_in, NVL (:gender_in, GENDER)) ' || ',' || ' DT_BIRTH = decode (' ||
                 l_dt_birth_n || ',0,:dt_birth_in, NVL (:dt_birth_in, DT_BIRTH)) ' || ',' || ' AGE = decode (' ||
                 l_age_n || ',0,:age_in, NVL (:age_in, AGE)) ' || ',' || ' ADDRESS = decode (' || l_address_n ||
                 ',0,:address_in, NVL (:address_in, ADDRESS)) ' || ',' || ' CITY = decode (' || l_city_n ||
                 ',0,:city_in, NVL (:city_in, CITY)) ' || ',' || ' PAT_ZIP_CODE = decode (' || l_pat_zip_code_n ||
                 ',0,:pat_zip_code_in, NVL (:pat_zip_code_in, PAT_ZIP_CODE)) ' || ',' || ' DT_REPORT_MKA = decode (' ||
                 l_dt_report_mka_n || ',0,:dt_report_mka_in, NVL (:dt_report_mka_in, DT_REPORT_MKA)) ' || ',' ||
                 ' CPA_CODE = decode (' || l_cpa_code_n || ',0,:cpa_code_in, NVL (:cpa_code_in, CPA_CODE)) ' || ',' ||
                 ' TRANSPORT_NUMBER = decode (' || l_transport_number_n ||
                 ',0,:transport_number_in, NVL (:transport_number_in, TRANSPORT_NUMBER)) ' || ',' ||
                 ' ACC_ZIP_CODE = decode (' || l_acc_zip_code_n ||
                 ',0,:acc_zip_code_in, NVL (:acc_zip_code_in, ACC_ZIP_CODE)) ' || ',' || ' LATITUDE = decode (' ||
                 l_latitude_n || ',0,:latitude_in, NVL (:latitude_in, LATITUDE)) ' || ',' || ' LONGITUDE = decode (' ||
                 l_longitude_n || ',0,:longitude_in, NVL (:longitude_in, LONGITUDE)) ' || ',' ||
                 ' DT_RIDE_OUT = decode (' || l_dt_ride_out_n ||
                 ',0,:dt_ride_out_in, NVL (:dt_ride_out_in, DT_RIDE_OUT)) ' || ',' || ' DT_ARRIVAL = decode (' ||
                 l_dt_arrival_n || ',0,:dt_arrival_in, NVL (:dt_arrival_in, DT_ARRIVAL)) ' || ',' ||
                 ' FLG_MECH_INJ = decode (' || l_flg_mech_inj_n ||
                 ',0,:flg_mech_inj_in, NVL (:flg_mech_inj_in, FLG_MECH_INJ)) ' || ',' || ' MECH_INJURY = decode (' ||
                 l_mech_injury_n || ',0,:mech_injury_in, NVL (:mech_injury_in, MECH_INJURY)) ' || ',' ||
                 ' DT_DRV_AWAY = decode (' || l_dt_drv_away_n ||
                 ',0,:dt_drv_away_in, NVL (:dt_drv_away_in, DT_DRV_AWAY)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_PROF_CREATE = decode (' || l_id_prof_create_n ||
                 ',0,:id_prof_create_in, NVL (:id_prof_create_in, ID_PROF_CREATE)) ' || ',' ||
                 ' DT_PRE_HOSP_ACCIDENT = decode (' || l_dt_pre_hosp_accident_n ||
                 ',0,:dt_pre_hosp_accident_in, NVL (:dt_pre_hosp_accident_in, DT_PRE_HOSP_ACCIDENT)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' FLG_PROT_DEVICE = decode (' || l_flg_prot_device_n ||
                 ',0,:flg_prot_device_in, NVL (:flg_prot_device_in, FLG_PROT_DEVICE)) ' || ',' ||
                 ' FLG_RTA_PAT_TYP = decode (' || l_flg_rta_pat_typ_n ||
                 ',0,:flg_rta_pat_typ_in, NVL (:flg_rta_pat_typ_in, FLG_RTA_PAT_TYP)) ' || ',' ||
                 ' RTA_PAT_TYP_FT = decode (' || l_rta_pat_typ_ft_n ||
                 ',0,:rta_pat_typ_ft_in, NVL (:rta_pat_typ_ft_in, RTA_PAT_TYP_FT)) ' || ',' ||
                 ' FLG_IS_DRIV_OWN = decode (' || l_flg_is_driv_own_n ||
                 ',0,:flg_is_driv_own_in, NVL (:flg_is_driv_own_in, FLG_IS_DRIV_OWN)) ' || ',' ||
                 ' FLG_POLICE_INVOLVED = decode (' || l_flg_police_involved_n ||
                 ',0,:flg_police_involved_in, NVL (:flg_police_involved_in, FLG_POLICE_INVOLVED)) ' || ',' ||
                 ' POLICE_NUM = decode (' || l_police_num_n || ',0,:police_num_in, NVL (:police_num_in, POLICE_NUM)) ' || ',' ||
                 ' POLICE_STATION = decode (' || l_police_station_n ||
                 ',0,:police_station_in, NVL (:police_station_in, POLICE_STATION)) ' || ',' ||
                 ' POLICE_ACCIDENT_NUM = decode (' || l_police_accident_num_n ||
                 ',0,:police_accident_num_in, NVL (:police_accident_num_in, POLICE_ACCIDENT_NUM)) ' || ',' ||
                 ' ID_AMB_TRUST_CODE = decode (' || l_id_amb_trust_code_n ||
                 ',0,:id_amb_trust_code_in, NVL (:id_amb_trust_code_in, ID_AMB_TRUST_CODE)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_institution_in, id_software_in, dt_accident_in, name_in, gender_in, dt_birth_in, age_in, address_in, city_in, pat_zip_code_in, dt_report_mka_in, cpa_code_in, transport_number_in, acc_zip_code_in, latitude_in, longitude_in, dt_ride_out_in, dt_arrival_in, flg_mech_inj_in, mech_injury_in, dt_drv_away_in, flg_status_in, id_prof_create_in, dt_pre_hosp_accident_in, id_episode_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_prot_device_in, flg_rta_pat_typ_in, rta_pat_typ_ft_in, flg_is_driv_own_in, flg_police_involved_in, police_num_in, police_station_in, police_accident_num_in, id_amb_trust_code_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PRE_HOSP_ACCIDENT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    IF l_name = 'PR_HSP_ACC_AMB_SL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_AMB_TRUST_CODE',
                                                        value_in           => id_amb_trust_code_in);
                    END IF;
                    IF l_name = 'PR_HSP_ACC_EPI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PR_HSP_ACC_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PR_HSP_ACC_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATE',
                                                        value_in           => id_prof_create_in);
                    END IF;
                    IF l_name = 'PR_HSP_ACC_SOFT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_institution_in        IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_institution_nin       IN BOOLEAN := TRUE,
        id_software_in           IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        id_software_nin          IN BOOLEAN := TRUE,
        dt_accident_in           IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        dt_accident_nin          IN BOOLEAN := TRUE,
        name_in                  IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        name_nin                 IN BOOLEAN := TRUE,
        gender_in                IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        gender_nin               IN BOOLEAN := TRUE,
        dt_birth_in              IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        dt_birth_nin             IN BOOLEAN := TRUE,
        age_in                   IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        age_nin                  IN BOOLEAN := TRUE,
        address_in               IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        address_nin              IN BOOLEAN := TRUE,
        city_in                  IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        city_nin                 IN BOOLEAN := TRUE,
        pat_zip_code_in          IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        pat_zip_code_nin         IN BOOLEAN := TRUE,
        dt_report_mka_in         IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        dt_report_mka_nin        IN BOOLEAN := TRUE,
        cpa_code_in              IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        cpa_code_nin             IN BOOLEAN := TRUE,
        transport_number_in      IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        transport_number_nin     IN BOOLEAN := TRUE,
        acc_zip_code_in          IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        acc_zip_code_nin         IN BOOLEAN := TRUE,
        latitude_in              IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        latitude_nin             IN BOOLEAN := TRUE,
        longitude_in             IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        longitude_nin            IN BOOLEAN := TRUE,
        dt_ride_out_in           IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_ride_out_nin          IN BOOLEAN := TRUE,
        dt_arrival_in            IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        dt_arrival_nin           IN BOOLEAN := TRUE,
        flg_mech_inj_in          IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        flg_mech_inj_nin         IN BOOLEAN := TRUE,
        mech_injury_in           IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        mech_injury_nin          IN BOOLEAN := TRUE,
        dt_drv_away_in           IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        dt_drv_away_nin          IN BOOLEAN := TRUE,
        flg_status_in            IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        flg_status_nin           IN BOOLEAN := TRUE,
        id_prof_create_in        IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin       IN BOOLEAN := TRUE,
        dt_pre_hosp_accident_in  IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_nin IN BOOLEAN := TRUE,
        id_episode_in            IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        create_user_in           IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        flg_prot_device_in       IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_prot_device_nin      IN BOOLEAN := TRUE,
        flg_rta_pat_typ_in       IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        flg_rta_pat_typ_nin      IN BOOLEAN := TRUE,
        rta_pat_typ_ft_in        IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        rta_pat_typ_ft_nin       IN BOOLEAN := TRUE,
        flg_is_driv_own_in       IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_is_driv_own_nin      IN BOOLEAN := TRUE,
        flg_police_involved_in   IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        flg_police_involved_nin  IN BOOLEAN := TRUE,
        police_num_in            IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_num_nin           IN BOOLEAN := TRUE,
        police_station_in        IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_station_nin       IN BOOLEAN := TRUE,
        police_accident_num_in   IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        police_accident_num_nin  IN BOOLEAN := TRUE,
        id_amb_trust_code_in     IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        id_amb_trust_code_nin    IN BOOLEAN := TRUE,
        where_in                 VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_institution_in        => id_institution_in,
            id_institution_nin       => id_institution_nin,
            id_software_in           => id_software_in,
            id_software_nin          => id_software_nin,
            dt_accident_in           => dt_accident_in,
            dt_accident_nin          => dt_accident_nin,
            name_in                  => name_in,
            name_nin                 => name_nin,
            gender_in                => gender_in,
            gender_nin               => gender_nin,
            dt_birth_in              => dt_birth_in,
            dt_birth_nin             => dt_birth_nin,
            age_in                   => age_in,
            age_nin                  => age_nin,
            address_in               => address_in,
            address_nin              => address_nin,
            city_in                  => city_in,
            city_nin                 => city_nin,
            pat_zip_code_in          => pat_zip_code_in,
            pat_zip_code_nin         => pat_zip_code_nin,
            dt_report_mka_in         => dt_report_mka_in,
            dt_report_mka_nin        => dt_report_mka_nin,
            cpa_code_in              => cpa_code_in,
            cpa_code_nin             => cpa_code_nin,
            transport_number_in      => transport_number_in,
            transport_number_nin     => transport_number_nin,
            acc_zip_code_in          => acc_zip_code_in,
            acc_zip_code_nin         => acc_zip_code_nin,
            latitude_in              => latitude_in,
            latitude_nin             => latitude_nin,
            longitude_in             => longitude_in,
            longitude_nin            => longitude_nin,
            dt_ride_out_in           => dt_ride_out_in,
            dt_ride_out_nin          => dt_ride_out_nin,
            dt_arrival_in            => dt_arrival_in,
            dt_arrival_nin           => dt_arrival_nin,
            flg_mech_inj_in          => flg_mech_inj_in,
            flg_mech_inj_nin         => flg_mech_inj_nin,
            mech_injury_in           => mech_injury_in,
            mech_injury_nin          => mech_injury_nin,
            dt_drv_away_in           => dt_drv_away_in,
            dt_drv_away_nin          => dt_drv_away_nin,
            flg_status_in            => flg_status_in,
            flg_status_nin           => flg_status_nin,
            id_prof_create_in        => id_prof_create_in,
            id_prof_create_nin       => id_prof_create_nin,
            dt_pre_hosp_accident_in  => dt_pre_hosp_accident_in,
            dt_pre_hosp_accident_nin => dt_pre_hosp_accident_nin,
            id_episode_in            => id_episode_in,
            id_episode_nin           => id_episode_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            flg_prot_device_in       => flg_prot_device_in,
            flg_prot_device_nin      => flg_prot_device_nin,
            flg_rta_pat_typ_in       => flg_rta_pat_typ_in,
            flg_rta_pat_typ_nin      => flg_rta_pat_typ_nin,
            rta_pat_typ_ft_in        => rta_pat_typ_ft_in,
            rta_pat_typ_ft_nin       => rta_pat_typ_ft_nin,
            flg_is_driv_own_in       => flg_is_driv_own_in,
            flg_is_driv_own_nin      => flg_is_driv_own_nin,
            flg_police_involved_in   => flg_police_involved_in,
            flg_police_involved_nin  => flg_police_involved_nin,
            police_num_in            => police_num_in,
            police_num_nin           => police_num_nin,
            police_station_in        => police_station_in,
            police_station_nin       => police_station_nin,
            police_accident_num_in   => police_accident_num_in,
            police_accident_num_nin  => police_accident_num_nin,
            id_amb_trust_code_in     => id_amb_trust_code_in,
            id_amb_trust_code_nin    => id_amb_trust_code_nin,
            where_in                 => where_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pre_hosp_accident%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_pre_hosp_accident_in => rec_in.id_pre_hosp_accident,
            id_institution_in       => rec_in.id_institution,
            id_software_in          => rec_in.id_software,
            dt_accident_in          => rec_in.dt_accident,
            name_in                 => rec_in.name,
            gender_in               => rec_in.gender,
            dt_birth_in             => rec_in.dt_birth,
            age_in                  => rec_in.age,
            address_in              => rec_in.address,
            city_in                 => rec_in.city,
            pat_zip_code_in         => rec_in.pat_zip_code,
            dt_report_mka_in        => rec_in.dt_report_mka,
            cpa_code_in             => rec_in.cpa_code,
            transport_number_in     => rec_in.transport_number,
            acc_zip_code_in         => rec_in.acc_zip_code,
            latitude_in             => rec_in.latitude,
            longitude_in            => rec_in.longitude,
            dt_ride_out_in          => rec_in.dt_ride_out,
            dt_arrival_in           => rec_in.dt_arrival,
            flg_mech_inj_in         => rec_in.flg_mech_inj,
            mech_injury_in          => rec_in.mech_injury,
            dt_drv_away_in          => rec_in.dt_drv_away,
            flg_status_in           => rec_in.flg_status,
            id_prof_create_in       => rec_in.id_prof_create,
            dt_pre_hosp_accident_in => rec_in.dt_pre_hosp_accident,
            id_episode_in           => rec_in.id_episode,
            create_user_in          => rec_in.create_user,
            create_time_in          => rec_in.create_time,
            create_institution_in   => rec_in.create_institution,
            update_user_in          => rec_in.update_user,
            update_time_in          => rec_in.update_time,
            update_institution_in   => rec_in.update_institution,
            flg_prot_device_in      => rec_in.flg_prot_device,
            flg_rta_pat_typ_in      => rec_in.flg_rta_pat_typ,
            rta_pat_typ_ft_in       => rec_in.rta_pat_typ_ft,
            flg_is_driv_own_in      => rec_in.flg_is_driv_own,
            flg_police_involved_in  => rec_in.flg_police_involved,
            police_num_in           => rec_in.police_num,
            police_station_in       => rec_in.police_station,
            police_accident_num_in  => rec_in.police_accident_num,
            id_amb_trust_code_in    => rec_in.id_amb_trust_code
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pre_hosp_accident%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pre_hosp_accident_in => rec_in.id_pre_hosp_accident,
            id_institution_in       => rec_in.id_institution,
            id_software_in          => rec_in.id_software,
            dt_accident_in          => rec_in.dt_accident,
            name_in                 => rec_in.name,
            gender_in               => rec_in.gender,
            dt_birth_in             => rec_in.dt_birth,
            age_in                  => rec_in.age,
            address_in              => rec_in.address,
            city_in                 => rec_in.city,
            pat_zip_code_in         => rec_in.pat_zip_code,
            dt_report_mka_in        => rec_in.dt_report_mka,
            cpa_code_in             => rec_in.cpa_code,
            transport_number_in     => rec_in.transport_number,
            acc_zip_code_in         => rec_in.acc_zip_code,
            latitude_in             => rec_in.latitude,
            longitude_in            => rec_in.longitude,
            dt_ride_out_in          => rec_in.dt_ride_out,
            dt_arrival_in           => rec_in.dt_arrival,
            flg_mech_inj_in         => rec_in.flg_mech_inj,
            mech_injury_in          => rec_in.mech_injury,
            dt_drv_away_in          => rec_in.dt_drv_away,
            flg_status_in           => rec_in.flg_status,
            id_prof_create_in       => rec_in.id_prof_create,
            dt_pre_hosp_accident_in => rec_in.dt_pre_hosp_accident,
            id_episode_in           => rec_in.id_episode,
            create_user_in          => rec_in.create_user,
            create_time_in          => rec_in.create_time,
            create_institution_in   => rec_in.create_institution,
            update_user_in          => rec_in.update_user,
            update_time_in          => rec_in.update_time,
            update_institution_in   => rec_in.update_institution,
            flg_prot_device_in      => rec_in.flg_prot_device,
            flg_rta_pat_typ_in      => rec_in.flg_rta_pat_typ,
            rta_pat_typ_ft_in       => rec_in.rta_pat_typ_ft,
            flg_is_driv_own_in      => rec_in.flg_is_driv_own,
            flg_police_involved_in  => rec_in.flg_police_involved,
            police_num_in           => rec_in.police_num,
            police_station_in       => rec_in.police_station,
            police_accident_num_in  => rec_in.police_accident_num,
            id_amb_trust_code_in    => rec_in.id_amb_trust_code
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_pre_hosp_accident_in IN pre_hosp_accident.id_pre_hosp_accident%TYPE,
        id_institution_in       IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        dt_accident_in          IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        name_in                 IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        gender_in               IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        dt_birth_in             IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        age_in                  IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        address_in              IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        city_in                 IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        pat_zip_code_in         IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        dt_report_mka_in        IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        cpa_code_in             IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        transport_number_in     IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        acc_zip_code_in         IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        latitude_in             IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        longitude_in            IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        dt_ride_out_in          IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_arrival_in           IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        flg_mech_inj_in         IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        mech_injury_in          IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        dt_drv_away_in          IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        flg_status_in           IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in       IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_in IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        id_episode_in           IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        create_user_in          IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_time_in          IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_time_in          IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        flg_prot_device_in      IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_rta_pat_typ_in      IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        rta_pat_typ_ft_in       IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        flg_is_driv_own_in      IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_police_involved_in  IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        police_num_in           IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_station_in       IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_accident_num_in  IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        id_amb_trust_code_in    IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        upd(id_pre_hosp_accident_in => id_pre_hosp_accident_in,
            id_institution_in       => id_institution_in,
            id_software_in          => id_software_in,
            dt_accident_in          => dt_accident_in,
            name_in                 => name_in,
            gender_in               => gender_in,
            dt_birth_in             => dt_birth_in,
            age_in                  => age_in,
            address_in              => address_in,
            city_in                 => city_in,
            pat_zip_code_in         => pat_zip_code_in,
            dt_report_mka_in        => dt_report_mka_in,
            cpa_code_in             => cpa_code_in,
            transport_number_in     => transport_number_in,
            acc_zip_code_in         => acc_zip_code_in,
            latitude_in             => latitude_in,
            longitude_in            => longitude_in,
            dt_ride_out_in          => dt_ride_out_in,
            dt_arrival_in           => dt_arrival_in,
            flg_mech_inj_in         => flg_mech_inj_in,
            mech_injury_in          => mech_injury_in,
            dt_drv_away_in          => dt_drv_away_in,
            flg_status_in           => flg_status_in,
            id_prof_create_in       => id_prof_create_in,
            dt_pre_hosp_accident_in => dt_pre_hosp_accident_in,
            id_episode_in           => id_episode_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            flg_prot_device_in      => flg_prot_device_in,
            flg_rta_pat_typ_in      => flg_rta_pat_typ_in,
            rta_pat_typ_ft_in       => rta_pat_typ_ft_in,
            flg_is_driv_own_in      => flg_is_driv_own_in,
            flg_police_involved_in  => flg_police_involved_in,
            police_num_in           => police_num_in,
            police_station_in       => police_station_in,
            police_accident_num_in  => police_accident_num_in,
            id_amb_trust_code_in    => id_amb_trust_code_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_pre_hosp_accident_in => id_pre_hosp_accident_in,
                id_institution_in       => id_institution_in,
                id_software_in          => id_software_in,
                dt_accident_in          => dt_accident_in,
                name_in                 => name_in,
                gender_in               => gender_in,
                dt_birth_in             => dt_birth_in,
                age_in                  => age_in,
                address_in              => address_in,
                city_in                 => city_in,
                pat_zip_code_in         => pat_zip_code_in,
                dt_report_mka_in        => dt_report_mka_in,
                cpa_code_in             => cpa_code_in,
                transport_number_in     => transport_number_in,
                acc_zip_code_in         => acc_zip_code_in,
                latitude_in             => latitude_in,
                longitude_in            => longitude_in,
                dt_ride_out_in          => dt_ride_out_in,
                dt_arrival_in           => dt_arrival_in,
                flg_mech_inj_in         => flg_mech_inj_in,
                mech_injury_in          => mech_injury_in,
                dt_drv_away_in          => dt_drv_away_in,
                flg_status_in           => flg_status_in,
                id_prof_create_in       => id_prof_create_in,
                dt_pre_hosp_accident_in => dt_pre_hosp_accident_in,
                id_episode_in           => id_episode_in,
                create_user_in          => create_user_in,
                create_time_in          => create_time_in,
                create_institution_in   => create_institution_in,
                update_user_in          => update_user_in,
                update_time_in          => update_time_in,
                update_institution_in   => update_institution_in,
                flg_prot_device_in      => flg_prot_device_in,
                flg_rta_pat_typ_in      => flg_rta_pat_typ_in,
                rta_pat_typ_ft_in       => rta_pat_typ_ft_in,
                flg_is_driv_own_in      => flg_is_driv_own_in,
                flg_police_involved_in  => flg_police_involved_in,
                police_num_in           => police_num_in,
                police_station_in       => police_station_in,
                police_accident_num_in  => police_accident_num_in,
                id_amb_trust_code_in    => id_amb_trust_code_in,
                handle_error_in         => handle_error_in,
                rows_out                => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_pre_hosp_accident_in IN pre_hosp_accident.id_pre_hosp_accident%TYPE,
        id_institution_in       IN pre_hosp_accident.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN pre_hosp_accident.id_software%TYPE DEFAULT NULL,
        dt_accident_in          IN pre_hosp_accident.dt_accident%TYPE DEFAULT NULL,
        name_in                 IN pre_hosp_accident.name%TYPE DEFAULT NULL,
        gender_in               IN pre_hosp_accident.gender%TYPE DEFAULT NULL,
        dt_birth_in             IN pre_hosp_accident.dt_birth%TYPE DEFAULT NULL,
        age_in                  IN pre_hosp_accident.age%TYPE DEFAULT NULL,
        address_in              IN pre_hosp_accident.address%TYPE DEFAULT NULL,
        city_in                 IN pre_hosp_accident.city%TYPE DEFAULT NULL,
        pat_zip_code_in         IN pre_hosp_accident.pat_zip_code%TYPE DEFAULT NULL,
        dt_report_mka_in        IN pre_hosp_accident.dt_report_mka%TYPE DEFAULT NULL,
        cpa_code_in             IN pre_hosp_accident.cpa_code%TYPE DEFAULT NULL,
        transport_number_in     IN pre_hosp_accident.transport_number%TYPE DEFAULT NULL,
        acc_zip_code_in         IN pre_hosp_accident.acc_zip_code%TYPE DEFAULT NULL,
        latitude_in             IN pre_hosp_accident.latitude%TYPE DEFAULT NULL,
        longitude_in            IN pre_hosp_accident.longitude%TYPE DEFAULT NULL,
        dt_ride_out_in          IN pre_hosp_accident.dt_ride_out%TYPE DEFAULT NULL,
        dt_arrival_in           IN pre_hosp_accident.dt_arrival%TYPE DEFAULT NULL,
        flg_mech_inj_in         IN pre_hosp_accident.flg_mech_inj%TYPE DEFAULT NULL,
        mech_injury_in          IN pre_hosp_accident.mech_injury%TYPE DEFAULT NULL,
        dt_drv_away_in          IN pre_hosp_accident.dt_drv_away%TYPE DEFAULT NULL,
        flg_status_in           IN pre_hosp_accident.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in       IN pre_hosp_accident.id_prof_create%TYPE DEFAULT NULL,
        dt_pre_hosp_accident_in IN pre_hosp_accident.dt_pre_hosp_accident%TYPE DEFAULT NULL,
        id_episode_in           IN pre_hosp_accident.id_episode%TYPE DEFAULT NULL,
        create_user_in          IN pre_hosp_accident.create_user%TYPE DEFAULT NULL,
        create_time_in          IN pre_hosp_accident.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN pre_hosp_accident.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN pre_hosp_accident.update_user%TYPE DEFAULT NULL,
        update_time_in          IN pre_hosp_accident.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN pre_hosp_accident.update_institution%TYPE DEFAULT NULL,
        flg_prot_device_in      IN pre_hosp_accident.flg_prot_device%TYPE DEFAULT NULL,
        flg_rta_pat_typ_in      IN pre_hosp_accident.flg_rta_pat_typ%TYPE DEFAULT NULL,
        rta_pat_typ_ft_in       IN pre_hosp_accident.rta_pat_typ_ft%TYPE DEFAULT NULL,
        flg_is_driv_own_in      IN pre_hosp_accident.flg_is_driv_own%TYPE DEFAULT NULL,
        flg_police_involved_in  IN pre_hosp_accident.flg_police_involved%TYPE DEFAULT NULL,
        police_num_in           IN pre_hosp_accident.police_num%TYPE DEFAULT NULL,
        police_station_in       IN pre_hosp_accident.police_station%TYPE DEFAULT NULL,
        police_accident_num_in  IN pre_hosp_accident.police_accident_num%TYPE DEFAULT NULL,
        id_amb_trust_code_in    IN pre_hosp_accident.id_amb_trust_code%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_pre_hosp_accident_in,
                id_institution_in,
                id_software_in,
                dt_accident_in,
                name_in,
                gender_in,
                dt_birth_in,
                age_in,
                address_in,
                city_in,
                pat_zip_code_in,
                dt_report_mka_in,
                cpa_code_in,
                transport_number_in,
                acc_zip_code_in,
                latitude_in,
                longitude_in,
                dt_ride_out_in,
                dt_arrival_in,
                flg_mech_inj_in,
                mech_injury_in,
                dt_drv_away_in,
                flg_status_in,
                id_prof_create_in,
                dt_pre_hosp_accident_in,
                id_episode_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_prot_device_in,
                flg_rta_pat_typ_in,
                rta_pat_typ_ft_in,
                flg_is_driv_own_in,
                flg_police_involved_in,
                police_num_in,
                police_station_in,
                police_accident_num_in,
                id_amb_trust_code_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pre_hosp_accident_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_pre_hosp_accident id_pre_hosp_accident_cc;
        l_id_institution       id_institution_cc;
        l_id_software          id_software_cc;
        l_dt_accident          dt_accident_cc;
        l_name                 name_cc;
        l_gender               gender_cc;
        l_dt_birth             dt_birth_cc;
        l_age                  age_cc;
        l_address              address_cc;
        l_city                 city_cc;
        l_pat_zip_code         pat_zip_code_cc;
        l_dt_report_mka        dt_report_mka_cc;
        l_cpa_code             cpa_code_cc;
        l_transport_number     transport_number_cc;
        l_acc_zip_code         acc_zip_code_cc;
        l_latitude             latitude_cc;
        l_longitude            longitude_cc;
        l_dt_ride_out          dt_ride_out_cc;
        l_dt_arrival           dt_arrival_cc;
        l_flg_mech_inj         flg_mech_inj_cc;
        l_mech_injury          mech_injury_cc;
        l_dt_drv_away          dt_drv_away_cc;
        l_flg_status           flg_status_cc;
        l_id_prof_create       id_prof_create_cc;
        l_dt_pre_hosp_accident dt_pre_hosp_accident_cc;
        l_id_episode           id_episode_cc;
        l_create_user          create_user_cc;
        l_create_time          create_time_cc;
        l_create_institution   create_institution_cc;
        l_update_user          update_user_cc;
        l_update_time          update_time_cc;
        l_update_institution   update_institution_cc;
        l_flg_prot_device      flg_prot_device_cc;
        l_flg_rta_pat_typ      flg_rta_pat_typ_cc;
        l_rta_pat_typ_ft       rta_pat_typ_ft_cc;
        l_flg_is_driv_own      flg_is_driv_own_cc;
        l_flg_police_involved  flg_police_involved_cc;
        l_police_num           police_num_cc;
        l_police_station       police_station_cc;
        l_police_accident_num  police_accident_num_cc;
        l_id_amb_trust_code    id_amb_trust_code_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_pre_hosp_accident(i) := col_in(i).id_pre_hosp_accident;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_software(i) := col_in(i).id_software;
            l_dt_accident(i) := col_in(i).dt_accident;
            l_name(i) := col_in(i).name;
            l_gender(i) := col_in(i).gender;
            l_dt_birth(i) := col_in(i).dt_birth;
            l_age(i) := col_in(i).age;
            l_address(i) := col_in(i).address;
            l_city(i) := col_in(i).city;
            l_pat_zip_code(i) := col_in(i).pat_zip_code;
            l_dt_report_mka(i) := col_in(i).dt_report_mka;
            l_cpa_code(i) := col_in(i).cpa_code;
            l_transport_number(i) := col_in(i).transport_number;
            l_acc_zip_code(i) := col_in(i).acc_zip_code;
            l_latitude(i) := col_in(i).latitude;
            l_longitude(i) := col_in(i).longitude;
            l_dt_ride_out(i) := col_in(i).dt_ride_out;
            l_dt_arrival(i) := col_in(i).dt_arrival;
            l_flg_mech_inj(i) := col_in(i).flg_mech_inj;
            l_mech_injury(i) := col_in(i).mech_injury;
            l_dt_drv_away(i) := col_in(i).dt_drv_away;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_create(i) := col_in(i).id_prof_create;
            l_dt_pre_hosp_accident(i) := col_in(i).dt_pre_hosp_accident;
            l_id_episode(i) := col_in(i).id_episode;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_prot_device(i) := col_in(i).flg_prot_device;
            l_flg_rta_pat_typ(i) := col_in(i).flg_rta_pat_typ;
            l_rta_pat_typ_ft(i) := col_in(i).rta_pat_typ_ft;
            l_flg_is_driv_own(i) := col_in(i).flg_is_driv_own;
            l_flg_police_involved(i) := col_in(i).flg_police_involved;
            l_police_num(i) := col_in(i).police_num;
            l_police_station(i) := col_in(i).police_station;
            l_police_accident_num(i) := col_in(i).police_accident_num;
            l_id_amb_trust_code(i) := col_in(i).id_amb_trust_code;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE pre_hosp_accident
                   SET id_institution       = nvl(l_id_institution(i), id_institution),
                       id_software          = nvl(l_id_software(i), id_software),
                       dt_accident          = nvl(l_dt_accident(i), dt_accident),
                       name                 = nvl(l_name(i), name),
                       gender               = nvl(l_gender(i), gender),
                       dt_birth             = nvl(l_dt_birth(i), dt_birth),
                       age                  = nvl(l_age(i), age),
                       address              = nvl(l_address(i), address),
                       city                 = nvl(l_city(i), city),
                       pat_zip_code         = nvl(l_pat_zip_code(i), pat_zip_code),
                       dt_report_mka        = nvl(l_dt_report_mka(i), dt_report_mka),
                       cpa_code             = nvl(l_cpa_code(i), cpa_code),
                       transport_number     = nvl(l_transport_number(i), transport_number),
                       acc_zip_code         = nvl(l_acc_zip_code(i), acc_zip_code),
                       latitude             = nvl(l_latitude(i), latitude),
                       longitude            = nvl(l_longitude(i), longitude),
                       dt_ride_out          = nvl(l_dt_ride_out(i), dt_ride_out),
                       dt_arrival           = nvl(l_dt_arrival(i), dt_arrival),
                       flg_mech_inj         = nvl(l_flg_mech_inj(i), flg_mech_inj),
                       mech_injury          = nvl(l_mech_injury(i), mech_injury),
                       dt_drv_away          = nvl(l_dt_drv_away(i), dt_drv_away),
                       flg_status           = nvl(l_flg_status(i), flg_status),
                       id_prof_create       = nvl(l_id_prof_create(i), id_prof_create),
                       dt_pre_hosp_accident = nvl(l_dt_pre_hosp_accident(i), dt_pre_hosp_accident),
                       id_episode           = nvl(l_id_episode(i), id_episode),
                       create_user          = nvl(l_create_user(i), create_user),
                       create_time          = nvl(l_create_time(i), create_time),
                       create_institution   = nvl(l_create_institution(i), create_institution),
                       update_user          = nvl(l_update_user(i), update_user),
                       update_time          = nvl(l_update_time(i), update_time),
                       update_institution   = nvl(l_update_institution(i), update_institution),
                       flg_prot_device      = nvl(l_flg_prot_device(i), flg_prot_device),
                       flg_rta_pat_typ      = nvl(l_flg_rta_pat_typ(i), flg_rta_pat_typ),
                       rta_pat_typ_ft       = nvl(l_rta_pat_typ_ft(i), rta_pat_typ_ft),
                       flg_is_driv_own      = nvl(l_flg_is_driv_own(i), flg_is_driv_own),
                       flg_police_involved  = nvl(l_flg_police_involved(i), flg_police_involved),
                       police_num           = nvl(l_police_num(i), police_num),
                       police_station       = nvl(l_police_station(i), police_station),
                       police_accident_num  = nvl(l_police_accident_num(i), police_accident_num),
                       id_amb_trust_code    = nvl(l_id_amb_trust_code(i), id_amb_trust_code)
                 WHERE id_pre_hosp_accident = l_id_pre_hosp_accident(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE pre_hosp_accident
                   SET id_institution       = l_id_institution(i),
                       id_software          = l_id_software(i),
                       dt_accident          = l_dt_accident(i),
                       name                 = l_name(i),
                       gender               = l_gender(i),
                       dt_birth             = l_dt_birth(i),
                       age                  = l_age(i),
                       address              = l_address(i),
                       city                 = l_city(i),
                       pat_zip_code         = l_pat_zip_code(i),
                       dt_report_mka        = l_dt_report_mka(i),
                       cpa_code             = l_cpa_code(i),
                       transport_number     = l_transport_number(i),
                       acc_zip_code         = l_acc_zip_code(i),
                       latitude             = l_latitude(i),
                       longitude            = l_longitude(i),
                       dt_ride_out          = l_dt_ride_out(i),
                       dt_arrival           = l_dt_arrival(i),
                       flg_mech_inj         = l_flg_mech_inj(i),
                       mech_injury          = l_mech_injury(i),
                       dt_drv_away          = l_dt_drv_away(i),
                       flg_status           = l_flg_status(i),
                       id_prof_create       = l_id_prof_create(i),
                       dt_pre_hosp_accident = l_dt_pre_hosp_accident(i),
                       id_episode           = l_id_episode(i),
                       create_user          = l_create_user(i),
                       create_time          = l_create_time(i),
                       create_institution   = l_create_institution(i),
                       update_user          = l_update_user(i),
                       update_time          = l_update_time(i),
                       update_institution   = l_update_institution(i),
                       flg_prot_device      = l_flg_prot_device(i),
                       flg_rta_pat_typ      = l_flg_rta_pat_typ(i),
                       rta_pat_typ_ft       = l_rta_pat_typ_ft(i),
                       flg_is_driv_own      = l_flg_is_driv_own(i),
                       flg_police_involved  = l_flg_police_involved(i),
                       police_num           = l_police_num(i),
                       police_station       = l_police_station(i),
                       police_accident_num  = l_police_accident_num(i),
                       id_amb_trust_code    = l_id_amb_trust_code(i)
                 WHERE id_pre_hosp_accident = l_id_pre_hosp_accident(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pre_hosp_accident_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PRE_HOSP_ACCIDENT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PRE_HOSP_ACCIDENT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PRE_HOSP_ACCIDENT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PRE_HOSP_ACCIDENT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_pre_hosp_accident_in IN pre_hosp_accident.id_pre_hosp_accident%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pre_hosp_accident
         WHERE id_pre_hosp_accident = id_pre_hosp_accident_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_pre_hosp_accident_in IN pre_hosp_accident.id_pre_hosp_accident%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_pre_hosp_accident_in => id_pre_hosp_accident_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PRE_HOSP_ACCIDENT
    PROCEDURE del_id_pre_hosp_accident
    (
        id_pre_hosp_accident_in IN pre_hosp_accident.id_pre_hosp_accident%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pre_hosp_accident
         WHERE id_pre_hosp_accident = id_pre_hosp_accident_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_pre_hosp_accident;

    -- Delete all rows for primary key column ID_PRE_HOSP_ACCIDENT
    PROCEDURE del_id_pre_hosp_accident
    (
        id_pre_hosp_accident_in IN pre_hosp_accident.id_pre_hosp_accident%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_pre_hosp_accident(id_pre_hosp_accident_in => id_pre_hosp_accident_in,
                                 handle_error_in         => handle_error_in,
                                 rows_out                => rows_out);
    END del_id_pre_hosp_accident;

    PROCEDURE del_pr_hsp_acc_amb_sl_fk
    (
        id_amb_trust_code_in IN pre_hosp_accident.id_amb_trust_code%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pre_hosp_accident
         WHERE id_amb_trust_code = del_pr_hsp_acc_amb_sl_fk.id_amb_trust_code_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pr_hsp_acc_amb_sl_fk;

    PROCEDURE del_pr_hsp_acc_amb_sl_fk
    (
        id_amb_trust_code_in IN pre_hosp_accident.id_amb_trust_code%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pr_hsp_acc_amb_sl_fk(id_amb_trust_code_in => id_amb_trust_code_in,
                                 handle_error_in      => handle_error_in,
                                 rows_out             => rows_out);
    END del_pr_hsp_acc_amb_sl_fk;

    PROCEDURE del_pr_hsp_acc_epi_fk
    (
        id_episode_in   IN pre_hosp_accident.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pre_hosp_accident
         WHERE id_episode = del_pr_hsp_acc_epi_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pr_hsp_acc_epi_fk;

    PROCEDURE del_pr_hsp_acc_epi_fk
    (
        id_episode_in   IN pre_hosp_accident.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pr_hsp_acc_epi_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pr_hsp_acc_epi_fk;

    PROCEDURE del_pr_hsp_acc_inst_fk
    (
        id_institution_in IN pre_hosp_accident.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pre_hosp_accident
         WHERE id_institution = del_pr_hsp_acc_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pr_hsp_acc_inst_fk;

    PROCEDURE del_pr_hsp_acc_inst_fk
    (
        id_institution_in IN pre_hosp_accident.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pr_hsp_acc_inst_fk(id_institution_in => id_institution_in,
                               handle_error_in   => handle_error_in,
                               rows_out          => rows_out);
    END del_pr_hsp_acc_inst_fk;

    PROCEDURE del_pr_hsp_acc_prof_fk
    (
        id_prof_create_in IN pre_hosp_accident.id_prof_create%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pre_hosp_accident
         WHERE id_prof_create = del_pr_hsp_acc_prof_fk.id_prof_create_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pr_hsp_acc_prof_fk;

    PROCEDURE del_pr_hsp_acc_prof_fk
    (
        id_prof_create_in IN pre_hosp_accident.id_prof_create%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pr_hsp_acc_prof_fk(id_prof_create_in => id_prof_create_in,
                               handle_error_in   => handle_error_in,
                               rows_out          => rows_out);
    END del_pr_hsp_acc_prof_fk;

    PROCEDURE del_pr_hsp_acc_soft_fk
    (
        id_software_in  IN pre_hosp_accident.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pre_hosp_accident
         WHERE id_software = del_pr_hsp_acc_soft_fk.id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pr_hsp_acc_soft_fk;

    PROCEDURE del_pr_hsp_acc_soft_fk
    (
        id_software_in  IN pre_hosp_accident.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pr_hsp_acc_soft_fk(id_software_in  => id_software_in,
                               handle_error_in => handle_error_in,
                               rows_out        => rows_out);
    END del_pr_hsp_acc_soft_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PRE_HOSP_ACCIDENT';
        ELSE
            RETURN 'DELETE FROM PRE_HOSP_ACCIDENT WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PRE_HOSP_ACCIDENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PRE_HOSP_ACCIDENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pre_hosp_accident_inout IN OUT pre_hosp_accident%ROWTYPE) IS
    BEGIN
        pre_hosp_accident_inout.id_pre_hosp_accident := NULL;
        pre_hosp_accident_inout.id_institution       := NULL;
        pre_hosp_accident_inout.id_software          := NULL;
        pre_hosp_accident_inout.dt_accident          := NULL;
        pre_hosp_accident_inout.name                 := NULL;
        pre_hosp_accident_inout.gender               := NULL;
        pre_hosp_accident_inout.dt_birth             := NULL;
        pre_hosp_accident_inout.age                  := NULL;
        pre_hosp_accident_inout.address              := NULL;
        pre_hosp_accident_inout.city                 := NULL;
        pre_hosp_accident_inout.pat_zip_code         := NULL;
        pre_hosp_accident_inout.dt_report_mka        := NULL;
        pre_hosp_accident_inout.cpa_code             := NULL;
        pre_hosp_accident_inout.transport_number     := NULL;
        pre_hosp_accident_inout.acc_zip_code         := NULL;
        pre_hosp_accident_inout.latitude             := NULL;
        pre_hosp_accident_inout.longitude            := NULL;
        pre_hosp_accident_inout.dt_ride_out          := NULL;
        pre_hosp_accident_inout.dt_arrival           := NULL;
        pre_hosp_accident_inout.flg_mech_inj         := NULL;
        pre_hosp_accident_inout.mech_injury          := NULL;
        pre_hosp_accident_inout.dt_drv_away          := NULL;
        pre_hosp_accident_inout.flg_status           := NULL;
        pre_hosp_accident_inout.id_prof_create       := NULL;
        pre_hosp_accident_inout.dt_pre_hosp_accident := NULL;
        pre_hosp_accident_inout.id_episode           := NULL;
        pre_hosp_accident_inout.create_user          := NULL;
        pre_hosp_accident_inout.create_time          := NULL;
        pre_hosp_accident_inout.create_institution   := NULL;
        pre_hosp_accident_inout.update_user          := NULL;
        pre_hosp_accident_inout.update_time          := NULL;
        pre_hosp_accident_inout.update_institution   := NULL;
        pre_hosp_accident_inout.flg_prot_device      := NULL;
        pre_hosp_accident_inout.flg_rta_pat_typ      := NULL;
        pre_hosp_accident_inout.rta_pat_typ_ft       := NULL;
        pre_hosp_accident_inout.flg_is_driv_own      := NULL;
        pre_hosp_accident_inout.flg_police_involved  := NULL;
        pre_hosp_accident_inout.police_num           := NULL;
        pre_hosp_accident_inout.police_station       := NULL;
        pre_hosp_accident_inout.police_accident_num  := NULL;
        pre_hosp_accident_inout.id_amb_trust_code    := NULL;
    END initrec;

    FUNCTION initrec RETURN pre_hosp_accident%ROWTYPE IS
        l_pre_hosp_accident pre_hosp_accident%ROWTYPE;
    BEGIN
        RETURN l_pre_hosp_accident;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pre_hosp_accident_tc IS
        data pre_hosp_accident_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pre_hosp_accident
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pre_hosp_accident_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pre_hosp_accident_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pre_hosp_accident;
/
