CREATE OR REPLACE PACKAGE BODY ts_epis_multi_prof_resp
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2018-01-15 10:30:54
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE IS
        retval epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_epis_multi_prof_resp.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in           IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        flg_status_in           IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        id_professional_in      IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        flg_profile_in          IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        dt_create_in            IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        id_epis_prof_resp_in    IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        create_user_in          IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        flg_main_responsible_in IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        id_speciality_in        IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        flg_resp_type_in        IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT 'E',
        priority_in             IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        dt_update_in            IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE := next_key;
    BEGIN
        ins(id_epis_multi_prof_resp_in => l_pky,
            id_episode_in              => id_episode_in,
            flg_status_in              => flg_status_in,
            id_professional_in         => id_professional_in,
            flg_profile_in             => flg_profile_in,
            dt_create_in               => dt_create_in,
            id_epis_prof_resp_in       => id_epis_prof_resp_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_main_responsible_in    => flg_main_responsible_in,
            id_speciality_in           => id_speciality_in,
            flg_resp_type_in           => flg_resp_type_in,
            priority_in                => priority_in,
            dt_update_in               => dt_update_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in           IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        flg_status_in           IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        id_professional_in      IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        flg_profile_in          IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        dt_create_in            IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        id_epis_prof_resp_in    IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        create_user_in          IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        flg_main_responsible_in IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        id_speciality_in        IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        flg_resp_type_in        IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT 'E',
        priority_in             IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        dt_update_in            IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in           => id_episode_in,
            flg_status_in           => flg_status_in,
            id_professional_in      => id_professional_in,
            flg_profile_in          => flg_profile_in,
            dt_create_in            => dt_create_in,
            id_epis_prof_resp_in    => id_epis_prof_resp_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            flg_main_responsible_in => flg_main_responsible_in,
            id_speciality_in        => id_speciality_in,
            flg_resp_type_in        => flg_resp_type_in,
            priority_in             => priority_in,
            dt_update_in            => dt_update_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in               IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        flg_status_in               IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        id_professional_in          IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        flg_profile_in              IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        dt_create_in                IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        id_epis_prof_resp_in        IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        create_user_in              IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        flg_main_responsible_in     IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        id_speciality_in            IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        flg_resp_type_in            IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT 'E',
        priority_in                 IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        dt_update_in                IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        id_epis_multi_prof_resp_out IN OUT epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE := next_key;
    BEGIN
        ins(id_epis_multi_prof_resp_in => l_pky,
            id_episode_in              => id_episode_in,
            flg_status_in              => flg_status_in,
            id_professional_in         => id_professional_in,
            flg_profile_in             => flg_profile_in,
            dt_create_in               => dt_create_in,
            id_epis_prof_resp_in       => id_epis_prof_resp_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_main_responsible_in    => flg_main_responsible_in,
            id_speciality_in           => id_speciality_in,
            flg_resp_type_in           => flg_resp_type_in,
            priority_in                => priority_in,
            dt_update_in               => dt_update_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        id_epis_multi_prof_resp_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in               IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        flg_status_in               IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        id_professional_in          IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        flg_profile_in              IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        dt_create_in                IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        id_epis_prof_resp_in        IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        create_user_in              IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        flg_main_responsible_in     IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        id_speciality_in            IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        flg_resp_type_in            IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT 'E',
        priority_in                 IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        dt_update_in                IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        id_epis_multi_prof_resp_out IN OUT epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in               => id_episode_in,
            flg_status_in               => flg_status_in,
            id_professional_in          => id_professional_in,
            flg_profile_in              => flg_profile_in,
            dt_create_in                => dt_create_in,
            id_epis_prof_resp_in        => id_epis_prof_resp_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            flg_main_responsible_in     => flg_main_responsible_in,
            id_speciality_in            => id_speciality_in,
            flg_resp_type_in            => flg_resp_type_in,
            priority_in                 => priority_in,
            dt_update_in                => dt_update_in,
            id_epis_multi_prof_resp_out => id_epis_multi_prof_resp_out,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in           IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        flg_status_in           IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        id_professional_in      IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        flg_profile_in          IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        dt_create_in            IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        id_epis_prof_resp_in    IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        create_user_in          IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        flg_main_responsible_in IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        id_speciality_in        IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        flg_resp_type_in        IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT 'E',
        priority_in             IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        dt_update_in            IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE IS
        l_pky epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE := next_key;
    BEGIN
        ins(id_epis_multi_prof_resp_in => l_pky,
            id_episode_in              => id_episode_in,
            flg_status_in              => flg_status_in,
            id_professional_in         => id_professional_in,
            flg_profile_in             => flg_profile_in,
            dt_create_in               => dt_create_in,
            id_epis_prof_resp_in       => id_epis_prof_resp_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_main_responsible_in    => flg_main_responsible_in,
            id_speciality_in           => id_speciality_in,
            flg_resp_type_in           => flg_resp_type_in,
            priority_in                => priority_in,
            dt_update_in               => dt_update_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in           IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        flg_status_in           IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        id_professional_in      IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        flg_profile_in          IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        dt_create_in            IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        id_epis_prof_resp_in    IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        create_user_in          IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_time_in          IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_time_in          IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        flg_main_responsible_in IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        id_speciality_in        IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        flg_resp_type_in        IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT 'E',
        priority_in             IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        dt_update_in            IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE IS
        l_pky    epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_epis_multi_prof_resp_in => l_pky,
            id_episode_in              => id_episode_in,
            flg_status_in              => flg_status_in,
            id_professional_in         => id_professional_in,
            flg_profile_in             => flg_profile_in,
            dt_create_in               => dt_create_in,
            id_epis_prof_resp_in       => id_epis_prof_resp_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_main_responsible_in    => flg_main_responsible_in,
            id_speciality_in           => id_speciality_in,
            flg_resp_type_in           => flg_resp_type_in,
            priority_in                => priority_in,
            dt_update_in               => dt_update_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_epis_multi_prof_resp_in IN epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE,
        id_episode_in              IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        flg_status_in              IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        id_professional_in         IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        flg_profile_in             IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        dt_create_in               IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        id_epis_prof_resp_in       IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        create_user_in             IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        flg_main_responsible_in    IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        id_speciality_in           IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        flg_resp_type_in           IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT 'E',
        priority_in                IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        dt_update_in               IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO epis_multi_prof_resp
            (id_epis_multi_prof_resp,
             id_episode,
             flg_status,
             id_professional,
             flg_profile,
             dt_create,
             id_epis_prof_resp,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_main_responsible,
             id_speciality,
             flg_resp_type,
             priority,
             dt_update)
        VALUES
            (id_epis_multi_prof_resp_in,
             id_episode_in,
             flg_status_in,
             id_professional_in,
             flg_profile_in,
             dt_create_in,
             id_epis_prof_resp_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_main_responsible_in,
             id_speciality_in,
             flg_resp_type_in,
             priority_in,
             dt_update_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_epis_multi_prof_resp_in IN epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE,
        id_episode_in              IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        flg_status_in              IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        id_professional_in         IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        flg_profile_in             IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        dt_create_in               IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        id_epis_prof_resp_in       IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        create_user_in             IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        flg_main_responsible_in    IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        id_speciality_in           IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        flg_resp_type_in           IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT 'E',
        priority_in                IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        dt_update_in               IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_multi_prof_resp_in => id_epis_multi_prof_resp_in,
            id_episode_in              => id_episode_in,
            flg_status_in              => flg_status_in,
            id_professional_in         => id_professional_in,
            flg_profile_in             => flg_profile_in,
            dt_create_in               => dt_create_in,
            id_epis_prof_resp_in       => id_epis_prof_resp_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_main_responsible_in    => flg_main_responsible_in,
            id_speciality_in           => id_speciality_in,
            flg_resp_type_in           => flg_resp_type_in,
            priority_in                => priority_in,
            dt_update_in               => dt_update_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_multi_prof_resp%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_multi_prof_resp%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_epis_multi_prof_resp := next_key(sequence_in);
        END IF;
    
        ins(id_epis_multi_prof_resp_in => l_rec.id_epis_multi_prof_resp,
            id_episode_in              => l_rec.id_episode,
            flg_status_in              => l_rec.flg_status,
            id_professional_in         => l_rec.id_professional,
            flg_profile_in             => l_rec.flg_profile,
            dt_create_in               => l_rec.dt_create,
            id_epis_prof_resp_in       => l_rec.id_epis_prof_resp,
            create_user_in             => l_rec.create_user,
            create_time_in             => l_rec.create_time,
            create_institution_in      => l_rec.create_institution,
            update_user_in             => l_rec.update_user,
            update_time_in             => l_rec.update_time,
            update_institution_in      => l_rec.update_institution,
            flg_main_responsible_in    => l_rec.flg_main_responsible,
            id_speciality_in           => l_rec.id_speciality,
            flg_resp_type_in           => l_rec.flg_resp_type,
            priority_in                => l_rec.priority,
            dt_update_in               => l_rec.dt_update,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_multi_prof_resp%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_multi_prof_resp_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_multi_prof_resp
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_multi_prof_resp_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_multi_prof_resp_in IN epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE,
        id_episode_in              IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        flg_status_in              IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_professional_in         IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        flg_profile_in             IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        flg_profile_nin            IN BOOLEAN := TRUE,
        dt_create_in               IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        dt_create_nin              IN BOOLEAN := TRUE,
        id_epis_prof_resp_in       IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        id_epis_prof_resp_nin      IN BOOLEAN := TRUE,
        create_user_in             IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        flg_main_responsible_in    IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        flg_main_responsible_nin   IN BOOLEAN := TRUE,
        id_speciality_in           IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin          IN BOOLEAN := TRUE,
        flg_resp_type_in           IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT NULL,
        flg_resp_type_nin          IN BOOLEAN := TRUE,
        priority_in                IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        priority_nin               IN BOOLEAN := TRUE,
        dt_update_in               IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        dt_update_nin              IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out               table_varchar;
        l_id_episode_n           NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_status_n           NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_professional_n      NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_flg_profile_n          NUMBER(1) := sys.diutil.bool_to_int(flg_profile_nin);
        l_dt_create_n            NUMBER(1) := sys.diutil.bool_to_int(dt_create_nin);
        l_id_epis_prof_resp_n    NUMBER(1) := sys.diutil.bool_to_int(id_epis_prof_resp_nin);
        l_create_user_n          NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_main_responsible_n NUMBER(1) := sys.diutil.bool_to_int(flg_main_responsible_nin);
        l_id_speciality_n        NUMBER(1) := sys.diutil.bool_to_int(id_speciality_nin);
        l_flg_resp_type_n        NUMBER(1) := sys.diutil.bool_to_int(flg_resp_type_nin);
        l_priority_n             NUMBER(1) := sys.diutil.bool_to_int(priority_nin);
        l_dt_update_n            NUMBER(1) := sys.diutil.bool_to_int(dt_update_nin);
    BEGIN
    
        UPDATE epis_multi_prof_resp
           SET id_episode           = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               flg_status           = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_professional      = decode(l_id_professional_n,
                                             0,
                                             id_professional_in,
                                             nvl(id_professional_in, id_professional)),
               flg_profile          = decode(l_flg_profile_n, 0, flg_profile_in, nvl(flg_profile_in, flg_profile)),
               dt_create            = decode(l_dt_create_n, 0, dt_create_in, nvl(dt_create_in, dt_create)),
               id_epis_prof_resp    = decode(l_id_epis_prof_resp_n,
                                             0,
                                             id_epis_prof_resp_in,
                                             nvl(id_epis_prof_resp_in, id_epis_prof_resp)),
               create_user          = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time          = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution   = decode(l_create_institution_n,
                                             0,
                                             create_institution_in,
                                             nvl(create_institution_in, create_institution)),
               update_user          = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time          = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution   = decode(l_update_institution_n,
                                             0,
                                             update_institution_in,
                                             nvl(update_institution_in, update_institution)),
               flg_main_responsible = decode(l_flg_main_responsible_n,
                                             0,
                                             flg_main_responsible_in,
                                             nvl(flg_main_responsible_in, flg_main_responsible)),
               id_speciality        = decode(l_id_speciality_n,
                                             0,
                                             id_speciality_in,
                                             nvl(id_speciality_in, id_speciality)),
               flg_resp_type        = decode(l_flg_resp_type_n,
                                             0,
                                             flg_resp_type_in,
                                             nvl(flg_resp_type_in, flg_resp_type)),
               priority             = decode(l_priority_n, 0, priority_in, nvl(priority_in, priority)),
               dt_update            = decode(l_dt_update_n, 0, dt_update_in, nvl(dt_update_in, dt_update))
         WHERE id_epis_multi_prof_resp = id_epis_multi_prof_resp_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_multi_prof_resp_in IN epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE,
        id_episode_in              IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        flg_status_in              IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_professional_in         IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        flg_profile_in             IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        flg_profile_nin            IN BOOLEAN := TRUE,
        dt_create_in               IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        dt_create_nin              IN BOOLEAN := TRUE,
        id_epis_prof_resp_in       IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        id_epis_prof_resp_nin      IN BOOLEAN := TRUE,
        create_user_in             IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        flg_main_responsible_in    IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        flg_main_responsible_nin   IN BOOLEAN := TRUE,
        id_speciality_in           IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin          IN BOOLEAN := TRUE,
        flg_resp_type_in           IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT NULL,
        flg_resp_type_nin          IN BOOLEAN := TRUE,
        priority_in                IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        priority_nin               IN BOOLEAN := TRUE,
        dt_update_in               IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        dt_update_nin              IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_multi_prof_resp_in => id_epis_multi_prof_resp_in,
            id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            id_professional_in         => id_professional_in,
            id_professional_nin        => id_professional_nin,
            flg_profile_in             => flg_profile_in,
            flg_profile_nin            => flg_profile_nin,
            dt_create_in               => dt_create_in,
            dt_create_nin              => dt_create_nin,
            id_epis_prof_resp_in       => id_epis_prof_resp_in,
            id_epis_prof_resp_nin      => id_epis_prof_resp_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            flg_main_responsible_in    => flg_main_responsible_in,
            flg_main_responsible_nin   => flg_main_responsible_nin,
            id_speciality_in           => id_speciality_in,
            id_speciality_nin          => id_speciality_nin,
            flg_resp_type_in           => flg_resp_type_in,
            flg_resp_type_nin          => flg_resp_type_nin,
            priority_in                => priority_in,
            priority_nin               => priority_nin,
            dt_update_in               => dt_update_in,
            dt_update_nin              => dt_update_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in            IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        flg_status_in            IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        flg_status_nin           IN BOOLEAN := TRUE,
        id_professional_in       IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        flg_profile_in           IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        flg_profile_nin          IN BOOLEAN := TRUE,
        dt_create_in             IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        dt_create_nin            IN BOOLEAN := TRUE,
        id_epis_prof_resp_in     IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        id_epis_prof_resp_nin    IN BOOLEAN := TRUE,
        create_user_in           IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        flg_main_responsible_in  IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        flg_main_responsible_nin IN BOOLEAN := TRUE,
        id_speciality_in         IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin        IN BOOLEAN := TRUE,
        flg_resp_type_in         IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT NULL,
        flg_resp_type_nin        IN BOOLEAN := TRUE,
        priority_in              IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        priority_nin             IN BOOLEAN := TRUE,
        dt_update_in             IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        dt_update_nin            IN BOOLEAN := TRUE,
        where_in                 IN VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_sql                    VARCHAR2(32767);
        l_rows_out               table_varchar;
        l_id_episode_n           NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_status_n           NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_professional_n      NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_flg_profile_n          NUMBER(1) := sys.diutil.bool_to_int(flg_profile_nin);
        l_dt_create_n            NUMBER(1) := sys.diutil.bool_to_int(dt_create_nin);
        l_id_epis_prof_resp_n    NUMBER(1) := sys.diutil.bool_to_int(id_epis_prof_resp_nin);
        l_create_user_n          NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_main_responsible_n NUMBER(1) := sys.diutil.bool_to_int(flg_main_responsible_nin);
        l_id_speciality_n        NUMBER(1) := sys.diutil.bool_to_int(id_speciality_nin);
        l_flg_resp_type_n        NUMBER(1) := sys.diutil.bool_to_int(flg_resp_type_nin);
        l_priority_n             NUMBER(1) := sys.diutil.bool_to_int(priority_nin);
        l_dt_update_n            NUMBER(1) := sys.diutil.bool_to_int(dt_update_nin);
    BEGIN
        l_id_episode_n           := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_status_n           := sys.diutil.bool_to_int(flg_status_nin);
        l_id_professional_n      := sys.diutil.bool_to_int(id_professional_nin);
        l_flg_profile_n          := sys.diutil.bool_to_int(flg_profile_nin);
        l_dt_create_n            := sys.diutil.bool_to_int(dt_create_nin);
        l_id_epis_prof_resp_n    := sys.diutil.bool_to_int(id_epis_prof_resp_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_main_responsible_n := sys.diutil.bool_to_int(flg_main_responsible_nin);
        l_id_speciality_n        := sys.diutil.bool_to_int(id_speciality_nin);
        l_flg_resp_type_n        := sys.diutil.bool_to_int(flg_resp_type_nin);
        l_priority_n             := sys.diutil.bool_to_int(priority_nin);
        l_dt_update_n            := sys.diutil.bool_to_int(dt_update_nin);
        l_sql                    := 'UPDATE epis_multi_prof_resp SET' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                                    ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ',' ||
                                    ' FLG_STATUS = decode (' || l_flg_status_n ||
                                    ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                    ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                                    ',0,:ID_PROFESSIONAL_in, NVL (:ID_PROFESSIONAL_in, ID_PROFESSIONAL)) ' || ',' ||
                                    ' FLG_PROFILE = decode (' || l_flg_profile_n ||
                                    ',0,:FLG_PROFILE_in, NVL (:FLG_PROFILE_in, FLG_PROFILE)) ' || ',' ||
                                    ' DT_CREATE = decode (' || l_dt_create_n ||
                                    ',0,:DT_CREATE_in, NVL (:DT_CREATE_in, DT_CREATE)) ' || ',' ||
                                    ' ID_EPIS_PROF_RESP = decode (' || l_id_epis_prof_resp_n ||
                                    ',0,:ID_EPIS_PROF_RESP_in, NVL (:ID_EPIS_PROF_RESP_in, ID_EPIS_PROF_RESP)) ' || ',' ||
                                    ' CREATE_USER = decode (' || l_create_user_n ||
                                    ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                    ' CREATE_TIME = decode (' || l_create_time_n ||
                                    ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                    ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                    ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                    ' UPDATE_USER = decode (' || l_update_user_n ||
                                    ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                    ' UPDATE_TIME = decode (' || l_update_time_n ||
                                    ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                    ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                    ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                    ' FLG_MAIN_RESPONSIBLE = decode (' || l_flg_main_responsible_n ||
                                    ',0,:FLG_MAIN_RESPONSIBLE_in, NVL (:FLG_MAIN_RESPONSIBLE_in, FLG_MAIN_RESPONSIBLE)) ' || ',' ||
                                    ' ID_SPECIALITY = decode (' || l_id_speciality_n ||
                                    ',0,:ID_SPECIALITY_in, NVL (:ID_SPECIALITY_in, ID_SPECIALITY)) ' || ',' ||
                                    ' FLG_RESP_TYPE = decode (' || l_flg_resp_type_n ||
                                    ',0,:FLG_RESP_TYPE_in, NVL (:FLG_RESP_TYPE_in, FLG_RESP_TYPE)) ' || ',' ||
                                    ' PRIORITY = decode (' || l_priority_n ||
                                    ',0,:PRIORITY_in, NVL (:PRIORITY_in, PRIORITY)) ' || ',' || ' DT_UPDATE = decode (' ||
                                    l_dt_update_n || ',0,:DT_UPDATE_in, NVL (:DT_UPDATE_in, DT_UPDATE)) ' || ' where ' ||
                                    nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, flg_status_in, id_professional_in, flg_profile_in, dt_create_in, id_epis_prof_resp_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_main_responsible_in, id_speciality_in, flg_resp_type_in, priority_in, dt_update_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in            IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        flg_status_in            IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        flg_status_nin           IN BOOLEAN := TRUE,
        id_professional_in       IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        flg_profile_in           IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        flg_profile_nin          IN BOOLEAN := TRUE,
        dt_create_in             IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        dt_create_nin            IN BOOLEAN := TRUE,
        id_epis_prof_resp_in     IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        id_epis_prof_resp_nin    IN BOOLEAN := TRUE,
        create_user_in           IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        flg_main_responsible_in  IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        flg_main_responsible_nin IN BOOLEAN := TRUE,
        id_speciality_in         IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin        IN BOOLEAN := TRUE,
        flg_resp_type_in         IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT NULL,
        flg_resp_type_nin        IN BOOLEAN := TRUE,
        priority_in              IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        priority_nin             IN BOOLEAN := TRUE,
        dt_update_in             IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        dt_update_nin            IN BOOLEAN := TRUE,
        where_in                 IN VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in            => id_episode_in,
            id_episode_nin           => id_episode_nin,
            flg_status_in            => flg_status_in,
            flg_status_nin           => flg_status_nin,
            id_professional_in       => id_professional_in,
            id_professional_nin      => id_professional_nin,
            flg_profile_in           => flg_profile_in,
            flg_profile_nin          => flg_profile_nin,
            dt_create_in             => dt_create_in,
            dt_create_nin            => dt_create_nin,
            id_epis_prof_resp_in     => id_epis_prof_resp_in,
            id_epis_prof_resp_nin    => id_epis_prof_resp_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            flg_main_responsible_in  => flg_main_responsible_in,
            flg_main_responsible_nin => flg_main_responsible_nin,
            id_speciality_in         => id_speciality_in,
            id_speciality_nin        => id_speciality_nin,
            flg_resp_type_in         => flg_resp_type_in,
            flg_resp_type_nin        => flg_resp_type_nin,
            priority_in              => priority_in,
            priority_nin             => priority_nin,
            dt_update_in             => dt_update_in,
            dt_update_nin            => dt_update_nin,
            where_in                 => where_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_epis_multi_prof_resp_in IN epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE,
        id_episode_in              IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        flg_status_in              IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        id_professional_in         IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        flg_profile_in             IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        dt_create_in               IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        id_epis_prof_resp_in       IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        create_user_in             IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        flg_main_responsible_in    IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        id_speciality_in           IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        flg_resp_type_in           IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT NULL,
        priority_in                IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        dt_update_in               IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_multi_prof_resp_in => id_epis_multi_prof_resp_in,
            id_episode_in              => id_episode_in,
            flg_status_in              => flg_status_in,
            id_professional_in         => id_professional_in,
            flg_profile_in             => flg_profile_in,
            dt_create_in               => dt_create_in,
            id_epis_prof_resp_in       => id_epis_prof_resp_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_main_responsible_in    => flg_main_responsible_in,
            id_speciality_in           => id_speciality_in,
            flg_resp_type_in           => flg_resp_type_in,
            priority_in                => priority_in,
            dt_update_in               => dt_update_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_multi_prof_resp_in => id_epis_multi_prof_resp_in,
                id_episode_in              => id_episode_in,
                flg_status_in              => flg_status_in,
                id_professional_in         => id_professional_in,
                flg_profile_in             => flg_profile_in,
                dt_create_in               => dt_create_in,
                id_epis_prof_resp_in       => id_epis_prof_resp_in,
                create_user_in             => create_user_in,
                create_time_in             => create_time_in,
                create_institution_in      => create_institution_in,
                update_user_in             => update_user_in,
                update_time_in             => update_time_in,
                update_institution_in      => update_institution_in,
                flg_main_responsible_in    => flg_main_responsible_in,
                id_speciality_in           => id_speciality_in,
                flg_resp_type_in           => flg_resp_type_in,
                priority_in                => priority_in,
                dt_update_in               => dt_update_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_epis_multi_prof_resp_in IN epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE,
        id_episode_in              IN epis_multi_prof_resp.id_episode%TYPE DEFAULT NULL,
        flg_status_in              IN epis_multi_prof_resp.flg_status%TYPE DEFAULT NULL,
        id_professional_in         IN epis_multi_prof_resp.id_professional%TYPE DEFAULT NULL,
        flg_profile_in             IN epis_multi_prof_resp.flg_profile%TYPE DEFAULT NULL,
        dt_create_in               IN epis_multi_prof_resp.dt_create%TYPE DEFAULT NULL,
        id_epis_prof_resp_in       IN epis_multi_prof_resp.id_epis_prof_resp%TYPE DEFAULT NULL,
        create_user_in             IN epis_multi_prof_resp.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_multi_prof_resp.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_multi_prof_resp.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_multi_prof_resp.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_multi_prof_resp.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_multi_prof_resp.update_institution%TYPE DEFAULT NULL,
        flg_main_responsible_in    IN epis_multi_prof_resp.flg_main_responsible%TYPE DEFAULT NULL,
        id_speciality_in           IN epis_multi_prof_resp.id_speciality%TYPE DEFAULT NULL,
        flg_resp_type_in           IN epis_multi_prof_resp.flg_resp_type%TYPE DEFAULT NULL,
        priority_in                IN epis_multi_prof_resp.priority%TYPE DEFAULT NULL,
        dt_update_in               IN epis_multi_prof_resp.dt_update%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_multi_prof_resp_in,
                id_episode_in,
                flg_status_in,
                id_professional_in,
                flg_profile_in,
                dt_create_in,
                id_epis_prof_resp_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_main_responsible_in,
                id_speciality_in,
                flg_resp_type_in,
                priority_in,
                dt_update_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_multi_prof_resp%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_multi_prof_resp_in => rec_in.id_epis_multi_prof_resp,
            id_episode_in              => rec_in.id_episode,
            flg_status_in              => rec_in.flg_status,
            id_professional_in         => rec_in.id_professional,
            flg_profile_in             => rec_in.flg_profile,
            dt_create_in               => rec_in.dt_create,
            id_epis_prof_resp_in       => rec_in.id_epis_prof_resp,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            flg_main_responsible_in    => rec_in.flg_main_responsible,
            id_speciality_in           => rec_in.id_speciality,
            flg_resp_type_in           => rec_in.flg_resp_type,
            priority_in                => rec_in.priority,
            dt_update_in               => rec_in.dt_update,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_multi_prof_resp%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_multi_prof_resp_in => rec_in.id_epis_multi_prof_resp,
            id_episode_in              => rec_in.id_episode,
            flg_status_in              => rec_in.flg_status,
            id_professional_in         => rec_in.id_professional,
            flg_profile_in             => rec_in.flg_profile,
            dt_create_in               => rec_in.dt_create,
            id_epis_prof_resp_in       => rec_in.id_epis_prof_resp,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            flg_main_responsible_in    => rec_in.flg_main_responsible,
            id_speciality_in           => rec_in.id_speciality,
            flg_resp_type_in           => rec_in.flg_resp_type,
            priority_in                => rec_in.priority,
            dt_update_in               => rec_in.dt_update,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_multi_prof_resp_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_multi_prof_resp id_epis_multi_prof_resp_cc;
        l_id_episode              id_episode_cc;
        l_flg_status              flg_status_cc;
        l_id_professional         id_professional_cc;
        l_flg_profile             flg_profile_cc;
        l_dt_create               dt_create_cc;
        l_id_epis_prof_resp       id_epis_prof_resp_cc;
        l_create_user             create_user_cc;
        l_create_time             create_time_cc;
        l_create_institution      create_institution_cc;
        l_update_user             update_user_cc;
        l_update_time             update_time_cc;
        l_update_institution      update_institution_cc;
        l_flg_main_responsible    flg_main_responsible_cc;
        l_id_speciality           id_speciality_cc;
        l_flg_resp_type           flg_resp_type_cc;
        l_priority                priority_cc;
        l_dt_update               dt_update_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_multi_prof_resp(i) := col_in(i).id_epis_multi_prof_resp;
            l_id_episode(i) := col_in(i).id_episode;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_professional(i) := col_in(i).id_professional;
            l_flg_profile(i) := col_in(i).flg_profile;
            l_dt_create(i) := col_in(i).dt_create;
            l_id_epis_prof_resp(i) := col_in(i).id_epis_prof_resp;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_main_responsible(i) := col_in(i).flg_main_responsible;
            l_id_speciality(i) := col_in(i).id_speciality;
            l_flg_resp_type(i) := col_in(i).flg_resp_type;
            l_priority(i) := col_in(i).priority;
            l_dt_update(i) := col_in(i).dt_update;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_multi_prof_resp
                   SET id_episode           = nvl(l_id_episode(i), id_episode),
                       flg_status           = nvl(l_flg_status(i), flg_status),
                       id_professional      = nvl(l_id_professional(i), id_professional),
                       flg_profile          = nvl(l_flg_profile(i), flg_profile),
                       dt_create            = nvl(l_dt_create(i), dt_create),
                       id_epis_prof_resp    = nvl(l_id_epis_prof_resp(i), id_epis_prof_resp),
                       create_user          = nvl(l_create_user(i), create_user),
                       create_time          = nvl(l_create_time(i), create_time),
                       create_institution   = nvl(l_create_institution(i), create_institution),
                       update_user          = nvl(l_update_user(i), update_user),
                       update_time          = nvl(l_update_time(i), update_time),
                       update_institution   = nvl(l_update_institution(i), update_institution),
                       flg_main_responsible = nvl(l_flg_main_responsible(i), flg_main_responsible),
                       id_speciality        = nvl(l_id_speciality(i), id_speciality),
                       flg_resp_type        = nvl(l_flg_resp_type(i), flg_resp_type),
                       priority             = nvl(l_priority(i), priority),
                       dt_update            = nvl(l_dt_update(i), dt_update)
                 WHERE id_epis_multi_prof_resp = l_id_epis_multi_prof_resp(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_multi_prof_resp
                   SET id_episode           = l_id_episode(i),
                       flg_status           = l_flg_status(i),
                       id_professional      = l_id_professional(i),
                       flg_profile          = l_flg_profile(i),
                       dt_create            = l_dt_create(i),
                       id_epis_prof_resp    = l_id_epis_prof_resp(i),
                       create_user          = l_create_user(i),
                       create_time          = l_create_time(i),
                       create_institution   = l_create_institution(i),
                       update_user          = l_update_user(i),
                       update_time          = l_update_time(i),
                       update_institution   = l_update_institution(i),
                       flg_main_responsible = l_flg_main_responsible(i),
                       id_speciality        = l_id_speciality(i),
                       flg_resp_type        = l_flg_resp_type(i),
                       priority             = l_priority(i),
                       dt_update            = l_dt_update(i)
                 WHERE id_epis_multi_prof_resp = l_id_epis_multi_prof_resp(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_multi_prof_resp_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE epis_multi_prof_resp
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE epis_multi_prof_resp
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE epis_multi_prof_resp
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_multi_prof_resp_in IN epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_multi_prof_resp
         WHERE id_epis_multi_prof_resp = id_epis_multi_prof_resp_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_multi_prof_resp_in IN epis_multi_prof_resp.id_epis_multi_prof_resp%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_epis_multi_prof_resp_in => id_epis_multi_prof_resp_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END del;

    -- Delete for unique value of EMPR_EPR_UK
    PROCEDURE del_empr_epr_uk
    (
        id_epis_prof_resp_in IN epis_multi_prof_resp.id_epis_prof_resp%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_multi_prof_resp
         WHERE id_epis_prof_resp = id_epis_prof_resp_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_empr_epr_uk;

    -- Delete for unique value of EMPR_EPR_UK
    PROCEDURE del_empr_epr_uk
    (
        id_epis_prof_resp_in IN epis_multi_prof_resp.id_epis_prof_resp%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_empr_epr_uk(id_epis_prof_resp_in => id_epis_prof_resp_in,
                        handle_error_in      => handle_error_in,
                        rows_out             => rows_out);
    END del_empr_epr_uk;

    -- Delete all rows for this EMPR_EPIS_FK foreign key value
    PROCEDURE del_empr_epis_fk
    (
        id_episode_in   IN epis_multi_prof_resp.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_multi_prof_resp
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_empr_epis_fk;

    -- Delete all rows for this EMPR_EPR_FK foreign key value
    PROCEDURE del_empr_epr_fk
    (
        id_epis_prof_resp_in IN epis_multi_prof_resp.id_epis_prof_resp%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_multi_prof_resp
         WHERE id_epis_prof_resp = id_epis_prof_resp_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_empr_epr_fk;

    -- Delete all rows for this EMPR_PROF_FK foreign key value
    PROCEDURE del_empr_prof_fk
    (
        id_professional_in IN epis_multi_prof_resp.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_multi_prof_resp
         WHERE id_professional = id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_empr_prof_fk;

    -- Delete all rows for this EMPR_SPY_FK foreign key value
    PROCEDURE del_empr_spy_fk
    (
        id_speciality_in IN epis_multi_prof_resp.id_speciality%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_multi_prof_resp
         WHERE id_speciality = id_speciality_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_empr_spy_fk;

    -- Delete all rows for this EMPR_EPIS_FK foreign key value
    PROCEDURE del_empr_epis_fk
    (
        id_episode_in   IN epis_multi_prof_resp.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_empr_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_empr_epis_fk;

    -- Delete all rows for this EMPR_EPR_FK foreign key value
    PROCEDURE del_empr_epr_fk
    (
        id_epis_prof_resp_in IN epis_multi_prof_resp.id_epis_prof_resp%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_empr_epr_fk(id_epis_prof_resp_in => id_epis_prof_resp_in,
                        handle_error_in      => handle_error_in,
                        rows_out             => rows_out);
    END del_empr_epr_fk;

    -- Delete all rows for this EMPR_PROF_FK foreign key value
    PROCEDURE del_empr_prof_fk
    (
        id_professional_in IN epis_multi_prof_resp.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_empr_prof_fk(id_professional_in => id_professional_in,
                         handle_error_in    => handle_error_in,
                         rows_out           => rows_out);
    END del_empr_prof_fk;

    -- Delete all rows for this EMPR_SPY_FK foreign key value
    PROCEDURE del_empr_spy_fk
    (
        id_speciality_in IN epis_multi_prof_resp.id_speciality%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_empr_spy_fk(id_speciality_in => id_speciality_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_empr_spy_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM epis_multi_prof_resp';
        ELSE
            RETURN 'DELETE FROM epis_multi_prof_resp WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(epis_multi_prof_resp_inout IN OUT epis_multi_prof_resp%ROWTYPE) IS
    BEGIN
        epis_multi_prof_resp_inout.id_epis_multi_prof_resp := NULL;
        epis_multi_prof_resp_inout.id_episode              := NULL;
        epis_multi_prof_resp_inout.flg_status              := NULL;
        epis_multi_prof_resp_inout.id_professional         := NULL;
        epis_multi_prof_resp_inout.flg_profile             := NULL;
        epis_multi_prof_resp_inout.dt_create               := NULL;
        epis_multi_prof_resp_inout.id_epis_prof_resp       := NULL;
        epis_multi_prof_resp_inout.create_user             := NULL;
        epis_multi_prof_resp_inout.create_time             := NULL;
        epis_multi_prof_resp_inout.create_institution      := NULL;
        epis_multi_prof_resp_inout.update_user             := NULL;
        epis_multi_prof_resp_inout.update_time             := NULL;
        epis_multi_prof_resp_inout.update_institution      := NULL;
        epis_multi_prof_resp_inout.flg_main_responsible    := NULL;
        epis_multi_prof_resp_inout.id_speciality           := NULL;
        epis_multi_prof_resp_inout.flg_resp_type           := NULL;
        epis_multi_prof_resp_inout.priority                := NULL;
        epis_multi_prof_resp_inout.dt_update               := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN epis_multi_prof_resp%ROWTYPE IS
        l_epis_multi_prof_resp epis_multi_prof_resp%ROWTYPE;
    BEGIN
        RETURN l_epis_multi_prof_resp;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_multi_prof_resp_tc IS
        data epis_multi_prof_resp_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM epis_multi_prof_resp
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_multi_prof_resp_tc IS
        data epis_multi_prof_resp_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_multi_prof_resp;
/
