/*-- Last Change Revision: $Rev: 2028392 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:30 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_sr_surgery_record
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Outubro 16, 2009 15:0:6
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_surgery_record_in   IN sr_surgery_record.id_surgery_record%TYPE,
        id_schedule_sr_in      IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_sr_intervention_in  IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_team_in        IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_patient_in          IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        flg_pat_status_in      IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_state_in           IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_surg_nat_in        IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_type_in       IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_urgency_in         IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        id_anesthesia_type_in  IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        notes_in               IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in      IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN sr_surgery_record.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_anest_start_tstz_in IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_in   IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_in    IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_in     IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in  IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_in   IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_in   IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_in    IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        flg_priority_in        IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_sr_proc_in         IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_in      IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO sr_surgery_record
            (id_surgery_record,
             id_schedule_sr,
             id_sr_intervention,
             id_prof_team,
             id_patient,
             flg_pat_status,
             flg_state,
             flg_surg_nat,
             flg_surg_type,
             flg_urgency,
             id_anesthesia_type,
             id_clinical_service,
             notes,
             id_prof_cancel,
             notes_cancel,
             id_institution,
             adw_last_update,
             dt_anest_start_tstz,
             dt_anest_end_tstz,
             dt_sr_entry_tstz,
             dt_sr_exit_tstz,
             dt_room_entry_tstz,
             dt_room_exit_tstz,
             dt_rcv_entry_tstz,
             dt_rcv_exit_tstz,
             dt_cancel_tstz,
             id_episode,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_priority,
             flg_sr_proc,
             dt_flg_sr_proc)
        VALUES
            (id_surgery_record_in,
             id_schedule_sr_in,
             id_sr_intervention_in,
             id_prof_team_in,
             id_patient_in,
             flg_pat_status_in,
             flg_state_in,
             flg_surg_nat_in,
             flg_surg_type_in,
             flg_urgency_in,
             id_anesthesia_type_in,
             id_clinical_service_in,
             notes_in,
             id_prof_cancel_in,
             notes_cancel_in,
             id_institution_in,
             adw_last_update_in,
             dt_anest_start_tstz_in,
             dt_anest_end_tstz_in,
             dt_sr_entry_tstz_in,
             dt_sr_exit_tstz_in,
             dt_room_entry_tstz_in,
             dt_room_exit_tstz_in,
             dt_rcv_entry_tstz_in,
             dt_rcv_exit_tstz_in,
             dt_cancel_tstz_in,
             id_episode_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_priority_in,
             flg_sr_proc_in,
             dt_flg_sr_proc_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'SR_REC_ID_SCHEDULE'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "SR_REC_ID_SCHEDULE"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'SR_SURGERY_RECORD',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHEDULE_SR',
                                                        value_in           => id_schedule_sr_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'SR_SURGERY_RECORD');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    IF l_name = 'SR_REC_ANEST_TYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANESTHESIA_TYPE',
                                                        value_in           => id_anesthesia_type_in);
                    END IF;
                    IF l_name = 'SR_REC_CSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CLINICAL_SERVICE',
                                                        value_in           => id_clinical_service_in);
                    END IF;
                    IF l_name = 'SR_REC_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'SR_REC_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'SR_REC_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'SR_REC_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'SR_REC_PROF_TEAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_TEAM',
                                                        value_in           => id_prof_team_in);
                    END IF;
                    IF l_name = 'SR_REC_SIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SR_INTERVENTION',
                                                        value_in           => id_sr_intervention_in);
                    END IF;
                    IF l_name = 'SR_REC_SR_SCHED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE_SR',
                                                        value_in           => id_schedule_sr_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_surgery_record_in   IN sr_surgery_record.id_surgery_record%TYPE,
        id_schedule_sr_in      IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_sr_intervention_in  IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_team_in        IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_patient_in          IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        flg_pat_status_in      IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_state_in           IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_surg_nat_in        IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_type_in       IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_urgency_in         IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        id_anesthesia_type_in  IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        notes_in               IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in      IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN sr_surgery_record.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_anest_start_tstz_in IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_in   IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_in    IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_in     IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in  IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_in   IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_in   IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_in    IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        flg_priority_in        IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_sr_proc_in         IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_in      IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_surgery_record_in   => id_surgery_record_in,
            id_schedule_sr_in      => id_schedule_sr_in,
            id_sr_intervention_in  => id_sr_intervention_in,
            id_prof_team_in        => id_prof_team_in,
            id_patient_in          => id_patient_in,
            flg_pat_status_in      => flg_pat_status_in,
            flg_state_in           => flg_state_in,
            flg_surg_nat_in        => flg_surg_nat_in,
            flg_surg_type_in       => flg_surg_type_in,
            flg_urgency_in         => flg_urgency_in,
            id_anesthesia_type_in  => id_anesthesia_type_in,
            id_clinical_service_in => id_clinical_service_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_institution_in      => id_institution_in,
            adw_last_update_in     => adw_last_update_in,
            dt_anest_start_tstz_in => dt_anest_start_tstz_in,
            dt_anest_end_tstz_in   => dt_anest_end_tstz_in,
            dt_sr_entry_tstz_in    => dt_sr_entry_tstz_in,
            dt_sr_exit_tstz_in     => dt_sr_exit_tstz_in,
            dt_room_entry_tstz_in  => dt_room_entry_tstz_in,
            dt_room_exit_tstz_in   => dt_room_exit_tstz_in,
            dt_rcv_entry_tstz_in   => dt_rcv_entry_tstz_in,
            dt_rcv_exit_tstz_in    => dt_rcv_exit_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_priority_in        => flg_priority_in,
            flg_sr_proc_in         => flg_sr_proc_in,
            dt_flg_sr_proc_in      => dt_flg_sr_proc_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN sr_surgery_record%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec sr_surgery_record%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_surgery_record := next_key(sequence_in);
        END IF;
        ins(id_surgery_record_in   => l_rec.id_surgery_record,
            id_schedule_sr_in      => l_rec.id_schedule_sr,
            id_sr_intervention_in  => l_rec.id_sr_intervention,
            id_prof_team_in        => l_rec.id_prof_team,
            id_patient_in          => l_rec.id_patient,
            flg_pat_status_in      => l_rec.flg_pat_status,
            flg_state_in           => l_rec.flg_state,
            flg_surg_nat_in        => l_rec.flg_surg_nat,
            flg_surg_type_in       => l_rec.flg_surg_type,
            flg_urgency_in         => l_rec.flg_urgency,
            id_anesthesia_type_in  => l_rec.id_anesthesia_type,
            id_clinical_service_in => l_rec.id_clinical_service,
            notes_in               => l_rec.notes,
            id_prof_cancel_in      => l_rec.id_prof_cancel,
            notes_cancel_in        => l_rec.notes_cancel,
            id_institution_in      => l_rec.id_institution,
            adw_last_update_in     => l_rec.adw_last_update,
            dt_anest_start_tstz_in => l_rec.dt_anest_start_tstz,
            dt_anest_end_tstz_in   => l_rec.dt_anest_end_tstz,
            dt_sr_entry_tstz_in    => l_rec.dt_sr_entry_tstz,
            dt_sr_exit_tstz_in     => l_rec.dt_sr_exit_tstz,
            dt_room_entry_tstz_in  => l_rec.dt_room_entry_tstz,
            dt_room_exit_tstz_in   => l_rec.dt_room_exit_tstz,
            dt_rcv_entry_tstz_in   => l_rec.dt_rcv_entry_tstz,
            dt_rcv_exit_tstz_in    => l_rec.dt_rcv_exit_tstz,
            dt_cancel_tstz_in      => l_rec.dt_cancel_tstz,
            id_episode_in          => l_rec.id_episode,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            flg_priority_in        => l_rec.flg_priority,
            flg_sr_proc_in         => l_rec.flg_sr_proc,
            dt_flg_sr_proc_in      => l_rec.dt_flg_sr_proc,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN sr_surgery_record%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN sr_surgery_record.id_surgery_record%TYPE
    
     IS
        retval sr_surgery_record.id_surgery_record%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_sr_surgery_record.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_SR_SURGERY_RECORD'));
    END next_key;

    PROCEDURE ins
    (
        id_schedule_sr_in      IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_sr_intervention_in  IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_team_in        IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_patient_in          IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        flg_pat_status_in      IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_state_in           IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_surg_nat_in        IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_type_in       IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_urgency_in         IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        id_anesthesia_type_in  IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        notes_in               IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in      IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN sr_surgery_record.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_anest_start_tstz_in IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_in   IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_in    IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_in     IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in  IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_in   IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_in   IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_in    IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        flg_priority_in        IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_sr_proc_in         IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_in      IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        id_surgery_record_out  IN OUT sr_surgery_record.id_surgery_record%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky sr_surgery_record.id_surgery_record%TYPE := next_key;
    BEGIN
        ins(id_surgery_record_in   => l_pky,
            id_schedule_sr_in      => id_schedule_sr_in,
            id_sr_intervention_in  => id_sr_intervention_in,
            id_prof_team_in        => id_prof_team_in,
            id_patient_in          => id_patient_in,
            flg_pat_status_in      => flg_pat_status_in,
            flg_state_in           => flg_state_in,
            flg_surg_nat_in        => flg_surg_nat_in,
            flg_surg_type_in       => flg_surg_type_in,
            flg_urgency_in         => flg_urgency_in,
            id_anesthesia_type_in  => id_anesthesia_type_in,
            id_clinical_service_in => id_clinical_service_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_institution_in      => id_institution_in,
            adw_last_update_in     => adw_last_update_in,
            dt_anest_start_tstz_in => dt_anest_start_tstz_in,
            dt_anest_end_tstz_in   => dt_anest_end_tstz_in,
            dt_sr_entry_tstz_in    => dt_sr_entry_tstz_in,
            dt_sr_exit_tstz_in     => dt_sr_exit_tstz_in,
            dt_room_entry_tstz_in  => dt_room_entry_tstz_in,
            dt_room_exit_tstz_in   => dt_room_exit_tstz_in,
            dt_rcv_entry_tstz_in   => dt_rcv_entry_tstz_in,
            dt_rcv_exit_tstz_in    => dt_rcv_exit_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_priority_in        => flg_priority_in,
            flg_sr_proc_in         => flg_sr_proc_in,
            dt_flg_sr_proc_in      => dt_flg_sr_proc_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_surgery_record_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_schedule_sr_in      IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_sr_intervention_in  IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_team_in        IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_patient_in          IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        flg_pat_status_in      IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_state_in           IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_surg_nat_in        IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_type_in       IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_urgency_in         IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        id_anesthesia_type_in  IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        notes_in               IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in      IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN sr_surgery_record.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_anest_start_tstz_in IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_in   IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_in    IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_in     IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in  IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_in   IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_in   IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_in    IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        flg_priority_in        IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_sr_proc_in         IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_in      IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        id_surgery_record_out  IN OUT sr_surgery_record.id_surgery_record%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_schedule_sr_in      => id_schedule_sr_in,
            id_sr_intervention_in  => id_sr_intervention_in,
            id_prof_team_in        => id_prof_team_in,
            id_patient_in          => id_patient_in,
            flg_pat_status_in      => flg_pat_status_in,
            flg_state_in           => flg_state_in,
            flg_surg_nat_in        => flg_surg_nat_in,
            flg_surg_type_in       => flg_surg_type_in,
            flg_urgency_in         => flg_urgency_in,
            id_anesthesia_type_in  => id_anesthesia_type_in,
            id_clinical_service_in => id_clinical_service_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_institution_in      => id_institution_in,
            adw_last_update_in     => adw_last_update_in,
            dt_anest_start_tstz_in => dt_anest_start_tstz_in,
            dt_anest_end_tstz_in   => dt_anest_end_tstz_in,
            dt_sr_entry_tstz_in    => dt_sr_entry_tstz_in,
            dt_sr_exit_tstz_in     => dt_sr_exit_tstz_in,
            dt_room_entry_tstz_in  => dt_room_entry_tstz_in,
            dt_room_exit_tstz_in   => dt_room_exit_tstz_in,
            dt_rcv_entry_tstz_in   => dt_rcv_entry_tstz_in,
            dt_rcv_exit_tstz_in    => dt_rcv_exit_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_priority_in        => flg_priority_in,
            flg_sr_proc_in         => flg_sr_proc_in,
            dt_flg_sr_proc_in      => dt_flg_sr_proc_in,
            id_surgery_record_out  => id_surgery_record_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    FUNCTION ins
    (
        id_schedule_sr_in      IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_sr_intervention_in  IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_team_in        IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_patient_in          IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        flg_pat_status_in      IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_state_in           IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_surg_nat_in        IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_type_in       IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_urgency_in         IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        id_anesthesia_type_in  IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        notes_in               IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in      IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN sr_surgery_record.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_anest_start_tstz_in IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_in   IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_in    IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_in     IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in  IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_in   IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_in   IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_in    IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        flg_priority_in        IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_sr_proc_in         IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_in      IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) RETURN sr_surgery_record.id_surgery_record%TYPE IS
        l_pky sr_surgery_record.id_surgery_record%TYPE := next_key;
    BEGIN
        ins(id_surgery_record_in   => l_pky,
            id_schedule_sr_in      => id_schedule_sr_in,
            id_sr_intervention_in  => id_sr_intervention_in,
            id_prof_team_in        => id_prof_team_in,
            id_patient_in          => id_patient_in,
            flg_pat_status_in      => flg_pat_status_in,
            flg_state_in           => flg_state_in,
            flg_surg_nat_in        => flg_surg_nat_in,
            flg_surg_type_in       => flg_surg_type_in,
            flg_urgency_in         => flg_urgency_in,
            id_anesthesia_type_in  => id_anesthesia_type_in,
            id_clinical_service_in => id_clinical_service_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_institution_in      => id_institution_in,
            adw_last_update_in     => adw_last_update_in,
            dt_anest_start_tstz_in => dt_anest_start_tstz_in,
            dt_anest_end_tstz_in   => dt_anest_end_tstz_in,
            dt_sr_entry_tstz_in    => dt_sr_entry_tstz_in,
            dt_sr_exit_tstz_in     => dt_sr_exit_tstz_in,
            dt_room_entry_tstz_in  => dt_room_entry_tstz_in,
            dt_room_exit_tstz_in   => dt_room_exit_tstz_in,
            dt_rcv_entry_tstz_in   => dt_rcv_entry_tstz_in,
            dt_rcv_exit_tstz_in    => dt_rcv_exit_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_priority_in        => flg_priority_in,
            flg_sr_proc_in         => flg_sr_proc_in,
            dt_flg_sr_proc_in      => dt_flg_sr_proc_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_schedule_sr_in      IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_sr_intervention_in  IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_team_in        IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_patient_in          IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        flg_pat_status_in      IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_state_in           IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_surg_nat_in        IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_type_in       IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_urgency_in         IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        id_anesthesia_type_in  IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        notes_in               IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in      IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN sr_surgery_record.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_anest_start_tstz_in IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_in   IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_in    IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_in     IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in  IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_in   IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_in   IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_in    IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        flg_priority_in        IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_sr_proc_in         IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_in      IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) RETURN sr_surgery_record.id_surgery_record%TYPE IS
        l_pky    sr_surgery_record.id_surgery_record%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_surgery_record_in   => l_pky,
            id_schedule_sr_in      => id_schedule_sr_in,
            id_sr_intervention_in  => id_sr_intervention_in,
            id_prof_team_in        => id_prof_team_in,
            id_patient_in          => id_patient_in,
            flg_pat_status_in      => flg_pat_status_in,
            flg_state_in           => flg_state_in,
            flg_surg_nat_in        => flg_surg_nat_in,
            flg_surg_type_in       => flg_surg_type_in,
            flg_urgency_in         => flg_urgency_in,
            id_anesthesia_type_in  => id_anesthesia_type_in,
            id_clinical_service_in => id_clinical_service_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_institution_in      => id_institution_in,
            adw_last_update_in     => adw_last_update_in,
            dt_anest_start_tstz_in => dt_anest_start_tstz_in,
            dt_anest_end_tstz_in   => dt_anest_end_tstz_in,
            dt_sr_entry_tstz_in    => dt_sr_entry_tstz_in,
            dt_sr_exit_tstz_in     => dt_sr_exit_tstz_in,
            dt_room_entry_tstz_in  => dt_room_entry_tstz_in,
            dt_room_exit_tstz_in   => dt_room_exit_tstz_in,
            dt_rcv_entry_tstz_in   => dt_rcv_entry_tstz_in,
            dt_rcv_exit_tstz_in    => dt_rcv_exit_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_priority_in        => flg_priority_in,
            flg_sr_proc_in         => flg_sr_proc_in,
            dt_flg_sr_proc_in      => dt_flg_sr_proc_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_schedule_sr_in      IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_sr_intervention_in  IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_team_in        IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_patient_in          IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        flg_pat_status_in      IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_state_in           IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_surg_nat_in        IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_type_in       IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_urgency_in         IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        id_anesthesia_type_in  IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        notes_in               IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in      IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN sr_surgery_record.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_anest_start_tstz_in IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_in   IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_in    IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_in     IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in  IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_in   IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_in   IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_in    IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        flg_priority_in        IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_sr_proc_in         IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_in      IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky sr_surgery_record.id_surgery_record%TYPE := next_key;
    BEGIN
        ins(id_surgery_record_in   => l_pky,
            id_schedule_sr_in      => id_schedule_sr_in,
            id_sr_intervention_in  => id_sr_intervention_in,
            id_prof_team_in        => id_prof_team_in,
            id_patient_in          => id_patient_in,
            flg_pat_status_in      => flg_pat_status_in,
            flg_state_in           => flg_state_in,
            flg_surg_nat_in        => flg_surg_nat_in,
            flg_surg_type_in       => flg_surg_type_in,
            flg_urgency_in         => flg_urgency_in,
            id_anesthesia_type_in  => id_anesthesia_type_in,
            id_clinical_service_in => id_clinical_service_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_institution_in      => id_institution_in,
            adw_last_update_in     => adw_last_update_in,
            dt_anest_start_tstz_in => dt_anest_start_tstz_in,
            dt_anest_end_tstz_in   => dt_anest_end_tstz_in,
            dt_sr_entry_tstz_in    => dt_sr_entry_tstz_in,
            dt_sr_exit_tstz_in     => dt_sr_exit_tstz_in,
            dt_room_entry_tstz_in  => dt_room_entry_tstz_in,
            dt_room_exit_tstz_in   => dt_room_exit_tstz_in,
            dt_rcv_entry_tstz_in   => dt_rcv_entry_tstz_in,
            dt_rcv_exit_tstz_in    => dt_rcv_exit_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_priority_in        => flg_priority_in,
            flg_sr_proc_in         => flg_sr_proc_in,
            dt_flg_sr_proc_in      => dt_flg_sr_proc_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_schedule_sr_in      IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_sr_intervention_in  IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_team_in        IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_patient_in          IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        flg_pat_status_in      IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_state_in           IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_surg_nat_in        IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_type_in       IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_urgency_in         IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        id_anesthesia_type_in  IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        notes_in               IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in      IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN sr_surgery_record.adw_last_update%TYPE DEFAULT SYSDATE,
        dt_anest_start_tstz_in IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_in   IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_in    IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_in     IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in  IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_in   IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_in   IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_in    IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        flg_priority_in        IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_sr_proc_in         IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_in      IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        l_pky    sr_surgery_record.id_surgery_record%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_surgery_record_in   => l_pky,
            id_schedule_sr_in      => id_schedule_sr_in,
            id_sr_intervention_in  => id_sr_intervention_in,
            id_prof_team_in        => id_prof_team_in,
            id_patient_in          => id_patient_in,
            flg_pat_status_in      => flg_pat_status_in,
            flg_state_in           => flg_state_in,
            flg_surg_nat_in        => flg_surg_nat_in,
            flg_surg_type_in       => flg_surg_type_in,
            flg_urgency_in         => flg_urgency_in,
            id_anesthesia_type_in  => id_anesthesia_type_in,
            id_clinical_service_in => id_clinical_service_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_institution_in      => id_institution_in,
            adw_last_update_in     => adw_last_update_in,
            dt_anest_start_tstz_in => dt_anest_start_tstz_in,
            dt_anest_end_tstz_in   => dt_anest_end_tstz_in,
            dt_sr_entry_tstz_in    => dt_sr_entry_tstz_in,
            dt_sr_exit_tstz_in     => dt_sr_exit_tstz_in,
            dt_room_entry_tstz_in  => dt_room_entry_tstz_in,
            dt_room_exit_tstz_in   => dt_room_exit_tstz_in,
            dt_rcv_entry_tstz_in   => dt_rcv_entry_tstz_in,
            dt_rcv_exit_tstz_in    => dt_rcv_exit_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_priority_in        => flg_priority_in,
            flg_sr_proc_in         => flg_sr_proc_in,
            dt_flg_sr_proc_in      => dt_flg_sr_proc_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN sr_surgery_record_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO sr_surgery_record
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SURGERY_RECORD _' || indx,
                                                        value_in           => rows_in(indx).id_surgery_record,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHEDULE_SR _' || indx,
                                                        value_in           => rows_in(indx).id_schedule_sr,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SR_INTERVENTION _' || indx,
                                                        value_in           => rows_in(indx).id_sr_intervention,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_TEAM _' || indx,
                                                        value_in           => rows_in(indx).id_prof_team,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_PAT_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_pat_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATE _' || indx,
                                                        value_in           => rows_in(indx).flg_state,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_SURG_NAT _' || indx,
                                                        value_in           => rows_in(indx).flg_surg_nat,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_SURG_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_surg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_URGENCY _' || indx,
                                                        value_in           => rows_in(indx).flg_urgency,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ANESTHESIA_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_anesthesia_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CLINICAL_SERVICE _' || indx,
                                                        value_in           => rows_in(indx).id_clinical_service,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ADW_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).adw_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ANEST_START_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_anest_start_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ANEST_END_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_anest_end_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_SR_ENTRY_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_sr_entry_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_SR_EXIT_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_sr_exit_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ROOM_ENTRY_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_room_entry_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ROOM_EXIT_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_room_exit_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_RCV_ENTRY_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_rcv_entry_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_RCV_EXIT_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_rcv_exit_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_PRIORITY _' || indx,
                                                        value_in           => rows_in(indx).flg_priority,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_SR_PROC _' || indx,
                                                        value_in           => rows_in(indx).flg_sr_proc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_FLG_SR_PROC _' || indx,
                                                        value_in           => rows_in(indx).dt_flg_sr_proc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'SR_SURGERY_RECORD',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN sr_surgery_record_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_surgery_record_in    IN sr_surgery_record.id_surgery_record%TYPE,
        id_schedule_sr_in       IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin      IN BOOLEAN := TRUE,
        id_sr_intervention_in   IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_sr_intervention_nin  IN BOOLEAN := TRUE,
        id_prof_team_in         IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_prof_team_nin        IN BOOLEAN := TRUE,
        id_patient_in           IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        flg_pat_status_in       IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_pat_status_nin      IN BOOLEAN := TRUE,
        flg_state_in            IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_state_nin           IN BOOLEAN := TRUE,
        flg_surg_nat_in         IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_nat_nin        IN BOOLEAN := TRUE,
        flg_surg_type_in        IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_surg_type_nin       IN BOOLEAN := TRUE,
        flg_urgency_in          IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        flg_urgency_nin         IN BOOLEAN := TRUE,
        id_anesthesia_type_in   IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_anesthesia_type_nin  IN BOOLEAN := TRUE,
        id_clinical_service_in  IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin IN BOOLEAN := TRUE,
        notes_in                IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        notes_cancel_in         IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_institution_in       IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        adw_last_update_in      IN sr_surgery_record.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        dt_anest_start_tstz_in  IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_start_tstz_nin IN BOOLEAN := TRUE,
        dt_anest_end_tstz_in    IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_nin   IN BOOLEAN := TRUE,
        dt_sr_entry_tstz_in     IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_nin    IN BOOLEAN := TRUE,
        dt_sr_exit_tstz_in      IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_nin     IN BOOLEAN := TRUE,
        dt_room_entry_tstz_in   IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_nin  IN BOOLEAN := TRUE,
        dt_room_exit_tstz_in    IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_nin   IN BOOLEAN := TRUE,
        dt_rcv_entry_tstz_in    IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_nin   IN BOOLEAN := TRUE,
        dt_rcv_exit_tstz_in     IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_nin    IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        id_episode_in           IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        create_user_in          IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_priority_in         IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin        IN BOOLEAN := TRUE,
        flg_sr_proc_in          IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        flg_sr_proc_nin         IN BOOLEAN := TRUE,
        dt_flg_sr_proc_in       IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_nin      IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_schedule_sr_n      NUMBER(1);
        l_id_sr_intervention_n  NUMBER(1);
        l_id_prof_team_n        NUMBER(1);
        l_id_patient_n          NUMBER(1);
        l_flg_pat_status_n      NUMBER(1);
        l_flg_state_n           NUMBER(1);
        l_flg_surg_nat_n        NUMBER(1);
        l_flg_surg_type_n       NUMBER(1);
        l_flg_urgency_n         NUMBER(1);
        l_id_anesthesia_type_n  NUMBER(1);
        l_id_clinical_service_n NUMBER(1);
        l_notes_n               NUMBER(1);
        l_id_prof_cancel_n      NUMBER(1);
        l_notes_cancel_n        NUMBER(1);
        l_id_institution_n      NUMBER(1);
        l_adw_last_update_n     NUMBER(1);
        l_dt_anest_start_tstz_n NUMBER(1);
        l_dt_anest_end_tstz_n   NUMBER(1);
        l_dt_sr_entry_tstz_n    NUMBER(1);
        l_dt_sr_exit_tstz_n     NUMBER(1);
        l_dt_room_entry_tstz_n  NUMBER(1);
        l_dt_room_exit_tstz_n   NUMBER(1);
        l_dt_rcv_entry_tstz_n   NUMBER(1);
        l_dt_rcv_exit_tstz_n    NUMBER(1);
        l_dt_cancel_tstz_n      NUMBER(1);
        l_id_episode_n          NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_flg_priority_n        NUMBER(1);
        l_flg_sr_proc_n         NUMBER(1);
        l_dt_flg_sr_proc_n      NUMBER(1);
    BEGIN
    
        l_id_schedule_sr_n      := sys.diutil.bool_to_int(id_schedule_sr_nin);
        l_id_sr_intervention_n  := sys.diutil.bool_to_int(id_sr_intervention_nin);
        l_id_prof_team_n        := sys.diutil.bool_to_int(id_prof_team_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_pat_status_n      := sys.diutil.bool_to_int(flg_pat_status_nin);
        l_flg_state_n           := sys.diutil.bool_to_int(flg_state_nin);
        l_flg_surg_nat_n        := sys.diutil.bool_to_int(flg_surg_nat_nin);
        l_flg_surg_type_n       := sys.diutil.bool_to_int(flg_surg_type_nin);
        l_flg_urgency_n         := sys.diutil.bool_to_int(flg_urgency_nin);
        l_id_anesthesia_type_n  := sys.diutil.bool_to_int(id_anesthesia_type_nin);
        l_id_clinical_service_n := sys.diutil.bool_to_int(id_clinical_service_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_id_prof_cancel_n      := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n        := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_institution_n      := sys.diutil.bool_to_int(id_institution_nin);
        l_adw_last_update_n     := sys.diutil.bool_to_int(adw_last_update_nin);
        l_dt_anest_start_tstz_n := sys.diutil.bool_to_int(dt_anest_start_tstz_nin);
        l_dt_anest_end_tstz_n   := sys.diutil.bool_to_int(dt_anest_end_tstz_nin);
        l_dt_sr_entry_tstz_n    := sys.diutil.bool_to_int(dt_sr_entry_tstz_nin);
        l_dt_sr_exit_tstz_n     := sys.diutil.bool_to_int(dt_sr_exit_tstz_nin);
        l_dt_room_entry_tstz_n  := sys.diutil.bool_to_int(dt_room_entry_tstz_nin);
        l_dt_room_exit_tstz_n   := sys.diutil.bool_to_int(dt_room_exit_tstz_nin);
        l_dt_rcv_entry_tstz_n   := sys.diutil.bool_to_int(dt_rcv_entry_tstz_nin);
        l_dt_rcv_exit_tstz_n    := sys.diutil.bool_to_int(dt_rcv_exit_tstz_nin);
        l_dt_cancel_tstz_n      := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_priority_n        := sys.diutil.bool_to_int(flg_priority_nin);
        l_flg_sr_proc_n         := sys.diutil.bool_to_int(flg_sr_proc_nin);
        l_dt_flg_sr_proc_n      := sys.diutil.bool_to_int(dt_flg_sr_proc_nin);
    
        UPDATE sr_surgery_record
           SET id_schedule_sr      = decode(l_id_schedule_sr_n,
                                            0,
                                            id_schedule_sr_in,
                                            nvl(id_schedule_sr_in, id_schedule_sr)),
               id_sr_intervention  = decode(l_id_sr_intervention_n,
                                            0,
                                            id_sr_intervention_in,
                                            nvl(id_sr_intervention_in, id_sr_intervention)),
               id_prof_team        = decode(l_id_prof_team_n, 0, id_prof_team_in, nvl(id_prof_team_in, id_prof_team)),
               id_patient          = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               flg_pat_status      = decode(l_flg_pat_status_n,
                                            0,
                                            flg_pat_status_in,
                                            nvl(flg_pat_status_in, flg_pat_status)),
               flg_state           = decode(l_flg_state_n, 0, flg_state_in, nvl(flg_state_in, flg_state)),
               flg_surg_nat        = decode(l_flg_surg_nat_n, 0, flg_surg_nat_in, nvl(flg_surg_nat_in, flg_surg_nat)),
               flg_surg_type       = decode(l_flg_surg_type_n, 0, flg_surg_type_in, nvl(flg_surg_type_in, flg_surg_type)),
               flg_urgency         = decode(l_flg_urgency_n, 0, flg_urgency_in, nvl(flg_urgency_in, flg_urgency)),
               id_anesthesia_type  = decode(l_id_anesthesia_type_n,
                                            0,
                                            id_anesthesia_type_in,
                                            nvl(id_anesthesia_type_in, id_anesthesia_type)),
               id_clinical_service = decode(l_id_clinical_service_n,
                                            0,
                                            id_clinical_service_in,
                                            nvl(id_clinical_service_in, id_clinical_service)),
               notes               = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_prof_cancel      = decode(l_id_prof_cancel_n,
                                            0,
                                            id_prof_cancel_in,
                                            nvl(id_prof_cancel_in, id_prof_cancel)),
               notes_cancel        = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               id_institution      = decode(l_id_institution_n,
                                            0,
                                            id_institution_in,
                                            nvl(id_institution_in, id_institution)),
               adw_last_update     = decode(l_adw_last_update_n,
                                            0,
                                            adw_last_update_in,
                                            nvl(adw_last_update_in, adw_last_update)),
               dt_anest_start_tstz = decode(l_dt_anest_start_tstz_n,
                                            0,
                                            dt_anest_start_tstz_in,
                                            nvl(dt_anest_start_tstz_in, dt_anest_start_tstz)),
               dt_anest_end_tstz   = decode(l_dt_anest_end_tstz_n,
                                            0,
                                            dt_anest_end_tstz_in,
                                            nvl(dt_anest_end_tstz_in, dt_anest_end_tstz)),
               dt_sr_entry_tstz    = decode(l_dt_sr_entry_tstz_n,
                                            0,
                                            dt_sr_entry_tstz_in,
                                            nvl(dt_sr_entry_tstz_in, dt_sr_entry_tstz)),
               dt_sr_exit_tstz     = decode(l_dt_sr_exit_tstz_n,
                                            0,
                                            dt_sr_exit_tstz_in,
                                            nvl(dt_sr_exit_tstz_in, dt_sr_exit_tstz)),
               dt_room_entry_tstz  = decode(l_dt_room_entry_tstz_n,
                                            0,
                                            dt_room_entry_tstz_in,
                                            nvl(dt_room_entry_tstz_in, dt_room_entry_tstz)),
               dt_room_exit_tstz   = decode(l_dt_room_exit_tstz_n,
                                            0,
                                            dt_room_exit_tstz_in,
                                            nvl(dt_room_exit_tstz_in, dt_room_exit_tstz)),
               dt_rcv_entry_tstz   = decode(l_dt_rcv_entry_tstz_n,
                                            0,
                                            dt_rcv_entry_tstz_in,
                                            nvl(dt_rcv_entry_tstz_in, dt_rcv_entry_tstz)),
               dt_rcv_exit_tstz    = decode(l_dt_rcv_exit_tstz_n,
                                            0,
                                            dt_rcv_exit_tstz_in,
                                            nvl(dt_rcv_exit_tstz_in, dt_rcv_exit_tstz)),
               dt_cancel_tstz      = decode(l_dt_cancel_tstz_n,
                                            0,
                                            dt_cancel_tstz_in,
                                            nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               id_episode          = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution)),
               flg_priority        = decode(l_flg_priority_n, 0, flg_priority_in, nvl(flg_priority_in, flg_priority)),
               flg_sr_proc         = decode(l_flg_sr_proc_n, 0, flg_sr_proc_in, nvl(flg_sr_proc_in, flg_sr_proc)),
               dt_flg_sr_proc      = decode(l_dt_flg_sr_proc_n,
                                            0,
                                            dt_flg_sr_proc_in,
                                            nvl(dt_flg_sr_proc_in, dt_flg_sr_proc))
         WHERE id_surgery_record = id_surgery_record_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'SR_REC_ID_SCHEDULE'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "SR_REC_ID_SCHEDULE"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'SR_SURGERY_RECORD',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHEDULE_SR',
                                                        value_in           => id_schedule_sr_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'SR_SURGERY_RECORD');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    IF l_name = 'SR_REC_ANEST_TYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANESTHESIA_TYPE',
                                                        value_in           => id_anesthesia_type_in);
                    END IF;
                    IF l_name = 'SR_REC_CSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CLINICAL_SERVICE',
                                                        value_in           => id_clinical_service_in);
                    END IF;
                    IF l_name = 'SR_REC_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'SR_REC_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'SR_REC_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'SR_REC_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'SR_REC_PROF_TEAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_TEAM',
                                                        value_in           => id_prof_team_in);
                    END IF;
                    IF l_name = 'SR_REC_SIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SR_INTERVENTION',
                                                        value_in           => id_sr_intervention_in);
                    END IF;
                    IF l_name = 'SR_REC_SR_SCHED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE_SR',
                                                        value_in           => id_schedule_sr_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_surgery_record_in    IN sr_surgery_record.id_surgery_record%TYPE,
        id_schedule_sr_in       IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin      IN BOOLEAN := TRUE,
        id_sr_intervention_in   IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_sr_intervention_nin  IN BOOLEAN := TRUE,
        id_prof_team_in         IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_prof_team_nin        IN BOOLEAN := TRUE,
        id_patient_in           IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        flg_pat_status_in       IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_pat_status_nin      IN BOOLEAN := TRUE,
        flg_state_in            IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_state_nin           IN BOOLEAN := TRUE,
        flg_surg_nat_in         IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_nat_nin        IN BOOLEAN := TRUE,
        flg_surg_type_in        IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_surg_type_nin       IN BOOLEAN := TRUE,
        flg_urgency_in          IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        flg_urgency_nin         IN BOOLEAN := TRUE,
        id_anesthesia_type_in   IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_anesthesia_type_nin  IN BOOLEAN := TRUE,
        id_clinical_service_in  IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin IN BOOLEAN := TRUE,
        notes_in                IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        notes_cancel_in         IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_institution_in       IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        adw_last_update_in      IN sr_surgery_record.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        dt_anest_start_tstz_in  IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_start_tstz_nin IN BOOLEAN := TRUE,
        dt_anest_end_tstz_in    IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_nin   IN BOOLEAN := TRUE,
        dt_sr_entry_tstz_in     IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_nin    IN BOOLEAN := TRUE,
        dt_sr_exit_tstz_in      IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_nin     IN BOOLEAN := TRUE,
        dt_room_entry_tstz_in   IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_nin  IN BOOLEAN := TRUE,
        dt_room_exit_tstz_in    IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_nin   IN BOOLEAN := TRUE,
        dt_rcv_entry_tstz_in    IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_nin   IN BOOLEAN := TRUE,
        dt_rcv_exit_tstz_in     IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_nin    IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        id_episode_in           IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        create_user_in          IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_priority_in         IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin        IN BOOLEAN := TRUE,
        flg_sr_proc_in          IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        flg_sr_proc_nin         IN BOOLEAN := TRUE,
        dt_flg_sr_proc_in       IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_nin      IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_surgery_record_in    => id_surgery_record_in,
            id_schedule_sr_in       => id_schedule_sr_in,
            id_schedule_sr_nin      => id_schedule_sr_nin,
            id_sr_intervention_in   => id_sr_intervention_in,
            id_sr_intervention_nin  => id_sr_intervention_nin,
            id_prof_team_in         => id_prof_team_in,
            id_prof_team_nin        => id_prof_team_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            flg_pat_status_in       => flg_pat_status_in,
            flg_pat_status_nin      => flg_pat_status_nin,
            flg_state_in            => flg_state_in,
            flg_state_nin           => flg_state_nin,
            flg_surg_nat_in         => flg_surg_nat_in,
            flg_surg_nat_nin        => flg_surg_nat_nin,
            flg_surg_type_in        => flg_surg_type_in,
            flg_surg_type_nin       => flg_surg_type_nin,
            flg_urgency_in          => flg_urgency_in,
            flg_urgency_nin         => flg_urgency_nin,
            id_anesthesia_type_in   => id_anesthesia_type_in,
            id_anesthesia_type_nin  => id_anesthesia_type_nin,
            id_clinical_service_in  => id_clinical_service_in,
            id_clinical_service_nin => id_clinical_service_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            id_institution_in       => id_institution_in,
            id_institution_nin      => id_institution_nin,
            adw_last_update_in      => adw_last_update_in,
            adw_last_update_nin     => adw_last_update_nin,
            dt_anest_start_tstz_in  => dt_anest_start_tstz_in,
            dt_anest_start_tstz_nin => dt_anest_start_tstz_nin,
            dt_anest_end_tstz_in    => dt_anest_end_tstz_in,
            dt_anest_end_tstz_nin   => dt_anest_end_tstz_nin,
            dt_sr_entry_tstz_in     => dt_sr_entry_tstz_in,
            dt_sr_entry_tstz_nin    => dt_sr_entry_tstz_nin,
            dt_sr_exit_tstz_in      => dt_sr_exit_tstz_in,
            dt_sr_exit_tstz_nin     => dt_sr_exit_tstz_nin,
            dt_room_entry_tstz_in   => dt_room_entry_tstz_in,
            dt_room_entry_tstz_nin  => dt_room_entry_tstz_nin,
            dt_room_exit_tstz_in    => dt_room_exit_tstz_in,
            dt_room_exit_tstz_nin   => dt_room_exit_tstz_nin,
            dt_rcv_entry_tstz_in    => dt_rcv_entry_tstz_in,
            dt_rcv_entry_tstz_nin   => dt_rcv_entry_tstz_nin,
            dt_rcv_exit_tstz_in     => dt_rcv_exit_tstz_in,
            dt_rcv_exit_tstz_nin    => dt_rcv_exit_tstz_nin,
            dt_cancel_tstz_in       => dt_cancel_tstz_in,
            dt_cancel_tstz_nin      => dt_cancel_tstz_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            flg_priority_in         => flg_priority_in,
            flg_priority_nin        => flg_priority_nin,
            flg_sr_proc_in          => flg_sr_proc_in,
            flg_sr_proc_nin         => flg_sr_proc_nin,
            dt_flg_sr_proc_in       => dt_flg_sr_proc_in,
            dt_flg_sr_proc_nin      => dt_flg_sr_proc_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_schedule_sr_in       IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin      IN BOOLEAN := TRUE,
        id_sr_intervention_in   IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_sr_intervention_nin  IN BOOLEAN := TRUE,
        id_prof_team_in         IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_prof_team_nin        IN BOOLEAN := TRUE,
        id_patient_in           IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        flg_pat_status_in       IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_pat_status_nin      IN BOOLEAN := TRUE,
        flg_state_in            IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_state_nin           IN BOOLEAN := TRUE,
        flg_surg_nat_in         IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_nat_nin        IN BOOLEAN := TRUE,
        flg_surg_type_in        IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_surg_type_nin       IN BOOLEAN := TRUE,
        flg_urgency_in          IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        flg_urgency_nin         IN BOOLEAN := TRUE,
        id_anesthesia_type_in   IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_anesthesia_type_nin  IN BOOLEAN := TRUE,
        id_clinical_service_in  IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin IN BOOLEAN := TRUE,
        notes_in                IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        notes_cancel_in         IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_institution_in       IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        adw_last_update_in      IN sr_surgery_record.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        dt_anest_start_tstz_in  IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_start_tstz_nin IN BOOLEAN := TRUE,
        dt_anest_end_tstz_in    IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_nin   IN BOOLEAN := TRUE,
        dt_sr_entry_tstz_in     IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_nin    IN BOOLEAN := TRUE,
        dt_sr_exit_tstz_in      IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_nin     IN BOOLEAN := TRUE,
        dt_room_entry_tstz_in   IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_nin  IN BOOLEAN := TRUE,
        dt_room_exit_tstz_in    IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_nin   IN BOOLEAN := TRUE,
        dt_rcv_entry_tstz_in    IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_nin   IN BOOLEAN := TRUE,
        dt_rcv_exit_tstz_in     IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_nin    IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        id_episode_in           IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        create_user_in          IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_priority_in         IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin        IN BOOLEAN := TRUE,
        flg_sr_proc_in          IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        flg_sr_proc_nin         IN BOOLEAN := TRUE,
        dt_flg_sr_proc_in       IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_nin      IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_schedule_sr_n      NUMBER(1);
        l_id_sr_intervention_n  NUMBER(1);
        l_id_prof_team_n        NUMBER(1);
        l_id_patient_n          NUMBER(1);
        l_flg_pat_status_n      NUMBER(1);
        l_flg_state_n           NUMBER(1);
        l_flg_surg_nat_n        NUMBER(1);
        l_flg_surg_type_n       NUMBER(1);
        l_flg_urgency_n         NUMBER(1);
        l_id_anesthesia_type_n  NUMBER(1);
        l_id_clinical_service_n NUMBER(1);
        l_notes_n               NUMBER(1);
        l_id_prof_cancel_n      NUMBER(1);
        l_notes_cancel_n        NUMBER(1);
        l_id_institution_n      NUMBER(1);
        l_adw_last_update_n     NUMBER(1);
        l_dt_anest_start_tstz_n NUMBER(1);
        l_dt_anest_end_tstz_n   NUMBER(1);
        l_dt_sr_entry_tstz_n    NUMBER(1);
        l_dt_sr_exit_tstz_n     NUMBER(1);
        l_dt_room_entry_tstz_n  NUMBER(1);
        l_dt_room_exit_tstz_n   NUMBER(1);
        l_dt_rcv_entry_tstz_n   NUMBER(1);
        l_dt_rcv_exit_tstz_n    NUMBER(1);
        l_dt_cancel_tstz_n      NUMBER(1);
        l_id_episode_n          NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_flg_priority_n        NUMBER(1);
        l_flg_sr_proc_n         NUMBER(1);
        l_dt_flg_sr_proc_n      NUMBER(1);
        id_surgery_record_in    sr_surgery_record.id_surgery_record%TYPE;
    BEGIN
    
        l_id_schedule_sr_n      := sys.diutil.bool_to_int(id_schedule_sr_nin);
        l_id_sr_intervention_n  := sys.diutil.bool_to_int(id_sr_intervention_nin);
        l_id_prof_team_n        := sys.diutil.bool_to_int(id_prof_team_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_pat_status_n      := sys.diutil.bool_to_int(flg_pat_status_nin);
        l_flg_state_n           := sys.diutil.bool_to_int(flg_state_nin);
        l_flg_surg_nat_n        := sys.diutil.bool_to_int(flg_surg_nat_nin);
        l_flg_surg_type_n       := sys.diutil.bool_to_int(flg_surg_type_nin);
        l_flg_urgency_n         := sys.diutil.bool_to_int(flg_urgency_nin);
        l_id_anesthesia_type_n  := sys.diutil.bool_to_int(id_anesthesia_type_nin);
        l_id_clinical_service_n := sys.diutil.bool_to_int(id_clinical_service_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_id_prof_cancel_n      := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n        := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_institution_n      := sys.diutil.bool_to_int(id_institution_nin);
        l_adw_last_update_n     := sys.diutil.bool_to_int(adw_last_update_nin);
        l_dt_anest_start_tstz_n := sys.diutil.bool_to_int(dt_anest_start_tstz_nin);
        l_dt_anest_end_tstz_n   := sys.diutil.bool_to_int(dt_anest_end_tstz_nin);
        l_dt_sr_entry_tstz_n    := sys.diutil.bool_to_int(dt_sr_entry_tstz_nin);
        l_dt_sr_exit_tstz_n     := sys.diutil.bool_to_int(dt_sr_exit_tstz_nin);
        l_dt_room_entry_tstz_n  := sys.diutil.bool_to_int(dt_room_entry_tstz_nin);
        l_dt_room_exit_tstz_n   := sys.diutil.bool_to_int(dt_room_exit_tstz_nin);
        l_dt_rcv_entry_tstz_n   := sys.diutil.bool_to_int(dt_rcv_entry_tstz_nin);
        l_dt_rcv_exit_tstz_n    := sys.diutil.bool_to_int(dt_rcv_exit_tstz_nin);
        l_dt_cancel_tstz_n      := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_priority_n        := sys.diutil.bool_to_int(flg_priority_nin);
        l_flg_sr_proc_n         := sys.diutil.bool_to_int(flg_sr_proc_nin);
        l_dt_flg_sr_proc_n      := sys.diutil.bool_to_int(dt_flg_sr_proc_nin);
    
        l_sql := 'UPDATE SR_SURGERY_RECORD SET ' || ' ID_SCHEDULE_SR = decode (' || l_id_schedule_sr_n ||
                 ',0,:id_schedule_sr_in, NVL (:id_schedule_sr_in, ID_SCHEDULE_SR)) ' || ',' ||
                 ' ID_SR_INTERVENTION = decode (' || l_id_sr_intervention_n ||
                 ',0,:id_sr_intervention_in, NVL (:id_sr_intervention_in, ID_SR_INTERVENTION)) ' || ',' ||
                 ' ID_PROF_TEAM = decode (' || l_id_prof_team_n ||
                 ',0,:id_prof_team_in, NVL (:id_prof_team_in, ID_PROF_TEAM)) ' || ',' || ' ID_PATIENT = decode (' ||
                 l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' FLG_PAT_STATUS = decode (' || l_flg_pat_status_n ||
                 ',0,:flg_pat_status_in, NVL (:flg_pat_status_in, FLG_PAT_STATUS)) ' || ',' || ' FLG_STATE = decode (' ||
                 l_flg_state_n || ',0,:flg_state_in, NVL (:flg_state_in, FLG_STATE)) ' || ',' ||
                 ' FLG_SURG_NAT = decode (' || l_flg_surg_nat_n ||
                 ',0,:flg_surg_nat_in, NVL (:flg_surg_nat_in, FLG_SURG_NAT)) ' || ',' || ' FLG_SURG_TYPE = decode (' ||
                 l_flg_surg_type_n || ',0,:flg_surg_type_in, NVL (:flg_surg_type_in, FLG_SURG_TYPE)) ' || ',' ||
                 ' FLG_URGENCY = decode (' || l_flg_urgency_n ||
                 ',0,:flg_urgency_in, NVL (:flg_urgency_in, FLG_URGENCY)) ' || ',' || ' ID_ANESTHESIA_TYPE = decode (' ||
                 l_id_anesthesia_type_n ||
                 ',0,:id_anesthesia_type_in, NVL (:id_anesthesia_type_in, ID_ANESTHESIA_TYPE)) ' || ',' ||
                 ' ID_CLINICAL_SERVICE = decode (' || l_id_clinical_service_n ||
                 ',0,:id_clinical_service_in, NVL (:id_clinical_service_in, ID_CLINICAL_SERVICE)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                 ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' ID_INSTITUTION = decode (' ||
                 l_id_institution_n || ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' ADW_LAST_UPDATE = decode (' || l_adw_last_update_n ||
                 ',0,:adw_last_update_in, NVL (:adw_last_update_in, ADW_LAST_UPDATE)) ' || ',' ||
                 ' DT_ANEST_START_TSTZ = decode (' || l_dt_anest_start_tstz_n ||
                 ',0,:dt_anest_start_tstz_in, NVL (:dt_anest_start_tstz_in, DT_ANEST_START_TSTZ)) ' || ',' ||
                 ' DT_ANEST_END_TSTZ = decode (' || l_dt_anest_end_tstz_n ||
                 ',0,:dt_anest_end_tstz_in, NVL (:dt_anest_end_tstz_in, DT_ANEST_END_TSTZ)) ' || ',' ||
                 ' DT_SR_ENTRY_TSTZ = decode (' || l_dt_sr_entry_tstz_n ||
                 ',0,:dt_sr_entry_tstz_in, NVL (:dt_sr_entry_tstz_in, DT_SR_ENTRY_TSTZ)) ' || ',' ||
                 ' DT_SR_EXIT_TSTZ = decode (' || l_dt_sr_exit_tstz_n ||
                 ',0,:dt_sr_exit_tstz_in, NVL (:dt_sr_exit_tstz_in, DT_SR_EXIT_TSTZ)) ' || ',' ||
                 ' DT_ROOM_ENTRY_TSTZ = decode (' || l_dt_room_entry_tstz_n ||
                 ',0,:dt_room_entry_tstz_in, NVL (:dt_room_entry_tstz_in, DT_ROOM_ENTRY_TSTZ)) ' || ',' ||
                 ' DT_ROOM_EXIT_TSTZ = decode (' || l_dt_room_exit_tstz_n ||
                 ',0,:dt_room_exit_tstz_in, NVL (:dt_room_exit_tstz_in, DT_ROOM_EXIT_TSTZ)) ' || ',' ||
                 ' DT_RCV_ENTRY_TSTZ = decode (' || l_dt_rcv_entry_tstz_n ||
                 ',0,:dt_rcv_entry_tstz_in, NVL (:dt_rcv_entry_tstz_in, DT_RCV_ENTRY_TSTZ)) ' || ',' ||
                 ' DT_RCV_EXIT_TSTZ = decode (' || l_dt_rcv_exit_tstz_n ||
                 ',0,:dt_rcv_exit_tstz_in, NVL (:dt_rcv_exit_tstz_in, DT_RCV_EXIT_TSTZ)) ' || ',' ||
                 ' DT_CANCEL_TSTZ = decode (' || l_dt_cancel_tstz_n ||
                 ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) ' || ',' || ' ID_EPISODE = decode (' ||
                 l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' FLG_PRIORITY = decode (' || l_flg_priority_n ||
                 ',0,:flg_priority_in, NVL (:flg_priority_in, FLG_PRIORITY)) ' || ',' || ' FLG_SR_PROC = decode (' ||
                 l_flg_sr_proc_n || ',0,:flg_sr_proc_in, NVL (:flg_sr_proc_in, FLG_SR_PROC)) ' || ',' ||
                 ' DT_FLG_SR_PROC = decode (' || l_dt_flg_sr_proc_n ||
                 ',0,:dt_flg_sr_proc_in, NVL (:dt_flg_sr_proc_in, DT_FLG_SR_PROC)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_schedule_sr_in, id_sr_intervention_in, id_prof_team_in, id_patient_in, flg_pat_status_in, flg_state_in, flg_surg_nat_in, flg_surg_type_in, flg_urgency_in, id_anesthesia_type_in, id_clinical_service_in, notes_in, id_prof_cancel_in, notes_cancel_in, id_institution_in, adw_last_update_in, dt_anest_start_tstz_in, dt_anest_end_tstz_in, dt_sr_entry_tstz_in, dt_sr_exit_tstz_in, dt_room_entry_tstz_in, dt_room_exit_tstz_in, dt_rcv_entry_tstz_in, dt_rcv_exit_tstz_in, dt_cancel_tstz_in, id_episode_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_priority_in, flg_sr_proc_in, dt_flg_sr_proc_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'SR_REC_ID_SCHEDULE'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "SR_REC_ID_SCHEDULE"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'SR_SURGERY_RECORD',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHEDULE_SR',
                                                        value_in           => id_schedule_sr_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'SR_SURGERY_RECORD');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    IF l_name = 'SR_REC_ANEST_TYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANESTHESIA_TYPE',
                                                        value_in           => id_anesthesia_type_in);
                    END IF;
                    IF l_name = 'SR_REC_CSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CLINICAL_SERVICE',
                                                        value_in           => id_clinical_service_in);
                    END IF;
                    IF l_name = 'SR_REC_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'SR_REC_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'SR_REC_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'SR_REC_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'SR_REC_PROF_TEAM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_TEAM',
                                                        value_in           => id_prof_team_in);
                    END IF;
                    IF l_name = 'SR_REC_SIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SR_INTERVENTION',
                                                        value_in           => id_sr_intervention_in);
                    END IF;
                    IF l_name = 'SR_REC_SR_SCHED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE_SR',
                                                        value_in           => id_schedule_sr_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_schedule_sr_in       IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin      IN BOOLEAN := TRUE,
        id_sr_intervention_in   IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_sr_intervention_nin  IN BOOLEAN := TRUE,
        id_prof_team_in         IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_prof_team_nin        IN BOOLEAN := TRUE,
        id_patient_in           IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        flg_pat_status_in       IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_pat_status_nin      IN BOOLEAN := TRUE,
        flg_state_in            IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_state_nin           IN BOOLEAN := TRUE,
        flg_surg_nat_in         IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_nat_nin        IN BOOLEAN := TRUE,
        flg_surg_type_in        IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_surg_type_nin       IN BOOLEAN := TRUE,
        flg_urgency_in          IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        flg_urgency_nin         IN BOOLEAN := TRUE,
        id_anesthesia_type_in   IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_anesthesia_type_nin  IN BOOLEAN := TRUE,
        id_clinical_service_in  IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        id_clinical_service_nin IN BOOLEAN := TRUE,
        notes_in                IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        notes_cancel_in         IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_institution_in       IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        adw_last_update_in      IN sr_surgery_record.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin     IN BOOLEAN := TRUE,
        dt_anest_start_tstz_in  IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_start_tstz_nin IN BOOLEAN := TRUE,
        dt_anest_end_tstz_in    IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_nin   IN BOOLEAN := TRUE,
        dt_sr_entry_tstz_in     IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_nin    IN BOOLEAN := TRUE,
        dt_sr_exit_tstz_in      IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_nin     IN BOOLEAN := TRUE,
        dt_room_entry_tstz_in   IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_nin  IN BOOLEAN := TRUE,
        dt_room_exit_tstz_in    IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_nin   IN BOOLEAN := TRUE,
        dt_rcv_entry_tstz_in    IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_nin   IN BOOLEAN := TRUE,
        dt_rcv_exit_tstz_in     IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_nin    IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        id_episode_in           IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        create_user_in          IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_priority_in         IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin        IN BOOLEAN := TRUE,
        flg_sr_proc_in          IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        flg_sr_proc_nin         IN BOOLEAN := TRUE,
        dt_flg_sr_proc_in       IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_nin      IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_schedule_sr_in       => id_schedule_sr_in,
            id_schedule_sr_nin      => id_schedule_sr_nin,
            id_sr_intervention_in   => id_sr_intervention_in,
            id_sr_intervention_nin  => id_sr_intervention_nin,
            id_prof_team_in         => id_prof_team_in,
            id_prof_team_nin        => id_prof_team_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            flg_pat_status_in       => flg_pat_status_in,
            flg_pat_status_nin      => flg_pat_status_nin,
            flg_state_in            => flg_state_in,
            flg_state_nin           => flg_state_nin,
            flg_surg_nat_in         => flg_surg_nat_in,
            flg_surg_nat_nin        => flg_surg_nat_nin,
            flg_surg_type_in        => flg_surg_type_in,
            flg_surg_type_nin       => flg_surg_type_nin,
            flg_urgency_in          => flg_urgency_in,
            flg_urgency_nin         => flg_urgency_nin,
            id_anesthesia_type_in   => id_anesthesia_type_in,
            id_anesthesia_type_nin  => id_anesthesia_type_nin,
            id_clinical_service_in  => id_clinical_service_in,
            id_clinical_service_nin => id_clinical_service_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            id_institution_in       => id_institution_in,
            id_institution_nin      => id_institution_nin,
            adw_last_update_in      => adw_last_update_in,
            adw_last_update_nin     => adw_last_update_nin,
            dt_anest_start_tstz_in  => dt_anest_start_tstz_in,
            dt_anest_start_tstz_nin => dt_anest_start_tstz_nin,
            dt_anest_end_tstz_in    => dt_anest_end_tstz_in,
            dt_anest_end_tstz_nin   => dt_anest_end_tstz_nin,
            dt_sr_entry_tstz_in     => dt_sr_entry_tstz_in,
            dt_sr_entry_tstz_nin    => dt_sr_entry_tstz_nin,
            dt_sr_exit_tstz_in      => dt_sr_exit_tstz_in,
            dt_sr_exit_tstz_nin     => dt_sr_exit_tstz_nin,
            dt_room_entry_tstz_in   => dt_room_entry_tstz_in,
            dt_room_entry_tstz_nin  => dt_room_entry_tstz_nin,
            dt_room_exit_tstz_in    => dt_room_exit_tstz_in,
            dt_room_exit_tstz_nin   => dt_room_exit_tstz_nin,
            dt_rcv_entry_tstz_in    => dt_rcv_entry_tstz_in,
            dt_rcv_entry_tstz_nin   => dt_rcv_entry_tstz_nin,
            dt_rcv_exit_tstz_in     => dt_rcv_exit_tstz_in,
            dt_rcv_exit_tstz_nin    => dt_rcv_exit_tstz_nin,
            dt_cancel_tstz_in       => dt_cancel_tstz_in,
            dt_cancel_tstz_nin      => dt_cancel_tstz_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            flg_priority_in         => flg_priority_in,
            flg_priority_nin        => flg_priority_nin,
            flg_sr_proc_in          => flg_sr_proc_in,
            flg_sr_proc_nin         => flg_sr_proc_nin,
            dt_flg_sr_proc_in       => dt_flg_sr_proc_in,
            dt_flg_sr_proc_nin      => dt_flg_sr_proc_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN sr_surgery_record%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_surgery_record_in   => rec_in.id_surgery_record,
            id_schedule_sr_in      => rec_in.id_schedule_sr,
            id_sr_intervention_in  => rec_in.id_sr_intervention,
            id_prof_team_in        => rec_in.id_prof_team,
            id_patient_in          => rec_in.id_patient,
            flg_pat_status_in      => rec_in.flg_pat_status,
            flg_state_in           => rec_in.flg_state,
            flg_surg_nat_in        => rec_in.flg_surg_nat,
            flg_surg_type_in       => rec_in.flg_surg_type,
            flg_urgency_in         => rec_in.flg_urgency,
            id_anesthesia_type_in  => rec_in.id_anesthesia_type,
            id_clinical_service_in => rec_in.id_clinical_service,
            notes_in               => rec_in.notes,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            notes_cancel_in        => rec_in.notes_cancel,
            id_institution_in      => rec_in.id_institution,
            adw_last_update_in     => rec_in.adw_last_update,
            dt_anest_start_tstz_in => rec_in.dt_anest_start_tstz,
            dt_anest_end_tstz_in   => rec_in.dt_anest_end_tstz,
            dt_sr_entry_tstz_in    => rec_in.dt_sr_entry_tstz,
            dt_sr_exit_tstz_in     => rec_in.dt_sr_exit_tstz,
            dt_room_entry_tstz_in  => rec_in.dt_room_entry_tstz,
            dt_room_exit_tstz_in   => rec_in.dt_room_exit_tstz,
            dt_rcv_entry_tstz_in   => rec_in.dt_rcv_entry_tstz,
            dt_rcv_exit_tstz_in    => rec_in.dt_rcv_exit_tstz,
            dt_cancel_tstz_in      => rec_in.dt_cancel_tstz,
            id_episode_in          => rec_in.id_episode,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            flg_priority_in        => rec_in.flg_priority,
            flg_sr_proc_in         => rec_in.flg_sr_proc,
            dt_flg_sr_proc_in      => rec_in.dt_flg_sr_proc
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN sr_surgery_record%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_surgery_record_in   => rec_in.id_surgery_record,
            id_schedule_sr_in      => rec_in.id_schedule_sr,
            id_sr_intervention_in  => rec_in.id_sr_intervention,
            id_prof_team_in        => rec_in.id_prof_team,
            id_patient_in          => rec_in.id_patient,
            flg_pat_status_in      => rec_in.flg_pat_status,
            flg_state_in           => rec_in.flg_state,
            flg_surg_nat_in        => rec_in.flg_surg_nat,
            flg_surg_type_in       => rec_in.flg_surg_type,
            flg_urgency_in         => rec_in.flg_urgency,
            id_anesthesia_type_in  => rec_in.id_anesthesia_type,
            id_clinical_service_in => rec_in.id_clinical_service,
            notes_in               => rec_in.notes,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            notes_cancel_in        => rec_in.notes_cancel,
            id_institution_in      => rec_in.id_institution,
            adw_last_update_in     => rec_in.adw_last_update,
            dt_anest_start_tstz_in => rec_in.dt_anest_start_tstz,
            dt_anest_end_tstz_in   => rec_in.dt_anest_end_tstz,
            dt_sr_entry_tstz_in    => rec_in.dt_sr_entry_tstz,
            dt_sr_exit_tstz_in     => rec_in.dt_sr_exit_tstz,
            dt_room_entry_tstz_in  => rec_in.dt_room_entry_tstz,
            dt_room_exit_tstz_in   => rec_in.dt_room_exit_tstz,
            dt_rcv_entry_tstz_in   => rec_in.dt_rcv_entry_tstz,
            dt_rcv_exit_tstz_in    => rec_in.dt_rcv_exit_tstz,
            dt_cancel_tstz_in      => rec_in.dt_cancel_tstz,
            id_episode_in          => rec_in.id_episode,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            flg_priority_in        => rec_in.flg_priority,
            flg_sr_proc_in         => rec_in.flg_sr_proc,
            dt_flg_sr_proc_in      => rec_in.dt_flg_sr_proc
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_surgery_record_in   IN sr_surgery_record.id_surgery_record%TYPE,
        id_schedule_sr_in      IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_sr_intervention_in  IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_team_in        IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_patient_in          IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        flg_pat_status_in      IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_state_in           IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_surg_nat_in        IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_type_in       IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_urgency_in         IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        id_anesthesia_type_in  IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        notes_in               IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in      IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN sr_surgery_record.adw_last_update%TYPE DEFAULT NULL,
        dt_anest_start_tstz_in IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_in   IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_in    IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_in     IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in  IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_in   IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_in   IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_in    IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        flg_priority_in        IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_sr_proc_in         IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_in      IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        upd(id_surgery_record_in   => id_surgery_record_in,
            id_schedule_sr_in      => id_schedule_sr_in,
            id_sr_intervention_in  => id_sr_intervention_in,
            id_prof_team_in        => id_prof_team_in,
            id_patient_in          => id_patient_in,
            flg_pat_status_in      => flg_pat_status_in,
            flg_state_in           => flg_state_in,
            flg_surg_nat_in        => flg_surg_nat_in,
            flg_surg_type_in       => flg_surg_type_in,
            flg_urgency_in         => flg_urgency_in,
            id_anesthesia_type_in  => id_anesthesia_type_in,
            id_clinical_service_in => id_clinical_service_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_institution_in      => id_institution_in,
            adw_last_update_in     => adw_last_update_in,
            dt_anest_start_tstz_in => dt_anest_start_tstz_in,
            dt_anest_end_tstz_in   => dt_anest_end_tstz_in,
            dt_sr_entry_tstz_in    => dt_sr_entry_tstz_in,
            dt_sr_exit_tstz_in     => dt_sr_exit_tstz_in,
            dt_room_entry_tstz_in  => dt_room_entry_tstz_in,
            dt_room_exit_tstz_in   => dt_room_exit_tstz_in,
            dt_rcv_entry_tstz_in   => dt_rcv_entry_tstz_in,
            dt_rcv_exit_tstz_in    => dt_rcv_exit_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            id_episode_in          => id_episode_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_priority_in        => flg_priority_in,
            flg_sr_proc_in         => flg_sr_proc_in,
            dt_flg_sr_proc_in      => dt_flg_sr_proc_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_surgery_record_in   => id_surgery_record_in,
                id_schedule_sr_in      => id_schedule_sr_in,
                id_sr_intervention_in  => id_sr_intervention_in,
                id_prof_team_in        => id_prof_team_in,
                id_patient_in          => id_patient_in,
                flg_pat_status_in      => flg_pat_status_in,
                flg_state_in           => flg_state_in,
                flg_surg_nat_in        => flg_surg_nat_in,
                flg_surg_type_in       => flg_surg_type_in,
                flg_urgency_in         => flg_urgency_in,
                id_anesthesia_type_in  => id_anesthesia_type_in,
                id_clinical_service_in => id_clinical_service_in,
                notes_in               => notes_in,
                id_prof_cancel_in      => id_prof_cancel_in,
                notes_cancel_in        => notes_cancel_in,
                id_institution_in      => id_institution_in,
                adw_last_update_in     => adw_last_update_in,
                dt_anest_start_tstz_in => dt_anest_start_tstz_in,
                dt_anest_end_tstz_in   => dt_anest_end_tstz_in,
                dt_sr_entry_tstz_in    => dt_sr_entry_tstz_in,
                dt_sr_exit_tstz_in     => dt_sr_exit_tstz_in,
                dt_room_entry_tstz_in  => dt_room_entry_tstz_in,
                dt_room_exit_tstz_in   => dt_room_exit_tstz_in,
                dt_rcv_entry_tstz_in   => dt_rcv_entry_tstz_in,
                dt_rcv_exit_tstz_in    => dt_rcv_exit_tstz_in,
                dt_cancel_tstz_in      => dt_cancel_tstz_in,
                id_episode_in          => id_episode_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                flg_priority_in        => flg_priority_in,
                flg_sr_proc_in         => flg_sr_proc_in,
                dt_flg_sr_proc_in      => dt_flg_sr_proc_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_surgery_record_in   IN sr_surgery_record.id_surgery_record%TYPE,
        id_schedule_sr_in      IN sr_surgery_record.id_schedule_sr%TYPE DEFAULT NULL,
        id_sr_intervention_in  IN sr_surgery_record.id_sr_intervention%TYPE DEFAULT NULL,
        id_prof_team_in        IN sr_surgery_record.id_prof_team%TYPE DEFAULT NULL,
        id_patient_in          IN sr_surgery_record.id_patient%TYPE DEFAULT NULL,
        flg_pat_status_in      IN sr_surgery_record.flg_pat_status%TYPE DEFAULT NULL,
        flg_state_in           IN sr_surgery_record.flg_state%TYPE DEFAULT NULL,
        flg_surg_nat_in        IN sr_surgery_record.flg_surg_nat%TYPE DEFAULT NULL,
        flg_surg_type_in       IN sr_surgery_record.flg_surg_type%TYPE DEFAULT NULL,
        flg_urgency_in         IN sr_surgery_record.flg_urgency%TYPE DEFAULT NULL,
        id_anesthesia_type_in  IN sr_surgery_record.id_anesthesia_type%TYPE DEFAULT NULL,
        id_clinical_service_in IN sr_surgery_record.id_clinical_service%TYPE DEFAULT NULL,
        notes_in               IN sr_surgery_record.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN sr_surgery_record.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN sr_surgery_record.notes_cancel%TYPE DEFAULT NULL,
        id_institution_in      IN sr_surgery_record.id_institution%TYPE DEFAULT NULL,
        adw_last_update_in     IN sr_surgery_record.adw_last_update%TYPE DEFAULT NULL,
        dt_anest_start_tstz_in IN sr_surgery_record.dt_anest_start_tstz%TYPE DEFAULT NULL,
        dt_anest_end_tstz_in   IN sr_surgery_record.dt_anest_end_tstz%TYPE DEFAULT NULL,
        dt_sr_entry_tstz_in    IN sr_surgery_record.dt_sr_entry_tstz%TYPE DEFAULT NULL,
        dt_sr_exit_tstz_in     IN sr_surgery_record.dt_sr_exit_tstz%TYPE DEFAULT NULL,
        dt_room_entry_tstz_in  IN sr_surgery_record.dt_room_entry_tstz%TYPE DEFAULT NULL,
        dt_room_exit_tstz_in   IN sr_surgery_record.dt_room_exit_tstz%TYPE DEFAULT NULL,
        dt_rcv_entry_tstz_in   IN sr_surgery_record.dt_rcv_entry_tstz%TYPE DEFAULT NULL,
        dt_rcv_exit_tstz_in    IN sr_surgery_record.dt_rcv_exit_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN sr_surgery_record.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_episode_in          IN sr_surgery_record.id_episode%TYPE DEFAULT NULL,
        create_user_in         IN sr_surgery_record.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_surgery_record.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_surgery_record.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_surgery_record.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_surgery_record.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_surgery_record.update_institution%TYPE DEFAULT NULL,
        flg_priority_in        IN sr_surgery_record.flg_priority%TYPE DEFAULT NULL,
        flg_sr_proc_in         IN sr_surgery_record.flg_sr_proc%TYPE DEFAULT NULL,
        dt_flg_sr_proc_in      IN sr_surgery_record.dt_flg_sr_proc%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_surgery_record_in,
                id_schedule_sr_in,
                id_sr_intervention_in,
                id_prof_team_in,
                id_patient_in,
                flg_pat_status_in,
                flg_state_in,
                flg_surg_nat_in,
                flg_surg_type_in,
                flg_urgency_in,
                id_anesthesia_type_in,
                id_clinical_service_in,
                notes_in,
                id_prof_cancel_in,
                notes_cancel_in,
                id_institution_in,
                adw_last_update_in,
                dt_anest_start_tstz_in,
                dt_anest_end_tstz_in,
                dt_sr_entry_tstz_in,
                dt_sr_exit_tstz_in,
                dt_room_entry_tstz_in,
                dt_room_exit_tstz_in,
                dt_rcv_entry_tstz_in,
                dt_rcv_exit_tstz_in,
                dt_cancel_tstz_in,
                id_episode_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_priority_in,
                flg_sr_proc_in,
                dt_flg_sr_proc_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN sr_surgery_record_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_surgery_record   id_surgery_record_cc;
        l_id_schedule_sr      id_schedule_sr_cc;
        l_id_sr_intervention  id_sr_intervention_cc;
        l_id_prof_team        id_prof_team_cc;
        l_id_patient          id_patient_cc;
        l_flg_pat_status      flg_pat_status_cc;
        l_flg_state           flg_state_cc;
        l_flg_surg_nat        flg_surg_nat_cc;
        l_flg_surg_type       flg_surg_type_cc;
        l_flg_urgency         flg_urgency_cc;
        l_id_anesthesia_type  id_anesthesia_type_cc;
        l_id_clinical_service id_clinical_service_cc;
        l_notes               notes_cc;
        l_id_prof_cancel      id_prof_cancel_cc;
        l_notes_cancel        notes_cancel_cc;
        l_id_institution      id_institution_cc;
        l_adw_last_update     adw_last_update_cc;
        l_dt_anest_start_tstz dt_anest_start_tstz_cc;
        l_dt_anest_end_tstz   dt_anest_end_tstz_cc;
        l_dt_sr_entry_tstz    dt_sr_entry_tstz_cc;
        l_dt_sr_exit_tstz     dt_sr_exit_tstz_cc;
        l_dt_room_entry_tstz  dt_room_entry_tstz_cc;
        l_dt_room_exit_tstz   dt_room_exit_tstz_cc;
        l_dt_rcv_entry_tstz   dt_rcv_entry_tstz_cc;
        l_dt_rcv_exit_tstz    dt_rcv_exit_tstz_cc;
        l_dt_cancel_tstz      dt_cancel_tstz_cc;
        l_id_episode          id_episode_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
        l_flg_priority        flg_priority_cc;
        l_flg_sr_proc         flg_sr_proc_cc;
        l_dt_flg_sr_proc      dt_flg_sr_proc_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_surgery_record(i) := col_in(i).id_surgery_record;
            l_id_schedule_sr(i) := col_in(i).id_schedule_sr;
            l_id_sr_intervention(i) := col_in(i).id_sr_intervention;
            l_id_prof_team(i) := col_in(i).id_prof_team;
            l_id_patient(i) := col_in(i).id_patient;
            l_flg_pat_status(i) := col_in(i).flg_pat_status;
            l_flg_state(i) := col_in(i).flg_state;
            l_flg_surg_nat(i) := col_in(i).flg_surg_nat;
            l_flg_surg_type(i) := col_in(i).flg_surg_type;
            l_flg_urgency(i) := col_in(i).flg_urgency;
            l_id_anesthesia_type(i) := col_in(i).id_anesthesia_type;
            l_id_clinical_service(i) := col_in(i).id_clinical_service;
            l_notes(i) := col_in(i).notes;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_institution(i) := col_in(i).id_institution;
            l_adw_last_update(i) := col_in(i).adw_last_update;
            l_dt_anest_start_tstz(i) := col_in(i).dt_anest_start_tstz;
            l_dt_anest_end_tstz(i) := col_in(i).dt_anest_end_tstz;
            l_dt_sr_entry_tstz(i) := col_in(i).dt_sr_entry_tstz;
            l_dt_sr_exit_tstz(i) := col_in(i).dt_sr_exit_tstz;
            l_dt_room_entry_tstz(i) := col_in(i).dt_room_entry_tstz;
            l_dt_room_exit_tstz(i) := col_in(i).dt_room_exit_tstz;
            l_dt_rcv_entry_tstz(i) := col_in(i).dt_rcv_entry_tstz;
            l_dt_rcv_exit_tstz(i) := col_in(i).dt_rcv_exit_tstz;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_id_episode(i) := col_in(i).id_episode;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_priority(i) := col_in(i).flg_priority;
            l_flg_sr_proc(i) := col_in(i).flg_sr_proc;
            l_dt_flg_sr_proc(i) := col_in(i).dt_flg_sr_proc;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE sr_surgery_record
                   SET id_schedule_sr      = nvl(l_id_schedule_sr(i), id_schedule_sr),
                       id_sr_intervention  = nvl(l_id_sr_intervention(i), id_sr_intervention),
                       id_prof_team        = nvl(l_id_prof_team(i), id_prof_team),
                       id_patient          = nvl(l_id_patient(i), id_patient),
                       flg_pat_status      = nvl(l_flg_pat_status(i), flg_pat_status),
                       flg_state           = nvl(l_flg_state(i), flg_state),
                       flg_surg_nat        = nvl(l_flg_surg_nat(i), flg_surg_nat),
                       flg_surg_type       = nvl(l_flg_surg_type(i), flg_surg_type),
                       flg_urgency         = nvl(l_flg_urgency(i), flg_urgency),
                       id_anesthesia_type  = nvl(l_id_anesthesia_type(i), id_anesthesia_type),
                       id_clinical_service = nvl(l_id_clinical_service(i), id_clinical_service),
                       notes               = nvl(l_notes(i), notes),
                       id_prof_cancel      = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       notes_cancel        = nvl(l_notes_cancel(i), notes_cancel),
                       id_institution      = nvl(l_id_institution(i), id_institution),
                       adw_last_update     = nvl(l_adw_last_update(i), adw_last_update),
                       dt_anest_start_tstz = nvl(l_dt_anest_start_tstz(i), dt_anest_start_tstz),
                       dt_anest_end_tstz   = nvl(l_dt_anest_end_tstz(i), dt_anest_end_tstz),
                       dt_sr_entry_tstz    = nvl(l_dt_sr_entry_tstz(i), dt_sr_entry_tstz),
                       dt_sr_exit_tstz     = nvl(l_dt_sr_exit_tstz(i), dt_sr_exit_tstz),
                       dt_room_entry_tstz  = nvl(l_dt_room_entry_tstz(i), dt_room_entry_tstz),
                       dt_room_exit_tstz   = nvl(l_dt_room_exit_tstz(i), dt_room_exit_tstz),
                       dt_rcv_entry_tstz   = nvl(l_dt_rcv_entry_tstz(i), dt_rcv_entry_tstz),
                       dt_rcv_exit_tstz    = nvl(l_dt_rcv_exit_tstz(i), dt_rcv_exit_tstz),
                       dt_cancel_tstz      = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       id_episode          = nvl(l_id_episode(i), id_episode),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution),
                       flg_priority        = nvl(l_flg_priority(i), flg_priority),
                       flg_sr_proc         = nvl(l_flg_sr_proc(i), flg_sr_proc),
                       dt_flg_sr_proc      = nvl(l_dt_flg_sr_proc(i), dt_flg_sr_proc)
                 WHERE id_surgery_record = l_id_surgery_record(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE sr_surgery_record
                   SET id_schedule_sr      = l_id_schedule_sr(i),
                       id_sr_intervention  = l_id_sr_intervention(i),
                       id_prof_team        = l_id_prof_team(i),
                       id_patient          = l_id_patient(i),
                       flg_pat_status      = l_flg_pat_status(i),
                       flg_state           = l_flg_state(i),
                       flg_surg_nat        = l_flg_surg_nat(i),
                       flg_surg_type       = l_flg_surg_type(i),
                       flg_urgency         = l_flg_urgency(i),
                       id_anesthesia_type  = l_id_anesthesia_type(i),
                       id_clinical_service = l_id_clinical_service(i),
                       notes               = l_notes(i),
                       id_prof_cancel      = l_id_prof_cancel(i),
                       notes_cancel        = l_notes_cancel(i),
                       id_institution      = l_id_institution(i),
                       adw_last_update     = l_adw_last_update(i),
                       dt_anest_start_tstz = l_dt_anest_start_tstz(i),
                       dt_anest_end_tstz   = l_dt_anest_end_tstz(i),
                       dt_sr_entry_tstz    = l_dt_sr_entry_tstz(i),
                       dt_sr_exit_tstz     = l_dt_sr_exit_tstz(i),
                       dt_room_entry_tstz  = l_dt_room_entry_tstz(i),
                       dt_room_exit_tstz   = l_dt_room_exit_tstz(i),
                       dt_rcv_entry_tstz   = l_dt_rcv_entry_tstz(i),
                       dt_rcv_exit_tstz    = l_dt_rcv_exit_tstz(i),
                       dt_cancel_tstz      = l_dt_cancel_tstz(i),
                       id_episode          = l_id_episode(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i),
                       flg_priority        = l_flg_priority(i),
                       flg_sr_proc         = l_flg_sr_proc(i),
                       dt_flg_sr_proc      = l_dt_flg_sr_proc(i)
                 WHERE id_surgery_record = l_id_surgery_record(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN sr_surgery_record_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE SR_SURGERY_RECORD
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE SR_SURGERY_RECORD
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE SR_SURGERY_RECORD set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE SR_SURGERY_RECORD set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_surgery_record_in IN sr_surgery_record.id_surgery_record%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_surgery_record
         WHERE id_surgery_record = id_surgery_record_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_surgery_record_in IN sr_surgery_record.id_surgery_record%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_surgery_record_in => id_surgery_record_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_SURGERY_RECORD
    PROCEDURE del_id_surgery_record
    (
        id_surgery_record_in IN sr_surgery_record.id_surgery_record%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_surgery_record
         WHERE id_surgery_record = id_surgery_record_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_surgery_record;

    -- Delete all rows for primary key column ID_SURGERY_RECORD
    PROCEDURE del_id_surgery_record
    (
        id_surgery_record_in IN sr_surgery_record.id_surgery_record%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_surgery_record(id_surgery_record_in => id_surgery_record_in,
                              handle_error_in      => handle_error_in,
                              rows_out             => rows_out);
    END del_id_surgery_record;

    -- Delete for unique value of SR_REC_ID_SCHEDULE
    PROCEDURE del_sr_rec_id_schedule
    (
        id_schedule_sr_in IN sr_surgery_record.id_schedule_sr%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_surgery_record
         WHERE id_schedule_sr = id_schedule_sr_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_sr_rec_id_schedule;

    -- Delete for unique value of SR_REC_ID_SCHEDULE
    PROCEDURE del_sr_rec_id_schedule
    (
        id_schedule_sr_in IN sr_surgery_record.id_schedule_sr%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sr_rec_id_schedule(id_schedule_sr_in => id_schedule_sr_in,
                               handle_error_in   => handle_error_in,
                               rows_out          => rows_out);
    END del_sr_rec_id_schedule;

    PROCEDURE del_sr_rec_anest_type_fk
    (
        id_anesthesia_type_in IN sr_surgery_record.id_anesthesia_type%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_surgery_record
         WHERE id_anesthesia_type = del_sr_rec_anest_type_fk.id_anesthesia_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_sr_rec_anest_type_fk;

    PROCEDURE del_sr_rec_anest_type_fk
    (
        id_anesthesia_type_in IN sr_surgery_record.id_anesthesia_type%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sr_rec_anest_type_fk(id_anesthesia_type_in => id_anesthesia_type_in,
                                 handle_error_in       => handle_error_in,
                                 rows_out              => rows_out);
    END del_sr_rec_anest_type_fk;

    PROCEDURE del_sr_rec_cse_fk
    (
        id_clinical_service_in IN sr_surgery_record.id_clinical_service%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_surgery_record
         WHERE id_clinical_service = del_sr_rec_cse_fk.id_clinical_service_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_sr_rec_cse_fk;

    PROCEDURE del_sr_rec_cse_fk
    (
        id_clinical_service_in IN sr_surgery_record.id_clinical_service%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sr_rec_cse_fk(id_clinical_service_in => id_clinical_service_in,
                          handle_error_in        => handle_error_in,
                          rows_out               => rows_out);
    END del_sr_rec_cse_fk;

    PROCEDURE del_sr_rec_epis_fk
    (
        id_episode_in   IN sr_surgery_record.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_surgery_record
         WHERE id_episode = del_sr_rec_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_sr_rec_epis_fk;

    PROCEDURE del_sr_rec_epis_fk
    (
        id_episode_in   IN sr_surgery_record.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sr_rec_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_sr_rec_epis_fk;

    PROCEDURE del_sr_rec_inst_fk
    (
        id_institution_in IN sr_surgery_record.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_surgery_record
         WHERE id_institution = del_sr_rec_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_sr_rec_inst_fk;

    PROCEDURE del_sr_rec_inst_fk
    (
        id_institution_in IN sr_surgery_record.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sr_rec_inst_fk(id_institution_in => id_institution_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_sr_rec_inst_fk;

    PROCEDURE del_sr_rec_pat_fk
    (
        id_patient_in   IN sr_surgery_record.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_surgery_record
         WHERE id_patient = del_sr_rec_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_sr_rec_pat_fk;

    PROCEDURE del_sr_rec_pat_fk
    (
        id_patient_in   IN sr_surgery_record.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sr_rec_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_sr_rec_pat_fk;

    PROCEDURE del_sr_rec_prof_fk
    (
        id_prof_cancel_in IN sr_surgery_record.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_surgery_record
         WHERE id_prof_cancel = del_sr_rec_prof_fk.id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_sr_rec_prof_fk;

    PROCEDURE del_sr_rec_prof_fk
    (
        id_prof_cancel_in IN sr_surgery_record.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sr_rec_prof_fk(id_prof_cancel_in => id_prof_cancel_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_sr_rec_prof_fk;

    PROCEDURE del_sr_rec_prof_team_fk
    (
        id_prof_team_in IN sr_surgery_record.id_prof_team%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_surgery_record
         WHERE id_prof_team = del_sr_rec_prof_team_fk.id_prof_team_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_sr_rec_prof_team_fk;

    PROCEDURE del_sr_rec_prof_team_fk
    (
        id_prof_team_in IN sr_surgery_record.id_prof_team%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sr_rec_prof_team_fk(id_prof_team_in => id_prof_team_in,
                                handle_error_in => handle_error_in,
                                rows_out        => rows_out);
    END del_sr_rec_prof_team_fk;

    PROCEDURE del_sr_rec_sin_fk
    (
        id_sr_intervention_in IN sr_surgery_record.id_sr_intervention%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_surgery_record
         WHERE id_sr_intervention = del_sr_rec_sin_fk.id_sr_intervention_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_sr_rec_sin_fk;

    PROCEDURE del_sr_rec_sin_fk
    (
        id_sr_intervention_in IN sr_surgery_record.id_sr_intervention%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sr_rec_sin_fk(id_sr_intervention_in => id_sr_intervention_in,
                          handle_error_in       => handle_error_in,
                          rows_out              => rows_out);
    END del_sr_rec_sin_fk;

    PROCEDURE del_sr_rec_sr_sched_fk
    (
        id_schedule_sr_in IN sr_surgery_record.id_schedule_sr%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_surgery_record
         WHERE id_schedule_sr = del_sr_rec_sr_sched_fk.id_schedule_sr_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_sr_rec_sr_sched_fk;

    PROCEDURE del_sr_rec_sr_sched_fk
    (
        id_schedule_sr_in IN sr_surgery_record.id_schedule_sr%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_sr_rec_sr_sched_fk(id_schedule_sr_in => id_schedule_sr_in,
                               handle_error_in   => handle_error_in,
                               rows_out          => rows_out);
    END del_sr_rec_sr_sched_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM SR_SURGERY_RECORD';
        ELSE
            RETURN 'DELETE FROM SR_SURGERY_RECORD WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_SURGERY_RECORD');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_SURGERY_RECORD');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(sr_surgery_record_inout IN OUT sr_surgery_record%ROWTYPE) IS
    BEGIN
        sr_surgery_record_inout.id_surgery_record   := NULL;
        sr_surgery_record_inout.id_schedule_sr      := NULL;
        sr_surgery_record_inout.id_sr_intervention  := NULL;
        sr_surgery_record_inout.id_prof_team        := NULL;
        sr_surgery_record_inout.id_patient          := NULL;
        sr_surgery_record_inout.flg_pat_status      := NULL;
        sr_surgery_record_inout.flg_state           := NULL;
        sr_surgery_record_inout.flg_surg_nat        := NULL;
        sr_surgery_record_inout.flg_surg_type       := NULL;
        sr_surgery_record_inout.flg_urgency         := NULL;
        sr_surgery_record_inout.id_anesthesia_type  := NULL;
        sr_surgery_record_inout.id_clinical_service := NULL;
        sr_surgery_record_inout.notes               := NULL;
        sr_surgery_record_inout.id_prof_cancel      := NULL;
        sr_surgery_record_inout.notes_cancel        := NULL;
        sr_surgery_record_inout.id_institution      := NULL;
        sr_surgery_record_inout.adw_last_update     := SYSDATE;
        sr_surgery_record_inout.dt_anest_start_tstz := NULL;
        sr_surgery_record_inout.dt_anest_end_tstz   := NULL;
        sr_surgery_record_inout.dt_sr_entry_tstz    := NULL;
        sr_surgery_record_inout.dt_sr_exit_tstz     := NULL;
        sr_surgery_record_inout.dt_room_entry_tstz  := NULL;
        sr_surgery_record_inout.dt_room_exit_tstz   := NULL;
        sr_surgery_record_inout.dt_rcv_entry_tstz   := NULL;
        sr_surgery_record_inout.dt_rcv_exit_tstz    := NULL;
        sr_surgery_record_inout.dt_cancel_tstz      := NULL;
        sr_surgery_record_inout.id_episode          := NULL;
        sr_surgery_record_inout.create_user         := NULL;
        sr_surgery_record_inout.create_time         := NULL;
        sr_surgery_record_inout.create_institution  := NULL;
        sr_surgery_record_inout.update_user         := NULL;
        sr_surgery_record_inout.update_time         := NULL;
        sr_surgery_record_inout.update_institution  := NULL;
        sr_surgery_record_inout.flg_priority        := NULL;
        sr_surgery_record_inout.flg_sr_proc         := NULL;
        sr_surgery_record_inout.dt_flg_sr_proc      := NULL;
    END initrec;

    FUNCTION initrec RETURN sr_surgery_record%ROWTYPE IS
        l_sr_surgery_record sr_surgery_record%ROWTYPE;
    BEGIN
        l_sr_surgery_record.adw_last_update := SYSDATE;
        RETURN l_sr_surgery_record;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN sr_surgery_record_tc IS
        data sr_surgery_record_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM sr_surgery_record
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN sr_surgery_record_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data sr_surgery_record_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_sr_surgery_record;
/
