/*-- Last Change Revision: $Rev: 1976342 $*/
/*-- Last Change by: $Author: pedro.henriques $*/
/*-- Date of last change: $Date: 2021-01-15 11:52:03 +0000 (sex, 15 jan 2021) $*/
CREATE OR REPLACE PACKAGE BODY ts_prof_specialities
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2021-01-13 17:21:15
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    PROCEDURE ins
    (
        id_prof_specialities_in IN prof_specialities.id_prof_specialities%TYPE DEFAULT NULL,
        id_professional_in      IN prof_specialities.id_professional%TYPE DEFAULT NULL,
        id_speciality_in        IN prof_specialities.id_speciality%TYPE DEFAULT NULL,
        spec_ballot_in          IN prof_specialities.spec_ballot%TYPE DEFAULT NULL,
        id_institution_ext_in   IN prof_specialities.id_institution_ext%TYPE DEFAULT NULL,
        speciality_main_in      IN prof_specialities.speciality_main%TYPE DEFAULT NULL,
        rank_in                 IN prof_specialities.rank%TYPE DEFAULT NULL,
        create_user_in          IN prof_specialities.create_user%TYPE DEFAULT NULL,
        create_time_in          IN prof_specialities.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN prof_specialities.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN prof_specialities.update_user%TYPE DEFAULT NULL,
        update_time_in          IN prof_specialities.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN prof_specialities.update_institution%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO prof_specialities
            (id_prof_specialities,
             id_professional,
             id_speciality,
             spec_ballot,
             id_institution_ext,
             speciality_main,
             rank,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_prof_specialities_in,
             id_professional_in,
             id_speciality_in,
             spec_ballot_in,
             id_institution_ext_in,
             speciality_main_in,
             rank_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_prof_specialities_in IN prof_specialities.id_prof_specialities%TYPE DEFAULT NULL,
        id_professional_in      IN prof_specialities.id_professional%TYPE DEFAULT NULL,
        id_speciality_in        IN prof_specialities.id_speciality%TYPE DEFAULT NULL,
        spec_ballot_in          IN prof_specialities.spec_ballot%TYPE DEFAULT NULL,
        id_institution_ext_in   IN prof_specialities.id_institution_ext%TYPE DEFAULT NULL,
        speciality_main_in      IN prof_specialities.speciality_main%TYPE DEFAULT NULL,
        rank_in                 IN prof_specialities.rank%TYPE DEFAULT NULL,
        create_user_in          IN prof_specialities.create_user%TYPE DEFAULT NULL,
        create_time_in          IN prof_specialities.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN prof_specialities.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN prof_specialities.update_user%TYPE DEFAULT NULL,
        update_time_in          IN prof_specialities.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN prof_specialities.update_institution%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_prof_specialities_in => id_prof_specialities_in,
            id_professional_in      => id_professional_in,
            id_speciality_in        => id_speciality_in,
            spec_ballot_in          => spec_ballot_in,
            id_institution_ext_in   => id_institution_ext_in,
            speciality_main_in      => speciality_main_in,
            rank_in                 => rank_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN prof_specialities%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec prof_specialities%ROWTYPE := rec_in;
    BEGIN
    
        ins(id_prof_specialities_in => l_rec.id_prof_specialities,
            id_professional_in      => l_rec.id_professional,
            id_speciality_in        => l_rec.id_speciality,
            spec_ballot_in          => l_rec.spec_ballot,
            id_institution_ext_in   => l_rec.id_institution_ext,
            speciality_main_in      => l_rec.speciality_main,
            rank_in                 => l_rec.rank,
            create_user_in          => l_rec.create_user,
            create_time_in          => l_rec.create_time,
            create_institution_in   => l_rec.create_institution,
            update_user_in          => l_rec.update_user,
            update_time_in          => l_rec.update_time,
            update_institution_in   => l_rec.update_institution,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN prof_specialities%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN prof_specialities_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO prof_specialities
                    (id_prof_specialities,
                     id_professional,
                     id_speciality,
                     spec_ballot,
                     id_institution_ext,
                     speciality_main,
                     rank)
                VALUES
                    (rows_in(indx).id_prof_specialities,
                     rows_in(indx).id_professional,
                     rows_in(indx).id_speciality,
                     rows_in(indx).spec_ballot,
                     rows_in(indx).id_institution_ext,
                     rows_in(indx).speciality_main,
                     rows_in(indx).rank)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN prof_specialities_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_prof_specialities_in  IN prof_specialities.id_prof_specialities%TYPE DEFAULT NULL,
        id_prof_specialities_nin IN BOOLEAN := TRUE,
        id_professional_in       IN prof_specialities.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        id_speciality_in         IN prof_specialities.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin        IN BOOLEAN := TRUE,
        spec_ballot_in           IN prof_specialities.spec_ballot%TYPE DEFAULT NULL,
        spec_ballot_nin          IN BOOLEAN := TRUE,
        id_institution_ext_in    IN prof_specialities.id_institution_ext%TYPE DEFAULT NULL,
        id_institution_ext_nin   IN BOOLEAN := TRUE,
        speciality_main_in       IN prof_specialities.speciality_main%TYPE DEFAULT NULL,
        speciality_main_nin      IN BOOLEAN := TRUE,
        rank_in                  IN prof_specialities.rank%TYPE DEFAULT NULL,
        rank_nin                 IN BOOLEAN := TRUE,
        create_user_in           IN prof_specialities.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN prof_specialities.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN prof_specialities.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN prof_specialities.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN prof_specialities.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN prof_specialities.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_rows_out               table_varchar;
        l_id_prof_specialities_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_specialities_nin);
        l_id_professional_n      NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_id_speciality_n        NUMBER(1) := sys.diutil.bool_to_int(id_speciality_nin);
        l_spec_ballot_n          NUMBER(1) := sys.diutil.bool_to_int(spec_ballot_nin);
        l_id_institution_ext_n   NUMBER(1) := sys.diutil.bool_to_int(id_institution_ext_nin);
        l_speciality_main_n      NUMBER(1) := sys.diutil.bool_to_int(speciality_main_nin);
        l_rank_n                 NUMBER(1) := sys.diutil.bool_to_int(rank_nin);
        l_create_user_n          NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN
    
        UPDATE prof_specialities
           SET id_prof_specialities = decode(l_id_prof_specialities_n,
                                             0,
                                             id_prof_specialities_in,
                                             nvl(id_prof_specialities_in, id_prof_specialities)),
               id_professional      = decode(l_id_professional_n,
                                             0,
                                             id_professional_in,
                                             nvl(id_professional_in, id_professional)),
               id_speciality        = decode(l_id_speciality_n,
                                             0,
                                             id_speciality_in,
                                             nvl(id_speciality_in, id_speciality)),
               spec_ballot          = decode(l_spec_ballot_n, 0, spec_ballot_in, nvl(spec_ballot_in, spec_ballot)),
               id_institution_ext   = decode(l_id_institution_ext_n,
                                             0,
                                             id_institution_ext_in,
                                             nvl(id_institution_ext_in, id_institution_ext)),
               speciality_main      = decode(l_speciality_main_n,
                                             0,
                                             speciality_main_in,
                                             nvl(speciality_main_in, speciality_main)),
               rank                 = decode(l_rank_n, 0, rank_in, nvl(rank_in, rank)),
               create_user          = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time          = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution   = decode(l_create_institution_n,
                                             0,
                                             create_institution_in,
                                             nvl(create_institution_in, create_institution)),
               update_user          = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time          = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution   = decode(l_update_institution_n,
                                             0,
                                             update_institution_in,
                                             nvl(update_institution_in, update_institution))
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_prof_specialities_in  IN prof_specialities.id_prof_specialities%TYPE DEFAULT NULL,
        id_prof_specialities_nin IN BOOLEAN := TRUE,
        id_professional_in       IN prof_specialities.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        id_speciality_in         IN prof_specialities.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin        IN BOOLEAN := TRUE,
        spec_ballot_in           IN prof_specialities.spec_ballot%TYPE DEFAULT NULL,
        spec_ballot_nin          IN BOOLEAN := TRUE,
        id_institution_ext_in    IN prof_specialities.id_institution_ext%TYPE DEFAULT NULL,
        id_institution_ext_nin   IN BOOLEAN := TRUE,
        speciality_main_in       IN prof_specialities.speciality_main%TYPE DEFAULT NULL,
        speciality_main_nin      IN BOOLEAN := TRUE,
        rank_in                  IN prof_specialities.rank%TYPE DEFAULT NULL,
        rank_nin                 IN BOOLEAN := TRUE,
        create_user_in           IN prof_specialities.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN prof_specialities.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN prof_specialities.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN prof_specialities.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN prof_specialities.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN prof_specialities.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_prof_specialities_in  => id_prof_specialities_in,
            id_prof_specialities_nin => id_prof_specialities_nin,
            id_professional_in       => id_professional_in,
            id_professional_nin      => id_professional_nin,
            id_speciality_in         => id_speciality_in,
            id_speciality_nin        => id_speciality_nin,
            spec_ballot_in           => spec_ballot_in,
            spec_ballot_nin          => spec_ballot_nin,
            id_institution_ext_in    => id_institution_ext_in,
            id_institution_ext_nin   => id_institution_ext_nin,
            speciality_main_in       => speciality_main_in,
            speciality_main_nin      => speciality_main_nin,
            rank_in                  => rank_in,
            rank_nin                 => rank_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_prof_specialities_in  IN prof_specialities.id_prof_specialities%TYPE DEFAULT NULL,
        id_prof_specialities_nin IN BOOLEAN := TRUE,
        id_professional_in       IN prof_specialities.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        id_speciality_in         IN prof_specialities.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin        IN BOOLEAN := TRUE,
        spec_ballot_in           IN prof_specialities.spec_ballot%TYPE DEFAULT NULL,
        spec_ballot_nin          IN BOOLEAN := TRUE,
        id_institution_ext_in    IN prof_specialities.id_institution_ext%TYPE DEFAULT NULL,
        id_institution_ext_nin   IN BOOLEAN := TRUE,
        speciality_main_in       IN prof_specialities.speciality_main%TYPE DEFAULT NULL,
        speciality_main_nin      IN BOOLEAN := TRUE,
        rank_in                  IN prof_specialities.rank%TYPE DEFAULT NULL,
        rank_nin                 IN BOOLEAN := TRUE,
        create_user_in           IN prof_specialities.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN prof_specialities.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN prof_specialities.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN prof_specialities.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN prof_specialities.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN prof_specialities.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        where_in                 IN VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_sql                    VARCHAR2(32767);
        l_rows_out               table_varchar;
        l_id_prof_specialities_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_specialities_nin);
        l_id_professional_n      NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_id_speciality_n        NUMBER(1) := sys.diutil.bool_to_int(id_speciality_nin);
        l_spec_ballot_n          NUMBER(1) := sys.diutil.bool_to_int(spec_ballot_nin);
        l_id_institution_ext_n   NUMBER(1) := sys.diutil.bool_to_int(id_institution_ext_nin);
        l_speciality_main_n      NUMBER(1) := sys.diutil.bool_to_int(speciality_main_nin);
        l_rank_n                 NUMBER(1) := sys.diutil.bool_to_int(rank_nin);
        l_create_user_n          NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN
        l_id_prof_specialities_n := sys.diutil.bool_to_int(id_prof_specialities_nin);
        l_id_professional_n      := sys.diutil.bool_to_int(id_professional_nin);
        l_id_speciality_n        := sys.diutil.bool_to_int(id_speciality_nin);
        l_spec_ballot_n          := sys.diutil.bool_to_int(spec_ballot_nin);
        l_id_institution_ext_n   := sys.diutil.bool_to_int(id_institution_ext_nin);
        l_speciality_main_n      := sys.diutil.bool_to_int(speciality_main_nin);
        l_rank_n                 := sys.diutil.bool_to_int(rank_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_sql                    := 'UPDATE prof_specialities SET' || ' ID_PROF_SPECIALITIES = decode (' ||
                                    l_id_prof_specialities_n ||
                                    ',0,:ID_PROF_SPECIALITIES_in, NVL (:ID_PROF_SPECIALITIES_in, ID_PROF_SPECIALITIES)) ' || ',' ||
                                    ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                                    ',0,:ID_PROFESSIONAL_in, NVL (:ID_PROFESSIONAL_in, ID_PROFESSIONAL)) ' || ',' ||
                                    ' ID_SPECIALITY = decode (' || l_id_speciality_n ||
                                    ',0,:ID_SPECIALITY_in, NVL (:ID_SPECIALITY_in, ID_SPECIALITY)) ' || ',' ||
                                    ' SPEC_BALLOT = decode (' || l_spec_ballot_n ||
                                    ',0,:SPEC_BALLOT_in, NVL (:SPEC_BALLOT_in, SPEC_BALLOT)) ' || ',' ||
                                    ' ID_INSTITUTION_EXT = decode (' || l_id_institution_ext_n ||
                                    ',0,:ID_INSTITUTION_EXT_in, NVL (:ID_INSTITUTION_EXT_in, ID_INSTITUTION_EXT)) ' || ',' ||
                                    ' SPECIALITY_MAIN = decode (' || l_speciality_main_n ||
                                    ',0,:SPECIALITY_MAIN_in, NVL (:SPECIALITY_MAIN_in, SPECIALITY_MAIN)) ' || ',' ||
                                    ' RANK = decode (' || l_rank_n || ',0,:RANK_in, NVL (:RANK_in, RANK)) ' || ',' ||
                                    ' CREATE_USER = decode (' || l_create_user_n ||
                                    ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                    ' CREATE_TIME = decode (' || l_create_time_n ||
                                    ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                    ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                    ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                    ' UPDATE_USER = decode (' || l_update_user_n ||
                                    ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                    ' UPDATE_TIME = decode (' || l_update_time_n ||
                                    ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                    ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                    ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' ||
                                    ' where ' || nvl(where_in, '(1=1)') ||
                                    ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_prof_specialities_in, id_professional_in, id_speciality_in, spec_ballot_in, id_institution_ext_in, speciality_main_in, rank_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_prof_specialities_in  IN prof_specialities.id_prof_specialities%TYPE DEFAULT NULL,
        id_prof_specialities_nin IN BOOLEAN := TRUE,
        id_professional_in       IN prof_specialities.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        id_speciality_in         IN prof_specialities.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin        IN BOOLEAN := TRUE,
        spec_ballot_in           IN prof_specialities.spec_ballot%TYPE DEFAULT NULL,
        spec_ballot_nin          IN BOOLEAN := TRUE,
        id_institution_ext_in    IN prof_specialities.id_institution_ext%TYPE DEFAULT NULL,
        id_institution_ext_nin   IN BOOLEAN := TRUE,
        speciality_main_in       IN prof_specialities.speciality_main%TYPE DEFAULT NULL,
        speciality_main_nin      IN BOOLEAN := TRUE,
        rank_in                  IN prof_specialities.rank%TYPE DEFAULT NULL,
        rank_nin                 IN BOOLEAN := TRUE,
        create_user_in           IN prof_specialities.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN prof_specialities.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN prof_specialities.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN prof_specialities.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN prof_specialities.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN prof_specialities.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        where_in                 IN VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_prof_specialities_in  => id_prof_specialities_in,
            id_prof_specialities_nin => id_prof_specialities_nin,
            id_professional_in       => id_professional_in,
            id_professional_nin      => id_professional_nin,
            id_speciality_in         => id_speciality_in,
            id_speciality_nin        => id_speciality_nin,
            spec_ballot_in           => spec_ballot_in,
            spec_ballot_nin          => spec_ballot_nin,
            id_institution_ext_in    => id_institution_ext_in,
            id_institution_ext_nin   => id_institution_ext_nin,
            speciality_main_in       => speciality_main_in,
            speciality_main_nin      => speciality_main_nin,
            rank_in                  => rank_in,
            rank_nin                 => rank_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            where_in                 => where_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_prof_specialities_in IN prof_specialities.id_prof_specialities%TYPE DEFAULT NULL,
        id_professional_in      IN prof_specialities.id_professional%TYPE DEFAULT NULL,
        id_speciality_in        IN prof_specialities.id_speciality%TYPE DEFAULT NULL,
        spec_ballot_in          IN prof_specialities.spec_ballot%TYPE DEFAULT NULL,
        id_institution_ext_in   IN prof_specialities.id_institution_ext%TYPE DEFAULT NULL,
        speciality_main_in      IN prof_specialities.speciality_main%TYPE DEFAULT NULL,
        rank_in                 IN prof_specialities.rank%TYPE DEFAULT NULL,
        create_user_in          IN prof_specialities.create_user%TYPE DEFAULT NULL,
        create_time_in          IN prof_specialities.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN prof_specialities.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN prof_specialities.update_user%TYPE DEFAULT NULL,
        update_time_in          IN prof_specialities.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN prof_specialities.update_institution%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_prof_specialities_in => id_prof_specialities_in,
            id_professional_in      => id_professional_in,
            id_speciality_in        => id_speciality_in,
            spec_ballot_in          => spec_ballot_in,
            id_institution_ext_in   => id_institution_ext_in,
            speciality_main_in      => speciality_main_in,
            rank_in                 => rank_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_prof_specialities_in => id_prof_specialities_in,
                id_professional_in      => id_professional_in,
                id_speciality_in        => id_speciality_in,
                spec_ballot_in          => spec_ballot_in,
                id_institution_ext_in   => id_institution_ext_in,
                speciality_main_in      => speciality_main_in,
                rank_in                 => rank_in,
                create_user_in          => create_user_in,
                create_time_in          => create_time_in,
                create_institution_in   => create_institution_in,
                update_user_in          => update_user_in,
                update_time_in          => update_time_in,
                update_institution_in   => update_institution_in,
                handle_error_in         => handle_error_in,
                rows_out                => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_prof_specialities_in IN prof_specialities.id_prof_specialities%TYPE DEFAULT NULL,
        id_professional_in      IN prof_specialities.id_professional%TYPE DEFAULT NULL,
        id_speciality_in        IN prof_specialities.id_speciality%TYPE DEFAULT NULL,
        spec_ballot_in          IN prof_specialities.spec_ballot%TYPE DEFAULT NULL,
        id_institution_ext_in   IN prof_specialities.id_institution_ext%TYPE DEFAULT NULL,
        speciality_main_in      IN prof_specialities.speciality_main%TYPE DEFAULT NULL,
        rank_in                 IN prof_specialities.rank%TYPE DEFAULT NULL,
        create_user_in          IN prof_specialities.create_user%TYPE DEFAULT NULL,
        create_time_in          IN prof_specialities.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN prof_specialities.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN prof_specialities.update_user%TYPE DEFAULT NULL,
        update_time_in          IN prof_specialities.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN prof_specialities.update_institution%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_prof_specialities_in,
                id_professional_in,
                id_speciality_in,
                spec_ballot_in,
                id_institution_ext_in,
                speciality_main_in,
                rank_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN prof_specialities%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_prof_specialities_in => rec_in.id_prof_specialities,
            id_professional_in      => rec_in.id_professional,
            id_speciality_in        => rec_in.id_speciality,
            spec_ballot_in          => rec_in.spec_ballot,
            id_institution_ext_in   => rec_in.id_institution_ext,
            speciality_main_in      => rec_in.speciality_main,
            rank_in                 => rec_in.rank,
            create_user_in          => rec_in.create_user,
            create_time_in          => rec_in.create_time,
            create_institution_in   => rec_in.create_institution,
            update_user_in          => rec_in.update_user,
            update_time_in          => rec_in.update_time,
            update_institution_in   => rec_in.update_institution,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN prof_specialities%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_prof_specialities_in => rec_in.id_prof_specialities,
            id_professional_in      => rec_in.id_professional,
            id_speciality_in        => rec_in.id_speciality,
            spec_ballot_in          => rec_in.spec_ballot,
            id_institution_ext_in   => rec_in.id_institution_ext,
            speciality_main_in      => rec_in.speciality_main,
            rank_in                 => rec_in.rank,
            create_user_in          => rec_in.create_user,
            create_time_in          => rec_in.create_time,
            create_institution_in   => rec_in.create_institution,
            update_user_in          => rec_in.update_user,
            update_time_in          => rec_in.update_time,
            update_institution_in   => rec_in.update_institution,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN prof_specialities_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_prof_specialities id_prof_specialities_cc;
        l_id_professional      id_professional_cc;
        l_id_speciality        id_speciality_cc;
        l_spec_ballot          spec_ballot_cc;
        l_id_institution_ext   id_institution_ext_cc;
        l_speciality_main      speciality_main_cc;
        l_rank                 rank_cc;
        l_create_user          create_user_cc;
        l_create_time          create_time_cc;
        l_create_institution   create_institution_cc;
        l_update_user          update_user_cc;
        l_update_time          update_time_cc;
        l_update_institution   update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_prof_specialities(i) := col_in(i).id_prof_specialities;
            l_id_professional(i) := col_in(i).id_professional;
            l_id_speciality(i) := col_in(i).id_speciality;
            l_spec_ballot(i) := col_in(i).spec_ballot;
            l_id_institution_ext(i) := col_in(i).id_institution_ext;
            l_speciality_main(i) := col_in(i).speciality_main;
            l_rank(i) := col_in(i).rank;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE prof_specialities
                   SET id_prof_specialities = nvl(l_id_prof_specialities(i), id_prof_specialities),
                       id_professional      = nvl(l_id_professional(i), id_professional),
                       id_speciality        = nvl(l_id_speciality(i), id_speciality),
                       spec_ballot          = nvl(l_spec_ballot(i), spec_ballot),
                       id_institution_ext   = nvl(l_id_institution_ext(i), id_institution_ext),
                       speciality_main      = nvl(l_speciality_main(i), speciality_main),
                       rank                 = nvl(l_rank(i), rank),
                       create_user          = nvl(l_create_user(i), create_user),
                       create_time          = nvl(l_create_time(i), create_time),
                       create_institution   = nvl(l_create_institution(i), create_institution),
                       update_user          = nvl(l_update_user(i), update_user),
                       update_time          = nvl(l_update_time(i), update_time),
                       update_institution   = nvl(l_update_institution(i), update_institution)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE prof_specialities
                   SET id_prof_specialities = l_id_prof_specialities(i),
                       id_professional      = l_id_professional(i),
                       id_speciality        = l_id_speciality(i),
                       spec_ballot          = l_spec_ballot(i),
                       id_institution_ext   = l_id_institution_ext(i),
                       speciality_main      = l_speciality_main(i),
                       rank                 = l_rank(i),
                       create_user          = l_create_user(i),
                       create_time          = l_create_time(i),
                       create_institution   = l_create_institution(i),
                       update_user          = l_update_user(i),
                       update_time          = l_update_time(i),
                       update_institution   = l_update_institution(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN prof_specialities_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE prof_specialities
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE prof_specialities
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE prof_specialities
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM prof_specialities
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del(handle_error_in IN BOOLEAN := TRUE) IS
        rows_out table_varchar;
    BEGIN
        del(handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM prof_specialities';
        ELSE
            RETURN 'DELETE FROM prof_specialities WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(prof_specialities_inout IN OUT prof_specialities%ROWTYPE) IS
    BEGIN
        prof_specialities_inout.id_prof_specialities := NULL;
        prof_specialities_inout.id_professional      := NULL;
        prof_specialities_inout.id_speciality        := NULL;
        prof_specialities_inout.spec_ballot          := NULL;
        prof_specialities_inout.id_institution_ext   := NULL;
        prof_specialities_inout.speciality_main      := NULL;
        prof_specialities_inout.rank                 := NULL;
        prof_specialities_inout.create_user          := NULL;
        prof_specialities_inout.create_time          := NULL;
        prof_specialities_inout.create_institution   := NULL;
        prof_specialities_inout.update_user          := NULL;
        prof_specialities_inout.update_time          := NULL;
        prof_specialities_inout.update_institution   := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN prof_specialities%ROWTYPE IS
        l_prof_specialities prof_specialities%ROWTYPE;
    BEGIN
        RETURN l_prof_specialities;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN prof_specialities_tc IS
        data prof_specialities_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM prof_specialities
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN prof_specialities_tc IS
        data prof_specialities_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_prof_specialities;
/
