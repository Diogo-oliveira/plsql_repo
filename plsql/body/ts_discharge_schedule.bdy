/*-- Last Change Revision: $Rev: 2028011 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:56 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_discharge_schedule
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2017-02-01 11:55:57
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN discharge_schedule.id_discharge_schedule%TYPE IS
        retval discharge_schedule.id_discharge_schedule%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_discharge_schedule.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in            IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        dt_discharge_schedule_in IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_status_in            IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        create_time_in           IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in           IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        flg_hour_origin_in       IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        create_user_in           IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        id_prof_req_in           IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in                IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
        l_pky discharge_schedule.id_discharge_schedule%TYPE := next_key;
    BEGIN
        ins(id_discharge_schedule_in => l_pky,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            dt_discharge_schedule_in => dt_discharge_schedule_in,
            flg_status_in            => flg_status_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_hour_origin_in       => flg_hour_origin_in,
            create_user_in           => create_user_in,
            id_prof_req_in           => id_prof_req_in,
            dt_req_in                => dt_req_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in            IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        dt_discharge_schedule_in IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_status_in            IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        create_time_in           IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in           IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        flg_hour_origin_in       IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        create_user_in           IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        id_prof_req_in           IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in                IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            dt_discharge_schedule_in => dt_discharge_schedule_in,
            flg_status_in            => flg_status_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_hour_origin_in       => flg_hour_origin_in,
            create_user_in           => create_user_in,
            id_prof_req_in           => id_prof_req_in,
            dt_req_in                => dt_req_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in             IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_patient_in             IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        dt_discharge_schedule_in  IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_status_in             IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        create_time_in            IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in            IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        flg_hour_origin_in        IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        create_user_in            IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        id_prof_req_in            IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in                 IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        id_discharge_schedule_out IN OUT discharge_schedule.id_discharge_schedule%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
        l_pky discharge_schedule.id_discharge_schedule%TYPE := next_key;
    BEGIN
        ins(id_discharge_schedule_in => l_pky,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            dt_discharge_schedule_in => dt_discharge_schedule_in,
            flg_status_in            => flg_status_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_hour_origin_in       => flg_hour_origin_in,
            create_user_in           => create_user_in,
            id_prof_req_in           => id_prof_req_in,
            dt_req_in                => dt_req_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        id_discharge_schedule_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in             IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_patient_in             IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        dt_discharge_schedule_in  IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_status_in             IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        create_time_in            IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in            IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        flg_hour_origin_in        IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        create_user_in            IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        id_prof_req_in            IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in                 IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        id_discharge_schedule_out IN OUT discharge_schedule.id_discharge_schedule%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in             => id_episode_in,
            id_patient_in             => id_patient_in,
            dt_discharge_schedule_in  => dt_discharge_schedule_in,
            flg_status_in             => flg_status_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_hour_origin_in        => flg_hour_origin_in,
            create_user_in            => create_user_in,
            id_prof_req_in            => id_prof_req_in,
            dt_req_in                 => dt_req_in,
            id_discharge_schedule_out => id_discharge_schedule_out,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in            IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        dt_discharge_schedule_in IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_status_in            IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        create_time_in           IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in           IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        flg_hour_origin_in       IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        create_user_in           IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        id_prof_req_in           IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in                IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) RETURN discharge_schedule.id_discharge_schedule%TYPE IS
        l_pky discharge_schedule.id_discharge_schedule%TYPE := next_key;
    BEGIN
        ins(id_discharge_schedule_in => l_pky,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            dt_discharge_schedule_in => dt_discharge_schedule_in,
            flg_status_in            => flg_status_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_hour_origin_in       => flg_hour_origin_in,
            create_user_in           => create_user_in,
            id_prof_req_in           => id_prof_req_in,
            dt_req_in                => dt_req_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in            IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        dt_discharge_schedule_in IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_status_in            IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        create_time_in           IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in           IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        flg_hour_origin_in       IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        create_user_in           IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        id_prof_req_in           IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in                IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in          IN BOOLEAN := TRUE
    ) RETURN discharge_schedule.id_discharge_schedule%TYPE IS
        l_pky    discharge_schedule.id_discharge_schedule%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_discharge_schedule_in => l_pky,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            dt_discharge_schedule_in => dt_discharge_schedule_in,
            flg_status_in            => flg_status_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_hour_origin_in       => flg_hour_origin_in,
            create_user_in           => create_user_in,
            id_prof_req_in           => id_prof_req_in,
            dt_req_in                => dt_req_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_discharge_schedule_in IN discharge_schedule.id_discharge_schedule%TYPE,
        id_episode_in            IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        dt_discharge_schedule_in IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_status_in            IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        create_time_in           IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in           IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        flg_hour_origin_in       IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        create_user_in           IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        id_prof_req_in           IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in                IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO discharge_schedule
            (id_discharge_schedule,
             id_episode,
             id_patient,
             dt_discharge_schedule,
             flg_status,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_hour_origin,
             create_user,
             id_prof_req,
             dt_req)
        VALUES
            (id_discharge_schedule_in,
             id_episode_in,
             id_patient_in,
             dt_discharge_schedule_in,
             flg_status_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_hour_origin_in,
             create_user_in,
             id_prof_req_in,
             dt_req_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END ins;

    PROCEDURE ins
    (
        id_discharge_schedule_in IN discharge_schedule.id_discharge_schedule%TYPE,
        id_episode_in            IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        dt_discharge_schedule_in IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_status_in            IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        create_time_in           IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in           IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        flg_hour_origin_in       IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        create_user_in           IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        id_prof_req_in           IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in                IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_discharge_schedule_in => id_discharge_schedule_in,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            dt_discharge_schedule_in => dt_discharge_schedule_in,
            flg_status_in            => flg_status_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_hour_origin_in       => flg_hour_origin_in,
            create_user_in           => create_user_in,
            id_prof_req_in           => id_prof_req_in,
            dt_req_in                => dt_req_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN discharge_schedule%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec discharge_schedule%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_discharge_schedule := next_key(sequence_in);
        END IF;

        ins(id_discharge_schedule_in => l_rec.id_discharge_schedule,
            id_episode_in            => l_rec.id_episode,
            id_patient_in            => l_rec.id_patient,
            dt_discharge_schedule_in => l_rec.dt_discharge_schedule,
            flg_status_in            => l_rec.flg_status,
            create_time_in           => l_rec.create_time,
            create_institution_in    => l_rec.create_institution,
            update_user_in           => l_rec.update_user,
            update_time_in           => l_rec.update_time,
            update_institution_in    => l_rec.update_institution,
            flg_hour_origin_in       => l_rec.flg_hour_origin,
            create_user_in           => l_rec.create_user,
            id_prof_req_in           => l_rec.id_prof_req,
            dt_req_in                => l_rec.dt_req,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN discharge_schedule%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN discharge_schedule_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO discharge_schedule
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                    END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN discharge_schedule_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_discharge_schedule_in  IN discharge_schedule.id_discharge_schedule%TYPE,
        id_episode_in             IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        dt_discharge_schedule_in  IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        dt_discharge_schedule_nin IN BOOLEAN := TRUE,
        flg_status_in             IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        create_time_in            IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        flg_hour_origin_in        IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        flg_hour_origin_nin       IN BOOLEAN := TRUE,
        create_user_in            IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        id_prof_req_in            IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin           IN BOOLEAN := TRUE,
        dt_req_in                 IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        dt_req_nin                IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out                table_varchar;
        l_id_episode_n            NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n            NUMBER(1) := sys.diutil.bool_to_int(id_patient_nin);
        l_dt_discharge_schedule_n NUMBER(1) := sys.diutil.bool_to_int(dt_discharge_schedule_nin);
        l_flg_status_n            NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_create_time_n           NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_hour_origin_n       NUMBER(1) := sys.diutil.bool_to_int(flg_hour_origin_nin);
        l_create_user_n           NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_id_prof_req_n           NUMBER(1) := sys.diutil.bool_to_int(id_prof_req_nin);
        l_dt_req_n                NUMBER(1) := sys.diutil.bool_to_int(dt_req_nin);
    BEGIN
    
        UPDATE discharge_schedule
           SET id_episode            = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_patient            = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               dt_discharge_schedule = decode(l_dt_discharge_schedule_n,
                                              0,
                                              dt_discharge_schedule_in,
                                              nvl(dt_discharge_schedule_in, dt_discharge_schedule)),
               flg_status            = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               create_time           = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution    = decode(l_create_institution_n,
                                              0,
                                              create_institution_in,
                                              nvl(create_institution_in, create_institution)),
               update_user           = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time           = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution    = decode(l_update_institution_n,
                                              0,
                                              update_institution_in,
                                              nvl(update_institution_in, update_institution)),
               flg_hour_origin       = decode(l_flg_hour_origin_n,
                                              0,
                                              flg_hour_origin_in,
                                              nvl(flg_hour_origin_in, flg_hour_origin)),
               create_user           = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               id_prof_req           = decode(l_id_prof_req_n, 0, id_prof_req_in, nvl(id_prof_req_in, id_prof_req)),
               dt_req                = decode(l_dt_req_n, 0, dt_req_in, nvl(dt_req_in, dt_req))
         WHERE id_discharge_schedule = id_discharge_schedule_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_discharge_schedule_in  IN discharge_schedule.id_discharge_schedule%TYPE,
        id_episode_in             IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        dt_discharge_schedule_in  IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        dt_discharge_schedule_nin IN BOOLEAN := TRUE,
        flg_status_in             IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        create_time_in            IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        flg_hour_origin_in        IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        flg_hour_origin_nin       IN BOOLEAN := TRUE,
        create_user_in            IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        id_prof_req_in            IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin           IN BOOLEAN := TRUE,
        dt_req_in                 IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        dt_req_nin                IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_discharge_schedule_in  => id_discharge_schedule_in,
            id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            dt_discharge_schedule_in  => dt_discharge_schedule_in,
            dt_discharge_schedule_nin => dt_discharge_schedule_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            flg_hour_origin_in        => flg_hour_origin_in,
            flg_hour_origin_nin       => flg_hour_origin_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            id_prof_req_in            => id_prof_req_in,
            id_prof_req_nin           => id_prof_req_nin,
            dt_req_in                 => dt_req_in,
            dt_req_nin                => dt_req_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in             IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        dt_discharge_schedule_in  IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        dt_discharge_schedule_nin IN BOOLEAN := TRUE,
        flg_status_in             IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        create_time_in            IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        flg_hour_origin_in        IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        flg_hour_origin_nin       IN BOOLEAN := TRUE,
        create_user_in            IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        id_prof_req_in            IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin           IN BOOLEAN := TRUE,
        dt_req_in                 IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        dt_req_nin                IN BOOLEAN := TRUE,
        where_in                  IN VARCHAR2,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_episode_n            NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n            NUMBER(1) := sys.diutil.bool_to_int(id_patient_nin);
        l_dt_discharge_schedule_n NUMBER(1) := sys.diutil.bool_to_int(dt_discharge_schedule_nin);
        l_flg_status_n            NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_create_time_n           NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_hour_origin_n       NUMBER(1) := sys.diutil.bool_to_int(flg_hour_origin_nin);
        l_create_user_n           NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_id_prof_req_n           NUMBER(1) := sys.diutil.bool_to_int(id_prof_req_nin);
        l_dt_req_n                NUMBER(1) := sys.diutil.bool_to_int(dt_req_nin);
    BEGIN
        l_id_episode_n            := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n            := sys.diutil.bool_to_int(id_patient_nin);
        l_dt_discharge_schedule_n := sys.diutil.bool_to_int(dt_discharge_schedule_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_hour_origin_n       := sys.diutil.bool_to_int(flg_hour_origin_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_id_prof_req_n           := sys.diutil.bool_to_int(id_prof_req_nin);
        l_dt_req_n                := sys.diutil.bool_to_int(dt_req_nin);
        l_sql                     := 'UPDATE discharge_schedule SET' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                                     ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ',' ||
                                     ' ID_PATIENT = decode (' || l_id_patient_n ||
                                     ',0,:ID_PATIENT_in, NVL (:ID_PATIENT_in, ID_PATIENT)) ' || ',' ||
                                     ' DT_DISCHARGE_SCHEDULE = decode (' || l_dt_discharge_schedule_n ||
                 ',0,:dt_discharge_schedule_in, NVL (:dt_discharge_schedule_in, DT_DISCHARGE_SCHEDULE)) ' || ',' ||
                                     ' FLG_STATUS = decode (' || l_flg_status_n ||
                                     ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                                     ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                                     ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                     ' UPDATE_TIME = decode (' || l_update_time_n ||
                                     ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' FLG_HOUR_ORIGIN = decode (' || l_flg_hour_origin_n ||
                                     ',0,:FLG_HOUR_ORIGIN_in, NVL (:FLG_HOUR_ORIGIN_in, FLG_HOUR_ORIGIN)) ' || ',' ||
                                     ' CREATE_USER = decode (' || l_create_user_n ||
                                     ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                     ' ID_PROF_REQ = decode (' || l_id_prof_req_n ||
                                     ',0,:ID_PROF_REQ_in, NVL (:ID_PROF_REQ_in, ID_PROF_REQ)) ' || ',' ||
                                     ' DT_REQ = decode (' || l_dt_req_n || ',0,:DT_REQ_in, NVL (:DT_REQ_in, DT_REQ)) ' ||
                                     ' where ' || nvl(where_in, '(1=1)') ||
                                     ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, id_patient_in, dt_discharge_schedule_in, flg_status_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_hour_origin_in, create_user_in, id_prof_req_in, dt_req_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in             IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        dt_discharge_schedule_in  IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        dt_discharge_schedule_nin IN BOOLEAN := TRUE,
        flg_status_in             IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        create_time_in            IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        flg_hour_origin_in        IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        flg_hour_origin_nin       IN BOOLEAN := TRUE,
        create_user_in            IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        id_prof_req_in            IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin           IN BOOLEAN := TRUE,
        dt_req_in                 IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        dt_req_nin                IN BOOLEAN := TRUE,
        where_in                  IN VARCHAR2,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            dt_discharge_schedule_in  => dt_discharge_schedule_in,
            dt_discharge_schedule_nin => dt_discharge_schedule_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            flg_hour_origin_in        => flg_hour_origin_in,
            flg_hour_origin_nin       => flg_hour_origin_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            id_prof_req_in            => id_prof_req_in,
            id_prof_req_nin           => id_prof_req_nin,
            dt_req_in                 => dt_req_in,
            dt_req_nin                => dt_req_nin,
            where_in                  => where_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_discharge_schedule_in IN discharge_schedule.id_discharge_schedule%TYPE,
        id_episode_in            IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        dt_discharge_schedule_in IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_status_in            IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        create_time_in           IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in           IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        flg_hour_origin_in       IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        create_user_in           IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        id_prof_req_in           IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in                IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_discharge_schedule_in => id_discharge_schedule_in,
            id_episode_in            => id_episode_in,
            id_patient_in            => id_patient_in,
            dt_discharge_schedule_in => dt_discharge_schedule_in,
            flg_status_in            => flg_status_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            flg_hour_origin_in       => flg_hour_origin_in,
            create_user_in           => create_user_in,
            id_prof_req_in           => id_prof_req_in,
            dt_req_in                => dt_req_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_discharge_schedule_in => id_discharge_schedule_in,
                id_episode_in            => id_episode_in,
                id_patient_in            => id_patient_in,
                dt_discharge_schedule_in => dt_discharge_schedule_in,
                flg_status_in            => flg_status_in,
                create_time_in           => create_time_in,
                create_institution_in    => create_institution_in,
                update_user_in           => update_user_in,
                update_time_in           => update_time_in,
                update_institution_in    => update_institution_in,
                flg_hour_origin_in       => flg_hour_origin_in,
                create_user_in           => create_user_in,
                id_prof_req_in           => id_prof_req_in,
                dt_req_in                => dt_req_in,
                handle_error_in          => handle_error_in,
                rows_out                 => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_discharge_schedule_in IN discharge_schedule.id_discharge_schedule%TYPE,
        id_episode_in            IN discharge_schedule.id_episode%TYPE DEFAULT NULL,
        id_patient_in            IN discharge_schedule.id_patient%TYPE DEFAULT NULL,
        dt_discharge_schedule_in IN discharge_schedule.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_status_in            IN discharge_schedule.flg_status%TYPE DEFAULT NULL,
        create_time_in           IN discharge_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN discharge_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN discharge_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in           IN discharge_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN discharge_schedule.update_institution%TYPE DEFAULT NULL,
        flg_hour_origin_in       IN discharge_schedule.flg_hour_origin%TYPE DEFAULT NULL,
        create_user_in           IN discharge_schedule.create_user%TYPE DEFAULT NULL,
        id_prof_req_in           IN discharge_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in                IN discharge_schedule.dt_req%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_discharge_schedule_in,
                id_episode_in,
                id_patient_in,
                dt_discharge_schedule_in,
                flg_status_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_hour_origin_in,
                create_user_in,
                id_prof_req_in,
                dt_req_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN discharge_schedule%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_discharge_schedule_in => rec_in.id_discharge_schedule,
            id_episode_in            => rec_in.id_episode,
            id_patient_in            => rec_in.id_patient,
            dt_discharge_schedule_in => rec_in.dt_discharge_schedule,
            flg_status_in            => rec_in.flg_status,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            flg_hour_origin_in       => rec_in.flg_hour_origin,
            create_user_in           => rec_in.create_user,
            id_prof_req_in           => rec_in.id_prof_req,
            dt_req_in                => rec_in.dt_req,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN discharge_schedule%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_discharge_schedule_in => rec_in.id_discharge_schedule,
            id_episode_in            => rec_in.id_episode,
            id_patient_in            => rec_in.id_patient,
            dt_discharge_schedule_in => rec_in.dt_discharge_schedule,
            flg_status_in            => rec_in.flg_status,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            flg_hour_origin_in       => rec_in.flg_hour_origin,
            create_user_in           => rec_in.create_user,
            id_prof_req_in           => rec_in.id_prof_req,
            dt_req_in                => rec_in.dt_req,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN discharge_schedule_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_discharge_schedule id_discharge_schedule_cc;
        l_id_episode            id_episode_cc;
        l_id_patient            id_patient_cc;
        l_dt_discharge_schedule dt_discharge_schedule_cc;
        l_flg_status            flg_status_cc;
        l_create_time           create_time_cc;
        l_create_institution    create_institution_cc;
        l_update_user           update_user_cc;
        l_update_time           update_time_cc;
        l_update_institution    update_institution_cc;
        l_flg_hour_origin       flg_hour_origin_cc;
        l_create_user           create_user_cc;
        l_id_prof_req           id_prof_req_cc;
        l_dt_req                dt_req_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_discharge_schedule(i) := col_in(i).id_discharge_schedule;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_patient(i) := col_in(i).id_patient;
            l_dt_discharge_schedule(i) := col_in(i).dt_discharge_schedule;
            l_flg_status(i) := col_in(i).flg_status;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_hour_origin(i) := col_in(i).flg_hour_origin;
            l_create_user(i) := col_in(i).create_user;
            l_id_prof_req(i) := col_in(i).id_prof_req;
            l_dt_req(i) := col_in(i).dt_req;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE discharge_schedule
                   SET id_episode            = nvl(l_id_episode(i), id_episode),
                       id_patient            = nvl(l_id_patient(i), id_patient),
                       dt_discharge_schedule = nvl(l_dt_discharge_schedule(i), dt_discharge_schedule),
                       flg_status            = nvl(l_flg_status(i), flg_status),
                       create_time           = nvl(l_create_time(i), create_time),
                       create_institution    = nvl(l_create_institution(i), create_institution),
                       update_user           = nvl(l_update_user(i), update_user),
                       update_time           = nvl(l_update_time(i), update_time),
                       update_institution    = nvl(l_update_institution(i), update_institution),
                       flg_hour_origin       = nvl(l_flg_hour_origin(i), flg_hour_origin),
                       create_user           = nvl(l_create_user(i), create_user),
                       id_prof_req           = nvl(l_id_prof_req(i), id_prof_req),
                       dt_req                = nvl(l_dt_req(i), dt_req)
                 WHERE id_discharge_schedule = l_id_discharge_schedule(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE discharge_schedule
                   SET id_episode            = l_id_episode(i),
                       id_patient            = l_id_patient(i),
                       dt_discharge_schedule = l_dt_discharge_schedule(i),
                       flg_status            = l_flg_status(i),
                       create_time           = l_create_time(i),
                       create_institution    = l_create_institution(i),
                       update_user           = l_update_user(i),
                       update_time           = l_update_time(i),
                       update_institution    = l_update_institution(i),
                       flg_hour_origin       = l_flg_hour_origin(i),
                       create_user           = l_create_user(i),
                       id_prof_req           = l_id_prof_req(i),
                       dt_req                = l_dt_req(i)
                 WHERE id_discharge_schedule = l_id_discharge_schedule(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;

    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
        END IF;
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN discharge_schedule_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE DISCHARGE_SCHEDULE
SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE discharge_schedule
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE discharge_schedule
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_discharge_schedule_in IN discharge_schedule.id_discharge_schedule%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_schedule
         WHERE id_discharge_schedule = id_discharge_schedule_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_discharge_schedule_in IN discharge_schedule.id_discharge_schedule%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_discharge_schedule_in => id_discharge_schedule_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END del;

    -- Delete all rows for this DD_SCH_FK foreign key value
    PROCEDURE del_dd_sch_fk
    (
        id_prof_req_in  IN discharge_schedule.id_prof_req%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_schedule
         WHERE id_prof_req = id_prof_req_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_dd_sch_fk;

    -- Delete all rows for this DISCH_SCHED_EPIS_FK foreign key value
    PROCEDURE del_disch_sched_epis_fk
    (
        id_episode_in   IN discharge_schedule.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_schedule
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_disch_sched_epis_fk;

    -- Delete all rows for this DISCH_SCHED_PAT_FK foreign key value
    PROCEDURE del_disch_sched_pat_fk
    (
        id_patient_in   IN discharge_schedule.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_schedule
         WHERE id_patient = id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
    END del_disch_sched_pat_fk;

    -- Delete all rows for this DD_SCH_FK foreign key value
    PROCEDURE del_dd_sch_fk
    (
        id_prof_req_in  IN discharge_schedule.id_prof_req%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dd_sch_fk(id_prof_req_in => id_prof_req_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_dd_sch_fk;

    -- Delete all rows for this DISCH_SCHED_EPIS_FK foreign key value
    PROCEDURE del_disch_sched_epis_fk
    (
        id_episode_in   IN discharge_schedule.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_disch_sched_epis_fk(id_episode_in   => id_episode_in,
                                handle_error_in => handle_error_in,
                                rows_out        => rows_out);
    END del_disch_sched_epis_fk;

    -- Delete all rows for this DISCH_SCHED_PAT_FK foreign key value
    PROCEDURE del_disch_sched_pat_fk
    (
        id_patient_in   IN discharge_schedule.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_disch_sched_pat_fk(id_patient_in   => id_patient_in,
                                handle_error_in => handle_error_in,
                                rows_out        => rows_out);
    END del_disch_sched_pat_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM DISCHARGE_SCHEDULE';
        ELSE
            RETURN 'DELETE FROM DISCHARGE_SCHEDULE WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);

    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;

    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(discharge_schedule_inout IN OUT discharge_schedule%ROWTYPE) IS
    BEGIN
        discharge_schedule_inout.id_discharge_schedule := NULL;
        discharge_schedule_inout.id_episode            := NULL;
        discharge_schedule_inout.id_patient            := NULL;
        discharge_schedule_inout.dt_discharge_schedule := NULL;
        discharge_schedule_inout.flg_status            := NULL;
        discharge_schedule_inout.create_time           := NULL;
        discharge_schedule_inout.create_institution    := NULL;
        discharge_schedule_inout.update_user           := NULL;
        discharge_schedule_inout.update_time           := NULL;
        discharge_schedule_inout.update_institution    := NULL;
        discharge_schedule_inout.flg_hour_origin       := NULL;
        discharge_schedule_inout.create_user           := NULL;
        discharge_schedule_inout.id_prof_req           := NULL;
        discharge_schedule_inout.dt_req                := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN discharge_schedule%ROWTYPE IS
        l_discharge_schedule discharge_schedule%ROWTYPE;
    BEGIN
        RETURN l_discharge_schedule;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN discharge_schedule_tc IS
        data discharge_schedule_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM discharge_schedule
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN discharge_schedule_tc IS
        data discharge_schedule_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;

    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_discharge_schedule;
/
