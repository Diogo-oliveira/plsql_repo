/*-- Last Change Revision: $Rev: 2027966 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:49 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_bmng_allocation_bed
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Agosto 27, 2009 8:4:37
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_bmng_allocation_bed_in IN bmng_allocation_bed.id_bmng_allocation_bed%TYPE,
        id_episode_in             IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_patient_in             IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_bed_in                 IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        allocation_notes_in       IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        id_room_in                IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_prof_creation_in       IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in            IN bmng_allocation_bed.dt_creation%TYPE DEFAULT current_timestamp,
        id_prof_release_in        IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        dt_release_in             IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        flg_outdated_in           IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT 'N',
        create_user_in            IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_time_in            IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_time_in            IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        id_epis_nch_in            IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO bmng_allocation_bed
            (id_bmng_allocation_bed,
             id_episode,
             id_patient,
             id_bed,
             allocation_notes,
             id_room,
             id_prof_creation,
             dt_creation,
             id_prof_release,
             dt_release,
             flg_outdated,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_epis_nch)
        VALUES
            (id_bmng_allocation_bed_in,
             id_episode_in,
             id_patient_in,
             id_bed_in,
             allocation_notes_in,
             id_room_in,
             id_prof_creation_in,
             dt_creation_in,
             id_prof_release_in,
             dt_release_in,
             flg_outdated_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_epis_nch_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BMNG_ALLOCATION_BED');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    IF l_name = 'BAB_BED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED',
                                                        value_in           => id_bed_in);
                    END IF;
                    IF l_name = 'BAB_ENH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_NCH',
                                                        value_in           => id_epis_nch_in);
                    END IF;
                    IF l_name = 'BAB_EPI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'BAB_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'BAB_PROF_CREATE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATION',
                                                        value_in           => id_prof_creation_in);
                    END IF;
                    IF l_name = 'BAB_PROF_RELEASE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_RELEASE',
                                                        value_in           => id_prof_release_in);
                    END IF;
                    IF l_name = 'BAB_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_bmng_allocation_bed_in IN bmng_allocation_bed.id_bmng_allocation_bed%TYPE,
        id_episode_in             IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_patient_in             IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_bed_in                 IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        allocation_notes_in       IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        id_room_in                IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_prof_creation_in       IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in            IN bmng_allocation_bed.dt_creation%TYPE DEFAULT current_timestamp,
        id_prof_release_in        IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        dt_release_in             IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        flg_outdated_in           IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT 'N',
        create_user_in            IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_time_in            IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_time_in            IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        id_epis_nch_in            IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_bmng_allocation_bed_in => id_bmng_allocation_bed_in,
            id_episode_in             => id_episode_in,
            id_patient_in             => id_patient_in,
            id_bed_in                 => id_bed_in,
            allocation_notes_in       => allocation_notes_in,
            id_room_in                => id_room_in,
            id_prof_creation_in       => id_prof_creation_in,
            dt_creation_in            => dt_creation_in,
            id_prof_release_in        => id_prof_release_in,
            dt_release_in             => dt_release_in,
            flg_outdated_in           => flg_outdated_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_epis_nch_in            => id_epis_nch_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN bmng_allocation_bed%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec bmng_allocation_bed%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_bmng_allocation_bed := next_key(sequence_in);
        END IF;
        ins(id_bmng_allocation_bed_in => l_rec.id_bmng_allocation_bed,
            id_episode_in             => l_rec.id_episode,
            id_patient_in             => l_rec.id_patient,
            id_bed_in                 => l_rec.id_bed,
            allocation_notes_in       => l_rec.allocation_notes,
            id_room_in                => l_rec.id_room,
            id_prof_creation_in       => l_rec.id_prof_creation,
            dt_creation_in            => l_rec.dt_creation,
            id_prof_release_in        => l_rec.id_prof_release,
            dt_release_in             => l_rec.dt_release,
            flg_outdated_in           => l_rec.flg_outdated,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            id_epis_nch_in            => l_rec.id_epis_nch,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN bmng_allocation_bed%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN bmng_allocation_bed.id_bmng_allocation_bed%TYPE
    
     IS
        retval bmng_allocation_bed.id_bmng_allocation_bed%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_bmng_allocation_bed.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_BMNG_ALLOCATION_BED'));
    END next_key;

    PROCEDURE ins
    (
        id_episode_in              IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_patient_in              IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_bed_in                  IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        allocation_notes_in        IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        id_room_in                 IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_prof_creation_in        IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in             IN bmng_allocation_bed.dt_creation%TYPE DEFAULT current_timestamp,
        id_prof_release_in         IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        dt_release_in              IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        flg_outdated_in            IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT 'N',
        create_user_in             IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_time_in             IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_time_in             IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        id_epis_nch_in             IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_out IN OUT bmng_allocation_bed.id_bmng_allocation_bed%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky bmng_allocation_bed.id_bmng_allocation_bed%TYPE := next_key;
    BEGIN
        ins(id_bmng_allocation_bed_in => l_pky,
            id_episode_in             => id_episode_in,
            id_patient_in             => id_patient_in,
            id_bed_in                 => id_bed_in,
            allocation_notes_in       => allocation_notes_in,
            id_room_in                => id_room_in,
            id_prof_creation_in       => id_prof_creation_in,
            dt_creation_in            => dt_creation_in,
            id_prof_release_in        => id_prof_release_in,
            dt_release_in             => dt_release_in,
            flg_outdated_in           => flg_outdated_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_epis_nch_in            => id_epis_nch_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        id_bmng_allocation_bed_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_episode_in              IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_patient_in              IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_bed_in                  IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        allocation_notes_in        IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        id_room_in                 IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_prof_creation_in        IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in             IN bmng_allocation_bed.dt_creation%TYPE DEFAULT current_timestamp,
        id_prof_release_in         IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        dt_release_in              IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        flg_outdated_in            IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT 'N',
        create_user_in             IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_time_in             IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_time_in             IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        id_epis_nch_in             IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_out IN OUT bmng_allocation_bed.id_bmng_allocation_bed%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in              => id_episode_in,
            id_patient_in              => id_patient_in,
            id_bed_in                  => id_bed_in,
            allocation_notes_in        => allocation_notes_in,
            id_room_in                 => id_room_in,
            id_prof_creation_in        => id_prof_creation_in,
            dt_creation_in             => dt_creation_in,
            id_prof_release_in         => id_prof_release_in,
            dt_release_in              => dt_release_in,
            flg_outdated_in            => flg_outdated_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_epis_nch_in             => id_epis_nch_in,
            id_bmng_allocation_bed_out => id_bmng_allocation_bed_out,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    FUNCTION ins
    (
        id_episode_in         IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_bed_in             IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        allocation_notes_in   IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        id_room_in            IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_prof_creation_in   IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in        IN bmng_allocation_bed.dt_creation%TYPE DEFAULT current_timestamp,
        id_prof_release_in    IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        dt_release_in         IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        flg_outdated_in       IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT 'N',
        create_user_in        IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_time_in        IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_institution_in IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_time_in        IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_institution_in IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        id_epis_nch_in        IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) RETURN bmng_allocation_bed.id_bmng_allocation_bed%TYPE IS
        l_pky bmng_allocation_bed.id_bmng_allocation_bed%TYPE := next_key;
    BEGIN
        ins(id_bmng_allocation_bed_in => l_pky,
            id_episode_in             => id_episode_in,
            id_patient_in             => id_patient_in,
            id_bed_in                 => id_bed_in,
            allocation_notes_in       => allocation_notes_in,
            id_room_in                => id_room_in,
            id_prof_creation_in       => id_prof_creation_in,
            dt_creation_in            => dt_creation_in,
            id_prof_release_in        => id_prof_release_in,
            dt_release_in             => dt_release_in,
            flg_outdated_in           => flg_outdated_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_epis_nch_in            => id_epis_nch_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_episode_in         IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_bed_in             IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        allocation_notes_in   IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        id_room_in            IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_prof_creation_in   IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in        IN bmng_allocation_bed.dt_creation%TYPE DEFAULT current_timestamp,
        id_prof_release_in    IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        dt_release_in         IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        flg_outdated_in       IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT 'N',
        create_user_in        IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_time_in        IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_institution_in IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_time_in        IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_institution_in IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        id_epis_nch_in        IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) RETURN bmng_allocation_bed.id_bmng_allocation_bed%TYPE IS
        l_pky    bmng_allocation_bed.id_bmng_allocation_bed%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_bmng_allocation_bed_in => l_pky,
            id_episode_in             => id_episode_in,
            id_patient_in             => id_patient_in,
            id_bed_in                 => id_bed_in,
            allocation_notes_in       => allocation_notes_in,
            id_room_in                => id_room_in,
            id_prof_creation_in       => id_prof_creation_in,
            dt_creation_in            => dt_creation_in,
            id_prof_release_in        => id_prof_release_in,
            dt_release_in             => dt_release_in,
            flg_outdated_in           => flg_outdated_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_epis_nch_in            => id_epis_nch_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_episode_in         IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_bed_in             IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        allocation_notes_in   IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        id_room_in            IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_prof_creation_in   IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in        IN bmng_allocation_bed.dt_creation%TYPE DEFAULT current_timestamp,
        id_prof_release_in    IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        dt_release_in         IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        flg_outdated_in       IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT 'N',
        create_user_in        IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_time_in        IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_institution_in IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_time_in        IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_institution_in IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        id_epis_nch_in        IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky bmng_allocation_bed.id_bmng_allocation_bed%TYPE := next_key;
    BEGIN
        ins(id_bmng_allocation_bed_in => l_pky,
            id_episode_in             => id_episode_in,
            id_patient_in             => id_patient_in,
            id_bed_in                 => id_bed_in,
            allocation_notes_in       => allocation_notes_in,
            id_room_in                => id_room_in,
            id_prof_creation_in       => id_prof_creation_in,
            dt_creation_in            => dt_creation_in,
            id_prof_release_in        => id_prof_release_in,
            dt_release_in             => dt_release_in,
            flg_outdated_in           => flg_outdated_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_epis_nch_in            => id_epis_nch_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_episode_in         IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_patient_in         IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_bed_in             IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        allocation_notes_in   IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        id_room_in            IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_prof_creation_in   IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in        IN bmng_allocation_bed.dt_creation%TYPE DEFAULT current_timestamp,
        id_prof_release_in    IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        dt_release_in         IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        flg_outdated_in       IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT 'N',
        create_user_in        IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_time_in        IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_institution_in IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_time_in        IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_institution_in IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        id_epis_nch_in        IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        l_pky    bmng_allocation_bed.id_bmng_allocation_bed%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_bmng_allocation_bed_in => l_pky,
            id_episode_in             => id_episode_in,
            id_patient_in             => id_patient_in,
            id_bed_in                 => id_bed_in,
            allocation_notes_in       => allocation_notes_in,
            id_room_in                => id_room_in,
            id_prof_creation_in       => id_prof_creation_in,
            dt_creation_in            => dt_creation_in,
            id_prof_release_in        => id_prof_release_in,
            dt_release_in             => dt_release_in,
            flg_outdated_in           => flg_outdated_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_epis_nch_in            => id_epis_nch_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN bmng_allocation_bed_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO bmng_allocation_bed
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BMNG_ALLOCATION_BED _' || indx,
                                                        value_in           => rows_in(indx).id_bmng_allocation_bed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BED _' || indx,
                                                        value_in           => rows_in(indx).id_bed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ALLOCATION_NOTES _' || indx,
                                                        value_in           => rows_in(indx).allocation_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROOM _' || indx,
                                                        value_in           => rows_in(indx).id_room,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CREATION _' || indx,
                                                        value_in           => rows_in(indx).id_prof_creation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CREATION _' || indx,
                                                        value_in           => rows_in(indx).dt_creation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_RELEASE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_release,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_RELEASE _' || indx,
                                                        value_in           => rows_in(indx).dt_release,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_OUTDATED _' || indx,
                                                        value_in           => rows_in(indx).flg_outdated,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_NCH _' || indx,
                                                        value_in           => rows_in(indx).id_epis_nch,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'BMNG_ALLOCATION_BED',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN bmng_allocation_bed_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_bmng_allocation_bed_in IN bmng_allocation_bed.id_bmng_allocation_bed%TYPE,
        id_episode_in             IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_bed_in                 IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                IN BOOLEAN := TRUE,
        allocation_notes_in       IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        allocation_notes_nin      IN BOOLEAN := TRUE,
        id_room_in                IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_room_nin               IN BOOLEAN := TRUE,
        id_prof_creation_in       IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        id_prof_creation_nin      IN BOOLEAN := TRUE,
        dt_creation_in            IN bmng_allocation_bed.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin           IN BOOLEAN := TRUE,
        id_prof_release_in        IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        id_prof_release_nin       IN BOOLEAN := TRUE,
        dt_release_in             IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        dt_release_nin            IN BOOLEAN := TRUE,
        flg_outdated_in           IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT NULL,
        flg_outdated_nin          IN BOOLEAN := TRUE,
        create_user_in            IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_epis_nch_in            IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        id_epis_nch_nin           IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_episode_n         NUMBER(1);
        l_id_patient_n         NUMBER(1);
        l_id_bed_n             NUMBER(1);
        l_allocation_notes_n   NUMBER(1);
        l_id_room_n            NUMBER(1);
        l_id_prof_creation_n   NUMBER(1);
        l_dt_creation_n        NUMBER(1);
        l_id_prof_release_n    NUMBER(1);
        l_dt_release_n         NUMBER(1);
        l_flg_outdated_n       NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        l_id_epis_nch_n        NUMBER(1);
    BEGIN
    
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n         := sys.diutil.bool_to_int(id_patient_nin);
        l_id_bed_n             := sys.diutil.bool_to_int(id_bed_nin);
        l_allocation_notes_n   := sys.diutil.bool_to_int(allocation_notes_nin);
        l_id_room_n            := sys.diutil.bool_to_int(id_room_nin);
        l_id_prof_creation_n   := sys.diutil.bool_to_int(id_prof_creation_nin);
        l_dt_creation_n        := sys.diutil.bool_to_int(dt_creation_nin);
        l_id_prof_release_n    := sys.diutil.bool_to_int(id_prof_release_nin);
        l_dt_release_n         := sys.diutil.bool_to_int(dt_release_nin);
        l_flg_outdated_n       := sys.diutil.bool_to_int(flg_outdated_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_id_epis_nch_n        := sys.diutil.bool_to_int(id_epis_nch_nin);
    
        UPDATE bmng_allocation_bed
           SET id_episode         = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_patient         = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_bed             = decode(l_id_bed_n, 0, id_bed_in, nvl(id_bed_in, id_bed)),
               allocation_notes   = decode(l_allocation_notes_n,
                                           0,
                                           allocation_notes_in,
                                           nvl(allocation_notes_in, allocation_notes)),
               id_room            = decode(l_id_room_n, 0, id_room_in, nvl(id_room_in, id_room)),
               id_prof_creation   = decode(l_id_prof_creation_n,
                                           0,
                                           id_prof_creation_in,
                                           nvl(id_prof_creation_in, id_prof_creation)),
               dt_creation        = decode(l_dt_creation_n, 0, dt_creation_in, nvl(dt_creation_in, dt_creation)),
               id_prof_release    = decode(l_id_prof_release_n,
                                           0,
                                           id_prof_release_in,
                                           nvl(id_prof_release_in, id_prof_release)),
               dt_release         = decode(l_dt_release_n, 0, dt_release_in, nvl(dt_release_in, dt_release)),
               flg_outdated       = decode(l_flg_outdated_n, 0, flg_outdated_in, nvl(flg_outdated_in, flg_outdated)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution)),
               id_epis_nch        = decode(l_id_epis_nch_n, 0, id_epis_nch_in, nvl(id_epis_nch_in, id_epis_nch))
         WHERE id_bmng_allocation_bed = id_bmng_allocation_bed_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BMNG_ALLOCATION_BED');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    IF l_name = 'BAB_BED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED',
                                                        value_in           => id_bed_in);
                    END IF;
                    IF l_name = 'BAB_ENH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_NCH',
                                                        value_in           => id_epis_nch_in);
                    END IF;
                    IF l_name = 'BAB_EPI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'BAB_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'BAB_PROF_CREATE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATION',
                                                        value_in           => id_prof_creation_in);
                    END IF;
                    IF l_name = 'BAB_PROF_RELEASE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_RELEASE',
                                                        value_in           => id_prof_release_in);
                    END IF;
                    IF l_name = 'BAB_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_bmng_allocation_bed_in IN bmng_allocation_bed.id_bmng_allocation_bed%TYPE,
        id_episode_in             IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        id_patient_in             IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_bed_in                 IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                IN BOOLEAN := TRUE,
        allocation_notes_in       IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        allocation_notes_nin      IN BOOLEAN := TRUE,
        id_room_in                IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_room_nin               IN BOOLEAN := TRUE,
        id_prof_creation_in       IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        id_prof_creation_nin      IN BOOLEAN := TRUE,
        dt_creation_in            IN bmng_allocation_bed.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin           IN BOOLEAN := TRUE,
        id_prof_release_in        IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        id_prof_release_nin       IN BOOLEAN := TRUE,
        dt_release_in             IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        dt_release_nin            IN BOOLEAN := TRUE,
        flg_outdated_in           IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT NULL,
        flg_outdated_nin          IN BOOLEAN := TRUE,
        create_user_in            IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_epis_nch_in            IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        id_epis_nch_nin           IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_bmng_allocation_bed_in => id_bmng_allocation_bed_in,
            id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            id_bed_in                 => id_bed_in,
            id_bed_nin                => id_bed_nin,
            allocation_notes_in       => allocation_notes_in,
            allocation_notes_nin      => allocation_notes_nin,
            id_room_in                => id_room_in,
            id_room_nin               => id_room_nin,
            id_prof_creation_in       => id_prof_creation_in,
            id_prof_creation_nin      => id_prof_creation_nin,
            dt_creation_in            => dt_creation_in,
            dt_creation_nin           => dt_creation_nin,
            id_prof_release_in        => id_prof_release_in,
            id_prof_release_nin       => id_prof_release_nin,
            dt_release_in             => dt_release_in,
            dt_release_nin            => dt_release_nin,
            flg_outdated_in           => flg_outdated_in,
            flg_outdated_nin          => flg_outdated_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            id_epis_nch_in            => id_epis_nch_in,
            id_epis_nch_nin           => id_epis_nch_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_episode_in          IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_patient_in          IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_bed_in              IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        id_bed_nin             IN BOOLEAN := TRUE,
        allocation_notes_in    IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        allocation_notes_nin   IN BOOLEAN := TRUE,
        id_room_in             IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_room_nin            IN BOOLEAN := TRUE,
        id_prof_creation_in    IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        id_prof_creation_nin   IN BOOLEAN := TRUE,
        dt_creation_in         IN bmng_allocation_bed.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin        IN BOOLEAN := TRUE,
        id_prof_release_in     IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        id_prof_release_nin    IN BOOLEAN := TRUE,
        dt_release_in          IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        dt_release_nin         IN BOOLEAN := TRUE,
        flg_outdated_in        IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT NULL,
        flg_outdated_nin       IN BOOLEAN := TRUE,
        create_user_in         IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_epis_nch_in         IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        id_epis_nch_nin        IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_episode_n            NUMBER(1);
        l_id_patient_n            NUMBER(1);
        l_id_bed_n                NUMBER(1);
        l_allocation_notes_n      NUMBER(1);
        l_id_room_n               NUMBER(1);
        l_id_prof_creation_n      NUMBER(1);
        l_dt_creation_n           NUMBER(1);
        l_id_prof_release_n       NUMBER(1);
        l_dt_release_n            NUMBER(1);
        l_flg_outdated_n          NUMBER(1);
        l_create_user_n           NUMBER(1);
        l_create_time_n           NUMBER(1);
        l_create_institution_n    NUMBER(1);
        l_update_user_n           NUMBER(1);
        l_update_time_n           NUMBER(1);
        l_update_institution_n    NUMBER(1);
        l_id_epis_nch_n           NUMBER(1);
        id_bmng_allocation_bed_in bmng_allocation_bed.id_bmng_allocation_bed%TYPE;
    BEGIN
    
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n         := sys.diutil.bool_to_int(id_patient_nin);
        l_id_bed_n             := sys.diutil.bool_to_int(id_bed_nin);
        l_allocation_notes_n   := sys.diutil.bool_to_int(allocation_notes_nin);
        l_id_room_n            := sys.diutil.bool_to_int(id_room_nin);
        l_id_prof_creation_n   := sys.diutil.bool_to_int(id_prof_creation_nin);
        l_dt_creation_n        := sys.diutil.bool_to_int(dt_creation_nin);
        l_id_prof_release_n    := sys.diutil.bool_to_int(id_prof_release_nin);
        l_dt_release_n         := sys.diutil.bool_to_int(dt_release_nin);
        l_flg_outdated_n       := sys.diutil.bool_to_int(flg_outdated_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_id_epis_nch_n        := sys.diutil.bool_to_int(id_epis_nch_nin);
    
        l_sql := 'UPDATE BMNG_ALLOCATION_BED SET ' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                 ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' || ' ID_PATIENT = decode (' ||
                 l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_BED = decode (' || l_id_bed_n || ',0,:id_bed_in, NVL (:id_bed_in, ID_BED)) ' || ',' ||
                 ' ALLOCATION_NOTES = decode (' || l_allocation_notes_n ||
                 ',0,:allocation_notes_in, NVL (:allocation_notes_in, ALLOCATION_NOTES)) ' || ',' ||
                 ' ID_ROOM = decode (' || l_id_room_n || ',0,:id_room_in, NVL (:id_room_in, ID_ROOM)) ' || ',' ||
                 ' ID_PROF_CREATION = decode (' || l_id_prof_creation_n ||
                 ',0,:id_prof_creation_in, NVL (:id_prof_creation_in, ID_PROF_CREATION)) ' || ',' ||
                 ' DT_CREATION = decode (' || l_dt_creation_n ||
                 ',0,:dt_creation_in, NVL (:dt_creation_in, DT_CREATION)) ' || ',' || ' ID_PROF_RELEASE = decode (' ||
                 l_id_prof_release_n || ',0,:id_prof_release_in, NVL (:id_prof_release_in, ID_PROF_RELEASE)) ' || ',' ||
                 ' DT_RELEASE = decode (' || l_dt_release_n || ',0,:dt_release_in, NVL (:dt_release_in, DT_RELEASE)) ' || ',' ||
                 ' FLG_OUTDATED = decode (' || l_flg_outdated_n ||
                 ',0,:flg_outdated_in, NVL (:flg_outdated_in, FLG_OUTDATED)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_EPIS_NCH = decode (' || l_id_epis_nch_n ||
                 ',0,:id_epis_nch_in, NVL (:id_epis_nch_in, ID_EPIS_NCH)) ' || ' where ' || nvl(where_in, '(1=1)') ||
                 ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, id_patient_in, id_bed_in, allocation_notes_in, id_room_in, id_prof_creation_in, dt_creation_in, id_prof_release_in, dt_release_in, flg_outdated_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_epis_nch_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BMNG_ALLOCATION_BED');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    IF l_name = 'BAB_BED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED',
                                                        value_in           => id_bed_in);
                    END IF;
                    IF l_name = 'BAB_ENH_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_NCH',
                                                        value_in           => id_epis_nch_in);
                    END IF;
                    IF l_name = 'BAB_EPI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'BAB_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'BAB_PROF_CREATE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CREATION',
                                                        value_in           => id_prof_creation_in);
                    END IF;
                    IF l_name = 'BAB_PROF_RELEASE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_RELEASE',
                                                        value_in           => id_prof_release_in);
                    END IF;
                    IF l_name = 'BAB_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_episode_in          IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_patient_in          IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_patient_nin         IN BOOLEAN := TRUE,
        id_bed_in              IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        id_bed_nin             IN BOOLEAN := TRUE,
        allocation_notes_in    IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        allocation_notes_nin   IN BOOLEAN := TRUE,
        id_room_in             IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_room_nin            IN BOOLEAN := TRUE,
        id_prof_creation_in    IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        id_prof_creation_nin   IN BOOLEAN := TRUE,
        dt_creation_in         IN bmng_allocation_bed.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin        IN BOOLEAN := TRUE,
        id_prof_release_in     IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        id_prof_release_nin    IN BOOLEAN := TRUE,
        dt_release_in          IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        dt_release_nin         IN BOOLEAN := TRUE,
        flg_outdated_in        IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT NULL,
        flg_outdated_nin       IN BOOLEAN := TRUE,
        create_user_in         IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_epis_nch_in         IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        id_epis_nch_nin        IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in          => id_episode_in,
            id_episode_nin         => id_episode_nin,
            id_patient_in          => id_patient_in,
            id_patient_nin         => id_patient_nin,
            id_bed_in              => id_bed_in,
            id_bed_nin             => id_bed_nin,
            allocation_notes_in    => allocation_notes_in,
            allocation_notes_nin   => allocation_notes_nin,
            id_room_in             => id_room_in,
            id_room_nin            => id_room_nin,
            id_prof_creation_in    => id_prof_creation_in,
            id_prof_creation_nin   => id_prof_creation_nin,
            dt_creation_in         => dt_creation_in,
            dt_creation_nin        => dt_creation_nin,
            id_prof_release_in     => id_prof_release_in,
            id_prof_release_nin    => id_prof_release_nin,
            dt_release_in          => dt_release_in,
            dt_release_nin         => dt_release_nin,
            flg_outdated_in        => flg_outdated_in,
            flg_outdated_nin       => flg_outdated_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            id_epis_nch_in         => id_epis_nch_in,
            id_epis_nch_nin        => id_epis_nch_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN bmng_allocation_bed%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_bmng_allocation_bed_in => rec_in.id_bmng_allocation_bed,
            id_episode_in             => rec_in.id_episode,
            id_patient_in             => rec_in.id_patient,
            id_bed_in                 => rec_in.id_bed,
            allocation_notes_in       => rec_in.allocation_notes,
            id_room_in                => rec_in.id_room,
            id_prof_creation_in       => rec_in.id_prof_creation,
            dt_creation_in            => rec_in.dt_creation,
            id_prof_release_in        => rec_in.id_prof_release,
            dt_release_in             => rec_in.dt_release,
            flg_outdated_in           => rec_in.flg_outdated,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            id_epis_nch_in            => rec_in.id_epis_nch
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN bmng_allocation_bed%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_bmng_allocation_bed_in => rec_in.id_bmng_allocation_bed,
            id_episode_in             => rec_in.id_episode,
            id_patient_in             => rec_in.id_patient,
            id_bed_in                 => rec_in.id_bed,
            allocation_notes_in       => rec_in.allocation_notes,
            id_room_in                => rec_in.id_room,
            id_prof_creation_in       => rec_in.id_prof_creation,
            dt_creation_in            => rec_in.dt_creation,
            id_prof_release_in        => rec_in.id_prof_release,
            dt_release_in             => rec_in.dt_release,
            flg_outdated_in           => rec_in.flg_outdated,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            id_epis_nch_in            => rec_in.id_epis_nch
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_bmng_allocation_bed_in IN bmng_allocation_bed.id_bmng_allocation_bed%TYPE,
        id_episode_in             IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_patient_in             IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_bed_in                 IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        allocation_notes_in       IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        id_room_in                IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_prof_creation_in       IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in            IN bmng_allocation_bed.dt_creation%TYPE DEFAULT NULL,
        id_prof_release_in        IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        dt_release_in             IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        flg_outdated_in           IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT NULL,
        create_user_in            IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_time_in            IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_time_in            IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        id_epis_nch_in            IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        upd(id_bmng_allocation_bed_in => id_bmng_allocation_bed_in,
            id_episode_in             => id_episode_in,
            id_patient_in             => id_patient_in,
            id_bed_in                 => id_bed_in,
            allocation_notes_in       => allocation_notes_in,
            id_room_in                => id_room_in,
            id_prof_creation_in       => id_prof_creation_in,
            dt_creation_in            => dt_creation_in,
            id_prof_release_in        => id_prof_release_in,
            dt_release_in             => dt_release_in,
            flg_outdated_in           => flg_outdated_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_epis_nch_in            => id_epis_nch_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_bmng_allocation_bed_in => id_bmng_allocation_bed_in,
                id_episode_in             => id_episode_in,
                id_patient_in             => id_patient_in,
                id_bed_in                 => id_bed_in,
                allocation_notes_in       => allocation_notes_in,
                id_room_in                => id_room_in,
                id_prof_creation_in       => id_prof_creation_in,
                dt_creation_in            => dt_creation_in,
                id_prof_release_in        => id_prof_release_in,
                dt_release_in             => dt_release_in,
                flg_outdated_in           => flg_outdated_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                id_epis_nch_in            => id_epis_nch_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_bmng_allocation_bed_in IN bmng_allocation_bed.id_bmng_allocation_bed%TYPE,
        id_episode_in             IN bmng_allocation_bed.id_episode%TYPE DEFAULT NULL,
        id_patient_in             IN bmng_allocation_bed.id_patient%TYPE DEFAULT NULL,
        id_bed_in                 IN bmng_allocation_bed.id_bed%TYPE DEFAULT NULL,
        allocation_notes_in       IN bmng_allocation_bed.allocation_notes%TYPE DEFAULT NULL,
        id_room_in                IN bmng_allocation_bed.id_room%TYPE DEFAULT NULL,
        id_prof_creation_in       IN bmng_allocation_bed.id_prof_creation%TYPE DEFAULT NULL,
        dt_creation_in            IN bmng_allocation_bed.dt_creation%TYPE DEFAULT NULL,
        id_prof_release_in        IN bmng_allocation_bed.id_prof_release%TYPE DEFAULT NULL,
        dt_release_in             IN bmng_allocation_bed.dt_release%TYPE DEFAULT NULL,
        flg_outdated_in           IN bmng_allocation_bed.flg_outdated%TYPE DEFAULT NULL,
        create_user_in            IN bmng_allocation_bed.create_user%TYPE DEFAULT NULL,
        create_time_in            IN bmng_allocation_bed.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN bmng_allocation_bed.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN bmng_allocation_bed.update_user%TYPE DEFAULT NULL,
        update_time_in            IN bmng_allocation_bed.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN bmng_allocation_bed.update_institution%TYPE DEFAULT NULL,
        id_epis_nch_in            IN bmng_allocation_bed.id_epis_nch%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_bmng_allocation_bed_in,
                id_episode_in,
                id_patient_in,
                id_bed_in,
                allocation_notes_in,
                id_room_in,
                id_prof_creation_in,
                dt_creation_in,
                id_prof_release_in,
                dt_release_in,
                flg_outdated_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_epis_nch_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN bmng_allocation_bed_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_bmng_allocation_bed id_bmng_allocation_bed_cc;
        l_id_episode             id_episode_cc;
        l_id_patient             id_patient_cc;
        l_id_bed                 id_bed_cc;
        l_allocation_notes       allocation_notes_cc;
        l_id_room                id_room_cc;
        l_id_prof_creation       id_prof_creation_cc;
        l_dt_creation            dt_creation_cc;
        l_id_prof_release        id_prof_release_cc;
        l_dt_release             dt_release_cc;
        l_flg_outdated           flg_outdated_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
        l_id_epis_nch            id_epis_nch_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_bmng_allocation_bed(i) := col_in(i).id_bmng_allocation_bed;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_bed(i) := col_in(i).id_bed;
            l_allocation_notes(i) := col_in(i).allocation_notes;
            l_id_room(i) := col_in(i).id_room;
            l_id_prof_creation(i) := col_in(i).id_prof_creation;
            l_dt_creation(i) := col_in(i).dt_creation;
            l_id_prof_release(i) := col_in(i).id_prof_release;
            l_dt_release(i) := col_in(i).dt_release;
            l_flg_outdated(i) := col_in(i).flg_outdated;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_epis_nch(i) := col_in(i).id_epis_nch;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE bmng_allocation_bed
                   SET id_episode         = nvl(l_id_episode(i), id_episode),
                       id_patient         = nvl(l_id_patient(i), id_patient),
                       id_bed             = nvl(l_id_bed(i), id_bed),
                       allocation_notes   = nvl(l_allocation_notes(i), allocation_notes),
                       id_room            = nvl(l_id_room(i), id_room),
                       id_prof_creation   = nvl(l_id_prof_creation(i), id_prof_creation),
                       dt_creation        = nvl(l_dt_creation(i), dt_creation),
                       id_prof_release    = nvl(l_id_prof_release(i), id_prof_release),
                       dt_release         = nvl(l_dt_release(i), dt_release),
                       flg_outdated       = nvl(l_flg_outdated(i), flg_outdated),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution),
                       id_epis_nch        = nvl(l_id_epis_nch(i), id_epis_nch)
                 WHERE id_bmng_allocation_bed = l_id_bmng_allocation_bed(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE bmng_allocation_bed
                   SET id_episode         = l_id_episode(i),
                       id_patient         = l_id_patient(i),
                       id_bed             = l_id_bed(i),
                       allocation_notes   = l_allocation_notes(i),
                       id_room            = l_id_room(i),
                       id_prof_creation   = l_id_prof_creation(i),
                       dt_creation        = l_dt_creation(i),
                       id_prof_release    = l_id_prof_release(i),
                       dt_release         = l_dt_release(i),
                       flg_outdated       = l_flg_outdated(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i),
                       id_epis_nch        = l_id_epis_nch(i)
                 WHERE id_bmng_allocation_bed = l_id_bmng_allocation_bed(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN bmng_allocation_bed_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE BMNG_ALLOCATION_BED
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE BMNG_ALLOCATION_BED
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE BMNG_ALLOCATION_BED set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE BMNG_ALLOCATION_BED set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_bmng_allocation_bed_in IN bmng_allocation_bed.id_bmng_allocation_bed%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_allocation_bed
         WHERE id_bmng_allocation_bed = id_bmng_allocation_bed_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_bmng_allocation_bed_in IN bmng_allocation_bed.id_bmng_allocation_bed%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_bmng_allocation_bed_in => id_bmng_allocation_bed_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_BMNG_ALLOCATION_BED
    PROCEDURE del_id_bmng_allocation_bed
    (
        id_bmng_allocation_bed_in IN bmng_allocation_bed.id_bmng_allocation_bed%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_allocation_bed
         WHERE id_bmng_allocation_bed = id_bmng_allocation_bed_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_bmng_allocation_bed;

    -- Delete all rows for primary key column ID_BMNG_ALLOCATION_BED
    PROCEDURE del_id_bmng_allocation_bed
    (
        id_bmng_allocation_bed_in IN bmng_allocation_bed.id_bmng_allocation_bed%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_bmng_allocation_bed(id_bmng_allocation_bed_in => id_bmng_allocation_bed_in,
                                   handle_error_in           => handle_error_in,
                                   rows_out                  => rows_out);
    END del_id_bmng_allocation_bed;

    PROCEDURE del_bab_bed_fk
    (
        id_bed_in       IN bmng_allocation_bed.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_allocation_bed
         WHERE id_bed = del_bab_bed_fk.id_bed_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bab_bed_fk;

    PROCEDURE del_bab_bed_fk
    (
        id_bed_in       IN bmng_allocation_bed.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bab_bed_fk(id_bed_in => id_bed_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bab_bed_fk;

    PROCEDURE del_bab_enh_fk
    (
        id_epis_nch_in  IN bmng_allocation_bed.id_epis_nch%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_allocation_bed
         WHERE id_epis_nch = del_bab_enh_fk.id_epis_nch_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bab_enh_fk;

    PROCEDURE del_bab_enh_fk
    (
        id_epis_nch_in  IN bmng_allocation_bed.id_epis_nch%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bab_enh_fk(id_epis_nch_in => id_epis_nch_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bab_enh_fk;

    PROCEDURE del_bab_epi_fk
    (
        id_episode_in   IN bmng_allocation_bed.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_allocation_bed
         WHERE id_episode = del_bab_epi_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bab_epi_fk;

    PROCEDURE del_bab_epi_fk
    (
        id_episode_in   IN bmng_allocation_bed.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bab_epi_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bab_epi_fk;

    PROCEDURE del_bab_pat_fk
    (
        id_patient_in   IN bmng_allocation_bed.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_allocation_bed
         WHERE id_patient = del_bab_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bab_pat_fk;

    PROCEDURE del_bab_pat_fk
    (
        id_patient_in   IN bmng_allocation_bed.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bab_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bab_pat_fk;

    PROCEDURE del_bab_prof_create_fk
    (
        id_prof_creation_in IN bmng_allocation_bed.id_prof_creation%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_allocation_bed
         WHERE id_prof_creation = del_bab_prof_create_fk.id_prof_creation_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bab_prof_create_fk;

    PROCEDURE del_bab_prof_create_fk
    (
        id_prof_creation_in IN bmng_allocation_bed.id_prof_creation%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bab_prof_create_fk(id_prof_creation_in => id_prof_creation_in,
                               handle_error_in     => handle_error_in,
                               rows_out            => rows_out);
    END del_bab_prof_create_fk;

    PROCEDURE del_bab_prof_release_fk
    (
        id_prof_release_in IN bmng_allocation_bed.id_prof_release%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_allocation_bed
         WHERE id_prof_release = del_bab_prof_release_fk.id_prof_release_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bab_prof_release_fk;

    PROCEDURE del_bab_prof_release_fk
    (
        id_prof_release_in IN bmng_allocation_bed.id_prof_release%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bab_prof_release_fk(id_prof_release_in => id_prof_release_in,
                                handle_error_in    => handle_error_in,
                                rows_out           => rows_out);
    END del_bab_prof_release_fk;

    PROCEDURE del_bab_room_fk
    (
        id_room_in      IN bmng_allocation_bed.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_allocation_bed
         WHERE id_room = del_bab_room_fk.id_room_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bab_room_fk;

    PROCEDURE del_bab_room_fk
    (
        id_room_in      IN bmng_allocation_bed.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bab_room_fk(id_room_in => id_room_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bab_room_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM BMNG_ALLOCATION_BED';
        ELSE
            RETURN 'DELETE FROM BMNG_ALLOCATION_BED WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_ALLOCATION_BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_ALLOCATION_BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(bmng_allocation_bed_inout IN OUT bmng_allocation_bed%ROWTYPE) IS
    BEGIN
        bmng_allocation_bed_inout.id_bmng_allocation_bed := NULL;
        bmng_allocation_bed_inout.id_episode             := NULL;
        bmng_allocation_bed_inout.id_patient             := NULL;
        bmng_allocation_bed_inout.id_bed                 := NULL;
        bmng_allocation_bed_inout.allocation_notes       := NULL;
        bmng_allocation_bed_inout.id_room                := NULL;
        bmng_allocation_bed_inout.id_prof_creation       := NULL;
        bmng_allocation_bed_inout.dt_creation            := current_timestamp;
        bmng_allocation_bed_inout.id_prof_release        := NULL;
        bmng_allocation_bed_inout.dt_release             := NULL;
        bmng_allocation_bed_inout.flg_outdated           := 'N';
        bmng_allocation_bed_inout.create_user            := NULL;
        bmng_allocation_bed_inout.create_time            := NULL;
        bmng_allocation_bed_inout.create_institution     := NULL;
        bmng_allocation_bed_inout.update_user            := NULL;
        bmng_allocation_bed_inout.update_time            := NULL;
        bmng_allocation_bed_inout.update_institution     := NULL;
        bmng_allocation_bed_inout.id_epis_nch            := NULL;
    END initrec;

    FUNCTION initrec RETURN bmng_allocation_bed%ROWTYPE IS
        l_bmng_allocation_bed bmng_allocation_bed%ROWTYPE;
    BEGIN
        l_bmng_allocation_bed.dt_creation  := current_timestamp;
        l_bmng_allocation_bed.flg_outdated := 'N';
        RETURN l_bmng_allocation_bed;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN bmng_allocation_bed_tc IS
        data bmng_allocation_bed_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM bmng_allocation_bed
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN bmng_allocation_bed_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data bmng_allocation_bed_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_bmng_allocation_bed;
/
